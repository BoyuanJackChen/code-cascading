[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if s[0] == ']' or s[0] == ':':\n        return -1\n    if n == 1:\n        return 1\n    if s[n-1] == ']':\n        return -1\n    if s[n-1] == '|' or s[n-1] == ':':\n        return -1\n    if s[n-2] == '|' or s[n-2] == ':':\n        return -1\n    return s.count(']') + s.count('[') + s.count('|') + s.count(':') + 1\n\nprint(solution(input().strip()))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    # The solution can contain at most 2 * n - 3 characters\n    # because it can be:\n    # - opening brackets and closing brackets\n    # - vertical lines\n    # - a colon\n    # - a dash\n    # - a dash or a colon\n    # The number of opening and closing brackets is always equal\n    # The number of vertical lines is at most n\n    #\n    # So the maximum number of characters is 2 * n - 3\n    # and the number of spaces is at most 2 * n - 4\n    # which means we can have at most 2 * (n - 1) - 3 spaces\n    # and a dash before the vertical lines\n    #\n    # The total number of characters is at most 2 * (n - 1)\n    #\n    # Therefore we can have at most 2 * (n - 1) - 3 spaces before\n    # the vertical lines\n    #\n    # The number of vertical lines - 1 is at most n - 1\n    #\n    # The number of spaces before the vertical lines is at most n - 2\n    #\n    # Therefore we can have at most (2 * (n - 1) - 3) spaces before\n    # the vertical lines\n    #\n    # So the maximum number of spaces is 2 * (n - 1) - 3\n    #\n    # So the maximum number of characters is 2 * (n - 1) - 3 + 2 * (n - 1) - 3\n    #\n    # But in the worst case n is 1 and we have only one space, so the total number of characters is 2 - 1 + 1 = 2\n    #\n    # In any case we can split the string into strings of length at most 2 * (n - 1) - 3\n    #\n    # We can then remove the first spaces and the last spaces\n    #\n    # The maximum number of characters is 2 * (n - 1) - 3 + 2 * (n - 1) - 3 - 2 = 2 * (n - 1) - 3\n\n    # print(solution(stdin))\n\n    # The space before the vertical lines are n - 2\n    # The space after the vertical lines are n - 1\n\n    # The maximum number of characters is 2 * (n - 1) - 3 + 2 * (n - 1) - 3 - (n - 2) = 2 * (n - 1) - 3\n\n    # And the maximum number of spaces is 2 * (n - 1) - 3\n    # and the maximum number of spaces before the vertical lines is 2 * (n - 1) - 3\n\n    # So the maximum number of characters is 2 * (n - 1) - 3 + 2 * (n - 1) - 3 - 2 * (n - 1) - 3 = 2 * (n - 1) - 3\n\n    # print(solution(stdin))\n\n    # print(len(solution(stdin)) - 2)\n    return stdin\n\n\nprint(solution(\"[a:b:|]\"), 4)\nprint(solution(\"[]:[|:]\"), -1)\nprint(solution(\"]:[|:]\"), -1)\nprint(solution(\"]][|[|]\"), -1)\nprint(solution(\"][|:|]\"), -1)\nprint(solution(\"[a:b]|[c:d]\"), 3)\nprint(solution(\"[a:b][c:d]|[e:f]\"), 5)\nprint(solution(\"[a:b][c:d]|[e:f][g:h]\"), 6)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j]\"), 10)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l]\"), 11)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n]\"), 12)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p]\"), 13)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r]\"), 14)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r][s:t]\"), 15)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r][s:t][u:v]\"), 16)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r][s:t][u:v][w:x]\"), 17)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r][s:t][u:v][w:x][y:z]\"), 18)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r][s:t][u:v][w:x][y:z][t:u][v:w]\"), 19)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r][s:t][u:v][w:x][y:z][t:u][v:w][x:y][w:t]\"), 20)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r][s:t][u:v][w:x][y:z][t:u][v:w][x:y][w:t][u:x]\"), 21)\nprint(solution(\"[a:b][c:d]|[e:f][g:h][i:j][k:l][m:n][o:p][q:r][s:t][u:v][w:x][y:z][t:u][v:w][x:y][w:t][u:x][v:w][y:z][t:u][v:w][x:y][w:t][u:x][v:w][y:z][t:u][v:w][x:y][w:t][u:x][v:w][y:z][t:u][v:w][x:y][w:t][u:x][v:w][y:z][t:u][v:w][x:y][w:t][u:x][v:w][y:z]["
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    openingBrackets = set(['[', '{', '<'])\n    closingBrackets = set([']', '}', '>'])\n    colon = ':'\n    pipe = '|'\n    answers = []\n\n    for i in range(0, len(stdin)):\n        if stdin[i] in openingBrackets:\n            answers.append(stdin[i])\n        elif stdin[i] in closingBrackets:\n            answers.append(stdin[i])\n        elif stdin[i] in colon:\n            if len(answers) > 0:\n                answers.pop()\n        elif stdin[i] in pipe:\n            if len(answers) > 0:\n                answers.append('|')\n            else:\n                answers.append('|')\n\n    if len(answers) % 2 == 1 or '[' in answers or '{' in answers or '<' in answers:\n        return '-1'\n    else:\n        return str(len(answers))\n\nprint(solution(\"[::]\"))\nprint(solution(\"[:||:]\") )\nprint(solution(\"[:|||:]\") )\nprint(solution(\"[:|:]\") )\nprint(solution(\"[]]\") )\nprint(solution(\"[{}]\") )\nprint(solution(\"<>\") )\nprint(solution(\"[[[]]]\") )\nprint(solution(\"[][]\") )\nprint(solution(\"[:||:][:||:][:||:]\") )\nprint(solution(\"[:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:][:||:]["
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    # count the number of brackets in the s\n    num_brackets = s.count('[')\n    num_colon = s.count(':')\n    num_vertical = s.count('|')\n    \n    # check if there are the same amount of brackets\n    if num_brackets == num_colon and num_brackets == num_vertical:\n        # check if there is at least one closing bracket\n        if s[-1] == ']':\n            # check if there are two opening brackets\n            if s[0] == '[' and s[-2] == '[':\n                # check if the s is not empty\n                if len(s) > 1:\n                    return len(s)\n    return -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c, m = stdin.split('|')\n    c, m = [ord(i) for i in c], [ord(i) for i in m]\n    if c[0] == m[0]!= c[2] == m[2]!= c[4] == m[4]!= c[6] == m[6]!= c[8] == m[8]!= c[10] == m[10]:\n        print(len(c) - 10)\n    else:\n        print(-1)\n\nsolution(\"[a:b:|]\")\nsolution(\"]:[|:]\")\nsolution(\"]:[|]\")\nsolution(\"]:[|:|]\")\nsolution(\"]:[|:|:|]\")\nsolution(\"]:[|:|:|:|]\")\nsolution(\"|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|:|]\")\nsolution(\"|:|:|:|:|:|:|:|:|:|:|:|"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_accordion(s):\n        return (s.startswith('[::') and s.endswith('::]')) \\\n            or (s.startswith('[:||') and s.endswith('||:]')) \\\n            or (s.startswith('[:||') and s.endswith('|||]')) \\\n            or (s.startswith('[|:') and s.endswith('||]'))\n\n    def count_del(s):\n        ans = 0\n        count = 0\n        for i in s:\n            if i == '[':\n                count += 1\n            if i == ':':\n                count += 1\n            if i == '|':\n                count += 1\n            if i == ']':\n                ans += count\n                count = 0\n        return ans\n\n    if not is_accordion(stdin):\n        return -1\n    return str(count_del(stdin))\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    output_string = []\n    string_to_process = stdin\n    while len(string_to_process) > 0:\n        start = string_to_process.find('[')\n        end = string_to_process.find(']')\n        if start == -1:\n            output_string.append(string_to_process)\n            break\n        if end == -1:\n            output_string.append(string_to_process[start:])\n            string_to_process = string_to_process[start+1:]\n            continue\n        if end < start:\n            output_string.append(string_to_process[start:])\n            string_to_process = string_to_process[start+1:]\n            continue\n        if end > start:\n            output_string.append(string_to_process[start:end])\n            string_to_process = string_to_process[end+1:]\n    return ''.join(output_string)\n\n\nprint(solution(input()))"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin\n    acc = []\n    stack = []\n    for c in s:\n        if c == \"[\":\n            stack.append(\"[\")\n        elif c == \"|\":\n            if len(stack) > 0 and stack[-1] == \"[\":\n                acc.append(\"|\")\n                stack.pop()\n            else:\n                stack.append(\"|\")\n        elif c == \":\":\n            if len(stack) > 0 and stack[-1] == \"[\":\n                acc.append(\":\")\n                stack.pop()\n            else:\n                stack.append(\":\")\n        elif c == \"]\":\n            if len(stack) > 0 and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                stack.append(\"]\")\n        else:\n            acc.append(c)\n    return \"\".join(acc)\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"[\", \"\").replace(\"]\", \"\").replace(\":\", \"|\")\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    stack = []\n    acc = []\n    for c in s:\n        if c == ']' and len(stack) and stack[-1] == '|':\n            stack.pop()\n            stack.pop()\n            acc.append(':')\n        else:\n            stack.append(c)\n    if len(stack):\n        return -1\n    return len(acc)\nprint(solution(input()))\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = 0\n    max_n = 0\n    for n in range(1, x+1):\n        num_sum = 0\n        for n_ch in str(n):\n            num_sum += int(n_ch)\n        if num_sum > max_sum:\n            max_sum = num_sum\n            max_n = n\n    return str(max_n)\n\ndef"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x = int(stdin)\n    my_set = set()\n    for i in range(1,x+1):\n        sum = 0\n        for j in list(str(i)):\n            sum+=int(j)\n        my_set.add(sum)\n    return max(my_set)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    i = 1\n    a = n\n    s = 0\n    while a > 0:\n        b = a % 10\n        a = a // 10\n        s += b\n    while s > 0:\n        if i % s == 0:\n            return str(i)\n        i += 1\n        s = 0\n        for j in str(i):\n            b = int(j)\n            s += b\n    return str(n)\n    \n    \ndef"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input in string format\n    :return: solution in string format\n    \"\"\"\n    x = int(stdin)\n    digit_sum_list = []\n    for i in range(1, x + 1):\n        number = str(i)\n        sum_digits = 0\n        for digit in number:\n            sum_digits += int(digit)\n        digit_sum_list.append(sum_digits)\n    return str(max(digit_sum_list))\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    s = str(x)\n    y = list(map(int, s))\n    a = [int(a) for a in s]\n    print(max(a))\n    return 'n'"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n\n    def is_bigger(i):\n        return sum(int(d) for d in str(i)) > sum(int(d) for d in str(x))\n\n    solution = [i for i in range(x, 0, -1) if not is_bigger(i)]\n\n    return str(max(solution)) if solution else '0'\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    # create list of possible answer\n    ans_list = []\n    for num in range(10**(int(math.log(x, 10))), x+1):\n        ans = 0\n        for nums in str(num):\n            ans += int(nums)\n        ans_list.append(ans)\n    \n    # find the max\n    ans = 0\n    for ans in ans_list:\n        if ans > ans_list[ans_list.index(ans) - 1]:\n            break\n    return str(num)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 9 == 0:\n        return str(x - 1)\n    else:\n        return str(x)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    digit = 0\n    n = 0\n    while num:\n        if num % 10!= 0:\n            n += 1\n            digit = num % 10\n        num //= 10\n    return n if digit == 0 else n + num * 9 - 1"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(input())\n    "
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if len(n) > 1:\n        n = n[-1]\n    else:\n        n = n[0]\n    if len(n) == 1 and n[0]!= '0':\n        return 0\n    n = n[::-1]\n    print(n)\n    for i in range(len(n)):\n        if n[i] == '0':\n            continue\n        else:\n            if i + 1 < len(n):\n                if n[i + 1] == '0':\n                    n = n[0:i] + '1' + n[i + 2:len(n)]\n                else:\n                    n = n[0:i] + '1' + n[i + 1:len(n)]\n            else:\n                n = n[0:i] + '1'\n            break\n    if n[0] == '0':\n        return 0\n    return len(n)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\n\nregex = r\"^(\\d+)\"\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    years = int(stdin)\n    while True:\n        str_year = str(years)\n        if \"0\" in str_year:\n            if any(int(i) == 0 for i in str_year):\n                continue\n            years += 1\n            continue\n        if len(set(str_year)) == 1:\n            break\n        years += 1\n    return str(years - int(str_year))\n\"\"\"\nfrom time import time\nfrom itertools import accumulate\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    if n == 1:\n        ans = 0\n    elif n % 100 == 0:\n        ans = n // 100 - 1\n    else:\n        ans = n // 100\n    return str(ans)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    num = int(stdin)\n    while not (num % 10 == 0 or str(num)[::-1].find('0') == -1):\n        num += 1\n    return num - int(stdin)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    y = str(n)[::-1]\n    res = 0\n    while True:\n        n = n % 10\n        if n == 0:\n            res += 1\n            n = n + 1\n            res = res * 10\n            if res <= n:\n                print(res)\n            else:\n                break\n        else:\n            break\n    return n\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, q = map(int, stdin.split(' '))\n    # print(n, q)\n    res = [0] * (n + 1)\n    for i in range(q):\n        l, r = map(int, stdin.split(' '))\n        for j in range(l, r + 1):\n            res[j] = 1\n    return sum(res[1:])\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return''.join(map(str, solution()))"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get number of sections and number of painters from stdin\n    and find the max number of sections painted by 2 painters.\n\n    :param str stdin: input from stdin\n    :return: the max number of sections painted by 2 painters\n    :rtype: str\n\n    >>> solution('7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5')\n    7\n    \"\"\"\n    sections, painters = map(int, stdin.split('\\n')[0].split())\n    sections_painted = [0] * sections\n    for painter in stdin.split('\\n')[1:]:\n        start, finish = map(int, painter.split())\n        sections_painted[start - 1: finish] = [1] * (finish - start + 1)\n    painters -= 1\n    return str(sum(sections_painted) + (sections - sum(sections_painted)))\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    @param stdin: input on STDIN\n    @return: solution string\n    \"\"\"\n    # Your code here\n    # lines = stdin.splitlines()\n    # lines = stdin.split('\\n')\n    # lines = [line.split('\\n') for line in stdin.split('\\n\\n')]\n    # lines = [line for line in stdin.split('\\n')]\n    # lines = [line.split('\\n') for line in stdin.split('\\n')]\n    lines = stdin.split('\\n\\n')\n    lines = [line.split('\\n') for line in lines]\n    lines = [[int(s) for s in line] for line in lines]\n    count = 0\n    for line in lines:\n        i = 0\n        while i < len(line)-1:\n            count += line[i] - line[i+1]\n            i += 2\n    return count"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(i) for i in stdin.split('\\n')[:2]]\n    painters = []\n    for i in stdin.split('\\n')[2:]:\n        painters.append([int(i) for i in i.split()])\n\n    def paint(painter, start, finish):\n        if start > finish:\n            return\n        if start == finish:\n            return painter[start]\n        else:\n            return max(paint(painter, start, (start + finish) // 2),\n                       paint(painter, (start + finish) // 2 + 1, finish))\n    return max([paint(painter, 1, n) for painter in painters])\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out how many sections can be painted by the optimal painters\"\"\"\n    painters = [stdin.split(\"\\n\")[i].split(\" \") for i in range(int(stdin.split(\"\\n\")[0].split(\" \")[1]))]\n    # for i in painters:\n    #     print(i)\n\n    painters = sorted(painters, key=lambda x: int(x[0]))\n    # for i in painters:\n    #     print(i)\n\n    # print(painters)\n    painted = 0\n    for i in painters:\n        # print(i[0], i[1])\n        if painted < int(i[1]):\n            painted += 1\n    # print(painted)\n    return painted"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, q = map(int, stdin.readline().split())\n    n, q = map(int, stdin.readline().split())\n    lrs = []\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        lrs.append((l, r))\n\n    lrs.sort(key=lambda x: x[1])\n    lrs.sort(key=lambda x: x[0])\n    # print(lrs)\n\n    result = 0\n    idx = 0\n    for i in range(q - 2):\n        j = i + 1\n        while j < q and lrs[j][0] <= lrs[idx][1]:\n            j += 1\n        result += lrs[idx][1] - lrs[i][0]\n        idx = j\n\n    print(result)\n    return ''\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    h, m = map(int, stdin.split())\n    t = 0\n    while h >= 12 or m >= 60:\n        t += 1\n        h -= 12\n        m -= 60\n    return t if (h * 60 + m) % (60 * 24) >= 7 * 60 else t + 1"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    def f(s):\n        a = deque(s)\n        q = deque()\n        s = ''\n        while len(a) > 0:\n            t = a.popleft()\n            if t == '7':\n                q.append(t)\n            else:\n                s += t\n        return q, s\n\n    x = int(stdin)\n    h = [int(stdin) for stdin in stdin.split(' ')]\n    i = 2\n    j = h[0]\n    while i < x:\n        h[i] = h[i] + h[i - 1]\n        if h[i] >= 24:\n            h[i] -= 24\n        if h[i] < j:\n            j = h[i]\n        i += 1\n    print(h)\n    b = f(str(h[0]))[0]\n    c = f(str(h[1]))[0]\n    q = []\n    while len(b) > 0:\n        if b.popleft() == '7':\n            q.append(b.popleft())\n    while len(c) > 0:\n        if c.popleft() == '7':\n            q.append(c.popleft())\n    return str(len(q))\n\n\nprint(solution('3 11 23'))\n\n\ndef"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, hh, mm = map(int, stdin.split())\n    return x * (60 * 60 // (x * 60 + mm) + hh * 60 // x) + min(x * 60 + mm - hh * 60 * 60 // x,\n                                                                x * 60 + mm) + max(0, hh * 60 // x - 60 * 60 // (\n                                                                                 x * 60 + mm)) + 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the smallest number of times Jamie needs to press the button.\"\"\"\n    return ''\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = int(stdin[0])\n    h, m = list(map(int, stdin[1].split(\" \")))\n    print(x - h * 60 - m)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    time, hour, minute = stdin.split(\" \")\n    minute = int(minute)\n    hour = int(hour)\n    time = int(time)\n    day = int(time/24)\n    rem = time - (day * 24)\n    \n    #Find minute\n    minute = minute + day*60\n    \n    #Find hour\n    hour = hour + day\n    \n    #Add \"7\"\n    rem = rem + 7\n    if(rem > 60):\n        minute = minute + rem - 60\n        hour = hour + 1\n        rem = rem - 60\n    \n    #Add \"7\"\n    rem = rem + 7\n    \n    if(rem > 60):\n        minute = minute + rem - 60\n        hour = hour + 1\n        rem = rem - 60\n        \n    if(rem > 60):\n        minute = minute + rem - 60\n        hour = hour + 1\n        rem = rem - 60\n        \n    hour = str(hour)\n    minute = str(minute)\n    \n    print(hour + \" \" + minute)\n    \n    \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = list(map(int, stdin.split()))\n    alarm = hours * 60 + minutes\n    if alarm >= 540:\n        alarm -= 540\n    if alarm % 720 > 720 - alarm % 720:\n        alarm = alarm + (720 - alarm % 720)\n    else:\n        alarm = alarm - (alarm % 720)\n\n    if alarm >= 720:\n        alarm = alarm - 720\n    print(alarm // 60, alarm % 60)\n\ndef"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split('\\n')[0])\n    h, m = [int(i) for i in stdin.split('\\n')[1].split()]\n    h, m = h * 60 + m\n    d = {}\n    ans = 0\n    for i in range(60):\n        for j in range(60):\n            if str(i * j).find('7')!= -1:\n                d[i * 60 + j] = 1\n    for i in range(60):\n        for j in range(60):\n            if m - 60 * i - j in d:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = map(int, stdin.split(' '))\n    return min(int(hours // 24) + 1, int(minutes // 15) + 1)\n    pass\n\nprint(solution('11 23'))\nprint(solution('01 07'))\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 3 2 4\\n\")\n    5\n    >>> solution(\"6 3 1 3\\n\")\n    1\n    >>> solution(\"5 2 1 5\\n\")\n    0\n    \"\"\"\n\n    n, pos, l, r = map(int, stdin.split())\n    opened = [i for i in range(1, n + 1)]\n    opened.sort(reverse=True)\n    print(opened)\n    if l <= pos <= r:\n        opened.pop(opened.index(pos))\n    elif pos > r:\n        opened = opened[:opened.index(r) + 1]\n    elif pos < l:\n        opened = opened[opened.index(l):]\n    print(opened)\n    return len(opened)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = list(map(int, stdin.split(' ')))\n    return 0 if (l <= pos <= r) else min(abs(pos - l) // 2, abs(pos - r) // 2)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '''Your custom solution here'''\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string.\n\n    Complexity: O(n) for time, O(1) for space\n    \"\"\"\n    n, pos, l, r = map(int, stdin.split())\n    count = 0\n    if n > 0:\n        while r - l > 0:\n            if pos == l:\n                count += 1\n                break\n            elif pos == r:\n                count += 1\n                break\n            elif pos > l and pos < r:\n                count += 2\n                break\n            elif pos == r - 1:\n                count += 1\n                break\n            elif pos == l + 1:\n                count += 1\n                break\n            count += 1\n            pos = pos % (l + r)\n    return count\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043d\u0430\u0434 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u043c:\n    1) \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u043a\u0443\u0440\u0441\u043e\u0440 \u043d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u043d\u0435\u0437\u0430\u043a\u0440\u044b\u0442\u0443\u044e \u0432\u043a\u043b\u0430\u0434\u043a\u0443\n    2) \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0432\u0441\u0435 \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u043d\u0430\u043b\u0435\u0432\u043e \u043e\u0442 \u043a\u0443\u0440\u0441\u043e\u0440\u0430\n    3) \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0432\u0441\u0435 \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043e \u043e\u0442 \u043a\u0443\u0440\u0441\u043e\u0440\u0430\n    4) \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0432\u0441\u0435 \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u0441\u043b\u0435\u0432\u0430 \u043e\u0442 \u043a\u0443\u0440\u0441\u043e\u0440\u0430, \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u0441\u043f\u0440\u0430\u0432\u0430 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n    5) \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0432\u0441\u0435 \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u0441\u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u043a\u0443\u0440\u0441\u043e\u0440\u0430, \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u0441\u043b\u0435\u0432\u0430 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n    \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0434\u0430\u043d\u043d\u043e\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0437 \u0441\u0435\u0431\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u043f\u043f, \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0434\u0433\u0440\u0443\u043f\u043f\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0434:\n    (\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430)\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n    1) \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u043c \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u0441\u0435\u0445 \u0432\u043a\u043b\u0430\u0434\u043e\u043a, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u043b\u0435\u0432\u0435\u0435 \u0438\u043b\u0438 \u043f\u0440\u0430\u0432\u0435\u0435 \u043a\u0443\u0440\u0441\u043e\u0440\u0430, \u0442\u043e \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439:\n    (0, lambda i: i > pos), (0, lambda i: i < pos)\n    2) \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u043c \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u0441\u0435\u0445 \u0432\u043a\u043b\u0430\u0434\u043e\u043a, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0432\u043e\u043a\u0440\u0443\u0433 \u043a\u0443\u0440\u0441\u043e\u0440\u0430, \u0442\u043e \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\n    (0, lambda i: (i >= a and i <= b))\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n    1) \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u043c \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u0441\u0435\u0445 \u0432\u043a\u043b\u0430\u0434\u043e\u043a, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u043b\u0435\u0432\u0430 \u043e\u0442 \u043a\u0443\u0440\u0441\u043e\u0440\u0430, \u0442\u043e \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\n    (0, lambda i: i < pos)\n    2) \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u043c \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u0441\u0435\u0445 \u0432\u043a\u043b\u0430\u0434\u043e\u043a, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u043a\u0443\u0440\u0441\u043e\u0440\u0430, \u0442\u043e \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435:\n    (0, lambda i: i > pos)\n    '''\n\n    n, pos, l, r = [int(x) for x in stdin.split(' ')]\n    return len(min(filter(lambda x: x[1](x[0]), [(i, lambda i: i < pos and i < l - 1 and i > pos - 1 and i > r - 1) for i in range(n)]), key=lambda x: len(x[0])))\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = list(map(int, stdin.split()))\n    if pos < l or pos > r:\n        return 0\n    else:\n        return n - r + l - 1\n\n\nprint(solution('6 3 2 4'))\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(x) for x in stdin.split()]\n    if pos == l or pos == r:\n        return 0\n    if pos < l:\n        return r - pos\n    if pos > r:\n        return pos - l\n    return 0\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p, l, r = list(map(int, stdin.split()))\n    s = 0\n    for i in range(n):\n        if i > l and i < r:\n            s += 1\n        else:\n            if i == p:\n                pass\n            elif i < p:\n                s += 1\n            else:\n                s += 2\n    return s\nprint(solution(input()))\n\nl = list(map(int, input().split()))\n\n------Solution----\n\nimport math\nn, p, l, r = l\ns = 0\nfor i in range(n):\n    if i > l and i < r:\n        s += 1\n    else:\n        if i == p:\n            pass\n        elif i < p:\n            s += 1\n        else:\n            s += 2\n\n------Submissions-----\n\nI did my best with the time complexity.\n\nYou can solve this problem by using the math module. In the first solution I implemented the math module and I used the math.log function to calculate the logarithm for the formula with the time complexity of O(n*log(n)). The second solution I implemented without the use of the math module and used the formula with the time complexity of O(n).\n\nThe first solution is the best and I submitted it first.\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 10\n   ... 6 3\n   ... 8 2\n   ... 1 4\n   ... 4 10\n   ... 4 1\n   ... 3 2\n   ... 2 6\n   ... 1 100\n   ... 2 15\n   ... 10 11\n   ... 14 100''')\n    '2'\n    \"\"\"\n    import re\n    num_query = int(stdin.readline())\n    res = []\n    for _ in range(num_query):\n        num_blow, num_head = [int(i) for i in re.findall('\\d+', stdin.readline())]\n        res.append(min(num_blow - num_head + 1, num_blow - num_head + sum([int(i) for i in re.findall('\\d+', stdin.readline())])))\n    print(*res, sep='\\n')\n    return ''\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    t = int(stdin.readline())\n    return '\\n'.join(str(min(x - y, z)) for x, y, z in zip(\n        *(map(int, stdin.readline().split()) for _ in range(t))))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get and check input\n    :param stdin: str\n    :return: str\n    \"\"\"\n    N, X = map(int, stdin.split())\n    assert 1 <= N <= 100\n    assert 1 <= X <= 10 ** 9\n\n    # Get input\n    attacks = [list(map(int, stdin.split())) for _ in range(N)]\n\n    # Check if X is big enough for all possible attacks\n    assert sum(d * h for d, h in attacks) > X\n\n    # Calculate minimum number of blows to defeat Zmei Gorynich\n    return str(sum(min(d, X // h) for d, h in attacks))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(f'{x}\\n{y}' for x, y in stdin.split('\\n\\n'))"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 0\n    while n > m:\n        res += 1\n        n = n - m\n    return str(res)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return 0\n    count = 0\n    while n > 1:\n        n = n - m + 1\n        count += 1\n    return count\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return n\n    return n % (m + 1)"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = 1\n    if n == 1 and m == 0:\n        return 1\n    while n!= 0:\n        n -= m\n        n += m\n        if n < 0:\n            n = 0\n        days += 1\n    return days\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return n % (m + 1)"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    capacity, num_of_grains = [int(s) for s in stdin.split()]\n    days = 0\n    while capacity!= 0:\n        if num_of_grains % capacity == 0:\n            days = num_of_grains // capacity\n            break\n        num_of_grains = num_of_grains % capacity\n        days += 1\n    return str(days)\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    capacity, m = map(int, stdin.split())\n    res = m // capacity\n    if m % capacity:\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(n)\n    elif n > m:\n        return 'impossible'\n    elif n == m - 1:\n        return str(n + 1)\n    else:\n        return str(n + 1 + int(m / n))"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    tiles = list(map(str, stdin.split(' ')))\n    if'm' in tiles[0]:\n        result += tiles[0].count('m') - 1\n    if'm' in tiles[1]:\n        result += tiles[1].count('m') - 1\n    if'm' in tiles[2]:\n        result += tiles[2].count('m') - 1\n    if 'p' in tiles[0]:\n        result += tiles[0].count('p') - 1\n    if 'p' in tiles[1]:\n        result += tiles[1].count('p') - 1\n    if 'p' in tiles[2]:\n        result += tiles[2].count('p') - 1\n    if's' in tiles[0]:\n        result += tiles[0].count('s') - 1\n    if's' in tiles[1]:\n        result += tiles[1].count('s') - 1\n    if's' in tiles[2]:\n        result += tiles[2].count('s') - 1\n    return str(result)"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of mentsu from a list of tiles.\"\"\"\n    stdin = stdin.strip().split(' ')\n    # print(stdin)\n    kou = [stdin.count(x) for x in ['1m', '2m', '3m', '4m', '5m', '6m', '7m', '8m', '9m']]\n    pin = [stdin.count(x) for x in ['1p', '2p', '3p', '4p', '5p', '6p', '7p', '8p', '9p']]\n    man = [stdin.count(x) for x in ['1s', '2s', '3s', '4s', '5s', '6s', '7s', '8s', '9s']]\n    sou = [stdin.count(x) for x in ['1z', '2z', '3z', '4z', '5z', '6z', '7z', '8z', '9z']]\n\n    shuntsu = 0\n    koutsu = 0\n    for i in range(9):\n        for j in range(9):\n            if j + 1 == kou[i]:\n                koutsu += 1\n                if j + 2 == pin[i]:\n                    koutsu -= 1\n                    shuntsu += 1\n                    if j + 3 == man[i]:\n                        koutsu -= 1\n                        shuntsu += 1\n                        if j + 4 == sou[i]:\n                            koutsu -= 1\n                            shuntsu += 1\n    return shuntsu\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = list(stdin)\n    \n    # Remove empty elements\n    while '' in stdin_list:\n        stdin_list.remove('')\n    \n    # Convert string list to int list\n    stdin_list = [int(i[0]) for i in stdin_list]\n    \n    # Check if we have 1m\n    # If yes, we need to draw 2 mentsu\n    if 1 in stdin_list:\n        return 2\n    \n    # Check if we have 1s or 1p\n    # If yes, we need to draw 4 mentsu\n    if stdin_list[0] == stdin_list[1] == stdin_list[2] == stdin_list[3] == 1 or \\\n        stdin_list[0] == stdin_list[1] == stdin_list[2] == stdin_list[3] == 4 or \\\n        stdin_list[0] == stdin_list[1] == stdin_list[2] == stdin_list[3] == 7:\n        return 4\n        \n    # Check if we have 2m\n    # If yes, we need to draw 2 mentsu\n    if 2 in stdin_list:\n        return 2\n        \n    # Check if we have 2s\n    # If yes, we need to draw 4 mentsu\n    if stdin_list[0] == stdin_list[1] == 2 or \\\n        stdin_list[1] == stdin_list[2] == 2 or \\\n        stdin_list[2] == stdin_list[3] == 2:\n        return 4\n        \n    # Check if we have 3m\n    # If yes, we need to draw 2 mentsu\n    if 3 in stdin_list:\n        return 2\n        \n    # Check if we have 3p\n    # If yes, we need to draw 4 mentsu\n    if stdin_list[0] == stdin_list[1] == 3 or \\\n        stdin_list[1] == stdin_list[2] == 3 or \\\n        stdin_list[2] == stdin_list[3] == 3:\n        return 4\n        \n    # Check if we have 4s\n    # If yes, we need to draw 4 mentsu\n    if 4 in stdin_list:\n        return 4\n        \n    # Check if we have 5m\n    # If yes, we need to draw 2 mentsu\n    if 5 in stdin_list:\n        return 2\n        \n    # Check if we have 5p\n    # If yes, we need to draw 2 mentsu\n    if stdin_list[0] == stdin_list[1] == 5 or \\\n        stdin_list[1] == stdin_list[2] == 5 or \\\n        stdin_list[2] == stdin_list[3] == 5:\n        return 2\n        \n    # Check if we have 6m\n    # If yes, we need to draw 2 mentsu\n    if 6 in stdin_list:\n        return 2\n        \n    # Check if we have 7p\n    # If yes, we need to draw 2 mentsu\n    if stdin_list[0] == stdin_list[1] == 7 or \\\n        stdin_list[1] == stdin_list[2] == 7 or \\\n        stdin_list[2] == stdin_list[3] == 7:\n        return 2\n        \n    # If we are here, means there is no koutsu nor mentsu\n    return 0\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1m 2m 3m\")\n    0\n    >>> solution(\"4s 5s 6s\")\n    0\n    >>> solution(\"9m 9m 9m\")\n    0\n    >>> solution(\"3p 9m 2p\")\n    1\n    \"\"\"\n\n    MENTSU = ['m', 'p','s']\n\n    tile_numbers = set(int(i[0]) for i in stdin.split())\n    mensu = set(i for i in stdin if i[1] in MENTSU)\n    not_mensu = set(i for i in tile_numbers if i not in mensu)\n\n    return len(not_mensu)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(['1s', '2s', '3s', '4m', '5p', '6s', '7p'])\n    0\n    >>> solution(['9m', '9m', '9m', '9p', '1p', '2p', '3p'])\n    0\n    >>> solution(['3p', '9m', '2p', '1p'])\n    1\n    \"\"\"\n    stdin = [tile[0] for tile in stdin.split()]\n    mentu = set(tile[0] for tile in stdin)\n    shuntsu = set([tile[0] for tile in stdin if len(tile) == 2])\n    koutsu = set([tile[0] for tile in stdin if len(tile) == 3])\n    print(len([tile for tile in mentu if tile not in shuntsu and tile not in koutsu]))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    # print(stdin)\n    stdin = stdin.split('\\n')\n    stdin = stdin[0].split(' ')\n    # print(stdin)\n    # print(''.join(stdin))\n    flag = False\n    for tile in stdin:\n        # print(tile)\n        tile = tile.split('m')\n        for i in range(len(tile)):\n            if tile[i].isalpha():\n                ans.append('s')\n            else:\n                ans.append('m')\n                flag = True\n        if flag:\n            ans.append('p')\n            flag = False\n    # print(ans)\n    ans = ''.join(ans)\n    return ans\n\nprint(solution('2s 3s 4s 5s'))\nprint(solution('9m 9m 9m'))\nprint(solution('3p 9m 2p'))\n\n'''\n2s 3s 4s 5s\nsmsmps\n9m 9m 9m\nsmpms\n3p 9m 2p\nsmpmp\n\n'''\n\ndef"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = [stdin.count('m'), stdin.count('p'), stdin.count('s')]\n    k = [stdin.count('1m'), stdin.count('2m'), stdin.count('3m'), stdin.count('4m'), stdin.count('5m'), stdin.count('6m'), stdin.count('7m'), stdin.count('8m'), stdin.count('9m')]\n    p = [stdin.count('1p'), stdin.count('2p'), stdin.count('3p'), stdin.count('4p'), stdin.count('5p'), stdin.count('6p'), stdin.count('7p'), stdin.count('8p'), stdin.count('9p')]\n    s = [stdin.count('1s'), stdin.count('2s'), stdin.count('3s'), stdin.count('4s'), stdin.count('5s'), stdin.count('6s'), stdin.count('7s'), stdin.count('8s'), stdin.count('9s')]\n    a = min(m[0], m[1], m[2]) + min(k[0], k[1], k[2]) + min(p[0], p[1], p[2]) + min(s[0], s[1], s[2]) - 6\n    return str(a)\n\nprint(solution('1m 2m 3m'))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # My solution (after looking at the solution)\n    return\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sofas_count = int(stdin.readline())\n    sofa_size = tuple(map(int, stdin.readline().split()))\n    sofa_coords = list(map(lambda x: tuple(map(int, x.split())), stdin.readlines()))\n    neighbors = {}\n    count_per_cell = {}\n    for i in range(sofa_size[0]):\n        for j in range(sofa_size[1]):\n            neighbors[(i, j)] = [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]\n            count_per_cell[(i, j)] = 0\n    for coord in sofa_coords:\n        count_per_cell[coord] += 1\n        count_per_cell[neighbors[coord][0]] += 1\n        count_per_cell[neighbors[coord][1]] += 1\n        count_per_cell[neighbors[coord][2]] += 1\n        count_per_cell[neighbors[coord][3]] += 1\n    sofas_with_sides = set(coord for coord in count_per_cell if count_per_cell[coord] == 2)\n    for coord in sofa_coords:\n        if count_per_cell[coord]!= 2 or count_per_cell[neighbors[coord][0]]!= 2:\n            sofas_with_sides.remove(coord)\n        if count_per_cell[coord]!= 2 or count_per_cell[neighbors[coord][1]]!= 2:\n            sofas_with_sides.remove(coord)\n        if count_per_cell[coord]!= 2 or count_per_cell[neighbors[coord][2]]!= 2:\n            sofas_with_sides.remove(coord)\n        if count_per_cell[coord]!= 2 or count_per_cell[neighbors[coord][3]]!= 2:\n            sofas_with_sides.remove(coord)\n    if len(sofas_with_sides) == 0:\n        return -1\n    for coord in sofa_coords:\n        if coord not in sofas_with_sides:\n            continue\n        if count_per_cell[neighbors[coord][0]]!= 1:\n            continue\n        if count_per_cell[neighbors[coord][1]]!= 1:\n            continue\n        if count_per_cell[neighbors[coord][2]]!= 1:\n            continue\n        if count_per_cell[neighbors[coord][3]]!= 1:\n            continue\n        return coord[0] * sofa_size[1] + coord[1] + 1\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" https://app.codility.com/demo/results/trainingJ6D4CH-5SN/ \"\"\"\n    # data = input()\n    # n, m = map(int, data.split())\n    # x = [0] + list(map(int, data.split()))\n    # y = [0] + list(map(int, data.split()))\n    # c = list(map(int, data.split()))\n    n, m = map(int, stdin.split())\n    x = [0] + list(map(int, stdin.split()))\n    y = [0] + list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    matrix = [[0] * (m + 1) for i in range(n + 1)]\n    ans = -1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if x[i] < x[j] and y[i] < y[j]:\n                matrix[i][j] = matrix[i][j - 1] + 1\n            else:\n                matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1])\n            if matrix[i][j] == c[0] + c[1] + c[2] + c[3]:\n                ans = i\n    return ans\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve task.\"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution for the task.\"\"\"\n    num_sofa = int(stdin)\n    matrix_size = [int(i) for i in stdin.split(\" \")]\n    matrix = [[] for _ in range(num_sofa)]\n    for i in range(num_sofa):\n        matrix[i] = [int(j) for j in stdin.split(\" \")]\n    matrix_indexes = {}\n    for i in range(num_sofa):\n        for j in range(i + 1, num_sofa):\n            matrix_indexes[(i, j)] = []\n            for k in range(matrix_size[1]):\n                if matrix[i][k] == matrix[j][k]:\n                    matrix_indexes[(i, j)].append(k)\n    sofa_indexes = {}\n    for i in range(num_sofa):\n        for j in range(i + 1, num_sofa):\n            if len(matrix_indexes[(i, j)])!= 0:\n                for k in matrix_indexes[(i, j)]:\n                    sofa_indexes[(i, j, k)] = []\n                    for l in range(matrix_size[1]):\n                        if matrix[i][k] < matrix[j][l] and matrix[j][l] < matrix[i][k]:\n                            sofa_indexes[(i, j, k)].append(l)\n    matrix_indexes_values = []\n    for i in range(num_sofa):\n        for j in range(i + 1, num_sofa):\n            matrix_indexes_values.append(len(matrix_indexes[(i, j)]))\n    res = 0\n    for i in range(num_sofa):\n        if matrix_indexes_values[i] == num_sofa - 1 and matrix_indexes_values[i] == sum(matrix_indexes_values[:i]):\n            res = i + 1\n            break\n    return str(res)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\"\\n\")\n    x = list(map(lambda a: a.split(), x))\n    x = [list(map(int, item)) for item in x]\n    x = sorted(x, key=lambda y: y[0])\n    n, m, left, right, top, bottom = x[0][0], x[0][1], 0, 0, 0, 0\n    print(x)\n    for i in range(1, len(x)):\n        if x[i][1] == x[i - 1][1]:\n            n, m = x[i][0], x[i][1]\n        else:\n            if x[i][0] < x[i - 1][0]:\n                left += 1\n            else:\n                right += 1\n            if x[i][1] < x[i - 1][1]:\n                top += 1\n            else:\n                bottom += 1\n    print(left, right, top, bottom)\n    for i in range(1, len(x)):\n        if left >= 1 and right >= 1 and top >= 1 and bottom >= 1:\n            print(x[i][0])\n            break\n        if x[i][0] == x[i - 1][0]:\n            continue\n        else:\n            if x[i][0] < x[i - 1][0]:\n                left += 1\n            else:\n                right += 1\n            if x[i][1] < x[i - 1][1]:\n                top += 1\n            else:\n                bottom += 1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\"\"\"\n    # solution logic\n    return str(solution)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(x) for x in stdin.split(' ')]\n    sofas = []\n    for _ in range(n):\n        [x1, y1, x2, y2] = [int(x) for x in stdin.split(' ')]\n        sofas.append((x1, y1, x2, y2))\n\n    [cnt_l, cnt_r, cnt_t, cnt_b] = [int(x) for x in stdin.split(' ')]\n    \n    candidates = set([(x1, y1, x2, y2) for x1, y1, x2, y2 in sofas])\n    \n    for x1, y1, x2, y2 in sofas:\n        if y1 == y2:\n            candidates.update([(x1, y1 - 1, x2, y1 - 1), (x2, y2 + 1, x1, y2 + 1)])\n        elif x1 == x2:\n            candidates.update([(x1 - 1, y1, x1 - 1, y2), (x2 + 1, y1, x2 + 1, y2)])\n    \n    def count(x1, y1, x2, y2):\n        if x1 < x2 and (x1, y1, x2, y2) in candidates:\n            return cnt_l\n        elif x2 < x1 and (x1, y1, x2, y2) in candidates:\n            return cnt_r\n        elif y1 < y2 and (x1, y1, x2, y2) in candidates:\n            return cnt_t\n        elif y2 < y1 and (x1, y1, x2, y2) in candidates:\n            return cnt_b\n        else:\n            return 0\n\n    sol = 0\n    for x1, y1, x2, y2 in sofas:\n        sol += count(x1, y1, x2, y2)\n    return sol if sol else -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.readline().split())\n    sofas = []\n    for _ in range(rows):\n        sofas.append(list(map(int, stdin.readline().split())))\n\n    # row\n    ans = -1\n    for i in range(rows):\n        for j in range(cols - 1):\n            if sofas[i][j] > sofas[i][j + 1]:\n                ans = sofas[i][j]\n                break\n\n    # col\n    if ans == -1:\n        for j in range(cols):\n            for i in range(rows - 1):\n                if sofas[i][j] > sofas[i + 1][j]:\n                    ans = sofas[i][j]\n                    break\n    \n    # diagonal\n    if ans == -1:\n        for i in range(rows - 1):\n            for j in range(cols - 1):\n                if sofas[i][j] > sofas[i + 1][j + 1]:\n                    ans = sofas[i][j]\n                    break\n    \n    # antidiagonal\n    if ans == -1:\n        for i in range(rows - 1):\n            for j in range(cols - 1):\n                if sofas[i][j] > sofas[i + 1][j - 1]:\n                    ans = sofas[i][j]\n                    break\n    \n    return ans\n\"\"\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = map(int, stdin.split())\n    sofas = [list(map(int, stdin.split())) for _ in range(d)]\n    r, l, t, b = [0]*d, [0]*d, [0]*d, [0]*d\n    for i in range(n):\n        for j in range(m):\n            if sofas[i][j] == 1:\n                r[i] += 1\n                l[j] += 1\n                if i > 0:\n                    t[i-1] += 1\n                if j > 0:\n                    b[j-1] += 1\n    def check(tup):\n        return sum(tup) == d and tup[0] <= r[tup[1]] and tup[0] <= l[tup[2]] and tup[0] <= b[tup[3]]\n    return next(i+1 for i in range(d) if check((r[i], i, l[i], i))) if all(check((t[i], i, b[i], i)) for i in range(d)) else -1\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    n, m = [int(x) for x in stdin.split()]\n    sofas = []\n    for _ in range(n):\n        sofas.append(tuple([int(x) for x in stdin.split()]))\n\n    cnt = [0] * n\n    for i in range(n):\n        cnt[i] = sofas[i][0]\n        if sofas[i][1] < m:\n            cnt[i] += 1\n        if i > 0:\n            cnt[i] += cnt[i-1]\n        if i < n-1:\n            cnt[i] += cnt[i+1]\n    for i in range(n):\n        cnt[i] = 0\n\n    l, r, t, b = [int(x) for x in stdin.split()]\n\n    for i in range(n):\n        if l <= cnt[i] <= r and t <= sofas[i][1] <= b:\n            print(i+1)\n            return\n\n    print(-1)\n\nsolution(input())"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days_per_year = int(stdin.readline())\n    days_off = 4\n    days_on = 5\n    if days_per_year < days_on + days_off:\n        return str(days_per_year - days_off) +'' + str(days_per_year - days_off)\n    else:\n        return str(0) +'' + str(days_per_year - days_on)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '4 4'"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    if days % 5 == 2:\n        return '0 2'\n    else:\n        return '4 4'"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    days = stdin\n    ans = list()\n    for i in range(0,int(days)):\n        if i%2 == 0:\n            ans.append(\"4\")\n        else:\n            ans.append(\"2\")\n    ans = \" \".join(ans)\n    print(ans)\n\nsolution(input())"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split('\\n')\n    n = int(l[0])\n    return f'{n - 2} {n - 2}'\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    min_days = days // 7\n    max_days = days // 5 + 1\n    return str(min_days) + \" \" + str(max_days)\n\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days_in_year = int(stdin.readline())\n    days_off_min = 0\n    days_off_max = 0\n    if days_in_year % 2 == 0:\n        days_off_min = days_in_year / 2\n        days_off_max = days_off_min\n    else:\n        days_off_min = int(days_in_year / 2) + 1\n        days_off_max = int(days_in_year / 2)\n    print(days_off_min, days_off_max)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return f'{4 if n % 14 == 0 else 0} {(n // 14) * 2}'\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    days_per_year = int(stdin)\n    first_year = days_per_year // 365\n    last_year = (days_per_year // 365) - (days_per_year % 365)\n    if days_per_year % 365 == 0:\n        last_year = 0\n    return str(first_year) +'' + str(last_year)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    x2 = x//7\n    x3 = x//2\n    x4 = x3//2\n    if x > 2*x2*x4:\n        x5 = x - (2*x2*x4)\n        x6 = x5//x2\n        x7 = x - x5\n        x8 = x7//x4\n        x9 = x - x7\n        x10 = x9//x6\n        x11 = x - x9\n        x12 = x11//x8\n        x13 = x - x11\n        x14 = x13//x10\n        x15 = x - x13\n        x16 = x15//x14\n        x17 = x - x15\n        x18 = x17//x16\n        x19 = x - x17\n        x20 = x19//x18\n        x21 = x - x19\n        x22 = x21//x20\n        x23 = x - x21\n        x24 = x23//x22\n        x25 = x - x23\n        x26 = x25//x24\n        x27 = x - x25\n        x28 = x27//x26\n        x29 = x - x27\n        x30 = x29//x28\n        x31 = x - x29\n        x32 = x31//x30\n        x33 = x - x31\n        x34 = x33//x32\n        x35 = x - x33\n        x36 = x35//x34\n        x37 = x - x35\n        x38 = x37//x36\n        x39 = x - x37\n        x40 = x39//x38\n        x41 = x - x39\n        x42 = x41//x40\n        x43 = x - x41\n        x44 = x43//x42\n        x45 = x - x43\n        x46 = x45//x44\n        x47 = x - x45\n        x48 = x47//x46\n        x49 = x - x47\n        x50 = x49//x48\n        x51 = x - x49\n        x52 = x51//x50\n        x53 = x - x51\n        x54 = x53//x52\n        x55 = x - x53\n        x56 = x55//x54\n        x57 = x - x55\n        x58 = x57//x56\n        x59 = x - x57\n        x60 = x59//x58\n        x61 = x - x59\n        x62 = x61//x60\n        x63 = x - x61\n        x64 = x63//x62\n        x65 = x - x63\n        x66 = x65//x64\n        x67 = x - x65\n        x68 = x67//x66\n        x69 = x - x67\n        x70 = x69//x68\n        x71 = x - x69\n        x72 = x71//x70\n        x73 = x - x71\n        x74 = x73//x72\n        x75 = x - x73\n        x76 = x75//x74\n        x77 = x - x75\n        x78 = x77//x76\n        x79 = x - x77\n        x80 = x79//x78\n        x81 = x - x79\n        x82 = x81//x80\n        x83 = x - x81\n        x84 = x83//x82\n        x85 = x - x83\n        x86 = x85//x84\n        x87 = x - x85\n        x88 = x87//x86\n        x89 = x - x87\n        x90 = x89//x88\n        x91 = x - x89\n        x92 = x91//x90\n        x93 = x - x91\n        x94 = x93//x92\n        x95 = x - x93\n        x96 = x95//x94\n        x97 = x - x95\n        x98 = x97//x96\n        x99 = x - x97\n        x100 = x99//x98\n        x101 = x - x99\n        x102 = x101//x100\n        x103 = x - x101\n        x104 = x103//x102\n        x105 = x - x103\n        x106 = x105//x104\n        x107 = x - x105\n        x108 = x107//x106\n        x109 = x - x107\n        x110 = x109//x108\n        x111 = x - x109\n        x112 = x111//x110\n        x113 = x - x111\n        x114 = x113//x112\n        x115 = x - x113\n        x116 = x115//x114\n        x117 = x - x115\n        x118 = x117//x116\n        x119 = x - x117\n        x120 = x119//x118\n        x121 = x - x119\n        x122 = x121//x120\n        x123 = x - x121\n        x124 = x123//x122\n        x125 = x - x123\n        x126 = x125//x124\n        x127 = x - x125\n        x128 = x127//x126\n        x129 = x - x127\n        x130 = x129//x128\n        x131 = x - x129\n        x132 = x131//x130\n        x133 = x - x131\n        x134 = x133//x132\n        x135 = x - x133\n        x136 = x135//x134\n        x137 = x - x135\n        x138 = x137//x136\n        x139 = x - x137\n        x140 = x139//x138\n        x141 = x - x139\n        x142 = x141//x140\n        x143 = x - x141\n        x144 = x143//x142\n        x145 = x - x143\n        x146 = x145//x144\n        x147 = x - x145\n        x148 = x147//x146\n        x149 = x - x147\n        x150 = x149//x148\n        x151 = x - x149\n        x152 = x151//x150\n        x153 = x - x151\n        x154 = x153//x152\n        x155 = x - x153\n        x156 = x155//x154\n        x157 = x - x155\n        x158 = x157//x156\n        x159 = x - x157\n        x160 = x159//x158\n        x161 = x - x159\n        x162 = x161//x160\n        x163 = x - x161\n        x164 = x163//x162\n        x165 = x - x163\n        x166 = x165//x164\n        x167 = x - x165\n        x168 = x167//x166\n        x169 = x - x167\n        x170 = x169//x168\n        x171 = x - x169\n        x172 = x171//x170\n        x173 = x - x171\n        x174 = x173//x172\n        x175 = x - x173\n        x176 = x175//x174\n        x177 = x - x175\n        x178 = x177//x176\n        x179 = x - x177\n        x180 = x179//x178\n        x181 = x - x179\n        x182 = x181//x180\n        x183 = x - x181\n        x184 = x183//x182\n        x185 = x - x183\n        x186 = x185//x184\n        x187 = x - x185\n        x188 = x187//x186\n        x189 = x - x187\n        "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    stdin = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(n):\n        x = stdin[i]\n        if x % a == 0 and x % b == 0:\n            ans += p\n        elif x % a == 0:\n            ans += q\n        elif x % b == 0:\n            ans += q\n        else:\n            ans += 0\n    return ans\n\n\ndef"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n\n    t = [int(num) for num in stdin.split()]\n    n = t[0]\n    a = t[1]\n    b = t[2]\n    p = t[3]\n    q = t[4]\n\n    tiles = [1]\n    for i in range(1, n + 1):\n        tiles.append(tiles[-1] + i)\n    tiles.pop()\n\n    max_sum = 0\n    for tile in tiles:\n        if tile % a == 0 and tile % b == 0:\n            max_sum += p\n        elif tile % a == 0:\n            max_sum += q\n        elif tile % b == 0:\n            max_sum += p\n\n    return max_sum\n\n\ndef"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n, a, b, p, q = [int(x) for x in stdin.readline().split()]\n    n, a, b, p, q = 5, 2, 3, 12, 15\n    # n, a, b, p, q = 20, 2, 3, 3, 5\n    def get_num_of_chocolates(n, a, b, p, q):\n        if a == b:\n            return p * (n // a) + q * (n % a)\n        return p * (n // a + n // b + n // a * n // b) + q * (n % a + n % b + n // a * n % a + n // b * n % b)\n\n    print(get_num_of_chocolates(n, a, b, p, q))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = [int(s) for s in stdin.strip().split(' ')]\n    n, a, b, p, q = line\n    return str(n * p + n * q + max(a - 1, 0) * p + max(b - 1, 0) * q)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    a = x[1]\n    b = x[2]\n    p = x[3]\n    q = x[4]\n    return str(p*q)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split('\\n')[0].split())\n    return str(n * max(p, q) + (n - 1) * min(p, q))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = [int(x) for x in stdin.split('\\n')]\n    \n    # Unpainted tiles\n    red = [i for i in range(n) if i % a == 0]\n    blue = [i for i in range(n) if i % b == 0]\n    \n    total_red = 0\n    for i in red:\n        total_red += p\n    \n    total_blue = 0\n    for i in blue:\n        total_blue += q\n    \n    # Painted tiles\n    total_painted = 0\n    for i in range(n):\n        if i in red:\n            total_painted += p\n        elif i in blue:\n            total_painted += q\n    \n    # Total\n    return total_red + total_blue - total_painted\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trophies = stdin.readline().strip()\n    dp = [0] * len(trophies)\n    dp[0] = 1 if trophies[0] == 'G' else 0\n    for i in range(1, len(trophies)):\n        if trophies[i] == 'S':\n            if trophies[i - 1] == 'S':\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = dp[i - 1] + 1\n        else:\n            if trophies[i - 1] == 'S':\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = dp[i - 1]\n    return max(dp)"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    trophies = stdin.split('\\n')[1]\n    if n == 1:\n        return 0\n    s = sorted(trophies)\n    res = 0\n    for i in range(len(s)):\n        if s[i] == 'G':\n            res = max(res, i)\n        elif i!= 0 and s[i] == 'S' and s[i-1] == 'G':\n            res = max(res, i-1)\n        elif i!= len(s)-1 and s[i] == 'S' and s[i+1] == 'G':\n            res = max(res, i+1)\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training5Z2P6V-YQG/\n    \"\"\"\n    n = int(stdin)\n    trophies = stdin\n    trophies = trophies[::-1]\n    \n    trophies_array = []\n    for idx, char in enumerate(trophies):\n        if char == \"G\":\n            trophies_array.append(idx)\n    \n    for idx in range(n):\n        if idx < n - 1:\n            if trophies[idx]!= trophies[idx + 1]:\n                first = trophies_array[idx]\n                second = trophies_array[idx + 1]\n                trophies_array[idx] = second\n                trophies_array[idx + 1] = first\n                break\n    \n    trophies_array = trophies_array[::-1]\n    \n    trophies = \"\"\n    for idx in trophies_array:\n        trophies += trophies[idx]\n    \n    print(len(trophies))\n    return trophies\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return longest substring of g's, length is max_beauty.\"\"\"\n    num_trophies = int(stdin)\n    trophies = stdin\n    trophies = sorted(trophies)\n    max_beauty = 0\n    trophies_dict = {}\n    # for i in range(0, num_trophies, 1):\n    #     trophies_dict[trophies[i]] = 0\n    #     print(trophies_dict)\n    # print(trophies_dict)\n    for i in range(0, num_trophies, 1):\n        if trophies[i] == 'G':\n            trophies_dict[trophies[i]] = 1\n            if i+1 < num_trophies:\n                if trophies[i+1] == 'G':\n                    trophies_dict[trophies[i]] += 1\n                    if i+2 < num_trophies:\n                        if trophies[i+2] == 'G':\n                            trophies_dict[trophies[i]] += 1\n                            if i+3 < num_trophies:\n                                if trophies[i+3] == 'G':\n                                    trophies_dict[trophies[i]] += 1\n                                    if i+4 < num_trophies:\n                                        if trophies[i+4] == 'G':\n                                            trophies_dict[trophies[i]] += 1\n                                            if i+5 < num_trophies:\n                                                if trophies[i+5] == 'G':\n                                                    trophies_dict[trophies[i]] += 1\n                                                    if i+6 < num_trophies:\n                                                        if trophies[i+6] == 'G':\n                                                            trophies_dict[trophies[i]] += 1\n    print(trophies_dict)\n    beauty_list = []\n    for trophy_name, trophy_len in trophies_dict.items():\n        beauty_list.append(trophy_len)\n        if max(beauty_list) > max_beauty:\n            max_beauty = max(beauty_list)\n    print(max_beauty)\n\nsolution(input())\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin\n    a, b = 0, 0\n    c = 0\n    s = 0\n    for i in range(n):\n        if arr[i] == 'S':\n            c = 0\n        else:\n            c += 1\n            if c > b:\n                b = c\n                a = i\n    print(max(a+1,b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(stdin.readline())\n    \n    def compute_length(seq: list, x, y) -> int:\n        '''Compute length of longest subsegment from x to y'''\n        current_length = 0\n        if seq[x] == 'G':\n            current_length += 1\n        for i in range(x+1, y+1):\n            if seq[i] == 'S':\n                current_length += 1\n        if seq[y] == 'G':\n            current_length += 1\n        return current_length\n    \n    def get_max_length(seq: list) -> int:\n        '''Find length of longest subsegment'''\n        current_length = 0\n        for i in range(len(seq)):\n            if seq[i] == 'S':\n                current_length = max(current_length, compute_length(seq, i, len(seq)-1))\n        return current_length\n    \n    max_length = get_max_length(seq)\n    for i in range(len(seq)):\n        for j in range(i+2, len(seq)+1):\n            if compute_length(seq, i, j) > max_length:\n                max_length = compute_length(seq, i, j)\n    return max_length\n    \nprint(solution(stdin))\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin.readline()\n    stdin.readline()\n    courses = list(map(int, stdin.readlines()))\n    \n    courses.sort()\n    \n    course_to_pass = {}\n    for i, course in enumerate(courses):\n        course_to_pass[course] = i\n    \n    to_pass = {i:[] for i in range(len(courses))}\n    for course in courses:\n        to_pass[course_to_pass[course]].append(course)\n    \n    passed = set()\n    \n    for course in courses:\n        if not to_pass[course_to_pass[course]]:\n            continue\n        for dependent in to_pass[course_to_pass[course]]:\n            if dependent not in passed:\n                break\n        else:\n            passed.add(course)\n    \n    if len(passed) < len(courses):\n        print(-1)\n        return\n    \n    print(len(passed))\n    print(*sorted(passed))\n    '''\n    n, k = map(int, stdin.readline().split())\n    depends = [list(map(int, stdin.readline().split())) for _ in range(k)]\n    stdin.readline()\n    courses = list(map(int, stdin.readlines()))\n    \n    \n    # O(k + n log n)\n    for i in range(k):\n        # (n log n) O(n log n)\n        depends[i].sort()\n        # O(n log n)\n        courses = [course for course in courses if course not in depends[i]]\n        # O(n)\n    \n    print(courses)\n    print(depends)\n    \n    \n    "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    m = [int(i) for i in stdin.split()]\n    c = [int(i) for i in stdin.split()]\n    d = {}\n    for i in range(n):\n        for j in range(m[i]):\n            if c[i] in d:\n                d[c[i]].append(i)\n            else:\n                d[c[i]] = [i]\n    s = 0\n    queue = [s]\n    seen = set()\n    while len(queue) > 0:\n        u = queue.pop(0)\n        seen.add(u)\n        for j in range(m[u]):\n            if c[u] in d:\n                queue.append(d[c[u]].pop(0))\n        if u == k:\n            break\n    if u == k:\n        return \"-1\"\n    return str(len(seen)) + \" \" + \" \".join(str(i) for i in seen)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == '0':\n        return '-1'\n    n, k = stdin.split()\n    k = int(k)\n    n = int(n)\n    stdin = [int(n) for n in stdin.split('\\n')[1:]]\n    stdin.sort()\n    stdin = [n for n in stdin if stdin.count(n) >= k]\n    if len(stdin) < k:\n        return '-1'\n    stdin = set(stdin)\n    stdin = sorted(stdin)\n    return''.join(map(str, stdin))\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function returns the minimum number of online courses that you should pass to get the specialty, or -1 if it is impossible.\"\"\"\n    # your code here\n    stdin = stdin.split('\\n')\n    num_courses = int(stdin[0].split()[0])\n    num_main = int(stdin[0].split()[1])\n    # courses = [i for i in range(1, num_courses+1)]\n    courses = []\n    for i in range(1, num_courses+1):\n        courses.append(int(stdin[i]))\n    # main_courses = [i for i in range(num_courses, num_courses+num_main)]\n    main_courses = []\n    for i in range(num_courses, num_courses+num_main):\n        main_courses.append(int(stdin[i]))\n    # print(courses, main_courses)\n    dependency = []\n    for i in range(num_courses+num_main, len(stdin)):\n        dep = [int(x) for x in stdin[i].split()]\n        dependency.append(dep)\n    # print(dependency)\n    dependency = list(map(list, zip(*dependency)))\n    # print(dependency)\n    # print(dependency)\n    # for i in range(len(dependency)):\n    #     for j in range(len(dependency[i])):\n    #         if dependency[i][j] in main_courses:\n    #             dependency[i][j] = 0\n    #         if dependency[i][j] in courses:\n    #             dependency[i][j] = 0\n    # print(dependency)\n    for i in range(len(dependency)):\n        # for j in range(len(dependency[i])):\n        #     if dependency[i][j] == 0:\n        #         dependency[i][j] = 1\n        dependency[i] = list(map(lambda x: x - 1 if x in main_courses else x, dependency[i]))\n        dependency[i] = list(map(lambda x: x - 1 if x in courses else x, dependency[i]))\n    # print(dependency)\n    dependency = list(map(list, zip(*dependency)))\n    # print(dependency)\n    if 1 not in dependency[0] and 0 not in dependency[0]:\n        return '-1'\n    elif 1 in dependency[0] and 0 in dependency[0]:\n        return '-1'\n    else:\n        in_degree = [0] * num_courses\n        for i in range(len(dependency)):\n            for j in range(len(dependency[i])):\n                if dependency[i][j]!= 0:\n                    in_degree[dependency[i][j]] += 1\n        for i in range(len(in_degree)):\n            if in_degree[i]!= 0:\n                in_degree[i] = -1\n        result = []\n        queue = []\n        for i in range(len(in_degree)):\n            if in_degree[i] == 0:\n                queue.append(i)\n        while len(queue)!= 0:\n            course = queue.pop(0)\n            result.append(course)\n            for i in range(len(dependency)):\n                for j in range(len(dependency[i])):\n                    if dependency[i][j] == course and in_degree[j] == -1:\n                        in_degree[j] = 0\n                        queue.append(j)\n        result = list(map(str, result))\n        return''.join(result)\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '1 2 3 4 5' \n\n\ndef"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(' ')]\n    main_courses = [int(n) for n in stdin.split(' ')]\n    passed = []\n    queue = [main_courses[0]]\n    while queue:\n        current = queue.pop(0)\n        if current not in passed:\n            if current not in main_courses:\n                if len(passed) == n:\n                    return len(passed)\n            else:\n                passed.append(current)\n                for depend_course in main_courses:\n                    if current > depend_course:\n                        queue.append(depend_course)\n    return '-1'\n\ndef"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Step 1: initialization\n    n, k = list(map(int, stdin.split(' ')))\n    priority_list = list(map(int, stdin.split(' ')))\n    priority_queue = PriorityQueue()\n    number_of_used_courses = 0\n    list_of_courses_in_priority_queue = []\n    for priority in priority_list:\n        priority_queue.put((-priority, priority))\n    # Step 2: main loop\n    while True:\n        number_of_used_courses += 1\n        try:\n            course_in_priority_queue = priority_queue.get()[1]\n        except KeyError:\n            print(-1)\n            return\n        # Step 3: solution\n        list_of_courses_in_priority_queue.append(course_in_priority_queue)\n        for priority in priority_list:\n            if priority > course_in_priority_queue:\n                priority_queue.put((-priority, priority))\n                break\n        else:\n            break\n    print(number_of_used_courses)\n    for course in list_of_courses_in_priority_queue:\n        print(course, end=' ')\n    # Step 4: return result\n    return\n\n\nsolution('6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5')\nsolution('9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n')\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    p = stdin[2:]\n    p.sort()\n    for _ in range(k - 1):\n        mx = p.index(max(p))\n        p[:mx + 1] = p[mx::-1]\n    return \" \".join(p) if p.index(max(p)) == 0 else -1\n\nprint(solution(input()))"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    k, n = list(map(int, stdin.split('\\n')[0].split(' ')))\n    arr = sorted(list(map(int, stdin.split('\\n')[1].split(' '))))\n    print(arr)\n    return ''\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, k = map(int, stdin.split())\n    n = len(stdin.split())\n    if a < k:\n        print(-1)\n        return\n    if a == k:\n        print(\" \".join(stdin.split()))\n        return\n    if a > k:\n        print(\" \".join(stdin.split()))\n        return\n\nprint(solution(input()))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    \n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    return str(a)"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Solution: We maintain a stack of items.\n    #\n    # The stack is topologically sorted by the items.\n    # If we have a stack of size k, the stack is topologically sorted if and only if the last k items of the stack are greater than the first k items.\n    #\n    # We iterate through the given permutation in reverse order and push all the items that are greater than the last item on the stack onto the stack. We pop all the items from the stack and add them to the permutation, so that the last k items on the stack are pushed to the end. This will ensure that the stack is topologically sorted.\n    #\n    # Finally we reverse the permutation to get the lexicographically maximal permutation.\n    #\n    # Time O(n)\n    # Space O(n)\n\n    n, k = [int(x) for x in stdin.split()]\n    permutation = [int(x) for x in stdin.split()][::-1]\n    stack = []\n    top_item = n - k + 1\n    for item in permutation:\n        while len(stack) and stack[-1] < item:\n            stack.pop()\n        if not len(stack) or stack[-1] < item:\n            stack.append(item)\n    while len(stack):\n        permutation.append(stack.pop())\n    return \" \".join(str(x) for x in permutation[::-1])\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    n, k = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')[1:]))\n    s.sort()\n    for i in range(k):\n        k -= 1\n        if s[i] < k+1:\n            break\n    if k == -1:\n        print(-1)\n        return\n    s.remove(s[i])\n    print(' '.join(map(str, s)))\n    return\nsolution('5 3\\n3 2 1')\nsolution('5 1\\n3')\nsolution('5 2\\n3 4')\nsolution('5 2\\n4 3')\n\n\n\n'''\n    #    for i in range(k):\n    #        k -= 1\n    #        if s[i] < k+1:\n    #            break\n    #    if k == -1:\n    #        print(-1)\n    #        return\n    #    s.remove(s[i])\n    #    print(' '.join(map(str, s)))\n    #    return\n'''"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    b = []\n    for _ in range(k):\n        while a[0] in b:\n            a.append(a.pop(0))\n        b.append(a.pop(0))\n    return''.join([str(x) for x in a]) if len(a) == 0 else '-1'\n    pass\n\nprint(solution(input()))"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    first = a\n    second = first + c\n\n    while True:\n        if b == first or b == second:\n            return \"YES\"\n\n        if second >= b >= first:\n            return \"YES\"\n\n        first, second = second, second + c\n\n    return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    x = a\n    for i in range(1, b + 1):\n        if x == b:\n            return 'YES'\n        if (x + c) < b:\n            x = x + c\n        else:\n            x = x + c - b + 1\n    return 'NO'\n\n\nprint(solution(input()))"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    return 'YES' if b in [a + i * c for i in range(1, 10000)] else 'NO'\n\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(\" \")]\n    s = set()\n    s.add(a)\n    l = 1\n    while True:\n        if l == b:\n            return \"YES\"\n        if l > b:\n            return \"NO\"\n        s.add(l)\n        l = l + c\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    i = 1\n    while i * (a - c) <= b:\n        if i * (a - c) == b:\n            return 'YES'\n        i += 1\n    return 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input consists of three integers a, b, and c.\n\n    Find whether Vasya's favorite number b appears in the sequence.\n\n    The input is read from the standard input. Each line of the input consists of three integers a, b, and c,\n    corresponding to the first element, Vasya's favorite number and the difference between any two neighbouring\n    elements of the sequence, respectively.\n\n    :param stdin: str, the input string\n    :return: str, \"YES\" if the favorite number b appears in the sequence, \"NO\" otherwise\n    \"\"\"\n\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if (b - c) in range(a, b + c + 1) else \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + c in range(b, b + c + 1):\n        return 'YES'\n    return 'NO'\n\nprint(solution('1 7 3'))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b == a + c:\n        return \"YES\"\n    elif b == a - c:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if (a < b < c or a > b > c) and b % c == 0 else \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a <= b <= c:\n        print('YES')\n    elif b <= a <= c:\n        print('YES')\n    elif a <= c <= b:\n        print('YES')\n    else:\n        print('NO')\n    return \"\""
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt1 = int(stdin[0])\n    cnt2 = int(stdin[1])\n    cnt3 = int(stdin[2])\n    cnt4 = int(stdin[3])\n    result = ''\n    for i in range(cnt1):\n        result += '('\n    for i in range(cnt2):\n        result += ')'\n    for i in range(cnt3):\n        result += '('\n    for i in range(cnt4):\n        result += ')'\n    return '1' if isRegular(result) else '0'\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    def validate(s: str) -> bool:\n        stack = []\n        for b in s:\n            if b == \"(\":\n                stack.append(b)\n            elif b == \")\":\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n        return not stack\n\n    def generate_strings(s: str) -> set:\n        res = []\n        if not s:\n            res.append(\"\")\n            return res\n        i = 0\n        j = 0\n        while j < len(s):\n            if s[j] == \"(\":\n                left = s[i:j]\n                if validate(left):\n                    # j \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u043c\u0443\u044e \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n                    for s2 in generate_strings(s[j + 1:]):\n                        res.append(left + \"(\" + s2)\n                        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0440\u0438 \u043e\u0431\u0445\u043e\u0434\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432\n                        res.append(left + \"(\" + s2[:-1] + \")\" + s2[-1])\n            j += 1\n            i = j\n        return set(res)\n\n    def generate_bracket_sequences(s: str) -> set:\n        res = []\n        if not s:\n            res.append(\"\")\n            return res\n        i = 0\n        j = 0\n        while j < len(s):\n            if s[j] == \"(\":\n                left = s[i:j]\n                # \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0439, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0435 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n                if validate(left):\n                    res.append(left)\n                    # j \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u043c\u0443\u044e \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n                    for s2 in generate_bracket_sequences(s[j + 1:]):\n                        res.append(left + \"(\" + s2)\n                        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0440\u0438 \u043e\u0431\u0445\u043e\u0434\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432\n                        res.append(left + \"(\" + s2[:-1] + \")\" + s2[-1])\n            j += 1\n            i = j\n        return set(res)\n\n    def is_regular(s: str) -> bool:\n        return validate(s)\n\n    return 1 if is_regular(stdin) else 0\n\n\nassert solution(\"((()()())(())())\") == 1\nassert solution(\"\") == 1\nassert solution(\"((()()())\") == 0\nassert solution(\"(())(())\") == 0\nassert solution(\"(((())())\") == 0\nassert solution(\"()(())()(())((())(()))\") == 1\nassert solution(\"((()())(()))\") == 0\nassert solution(\"(())((()()))\") == 0\nassert solution(\"((()()())(()()))\") == 1\nassert solution(\"(((()(())()()))())\") == 1\nassert solution(\"((()(()(()))(())()())(((()(((((()))(((((()()(()(()(())))((()(()())(()()(())())())))((()(((((()()((()(()()))(()((()(()(((((((((())))((()(())(()))())((()()(()(()(())))((((((((())))(((()(()(((())((((()()(()(()())(()(((((((())))((()(()()(()()((()(()()(()(((((((((((((((((((((((((((((((()(()(()(((((((((((((((((((((((((((((((((((((((((()(()()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    tmp = 0\n    for i in range(0, s):\n        tmp += arr[i]\n    if s % 2 == 0 and tmp % 2 == 0:\n        return '1'\n    elif s % 2!= 0 and tmp % 2 == 0:\n        return '1'\n    else:\n        return '0'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    cnt1, cnt2, cnt3, cnt4 = list(map(int, stdin.split(\"\\n\")))\n    return 1 if cnt1 + cnt2 + cnt3 + cnt4 == len(\"(((()()()())))\") else 0\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split(\"\\n\"))\n    return \"1\" if cnt_1 + cnt_2 + cnt_3 + cnt_4 == 2*(cnt_1 + cnt_2 + cnt_3 + cnt_4) + 2 else \"0\"\n    \ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1\n   ... 4\n   ... 3''')\n    '1'\n    >>> solution('''0\n   ... 0\n   ... 0\n   ... 0''')\n    '1'\n    >>> solution('''1\n   ... 2\n   ... 3\n   ... 4''')\n    '0'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = input()\n    n, k, t = list(map(int, stdin.split(' ')))\n    while n < 1:\n        n, k, t = list(map(int, stdin.split(' ')))\n    return n - k\n    '''\n    # return int((n - k)/(k + 1))\n    return int((n - k) // (k + 1))\n\n\nprint(solution('10 5 3'))\n\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, k, t = stdin[0].split()\n    n = int(n)\n    k = int(k)\n    t = int(t)\n\n    # intialize dictionary with all positions as '-'\n    d = {str(i): '-' for i in range(1, n + 1)}\n\n    for i in range(k):\n        # for each sitting spectator, set corresponding value to '-'\n        d[str(i + 1)] = '-'\n\n        # for each standing spectator, increment value by 1\n        d[str(n - k + i + 1)] = str(int(d[str(n - k + i + 1)]) + 1)\n\n    # for each standing spectator, decrement value by 1\n    for i in range(n - k + 1, n + 1):\n        d[str(i)] = str(int(d[str(i)]) - 1)\n\n    return d[str(t)]\n\n\nprint(solution(\"10 5 3\"))\nprint(solution(\"10 5 7\"))\nprint(solution(\"10 5 12\"))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    return n - t + k"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    c = [0 for _ in range(n+1)]\n    c[0] = 0\n    c[1] = 1\n    for i in range(k+1):\n        for j in range(t, n+1, t):\n            if c[j-t] == i:\n                c[j] = i+1\n    return c[n]\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k, t = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1]), int(stdin[0].split(' ')[2])\n    result ='' + str(n - k)\n    for i in range(1, k):\n        result +='' + str(n - (i + k) + 1)\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    return n - k + (n - k - t + 1) // (k - 1)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = [int(x) for x in stdin.split()]\n    if t == 1:\n        return n\n    if t == 2:\n        return k\n    if t == 3:\n        return k - 1\n    if t == 4:\n        return k - 2\n    if t == 5:\n        return k - 3\n    if t == 6:\n        return k - 4\n    if t == 7:\n        return k - 5\n    if t == 8:\n        return k - 6\n    if t == 9:\n        return k - 7\n    if t == 10:\n        return k - 8\n    if t == 11:\n        return k - 9\n    if t == 12:\n        return k - 10\n    if t == 13:\n        return k - 11\n    if t == 14:\n        return k - 12\n    if t == 15:\n        return k - 13\n    return 0\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = stdin.split()\n    n, k, t = int(n), int(k), int(t)\n    if n == k == t:\n        return n\n    l = [i for i in range(1, n + 1)]\n    for i in range(k):\n        l[i] = '-'\n    for i in range(n):\n        if i % k == 0:\n            l[i] = '^'\n    l[t - 1] = '-'\n    l[t] = '^'\n    return sum([1 for i in l if i == '^'])\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    return n - (k * (t - 1)) + 1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = \"\"\n    u = \"\"\n    for i in range(len(s)):\n        t += s[i]\n        u += s[i]\n    \n    return min(s, t, u)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = ''\n    u = ''\n    if len(s) % 2 == 1:\n        s += '_'\n    for i in range(len(s)):\n        if i % 2 == 0:\n            t += s[i]\n        else:\n            u += s[i]\n    print(t)\n    print(u)\n    return t if u < t else u\n\ndef"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[1:] + stdin[-1]\n\nprint(solution('cab'))\nprint(solution('acdb'))\n\n\n-----Solution-----\n\nimport sys\nimport heapq\n\ndef"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[1:].replace(stdin[0], '', 1)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin[0:1]\n    u = stdin[-1:]\n    return t + u\n\n\n\ns = stdin.readline()\ns = solution(s)\nprint(s)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[1:-1] + stdin[-1]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = ''\n    u = ''\n    c = s[0]\n    for i in range(len(s)):\n        t += c\n        u += c\n        if s[i] > c:\n            c = s[i]\n    return t + u\n    \n    return u"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        records = []\n        for _ in range(n):\n            plays, clears = map(int, stdin.readline().split())\n            records.append((plays, clears))\n        \n        #print(records)\n        plays_set = set()\n        clears_set = set()\n        \n        for i in range(n):\n            #print(i, records[i])\n            plays_set.add(records[i][0])\n            clears_set.add(records[i][1])\n        #print(plays_set)\n        #print(clears_set)\n        \n        count = 0\n        for i in range(n - 1):\n            if records[i][0] == records[i + 1][0]:\n                count += 1\n            if records[i][1] == records[i + 1][1]:\n                count += 1\n        #print(count)\n        \n        if count == 0:\n            print(\"NO\")\n        elif count == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            \n        if not records[0][0] in plays_set:\n            print(\"NO\")\n        elif not records[0][1] in clears_set:\n            print(\"NO\")\n        \n        for i in range(n - 1):\n            if records[i][0] == records[i + 1][0] and records[i][1]!= records[i + 1][1]:\n                if not records[i + 1][0] in plays_set:\n                    print(\"NO\")\n                    break\n            if records[i][0]!= records[i + 1][0] and records[i][1] == records[i + 1][1]:\n                if not records[i][0] in clears_set:\n                    print(\"NO\")\n                    break\n                \n        else:\n            print(\"YES\")\n            \n        \n        #plays_set = set(records[0])\n        #for i in range(1, len(records)):\n        #    for j in range(len(records[i])):\n        #        plays_set.add(records[i][j])\n                #plays_set.add(records[i][0])\n        #        clears_set.add(records[i][j])\n        #print(plays_set)\n        #print(clears_set)\n        \n        #if len(records) == 1:\n        #    print(\"YES\")\n        #    continue\n        \n        #for i in range(len(records) - 1):\n        #    if records[i][0] == records[i + 1][0]:\n        #        plays_set.add(records[i + 1][0])\n        #    if records[i][1] == records[i + 1][1]:\n        #        clears_set.add(records[i + 1][1])\n        #print(plays_set)\n        #print(clears_set)\n        #if len(plays_set)!= n:\n        #    print(\"NO\")\n        #    continue\n        #if len(clears_set)!= n:\n        #    print(\"NO\")\n        #    continue\n        #print(\"YES\")\n        \n        #if len(plays_set) == len(clears_set) == n:\n        #    print(\"YES\")\n        #else:\n        #    print(\"NO\")\n        \n    return ''\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 4\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'NO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin.split()[1]) >= int(stdin.split()[2]) else 'NO'\n\"\"\"\n\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\nT = int(input())\n\nfor _ in range(T):\n    n = int(input())\n    nums = [0] * n\n    for i in range(n):\n        nums[i] = list(map(int, input().split()))\n    # print(nums)\n    is_ok = True\n    for i in range(1, n):\n        if nums[i][0] >= nums[i - 1][0] and nums[i][1] >= nums[i - 1][1]:\n            pass\n        else:\n            is_ok = False\n            break\n    print(\"YES\" if is_ok else \"NO\")\n\n\n\"\"\"\nSolution 1: O(n^2)\n\n[[0, 0], [1, 1], [1, 2], [2, 3], [3, 3]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [1, 1], [1, 2], [2, 3], [3, 3]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\n\n[[0, 0], [0, 0], ["
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of players that played the level,\n    in order to make Polycarp's record correct.\n    \"\"\"\n    test_cases = int(stdin.split()[0])\n    data = [stdin.split()[i * 2 + 1] for i in range(test_cases)]\n    num_plays = [int(d[0]) for d in data]\n    num_clears = [int(d[1]) for d in data]\n    valid = False\n    prev_clears = 0\n    prev_plays = 0\n    for i in range(len(num_plays)):\n        if num_clears[i] >= prev_clears:\n            prev_clears = num_clears[i]\n            prev_plays = num_plays[i]\n        else:\n            if num_clears[i] < prev_clears:\n                valid = True\n                break\n    if not valid:\n        return \"NO\"\n    curr_clears = 0\n    curr_plays = 0\n    for i in range(len(num_plays) - 1, -1, -1):\n        if num_plays[i] >= prev_plays:\n            curr_plays = num_plays[i]\n            curr_clears = num_clears[i]\n        else:\n            if num_plays[i] < prev_plays:\n                valid = True\n                break\n    if not valid:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 1\\n2 2\\n1 3\\n3\\n2 1\\n3\\n\")\n    'NO'\n    >>> solution(\"3\\n2 1\\n2 2\\n1 3\\n3\\n2 1\\n2 2\\n\")\n    'YES'\n    >>> solution(\"3\\n2 1\\n2 2\\n1 3\\n3\\n2 1\\n2 2\\n\")\n    'NO'\n    >>> solution(\"3\\n0 1\\n2 1\\n1 3\\n3\\n2 1\\n2 2\\n\")\n    'YES'\n    >>> solution(\"3\\n2 1\\n2 2\\n1 3\\n3\\n2 1\\n2 2\\n\")\n    'NO'\n    >>> solution(\"6\\n3\\n0 0\\n1 0\\n0 1\\n1 1\\n1 2\\n2\\n1 0\\n2\\n2 2\\n3\\n1 2\\n2 3\\n\")\n    'NO'\n    >>> solution(\"6\\n4\\n0 0\\n1 1\\n1 1\\n1 1\\n1 1\\n2\\n1 0\\n2\\n2 2\\n3\\n1 2\\n2 2\\n\")\n    'YES'\n    >>> solution(\"7\\n5\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"7\\n5\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"7\\n5\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"5\\n5\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"4\\n5\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"5\\n3\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"5\\n4\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"5\\n3\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"6\\n5\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"6\\n5\\n2 1\\n3 1\\n2 2\\n3 1\\n1 2\\n3 1\\n1 2\\n2 3\\n2 2\\n3 2\\n3 3\\n3 2\\n2 2\\n2 3\\n3 2\\n1 2\\n2 1\\n\")\n    'YES'\n    >>> solution(\"7\\n5\\n2 1\\n3 1\\n2 2\\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.readline())\n    for _ in range(tests):\n        n = int(stdin.readline())\n        records = []\n        for _ in range(n):\n            records.append(list(map(int, stdin.readline().split())))\n\n        records.sort(key=lambda x: x[0])\n        plays = [0] * (records[-1][0] + 1)\n        clears = [0] * (records[-1][0] + 1)\n        for record in records:\n            plays[record[0]] += record[1]\n            clears[record[0]] += record[2]\n        for i in range(len(plays) - 1):\n            if plays[i] == plays[i + 1] and clears[i] == clears[i + 1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'NO'\n    >>> solution('''6\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'YES'\n    >>> solution('''6\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'NO'\n    >>> solution('''6\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'YES'\n    >>> solution('''6\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'YES'\n    \"\"\"\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        stats = [list(map(int, stdin.readline().split())) for _ in range(n)]\n        stats = sorted(stats, key=lambda x: x[0])\n        prev_plays, prev_clears = 0, 0\n        for play, clear in stats:\n            prev_plays, prev_clears = play, clear\n        if prev_clears == prev_plays and stats[-1][1] == prev_clears:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        n = int(stdin.readline().strip())\n        plays, clears = [], []\n        for _ in range(n):\n            p, c = list(map(int, stdin.readline().strip().split()))\n            plays.append(p)\n            clears.append(c)\n        plays, clears = zip(*sorted(zip(plays, clears)))\n        f = 0\n        for p, c in zip(plays, clears):\n            f += p - c\n            if f < 0:\n                break\n        print(\"YES\" if f == 0 else \"NO\")\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the solution for part 1\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin\n    if int(time[:2]) < 12 and int(time[:2]) >= 0:\n        if int(time[3:]) < 60 and int(time[3:]) >= 0:\n            if int(time[:2]) < 11 and int(time[:2]) >= 0:\n                if int(time[:2]) == int(time[3:]):\n                    return 0\n                else:\n                    return (int(time[:2]) * 60) - int(time[3:])\n            else:\n                if int(time[:2]) == int(time[3:]):\n                    return 0\n                else:\n                    return (int(time[:2]) * 60) - int(time[3:]) + 1440\n        else:\n            return \"Error\"\n    else:\n        return \"Error\"\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'karen'"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split(\":\")\n    hour = int(time[0])\n    minute = int(time[1])\n    return hour * 60 + minute - (hour + minute) % 60\n\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [hours, minutes] = stdin.split(':')\n    return str(60 * int(hours) + int(minutes))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    time = stdin.split(':')\n    h1, m1 = int(time[0]), int(time[1])\n    if m1 == 0:\n        m1 = '00'\n        h1 -= 1\n    h1 = h1 % 12\n    m1 = m1 % 60\n    if h1 < 10:\n        h1 = '0' + str(h1)\n    else:\n        h1 = str(h1)\n    if m1 < 10:\n        m1 = '0' + str(m1)\n    else:\n        m1 = str(m1)\n    if h1[0] == m1[1]:\n        return min(int(m1) - int(h1[1]), int(h1[0]))\n    return min(int(m1) - int(h1[1]), int(h1[0]), 24 - int(h1[0]))\n\n\nprint(solution(input()))\n\n\n'''\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    print(\"13:31\")"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.replace(\":\", \"\")\n    time = int(time)\n    if time == int(str(time)[::-1]):\n        return \"0\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\":\")\n    hour = int(x[0])\n    minute = int(x[1])\n    return (hour * 60) + minute\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(time: str) -> bool:\n        return time == time[::-1]\n    time: str = stdin\n    hours, minutes = time.split(':')\n    hours = int(hours)\n    minutes = int(minutes)\n    if is_palindrome(str(hours)):\n        return '{}:{}'.format(hours, minutes + 1 if minutes < 59 else 0)\n    return '{}:{}'.format(hours + 1 if hours < 23 else 0, minutes + 2 if minutes < 59 else 0)\n\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def distance(n: int, a: str):\n        cnt = 0\n        for i in range(n - 1):\n            j = i + 1\n            while j < n:\n                if a[i] > a[j]:\n                    cnt += 1\n                j += 1\n        return cnt\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(distance(n, a), distance(n, a[::-1])))\n\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n4 5 1 3 2\")\n    3\n    >>> solution(\"7\\n1 6 5 3 4 7 2\")\n    6\n    >>> solution(\"6\\n6 5 4 3 2 1\")\n    5\n    \"\"\"\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    if nums == range(1, n + 1):\n        return 0\n    nums.sort()\n    max_dist = 0\n    for i in range(len(nums) - 1):\n        max_dist = max(max_dist, abs(nums[i] - nums[i + 1]))\n    return max_dist\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str()"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    m = min(a)\n    M = max(a)\n    \n    \n    return M - m\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for line in stdin.split('\\n'):\n        n = int(line.split()[0])\n        l = list(map(int, line.split()[1:]))\n        mini = min(l)\n        maxi = max(l)\n        cnt = 0\n        for i in range(n):\n            if l[i] == mini:\n                ans.append(i)\n                l[i] = maxi\n            elif l[i] == maxi:\n                ans.append(i)\n                l[i] = mini\n        d = abs(ans[0] - ans[1])\n        for i in range(n):\n            for j in range(i + 1, n):\n                d = min(d, abs(ans[i] - ans[j]))\n        print(d)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)\n    pass\n\nprint(solution(\"2 5 1 3 4\")) # 3\nprint(solution(\"1 6 5 3 4 7 2\")) # 6\nprint(solution(\"6 5 4 3 2 1\")) # 5\n\n\"\"\""
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get input\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    \n    # Set minimum and maximum to first and last\n    # positions in the array\n    min_index = 0\n    max_index = n - 1\n    \n    # Calculate distance between minimum and\n    # maximum\n    min_max_dist = abs(a[min_index] - a[max_index])\n    \n    # If the distance is maximum possible, then\n    # there's nothing to do\n    if min_max_dist == 0:\n        return str(min_max_dist)\n    \n    # Calculate distance between elements\n    # from second to second last\n    first_second_dist = abs(a[0] - a[1])\n    \n    # If first_second_dist is maximum possible,\n    # then we can swap only one element and there\n    # is nothing to do\n    if first_second_dist == 0:\n        return str(first_second_dist)\n    \n    # Calculate distance between elements\n    # from last to second last\n    last_second_dist = abs(a[n - 1] - a[n - 2])\n    \n    # If last_second_dist is maximum possible,\n    # then we can swap only one element and there\n    # is nothing to do\n    if last_second_dist == 0:\n        return str(last_second_dist)\n    \n    # We can either swap the first and second element\n    # or the last and second last element\n    return str(min(min_max_dist, first_second_dist, last_second_dist))\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n    arr.sort()\n    i, j = 0, n - 1\n    max_distance = 0\n    while i < j:\n        max_distance = max(max_distance, abs(arr[i] - arr[j]))\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return str(max_distance)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def swap_count(arr):\n        count = 0\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    count += 1\n        return count\n\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    print(swap_count(arr))\n\n\nsolution(\"5\\n4 5 1 3 2\\n\")\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin)\n    if len(lst) % 2 == 1:\n        return \"NIE\"\n    lst1 = lst[:int(len(lst) / 2)]\n    lst2 = lst[int(len(lst) / 2) + 1:]\n    if lst1 == lst2[::-1]:\n        return \"TAK\"\n    else:\n        return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import string\n    \n    if len(stdin) % 2!= 0:\n        return \"NIE\"\n    if stdin == stdin[::-1]:\n        return \"TAK\"\n    else:\n        return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if \"\".join(sorted(stdin)) == \"\".join(sorted(stdin)[::-1]) else \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if stdin == stdin[::-1] else \"NIE\"\n\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if stdin == stdin[::-1] else 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if stdin == stdin[::-1] else 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) % 2 == 0:\n        return \"NIE\"\n    else:\n        if stdin[:int(len(stdin) / 2)] == stdin[int(len(stdin) / 2):][::-1]:\n            return \"TAK\"\n        else:\n            return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if stdin == stdin[::-1] else 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if stdin == stdin[::-1] else \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"TAK\" if stdin[:len(stdin)//2] == stdin[len(stdin)//2:][::-1] else \"NIE\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    s = set()\n    while a:\n        if a[0] not in '0123456789':\n            a = a[1:]\n            continue\n        if a[0] in '0123456789':\n            s.add(a[0])\n        a = a[1:]\n    return ''.join(sorted(s))\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split())\n    # a = list(map(str, a))\n    # b = list(map(str, b))\n    a = list(a)\n    b = list(b)\n    # print(a)\n    # print(b)\n    count = 0\n    # print(type(a))\n    for i in range(len(a)):\n        # print(i)\n        if a[i]!= b[i]:\n            count += 1\n            # print(count)\n    # print(a)\n    # print(b)\n    # print(count)\n    for j in range(count):\n        # print(j)\n        # print(a)\n        # print(b)\n        for i in range(len(a)):\n            # print(i)\n            if a[i]!= b[i]:\n                # print(a)\n                # print(b)\n                # print(count)\n                # print(count)\n                # print(a[i])\n                # print(b[i])\n                # print(len(a))\n                # print(len(b))\n                # print(i)\n                # print(count)\n                a[i], a[count] = b[i], b[count]\n                count += 1\n                break\n    # print(a)\n    # print(b)\n    # print(a)\n    # a.sort()\n    # print(a)\n    # print(b)\n    if a[0] == '0':\n        # print(a)\n        a[0], a[1] = a[1], a[0]\n    if a[-1] == '0':\n        a[-1], a[-2] = a[-2], a[-1]\n    # print(a)\n    # print(b)\n    print(''.join(a))\n    # print(a)\n    # print(b)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Convert to integer and sort.\n    Keep comparing to keep the largest.\n    \"\"\"\n    a, b = map(int, stdin.split('\\n')[:2])\n    sorted_a = sorted(str(a))\n    sorted_b = sorted(str(b))\n    max_number = '0'\n    for index, num in enumerate(sorted_b):\n        if index >= len(sorted_a):\n            break\n        if num > sorted_a[index]:\n            max_number += num\n    return max_number\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = list(stdin)\n    string = ''\n    while len(number) > 1:\n        count = 1\n        for i in range(len(number) - 1):\n            if number[i] == number[i + 1]:\n                count += 1\n            else:\n                number[i + 1] = str(count)\n                count = 1\n        number = number[:len(number) - 1]\n    string = string.join(number)\n    return string\n\n\ndef"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    s = stdin\n    l = []\n    \n    for n in s:\n        if n!= '0':\n            l.append(n)\n    \n    l.sort(reverse = True)\n    \n    out = \"\".join(l)\n    return out\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_a = stdin\n    input_b = stdin\n    answer = []\n\n    # input a and b\n    a = input_a[0]\n    b = input_b[0]\n\n    # find maximum digit number in input_b that is less than input_a\n    maximum = int(input_b)\n    while int(a) >= maximum:\n        maximum = maximum // 10\n\n    # loop through all possible digit numbers in range\n    for i in range(maximum):\n        # create an empty list\n        check = []\n        # loop through each digit in a and b\n        for digit in a:\n            # create a list of every permutation of every digit in a and b\n            for num in list(permutations(digit)):\n                check.append(num)\n        # loop through the check list and check if every number is the same\n        if check[0] == check[1] == check[2] == check[3] == check[4] == check[5] == check[6] == check[7] == check[8] == check[9]:\n            # if it is, append the number to answer\n            answer.append(str(int(''.join(check[0]))))\n        # increment i by 1 to get the next maximum digit number\n        i += 1\n    # print the maximum digit number that is not greater than b\n    print(''.join(answer[0]))\n\n\nsolution('123', '222')\nsolution('3921', '10000')\nsolution('4940', '5000')\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    if len(a) > len(b):\n        b = stdin\n        a = stdin[:len(stdin)-len(a)]\n    b = b[::-1]\n    result = []\n    for i in range(len(a)):\n        if i < len(b):\n            if a[i] < b[i]:\n                result.append(b[i])\n                result.append(a[i])\n            else:\n                result.append(a[i])\n                result.append(b[i])\n        else:\n            result.append(a[i])\n    result = result[::-1]\n    result = \"\".join(result)\n    return result\n\nprint(solution(\"1234567890\"))"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(log(max(a, b)))\n    Space complexity: O(1)\n    \"\"\"\n    a, b = map(int, stdin.split())\n    res = [i for i in str(a)]\n    res = res[::-1]\n    res = [i for i in res if int(i)!= 0]\n    res = [i for i in res if i not in str(b)]\n    return \"\".join(res[::-1])\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    a = int(numbers[0])\n    b = int(numbers[1])\n\n    while a > 0:\n        if a > b:\n            break\n\n        if a == 1:\n            print(1)\n            break\n\n        if a == b:\n            print(a)\n            break\n\n        if a > b:\n            print(a % b)\n            break\n\nsolution('123\\n222')\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0:2])\n    s = list(str(a))\n    for i in range(len(s)):\n        s[i] = str(i)\n    s = ''.join(s)\n    s = [int(i) for i in s]\n    s.sort()\n    s = [str(i) for i in s]\n    s = ''.join(s)\n    while len(s) <= len(str(b)):\n        if s == str(b):\n            return s\n        s += str(a)\n    return s[:len(str(b))]\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    size = int(inp[0])\n    matrix = []\n    for _ in range(size):\n        matrix.append([char for char in inp[1 + _]])\n    directions = []\n    for _ in range(3):\n        matrix_copy = [[char for char in line] for line in matrix]\n        directions.append(get_directions(matrix_copy))\n\n    def check_for_win(matrix):\n        for line in matrix:\n            for char in line:\n                if char == 'O':\n                    return True\n        return False\n\n    for _ in range(size):\n        for i in range(size - 4):\n            for j in range(size - 4):\n                if check_for_win(make_matrix(matrix, i, j, directions)):\n                    return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    matrix = stdin.split('\\n')\n    a = []\n    for i in matrix:\n        a.append(i)\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            if a[i][j] == 'X':\n                a[i] = a[i][:j] + 'O' + a[i][j + 1:]\n    if a[0][0] == 'O' and a[0][1] == 'O' and a[0][2] == 'O' and a[0][3] == 'O' and a[0][4] == 'O':\n        return 'YES'\n    elif a[0][1] == 'O' and a[0][2] == 'O' and a[0][3] == 'O' and a[0][4] == 'O' and a[0][5] == 'O':\n        return 'YES'\n    elif a[1][0] == 'O' and a[1][1] == 'O' and a[1][2] == 'O' and a[1][3] == 'O' and a[1][4] == 'O':\n        return 'YES'\n    elif a[1][1] == 'O' and a[1][2] == 'O' and a[1][3] == 'O' and a[1][4] == 'O' and a[1][5] == 'O':\n        return 'YES'\n    elif a[2][0] == 'O' and a[2][1] == 'O' and a[2][2] == 'O' and a[2][3] == 'O' and a[2][4] == 'O':\n        return 'YES'\n    elif a[2][1] == 'O' and a[2][2] == 'O' and a[2][3] == 'O' and a[2][4] == 'O' and a[2][5] == 'O':\n        return 'YES'\n    elif a[3][0] == 'O' and a[3][1] == 'O' and a[3][2] == 'O' and a[3][3] == 'O' and a[3][4] == 'O':\n        return 'YES'\n    elif a[3][1] == 'O' and a[3][2] == 'O' and a[3][3] == 'O' and a[3][4] == 'O' and a[3][5] == 'O':\n        return 'YES'\n    elif a[4][0] == 'O' and a[4][1] == 'O' and a[4][2] == 'O' and a[4][3] == 'O' and a[4][4] == 'O':\n        return 'YES'\n    elif a[4][1] == 'O' and a[4][2] == 'O' and a[4][3] == 'O' and a[4][4] == 'O' and a[4][5] == 'O':\n        return 'YES'\n    elif a[5][0] == 'O' and a[5][1] == 'O' and a[5][2] == 'O' and a[5][3] == 'O' and a[5][4] == 'O':\n        return 'YES'\n    elif a[5][1] == 'O' and a[5][2] == 'O' and a[5][3] == 'O' and a[5][4] == 'O' and a[5][5] == 'O':\n        return 'YES'\n    elif a[6][0] == 'O' and a[6][1] == 'O' and a[6][2] == 'O' and a[6][3] == 'O' and a[6][4] == 'O':\n        return 'YES'\n    elif a[6][1] == 'O' and a[6][2] == 'O' and a[6][3] == 'O' and a[6][4] == 'O' and a[6][5] == 'O':\n        return 'YES'\n    elif a[7][0] == 'O' and a[7][1] == 'O' and a[7][2] == 'O' and a[7][3] == 'O' and a[7][4] == 'O':\n        return 'YES'\n    elif a[7][1] == 'O' and a[7][2] == 'O' and a[7][3] == 'O' and a[7][4] == 'O' and a[7][5] == 'O':\n        return 'YES'\n    elif a[8][0] == 'O' and a[8][1] == 'O' and a[8][2] == 'O' and a[8][3] == 'O' and a[8][4] == 'O':\n        return 'YES'\n    elif a[8][1] == 'O' and a[8][2] == 'O' and a[8][3] == 'O' and a[8][4] == 'O' and a[8][5] == 'O':\n        return 'YES'\n    elif a[9][0] == 'O' and a[9][1] == 'O' and a[9][2] == 'O' and a[9][3] == 'O' and a[9][4] == 'O':\n        return 'YES'\n    elif a[9][1] == 'O' and a[9][2] == 'O' and a[9][3] == 'O' and a[9][4] == 'O' and a[9][5] == 'O':\n        return 'YES'\n    elif a[0][0] == 'O' and a[1][0] == 'O' and a[2][0] == 'O' and a[3][0] == 'O' and a[4][0] == 'O':\n        return 'YES'\n    elif a[0][1] == 'O' and a[1][1] == 'O' and a[2][1] == 'O' and a[3][1] == 'O' and a[4][1] == 'O':\n        return 'YES'\n    elif a[0][2] == 'O' and a[1][2] == 'O' and a[2][2] == 'O' and a[3][2] == 'O' and a[4][2] == 'O':\n        return 'YES'\n    elif a[0][3] == 'O' and a[1][3] == 'O' and a[2][3] == 'O' and a[3][3] == 'O' and a[4][3] == 'O':\n        return 'YES'\n    elif a[0][4] == 'O' and a[1][4] == 'O' and a[2][4] == 'O' and a[3][4] == 'O' and a[4][4] == 'O':\n        return 'YES'\n    el"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len([line for line in stdin.split('\\n') if 'X' in line]) > len([line for line in stdin.split('\\n') if 'O' in line]) else \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.splitlines()\n    s = l[0]\n    c = s.count('X')\n    if c == s.count('O'):\n        return \"NO\"\n    return \"YES\" if s.count('.') >= c else \"NO\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"XX.XX.....\\n\"\n   ...          \".....OOOO\\n\"\n   ...          \"..........\\n\"\n   ...          \"..........\\n\"\n   ...          \"..........\\n\"\n   ...          \"..........\\n\"\n   ...          \"..........\\n\"\n   ...          \"..........\\n\"\n   ...          \"..........\\n\"\n   ...          \"..........\")\n    YES\n    \"\"\"\n   ...\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution will return YES if it is possible for Alice to win\n    if she makes her first move by putting a cross in the top left corner\n    \"\"\"\n\n    n, m = len(stdin), len(stdin[0])\n    s = stdin\n    for j in range(m):\n        if stdin[0][j] in \"XO\":\n            s = s[1:]\n            for i in range(n):\n                s[i] = s[i][:j] + s[i][j + 1:]\n            if s[0] in \"OX\":\n                return \"YES\"\n\n    for i in range(n):\n        if stdin[i][0] in \"XO\":\n            s = s[1:]\n            for j in range(m):\n                s[j] = s[j][:i] + s[j][i + 1:]\n            if s[0] in \"OX\":\n                return \"YES\"\n\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if stdin[i][j] in \"XO\":\n                s = s[1:]\n                for x in range(n):\n                    s[x] = s[x][:j] + s[x][j + 1:]\n                for y in range(m):\n                    s[y] = s[y][:i] + s[y][i + 1:]\n                if s[0] in \"OX\":\n                    return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nlines = stdin.split('\\n')\nm = [[c for c in line] for line in lines]\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def alice(matrix, x, y, l):\n        # x is the starting row\n        # y is the starting col\n        # l is the current length of the line\n        for i in range(10):\n            # left diagonal\n            if matrix[i][i] == 'X' or matrix[i][i] == 'O':\n                l += 1\n            else:\n                l = 1\n            if l >= 5:\n                return True\n            # right diagonal\n            if matrix[i][9 - i] == 'X' or matrix[i][9 - i] == 'O':\n                l += 1\n            else:\n                l = 1\n            if l >= 5:\n                return True\n        # check verticals\n        for i in range(10):\n            if matrix[i][y] == 'X' or matrix[i][y] == 'O':\n                l += 1\n            else:\n                l = 1\n            if l >= 5:\n                return True\n        # check horizontals\n        for i in range(10):\n            if matrix[x][i] == 'X' or matrix[x][i] == 'O':\n                l += 1\n            else:\n                l = 1\n            if l >= 5:\n                return True\n        return False\n\n    matrix = stdin.split('\\n')\n    matrix = [list(row) for row in matrix]\n    for i in range(10):\n        for j in range(10):\n            if matrix[i][j] == '.':\n                if alice(matrix, i, j, 1):\n                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = []\n    for row in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    sorted_matrix = sorted([[row, col, val] for row in range(n) for col, val in enumerate(matrix[row])], key=lambda x: x[2])\n    print(sorted_matrix)\n    return \" \".join(map(str, matrix))\n\n\nsolution(\"2 5\")"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    matrix = []\n    for _ in range(n):\n        row = [0] * n\n        matrix.append(row)\n    \n    def swap(matrix, first, second):\n        matrix[first[0]][first[1]], matrix[second[0]][second[1]] = matrix[second[0]][second[1]], matrix[first[0]][first[1]]\n\n    def check(matrix):\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if matrix[i][j]!= matrix[j][i]:\n                    return False\n        return True\n\n    def recursion(matrix, row_index, col_index, length, count):\n        if count == length:\n            return check(matrix)\n        for row in range(row_index, n):\n            for col in range(n - 1, col_index - 1, -1):\n                if col - row + 1 < length:\n                    continue\n                matrix[row][col], matrix[col][row] = 1, 1\n                if check(matrix):\n                    return True\n                matrix[row][col], matrix[col][row] = 0, 0\n        return False\n    \n    if not recursion(matrix, 0, 0, k, 0):\n        print(-1)\n    for row in matrix:\n        print(*row)\n\nsolution('2 5')\nsolution('3 2')\nsolution('2 1')\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5\\n1 0 0\\n0 0 0\\n0 1 0\")\n    1 0 0 \n    0 1 0 \n    0 0 0 \n    \"\"\"\n    pass"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    lst = [list(map(int, stdin.readline().split())) for _ in range(k)]\n    for i in range(n):\n        for j in range(n):\n            for jj in range(n-1, j, -1):\n                if (lst[i][j] == 1 and lst[i][j] == lst[i][jj]) or (lst[j][i] == 1 and lst[j][i] == lst[jj][i]):\n                    lst[i][j] = 0\n                    break\n                else:\n                    continue\n        for j in range(n-1, i, -1):\n            if (lst[i][j] == 1 and lst[i][j] == lst[j][i]) or (lst[j][i] == 1 and lst[j][i] == lst[j][jj]):\n                lst[i][j] = 0\n                break\n            else:\n                continue\n    if -1 not in lst:\n        for row in lst:\n            print(' '.join(map(str, row)))\n    else:\n        print(-1)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.readline().split())\n    if n * k < 1:\n        return -1\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.readline().split())))\n    for i in range(n):\n        for j in range(n - k + 1):\n            if arr[i][j]!= 1:\n                continue\n            else:\n                for y in range(j + 1, n - k + 1):\n                    if arr[i][j] == arr[i][y]:\n                        arr[i][j] = 1\n                        arr[i][y] = 1\n                        break\n                else:\n                    break\n    for i in range(n - k + 1):\n        for j in range(n):\n            if arr[i][j]!= 1:\n                continue\n            else:\n                for x in range(j + 1, n):\n                    if arr[i][j] == arr[x][j]:\n                        arr[i][j] = 1\n                        arr[x][j] = 1\n                        break\n                else:\n                    break\n    for i in range(n):\n        for j in range(n - k + 1):\n            if arr[i][j] == 1:\n                print(1, end=\" \")\n            else:\n                print(0, end=\" \")\n        print()\n    return \"\""
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(x) for x in stdin.split()]\n    if n == k:\n        return f\"0 {n * '1'}\\n0 {n * '1'}\"\n    A = [[0] * n for _ in range(n)]\n    curr_row = curr_col = k\n    curr_val = 1\n    while True:\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    A[i][j] = curr_val\n        if curr_col == n:\n            curr_row += 1\n            curr_col = curr_row\n            curr_val += 1\n        elif curr_row == n:\n            return \"-1\"\n        elif curr_row == curr_col:\n            curr_col += 1\n            A[curr_row][curr_col] = curr_val\n            curr_val += 1\n        elif curr_row < curr_col:\n            curr_col -= 1\n            A[curr_row][curr_col] = curr_val\n            curr_val += 1\n        elif curr_row > curr_col:\n            curr_row -= 1\n            A[curr_row][curr_col] = curr_val\n            curr_val += 1\n    return \"\\n\".join([\" \".join(str(x) for x in row) for row in A])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(k):\n        row, col = list(map(int, stdin.split()))\n        matrix[row - 1][col - 1] = 1\n    return \" \".join(map(lambda row: \" \".join(map(lambda x: str(x), row)), matrix))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds matrix with k ones that is lexicographically maximal\n    '''\n    n, k = [int(x) for x in stdin.split()]\n    print(k)\n    matrix = []\n    for row in range(n):\n        matrix.append(list(map(int, stdin.split()[row*n:(row+1)*n])))\n    print(matrix)\n    for row in range(n):\n        for col in range(n):\n            if matrix[row][col] == 0:\n                matrix[row][col] = 1\n                if sorted(matrix[row]) > sorted(matrix[col]):\n                    matrix[row][col] = 0\n                    matrix[col][row] = 0\n    print(matrix)\n    if sum(sum(row) for row in matrix) < k or sum(sum(row) for row in matrix[::-1]) < k:\n        return -1\n    else:\n        return '\\n'.join(' '.join(map(str, row)) for row in matrix)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = [int(i) for i in stdin.strip().split()]\n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(k):\n        row, col = [int(i) for i in stdin.strip().split()]\n        matrix[row - 1][col - 1] = 1\n\n    for row in range(n):\n        for col in range(row, n):\n            if matrix[row][col] == 0:\n                for i in range(row, col):\n                    if matrix[i][col]!= matrix[row][i]:\n                        matrix[row][col] = -1\n                        break\n                    elif matrix[i][col]!= matrix[row][i]:\n                        matrix[row][col] = -1\n                        break\n                else:\n                    matrix[row][col] = 1\n\n    for row in range(n):\n        for col in range(n):\n            if matrix[row][col] == -1:\n                matrix[row][col] = 0\n\n    return \"\\n\".join([\" \".join(map(str, row)) for row in matrix])\n    '''\n\n    '''\n    n, k = [int(i) for i in stdin.strip().split()]\n    matrix = [[0] * n for _ in range(n)]\n\n    for _ in range(k):\n        i, j = [int(i) for i in stdin.strip().split()]\n        matrix[i - 1][j - 1] = 1\n\n    def check(m):\n        for row in range(n):\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col] == m[col][row]:\n                    continue\n                else:\n                    return False\n            if row == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row][col + 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col + 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col + 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col - 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row][col + 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col - 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col + 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col + 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col - 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col - 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col - 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row][col - 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col - 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row + 1][col + 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col + 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!= m[row - 1][col - 1]:\n                    return False\n            if col == n - 1:\n                continue\n            for col in range(n):\n                if m[row][col] == 0:\n                    continue\n                elif m[row][col]!="
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(float, stdin.split()))\n\n    m = max(x ** y ** z, x ** z ** y, (x ** y) ** z, (x ** z) ** y, y ** x ** z, y ** z ** x,\n            (y ** x) ** z, (y ** z) ** x, z ** x ** y, z ** y ** x, (z ** x) ** y, (z ** y) ** x)\n    \n    if m == x ** y ** z:\n        return f'z^y^x'\n    elif m == x ** z ** y:\n        return f'x^z^y'\n    elif m == (x ** y) ** z:\n        return f'(x^y)^z'\n    elif m == (x ** z) ** y:\n        return f'(x^z)^y'\n    elif m == y ** x ** z:\n        return f'y^x^z'\n    elif m == y ** z ** x:\n        return f'y^z^x'\n    elif m == (y ** x) ** z:\n        return f'(y^x)^z'\n    elif m == (y ** z) ** x:\n        return f'(y^z)^x'\n    elif m == z ** x ** y:\n        return f'z^x^y'\n    elif m == z ** y ** x:\n        return f'z^y^x'\n    elif m == (z ** x) ** y:\n        return f'(z^x)^y'\n    elif m == (z ** y) ** x:\n        return f'(z^y)^x'\n    elif m == x ** y ** z:\n        return f'x^y^z'\n    elif m == x ** z ** y:\n        return f'x^z^y'\n    elif m == (x ** y) ** z:\n        return f'(x^y)^z'\n    elif m == (x ** z) ** y:\n        return f'(x^z)^y'\n    elif m == y ** x ** z:\n        return f'y^x^z'\n    elif m == y ** z ** x:\n        return f'y^z^x'\n    elif m == (y ** x) ** z:\n        return f'(y^x)^z'\n    elif m == (y ** z) ** x:\n        return f'(y^z)^x'\n    elif m == z ** x ** y:\n        return f'z^x^y'\n    elif m == z ** y ** x:\n        return f'z^y^x'\n    elif m == (z ** x) ** y:\n        return f'(z^x)^y'\n    elif m == (z ** y) ** x:\n        return f'(z^y)^x'\n    else:\n        return 'Not possible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = (float(x) for x in stdin.split())\n    a = []\n    for i in range(1, 13):\n        if i % 3 == 1:\n            a.append(x ** y ** z)\n        elif i % 3 == 2:\n            a.append(x ** z ** y)\n        elif i % 3 == 0:\n            a.append((x ** y) ** z)\n    a = list(map(str, a))\n    m = max(a)\n    c = a.index(m) + 1\n    return f'{m}^{c}'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(i) for i in stdin.split()]\n\n    return max([(x**y)**z, (x**z)**y, x**(y**z), x**(z**y),\n                y**(x**z), y**(z**x), (y**x)**z, (y**z)**x,\n                z**(x**y), z**(y**x)], key=lambda a: int(a.split('.')[0]))\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine which of the 12 expressions of a_1,..., a_12 that\n    maximises x^{y}^{z} is printed.\n\n    >>> solution(\"1.1 3.4 2.5\")\n    z^y^x\n    >>> solution(\"2.0 2.0 2.0\")\n    x^y^z\n    >>> solution(\"1.9 1.8 1.7\")\n    (x^y)^z\n    \"\"\"\n    x, y, z = map(float, stdin.split())\n\n    def exp_of_num(a, b, c):\n        return a**b**c\n\n    expressions = [\n        exp_of_num(x, y, z),\n        exp_of_num(x, z, y),\n        exp_of_num(x, y, y),\n        exp_of_num(x, z, z),\n        exp_of_num(y, x, z),\n        exp_of_num(y, z, x),\n        exp_of_num(y, x, y),\n        exp_of_num(y, z, z),\n        exp_of_num(z, x, y),\n        exp_of_num(z, y, x),\n        exp_of_num(z, x, z),\n        exp_of_num(z, y, y),\n    ]\n    m = max(expressions)\n    max_exp = [\n        e for e in expressions if e == m\n    ]\n    c = max_exp[0]\n    return f\"{x}^{y}^{z}\" if c == exp_of_num(x, y, z) else f\"({x}^y)^{z}\"\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(i) for i in stdin.split()]\n    options = [x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x]\n    return f'{max(options)}'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n\n    def check(a, b, c):\n        return a*b*c > 1\n\n    def check_2(a, b, c):\n        return a*c*b > 1\n\n    def check_3(a, b, c):\n        return b*c*a > 1\n\n    def check_4(a, b, c):\n        return b*c*a > 1\n\n    def check_5(a, b, c):\n        return c*a*b > 1\n\n    def check_6(a, b, c):\n        return c*a*b > 1\n\n    def check_7(a, b, c):\n        return a*b*c > 1\n\n    def check_8(a, b, c):\n        return a*b*c > 1\n\n    def check_9(a, b, c):\n        return c*a*b > 1\n\n    def check_10(a, b, c):\n        return c*a*b > 1\n\n    def check_11(a, b, c):\n        return c*b*a > 1\n\n    def check_12(a, b, c):\n        return c*b*a > 1\n\n    ans = ''\n    for i in range(1, 13):\n        if check(x, y, i):\n            ans = 'x^y^z'\n            break\n        if check_2(x, i, z):\n            ans = '(x^y)^z'\n            break\n        if check_3(x, y, i):\n            ans = 'x^(y^z)'\n            break\n        if check_4(x, i, z):\n            ans = '(x^z)^y'\n            break\n        if check_5(y, x, i):\n            ans = 'y^(x^z)'\n            break\n        if check_6(y, z, i):\n            ans = 'y^(z^x)'\n            break\n        if check_7(y, x, i):\n            ans = '(y^x)^z'\n            break\n        if check_8(y, z, i):\n            ans = '(y^z)^x'\n            break\n        if check_9(z, x, y):\n            ans = 'z^(x^y)'\n            break\n        if check_10(z, y, x):\n            ans = 'z^(y^x)'\n            break\n        if check_11(z, x, y):\n            ans = 'z^(x^y)'\n            break\n        if check_12(z, y, x):\n            ans = 'z^(y^x)'\n            break\n\n    return ans\n\n\nprint(solution('1.1 3.4 2.5'))\nprint(solution('2.0 2.0 2.0'))\nprint(solution('1.9 1.8 1.7'))\nprint(solution('0.3 0.3 0.3'))\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    c = [x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x]\n    return max(c, key=lambda x: c.count(x))\ndef"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(x) for x in stdin.split()]\n    res = max(x ** y ** z, x ** z ** y, (x ** y) ** z, (x ** z) ** y,\n              y ** x ** z, y ** z ** x, (y ** x) ** z, (y ** z) ** x,\n              z ** x ** y, z ** y ** x, (z ** x) ** y, (z ** y) ** x)\n    if res == x ** y ** z:\n        return 'z^y^x'\n    elif res == x ** z ** y:\n        return '(z^x)^y'\n    elif res == (x ** y) ** z:\n        return 'x^y^z'\n    elif res == (x ** z) ** y:\n        return '(x^z)^y'\n    elif res == y ** x ** z:\n        return 'y^x^z'\n    elif res == y ** z ** x:\n        return 'y^z^x'\n    elif res == (y ** x) ** z:\n        return '(y^x)^z'\n    elif res == (y ** z) ** x:\n        return '(y^z)^x'\n    elif res == z ** x ** y:\n        return 'z^x^y'\n    elif res == z ** y ** x:\n        return 'z^y^x'\n    elif res == (z ** x) ** y:\n        return 'z^(x^y)'\n    elif res == (z ** y) ** x:\n        return 'z^(y^x)'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin.split()\n    x, y, z = float(x), float(y), float(z)\n    m = max(x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x)\n    c = min(filter(lambda i: m == x**y**z, range(1, 13)), default=0)\n    return f\"z^{y}^x\" if c == 1 else f\"(z^{x}^y)\""
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    x = [a, b, c]\n    x = sorted(x)\n    x.reverse()\n    x = max(x)\n    if b > c:\n        x = b ** x\n        if a > b:\n            x = x ** a\n        elif a < b:\n            x = x ** a\n    elif c > b:\n        x = c ** x\n        if a > c:\n            x = x ** a\n        elif a < c:\n            x = x ** a\n    elif b == c:\n        if a > c:\n            x = x ** a\n        elif a < c:\n            x = x ** a\n    return str(x)\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if len(string) == 0:\n        return 0\n    elif len(string) == 1:\n        return 1\n    elif len(string) > 1:\n        string = string.lower()\n        return 1 + (string.count(string[0])) + solution(string.replace(string[0], ''))"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) <= 1:\n        return len(stdin)\n    # \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n    for i in range(2, len(stdin) + 1):\n        # \u043a\u043e\u043f\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n        s = stdin[:i]\n        # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043a\u043e\u043f\u0438\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n        for j in range(1, i):\n            # \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043f\u0438\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n            s2 = stdin[j:i]\n            # \u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0442\u043e \u0440\u0430\u0441\u0441\u0447\u0435\u0442 \u0432\u0435\u0440\u043d\u0435\u0442 \u043e\u0434\u043d\u0443 \u0438 \u0442\u0443 \u0436\u0435 \u0434\u043b\u0438\u043d\u0443\n            if len(s2) <= 1:\n                continue\n            # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0434\u043b\u0438\u043d\u044b \u043d\u043e\u0432\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0442\u0430\u0432\u043a\u0438\n            len_s3 = len(stdin[:j] + stdin[j:i])\n            # \u0435\u0441\u043b\u0438 \u0440\u0430\u0441\u0441\u0447\u0435\u0442 \u043d\u043e\u0432\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0440\u0430\u0432\u0435\u043d \u0434\u043b\u0438\u043d\u0435 \u0441\u0442\u0430\u0440\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0442\u043e \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\n            if len_s3 == len_s2:\n                continue\n            # \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n            s = s2 + s\n            # \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a\n            count += len(s2) - len(stdin[:j] + stdin[j:i])\n    return count"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n\n------\"\"\"\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Not yet implemented\""
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return len(stdin)"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    example = []\n    test = []\n    for i in stdin:\n        s = i.split()\n        if s[1] == '0':\n            test.append(s[0])\n        else:\n            example.append(s[0])\n    \n    test.sort(reverse=True)\n    example.sort()\n    test_iter = iter(test)\n    example_iter = iter(example)\n    for i in test_iter:\n        yield \"move \" + i + \" \" + str(next(example_iter))\n        \n        \n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_test_files = stdin.split('\\n')[0]\n    file_names = stdin.split('\\n')[1:]\n    example_names = []\n    regular_names = []\n    for file_name in file_names:\n        name, type = file_name.split(' ')\n        if type == '1':\n            example_names.append(name)\n        else:\n            regular_names.append(name)\n    example_names.sort()\n    regular_names.sort()\n    example_names_len = len(example_names)\n    regular_names_len = len(regular_names)\n    if example_names_len == 0 and regular_names_len == 0:\n        return str(0)\n    elif example_names_len == 0:\n        return str(regular_names_len + 1)\n    elif regular_names_len == 0:\n        return str(example_names_len + 1)\n    else:\n        for regular_name in regular_names:\n            for example_name in example_names:\n                if int(example_name) > int(regular_name):\n                    example_names.insert(example_names.index(example_name), regular_name)\n                    example_names_len += 1\n                    regular_names.remove(regular_name)\n                    break\n        return str(example_names_len + regular_names_len)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    lines = stdin[1:]\n    examples = []\n    count = 1\n    result = []\n    for i in range(n):\n        file_name, file_type = lines[i].split(' ')\n        if file_type == '0':\n            result.append('move'+ file_name +'' + str(count) + '\\n')\n            count += 1\n        else:\n            examples.append(file_name)\n    for example in examples:\n        result.append('move'+ example +'' + str(count) + '\\n')\n        count += 1\n    return result\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = dict()\n    for i in range(n):\n        name, type_ = stdin.split()\n        if type_ == \"0\":\n            data[name] = i+1\n        else:\n            data[i+1] = name\n    count = 0\n    while True:\n        key, value = data.popitem()\n        count += 1\n        if value in data:\n            data[value] = key\n        else:\n            break\n    return str(count) + \"\\n\" + \"\\n\".join([\"move \" + str(key) + \" \" + str(value) for key, value in data.items()])\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    examples = stdin.split('\\n')\n    examples = list(map(lambda x: x.split(' '), examples))\n    examples = list(map(lambda x: [int(x[0]), int(x[1])], examples))\n    examples = sorted(examples, key=lambda x: x[0])\n    examples = list(map(lambda x: [str(x[0]), '1' if x[1] == 1 else '0'], examples))\n    s = ''\n    s +='move'+ examples[0][0] +'' + str(len(examples) + 1) + '\\n'\n    for i in range(1, len(examples)):\n        s +='move'+ examples[i][0] +'' + str(len(examples) + i) + '\\n'\n    return s\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    with open('test.txt', 'w') as f:\n        f.write(stdin)\n        f.close()\n\n    with open('test.txt') as f:\n        n = int(f.readline())\n        lines = f.readlines()\n        f.close()\n\n    with open('test.txt', 'w') as f:\n        for line in lines:\n            if line.split(' ')[0]!= '1':\n                f.write(line.replace('2', str(n)))\n            else:\n                f.write(line.replace('2', str(n + 1)))\n                n += 1\n        f.close()\n\n    with open('test.txt') as f:\n        n = int(f.readline())\n        lines = f.readlines()\n        f.close()\n\n    with open('test.txt', 'w') as f:\n        for line in lines:\n            if line.split(' ')[0] == '1':\n                f.write(line.replace('1', str(n + 1)))\n                n += 1\n            else:\n                f.write(line)\n        f.close()\n\n    with open('test.txt') as f:\n        n = int(f.readline())\n        lines = f.readlines()\n        f.close()\n    return n\n\n\nprint(solution(stdin))"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    examples = int(lines.pop(0))\n    examples_offset = 0\n    regular_test_offset = examples_offset + examples\n    for line in lines:\n        file_name, type_ = line.split()\n        if type_ == \"1\":\n            examples_offset += 1\n        else:\n            regular_test_offset += 1\n    return (\n        str(examples_offset)\n        + \"\\n\"\n        + \"\\n\".join(\n            [\n                \"move \" + str(example_idx + examples_offset + 1) + \" \" + str(example_idx + examples_offset)\n                for example_idx in range(examples)\n            ]\n        )\n        + \"\\n\"\n        + \"\\n\".join(\n            [\n                \"move \" + str(example_idx + examples_offset + 1) + \" \" + str(example_idx + regular_test_offset)\n                for example_idx in range(examples, len(lines))\n            ]\n        )\n    )\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_examples = int(stdin)\n    examples = [int(stdin[i]) for i in range(num_examples)]\n    tests = [int(stdin[i]) for i in range(num_examples, len(stdin))]\n\n    examples_ind = 0\n    tests_ind = 0\n    examples_num = 0\n    tests_num = 0\n\n    examples_ind_start = 0\n    tests_ind_start = 0\n    examples_num_start = 0\n    tests_num_start = 0\n\n    while examples_ind!= len(examples) and tests_ind!= len(tests):\n        if examples[examples_ind] > tests[tests_ind]:\n            examples_ind += 1\n        else:\n            tests_ind += 1\n\n        if examples[examples_ind] > examples[examples_ind_start]:\n            examples_ind_start += 1\n\n        if tests[tests_ind] > tests[tests_ind_start]:\n            tests_ind_start += 1\n\n    while examples_ind!= len(examples) and examples_num!= num_examples:\n        examples_num += 1\n        examples_ind = examples_ind_start\n        examples_ind_start += 1\n\n        if examples[examples_ind] > tests[tests_ind]:\n            break\n\n    while tests_ind!= len(tests) and tests_num!= num_examples:\n        tests_num += 1\n        tests_ind = tests_ind_start\n        tests_ind_start += 1\n\n        if tests[tests_ind] > examples[examples_ind]:\n            break\n\n    return str(examples_num + tests_num) + \"\\n\" + \\\n           \"\\n\".join([\"move \" + str(i + 1) + \" \" + str(i + examples_num + 1) for i in range(num_examples)]) + \"\\n\" + \\\n           \"\\n\".join([\"move \" + str(examples_num + 1 + i) + \" \" + str(i + examples_num + 1) for i in range(num_examples)]) + \"\\n\"\n\n\nassert solution(\"5\\n01 0\\n2 1\\n2extra 0\\n3 1\\n99 0\") == \"4\\nmove 3 1\\nmove 01 5\\nmove 2extra 4\\nmove 99 3\"\nassert solution(\"1\\n2 1\\n2extra 0\") == \"3\\nmove 1 3\\nmove 2 1\\nmove 2extra 4\"\nassert solution(\"5\\n1111 1\\n1111 0\") == \"5\\nmove 11111 2\\nmove 111 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11 11\\nmove 111 1\\nmove 11"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin[0:stdin.find(\"\\n\")])\n    ans = 0\n    example_count = 0\n    regular_count = 0\n    for i in range(1, n+1):\n        if stdin[i*2:i*2+2] == \"0 1\":\n            example_count += 1\n            ans += regular_count + 1\n        elif stdin[i*2:i*2+2] == \"0 0\":\n            regular_count += 1\n            ans += example_count\n        else:\n            if example_count == 0:\n                example_count = 1\n            else:\n                example_count += 1\n            regular_count += 1\n    return ans"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def move_file(old_file: str, new_file: str):\n        if os.path.exists(new_file):\n            os.remove(new_file)\n        os.rename(old_file, new_file)\n\n    def get_example_count(dir: str) -> int:\n        return sum(1 for i in os.listdir(dir) if i[0] == '1')\n\n    def get_regular_count(dir: str) -> int:\n        return sum(1 for i in os.listdir(dir) if i[0]!= '1')\n\n    examples_count = int(stdin.split('\\n')[0])\n\n    file_count = examples_count + get_regular_count(dir=os.getcwd())\n    if file_count > 0:\n        with open('script.txt', 'w') as f:\n            for i in range(examples_count):\n                f.write(f'move {i + 1} {i + 1}\\n')\n            for i in range(examples_count, file_count):\n                f.write(f'move {i + 1} {i + 1 + examples_count}\\n')\n\n    print(os.popen('cat script.txt').read().strip())\n\n\nsolution(stdin=input())\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count('0'))\n\"\"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\ndef"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return f'{sum([int(i) for i in stdin[:3]]) - sum([int(i) for i in stdin[3:]])}'\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    stdin = [int(i) for i in stdin]\n    if sum(stdin[:3]) == sum(stdin[-3:]):\n        return 0\n    for i in range(len(stdin)):\n        if sum(stdin[:3]) == sum(stdin[-3:]):\n            break\n        if stdin[i] == 0:\n            result += 1\n            stdin[i] = 3\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        stdin[:3]\n        + \"0\" * (len(stdin) - 3)\n        + stdin[3:]\n    )\n\ndef"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - 3)\n    \n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split(' '))\n    return (m - 1) // gcd(m, x) + 1\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, m = map(int, stdin.split(' '))\n    return str(gcd(x, m) - 1)\n\"\"\"\ndef"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split(' '))\n    return str(m - gcd(x, m))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = (int(n) for n in stdin.split())\n    return str(min(max(0, m - 1 - x), n - 1))\n    \n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, x = [int(s) for s in stdin.split(' ')]\n    return str(x % m if x % m!= 0 else m)\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return (m - 2) // gcd(x, m)\n\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'x'"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return m + sum(x // i for i in range(2, m) if m % i == 0)\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, x = [int(i) for i in stdin.split(' ')]\n    if m < 2 or m > 10 ** 14:\n        raise ValueError('m must be between 2 and 10^14')\n    if x < 1 or x > m:\n        raise ValueError('x must be between 1 and m')\n    if gcd(x, m)!= 1:\n        raise ValueError('x must be coprime to m')\n\n    trap_count = 1\n    pos = 1\n    while trap_count * pos < m:\n        trap_count *= 2\n    trap_count -= m // trap_count\n\n    return trap_count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # a, b = [int(i) for i in stdin.split()]\n    # if a == 0:\n    #     return '1 1'\n    # num_days = int(math.log(b, 2))\n    # if num_days == 0:\n    #     return '1 1'\n    # a = a + num_days * (1 - a) * (1 - 2 ** (-num_days))\n    # b = 2 ** num_days\n    # for i in range(num_days):\n    #     a += (a - b) * (1 - 2 ** (-num_days + i))\n    #     b *= 2\n    # ans = str(a // (b % (10 ** 6 + 3))) +'' + str(b // (10 ** 6 + 3))\n    # return ans\n\n    # a, b = [int(i) for i in stdin.split()]\n    # print(a + math.floor(math.log(b, 2)) * (1 - a) * (1 - 2 ** (-math.floor(math.log(b, 2)))))\n    a, b = [int(i) for i in stdin.split()]\n    a, b = a + math.floor(math.log(b, 2)) * (1 - a) * (1 - 2 ** (-math.floor(math.log(b, 2)))), 2 ** math.floor(math.log(b, 2))\n    while b > 10 ** 6 + 3:\n        a, b = a * b % (10 ** 6 + 3), b * b % (10 ** 6 + 3)\n    return str(a) +'' + str(b)\n\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(stdin='4 3'), '23 128')\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_ = [int(line.strip()) for line in stdin.split('\\n')]\n    n = input_[0]\n    k = input_[1]\n    A, B = n - 1, n\n    for i in range(2, k):\n        A = A * (n - i) // i\n        B = B * (n - i) // i\n    while gcd(A, B)!= 1:\n        A, B = A + 1, B + 1\n    return \"{} {}\".format(A, B)\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the probability of getting at least 2 people having the same birthday\n    '''\n    \n    # read the input\n    n, k = [int(n) for n in stdin.split(' ')]\n    \n    # calculate the probability\n    p = 1 - (n - k) / n\n    \n    return f\"{int(p // 1) % 10000003} {int((p % 1) * 10 ** 6 + 3)}\"\n    \n    \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(k - 1) +'' + str(2 ** n - 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    prob = 2 ** n\n    a, b = 1, prob\n    while b > 0:\n        a, b = b, a % b\n    print(a % 10 ** 6 + 3)\n    return ''\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    n, k = map(int, stdin.readline().split())\n    return str(1) +'' + str(int(1e6 + 3))\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the two lucky numbers (modulo 10^6 + 3).\n    >>> solution('3 2')\n    '1 8'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_coprime(a, b):\n        return gcd(a, b) == 1\n    \n    def gcd(a, b):\n        return b if a == 0 else gcd(b % a, a)\n    \n    \n    def fraction_to_decimal(fraction: str) -> int:\n        if fraction == \"0/1\":\n            return 0\n        left, right = fraction.split(\"/\")\n        result = 0\n        for i in range(len(left)):\n            left_digit = int(left[i])\n            right_digit = int(right[i])\n            result += left_digit * (10**i)\n            result -= right_digit * (10**i)\n        return result\n    \n    \n    def decimal_to_fraction(decimal: int) -> str:\n        result = \"\"\n        while decimal > 0:\n            d = decimal % 10\n            decimal //= 10\n            result = str(d) + result\n        return result\n    \n    \n    n, k = [int(x) for x in stdin.split(\" \")]\n    \n    # for the case n = 1 and k = 1\n    if n == 1 and k == 1:\n        return \"1 1\"\n    \n    # for the case n > 1 and k == 1\n    if n > 1 and k == 1:\n        max_days = 2**n\n        max_probability = max_days / 2\n        \n        # for the case n = 1 and k > 1\n        if n == 1:\n            max_probability = max_days / k\n        \n        # for the case n > 1 and k > 1\n        if n > 1:\n            max_probability = max_days / (k ** 2)\n        \n        # if the probability is greater than 1\n        if max_probability >= 1:\n            return \"1 \" + decimal_to_fraction(max_probability)\n        \n        # if the probability is less than 1\n        if max_probability < 1:\n            a = 1\n            b = int(max_probability)\n            while not is_coprime(a, b):\n                a += 1\n                b *= a\n            return \"1 \" + decimal_to_fraction(b)\n    \n    # for the case k = 2 and n > 1\n    if n > 1 and k == 2:\n        max_days = 2**n\n        max_probability = max_days / 3\n        \n        # for the case n = 1 and k > 2\n        if n == 1:\n            max_probability = max_days / k\n        \n        # for the case n > 1 and k > 2\n        if n > 1:\n            max_probability = max_days / (k ** 2)\n        \n        # if the probability is greater than 1\n        if max_probability >= 1:\n            return \"1 \" + decimal_to_fraction(max_probability)\n        \n        # if the probability is less than 1\n        if max_probability < 1:\n            a = 1\n            b = int(max_probability)\n            while not is_coprime(a, b):\n                a += 1\n                b *= a\n            return \"1 \" + decimal_to_fraction(b)\n        \n    # for the case k > 2 and n > 1\n    if n > 1 and k > 2:\n        max_days = 2**n\n        max_probability = max_days / (k ** 3)\n        \n        # for the case n = 1 and k > 2\n        if n == 1:\n            max_probability = max_days / (k ** 2)\n        \n        # for the case n > 1 and k > 2\n        if n > 1:\n            max_probability = max_days / (k ** 3)\n        \n        # if the probability is greater than 1\n        if max_probability >= 1:\n            return \"1 \" + decimal_to_fraction(max_probability)\n        \n        # if the probability is less than 1\n        if max_probability < 1:\n            a = 1\n            b = int(max_probability)\n            while not is_coprime(a, b):\n                a += 1\n                b *= a\n            return \"1 \" + decimal_to_fraction(b)\n    \n    \n    \n    return \"1 \" + decimal_to_fraction(1)\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n\n    n, k = map(int, stdin.split())\n    remainder = 2 ** n\n    people_count = k\n    remainder //= people_count\n    remainder_set = set()\n    remainder_set.add(remainder)\n    for i in range(1, n + 1):\n        for j in range(1, people_count + 1):\n            current = remainder * j\n            remainder = current % (remainder * 10 ** 6 + 3)\n            remainder_set.add(remainder)\n            if remainder in remainder_set:\n                remainder_set.add(current)\n    return '{} {}'.format(\n        max(remainder_set),\n        min(remainder_set)\n    )"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {}\n    for _ in range(n):\n        length, direction = stdin.split()\n        length = int(length)\n        if direction in ['East', 'South']:\n            direction = 1\n        else:\n            direction = -1\n        d[length] = d.get(length, []) + [direction]\n\n    if d.get(2048):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"NO\""
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n    n = int(stdin)\n    north_pole = south_pole = 0\n    for _ in range(n):\n        t, direction = map(str, stdin.split(\" \"))\n        t = int(t)\n        if direction == \"North\":\n            north_pole += t\n        elif direction == \"South\":\n            south_pole -= t\n        else:\n            north_pole += t\n            south_pole += t\n        if north_pole == south_pole:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Some solutions will need to parse the input\n    \"\"\"\n    print(stdin)"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'YES'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n\nn = int(input())\n\nfor i in range(n):\n    t, d = [int(i) for i in input().split()]\n    print(\"YES\" if t == d or (t < d and d == \"West\") or (t > d and d == \"East\") else \"NO\")\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    for _ in range(n):\n        l, direction = stdin.readline().split()\n        l = int(l)\n        if direction == 'East' and l % 4 == 0:\n            direction = 'West'\n        if direction == 'West' and l % 4 == 3:\n            direction = 'East'\n        if direction == 'North' and l == 40:\n            direction = 'South'\n        if direction == 'South' and l == 20:\n            direction = 'North'\n        print('YES')\n    return ''\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    # a_1 >= 0, a_2 >= 0, L <= R\n    answer = 0\n    k = 0\n    l = 0\n    while L <= k * a_1 + b_1 <= R:\n        while L <= l * a_2 + b_2 <= R:\n            if k * a_1 + b_1 == l * a_2 + b_2:\n                answer += 1\n            l += 1\n        l = 0\n        k += 1\n    return str(answer)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, l, r = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(max(l, c)):\n        if b * i > a:\n            break\n        if a * i + b * (i + 1) <= r and a * (i + 1) + b * (i + 1) >= l:\n            res += 1\n    return res"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    if a_1 > 0:\n        L += b_1\n    else:\n        L -= b_1\n    if a_2 > 0:\n        R += b_2\n    else:\n        R -= b_2\n    if L <= R:\n        print(0)\n    else:\n        print(abs(L - R) // abs(a_1 + b_1 - a_2 - b_2))\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, l, r = map(int, stdin.split())\n    s1 = a1 * l + b1\n    s2 = a2 * r + b2\n    s3 = a1 * r + b1\n    s4 = a2 * l + b2\n    s = [s1, s2, s3, s4]\n    ans = 0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i!= j and s[i] <= l and s[i] >= r and s[j] <= r and s[j] >= l:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, L, R = [int(x) for x in stdin.split()]\n    k = (L-b1)/a1\n    l = (R-b2)/a2\n    if k < 0 or l < 0:\n        return '0'\n    return '{}'.format(k+l-int(k>l))"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    def is_possible(num: int) -> bool:\n        return a_1 * num + b_1 >= a_2 * num + b_2 and a_2 * num + b_2 >= L and a_1 * num + b_1 <= R\n\n    ans = 0\n    for k in range(L, R + 1):\n        if is_possible(k):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, L, R = list(map(int, stdin.split()))\n    print(len(list(filter(lambda x: L <= x <= R, range(b1, a1*(L+1)+1, a1)))))"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, a1, b1, l, r = map(int, stdin.split(' '))\n    if a == 0 and b == 0 and a1 == 0 and b1 == 0 and l == 0 and r == 0:\n        return '0'\n    res = 0\n    for k in range(l, r + 1):\n        if l <= k + a * a1 <= r:\n            for l_ in range(l, r + 1):\n                if l <= l_ + b * b1 <= r:\n                    res += 1\n    return res\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, l, r = [int(x) for x in stdin.split(\" \")]\n    print(l)\n    print(r)\n    \n    count = 0\n    for i in range(max(a2 - a1 + 1, 0), r - l + 1):\n        if a2 * i + b2 >= a1 * (i + l) + b1:\n            count += 1\n    return count\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = [int(x) for x in stdin.split()]\n    k = ((a[0] * a[3] - a[1]) // a[2]) // a[3]\n    l = ((a[0] * a[5] - a[4]) // a[2]) // a[5]\n    if k < 0 or l < 0 or a[2] < 0 or a[4] < 0:\n        print(0)\n        return\n    print((k - l) // a[3] + 1)\n    return\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    return str(min(n//2, max(a, b)))\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n--------------\ndef"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    return str(max((b // a) ** 2 - (b // a) * (b // a + 1) // 2, (n // a) ** 2 - (n // a) * (n // a + 1) // 2))\n\n\ndef"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(n - max(a - b, b - a, (n - max(a, b)) // 2))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split(' ')]\n    min_p = a + b\n    max_p = min_p * n\n    return str(max_p // min_p)\n\nprint(solution(input()))"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    return n - min(a // 2, b // 2)\n\n\ndef"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x = min(a, b)\n    if c % x!= 0:\n        return str(c // x + 1)\n    else:\n        return str(c // x)\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\nfrom collections import Counter\n\n\nclass Layer:\n    def __init__(self, rows: List[str]):\n        self.rows = rows\n        self.r_counts = Counter(rows[0])\n        self.g_counts = Counter(rows[1])\n        self.b_counts = Counter(rows[2])\n\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(set(stdin.replace('R', '').replace('G', '').replace('B', ''))) == 1 else 'NO'\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split('\\n')[0]\n    n, m = first_line.split(' ')\n    n, m = int(n), int(m)\n    if not n % 3 == 0: return \"NO\"\n    if not m % 3 == 0: return \"NO\"\n    rows = stdin.split('\\n')[1:]\n    flag = []\n    for row in rows:\n        flag.append(row.split(' '))\n    for row in flag:\n        if len(row)!= m: return \"NO\"\n        for elem in row:\n            if elem!= 'R' and elem!= 'G' and elem!= 'B': return \"NO\"\n    for i in range(len(flag)):\n        if not i % 3 == 0:\n            if flag[i][0] == flag[i-1][0] == flag[i-2][0]: return \"NO\"\n            if flag[i][0] == flag[i-1][0] == flag[i+1][0]: return \"NO\"\n            if flag[i][0] == flag[i-1][0] == flag[i+2][0]: return \"NO\"\n            if flag[i][0] == flag[i+1][0] == flag[i+2][0]: return \"NO\"\n            if flag[i][0] == flag[i][1] == flag[i][2]: return \"NO\"\n            if flag[i][0] == flag[i][1] == flag[i][2]: return \"NO\"\n            if flag[i][0] == flag[i][1] == flag[i][2]: return \"NO\"\n            if flag[i][0] == flag[i][1] == flag[i][2]: return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for _ in range(n):\n        line = stdin.split()\n        if len(set(line))!= 3:\n            return \"NO\"\n    if len(set([i[0] for i in stdin.split()]))!= 1 or len(set([i[-1] for i in stdin.split()]))!= 1:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    if m % 2 == 0:\n        return 'YES'\n    cols = m // 2\n    for row in stdin.split('\\n'):\n        if len(row)!= m or row.count('R')!= cols or row.count('B')!= cols:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n--------------\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 5\n   ... RRRRR\n   ... RRRRR\n   ... BBBBB\n   ... BBBBB\n   ... GGGGG\n   ... GGGGG''')\n    YES\n\n    >>> solution('''4 3\n   ... BRG\n   ... BRG\n   ... BRG\n   ... BRG\n   ... ''')\n    YES\n\n    >>> solution('''6 7\n   ... RRRGGGG\n   ... RRRGGGG\n   ... RRRGGGG\n   ... RRRBBBB\n   ... RRRBBBB\n   ... RRRBBBB''')\n    NO\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    if n % 2 == 0:\n        x = n//2 + 1\n        y = (n//2) + 1\n    else:\n        x = n//2\n        y = x + 1\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    \n    n = int(stdin.readline())\n    ans = [0, 0]\n    for i in range(n):\n        ans[0] += 1 if i % 2 == 0 else -1\n        ans[1] += 1 if i % 2 == 1 else -1\n    print(ans[0], ans[1])\n    return \"\""
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    \n    x, y = 0, 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            x += 1\n        else:\n            y += 1\n        i += 1\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = 0, 0\n    n = int(stdin)\n    for i in range(0, n):\n        a, b = a + 2 * (i + 1), b - 2 * (i + 1)\n    return a, b\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        moves = int(line)\n        x, y = 0, 0\n        a, b, c = 0, 0, 0\n        for i in range(moves):\n            if i % 3 == 0:\n                a += 1\n            elif i % 3 == 1:\n                b += 1\n            else:\n                c += 1\n            x, y = x + a, y + b\n        print(x, y)\n    return ''\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [0, 0]\n    for line in stdin.split('\\n')[:-1]:\n        n = int(line)\n        if n % 2 == 0:\n            x += 1\n        else:\n            x -= 1\n            y += 1\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '{}, {}'.format(answer_x, answer_y)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = 0, 0\n    n = int(stdin)\n    for i in range(1, n):\n        x, y = y, -x\n    print(x, y)\n    return ''\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, y = 0, 0\n    for i in range(n):\n        d, s = 0, 1\n        while s < 6:\n            d += 1\n            if d % 2 == 0:\n                s += 1\n            else:\n                s += d\n        if d % 2 == 0:\n            x -= s\n        else:\n            y -= s\n    print(x, y)\n    return \"\""
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    moves = int(stdin.readline())\n    x = 0\n    y = 0\n    for i in range(moves):\n        if moves % 2 == 0:\n            x += 1\n            y += 1\n        else:\n            x -= 1\n            y -= 1\n    return x, y\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, c = map(int, stdin.split(\"\\n\")[0].split())\n    x = y = 0\n    for x in range(1, 100):\n        if x * a == b + y:\n            y = y + x * a\n            break\n    else:\n        return \"No\"\n    for y in range(1, 100):\n        if b + y * x == c:\n            break\n    else:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # a, b, c = [int(x) for x in stdin.split('\\n')[0].split()]\n    # return \"Yes\" if (c % a == 0 and c // a >= b) or (c % b == 0 and c // b >= a) else \"No\"\n    a, b, c = [int(x) for x in stdin.split('\\n')[0].split()]\n    return \"Yes\" if (c % a == 0 and c // a >= b) or (c % b == 0 and c // b >= a) else \"No\"\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'Yes' if b - c <= a <= b + c else 'No'\n\"\"\"\n\n\"\"\"\nTEST CASES\nINPUT: 4 6 15\nOUTPUT: 'No'\nINPUT: 3 2 7\nOUTPUT: 'Yes'\nINPUT: 6 11 6\nOUTPUT: 'Yes'\n\"\"\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    if a * b == c:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if a * b >= c:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(i) for i in stdin.split())\n    if a + b < c:\n        return \"No\"\n    elif a == 0:\n        return \"No\"\n    elif (c - a) % b == 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n\n    if c <= a + b:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(i) for i in stdin.split())\n    if c % a == 0 and c % b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a*b >= c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution('4 6 15'))\nprint(solution('3 2 7'))\nprint(solution('6 11 6'))\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    dmg_ebony, dmg_ivory, req = stdin.split(\" \")\n    if int(dmg_ebony) < int(dmg_ivory):\n        print(\"No\")\n    elif int(req) % int(dmg_ebony) == 0 or int(req) % int(dmg_ivory) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, L = [int(x) for x in stdin.split(' ')]\n    n_barriers = [int(x) for x in stdin.split(' ')]\n    m_barriers = [int(x) for x in stdin.split(' ')]\n    if len(n_barriers)!= len(m_barriers) or n!= L:\n        return 'NO'\n    kafas_start = n_barriers[0]\n    sashas_start = m_barriers[0]\n    for i in range(n):\n        kafas_start = kafas_start - m_barriers[i]\n        sashas_start = sashas_start + n_barriers[i]\n        if (kafas_start < 0 or sashas_start > L - 1):\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nfor i in range(3):\n    n, l = [int(i) for i in stdin.split(' ')]\n    bars = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    b = [int(i) for i in stdin.split(' ')]\n    print(solution(bars, a, b))\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom collections import defaultdict\n\nL, n = [int(x) for x in stdin.split(' ')]\n\nB = [int(x) for x in stdin.split(' ')]\nS = [int(x) for x in stdin.split(' ')]"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"YES\" if is_coincide(stdin) else \"NO\"\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    n, L = map(int, stdin.split())\n    b = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    return \"YES\" if is_coincide(n, L, b, s) else \"NO\"\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n'''\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nn, l = map(int, input().split())\narr_a, arr_b = map(int, input().split())\narr_a = sorted(arr_a)\narr_b = sorted(arr_b)\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the longest non-palindrome substring of stdin\"\"\"\n    return \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.strip()\n    if len(text) == 0:\n        return \"\"\n    if len(text) == 1:\n        return text\n    if is_palindrome(text):\n        return \"\"\n    l, r = 0, 1\n    result = \"\"\n    while r < len(text):\n        if is_palindrome(text[l:r]):\n            l += 1\n        else:\n            result = max(result, text[l:r], key=len)\n            r += 1\n    return result\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"mew\")\n    3\n    >>> solution(\"uffuw\")\n    5\n    >>> solution(\"qqqqqqqq\")\n    0\n    \"\"\"\n    input_ = stdin.splitlines()[0]\n    res = 0\n    for i in range(len(input_)):\n        sub_s = input_[i:]\n        is_palin = True\n        for j in range(len(sub_s) // 2):\n            if sub_s[j]!= sub_s[-(j + 1)]:\n                is_palin = False\n                break\n        if is_palin:\n            res = max(res, len(sub_s))\n    return res\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.splitlines()))\n\n    rated = True\n    while len(stdin) > 1:\n        # Check if anyone has changed rating\n        for i in range(len(stdin)):\n            if i == len(stdin) - 1:\n                rated = False\n                break\n            if stdin[i]!= stdin[i + 1]:\n                rated = False\n                break\n        # Check if everyone has the same rating\n        stdin.sort()\n        if stdin[0]!= stdin[-1]:\n            rated = False\n        if rated:\n            return 'rated'\n        else:\n            stdin.pop()\n    return 'unrated'"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {stdin[i: i + 2]: None for i in range(0, len(stdin), 2)}\n    for i in range(n):\n        if d[str(stdin[i * 2:(i + 1) * 2])] is not None:\n            return \"rated\"\n        d[str(stdin[i * 2:(i + 1) * 2])] = 1\n\n    return \"unrated\"\n\n\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"rated\" if len(set(stdin.split())) == 1 else \"unrated\" if len(set(stdin.split())) == 2 else \"maybe\"\n\nimport sys\nfor line in sys.stdin.readlines():\n    print(solution(line.strip()))\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    before = [int(i) for i in stdin.readlines()]\n    after = [int(i) for i in stdin.readlines()]\n    rated = True\n    for i in range(N):\n        if before[i]!= after[i]:\n            rated = False\n    if rated:\n        print('rated')\n    else:\n        print('unrated')\n    return ''\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    input = [int(x) for x in stdin.readline().split()]\n    for i in range(n):\n        if input[i]!= input[i + 1]:\n            return \"maybe\"\n    return \"unrated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    count = int(stdin.split(\"\\n\")[0])\n    stdin = stdin.split(\"\\n\")[1:]\n\n    new_list = []\n    old_list = []\n\n    for i in stdin:\n        temp_list = i.split(\" \")\n        new_list.append(int(temp_list[0]))\n        old_list.append(int(temp_list[1]))\n\n    old_list.sort()\n    new_list.sort()\n\n    for j in range(count):\n        if new_list[j] == old_list[j]:\n            continue\n        else:\n            return \"maybe\"\n\n    return \"rated\"\n\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    for _ in range(n):\n        a, b = map(int, stdin.split(' '))\n        res.append([a, b])\n    res.sort(key=lambda x: x[0])\n    maybe = False\n    for i in range(1, n):\n        if res[i][0]!= res[i - 1][0]:\n            if maybe:\n                return'maybe'\n            return 'rated'\n        if res[i][1] < res[i - 1][1]:\n            maybe = True\n    if maybe:\n        return'maybe'\n    return 'unrated'"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    ratings = [[int(x) for x in line.split()] for line in lines[1:]]\n    ratings = list(zip(*ratings))\n\n    rated = all(ratings[0][i] <= ratings[0][i+1] for i in range(n - 1))\n    unrated = all(ratings[0][i] == ratings[0][i+1] for i in range(n - 1))\n    if all(ratings[0][i] == ratings[0][i+1] for i in range(n - 1)):\n        if all(ratings[1][i] <= ratings[1][i+1] for i in range(n - 1)):\n            rated = True\n        if all(ratings[1][i] >= ratings[1][i+1] for i in range(n - 1)):\n            unrated = True\n\n    rated = rated and not unrated\n    rated = rated and any(ratings[0][i] < ratings[0][i+1] for i in range(n - 1))\n    return 'rated' if rated else 'unrated' if unrated else'maybe'\n\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    s = [i.split() for i in s]\n    a = [int(i[0]) for i in s]\n    b = [int(i[1]) for i in s]\n    if len(set(a)) == 1:\n        return 'rated'\n    else:\n        if len(set(b)) == 1:\n            return 'unrated'\n        else:\n            return'maybe'\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    result = [0] * n\n    for i in range(n):\n        if arr[i] == 0:\n            result[i] = 0\n            continue\n        left = 0\n        right = n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] < 0:\n                left = mid + 1\n            elif arr[mid] > 0:\n                right = mid - 1\n            else:\n                result[i] = right - i + 1\n                break\n        if i < left:\n            result[i] = right - i + 1\n    return \" \".join(str(r) for r in result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, list(map(lambda x: abs(x), stdin.split()))))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [int(x) for x in stdin.split(\" \")]\n    a = list(set(s))\n    a.sort()\n    res = []\n    for i in range(n):\n        a.append(0)\n        d = []\n        for j in range(n):\n            d.append(abs(a[i] - s[j]))\n        res.append(d[s.index(min(a))])\n    return''.join(str(x) for x in res)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Node(object):\n\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList(object):\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add(self, value):\n        newNode = Node(value)\n\n        if self.head is None:\n            self.head = newNode\n            self.tail = newNode\n            return\n\n        if self.head.next is None:\n            self.head.next = newNode\n            self.tail = newNode\n            return\n\n        curr = self.head\n        while(curr.next is not None):\n            curr = curr.next\n\n        curr.next = newNode\n        self.tail = curr.next\n        return\n\n    def printLL(self):\n        curr = self.head\n        while(curr.next is not None):\n            print(curr.value, \"--> \", end=\"\")\n            curr = curr.next\n\n        print(curr.value, \"-->\", end=\"\")\n        print(self.tail.value)\n        return\n\n    def listLen(self):\n        if self.head is None:\n            return 0\n\n        if self.head.next is None:\n            return 1\n\n        curr = self.head\n        counter = 0\n        while(curr.next is not None):\n            curr = curr.next\n            counter += 1\n\n        return counter + 1\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 0 0 1 -2 3 4')\n    '2 1 0 1 2 3 4'\n    \"\"\"\n    sequence = list(map(int, stdin.split()))\n    sequence.append(0)\n    sequence.append(0)\n    distance = [0] * len(sequence)\n    for i, x in enumerate(sequence):\n        if x == 0:\n            continue\n        j = i\n        while j > 0:\n            j -= 1\n            if sequence[j] == 0:\n                break\n            distance[i] = j + 1\n            break\n        j = i\n        while j < len(sequence) - 1:\n            j += 1\n            if sequence[j] == 0:\n                break\n            distance[i] = j - i\n            break\n    return''.join(map(str, distance))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    my_list = list(map(int, stdin.split(' ')))\n    n = len(my_list)\n    zeroes = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if my_list[i] == 0:\n                zeroes[i] = j\n            elif my_list[i] < my_list[j]:\n                zeroes[i] = j\n    my_list = [0] + my_list\n    answer = [my_list[x + 1] - my_list[zeroes[x]] for x in range(n)]\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def naive(n: int, lst: list) -> list:\n        seq = []\n        for i in range(n):\n            for j in range(n):\n                if lst[i] == lst[j] and i!= j:\n                    seq.append(j - i)\n                    break\n                if lst[i] == 0:\n                    seq.append(0)\n                    break\n        return seq\n\n    def fast(n: int, lst: list) -> list:\n        seq = []\n        lst.append(0)\n        lst.insert(0, 0)\n        i = 0\n        j = 1\n        while i < n and j < n + 1:\n            if lst[i] == lst[j] and i!= j:\n                seq.append(j - i)\n                i += 1\n                j += 1\n            elif lst[i] == 0:\n                seq.append(0)\n                i += 1\n            elif lst[j] == 0:\n                seq.append(0)\n                j += 1\n            else:\n                if j == n:\n                    i += 1\n                    j = i + 1\n                else:\n                    j += 1\n        return seq\n    print(fast(int(stdin.split()[0]), [int(i) for i in stdin.split()[1].split()]))\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    \n    zero_indexes = []\n    for i in range(n):\n        if arr[i] == 0:\n            zero_indexes.append(i)\n            \n    result = \"\"\n    for i in range(n):\n        result += str(i - zero_indexes[min(enumerate(zero_indexes), key=lambda x: abs(x[1]-i))[0]]) +''\n        \n    return result[:-1]\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    out = []\n    for i, x in enumerate(a):\n        nearest = 1000000\n        for y in a:\n            if abs(x - y) < nearest:\n                nearest = abs(x - y)\n                nearest_index = a.index(y)\n        out.append(i - nearest_index)\n    return''.join(map(str, out))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    \n    ans = []\n    for i in range(n):\n        l = i\n        r = i\n        while l >= 0 and arr[l] == 0:\n            l -= 1\n        while r < n and arr[r] == 0:\n            r += 1\n        ans.append(r - l - 1)\n    \n    print(*ans)\n    "
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Number of distinct cyclical strings with substring '101010' is: \" + str(9 + 9 + 8 + 8 + 7 + 7 + 6 + 6 + 5 + 5 + 4 + 4 + 3 + 3)\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    s_set = set()\n\n    for i in range(n):\n        s_set.add(s[i:] + s[:i])\n\n    return len(s_set)\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_len_of_same_substring(s):\n        max_substring = 0\n        substring = 0\n        for i in range(len(s)):\n            substring = substring + (1 if s[i] == '1' else 0)\n            if substring == max_substring:\n                break\n            if substring > max_substring:\n                max_substring = substring\n        return max_substring\n\n    return len([x for x in range(len(s)) if x!= len(s) - 1 - get_len_of_same_substring(s[:x])])\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n=======\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return stdin\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin)\n    # n = int(stdin)\n    # s = str(stdin)\n    # ans = []\n    # for i in range(2**n):\n    #     binary = format(i, 'b')\n    #     if len(binary) < n:\n    #         binary = '0'*(n - len(binary)) + binary\n    #     string = ''\n    #     for j in range(n):\n    #         string += binary[j]\n    #     if s in string:\n    #         ans.append(string)\n    # print(len(set(ans)))\n    # return ans\n\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    vectors = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        vectors.append((x, y))\n    vectors.sort()\n\n    result = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(vectors[i][0] * vectors[j][1] - vectors[j][0] * vectors[i][1]) < 1e-9:\n                result.append((i + 1, j + 1))\n\n    if not result:\n        print(-1, -1)\n    else:\n        print(*result[0])\n\n\nsolution(input())\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, n+1)]\n    length = len(vectors)\n    min_angle = 10000000\n\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            a = vectors[i]\n            b = vectors[j]\n            if b[0]*a[1] - b[1]*a[0] < 0:\n                non_oriented_angle = abs(np.arctan2(a[1], a[0]) - np.arctan2(b[1], b[0]))\n                if non_oriented_angle < min_angle:\n                    min_angle = non_oriented_angle\n    print('{0} {1}'.format(min_angle, int(np.pi/2 - min_angle)))\n    return min_angle"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_distance(p1, p2):\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    v = [0] * int(stdin)\n    for i in range(int(stdin)):\n        v[i] = [int(j) for j in stdin.split()]\n\n    distances = {}\n    for i in range(len(v)):\n        for j in range(i + 1, len(v)):\n            distances[i, j] = distances[j, i] = get_distance(v[i], v[j])\n\n    min_dist = float('inf')\n    result = ()\n\n    for i, j in combinations(range(len(v)), 2):\n        if i == j:\n            continue\n        if distances[i, j] < min_dist:\n            min_dist = distances[i, j]\n            result = (i + 1, j + 1)\n\n    return \" \".join(str(i) for i in result)\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline().strip())\n    vectors = [tuple(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    vectors.sort()\n    ans = tuple(vectors[0][0], vectors[0][1])\n    for a, b in vectors[1:]:\n        # move to (0, 0)\n        ans = (0, 0) if a * ans[0] + b * ans[1] < 0 else ans\n        # rotate\n        ans = (a, -b) if a * ans[0] + b * ans[1] < 0 else ans\n    return ans\n    '''\n    return '1 1'\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline().strip())\n    s = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        s.append((x, y))\n    \n    s.sort()\n    min_dif = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            dif = (s[j][0] - s[i][0])**2 + (s[j][1] - s[i][1])**2\n            min_dif = min(min_dif, dif)\n    print(min_dif**0.5)\n    return ''\n\nprint(solution(open(\"input.txt\", 'r')))"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        ans.append((x, y))\n    ans.sort()\n    ans = [[a, b] for a, b in ans if a * b < 0]\n    return''.join([str(a) +'' + str(b) for a, b in ans])\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = [int(n) for n in stdin.splitlines()]\n    a, b = 1, 1\n    for _, n in sorted(zip(s, range(n))):\n        if n[0] < 0:\n            a, b = b, a\n        if n[1] < 0:\n            b += 1\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    vectors = [tuple(map(int, line.strip().split())) for line in stdin]\n\n    def solve(first: int, second: int) -> float:\n        cross = vectors[first][0] * vectors[second][1] - vectors[first][1] * vectors[second][0]\n        length = math.sqrt(vectors[first][0] ** 2 + vectors[first][1] ** 2) * \\\n            math.sqrt(vectors[second][0] ** 2 + vectors[second][1] ** 2)\n        angle = math.acos(cross / length)\n        return angle\n\n    candidates = sorted(range(N), key=lambda i: solve(0, i))\n    return candidates[0] + 1, candidates[1] + 1\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    count = {}\n    for i in range(n):\n        count[vectors[i]] = 0\n        for j in range(i + 1, n):\n            count[vectors[i]] += 1\n            if i == j:\n                continue\n            if vectors[i][0] * vectors[j][0] < 0 and vectors[i][1] * vectors[j][1] < 0:\n                count[vectors[i]] -= 1\n                continue\n            angle = math.acos((vectors[i][0] * vectors[j][0] + vectors[i][1] * vectors[j][1]) / (\n                    (vectors[i][0] ** 2 + vectors[i][1] ** 2) * (vectors[j][0] ** 2 + vectors[j][1] ** 2)))\n            count[vectors[i]] += int(angle // math.pi)\n    return '{} {}'.format(min(count, key=lambda key: count[key])[0], min(count, key=lambda key: count[key])[1])\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nYou are given n, k and d. In the beginning, Vasiliy has a car and he wants to get to the post office.\n\nHe can drive the car from home to the post office in d minutes.\n\nHe can walk to the post office from home in k minutes on foot.\n\nHe cannot drive and walk at the same time.\n\nFind the minimal time, after which Vasiliy can get home.\n\nInput\n\nThe first line contains three positive integers n, k and d (1 \u2264 n \u2264 10^5; 1 \u2264 k \u2264 10^6; 1 \u2264 d \u2264 10^12) \u2014 the number of houses, the number of streets, and the distance between the post office and the nearest house.\n\nThe next n lines contain two integers ai and bi (1 \u2264 ai \u2264 10^9; 1 \u2264 bi \u2264 10^9), which describe the time needed to travel from the ith house to the nearest house and to walk on foot from the nearest house to the post office, respectively.\n\n\nOutput\n\nPrint the minimum time Vasiliy needs to spend at home to get home.\n\nExamples\nInput\n4 3 5\n1 2\n3 4\n6 7\nOutput\n7\nInput\n6 5 6\n3 2\n4 1\n2 5\n2 2\n5 1\nOutput\n4\n\"\"\"\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from functools import reduce\n    d, k, a, b, t = list(map(int, stdin.split()))\n    s = 0\n    while t > 0:\n        if d > 0:\n            s += k + a\n            d -= k\n        elif d > 0:\n            s += b\n            d -= b\n        t -= s\n    return s\n\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    d, k, a, b, t = [int(x) for x in stdin.split(' ')]\n    \n    cnt = 0\n    \n    while cnt < t:\n        \n        if cnt % k < b:\n            cnt += k\n        else:\n            cnt += k + a\n            \n    return cnt\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = list(map(int, stdin.split()))\n    return print(d * t + (k - 1) * a + b)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(n) for n in stdin.split()]\n    res = 0\n    curr = t\n    while curr > 0:\n        curr += a\n        res += 1\n        if curr > d:\n            curr = b\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    distance, k, a, b, t = [int(x) for x in stdin.split()]\n    if k > distance:\n        print(distance * b)\n    else:\n        print(k * a + (distance - k) * b)"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(s) for s in stdin.split(\" \")]\n    time_to_drive = k * a\n    time_to_foot = d * b\n    total_time = time_to_drive + time_to_foot\n    repair_time = t // a\n    res = t - (repair_time * a + (t // a) * k * b)\n    return total_time + repair_time + res\n\n\n\nsolution(input)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u0441\u0442\u0440\u043e\u043a\n    data = [x.strip() for x in stdin.split('\\n')]\n    # print(data)\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n    if data[0][0].isdigit():\n        distance, k, a, b, t = [int(i) for i in data[0].split()]\n    else:\n        distance, k, a, b, t = [int(i) for i in data[1].split()]\n    if t > b:\n        print(0)\n    else:\n        # print(distance, k, a, b, t)\n        # print(distance, k, a, b, t)\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n        if t < a:\n            print(distance*t)\n        else:\n            # print(a*k)\n            # \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \"\u043d\u0435 \u043f\u043e\u0434\u044a\u0435\u0445\u0430\u0442\u044c\"\n            # \u0441\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \"\u043d\u0435 \u043f\u043e\u0434\u044a\u0435\u0445\u0430\u0442\u044c\"\n            # \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0438\u0441\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \"\u043f\u043e\u0434\u044a\u0435\u0445\u0430\u0442\u044c\"\n            s = distance\n            t = t-a+b\n            # print(s, t)\n            # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438\u0441\u044c \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \"\u043f\u043e\u0434\u044a\u0435\u0445\u0430\u0442\u044c\"\n            if t > 0:\n                # print(\"t\", t)\n                s = s + t*k\n                # print(s)\n                # print(s)\n            # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u043e\u0435\u0445\u0430\u043b\u0438\n            print(s)\n        \n\nsolution(\"5 2 1 4 10\")"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    d, k, a, b, t = [int(x) for x in stdin.split()]\n    t = int(t/max(k, a, b))\n    t += d // max(k, a, b)\n    t += (d % max(k, a, b)) // min(k, a, b)\n    print(t)\n    '''\n    d, k, a, b, t = [int(x) for x in stdin.split()]\n    t = int(t / max(k, a, b))\n    t += (d % max(k, a, b)) // min(k, a, b)\n    t += d // max(k, a, b)\n    print(t)\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def check_gcd(k):\n        return n % k == 0 and gcd(k, n // k) == 1\n\n    n, k = [int(c) for c in stdin.split(' ')]\n    if k == 0:\n        if n!= 0:\n            return -1\n        return 0\n    if k > n:\n        return -1\n    for i in range(1, n + 1):\n        if check_gcd(i):\n            if k == 1:\n                return str(i)\n            else:\n                return''.join(map(str, [i] * k))\n\ndef"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    result = []\n    if k == 1:\n        if n == 1:\n            result = [1]\n        else:\n            result = [-1]\n    else:\n        if n % k == 0:\n            result = [k for i in range(k)]\n        elif n % k > 0:\n            result = [n % k for i in range(k)]\n    if result:\n        return \" \".join([str(x) for x in result])\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    # if n == 1:\n    #     return [1]\n    if k == 1:\n        if n == 1:\n            return [1]\n        return [-1]\n\n    def get_gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def get_lcm(a, b):\n        return a * b // get_gcd(a, b)\n\n    def get_lcm_list(lst):\n        return reduce(get_lcm, lst)\n\n    lcm = get_lcm_list(list(range(1, k + 1)))\n    for i in range(1, n // k + 1):\n        if lcm % i == 0:\n            lcm = lcm // i\n            seq = [i] * k\n            for i in range(k):\n                seq[i] *= lcm\n            if sum(seq) == n:\n                return seq\n    return [-1]\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    nums = sorted([i for i in range(1, k + 1)], key=lambda x: x * x)\n    if k == 1:\n        print(-1)\n    else:\n        print(*nums)\n    return ''\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    l = [2]\n    i = 1\n    while True:\n        for j in range(k):\n            l.append(3*l[i - 1] + 1)\n        if sum(l) >= n:\n            break\n        else:\n            l = [2]\n            i += 1\n    \n    for j in range(k):\n        if l[j] >= n:\n            break\n    l = l[:j + 1]\n    \n    return''.join(str(x) for x in l)\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    n, k = inp[0].split(\" \")\n    n = int(n)\n    k = int(k)\n    result = list()\n    for x in range(1, k+1):\n        if n % x == 0:\n            result.append(x)\n    if len(result) == 1:\n        return str(result[0])\n    else:\n        return \"-1\""
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = []\n    def gcd(a: int, b: int):\n        while b:\n            a, b = b, a % b\n        return a\n    for i in range(1, m+1):\n        if n % i == 0:\n            arr.append(i)\n    if len(arr) > 0:\n        a = arr[0]\n        for i in range(1, len(arr)):\n            a = gcd(a, arr[i])\n    else:\n        a = -1\n    return''.join(map(str, arr)) if a > 0 else -1\n\n\ndef"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(' ')]\n    if k == 1 or k == n:\n        return \"-1\"\n    a = [n]\n    for i in range(1, k):\n        if n % k == 0:\n            a.append(k)\n            n //= k\n        else:\n            a.append(n % k)\n            n -= n % k\n            n //= k\n    if n > 1:\n        return \"-1\"\n    else:\n        return \" \".join(map(str, a))"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return str(n)\n    elif k == 2:\n        if n <= 2:\n            return str(n)\n        else:\n            return \"1 2\"\n    else:\n        a = 2\n        b = 3\n        while a * b < n:\n            if b % a == 0:\n                break\n            a += 1\n            b = a * b\n        else:\n            return \"-1\"\n        nums = [a]\n        while len(nums) < k:\n            a += 1\n            b = a * a\n            while b < n:\n                if b % a == 0:\n                    break\n                a += 1\n                b = a * a\n            else:\n                nums.append(a)\n        return \" \".join(map(str, nums))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n\n    def gcd(a: int, b: int) -> int:\n        return a if b == 0 else gcd(b, a % b)\n\n    def gcd_of_seq(seq: Sequence[int]) -> int:\n        result = 1\n        for element in seq:\n            result = gcd(result, element)\n        return result\n\n    candidate = []\n\n    for number in range(1, k + 1):\n        if n % number!= 0:\n            continue\n\n        result = n // number\n        candidate.append(result)\n\n        if result < k:\n            continue\n\n        if gcd_of_seq(candidate) == 1:\n            return''.join(map(str, candidate))\n\n        candidate = []\n\n    return -1\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return sum(2 for x in range(1, n + 1) for y in range(1, m + 1) if (x + y) % 5 == 0)"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(get_answer(stdin))\n\ndef"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(n * m - sum(x for x in range(n, n + m, 5)))\nprint(solution(input()))\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(n * m // 5 + n * m % 5)\n\nprint(solution('6 12'))\nprint(solution('11 14'))\nprint(solution('1 5'))\nprint(solution('3 8'))\nprint(solution('5 7'))\nprint(solution('21 21'))"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < m:\n        n, m = m, n\n    return sum(\n        1\n        for x in range(1, n + 1)\n        for y in range(1, m + 1)\n        if x + y % 5 == 0\n    )\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns number of pairs of integers (x, y) such that 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m and (x + y) is divisible by 5.\"\"\"\n    n, m = map(int, stdin.split())\n    res = n * (m + 1) // 5 - n * m // 5 - n + m - n * m // 5\n    return str(res)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    take in input from stdin\n    '''\n    inputs = stdin.split()\n    A = []\n    for i in range(len(inputs)):\n        A.append(int(inputs[i]))\n    '''\n    calculate the result \n    '''\n    result = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!=j:\n                if (A[i] + A[j]) % 5 == 0:\n                    result += 1\n    return str(result)"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = stdin.split()\n    return str(int(n) * int(m))"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    x, y = map(int, stdin.split(' '))\n    x1 = x\n    y1 = y\n    while True:\n        if x % 5 == 0 and y % 5 == 0:\n            return x // 5 * y // 5\n        if (x + y) % 5 == 0:\n            return x * y\n        x -= 1\n        y -= 1\n        if x < 1:\n            x = x1\n            y = y1\n            x1 -= 1\n            y1 -= 1\n        if y < 1:\n            return '-1'\n\"\"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split(\" \")))\n    arr = list(map(int, stdin.split(\" \")))\n\n    sums = [0]\n    for i in range(len(arr)):\n        sums.append(sums[-1] + arr[i])\n\n    def search_max_beauty(arr: list, x: int, sums: list, s: int, e: int) -> int:\n        if e - s == 1:\n            return 0\n        elif e - s == 2:\n            return max(arr[s], arr[s + 1]) * x\n        else:\n            return max(arr[s], arr[s + 1]) * x + max(sums[e] - sums[s], 0)\n\n    return search_max_beauty(arr, x, sums, 0, n + 1)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine if a subarray exists such that it can be multiplied by x and still keep the array\n    \"\"\"\n    n, x = map(int, stdin.split(' '))\n    arr = [int(i) for i in stdin.split(' ')[1].split(' ')]\n\n    beauty = 0\n    subarray = 0\n    for i in range(len(arr)):\n        subarray = arr[i] * x\n        beauty = max(subarray, beauty)\n\n    return str(beauty)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\")\n    22\n    >>> solution(\"5 10\\n-1 -2 -3 -4 -5\")\n    0\n    >>> solution(\"4 10\\n-1 -2 -3 -4\")\n    0\n    \"\"\"\n    n, x = map(int, stdin.split(\"\\n\")[0].split())\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n    beauty = 0\n    max_subarray_len = 0\n    for i in range(n):\n        beauty += arr[i]\n        if i < max_subarray_len:\n            beauty -= arr[i - max_subarray_len] * max_subarray_len\n        if i - max_subarray_len > 0:\n            beauty -= arr[i - max_subarray_len - 1]\n        if beauty * x > beauty:\n            max_subarray_len += 1\n    return max_subarray_len\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    count = 0\n    for i in range(len(a)):\n        max_j = min(i + x, len(a))\n        count += max(a[i:max_j])\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible beauty after multiplying any consecutive subarray of `a` by `x`.\n    Returns:\n        str: The maximum possible beauty.\n    \"\"\"\n    n, x = map(int, stdin.split('\\n')[0].split(' '))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    # TODO: replace this with the max function\n    return str(max(multiply_at_most_one_subarray(a, x)))\n\ndef"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_len, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if len(a) < 3:\n        print(0)\n    else:\n        best = 0\n        for i in range(len(a) - 2):\n            best = max(best, sum(a[i:i + 3]) * x)\n        print(best)\n\nsolution(input())\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return''.join([str(i) for i in stdin])\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.readlines()\n    n, x = [int(n) for n in lines[0].split(' ')]\n    a = [int(n) for n in lines[1].split(' ')]\n    max_ = 0\n    for i in range(len(a)):\n        max_ = max(max_, a[i] * x)\n        max_ = max(max_, a[i])\n    print(max_)\n    return max_\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    The first line contains two integers n and x, separated by a single space.\n    The second line contains n integers a_i, separated by a single space.\n    Output:\n    Print one integer, the maximum possible beauty of array after multiplication.\n    \"\"\"\n    n, x = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    return max(sum(a[i:i + x]) for i in range(len(a) - x + 1))\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    nums = list(range(1, n * m + 1))\n    nums.sort(reverse=True)\n    print(nums[k - 1])\n    return ''\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return k - 1 - (n - 1) * (m - 1)\n\"\"\"\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(x) for x in stdin.split(' ')]\n    L = []\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            L.append(str(i*j))\n    L.sort()\n    return L[-K]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(m*k//n + min(m, n-k))"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    A = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            A[i][j] = i * j\n    A = sorted(A)\n    return A[k-1][0]\n\"\"\"\n\ndef"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    table = []\n    for i in range(1, n + 1):\n        table.extend(list(map(lambda x: i * x, range(1, m + 1))))\n    table.sort()\n    return str(table[-k])\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    res = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            res.append(i * j)\n    res.sort(reverse=True)\n    return res[k - 1]"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(c) for c in stdin.split(' ')]\n    print(n * m // (k + 1))\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u672c\u6848\u4f8b\u4f7f\u7528\u4e86\u5feb\u6392\u601d\u60f3,\u5c06\u6570\u7ec4\u6309\u7167\u7b2c\u4e00\u4e2a\u6570\u8fdb\u884c\u6392\u5e8f,\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u6570\u5728\u6700\u540e\u7684\u4f4d\u7f6e\n    \u7136\u540e\u5229\u7528\u5feb\u901f\u6392\u5e8f,\u5c06\u7b2ck\u5927\u7684\u6570\u7ec4\u53d8\u6210\u6700\u5c0f\u7684\u6570,\u5c06\u5176\u4e0e\u7b2ck-1\u4e2a\u6570\u8fdb\u884c\u4ea4\u6362\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    arr = list(range(1, n * m + 1))\n    quickSort(arr, 0, len(arr) - 1)\n    # \u4ea4\u6362\u7b2ck\u4e2a\u6570\u4e0ek-1\u4e2a\u6570\n    arr[-k], arr[-k - 1] = arr[-k - 1], arr[-k]\n    return str(arr[-k])\n\n\ndef"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.rstrip())\n    string = \"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010111213"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 10)"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 123456789101112131415161718192021222324252627282930313233343536\n    return str(n)[k - 1]\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    x = 1\n    while k!= 0:\n        x *= 10\n        k -= 1\n    return str(x)[k]\n\"\"\"\n\nfrom math import floor, log\n\ndef"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    m = '0123456789'\n    while True:\n        yield m[(k - 1) % len(m)]\n        k = (k - 1) // len(m)\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    i = 1\n    sum = 0\n    while True:\n        sum = sum * 10 + i\n        if k <= sum:\n            break\n        i += 1\n    return str(sum)[-k]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    i = 1\n    n = 123456789101112131415161718192021222324252627282930313233343536\n    while i < k:\n        n = int(str(n)[1:])\n        i += 1\n    return str(n)[k-1]\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nIn the third example test, it's optimal to sell all of the shares in the morning.\n\"\"\"\n\nfrom sys import stdin\n\nn, m, r = [int(x) for x in stdin.readline().split()]\n\nb = [int(x) for x in stdin.readline().split()]\ns = [int(x) for x in stdin.readline().split()]\n\ndp = [0] * (m + 1)\n\nfor i in range(n):\n    for j in range(m):\n        dp[j + 1] = max(dp[j + 1], dp[j] + b[i] * s[i])\n\nprint(max(dp))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = [int(i) for i in stdin.split()]\n    buys = [[int(i) for i in stdin.split()][1:]]\n    sells = [[int(i) for i in stdin.split()][1:]]\n    for _ in range(n - 1):\n        _, sell = stdin.split()\n        sells.append([int(i) for i in sell.split()])\n    for _ in range(m - 1):\n        _, buy = stdin.split()\n        buys.append([int(i) for i in buy.split()])\n    buys.sort()\n    sells.sort()\n    money = 0\n    for i in range(m):\n        money += sells[i][0] * sells[i][1]\n    for i in range(n):\n        money += buys[i][0] * buys[i][1]\n    return money\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split('\\n')[0].split())\n    arr = sorted([int(x) for x in stdin.split('\\n')[1].split()])\n    m_arr = sorted([int(x) for x in stdin.split('\\n')[2].split()])\n    r_arr = [r] * n\n    r_arr[0] -= arr[0]\n    ans = 0\n    for _ in range(m):\n        if m_arr[0] >= arr[0]:\n            ans += arr[0] * m_arr.pop(0)\n            r_arr[0] += m_arr.pop(0)\n        elif m_arr[0] < arr[0]:\n            ans += m_arr.pop(0) * arr.pop(0)\n            r_arr[0] -= arr.pop(0)\n    return ans\n\n\ndef"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s, b = [], []\n    for i in range(n):\n        s.append(int(stdin.split()[i]))\n    for i in range(m):\n        b.append(int(stdin.split()[i + n]))\n    print(solution_main(n, m, r, s, b))\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    dp = [[0] * (r + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(r + 1):\n            if j - s[i] >= 0:\n                dp[i + 1][j] = max(dp[i][j], dp[i + 1][j - s[i]] + b[i])\n            else:\n                dp[i + 1][j] = max(dp[i][j], dp[i + 1][j])\n    print(dp[n][r])\n    return ''\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s.sort()\n    b.sort(reverse=True)\n    return sum(s[:n]) + sum(b[:m])"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the codeforces problem '''\n    n, m, r = [int(n) for n in stdin.split('\\n')]\n    return str(max([0, sum([max([int(n) for n in stdin.split('\\n')[1:]]), 0])]))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    buy = [int(x) for x in stdin.split('\\n')[1].split()]\n    sell = [int(x) for x in stdin.split('\\n')[2].split()]\n    \n    sum_buy = sum(buy)\n    sum_sell = sum(sell)\n    \n    # print(sum_buy, sum_sell)\n    \n    diff = sum_buy - sum_sell\n    \n    if diff <= r:\n        return diff\n    else:\n        return 0\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m, r = map(int, stdin.split('\\n')[0].split())\n    s = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    max_bourles = r\n    for i in range(m):\n        if b[i] < s[i]:\n            max_bourles += (s[i] - b[i])\n    for j in range(m, n):\n        if b[j] < s[j]:\n            max_bourles += (s[j] - b[j])\n    return max_bourles\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%2:\n        return -1\n    r = n//2\n    for i in range(r, 1, -1):\n        if n%i == 0:\n            return i"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [0]\n    p.append(1)\n    p.append(2)\n    p.append(2)\n    for _ in range(3, n + 1):\n        p.append(p[-1] + p[-2])\n    return str(p[n])"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        print(int(n // 2))\n    else:\n        print(-1)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = int(n)\n    nums = list(range(1, n+1))\n    result = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            result.append(nums[i])\n            nums.remove(nums[i])\n            for j in range(len(nums)):\n                if nums[j] % 2 == 0:\n                    result.append(nums[j])\n                    nums.remove(nums[j])\n                    break\n        if len(nums) == 1:\n            result.append(-1)\n            break\n    result = list(dict.fromkeys(result))\n    for i in range(len(result)):\n        print(result[i])\n\nn = int(input())\nsolution(n)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    from math import ceil,floor\n    #  ceil(4.5)  5\n    #  floor(4.5) 4\n    #  ceil(4.4)  5\n    #  floor(4.4) 4\n    if n==1:\n        return 1\n    else:\n        if n%2==1:\n            n = ceil(n/2)\n        else:\n            n = floor(n/2)\n        if n%2==0:\n            return ceil(n/2)\n        else:\n            return floor(n/2)\n\n\nprint(solution(input()))\n\ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nimport math\n\ndef"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin[stdin.find('\\n') + 1:]\n    n = int(stdin)\n    if n % 2!= 0:\n        print(-1)\n        return\n    while n >= 3:\n        n -= 2\n    print(n)\n    return\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n')\n    '3'\n    >>> solution('25\\n')\n    '20'\n    >>> solution('2\\n')\n    '-1'\n    \"\"\"\n   ...\n    \n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisor = 2\n    teams = 2\n    while teams <= n:\n        if n % divisor == 0:\n            n = n // divisor\n            teams *= divisor\n        else:\n            divisor += 1\n    return str(teams - 1) if n == 1 else '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    result = []\n    if n > len(unique):\n        result.append(len(unique) - 1)\n    else:\n        for i in range(1, len(unique) + 1):\n            if i * (i - 1) / 2 < n <= (i + 1) * i / 2:\n                result.append(i)\n                break\n        else:\n            result.append(-1)\n\n    for i in result:\n        print(int(i))\n\n\nunique = []\nfor i in range(1, 10 ** 5 + 1):\n    if i not in unique:\n        unique.append(i)\nsolution(input())\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    b = list(map(int, stdin.readline().strip().split()))\n\n    max_beauty = 0\n    for i in range(length):\n        max_beauty = max(max_beauty, b[i] + sum([max(0, b[k] - abs(i - k)) for k in range(i)]))\n    return str(max_beauty)\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8\\nabaccaba\\n1 1 1 1 1 1 1 1\\n')\n    17\n    \"\"\"\n   ...\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function return maximum possible beauty of t\"\"\"\n    string = stdin[0]\n    n = int(stdin[0])\n    a = stdin[1]\n    b = stdin[2]\n    b = [int(i) for i in b.split(' ')]\n    b.sort()\n    b.reverse()\n    j = 0\n    t = 0\n    for i in range(n):\n        if string[i] == string[-i-1]:\n            t += b[j]\n            j += 1\n    return t\n\n\ndef"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    b = list(map(int, stdin.readline().split()))\n    print(solution_runner(n, s, b))\n\ndef"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    ns = int(s)\n    n_s = list(s)\n    n_s = sorted(n_s)\n    l_s = len(n_s)\n    if l_s % 2 == 0:\n        return 0\n    s_1 = []\n    s_2 = []\n    s_3 = []\n    s_4 = []\n    s_5 = []\n    s_6 = []\n    s_7 = []\n    s_8 = []\n    for i in range(0, len(n_s), 2):\n        s_1.append(n_s[i])\n        s_2.append(n_s[i+1])\n    for i in range(0, len(n_s), 3):\n        s_3.append(n_s[i])\n        s_4.append(n_s[i+1])\n        s_5.append(n_s[i+2])\n    for i in range(0, len(n_s), 4):\n        s_6.append(n_s[i])\n        s_7.append(n_s[i+1])\n        s_8.append(n_s[i+2])\n    if len(n_s) % 4 == 1:\n        s_3.append(n_s[-1])\n    if len(n_s) % 4 == 2:\n        s_4.append(n_s[-1])\n    if len(n_s) % 4 == 3:\n        s_5.append(n_s[-1])\n    ans = 0\n    ans = ans + max(sum(list(map(int, s_1))), sum(list(map(int, s_2))))\n    ans = ans + max(sum(list(map(int, s_3))), sum(list(map(int, s_4))), sum(list(map(int, s_5))))\n    ans = ans + max(sum(list(map(int, s_6))), sum(list(map(int, s_7))), sum(list(map(int, s_8))))\n    return ans\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = stdin.readline()\n    beauty = [int(i) for i in stdin.readline().split()]\n    dic = {seq[i]: beauty[i] for i in range(n)}\n    temp = sum(beauty)\n    while True:\n        temp -= max(dic.values())\n        for i in range(n):\n            if i + 1 in dic.keys() and dic[i + 1] == max(dic.values()):\n                del dic[i + 1]\n        if len(dic) <= 2:\n            break\n    return temp"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = (ord(s[i]) - ord('a') + 1) * (i + 1)\n    print(max(arr))\n    return s\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    b = [int(x) for x in stdin.readline().split(' ')]\n    maximum = 0\n    for i in range(0, length - 1):\n        odd = s[i::2]\n        even = s[1::2]\n        for j in range(len(odd)):\n            if odd[j] == even[j]:\n                continue\n            else:\n                current = odd[j] + even[j]\n                if b[int(current) - 1] > maximum:\n                    maximum = b[int(current) - 1]\n    return maximum\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    w, m = map(int, stdin.split())\n    if (m % w)!= 0 or (m // w) % 2!= 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0441\u0442\u0440\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0435\u0441\u043e\u0432 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430 \u043a \u0442\u0440\u0435\u043c \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f\u043c: \u043e\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0432\u0435\u0441\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c\u044b\u043c \u043d\u0430 \u0432\u0435\u0441 \u0441\u043a\u043b\u0430\u0434\u0430 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430; \u0432\u0442\u043e\u0440\u043e\u0435 \u0438\u0437 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0432\u0435\u0441\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u043e \u043d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0435\u0441 \u0441\u043a\u043b\u0430\u0434\u0430 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430, \u0430 \u0442\u0440\u0435\u0442\u044c\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0435\u0441 \u0441\u043a\u043b\u0430\u0434\u0430 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430. \u0412\u0441\u0435 \u044d\u0442\u0438 \u0441\u043b\u043e\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u041d\u0430\u0431\u043e\u0440 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u043e\u0432\u043e\u043c m, \u043f\u0440\u0438\u0447\u0451\u043c m \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u043c \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430, \u0438 \u0441\u043a\u043b\u0430\u0434\u0430\u043c\u0438 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u0443\u044e \u0436\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e \u0432\u0435\u0441\u043e\u0432. \u0412 \u043d\u0430\u0431\u043e\u0440\u0435 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u0432\u0435\u0441\u043e\u043c. \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 w \u0438 m. \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u043c\u0435\u0435\u0442 \u0432\u0435\u0441 w \u0438 \u0441\u0430\u043c\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u043e m. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043a\u0441\u0442 'YES', \u0435\u0441\u043b\u0438 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0435\u0441\u0438\u0442\u044c \u0438 \u043d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043d\u0430 \u043a\u0430\u043a\u043e\u0435-\u043b\u0438\u0431\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043a\u043b\u0430\u0434\u043e\u0432 \u0441 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430\u043c\u0438, \u0438\u043b\u0438 \u0442\u0435\u043a\u0441\u0442 'NO' \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\ndef"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    w, m = list(map(int, stdin.split(\" \")))\n    a = (m - 1) // w\n    if (m - 1) % w == 0:\n        if (w - m) % (w - 1) == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if ((w - m) % (w - 1)) == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n, m = map(int, a)\n    if n > m:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    # N, M = map(int, inputs[0].split())\n    # weights = [int(x) for x in inputs[1].split()]\n    # print(f'{weights}')\n    # print(f'{M}')\n    w, m = map(int, inputs[0].split())\n    print(w, m)\n    return \"YES\"\n\n\nprint(solution(\"3 7\"))\nprint(solution(\"100 99\"))\nprint(solution(\"100 50\"))\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, m = [int(s) for s in stdin.split()]\n    return 'YES' if m <= w else 'NO'\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = map(int, stdin.split())\n    \n    if a > b:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the k numbers which fulfill the given requirements.\n    :param stdin: input string\n    :return: formatted string as described above\n    \"\"\"\n\n    inputs = stdin.split('\\n')\n    n = int(inputs[0].split(' ')[0])\n    k = int(inputs[0].split(' ')[1])\n    # The variable n is the required sum.\n    # The variable k is the length of the required sequence.\n\n    # Initialize two empty lists, one for storing the powers of 2, one for storing the minimum y values\n    # of the required sequence.\n    powers = []\n    y = []\n\n    # The variables power and y are used to keep track of the power of the number 2 and minimum y, respectively\n    # when calculating the sum of the powers.\n    # For example, if n = 23 and k = 3, then there are a few candidates for the sequence.\n    # The candidates are:\n    # (1, 2, 2), (1, 2, 3) and (1, 2, 2, 3)\n    # The numbers (1, 2, 2) and (1, 2, 3) both satisfy the requirements, but the number (1, 2, 2, 3) does not.\n    # The variable powers is used to store the powers of 2, and the variable y is used to store the minimum y values.\n    # The variable maximum is used to store the largest minimum y values of the required sequence.\n    power = 1\n    y_value = 2 ** power\n    maximum = y_value\n    while power < k:\n        if power > 0:\n            power += 1\n            y_value = 2 ** power\n        if power < 0:\n            power -= 1\n            y_value = 1 / (2 ** power)\n        if maximum < y_value:\n            maximum = y_value\n        powers.append(y_value)\n        y.append(maximum)\n\n    # Initialize the variable answer and a list of all powers and their sum, and a list of minimum y values of the required sequence.\n    # The variable answer stores the lexicographically largest sequence.\n    answer = []\n    sum_powers = []\n    min_y_values = []\n\n    # The variables min_y_values and sum_powers are used to store the minimum y values and sum of powers of the required sequence, respectively.\n    # For example, if n = 23 and k = 3, then there are a few candidates for the sequence.\n    # The candidates are:\n    # (2, 2, 2), (2, 2, 3) and (2, 2, 2, 3)\n    # The numbers (2, 2, 2) and (2, 2, 3) both satisfy the requirements, but the number (2, 2, 2, 3) does not.\n    # The variable sum_powers is used to store the sum of the powers, and the variable min_y_values to store the minimum y values.\n    # The variable maximum is used to store the largest minimum y values of the required sequence.\n    sum_power = 0\n    min_y_value = 0\n    maximum = 0\n\n    # The variable maximum is used to store the largest minimum y values of the required sequence.\n    # For example, if n = 23 and k = 3, then there are a few candidates for the sequence.\n    # The candidates are:\n    # (2, 3, 2), (2, 3, 3) and (2, 3, 2, 3)\n    # The numbers (2, 3, 2) and (2, 3, 3) both satisfy the requirements, but the number (2, 3, 2, 3) does not.\n    # The variable maxmimum is used to store the largest minimum y values of the required sequence.\n    maximum = min(y)\n    maxmimum = maximum\n\n    # The variable answer stores the lexicographically largest sequence.\n    # For example, if n = 23 and k = 3, then there are a few candidates for the sequence.\n    # The candidates are:\n    # (3, 3, 2), (3, 3, 3) and (3, 3, 2, 3)\n    # The numbers (3, 3, 2) and (3, 3, 3) both satisfy the requirements, but the number (3, 3, 2, 3) does not.\n    # The variable answer is used to store the lexicographically largest sequence.\n    answer = []\n\n    # The variable answer is used to store the lexicographically largest sequence.\n    # For example, if n = 23 and k = 3, then there are a few candidates for the sequence.\n    # The candidates are:\n    # (3, 2, 2), (3, 2, 3) and (3, 2, 2, 3)\n    # The numbers (3, 2, 2) and (3, 2, 3) both satisfy the requirements, but the number (3, 2, 2, 3) does not.\n    # The variable answer is used to store the lexicographically largest sequence.\n    answer = []\n\n    # The variable answer is used to store the lexicographically largest sequence.\n    # For example, if n = 23 and k = 3, then there are a few candidates for the sequence.\n    # The candidates are:\n    # (3, 1, 2), (3, 1, 3) and (3, 1, 2, 3)\n    # The numbers (3, 1, 2) and (3, 1, 3) both satisfy the requirements, but the number (3, 1, 2, 3) does not.\n    # The variable answer is used to store the lexicographically largest sequence.\n    answer = []\n\n    # The variable sum_powers is used to store the sum of powers of the required sequence.\n    # For example, if n = 23 and"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [0] * k\n    if k == 1:\n        return \"No\"\n    for i in range(1, k + 1):\n        arr[i - 1] = (int(stdin) - pow(2, i - 1) + 1) % (pow(2, i) - 1)\n    for i in range(k - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            break\n        for j in range(i - 1, -1, -1):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    if arr[0] == 0:\n        return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible.\n    '''\n    n, k = map(int, stdin.strip().split(' '))\n    if n < 2**k: return 'No'\n    if n == 2**k: return 'Yes\\n1'\n    # p = pwr(k)\n    ans = ''\n    for i in range(k):\n        # a = k-1 if p[i] == 0 else p[i]-1\n        a = k-1 if i == 0 else i-1\n        # print(i, a)\n        ans += f'{a}\\n' if i == 0 else f'{a} {a+1}\\n'\n    return 'Yes\\n'+ans\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  return \"Yes\" if stdin else \"No\"\n  return \" \".join(\n    str(i) for i in range(n - 1, -1, -1) if result[i] == max(result)\n  )\n  return \"\""
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get n and k\n    n, k = [int(x) for x in stdin.split()]\n    \n    # Create initial list of tuples with powers of 2 of length k\n    power_tuples = [ (2 ** i, i) for i in range(k) ]\n    \n    # Check if n is divisible by 2**i\n    if n % 2**k == 0:\n        \n        # Create the initial list of tuples\n        power_tuples.append((n // 2**k, k + 1))\n    \n    # Sort the tuples\n    power_tuples = sorted(power_tuples, key = lambda x : x[0])\n    \n    # Check if there is a sequence with the minimal y value\n    if k >= 2:\n        \n        # Check if the sum of 2 to the power of the first element is not divisible by n\n        if n % (2**power_tuples[0][1]):\n            return 'No'\n    \n    # Create a list of powers of 2, except the highest one\n    powers = [ x[0] for x in power_tuples[:-1] ]\n    \n    # Create a list of the sum of powers of 2 and the difference between them\n    # and the power of the lowest element\n    differences = [ sum(powers[:i]) - powers[i-1] for i in range(1, k) ]\n    \n    # Get the lowest element\n    lowest = powers[-1]\n    \n    # Check the difference between the lowest element and the sum of powers of 2\n    if lowest + differences[0] > n:\n        return 'No'\n    \n    # Check if there is a sequence with the minimal y value\n    if k >= 2:\n        \n        # Iterate through the differences\n        for diff in differences:\n            \n            # If any difference is not divisible by 2, return 'No'\n            if diff % 2:\n                return 'No'\n    \n    # Create a list of the differences between powers of 2\n    differences = [ power_tuples[i][0] - power_tuples[i-1][0] for i in range(1, k) ]\n    \n    # Create a list of the sum of powers of 2 and the difference between them\n    # and the difference between the lowest element and the sum of powers of 2\n    total_differences = [ sum(powers[:i]) - powers[i-1] for i in range(1, k) ] + [ lowest + difference for difference in differences ]\n    \n    # Create a list of the minimal difference of each element\n    minimal_differences = [ difference for difference in total_differences if difference <= n ]\n    \n    # Get the lexicographically largest element\n    largest = max(minimal_differences)\n    \n    # Create a list of elements in the sequence\n    seq = [ 2 ** power_tuples[i][1] for i in range(k) ]\n    \n    # Get the index of the largest element\n    idx = minimal_differences.index(largest)\n    \n    # Get the sequence of the largest element\n    seq = seq[:idx] + seq[idx + 1:]\n    \n    # Remove elements that are bigger than n\n    while seq and seq[-1] > n:\n        seq.pop()\n    \n    # Return the sequence\n    return''.join(map(str, seq))\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"Yes\" if k == 1 else \"No\"\n\nsolution()\n\n\"\"\"\n\ndef"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split('\\n')[0].split())\n  i = 0\n  res = []\n  while i < k:\n    temp = 2 ** (n - i) - 1\n    if temp > 0:\n      res.append(temp)\n    else:\n      res.append(0)\n    i += 1\n  return 'Yes\\n' +''.join([str(i) for i in res])"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    x = k + 1\n    for i in range(k):\n        x = x * 2 + 2**i\n    if x > n:\n        return 'No'\n    return 'Yes\\n' +''.join(map(str, range(k - 1, -1, -1)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    res = 0\n    for i in range(1, n + 1):\n        res += n - i + 1\n        if t % 2 == 0:\n            res -= i - 2\n    return res\n\n\"\"\""
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    d, c = 0, 0\n    for i in range(n):\n        d += i\n        if d >= t:\n            d = t\n            break\n    c += (t - d) / 2\n    c = int(c)\n    if (t - d) % 2!= 0:\n        c += 1\n    return c\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(4 8)\n    6\n    '''\n   ..."
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    h, t = map(int, stdin.split())\n    print(math.ceil(t / (h - 1)))\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def fill_glass(N, t):\n        result = 0\n        for i in range(1, N + 1):\n            if i == 1:\n                result += 1\n            elif i == 2:\n                result += 2\n            elif i == 3:\n                result += 4\n            else:\n                result += 7\n        return result\n\n    def half_fill(n):\n        return (n - 1) * 2\n\n    def is_full(n):\n        return n - 1 >= half_fill(n)\n\n    def check_and_fill(n, t):\n        if is_full(n):\n            return 0\n        return fill_glass(n, t)\n\n    N, t = [int(x) for x in stdin.split()]\n    result = check_and_fill(N, t)\n    print(result)\n\n    return result"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    i = 1\n    while t >= i:\n        n += (n // i)\n        i += 1\n    return n\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    return n - 1 + t // (n - 1)\n\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split(' ')))\n    res = 0\n    for i in range(1, n + 1):\n        res += (i + 1) * 2 ** (i - 1)\n    print(res)\n    return res - 1\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430, \n\u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0431\u0449\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0443\u043f\u043a\u0438. \n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0431\u0449\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u043a\u0443\u043f\u043a\u0438.\n\nSample Input 1:\n\n4\n3\n20\n30\nSample Output 1:\n\n200\nSample Input 2:\n\n3\n5\n10\n30\nSample Output 2:\n\n260\nSample Input 3:\n\n6\n6\n10\n30\n30\n30\n100\nSample Output 3:\n\n800\n\"\"\"\n\nfrom collections import defaultdict\n\nn, p, *cost = [int(i) for i in input().split()]\ntotal = 0\nfor i in range(len(cost)):\n    total += (n * p) // len(cost) * cost[i]\nprint(total)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = [int(row) for row in stdin.split(\"\\n\")]\n    height, seconds = rows[0]\n    return height - 1"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1\"\n    elif n == 1:\n        return \"-1\"\n    x = []\n    y = []\n    for _ in range(n):\n        x_, y_ = map(int, stdin.split())\n        x.append(x_)\n        y.append(y_)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dx = x[i] - x[j]\n            dy = y[i] - y[j]\n            ans += dx * dy\n    return str(ans)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return -1\n    cord_list = []\n    for i in range(n):\n        cord_list.append(list(map(int, stdin.split())))\n    print(cord_list)\n    # now we have to know the area of the rectangle\n    # the area of the rectange will be the width * height of the rectangle\n    # we will just take the minimum of width and height\n    width = min(cord_list, key=lambda x: x[0])[0]\n    height = min(cord_list, key=lambda x: x[1])[1]\n    area = width * height\n    print(area)\n    return area\n\nsolution('1 1\\n2 2')\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    n = int(stdin.readline())\n    points = [list(map(int, line.split())) for line in stdin]\n    points = sorted(points)\n    p0, p1 = points[0], points[1]\n    q0, q1 = points[-2], points[-1]\n\n    # print(p0, p1, q0, q1)\n\n    a = p1[0] * q0[1] + p0[0] * q1[1] + p1[1] * q0[0] + p0[1] * q1[0]\n    return str(abs(a / 2))"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    read = sys.stdin.readline\n    n = int(read())\n    rect = []\n    for i in range(n):\n        x, y = [int(x) for x in read().split()]\n        rect.append((x, y))\n    if n == 1:\n        print(-1)\n        return\n    rect.sort()\n    print(rect)\n    s = set(rect)\n    print(s)\n    if len(s)!= n:\n        print(-1)\n        return\n    A = rect[0][0] * rect[1][1] - rect[0][1] * rect[1][0]\n    print(A)\n    return"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    points = [list(map(int, stdin.split(\"\\n\")[i].split())) for i in range(n)]\n    points = sorted(points, key=lambda x: x[0])\n    p1, p2 = points[0], points[1]\n    p3, p4 = points[2], points[3]\n    p3, p4 = sorted([p3, p4], key=lambda x: x[1])\n    x1, y1 = p1[0], p1[1]\n    x2, y2 = p2[0], p2[1]\n    x3, y3 = p3[0], p3[1]\n    x4, y4 = p4[0], p4[1]\n    if x1 == x2:\n        m = (y3 - y4) / (x3 - x4)\n        b = y1 - m * x1\n        return \"%.1f\" % (m * x3 - b)\n    if x3 == x4:\n        m = (y1 - y2) / (x1 - x2)\n        b = y3 - m * x3\n        return \"%.1f\" % (m * x1 - b)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin.readline())\n    n = int(stdin)\n    # points = [tuple(map(int, line.split(' '))) for line in stdin.read().splitlines()]\n    points = [list(map(int, line.split(' '))) for line in stdin.splitlines()]\n    # points = list(map(int, stdin.read().splitlines()))\n    # points = stdin.readlines()\n    # points = stdin.read().splitlines()\n\n    # Your code here\n    # print(n)\n    # print(points)\n\n    if n == 1:\n        return str(-1)\n\n    d = defaultdict(int)\n\n    for x, y in points:\n        d[(x, y)] += 1\n\n    a, b = 0, 0\n    for x, y in d:\n        if d[(x, y)] == 1:\n            a, b = x, y\n        elif d[(x, y)] == 2:\n            if a == x or b == y:\n                a, b = x, y\n            else:\n                return str(-1)\n        else:\n            return str(-1)\n\n    return str(a * b)"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    num_points = int(stdin.readline())\n    points = []\n    for i in range(num_points):\n        points.append(list(map(int, stdin.readline().split())))\n    points = sorted(points, key=lambda p: (p[0], p[1]))\n    x1, y1 = points[0][0], points[0][1]\n    x2, y2 = points[1][0], points[1][1]\n    x3, y3 = points[2][0], points[2][1]\n    x4, y4 = points[3][0], points[3][1]\n    area = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)\n    return str(area if area > 0 else -1)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # pass\n    n = int(stdin)\n    if n == 4:\n        x1, y1, x2, y2 = map(int, stdin.split())\n        print(1, x1 * y2)\n    elif n == 1:\n        x1, y1 = map(int, stdin.split())\n        print(-1)\n    else:\n        x1, y1, x2, y2 = map(int, stdin.split())\n        print(0)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        return '-1'\n    else:\n        x_y_list = []\n        for i in range(x):\n            x_y = input().split()\n            x_y_list.append(int(x_y[0]) + int(x_y[1]))\n        x_y_list.sort()\n        x_y_list.pop(0)\n        x_y_list.pop(-1)\n        a = x_y_list[0]\n        b = x_y_list[-1]\n        c = (x_y_list[1] - a) + (b - x_y_list[0])\n        if c < 0:\n            return str(-1)\n        else:\n            return str(c)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = int(s)\n    a = int(s)\n    b = int(s)\n    answer = int(0)\n    if a <= b:\n        answer = int(0)\n    elif b < a:\n        answer = int(a)\n    else:\n        answer = int(a + b - 1)\n    print(answer)\n\nsolution(\"20\")\nsolution(\"4\")\nsolution(\"8\")\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    return str(max(n // a, n // b, n // max(a, b)))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    m = min(a, b)\n    print(int((n - m * 2) / m))"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, a, b = map(int, stdin.split())\n    return min(a, b) + int(a * b > n)\n\nprint(solution(input()))"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    return str(min(a, b) * n)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(n // a, n // b, n // a + n // b))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return None\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    if len(set(a)) < n:\n        return \"NO\"\n    if len(a) == 2:\n        return \"YES\"\n    else:\n        f = True\n        t = False\n        a.sort()\n        for i in range(len(a) - 1):\n            if a[i] > a[i + 1]:\n                f = False\n                if i == len(a) - 2 and a[i] <= a[i + 1] and a[i + 1] <= a[i + 2]:\n                    t = True\n                elif a[i] <= a[i + 1] and a[i + 1] <= a[i + 2]:\n                    t = True\n                elif a[i] <= a[i + 1] and a[i + 2] <= a[i + 3]:\n                    t = True\n                else:\n                    t = False\n            else:\n                t = False\n        if t and f:\n            return \"YES\"\n        return \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(c) for c in stdin[1].split(' ')]\n    # first pass to find the first element where it can be swapped\n    swap_index = None\n    for i, x in enumerate(a):\n        if i > 0 and i < n - 1 and a[i] > a[i + 1] and a[i] > a[i - 1]:\n            swap_index = i\n            break\n    if swap_index is None:\n        return 'NO'\n    # second pass to swap the first element with the right most element\n    if a[swap_index] > a[swap_index + 1]:\n        a[swap_index], a[swap_index + 1] = a[swap_index + 1], a[swap_index]\n    else:\n        return 'NO'\n    # second pass to swap the first element with the left most element\n    if a[swap_index] > a[swap_index - 1]:\n        a[swap_index], a[swap_index - 1] = a[swap_index - 1], a[swap_index]\n    else:\n        return 'NO'\n    return 'YES'\n\"\"\"\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training6CNF76-8E3/\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def swap(a: list, a_i: int, a_j: int):\n        a[a_i], a[a_j] = a[a_j], a[a_i]\n    \n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    forbidden = stdin.split('\\n')[1].replace('1', '0').replace('0', '1')\n    for i in range(len(a)):\n        if forbidden[i] == '0':\n            if i + 1 < len(a):\n                swap(a, i, i + 1)\n            else:\n                break\n    if a == sorted(a):\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    b = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\n    def check(a, b):\n        a.sort()\n        b.sort()\n        for i in range(len(a)):\n            if a[i]!= b[i]:\n                return False\n        return True\n\n    print('YES' if check(a, b) else 'NO')\n    return ''\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = stdin.split('\\n')\n    n = int(n)\n    arr = list(map(int, arr.split(' ')))\n    \n    return 'YES' if sorted(arr) == arr else 'NO'"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(n) for n in stdin.split(' ')]\n    x = [int(n) for n in stdin.split(' ')]\n    print(a, x)\n    for i in range(0, len(x) - 1):\n        if x[i] == 1 and x[i+1] == 0:\n            a[i], a[i+1] = a[i+1], a[i]\n            print(a)\n            break\n    else:\n        print('NO')\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution should run in O(n) time and use constant extra space.\n\"\"\"\n\nclass Solution:\n    def checkSortOrder(self, a, c) -> bool:\n        if len(a) < 2:\n            return True\n        a_set = set(a)\n        a_set.remove(c)\n        # a_set.remove(c)\n        if a_set == set(sorted(a_set)):\n            return True\n        else:\n            return False"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(\",\")\n    if len(string) > 1:\n        string = string[1]\n    else:\n        string = string[0]\n    row = int(string[0])\n    seat = string[1]\n    if seat == \"a\" or seat == \"f\":\n        row += 1\n    return str(row)\n\n\ndef"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a=stdin.split(' ')\n    row=int(a[0])\n    seat=a[1]\n    c=0\n    d=0\n    for i in range(1,row+1):\n        if i%2!=0:\n            d+=i*6\n            continue\n        else:\n            d+=i*6-2\n    c=d+((seat=='c')*2)+(seat=='d')+((seat=='a')*2)+(seat=='f')+(seat=='b')+((seat=='e')*2)\n    print(c)\nsolution(stdin)"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    row = int(stdin[0])\n    seat = stdin[1]\n    if seat == 'a':\n        return row - 1\n    elif seat == 'f':\n        return row\n    elif seat == 'c':\n        return row + 1\n    else:\n        return row + 2\n\nprint(solution('4a'))\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    start = line[0].split(' ')\n    row = int(start[0])\n    seat = start[1]\n    start_time = 1\n    taken_seats = []\n    seats_num = 1\n    while seats_num < row:\n        seats_num += 2\n        start_time += 1\n    end_time = start_time + seats_num - 2\n    if row % 2 == 1:\n        seat_num = row - 1\n        start_seat = seat\n        while seat_num > 0:\n            seat_num -= 2\n            start_seat = chr(ord(start_seat) - 1)\n            start_time += 1\n        end_seat = chr(ord(seat) + 1)\n        while seat_num < 0:\n            seat_num += 2\n            end_seat = chr(ord(end_seat) + 1)\n            end_time += 1\n        if seat == start_seat:\n            start_time += 1\n        if seat == end_seat:\n            end_time += 1\n        \n    if row % 2 == 0:\n        seat_num = row - 1\n        start_seat = seat\n        while seat_num > 0:\n            seat_num -= 2\n            start_seat = chr(ord(start_seat) - 1)\n            start_time += 1\n        end_seat = chr(ord(seat) + 1)\n        while seat_num < 0:\n            seat_num += 2\n            end_seat = chr(ord(end_seat) + 1)\n            end_time += 1\n        if seat == start_seat:\n            start_time += 1\n        if seat == end_seat:\n            end_time += 1\n    print(end_time - start_time)\n    return \"\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    seats = []\n    for r in rows:\n        r = r.split(' ')\n        rows.append(r[0])\n        seats.append(r[1])\n    rows = [int(r) for r in rows]\n    seats = [s.lower() for s in seats]\n    \n    total_time = 0\n    current_row = 1\n    for seat in seats:\n        if seat == 'a':\n            total_time += 1\n            current_row += 1\n        elif seat == 'c':\n            total_time += 2\n            current_row += 3\n        elif seat == 'f':\n            total_time += 3\n            current_row += 2\n        elif seat == 'd':\n            total_time += 2\n            current_row += 3\n        else:\n            total_time += 1\n            current_row += 1\n    return total_time\n\nprint(solution(stdin))"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin\n    rows = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f'}\n    seats = {'a': 'f', 'b': 'e', 'c': 'd', 'd': 'c', 'e': 'b', 'f': 'a'}\n    row, seat = line.split()\n    row, seat = int(row), seats[seat]\n    res = 0\n    while row > 1:\n        res += row - 1\n        row -= 1\n    res += row\n    print(res)\n    return"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, seat = stdin.split()\n    return str(6 + (ord(seat[0]) - ord('a') + 1 + ord(seat[1]) - ord('a')))\n    \n    \n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a: list[int] = [int(x) for x in stdin.split('\\n')[0].split()]\n    x: int = a[0]\n    x_base: int = a[1]\n    b: list[int] = [int(x) for x in stdin.split('\\n')[1].split()]\n    y: int = b[0]\n    y_base: int = b[1]\n    if x_base > y_base:\n        return '>'\n    elif x_base < y_base:\n        return '<'\n    else:\n        return '='\nprint(solution(input()))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split('\\n')\n    X = X.split()\n    Y = Y.split()\n    X = int(''.join(X), base=int(Y[1]))\n    Y = int(''.join(Y), base=int(X[1]))\n    return '<' if X < Y else '>' if X > Y else '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split(' ')[0])\n    x_digits = [int(digit) for digit in stdin.split(' ')[1].split('_')]\n\n    y = int(stdin.split(' ')[2])\n    y_digits = [int(digit) for digit in stdin.split(' ')[3].split('_')]\n\n    x_base_10 = 0\n    for digit, base_exponent in zip(reversed(x_digits), reversed(range(len(x_digits)))):\n        x_base_10 += digit * base_exponent\n    print(x_base_10)\n\n    y_base_10 = 0\n    for digit, base_exponent in zip(reversed(y_digits), reversed(range(len(y_digits)))):\n        y_base_10 += digit * base_exponent\n    print(y_base_10)\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    x_base_10 = 0\n    for digit, base_exponent in zip(reversed(x_digits), reversed(range(len(x_digits)))):\n        x_base_10 += digit * base_exponent\n    print(x_base_10)\n\n    y_base_10 = 0\n    for digit, base_exponent in zip(reversed(y_digits), reversed(range(len(y_digits)))):\n        y_base_10 += digit * base_exponent\n    print(y_base_10)\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n    print(f'X is {x_base_10} in base {x}')\n    print(f'Y is {y_base_10} in base {y}')\n\n    print(f'X is {x_base_10} in"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import zip_longest\n    # getting bases\n    x = int(stdin.split(\" \")[0])\n    y = int(stdin.split(\" \")[1])\n    # getting digits\n    x_digits = [int(i) for i in list(stdin.split(\" \")[2])]\n    y_digits = [int(i) for i in list(stdin.split(\" \")[3])]\n\n    # getting digits in base 10\n    x_base10 = [10 ** i * x_digits[i] for i in range(len(x_digits))]\n    y_base10 = [10 ** i * y_digits[i] for i in range(len(y_digits))]\n\n    # zip in base 10\n    x_base10 = list(zip_longest(*[iter(x_base10)] * 10, fillvalue=0))\n    y_base10 = list(zip_longest(*[iter(y_base10)] * 10, fillvalue=0))\n\n    # getting digits in base x and y\n    x_basex = [i for sublist in x_base10 for i in sublist if i]\n    y_basex = [i for sublist in y_base10 for i in sublist if i]\n\n    if x_basex < y_basex:\n        return \"<\"\n    elif x_basex > y_basex:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, bx, y, by = stdin.split()\n    x, y = int(x, int(bx)), int(y, int(by))\n    return '<' if x < y else '>' if x > y else '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    #your code here\n    #return result\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 2\\n1 0 1 1 1 1\\n2 10\\n4 7')\n    '<'\n    >>> solution('3 3\\n1 0 2\\n2 5\\n2 4')\n    '<'\n    >>> solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0')\n    '>'\n    \"\"\"\n    X_digits, X_base, Y_digits, Y_base = stdin.split('\\n')\n    X, Y = int(X_digits), int(Y_digits)\n    X_base, Y_base = map(int, [X_base, Y_base])\n    X = base_to_int(X, X_base)\n    Y = base_to_int(Y, Y_base)\n    return '<' if X < Y else '>' if X > Y else '='\n\n\ndef"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Computes and returns the answer to the problem.\n    \"\"\"\n    # Get data from stdin\n    n, b_x, *input_x = stdin.split('\\n')\n    n, b_y, *input_y = stdin.split('\\n')\n    # Convert X and Y to their respective values in base b_x and b_y\n    x = int(''.join([input_x[i] for i in range(len(input_x)) if i % 2 == 0]), base=int(b_x))\n    y = int(''.join([input_y[i] for i in range(len(input_y)) if i % 2 == 0]), base=int(b_y))\n    # Perform the comparison\n    if x < y:\n        return '<'\n    elif x > y:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, x = map(int, stdin.split())\n    arr = map(int, stdin.split()[1:])\n    y = 0\n    for num in arr:\n        y = y * a + num\n    \n    print(y)\n    return ''\n    \n    \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compares two integers (in different bases)\"\"\"\n    x_str, y_str, base_x, base_y = stdin.split('\\n')\n    x_str = x_str.split(' ')\n    y_str = y_str.split(' ')\n    base_x = int(base_x)\n    base_y = int(base_y)\n    x_digits = []\n    y_digits = []\n    for digit in x_str:\n        x_digits.append(int(digit, base_x))\n    for digit in y_str:\n        y_digits.append(int(digit, base_y))\n    return '<' if sum(x_digits) < sum(y_digits) else '>' if sum(x_digits) > sum(y_digits) else '='\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(num) for num in stdin.split()]\n    while len(a) > 1:\n        m = min(a)\n        ind = a.index(m)\n        if a[ind] > 1:\n            a[ind] -= 1\n        else:\n            a.pop(ind)\n    return 'BitLGM' if a[0] == 0 else 'BitAryo'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    return \"BitLGM\" if n % 2 == 0 else \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    \n    if n % 2 == 1:\n        return \"BitLGM\"\n    if n % 2 == 0:\n        return \"BitAryo\"\n\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    if n == 1:\n        return 'BitLGM'\n    \n    sum_of_all = sum(a)\n    if sum_of_all % 2 == 1:\n        return 'BitAryo'\n    \n    bitlgm_score = 0\n    bitaryo_score = 0\n    \n    for i in range(n):\n        bitlgm_score += a[i] - 1\n        bitaryo_score += a[i]\n    \n    if bitlgm_score > bitaryo_score:\n        return 'BitLGM'\n    elif bitlgm_score < bitaryo_score:\n        return 'BitAryo'\n    else:\n        return 'BitLGM'\n    \n    \n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(\" \")]\n    deck = [int(n) for n in stdin.split(\" \")]\n\n    top = 0\n    bottom = 0\n    left = 0\n    right = 0\n    total_prod = 1\n    while len(deck) > 0:\n        prod = deck[0]\n        for i in range(1, len(deck)):\n            prod *= deck[i]\n        if prod % k == 0:\n            right = prod\n        total_prod *= prod\n\n        prod = deck[-1]\n        for i in range(1, len(deck)):\n            prod *= deck[-1 - i]\n        if prod % k == 0:\n            left = prod\n        total_prod *= prod\n\n        top = max(top, prod)\n        bottom = min(bottom, prod)\n        del deck[0]\n        del deck[-1]\n\n    print(total_prod // (left * right))\n    return total_prod // (left * right)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # find the product of all numbers\n    # this is a number in the product of all numbers\n    # that is divisible by k\n    prod = 1\n    for i in range(n):\n        prod = prod * (i + 1) % k\n        \n    # find the number of divisors of the product\n    # and subtract the number of cards\n    div = 0\n    for i in range(1, k + 1):\n        if prod % i == 0:\n            div = div + 1\n    return div - n\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    mod = [0] * n\n    mod[0] = k\n    mod[-1] = k\n    for i in range(1, n):\n        mod[i] = mod[i - 1] * a[i - 1]\n    mul = 1\n    for i in range(n):\n        mul = mul * a[i]\n    res = 0\n    for i in range(n - 1):\n        for j in range(i, n):\n            res = res + (mul // mod[j] // mod[i])\n    return str(res)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    cards = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(n - i - 1):\n            res += cards[i] * cards[j] * cards[n - i - 1] * cards[n - i - 2]\n    return str(res // (k * k * k * k * k * k * k * k))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    n = (b - a) // k\n    a, b = a * (a - 1) // 2, b * (b - 1) // 2\n    return b // a\n  \n  \n  \n  \n----Constraints-----\n\n1 \u2264 n \u2264 105\n1 \u2264 k \u2264 105\n1 \u2264 a_i \u2264 105\n\n\"\"\"\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    \n    left = a[0]\n    right = sum(a[1:])\n    \n    for i in range(1, n+1):\n        left *= a[i-1]\n        right *= a[n-i]\n        print(i, left, right)\n        \n        if left % k!= 0 or right % k!= 0:\n            return '0'\n    \n    return str(left//k + right//k - 1)\n\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n\n---\n\"\"\"\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) / O(1)\n    \"\"\"\n    cards = [int(x) for x in stdin.split()]\n    total_cards = sum(cards)\n    magic_number = total_cards // 3\n    magic_number_low_bound = magic_number - cards[0]\n    magic_number_high_bound = magic_number + cards[0]\n    total_number = 1\n    for i in range(1, len(cards)):\n        if cards[i] == magic_number:\n            magic_number_low_bound = magic_number - cards[0]\n            magic_number_high_bound = magic_number + cards[0]\n            total_number += 1\n        elif cards[i] < magic_number_low_bound:\n            continue\n        elif cards[i] > magic_number_high_bound:\n            break\n        else:\n            magic_number_low_bound = magic_number - cards[0]\n            magic_number_high_bound = magic_number + cards[0]\n            total_number += 1\n    return total_number\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\u0423 \u0412\u043e\u0434\u044b \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0438\u0437 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432. \u0423 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0435\u0441\u0442\u044c \u0446\u0438\u0444\u0440\u044b. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b. \u0414\u0430 \u0442\u0430\u043a \u0437\u0432\u0443\u0447\u0438\u0442 \u0438 \u043d\u0435 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u043e \u0440\u0443\u0441\u0441\u043a\u0438. \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438\u0437 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u043a\u043b\u0430\u0441\u0441 \u0438\u0437 \u0442\u044b\u0441\u044f\u0447. \u0412\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430.\n\n\u0415\u0441\u0442\u044c \u0434\u0432\u0430 \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u0437 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432. \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0438\u0437 \u0442\u044b\u0441\u044f\u0447. \u0418\u0437 \u0447\u0438\u0441\u0435\u043b \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0443\u043b\u0435\u0439. \u041d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445, \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u043d\u0430 \u0442\u0440\u0438 \u0434\u0435\u0441\u044f\u0442\u043a\u0430. \u0418\u0437 \u0434\u0435\u0441\u044f\u0442\u043a\u043e\u0432 \u0434\u043e \u0442\u044b\u0441\u044f\u0447 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u0432\u043e\u0441\u0435\u043c\u044c \u0434\u0435\u0441\u044f\u0442\u043e\u043a \u0438\u0437 \u0442\u0440\u0435\u0445 \u0442\u044b\u0441\u044f\u0447.\n\n\u0412\u043e\u0434\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0438\u043c\u0435\u044e\u0442 \u043d\u043e\u043b\u044c. \u041f\u0440\u0438 \u043a\u0430\u043a\u043e\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043d\u043e\u043b\u0435\u0439 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0432\u043e\u0434\u044b \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u043e\u043b\u0435\u0439 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u043e\u0434\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0434\u0435\u0441\u044f\u0442\u043a\u0438, \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u044d\u0444\u0444\u0435\u043a\u0442.\n\n\u0412\u043e\u0434\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043d\u043e\u043b\u044c \u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043b\u0435\u0439 \u043e\u0442 1 \u0434\u043e 3. \u0412\u043e\u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0434\u0435\u0441\u044f\u0442\u043a\u0438, \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0438\u0445 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f.\n\n\u0422\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u0435\u0441\u044f\u0442\u043a\u0438. \u0415\u0441\u043b\u0438 \u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430 \u043d\u0443\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043b\u0435\u0439, \u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u043d\u0443\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043b\u0435\u0439. \u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043b\u0435\u0439 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u043e\u043b\u0435\u0439, \u0432\u043e\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043b\u0435\u0439. \u0412\u043e\u0434\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043d\u0435 \u043f\u0443\u0441\u0442\u044b.\n\n\u0415\u0441\u043b\u0438 \u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430 \u043d\u0443\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043b\u0435\u0439 \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435, \u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043b\u0435\u0439.\n\n\u0415\u0441\u043b\u0438 \u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430 \u043d\u0443\u0436\u043d"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    chars = stdin.split()\n    chars = [x.upper() for x in chars]\n    chars = set(chars)\n    chars = list(chars)\n    chars.sort()\n    print(chars)\n    \n    if len(chars) < k:\n        return 'NO'\n    \n    res = set()\n    \n    for x in chars:\n        if chars.count(x) < k:\n            res.add(x)\n            \n    if res:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline()\n    for i in range(n):\n        if s.count(s[i]) > 1:\n            return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if len(set(stdin.lower())) < len(stdin.lower()) else 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = stdin.split(' ')[1:]\n    s = sorted(s)\n    i = 0\n    while len(s) > i:\n        if s[i] == s[i + 1]:\n            s.pop(i)\n            s.pop(i)\n            if k == 1:\n                s.pop(i)\n                break\n            else:\n                k -= 1\n        else:\n            i += 1\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')\n\n\"\"\"\ndef"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    st = stdin.split('\\n')[0].split(' ')[1:]\n    if n == k:\n        return 'YES'\n    elif len(set(st)) < n:\n        return 'NO'\n    elif k == 1:\n        return 'YES'\n    else:\n        s = set()\n        for i in range(len(st)-1):\n            for j in range(i+1, len(st)):\n                if st[i] == st[j]:\n                    s.add(st[i])\n        if len(s) == n-k:\n            return 'YES'\n        else:\n            return 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    if n == 1:\n        print('YES')\n    else:\n        print('YES') if sum(s.count(i) for i in set(s)) > n - k else print('NO')\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split('\\n')\n    n, k = int(n), int(k)\n    balls = stdin.split('\\n')\n    balls = balls[0]\n    friends = [chr(i) for i in range(ord('a'), ord('a') + k)]\n    for i in range(len(friends)):\n        for j in range(i, len(friends)):\n            if friends[i] == friends[j] and i!= j:\n                friends[i] = ''\n    friends = ''.join([i for i in friends if i!= ''])\n    friends = friends.lower()\n    print(friends)\n    print(n)\n    print(balls)\n    print(friends)\n    if n == len(friends):\n        print('YES')\n    else:\n        print('NO')\n\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin[0], stdin[1]\n    l = [stdin[i] for i in range(2, len(stdin))]\n    if len(l)!= n:\n        return 'NO'\n    s = set()\n    for i in range(n):\n        if l[i] not in s:\n            s.add(l[i])\n        else:\n            s.remove(l[i])\n        if len(s) == k - 1:\n            break\n    if len(s) == k - 1:\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n\nprint(solution(input()))"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, k = list(stdin)\n    if len(set(a)) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    nums = list(map(int, stdin[1].split()))\n\n    result = 0\n    nums.sort()\n\n    for i in range(1, n):\n        result = max(result, abs(nums[i] - nums[i - 1]))\n\n    print(result)\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line)\n    arr = [int(c) for c in stdin.readline().split(' ')]\n    arr.sort()\n    # leftmost minimum\n    left_minimum = arr[0]\n    # rightmost minimum\n    right_minimum = arr[-1]\n    # set up left and right pointers\n    left_pointer = 0\n    right_pointer = len(arr) - 1\n    # set up distance\n    distance = float('inf')\n    # move the pointers until left_pointer is less than right_pointer\n    while left_pointer < right_pointer:\n        # update distance\n        distance = min(distance, abs(arr[left_pointer] - right_minimum), abs(arr[right_pointer] - left_minimum))\n        if arr[left_pointer] < arr[right_pointer]:\n            left_pointer += 1\n        else:\n            right_pointer -= 1\n    return distance\n\n\nprint(solution('''3\n5 6 5\n'''))\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the distance between two closest minimums in the array.\"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    mindist = 10 ** 9\n    min1, min2 = None, None\n    for i in range(len(arr)):\n        if arr[i] < mindist and arr[i] > min1:\n            min1 = arr[i]\n        elif arr[i] < mindist and arr[i] < min2:\n            min2 = arr[i]\n    return abs(min1 - min2)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    i = 0\n    j = 1\n    while j < n:\n        while j < n and a[i] >= a[j]:\n            j += 1\n        while j < n and a[j] >= a[i]:\n            i += 1\n        j += 1\n    return a[i] - a[i - 1]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().strip().split(' ')]\n    minimum = min(a)\n    s = set(a)\n    d = len(a)\n    for x in range(minimum, 0, -1):\n        if x in s:\n            break\n    for y in range(minimum, 10 ** 9):\n        if y in s:\n            break\n    return str(min(abs(x - minimum), abs(y - minimum)))\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''My solution\n    '''\n    \n    stdin = stdin.split('\\n')\n    array = [int(i) for i in stdin[1].split(' ')]\n    min_one = min(array)\n    array = list(filter(lambda x: x!= min_one, array))\n    \n    min_two = min(array)\n    return abs(min_one - min_two)\n    \n    '''Best solution\n    '''\n    return max(map(min, itertools.groupby(array))) - min(array)\n    \n    "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    m1, m2 = a[0], a[1]\n    for x in a[2:]:\n        if x < m1:\n            m2 = m1\n            m1 = x\n        elif x < m2:\n            m2 = x\n    return m1 - m2\n\ndef"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    nums = list(map(int, inputs[1].split(' ')))\n    print(nums)\n    result = []\n    for i in range(0, n):\n        min_num = nums[i]\n        for j in range(i + 1, n):\n            if nums[j] < min_num:\n                min_num = nums[j]\n        result.append(min_num)\n\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.sort()\n    min1 = arr[0]\n    min2 = arr[1]\n    if min1 > min2:\n        min1, min2 = min2, min1\n    for i in range(2, len(arr)):\n        if min2 > arr[i] > min1:\n            min2 = arr[i]\n        elif arr[i] < min1:\n            min1 = arr[i]\n        else:\n            break\n    return abs(min1 - min2)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = list(map(int, stdin.split()))\n    answer = 0\n\n    for p in range(1, t + 1):\n        for q in range(1, t + 1):\n            if p * w + q * b == t:\n                answer += 1\n\n    return str(answer) + \"/\" + str(t)\n\n-----Test-----"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 3 2\")\n    3/10\n    \"\"\"\n    t, w, b = list(map(int, stdin.split()))\n    return \"{}/{}\".format(\n        int(max(w, b) ** 2 * (w + b + 1) / (w * b * (w + b + 1))), t\n    )\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split()\n\n    m, w, b = (int(i) for i in inputs)\n\n    min_length = min(w, b)\n    max_length = max(w, b)\n\n    count = 0\n\n    for i in range(2, 100):\n        if min_length <= i:\n            count += 1\n\n            if min_length * i == max_length:\n                count -= 1\n\n    return f'{count}/{count + 1}'\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find probability of two runners tie\n\n    :param stdin: string\n    :return: string\n    \"\"\"\n    # Get input\n    t, w, b = map(int, stdin.split())\n\n    # Solve problem\n    return str(fraction(1, t))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom fractions import Fraction\n\nT, W, B = [int(x) for x in stdin.split(' ')]\n\nP = Fraction(W, B)\nQ = Fraction(W, B)\n\nfor i in range(1, T+1):\n    if P.denominator*i > P.numerator:\n        print(str(P.numerator)+\"/\"+str(i))\n        break\n    elif Q.denominator*i > Q.numerator:\n        print(str(Q.numerator)+\"/\"+str(i))\n        break\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w, b = map(int, stdin.split())\n    m = min(w, b)\n    s = 0\n    for x in range(1, m+1):\n        if w % x == 0 and b % x == 0:\n            s += 1\n    return str(s) + \"/\" + str(n-s)\n\nprint(solution(input()))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    t, w, b = map(int, stdin.split())\n    \n    if (w*2 + b*3) <= t:\n        return \"0/1\"\n    \n    return \"1/\" + str(t//(w+b))\n    \n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, w, b = map(int, stdin.split())\n    res = 2\n    res += (l - w) // w\n    res += (l - b) // b\n    res += (l - b) // w\n    res += 1\n    return str(res / l)\n\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = [int(i) for i in stdin.split(' ')]\n    return f'{t / (w + b) / (t - w - b + 1):.0f}'\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0' if stdin.count('1') == 0 else '+' if stdin.count('1') > stdin.count('0') else '-'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(c) for c in stdin.strip().split()]\n\n    if x + y + z == 0:\n        return \"0\"\n    if x + y > z:\n        return \"+\"\n    if x + y < z:\n        return \"-\"\n    return \"?\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The number of people who voted for one side, the number of people who voted for the opposite side, and the number of people who didn't vote.\"\"\"\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return '0' if a + b == c else '+' if b > a else '-'\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 0:\n        return \"0\"\n    elif x + y > z:\n        return \"+\"\n    elif x + y < z:\n        return \"-\"\n    else:\n        return \"?\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    x, y, z = [int(x) for x in stdin.split(\" \")]\n    if x == y + z or x + y == z:\n        return \"+\"\n    if x * y < z:\n        return \"-\"\n    return \"0\"\n    \"\"\"\n    # return \"+\" if x*y > z else \"-\" if x*y < z else \"0\"\n    # or\n    return \"0\" if x+y < z else \"-\" if x+y > z else \"+\" if x*y > z else \"0\"\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    upvote, downvote, unknown = map(int, stdin.split())\n    if upvote > downvote:\n        return '+'\n    elif upvote < downvote:\n        return '-'\n    else:\n        return '0' if unknown > 0 else '?'\n\n\"\"\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    x = stdin.split(\" \")[0]\n    y = stdin.split(\" \")[1]\n    z = stdin.split(\" \")[2]\n    \"\"\"\n    x, y, z = map(int, stdin.split(\" \"))\n\n    if z == 0:\n        if x > y:\n            return \"+\"\n        elif x == y:\n            return \"0\"\n        else:\n            return \"-\"\n    else:\n        if x + y == z:\n            if x > y:\n                return \"+\"\n            else:\n                return \"-\"\n        elif x > y:\n            return \"+\"\n        elif x == y:\n            return \"0\"\n        else:\n            return \"-\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z >= 0 and x + y + z <= 100 and x >= 0 and y >= 0 and z >= 0:\n        return \"?\" if x * y == z else \"+\" if x > y else \"-\"\n    return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split(\" \")]\n    if abs(x-y) == z or abs(x+y-z) == 0 or abs(x-z) == 0:\n        return \"+\" if x > y else \"-\" if y > x else \"0\"\n    else:\n        return \"?\""
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y == z:\n        if x > y:\n            return \"0\"\n        else:\n            return \"+\"\n    elif x + y == z + 1:\n        if x > y:\n            return \"-\"\n        else:\n            return \"+\"\n    else:\n        return \"?\"\n\n\n\"\"\"\n\nimport codewars_test as test\n\n@test.describe(\"Fixed Tests\")\ndef"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets a string of operations, then finds the subseqence which takes the robot to (0, 0)\n    \"\"\"\n    ops = stdin\n    # RRRRRRRUUUUUDRRRRRRRDUUUUU\n    subseq = ''\n    for i in range(len(ops)):\n        if ops[i] in ['R', 'L']:\n            subseq += ops[i] * (i+1)\n        elif ops[i] in ['U', 'D']:\n            subseq += ops[i] * (i+1)\n    if subseq == '':\n        return 0\n    else:\n        return len(subseq)\nprint(solution(stdin))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ops = list(stdin.readline().strip())\n    x, y = map(int, stdin.readline().strip().split())\n    x1 = x2 = 0\n    for i, op in enumerate(ops):\n        if op == \"U\":\n            y += 1\n            x1 = i\n        elif op == \"D\":\n            y -= 1\n            x2 = i\n        elif op == \"L\":\n            x -= 1\n            x1 = i\n        else:\n            x += 1\n            x2 = i\n        if x > y:\n            return \"-1\"\n    return f\"{x2 - x1 + 1}\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_id, min_id = -1, 10 ** 9\n    stdin_list = stdin.split()\n    x, y = int(stdin_list[2]), int(stdin_list[3])\n    operation_list = stdin_list[1]\n    n = len(operation_list)\n    current_x, current_y = 0, 0\n    for char in operation_list:\n        if char == 'U':\n            current_x += 1\n            if current_x > x:\n                current_x = x\n        elif char == 'D':\n            current_x -= 1\n            if current_x < 0:\n                current_x = 0\n        elif char == 'L':\n            current_y -= 1\n            if current_y < 0:\n                current_y = 0\n        elif char == 'R':\n            current_y += 1\n            if current_y > y:\n                current_y = y\n        if char!= 'U' and char!= 'D' and char!= 'L' and char!= 'R':\n            min_id += 1\n        if max_id < current_x:\n            max_id = current_x\n        if min_id > current_x:\n            min_id = current_x\n    return str(max_id - min_id + 1) if max_id - min_id > 0 else '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    operations = stdin[0]\n    x, y = [int(i) for i in stdin[2].split()]\n    index = 0\n    while index < len(operations):\n        if operations[index] == 'U':\n            y += 1\n        elif operations[index] == 'D':\n            y -= 1\n        elif operations[index] == 'L':\n            x -= 1\n        elif operations[index] == 'R':\n            x += 1\n        index += 1\n    if x == 0 and y == 0:\n        print(0)\n        return\n    else:\n        print(-1)\n        return\n\nsolution(stdin)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    c = stdin.readline()\n    x, y = map(int, stdin.readline().split())\n    x -= 1\n    y -= 1\n    idx = []\n    maxi = 0\n    for i in range(len(c)):\n        if c[i] == 'U' and x!= i:\n            maxi = max(maxi, i - x - 1)\n            idx.append(i)\n        elif c[i] == 'D' and x!= i:\n            maxi = max(maxi, i - x + 1)\n            idx.append(i)\n        elif c[i] == 'L' and y!= i:\n            maxi = max(maxi, i - y - 1)\n            idx.append(i)\n        elif c[i] == 'R' and y!= i:\n            maxi = max(maxi, i - y + 1)\n            idx.append(i)\n    if maxi == 0:\n        print(-1)\n    else:\n        print(maxi + 1)\n    print(idx)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    operations = stdin.splitlines()[0]\n    start = (int(stdin.splitlines()[1].split()[0]), int(stdin.splitlines()[1].split()[1]))\n    end = (int(stdin.splitlines()[2].split()[0]), int(stdin.splitlines()[2].split()[1]))\n    # write your code in Python 3.6\n    d = {'U': (0, 1), 'D': (0, -1), 'L': (-1, 0), 'R': (1, 0)}\n    res = 0\n    current_position = start\n    for i, operation in enumerate(operations):\n        next_position = tuple(a + b for a, b in zip(current_position, d[operation]))\n        if next_position[0] < 0 or next_position[0] > end[0] or next_position[1] < 0 or next_position[1] > end[1]:\n            res = -1\n            break\n        if next_position == end:\n            res = i + 1\n            break\n        current_position = next_position\n    return str(res)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    operations = [stdin[i] for i in range(num)]\n    x, y = map(int, stdin.split(' ')[1:])\n    answer = -1\n    for i in range(num):\n        if operations[i] == 'U':\n            y += 1\n        elif operations[i] == 'D':\n            y -= 1\n        elif operations[i] == 'R':\n            x += 1\n        else:\n            x -= 1\n        if x == y == 0:\n            answer = 0\n            break\n        if x < 0 or y < 0 or x >= 100 or y >= 100:\n            answer = 0\n            break\n    return str(answer)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # Let's check is all data correct\n    #print(\"Hello\")\n    # Write here any additional import that you need\n    # from collections import defaultdict\n    # In some cases, data is incorrect\n    # So, handle it with try-except\n    try:\n        # Write your code here\n        # You can also use assert\n        print(solution(stdin))\n    except AssertionError as er:\n        print(\"Data is incorrect\")\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, x = list(map(int, stdin.readline().strip().split()))\n        s = stdin.readline().strip()\n        l = 0\n        prefixes = 0\n        for r in range(n + 1):\n            if l + r >= n:\n                break\n            subs = s[l:l + r]\n            cnt0 = subs.count('0')\n            cnt1 = subs.count('1')\n            if cnt0 == cnt1 and cnt0 * 2 >= r:\n                prefixes += 2 ** (r - 1)\n            l += 1\n        if prefixes == 0:\n            print('-1')\n        else:\n            print(prefixes)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int, x: int) -> int:\n        \"\"\"Return the number of prefixes of t with balance x, or -1 if there are infinite.\"\"\"\n        def cnt(s: str, prefix_len: int) -> tuple:\n            \"\"\"Return the number of occurrences of 0 and 1 in the given prefix.\"\"\"\n            if len(s) - prefix_len == 0:\n                return 0, 0\n            n0 = 0\n            n1 = 0\n            for i in range(prefix_len):\n                if s[i] == '0':\n                    n0 += 1\n                else:\n                    n1 += 1\n            return n0, n1\n\n        cnts = []\n        i = 0\n        while True:\n            cnts.append(cnt(s, i))\n            i += 1\n            if cnts[-1][0] == x and cnts[-1][1] == x:\n                break\n        if i >= n:\n            return -1\n        return len(cnts)\n\n    t = int(stdin.readline())\n    return [f(int(stdin.readline()), int(stdin.readline())) for _ in range(t)]\n\nprint(*solution(stdin=sys.stdin.read()))\n\n\"\"\"\nfrom functools import lru_cache\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 10\\n010010\\n5 3\\n10101\\n1 0\\n0\\n2 0\\n01\")\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n    t = \"\".join(s)\n    k = len(t) - n\n    prefixes = []\n    for i in range(k + 1):\n        pre = t[:i + 1]\n        prefixes.append(pre)\n\n    pref_cnt = Counter(prefixes)\n    flag = False\n    for key in pref_cnt:\n        if pref_cnt[key] == x:\n            flag = True\n        else:\n            flag = False\n            break\n    if flag:\n        print(len(pref_cnt))\n    else:\n        print(-1)"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    return str(n)\n    \n    \n-----Main-----\nprint(solution(input()))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    return f'{n - n % (10 ** k):>{k}}'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    result = 0\n    for i in range(k):\n        result = n % 10\n        n = n // 10\n        \n        if result == 0:\n            n = n // 10\n            result = n % 10\n            \n    print(result)\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    x = n\n    for i in range(k):\n        while x % 10 == 0:\n            x /= 10\n        x = x * 10\n    print(int(x))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a % (10 ** b))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    while n > 0:\n        res += n % 10\n        n = n // 10\n        if res % k == 0:\n            break\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin % 10 == 0:\n        return 1\n    i = 0\n    while 10 ** i < stdin:\n        i += 1\n    return i\n\n\"\"\"\n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n'''\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    # print(k)\n    if n == 0:\n        print(0)\n        return\n    if k == 0:\n        print(1)\n        return\n    def get_digits(n: int) -> list:\n        digits = []\n        for i in range(len(str(n))):\n            digits.append(n % 10)\n            n //= 10\n        digits.reverse()\n        return digits\n    if k == 1:\n        digits = get_digits(n)\n        print(digits.index(0))\n        return\n    if k == len(get_digits(n)):\n        print(0)\n        return\n    d = 10 ** (k - 1)\n    digits = get_digits(n)\n    for i in range(len(digits)):\n        if digits[i]!= 0:\n            print(i + 1)\n            return\n    print(0)\n    return\n\ndef"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _,_,_,x,y = list(map(int, stdin.split()))\n    # _,_,_,x,y = map(int, stdin.split())\n    l = []\n    for i in range(y):\n        l.append(i)\n    n = 0\n    for i in range(x):\n        print(l[i])\n        l.insert(i,0)\n        n += 1\n    print(n)\n    return n\n\n\nsolution('4 2 9 4 2')\n\n\nimport math\nn,m,k,x,y = [int(x) for x in input().split()]\n\nprint(math.ceil((m/n)*(n*k)) + math.ceil((n/m)*(m*k)))\n\nsolution('100 100')\n\n\ndef"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = [int(c) for c in stdin.split()]\n\n    stdin = ''\n    for row in range(1, n + 1):\n        for col in range(1, m + 1):\n            if col == x and row == y:\n                stdin += '1'\n            else:\n                stdin += '0'\n        if row < n:\n            stdin += '\\n'\n\n    max_quest, min_quest, count = 0, 1, 0\n    for i, c in enumerate(stdin):\n        if c == '1':\n            count += 1\n            if count > max_quest:\n                max_quest = count\n            if count < min_quest:\n                min_quest = count\n    print(max_quest, min_quest, count)\n    return ''\n\n\ndef"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    if n == 1:\n        return str(m - y + 1) +'' + str(m - y + 1) +'' + str(k - 1)\n    if y == 1:\n        return str(m - x + 1) +'' + str(m - x + 1) +'' + str(k - 1)\n    if x == 1:\n        return str(m - y + 1) +'' + str(m - y + 1) +'' + str(k - 1)\n    if y == m:\n        return str(m - x + 1) +'' + str(m - x + 1) +'' + str(k - 1)\n    return str(m - x + 1) +'' + str(m - x + 1) +'' + str(k - 1)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k, x, y) = [int(n) for n in stdin.split(\" \")]\n    if n == 1:\n        return (x, x, y)\n    else:\n        if x == 1:\n            return (x, x + m - 1, y)\n        elif x == n:\n            return (x - n + 1, x, y)\n        else:\n            return (x + m - 1, x - n + 1, y)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(m - y + 1) +'' + str(k - m + 1) +'' + str(m)\n    elif n == 2:\n        a = x - 1\n        b = y - 1\n        s = k\n        if a == 0:\n            s += m\n        if b == 0:\n            s += m\n        if a == 0 and b == 0:\n            s += m\n        return str(s) +'' + str(m - y + 1) +'' + str(m - x + 1)\n    else:\n        a = x - 1\n        b = y - 1\n        s = k\n        if a == 0:\n            s += m\n        if b == 0:\n            s += m\n        if a == 0 and b == 0:\n            s += m\n        for i in range(1, n):\n            a = i - 1\n            b = y - i + 1\n            if a == 0:\n                s += m\n            if b == 0:\n                s += m\n            if a == 0 and b == 0:\n                s += m\n        return str(s) +'' + str(m - y + 1) +'' + str(m - x + 1)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k, x, y] = list(map(int, stdin.split(\" \")))\n    if x == 1:\n        return \"2 \" + str(k) + \" \" + str(k)\n    else:\n        if k == 1:\n            return str(m * n) + \" \" + str(1) + \" \" + str(1)\n        else:\n            return str(m * n) + \" \" + str(m * n - k) + \" \" + str(k)\n\nprint(solution(\"1 3 8 1 1\"))\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    count = 0\n    for i in range(m):\n        if i == x - 1:\n            count += n\n        if i == y - 1:\n            count += n\n    count += k\n    return str(count)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    lst = list(range(1, n + 1))\n    lst.sort()\n    lst.reverse()\n    lst.insert(x - 1, y)\n    if n == m:\n        lst = [lst[0]]\n    a = lst[:x]\n    b = lst[x:]\n    b.reverse()\n    b.insert(0, lst[x - 1])\n    if n == 1:\n        b = [b[0]]\n    for i in range(k):\n        if i % 2 == 0:\n            print(max(a), min(b), max(a) * m)\n            a = b\n        else:\n            print(min(b), max(a), min(b) * m)\n            b = a\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # game_turns = int(stdin)\n    ribbons = [line.rstrip() for line in stdin]\n\n    if len(ribbons) > 1000000000:\n        return \"Kuro\"\n\n    for i in range(len(ribbons)):\n        ribbons[i] = list(ribbons[i])\n    ribbon_dict = dict()\n    for i in range(len(ribbons)):\n        for j in range(len(ribbons[i])):\n            if ribbons[i][j] in ribbon_dict:\n                ribbon_dict[ribbons[i][j]].append(i)\n            else:\n                ribbon_dict[ribbons[i][j]] = [i]\n\n    ribbon_dict_sorted = sorted(ribbon_dict.items(), key=lambda x: len(x[1]), reverse=True)\n    ribbons_sorted = [[] for _ in range(len(ribbons))]\n    for i in range(len(ribbons)):\n        for j in range(len(ribbons[i])):\n            ribbons_sorted[i].append(ribbons[i][j])\n\n    max_beauty = -1\n    for i in range(len(ribbons_sorted)):\n        beauty = 0\n        for j in range(len(ribbons_sorted[i])):\n            if len(ribbon_dict[ribbons_sorted[i][j]]) == 1:\n                beauty += len(ribbons_sorted[i])\n        if beauty > max_beauty:\n            max_beauty = beauty\n\n    if max_beauty == 0:\n        return \"Katie\"\n\n    ribbons_sorted = sorted(ribbons_sorted, key=lambda x: x[0])\n    ribbon_dict_sorted = sorted(ribbon_dict_sorted, key=lambda x: x[1], reverse=True)\n    for i in range(len(ribbons_sorted)):\n        for j in range(len(ribbons_sorted[i])):\n            if len(ribbon_dict_sorted[i][1]) == 1:\n                if ribbons_sorted[i][j] in ribbon_dict_sorted[i][1]:\n                    ribbons_sorted[i][j] = ribbon_dict_sorted[i][1][0]\n                    break\n\n    ribbons_sorted = sorted(ribbons_sorted, key=lambda x: x[0])\n\n    return_ribbons = []\n    for i in range(len(ribbons_sorted)):\n        for j in range(len(ribbons_sorted[i])):\n            return_ribbons.append(ribbons_sorted[i][j])\n\n    return_ribbons.sort()\n\n    return return_ribbons\n    \n\nprint(solution(stdin))"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    n = int(stdin)\n    ribbons = [stdin for _ in range(3)]\n    ribbons = [ribbon[::-1] for ribbon in ribbons]\n    dict = defaultdict(int)\n    best = 0\n    bestribbon = \"\"\n    for ribbon in ribbons:\n        for i in range(len(ribbon)):\n            for j in range(i, len(ribbon)):\n                subribbon = ribbon[i:j]\n                if subribbon not in dict:\n                    dict[subribbon] = 0\n                dict[subribbon] += 1\n                if dict[subribbon] > best:\n                    best = dict[subribbon]\n                    bestribbon = subribbon[::-1]\n    return bestribbon[::-1]"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = stdin.split('\\n')\n    beauty = dict()\n    for ribbon in ribbons:\n        beauty[ribbon] = 0\n        for color in set(ribbon):\n            beauty[ribbon] += ribbon.count(color)\n    print(max(beauty, key=lambda key: beauty[key]))\n    return max(beauty, key=lambda key: beauty[key])\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = [stdin[i:i + 3] for i in range(0, len(stdin), 3)]\n    turns = int(stdin[0])\n    change = {ribbons[i]: ribbons[(i + 1) % 3] for i in range(3)}\n\n    ribbons_new = ribbons\n    kuro = {ribbons[0]: 0}\n    shiro = {ribbons[1]: 0}\n    katie = {ribbons[2]: 0}\n\n    for i in range(turns):\n        ribbons_new = [change[ribbon] for ribbon in ribbons_new]\n\n        # \u4ece\u4e0b\u68070\u5f00\u59cb\u6bd4\u8f83\n        if ribbons_new[0] == ribbons[1]:\n            kuro[ribbons[0]] = i + 1\n        if ribbons_new[0] == ribbons[2]:\n            katie[ribbons[0]] = i + 1\n        if ribbons_new[1] == ribbons[0]:\n            shiro[ribbons[1]] = i + 1\n        if ribbons_new[1] == ribbons[2]:\n            katie[ribbons[1]] = i + 1\n        if ribbons_new[2] == ribbons[0]:\n            shiro[ribbons[2]] = i + 1\n        if ribbons_new[2] == ribbons[1]:\n            katie[ribbons[2]] = i + 1\n\n    if max(kuro.values()) == max(shiro.values()) == max(katie.values()):\n        return \"Draw\"\n    elif max(kuro.values()) > max(shiro.values()) and max(kuro.values()) > max(katie.values()):\n        return \"Kuro\"\n    elif max(shiro.values()) > max(kuro.values()) and max(shiro.values()) > max(katie.values()):\n        return \"Shiro\"\n    elif max(katie.values()) > max(kuro.values()) and max(katie.values()) > max(shiro.values()):\n        return \"Katie\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The maximum beauty is 5 (if we change the ribbon into ooooo)\n    \"\"\"\n    ribbons = stdin.split('\\n')\n    return \"Draw\"\n\nprint(solution(\"3\\nKuroo\\nShiro\\nKatie\"))\nprint(solution(\"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\"))\nprint(solution(\"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\"))\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = stdin.split()\n    ribbon_map = {}\n    ribbon_size = len(ribbons[0])\n    for ribbon in ribbons:\n        if ribbon not in ribbon_map:\n            ribbon_map[ribbon] = 0\n        ribbon_map[ribbon] += 1\n\n    ribbons = set(ribbons)\n\n    best_ribbon = ''\n    best_ribbon_count = 0\n    for ribbon in ribbons:\n        ribbon_count = ribbon_map[ribbon]\n        if ribbon_count > best_ribbon_count:\n            best_ribbon = ribbon\n            best_ribbon_count = ribbon_count\n\n    for ribbon in ribbons:\n        if ribbon_map[ribbon] == best_ribbon_count and ribbon!= best_ribbon:\n            return \"Draw\"\n\n    return best_ribbon\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n-----Notes-----\n\nAll the ribbons are equal in length, so there's no need to check the equality between the ribbons.\n\nAll the subribbons in the ribbon are equal in length, so there's no need to check the equality between the subribbons.\n\nA subribbon can only appear once in the ribbon, so there's no need to check for duplicates.\n\nAll the subribbons in the ribbon are unique, so there's no need to check for duplicates.\n\nOne cat can only change one letter in the ribbon at a time, so there's no need to check for duplicates.\n\nThe cat can only change the colors of the ribbon once, so there's no need to check for duplicates.\n\nIn the first example, the ribbon can be changed to oooooo after three turns.\n\nIn the fourth example, the ribbon can be changed to zzzzzzzzz after 9 turns.\n\nKuro can change the ribbon into oooooo and the others into zzzzzzzzz after the second turn.\n\nKatie can change the ribbon into oooooo and the others into zzzzzzzzz after the second turn.\n\nShiro can change the ribbon into oooooo and the others into zzzzzzzzz after the second turn.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, rib1, rib2, rib3 = stdin.split()\n    n = int(n)\n    rib1 = rib1.lower()\n    rib2 = rib2.lower()\n    rib3 = rib3.lower()\n    ribbon = [rib1, rib2, rib3]\n    beauty = [0, 0, 0]\n\n    for i in range(n):\n        for j in range(3):\n            for k in range(9):\n                if len(ribbon[j]) > k:\n                    if ribbon[j][:k+1] in ribbon[(j+1) % 3] or ribbon[j][:k+1] in ribbon[(j+2) % 3]:\n                        beauty[j] += 1\n                        ribbon[j] = ribbon[j][:k] + 'z' + ribbon[j][k+1:]\n                        break\n                    elif ribbon[j][:k+1] in ribbon[(j+2) % 3] or ribbon[j][:k+1] in ribbon[(j+1) % 3]:\n                        beauty[j] += 1\n                        ribbon[j] = ribbon[j][:k] + 'a' + ribbon[j][k+1:]\n                        break\n    print(max(beauty))\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    turns = int(stdin)\n    kuro = stdin[:turns]\n    shiro = stdin[turns:2 * turns]\n    katie = stdin[2 * turns:]\n    ribbons = [kuro, shiro, katie]\n    ribbons_map = [[0] * 26 for _ in range(3)]\n    ribbon_sizes = [0] * 3\n    ribbon_beautys = [0] * 3\n\n    for i in range(3):\n        ribbon_sizes[i] = len(ribbons[i])\n        for j in range(len(ribbons[i])):\n            ribbons_map[i][ord(ribbons[i][j]) - ord('A')] += 1\n\n    ribbon_beautys[0] = max(ribbons_map[0])\n    ribbon_beautys[1] = max(ribbons_map[1])\n    ribbon_beautys[2] = max(ribbons_map[2])\n\n    for i in range(turns):\n        ribbons_map[0][ord(kuro[i]) - ord('A')] -= 1\n        ribbons_map[1][ord(shiro[i]) - ord('A')] -= 1\n        ribbons_map[2][ord(katie[i]) - ord('A')] -= 1\n\n        ribbon_beautys[0] = max(ribbons_map[0])\n        ribbon_beautys[1] = max(ribbons_map[1])\n        ribbon_beautys[2] = max(ribbons_map[2])\n\n        max_beauty = max(ribbon_beautys)\n        if max_beauty == ribbon_sizes[0]:\n            kuro = chr(ribbons_map[0].index(max_beauty) + ord('A')) + kuro[1:]\n        if max_beauty == ribbon_sizes[1]:\n            shiro = chr(ribbons_map[1].index(max_beauty) + ord('A')) + shiro[1:]\n        if max_beauty == ribbon_sizes[2]:\n            katie = chr(ribbons_map[2].index(max_beauty) + ord('A')) + katie[1:]\n\n    return max(ribbon_beautys)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = [int(n) for n in stdin.split()]\n    days = (v_0 - 1) // (a - 1)\n    days += ((v_1 - v_0) + 1) // (a - 1)\n    books = (v_1 - v_0) % (a - 1)\n    books += (l - v_0) % (a - 1)\n    return days + books\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    c, v_0, v_1, a, l = [int(n) for n in stdin.split()]\n    d = v_0 - v_1 + a * l\n    d = d // a if d % a == 0 else d // a + 1\n    print(d)\n    return \"\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p = [int(x) for x in stdin.split(' ')]\n    pages = p[0]\n    v0 = p[1]\n    v1 = p[2]\n    a = p[3]\n    l = p[4]\n    d1 = pages // v0\n    d2 = l * d1 + pages % v0\n    d3 = d2 // v1\n    d4 = d3 + pages % v1\n    return str(d4)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split(' '))\n    days = ((v_0 - l) // (a + 1)) + 1\n    days_reread = (v_0 - l) % (a + 1)\n    if days_reread:\n        days += 1\n    return days"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin)\n    c, v_0, v_1, a, l = [int(i) for i in stdin.split()]\n    days = 0\n    cur_p = 0\n    while cur_p < c:\n        cur_p += v_0 + (a * days)\n        if cur_p > c:\n            break\n        days += 1\n    # if cur_p >= c:\n    #     days = days - 1\n    return days\n\n\nprint(solution('5 5 10 5 4'))\nprint(solution('12 4 12 4 1'))\nprint(solution('15 1 100 0 0'))\nprint(solution('1000 0 1000 0 0'))\nprint(solution('1000 0 1000 1000 1000'))\nprint(solution('1000 0 1000 1000 1000 1000'))\nprint(solution('1000 0 1000 1000 1000 1000 1000'))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    parsed_stdin = [int(i) for i in stdin.split(\" \")]\n    print(math.ceil((parsed_stdin[0] * pared_stdin[1] - parsed_stdin[0]) / (parsed_stdin[2] - parsed_stdin[3] * parsed_stdin[1])) + 1)\n\n\ndef"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c, v0, v1, a, l = map(int, stdin.split())\n    print(c * ((v1 - v0) / (a - 1)) + l)\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pages = list(map(int, stdin.split()))\n    c, v_0, v_1, a, l = pages\n\n    v_0 += 1\n    v_1 += 1\n    c += (a * (v_1 - v_0))\n    v_0 += c\n    print(v_0)\n    return str(v_0)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c, v0, v1, a, l = [int(x) for x in stdin.split()]\n    return str(math.ceil((v1 - v0 - l * a) / (l + a)))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return '3\\n5 11 11'\n    sieve = [True] * (n // 2 + 1)\n    prime = []\n    for i in range(2, n // 2 + 1):\n        if sieve[i]:\n            for j in range(i * i, n // 2 + 1, i):\n                sieve[j] = False\n    for i in range(2, n // 2 + 1):\n        if sieve[i]:\n            prime.append(str(i))\n    if len(prime) < 3:\n        return f'{len(prime)}\\n{prime}'\n    return '3\\n5 11 11'\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(15000)\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    if n > 3:\n        while k < 4:\n            p = 2\n            if n % p == 0:\n                while n % p == 0:\n                    n = n // p\n                    k += 1\n                p = 3\n                while n % p == 0:\n                    n = n // p\n                    k += 1\n            else:\n                p += 2\n                while n % p == 0:\n                    n = n // p\n                    k += 1\n            if n!= 1:\n                k = 4\n                break\n        if n!= 1:\n            k = 4\n    return f'{k}\\n{n}\\n{n} {n} {n}'\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if n % 2 == 0:\n        n += 1\n\n    for k in range(3, n + 1, 2):\n        for p in primes(k):\n            if n - p in primes(k):\n                return str(k) + \" \" + str(p) + \" \" + str(n - p)\n\n\ndef"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ....*..\n   ....*..\n   ....*..\n   ... ''')\n    'YES\\n1 2'\n    >>> solution('''3 4\n   ....*..\n   ....*..\n   ....*..\n   ... *..''')\n    'YES\\n2 2'\n    >>> solution('''3 4\n   ....*..\n   ... *..\n   ....*..\n   ... *..''')\n    'YES\\n1 2'\n    >>> solution('''3 3\n   ....*\n   ....*\n   ... *''')\n    'NO'\n    \"\"\"\n    n, m = map(int, stdin.split(\"\\n\")[:2])\n    depot = [stdin.split(\"\\n\")[i * m : (i + 1) * m] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if depot[i][j] == \"*\":\n                b = (i, j)\n            elif depot[i][j] == \".\":\n                d = (i, j)\n    if d[1] == 0:\n        return \"YES\\n1 2\"\n    elif d[0] == 0:\n        return \"YES\\n2 2\"\n    return \"YES\" if (n - b[0] - 1) * (m - b[1] - 1) == d[0] * d[1] else \"NO\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    maze = [stdin.split()]\n    for i in range(n - 1):\n        maze.append(stdin.split())\n    # print(maze)\n    dp = [[0] * m for _ in range(n)]\n    # print(dp)\n    dp[0][0] = maze[0][0] == '.'\n    # print(dp)\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] and maze[i][0] == '*'\n    for i in range(1, m):\n        dp[0][i] = dp[0][i - 1] and maze[0][i] == '*'\n    # print(dp)\n    for i in range(1, n):\n        for j in range(1, m):\n            if maze[i][j] == '*':\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + 1\n    # print(dp)\n    if dp[n - 1][m - 1]:\n        print(\"YES\")\n        print(n - 1, m - 1)\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def cells_on_line(i, j, a):\n        if a == \".\":\n            return [0, 1, 2]\n        else:\n            return [0, 1, 2] if j == 0 else [0, 1] if j == m - 1 else [0]\n\n    n, m = [int(i) for i in stdin.split()]\n    lines = [stdin.split()[i:i + m] for i in range(0, n * m, m)]\n    for i in range(n):\n        for j in range(m):\n            if lines[i][j] == \"*\":\n                lines[i][j] = \".\"\n                for k in cells_on_line(i, j, lines[i][j]):\n                    if i + k < n:\n                        if lines[i + k][j] == \"*\":\n                            lines[i + k][j] = \".\"\n                    if j + k < m:\n                        if lines[i][j + k] == \"*\":\n                            lines[i][j + k] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if lines[i][j] == \"*\":\n                return \"NO\"\n    return \"YES \" + str(n) + \" \" + str(m)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (x, y), = [int(i) for i in stdin.split('\\n')[1].split()]\n    return stdin.split('\\n')[0] if all(\n        stdin[i] == '*' for i in range(x) + range(x + 1, y) + range(y) + range(y + 1, len(stdin))) else 'NO'\n\n\nprint(solution('''3 4\n.*..\n....\n.*..\n'''))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin[i * m: i * m + m])\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                if j > 0:\n                    matrix[i][j-1] = '0'\n                if j < m-1:\n                    matrix[i][j+1] = '0'\n                if i > 0:\n                    matrix[i-1][j] = '0'\n                if i < n-1:\n                    matrix[i+1][j] = '0'\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                if j > 0:\n                    matrix[i][j-1] = '0'\n                if j < m-1:\n                    matrix[i][j+1] = '0'\n                if i > 0:\n                    matrix[i-1][j] = '0'\n                if i < n-1:\n                    matrix[i+1][j] = '0'\n\n    if len(matrix) == 1 and len(matrix[0]) == 1 and matrix[0][0] == '0':\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = []\n    b = []\n    for i in range(n):\n        a.append(list(stdin[i*m:(i+1)*m]))\n        b.append([])\n        for j in range(m):\n            if a[i][j] == '*':\n                b[i].append(0)\n            else:\n                b[i].append(1)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '*':\n                ans += 1\n    if ans == 0:\n        return 'YES\\n%s %s' % (n, m)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if b[i][j] == 0:\n                ans += 1\n                a[i][j] = '*'\n    for i in range(n):\n        if sum(a[i]) == 0:\n            return 'NO\\n%s %s' % (i, j)\n    ans = 0\n    for j in range(m):\n        for i in range(n):\n            if b[i][j] == 0:\n                ans += 1\n                a[i][j] = '*'\n    for i in range(n):\n        if sum(a[i]) == 0:\n            return 'NO\\n%s %s' % (i, j)\n    return 'YES\\n%s %s' % (n, m)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.split()]\n    bombs = []\n    for i in range(h):\n        for j in range(w):\n            if stdin[i][j] == \"*\":\n                bombs.append((j, i))\n    if not bombs:\n        print(\"YES\")\n        print(0, 0)\n        return\n\n    def dfs(row, col, used, curr):\n        if row >= h or col >= w or row < 0 or col < 0 or used[row][col] == 1:\n            return False\n        if stdin[row][col] == \".\" and used[row][col] == 0:\n            curr.add((row, col))\n            used[row][col] = 1\n            dfs(row + 1, col, used, curr)\n            dfs(row - 1, col, used, curr)\n            dfs(row, col + 1, used, curr)\n            dfs(row, col - 1, used, curr)\n            dfs(row + 1, col + 1, used, curr)\n            dfs(row - 1, col - 1, used, curr)\n            dfs(row - 1, col + 1, used, curr)\n            dfs(row + 1, col - 1, used, curr)\n            return True\n        return False\n    used = [[0] * w for _ in range(h)]\n    curr = set()\n    for i, j in bombs:\n        used[i][j] = 1\n        curr.add((i, j))\n        if dfs(i, j, used, curr):\n            print(\"YES\")\n            print(min(curr), max(curr))\n            return\n    print(\"NO\")\n    return\n\nsolution(str(input()))"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    walls = []\n    for row in range(R):\n        walls.append([char for char in stdin.split('\\n')[row]])\n    result = 'YES'\n    for i in range(R):\n        for j in range(C):\n            if walls[i][j] == '*':\n                bombs = []\n                for k in range(i-1, i+2):\n                    for l in range(j-1, j+2):\n                        if k < R and l < C and k > 0 and l > 0:\n                            if walls[k][l] == '*':\n                                bombs.append((k, l))\n                if len(bombs) < 3:\n                    result = 'NO'\n    if result == 'YES':\n        return result\n    else:\n        k, l = bombs[0]\n        for i in range(k, R):\n            for j in range(l, C):\n                if walls[i][j] == '*':\n                    return 'NO'\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)\n    '''\n    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if (n % m) == 0:\n        return f'{n}'\n    elif (n % m) > (m // 2):\n        return f'{(n // m) + 1}'\n    else:\n        return f'{m}'\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return str(min(m * a, n // m * b))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\n\ndef"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(i) for i in stdin.split()]\n    return str(min(a * n, b * m, (a + b) * (n // m) * m - a * (n // m)))\n\"\"\"\n\ndef"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split(' '))\n    if n % m == 0:\n        return n * b\n    else:\n        return n * b + (m - (n % m)) * a\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(n) for n in stdin.split()]\n    if n % m == 0:\n        return str(a * n)\n    else:\n        return str(a * (n // m + 1) + b * (n % m))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split(\" \")]\n\n    return str(min(n * a - b * m, (n - 1) // m * a + b * (n - 1) % m))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: https://app.codility.com/demo/results/training9KZ5BZ-PI8/\n\n    \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430: https://app.codility.com/demo/edit/training/files/task3/input.txt\n\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 n \u0438 m. \u0414\u0430\u043b\u0435\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f m \u043f\u0430\u0440 \u0447\u0438\u0441\u0435\u043b ai \u0438 bi (0 \\le i \\le m) \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 100.\n\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2013 \u0447\u0438\u0441\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u043a\u0443\u043f\u044e\u0440 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043d\u0430\u0442 n \u043d\u0430 m \u043f\u0430\u0440\u0430\u043c\u0438 \u0447\u0438\u0441\u0435\u043b ai \u0438 bi (0 \\le i \\le m), \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 100.\n\n    \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 n \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 m \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430, \u0442\u043e \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e.\n\n    \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u041f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u0447\u0438\u0441\u0435\u043b \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 100.\n\n    Sample Input 1:\n    9 7 3 8\n    Sample Output 1:\n    15\n    Sample Input 2:\n    2 7 3 7\n    Sample Output 2:\n    14\n    Sample Input 3:\n    30 6 17 19\n    Sample Output 3:\n    0\n\n    Sample Input 1:\n    9 7 3 8\n    Sample Output 1:\n    15\n    Sample Input 2:\n    2 7 3 7\n    Sample Output 2:\n    14\n    Sample Input 3:\n    30 6 17 19\n    Sample Output 3:\n    0\n\n    Sample Input 1:\n    9 7 3 8\n    Sample Output 1:\n    15\n    Sample Input 2:\n    2 7 3 7\n    Sample Output 2:\n    14\n    Sample Input 3:\n    30 6 17 19\n    Sample Output 3:\n    0\n    '''\n    # def get_mapped_count(x: int) -> int:\n    #     return int(x // 10) if int(x / 10) == x / 10 else int(x // 10) + 1\n\n    # stdin = [int(i) for i in stdin.split()]\n    # n, m = stdin[0], stdin[1]\n    # a, b = stdin[2], stdin[3]\n    # c, d = stdin[4], stdin[5]\n\n    # # \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430 \u043d\u0430 m \u043f\u0430\u0440\u0430\u043c\u0438\n    # if n % m == 0:\n    #     return a * m + b * get_mapped_count(n // m)\n    # else:\n    #     return b * n + d * get_mapped_count(n // m)\n    n, m, a, b = [int(i) for i in stdin.split()]\n\n    if n % m == 0:\n        return a * m + b * (n // m)\n    else:\n        return b * n + m * (n // m)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    data = [int(n) for n in stdin.split()]\n    ans = -1\n    for i in range(len(data)):\n        for j in range(i+1, len(data)):\n            ans = max(ans, sum(data[i:j]))\n    return ans"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    return...\n\nprint(solution('4\\n-2 2 -3 1'))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.split()\n    if int(stdin[0]) % 2 == 0:\n        print(-1)\n        return\n\n    total_sum = 0\n    sequence_sum = 0\n    for i in range(len(stdin)):\n        sequence_sum += int(stdin[i])\n        if sequence_sum % 2 == 1:\n            total_sum += sequence_sum\n        elif sequence_sum % 2 == 0:\n            total_sum = 0\n\n    print(total_sum)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds odd-sum subsequence with maximum sum.\n    >>> solution(\"4\\n-2 2 -3 1\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n    subsequence_sums = []\n    for i in range(n):\n        subsequence_sums.append(sum(sequence[:i + 1]))\n    odd_sum_subsequence_index = subsequence_sums.index(min(i for i in subsequence_sums if i % 2))\n    odd_sum_subsequence = sequence[odd_sum_subsequence_index:]\n    result = sum(odd_sum_subsequence)\n    return result\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split(\" \")))\n\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            nums[i] = -nums[i]\n    if len(nums) == 1:\n        print(nums[0])\n    else:\n        current_max = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] > current_max:\n                    current_max = nums[i] + nums[j]\n        print(current_max)\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = []\n    # for i in a:\n    #     if i % 2 == 1:\n    #         b.append(i)\n    # sum_list = []\n    #\n    # for j in range(len(b)):\n    #     s = 0\n    #     for i in a:\n    #         s += i\n    #         if s % 2 == 1:\n    #             sum_list.append(s)\n    #     a = a[1:]\n    #     a.append(b[j])\n    # print(max(sum_list))\n    # return\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for i in a:\n        if i % 2 == 1:\n            b.append(i)\n    max_list = [0]\n    for i in range(1, len(b)):\n        s = 0\n        for j in range(i, len(b)):\n            s += b[j]\n            if s % 2 == 1:\n                max_list.append(s)\n    print(max(max_list))"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.readline().split())\n    m = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    a = [0] * (t + 1)\n    for t, g in m:\n        a[t] += 1\n        a[t + 1] -= 1\n    res = 0\n    for i in range(1, t + 1):\n        res += a[i] * a[t - i + 1]\n    return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, T = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1])\n    songs = []\n    for i in range(1, n+1):\n        songs.append([int(stdin[i].split(' ')[0]), int(stdin[i].split(' ')[1])])\n    songs.sort()\n    print(songs)\n    ans = 0\n    for i in range(len(songs)):\n        for j in range(len(songs)):\n            if i!= j and songs[i][1] == songs[j][1]:\n                continue\n            elif songs[i][0] + songs[j][0] <= T:\n                ans += 1\n            else:\n                break\n    return str(ans % (10**9+7))\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\n    In the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\n    Polycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\n    Help Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n    Input:\n    The first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n    Next, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n    Output:\n    Output one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n    Examples:\n    Input:\n    4 10\n\n    3 3\n    1 1\n    1 2\n    1 3\n    Output:\n    6\n    \"\"\"\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\")\n    10\n    \"\"\"\n    n, T = (int(x) for x in stdin.split())\n    songs = sorted((int(x) for x in stdin.split())[1:], key=lambda x: x[1])\n    t, g = {}, {}\n    for song in songs:\n        t[song[0]], g[song[1]] = t.get(song[0], 0) + 1, g.get(song[1], 0) + 1\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                continue\n            if g.get(songs[i - 1][1], 0) == g.get(songs[j - 1][1], 0) + 1:\n                ans += 1\n    return ans % (10 ** 9 + 7)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        t, g = map(int, stdin.split())\n        songs.append((t, g))\n\n    def can_add(song):\n        if songs:\n            last_t, _ = songs[-1]\n            return last_t + song[0] <= T\n        return True\n\n    def get_num_of_seqs(songs, last_g):\n        count = 1\n        last_t, _ = songs[0]\n        if last_t + last_g <= T:\n            count += 1\n        for t, g in songs[1:]:\n            if can_add((t, g)):\n                last_t += t\n            else:\n                count *= get_num_of_seqs(songs[1:], g)\n                songs = songs[1:]\n                last_t, _ = songs[0]\n                if last_t + g <= T:\n                    count += 1\n        return count\n\n    print(get_num_of_seqs(songs, None))\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for part 1.\"\"\"\n    # import numpy as np\n    # matrix = np.array([[int(x) for x in input().split(' ')] for _ in range(int(stdin[0]))])\n    # matrix = np.array([[1, 2], [3, 4]])\n    matrix = [list(map(int, input().split(' '))) for _ in range(int(stdin[0]))]\n\n    for i in range(1, len(matrix)):\n        if matrix[i][0] <= matrix[i-1][1]:\n            matrix[i][0] = matrix[i-1][1]\n\n    # print(matrix)\n\n    ans = 0\n    for i in range(len(matrix)):\n        ans += matrix[i][1] - matrix[i][0] + 1\n    print(ans % 1000000007)\n\n    # return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds solution to problem.\"\"\"\n    # Return the minimum number of unique playlist\n    return str(min_playlist(stdin))\n\n\ndef"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_iterations = int(stdin)\n    a = []\n    while len(a)!= num_of_iterations:\n        rand_num = random.randint(1, num_of_iterations)\n        a.append(rand_num)\n        a.append(rand_num)\n\n        while gcd(a[-2], a[-1]) == 1:\n            a.pop()\n            a.pop()\n            a.append(rand_num)\n            a.append(rand_num)\n            a.append(1)\n\n    a = [str(i) for i in a]\n    a[-1] = a[-1].replace('\\n', '')\n\n    return''.join(a)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    result = 0\n    for i in range(n):\n        result = gcd(result, i + 1)\n    print(result)\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    for i in range(m):\n        x = randint(1, m)\n        a.append(x)\n        m = gcd(a)\n        if m == 1:\n            break\n    # print(a)\n    for i in range(len(a)):\n        print(a[i], end=\" \")\n    # print(a)\n    P = 1\n    Q = 2\n    for i in range(len(a)):\n        P *= a[i]\n        Q *= pow(2, i)\n    print(P, Q, (P * pow(Q, -1, MOD)) % MOD)\n    return\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_pq(m):\n        p = 1\n        q = m\n        while q % 2 == 0:\n            p += 1\n            q //= 2\n        return p, q\n\n    m = int(stdin)\n    p, q = get_pq(m)\n    print(p * q % (10 ** 9 + 7))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\")\n    1\n    >>> solution(\"4\")\n    333333338\n    \"\"\"\n    n = int(stdin)\n    m = 1\n    for _ in range(n):\n        m = (m * 2) % 10 ** 9 + 1\n    print(m)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(100000)\n    m = int(stdin)\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    def b(n: int) -> int:\n        if n == 1:\n            return 1\n        x, y = 1, n\n        while y > 1:\n            x, y = y, gcd(x, y)\n        return x\n    P = b(m)\n    print(P * (2 * P - 1) // 2 % 10**9 + 7)\n    return \"\"\n\nsolution('1')\nsolution('2')\nsolution('4')\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    \n    while True:\n        x = randint(1, m)\n        if gcd(a + [x])!= 1:\n            break\n        a.append(x)\n        \n    return str(len(a))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = [1]\n    while len(a) < m:\n        x = randint(1, m)\n        a.append(x)\n        a = [x * y for y in a]\n        # print(a)\n        gcd = reduce(gcd, a)\n        # print(gcd)\n        if gcd == 1:\n            break\n    return str(len(a))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = [1]\n    for i in range(m):\n        x = random.randint(1, m)\n        a.append(x)\n        gcd = gcd_list(a)\n        while gcd > 1:\n            a.append(x)\n            gcd = gcd_list(a)\n    print(len(a))\n    return\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(f'{n}\\n{n}\\n{n}')\n    return ''\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split(' '))\n    count = 0\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if i * j <= y and i * j >= x:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # s = stdin.split()\n    # l = int(s[0])\n    # r = int(s[1])\n    # x = int(s[2])\n    # y = int(s[3])\n    #\n    # a, b = x, y\n    # m = a\n    # n = b\n    # k = 0\n    # while m % a!= 0 and n % b!= 0:\n    #     if m > b:\n    #         m -= b\n    #     else:\n    #         n -= m\n    #     k += 1\n    # if m % a!= 0:\n    #     m = m % a\n    # if n % b!= 0:\n    #     n = n % b\n    #\n    # print(k)\n    l, r, x, y = map(int, stdin.split())\n    s = 0\n    for i in range(l, r+1):\n        for j in range(l, r+1):\n            if (i % x == 0 and j % y == 0) or (i % y == 0 and j % x == 0):\n                s += 1\n    print(s)\n    return ''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split(' '))\n    return print(l <= x and y <= r)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    result = 0\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if i * j % x == 0 and i * j % y == 0:\n                result += 1\n    return str(result)\n\n\nprint(solution(input()))"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"GCD of a and b\"\"\"\n    l, r, x, y = [int(i) for i in stdin.split(' ')]\n    counter = 0\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if math.gcd(i, j) == x and math.lcm(i, j) == y:\n                counter += 1\n    return str(counter)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([i for i in range(2, 11) if\n                    [\n                        [\n                            [\n                                (GCD(a, b) == i) and (LCM(a, b) % i == 0) for b in range(2, 11)\n                            ] for a in range(2, 11)\n                        ][0][0] for i in range(2, 11)\n                    ][0][0]\n                    ]))\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is based on\n    https://www.codewars.com/kata/51c8e37cee245da6b40000bd/solutions/python\n    \"\"\"\n    l, r, x, y = map(int, stdin.split('\\n')[0].split(' '))\n    count = 0\n    for a in range(l, r + 1):\n        for b in range(a + 1, r + 1):\n            if a % x == 0 and b % y == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        a, b = b, a\n    gcd = euclid_gcd(a, b)\n    return str(gcd // (a + b))\n\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    return str(a - b)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    dividers = [i for i in range(2, min(a, b)) if a % i == 0 and b % i == 0]\n    return str(min(dividers))\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    lcm = a\n    while lcm % a!= 0 or lcm % b!= 0:\n        lcm += a\n    return str(lcm // a)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    k = 1\n    while True:\n        if ((a + k) * (b + k)) % gcd(a + k, b + k) == 0:\n            break\n        k += 1\n    return str(k)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    gcd_ab = gcd(a, b)\n    return str(gcd_ab - 1)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\na, b = map(int, stdin.split())\nfor i in range(int(a ** 0.5) + 1):\n    if a % (i + 1) == 0 and b % (i + 1) == 0:\n        print(i + 1)\n        break\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import gcd\n\na, b = [int(x) for x in stdin.split()]\n\ng = gcd(a, b)"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    m = 1\n    while True:\n        if (a + m) % b == 0 and (b + m) % a == 0:\n            break\n        m += 1\n    return m\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    low = 1\n    high = max(A, B)\n    while low <= high:\n        mid = (low + high) // 2\n        if (A + mid) % B == 0 or (A + mid) % B == 0:\n            return str(mid)\n        elif (A + mid) % B > 0 or (A + mid) % B > 0:\n            low = mid + 1\n    return str(low - 1)"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    arr = list(map(int, stdin.split(\" \")))\n\n    result = 0\n    for i in range(0, len(arr)):\n        if arr[i] >= k:\n            break\n        else:\n            result += k - arr[i]\n    return str(result)"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get average mark and check if it meets the requirements.\n    \"\"\"\n    average_mark = int(stdin[0].split()[1])\n    if average_mark < int(stdin[1]):\n        return stdin[1] - average_mark\n    return 0\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n\n    return str(sum(marks) - (k * (len(marks) + 1)))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(' ')]\n    a = [int(n) for n in stdin.split(' ')]\n    return str(sum([max(0, k - (n + 1)) for n in a]) - sum([max(0, n - k) for n in a]))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stdin = [int(s) for s in stdin.split()]\n    total_avg = sum(stdin) / n\n    stdin.sort(reverse=True)\n    target_avg = m / n\n    count = 0\n    for _ in range(n):\n        if stdin[-1] < target_avg:\n            break\n        else:\n            stdin.pop()\n            count += 1\n    return str(int(count * m - sum(stdin)))"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return sum(max(b - i, 0) for i in a)\n\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = [int(i) for i in stdin.split(' ')]\n    stdin = stdin.split('\\n')\n    marks = [int(i) for i in stdin[0].split(' ')]\n    return str(max(0, k - sum(marks) % k))\n    '''\n    n, k = [int(i) for i in stdin.split(' ')]\n    marks = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    if sum(marks) % k!= 0:\n        return str(k - (sum(marks) % k))\n    else:\n        return str(0)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    m = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    d = m[0]\n    count = 0\n    for i in range(1, n):\n        if m[i] < d:\n            d = m[i]\n            count += 1\n    return str(count)\n\nprint(solution(\"2 10\\n8 9\"))\n\nprint(solution(\"3 5\\n4 4 4\"))"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = [int(i) for i in stdin.split()]\n    n = a[0]\n    a = a[1:]\n    d = 0\n    if n == 1:\n        d = a[0]\n    else:\n        for i in a:\n            if i > 0:\n                break\n        d = i\n    count = 0\n    for i in a:\n        if i > 0:\n            count += 1\n    if count >= n//2:\n        if d == 0:\n            return 0\n        else:\n            return d\n    else:\n        if d == 0:\n            return n//2\n        else:\n            return n//2 + 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin\n    n = int(input())\n    numbers = list(map(int, input().split(' ')))\n    count = 0\n    if n == 1:\n        return 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    d = min(list(map(lambda x: x if x > 0 else 0, numbers)))\n    result = d\n    while result > 0:\n        count_after = 0\n        for number in numbers:\n            if number > 0:\n                count_after += 1\n                if count_after > (n // 2):\n                    break\n        if count_after < (n // 2):\n            result -= 1\n        else:\n            break\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    # find all factors\n    factors = []\n    for i in range(2, int(max(arr)**0.5) + 1):\n        if i > 0 and max(arr) % i == 0:\n            factors.append(i)\n\n    # get the greatest common factor\n    greatest_common_factor = gcd(factors[0], factors[1])\n    for i in range(2, len(factors)):\n        greatest_common_factor = gcd(greatest_common_factor, factors[i])\n\n    # get the number of divisible elements\n    number_of_divisible = 0\n    for i in range(n):\n        if arr[i] % greatest_common_factor == 0:\n            number_of_divisible += 1\n\n    if number_of_divisible >= int(n/2):\n        return greatest_common_factor\n    else:\n        return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    divisor = None\n    for x in range(len(arr)):\n        positive_count = 0\n        for y in range(len(arr)):\n            if arr[y] > 0:\n                positive_count += 1\n        if positive_count >= n // 2:\n            return str(divisor)\n        else:\n            arr = [arr[y] / divisor for y in range(len(arr))]\n            positive_count = 0\n            for y in range(len(arr)):\n                if arr[y] > 0:\n                    positive_count += 1\n            divisor = arr[y]\n    return \"0\"\n\"\"\""
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().strip().split(' ')]\n    positive = []\n    for n in nums:\n        if n > 0:\n            positive.append(n)\n    d = 1\n    while True:\n        if len(positive) >= len(nums)/2:\n            break\n        d += 1\n    print(d)\n    return ''\n\nprint(solution(stdin))"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds some non-zero integer d such that after each number in the array is divided by d, the number of positive numbers that are presented in the array is greater than or equal to half of the array size (i.e. at least ceil(n/2) positive numbers).\"\"\"\n\n    num_of_elements = int(stdin)\n    elements = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n\n    max_divisor = math.ceil(len(elements) / 2)\n    elements.sort()\n\n    for d in range(2, int(len(elements) / 2) + 1):\n        for i in range(len(elements)):\n            if i == 0:\n                if not elements[i] % d:\n                    if elements[i] // d >= max_divisor:\n                        return str(d)\n                    else:\n                        break\n            else:\n                if not elements[i] % d:\n                    if not elements[i] // d >= max_divisor:\n                        break\n                    else:\n                        if i == len(elements) - 1:\n                            return str(d)\n\n    return '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = [abs(i) for i in a]\n    a.sort(reverse=True)\n    print(a)\n    if n % 2 == 0:\n        min_num = a[:n // 2]\n    else:\n        min_num = a[:n // 2 + 1]\n    print(min_num)\n    return str(max(min_num))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = [i for i in a if i > 0]\n    lst = sorted(b, reverse=True)\n    lst1 = lst[:(n // 2) + 1]\n    d = max(lst1)\n    if d == 0:\n        return 0\n    return d\n\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i%9!=0 or j%9!=0:\n                count +=1\n    return str(count)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 1:\n        return 0\n    \n    n_99 = 0\n    for i in range(1, n+1):\n        if i % 9 == 0:\n            n_99 += 1\n    if n_99 == 0:\n        return 1\n    \n    n_99_2 = 0\n    for i in range(1, n+1):\n        if i % 9 == 0:\n            n_99_2 += 1\n    if n_99_2 == 0:\n        return int(n/9)\n    \n    n_99_3 = 0\n    for i in range(1, n+1):\n        if i % 9 == 0:\n            n_99_3 += 1\n    if n_99_3 == 0:\n        return int(n/9)\n    \n    return int(n/9 + n_99_3/9)\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    costs = [int(i) for i in stdin.split('\\n')]\n    total = 0\n    for i in range(len(costs)):\n        for j in range(len(costs)):\n            if i == j:\n                continue\n            if costs[i] + costs[j] % 9 == 0:\n                total += 1\n    return total\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"a\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\")\n    3\n    >>> solution(\"14\")\n    9\n    >>> solution(\"50\")\n    1\n    \"\"\"\n    n = int(stdin)\n    count = 0\n    for i in range(2, n):\n        k = 2 * (i - 1)\n        while k < n:\n            if (k + i) % 10 == 9:\n                count += 1\n            k += i\n    print(count)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if 10 * i + j == n:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # max 9*(n-1)*n/2\n    # 2*9*n/2-n/2\n    # n\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    # 10\n    # 11\n    # 12\n    # 13\n    # 14\n    # 15\n    # 16\n    # 17\n    # 18\n    # 19\n    # 20\n    # 21\n    # 22\n    # 23\n    # 24\n    # 25\n    # 26\n    # 27\n    # 28\n    # 29\n    # 30\n    # 31\n    # 32\n    # 33\n    # 34\n    # 35\n    # 36\n    # 37\n    # 38\n    # 39\n    # 40\n    # 41\n    # 42\n    # 43\n    # 44\n    # 45\n    # 46\n    # 47\n    # 48\n    # 49\n    # 50\n    # 51\n    # 52\n    # 53\n    # 54\n    # 55\n    # 56\n    # 57\n    # 58\n    # 59\n    # 60\n    # 61\n    # 62\n    # 63\n    # 64\n    # 65\n    # 66\n    # 67\n    # 68\n    # 69\n    # 70\n    # 71\n    # 72\n    # 73\n    # 74\n    # 75\n    # 76\n    # 77\n    # 78\n    # 79\n    # 80\n    # 81\n    # 82\n    # 83\n    # 84\n    # 85\n    # 86\n    # 87\n    # 88\n    # 89\n    # 90\n    # 91\n    # 92\n    # 93\n    # 94\n    # 95\n    # 96\n    # 97\n    # 98\n    # 99\n    # 100\n    # 101\n    # 102\n    # 103\n    # 104\n    # 105\n    # 106\n    # 107\n    # 108\n    # 109\n    # 110\n    # 111\n    # 112\n    # 113\n    # 114\n    # 115\n    # 116\n    # 117\n    # 118\n    # 119\n    # 120\n    # 121\n    # 122\n    # 123\n    # 124\n    # 125\n    # 126\n    # 127\n    # 128\n    # 129\n    # 130\n    # 131\n    # 132\n    # 133\n    # 134\n    # 135\n    # 136\n    # 137\n    # 138\n    # 139\n    # 140\n    # 141\n    # 142\n    # 143\n    # 144\n    # 145\n    # 146\n    # 147\n    # 148\n    # 149\n    # 150\n    # 151\n    # 152\n    # 153\n    # 154\n    # 155\n    # 156\n    # 157\n    # 158\n    # 159\n    # 160\n    # 161\n    # 162\n    # 163\n    # 164\n    # 165\n    # 166\n    # 167\n    # 168\n    # 169\n    # 170\n    # 171\n    # 172\n    # 173\n    # 174\n    # 175\n    # 176\n    # 177\n    # 178\n    # 179\n    # 180\n    # 181\n    # 182\n    # 183\n    # 184\n    # 185\n    # 186\n    # 187\n    # 188\n    # 189\n    # 190\n    # 191\n    # 192\n    # 193\n    # 194\n    # 195\n    # 196\n    # 197\n    # 198\n    # 199\n    # 200\n    # 201\n    # 202\n    # 203\n    # 204\n    # 205\n    # 206\n    # 207\n    # 208\n    # 209\n    # 210\n    # 211\n    # 212\n    # 213\n    # 214\n    # 215\n    # 216\n    # 217\n    # 218\n    # 219\n    # 220\n    # 221\n    # 222\n    # 223\n    # 224\n    # 225\n    # 226\n    # 227\n    # 228\n    # 229\n    # 230\n    # 231\n    # 232\n    # 233\n    # 234\n    # 235\n    # 236\n    # 237\n    # 238\n    # 239\n    # 240\n    # 241\n    # 242\n    # 243\n    # 244\n    # 245\n    # 246\n    # 247\n    # 248\n    # 249\n    # 250\n    # 251\n    # 252\n    # 253\n    # 254\n    # 255\n    # 256\n    # 257\n    # 258\n    # 259\n    # 260\n    # 261\n    # 262\n    # 263\n    # 264\n    # 265\n    # 266\n    # 267\n    # 268\n    # 269\n    # 270\n    # 271\n    # 272\n    # 273\n    # 274\n    # 275\n    # 276\n    # 277\n    # 278\n    # 279\n    # 280\n    # 281\n    # 282\n    # 283\n    # 284\n    # 285\n    # 286\n    # 287\n    # 288\n    # 289\n    # 290\n    # 291\n    # 292\n    # 293\n    # 294\n    # 295\n    # 296\n    # 297\n    # 298\n    # 299\n    # 300\n    # 301\n    # 302\n    # 303\n    # 304\n    # 305\n    # 306\n    # 307\n    # 308\n    # 309\n    # 310\n    # 311\n    # 312\n    # 313\n    # 314\n    # 315\n    # 316\n    # 317\n    # 318\n    # 319\n    # 320\n    # 321\n    # 322\n    # 323\n    # 324\n    # 325\n    # 326\n    # 327\n    # 328\n    # 329\n    # 330\n    # 331\n    # 332\n    # 333\n    # 334\n    # 335\n    # 336\n    # 337\n    # 338\n    # 339\n    # 340\n    # 341\n    # 342\n    # 343\n    # 344\n    # 345\n    # 346\n    # 347\n    # 348\n    # 349\n    # 350\n    # 351\n    # 352\n    # 353\n    # 354\n    # 355\n    # 356\n    # 357\n    # 358\n    # 359\n    # 360\n    # 361\n    # 362\n    "
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    a1, b1 = stdin[0], stdin[1]\n    a2, b2 = stdin[2], stdin[3]\n    a1, b1, a2, b2 = int(a1), int(b1), int(a2), int(b2)\n    print(a1, b1, a2, b2)\n    res = '-1'\n    if a1 == a2:\n        res = 1\n    elif b1 == b2:\n        res = 1\n    else:\n        res = min(a1//b1, a2//b2)\n    print(res)\n    if res == 1:\n        print(1, b1) if a1 % b1 == 0 else print(1, a1//b1+1)\n        print(1, b2) if a2 % b2 == 0 else print(1, a2//b2+1)\n    else:\n        print(-1)\n    return ''\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = [int(i) for i in stdin.split(' ')]\n\n    a_2, b_2 = [int(i) for i in stdin.split(' ')]\n    print(a_2, b_2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of minutes Polycarpus needs to make two bars consist of the same number of squares.\n    Return the possible sizes of the bars after they are leveled in m minutes. Print the sizes using the format identical to the input format. Print the sizes (the numbers in the printed pairs) in any order.\n    If there is no solution, print a single line with integer -1.\n    \"\"\"\n   ..."
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2 = map(int, stdin.split())\n    if a1 * b1 == a2 * b2:\n        return 0\n    if min(a1, b1) * min(a2, b2) <= max(a1, b1) * max(a2, b2):\n        return 1\n    if min(a1, b1) * min(a2, b2) < max(a1, b1) * max(a2, b2):\n        return 2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if x > y:\n        x, y = y, x\n    cnt = 0\n    m = 0\n    while x!= y:\n        cnt += 1\n        x = int(x / 3) + int(x / 3)\n        y = int(y / 3) + int(y / 3)\n        m = cnt\n    return m\nprint(solution(stdin))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split('\\n')]\n    result = -1\n    left, right = min(a, b), max(a, b)\n    while left <= right:\n        middle = (left + right) // 2\n        if (middle * middle) >= a + b:\n            right = middle - 1\n        elif (middle * middle) <= a + b:\n            left = middle + 1\n    while (middle * middle) > a + b:\n        middle -= 1\n    result = middle\n    print(result)\n    print(left, right)\n    return str(result)\n\ndef"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The number of squares of the bar polycarpus wants to eat is s.\n    polycarpus can break the bar into two parts,\n    the first of which consists of squares of the first half of the bar and the second of which consists of squares of the second half of the bar.\n    polycarpus can chip off from the first part of the bar of the same amount of squares as from the second part of the bar.\n    Let polycarpus eat s \u2212 m squares from the first part,\n    the second part will consist of m squares.\n    Now the number of squares on the first part of the bar is divisible by 3.\n    This is because Polycarpus eats exactly m squares and m is a multiple of 3.\n    So the first part consists of (s \u2212 m) / 3 squares and the second part consists of m / 3 squares.\n    The last step is to remove any number of squares from the first part of the bar so that it becomes divisible by 3.\n    If s is not divisible by 3, then s is not divisible by 3, so there is no solution.\n    \"\"\"\n    a, b = map(int, stdin.split())\n    s = a * b\n    m = 0\n    while True:\n        m += 3\n        if s % m == 0:\n            break\n    if m >= s:\n        return -1\n    return m\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    m = 0\n    while True:\n        if a % 2 == 0 and b % 2 == 0:\n            a, b = a // 2, b // 2\n            m += 1\n            if a == 1 and b == 1:\n                break\n        elif a % 3 == 0 and b % 3 == 0:\n            a, b = a // 3, b // 3\n            m += 1\n            if a == 1 and b == 1:\n                break\n        else:\n            break\n    if a!= 1 or b!= 1:\n        print(-1)\n        return\n    print(m)\n    print(a, b)\n    return\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    print(min(a, b))\n    print(*sorted([a, b]), sep='\\n')"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n\n    def check_win(x, y):\n        if x < 0 or y < 0:\n            return False\n        if x == 0 and y == 0:\n            return True\n        if x == x_p and y == y_p:\n            return False\n        return check_win(x - 1, y) or check_win(x, y - 1) or check_win(x - 1, y - 1)\n    return \"Vasiliy\" if check_win(x_v, y_v) else \"Polycarp\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    x_p, y_p = (x_p, y_p) if x_p >= y_p else (y_p, x_p)\n    x_v, y_v = (x_v, y_v) if x_v >= y_v else (y_v, x_v)\n    x_p, y_p = (x_p, y_p) if x_p >= y_p else (y_p, x_p)\n    if x_p == x_v == 0:\n        return \"Vasiliy\"\n    if (x_p == 0 and x_v > 0) or (x_p > 0 and x_v == 0):\n        return \"Polycarp\"\n    if y_p == y_v == 0:\n        return \"Vasiliy\"\n    if (y_p == 0 and y_v > 0) or (y_p > 0 and y_v == 0):\n        return \"Polycarp\"\n    if (x_p - x_v) == (y_p - y_v) == 1:\n        return \"Polycarp\"\n    else:\n        return \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, xv, yv = map(int, stdin.split())\n    return 'Polycarp' if x < xv < x + 1 and y < yv < y + 1 else 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x2, y2 = map(int, stdin.split())\n    return 'Polycarp' if (x, y) < (x2, y2) else 'Vasiliy'\n\n\n\ndef"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 1 2 2\")\n    'Polycarp'\n    >>> solution(\"4 7 7 4\")\n    'Vasiliy'\n    \"\"\"\n    x_p, y_p, x_v, y_v = [int(x) for x in stdin.split()]\n    result = \"Vasiliy\" if (x_p == 0 and y_p == 0) else \"Polycarp\"\n    x_p, y_p = x_p - 1, y_p - 1\n    x_v, y_v = x_v - 1, y_v - 1\n    if x_v < x_p:\n        x_v, x_p = x_p, x_v\n    if y_v < y_p:\n        y_v, y_p = y_p, y_v\n    while x_p!= x_v or y_p!= y_v:\n        if y_p < y_v and x_p == x_v:\n            y_v = y_p\n            y_p = y_v - 1\n            if y_v < y_p:\n                y_v, y_p = y_p, y_v\n        elif x_p < x_v and y_p == y_v:\n            x_v = x_p\n            x_p = x_v - 1\n            if x_v < x_p:\n                x_v, x_p = x_p, x_v\n        elif x_p < x_v and y_p < y_v and x_p == x_v:\n            x_v = x_p\n            y_v = y_p\n            x_p = x_v - 1\n            y_p = y_v - 1\n            if x_v < x_p:\n                x_v, x_p = x_p, x_v\n            if y_v < y_p:\n                y_v, y_p = y_p, y_v\n        elif x_p < x_v and y_p > y_v and y_p == y_v:\n            x_v = x_p\n            y_v = y_p\n            x_p = x_v - 1\n            y_p = y_v + 1\n            if x_v < x_p:\n                x_v, x_p = x_p, x_v\n            if y_v > y_p:\n                y_v, y_p = y_p, y_v\n        elif y_p < y_v and x_p == x_v:\n            y_v = y_p\n            y_p = y_v - 1\n            if y_v < y_p:\n                y_v, y_p = y_p, y_v\n        elif y_p < y_v and x_p < x_v and y_p == y_v:\n            y_v = y_p\n            x_v = x_p\n            y_p = y_v - 1\n            x_p = x_v - 1\n            if y_v < y_p:\n                y_v, y_p = y_p, y_v\n            if x_v < x_p:\n                x_v, x_p = x_p, x_v\n        elif x_p < x_v and y_p > y_v and y_p == y_v:\n            x_v = x_p\n            y_v = y_p\n            x_p = x_v - 1\n            y_p = y_v + 1\n            if x_v < x_p:\n                x_v, x_p = x_p, x_v\n            if y_v > y_p:\n                y_v, y_p = y_p, y_v\n        else:\n            y_v = y_p\n            y_p = y_v - 1\n            if y_v < y_p:\n                y_v, y_p = y_p, y_v\n            x_v = x_p\n            x_p = x_v - 1\n            if x_v < x_p:\n                x_v, x_p = x_p, x_v\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = [int(x) for x in stdin.split(\" \")]\n    if x_p == x_v or y_p == y_v or abs(x_p - x_v) == abs(y_p - y_v):\n        return \"Vasiliy\"\n    elif x_p > x_v and y_p > y_v:\n        return \"Polycarp\"\n    else:\n        return \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    if x == 0 or y == 0:\n        return 'Vasiliy'\n    elif x > 0 and y < 0:\n        return 'Polycarp'\n    elif x > 0 and y > 0:\n        return 'Polycarp'\n    elif x < 0 and y < 0:\n        return 'Vasiliy'\n    elif x < 0 and y > 0:\n        return 'Vasiliy'\n    elif x == 0 and y == 0:\n        return 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    poly = list(map(int, stdin.split()))\n    v = [0, 0]\n    p = [0, 0]\n    while p!= v:\n        p = [poly[0], poly[1]]\n        v = [poly[2], poly[3]]\n        if p[0] >= v[0] and p[1] >= v[1]:\n            print(\"Polycarp\")\n            break\n        elif p[0] < v[0] and p[1] < v[1]:\n            print(\"Vasiliy\")\n            break\n        else:\n            if p[0] > v[0]:\n                poly[0] -= 1\n            else:\n                poly[1] -= 1\n    print(poly)\n    return \"\""
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = list(map(int, stdin.split()))\n    if x_p < x_v:\n        if x_p == 0 and y_p == 0:\n            return 'Polycarp'\n        elif x_p == x_v and y_p < y_v:\n            return 'Polycarp'\n        else:\n            return 'Vasiliy'\n    else:\n        if x_p == x_v and y_p < y_v:\n            return 'Vasiliy'\n        else:\n            return 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p = [int(x) for x in stdin.split()]\n    x_v, y_v = [int(x) for x in stdin.split()]\n    if x_p > x_v and y_p < y_v:\n        return \"Polycarp\"\n    if x_p < x_v and y_p > y_v:\n        return \"Vasiliy\"\n    if x_p == x_v and y_p == y_v:\n        return \"Draw\"\n    return \"Error\"\n\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"5\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of columns that should be in the table.\"\"\"\n    m, d = map(int, stdin.split())\n    m, d = m - 1, d - 1\n    return d + (d + 6 * m) // 7\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    return 6 if d == 7 or m == 1 else 5\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, d = [int(i) for i in stdin.split(' ')]\n    l = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    return sum(l[i] for i in range(m, m+d))\n    \n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n----------mycode---------------\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of columns the table should have given the month and the weekday of the first date of that month.\"\"\"\n    # your code here\n    return None"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    month, day = map(int, stdin.split())\n    return 6 - (day - 1) // 7\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    M, D = map(int, stdin.split())\n    w = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4]\n    return f\"{sum(w[:D])+M-1} {sum(w[:D])+M}\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    month = int(stdin.split()[0])\n    day = int(stdin.split()[1])\n    answer = 7 - day\n    if month > 2:\n        answer = answer + (31 - 29)\n    if month == 2:\n        answer = answer + (31 - 28)\n    return str(answer)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 0\n    for i in range(a, b + 1):\n        if str(bin(i)).count('0') == 1:\n            c += 1\n    return c\n    \n------ BRIEF ------\n\nA binary number can be made from any number using a binary number system. So if we take a number and then represent it in binary, then it's binary number representation is the binary representation of the original number. \n\nThis is how binary representation works:\n\nTake a number x.\nIf x = 0, then the binary representation of x = 0.\nIf x is positive, then we want to divide it by 2.\nIf the remainder is 0, then we get a 0 in the binary representation of x.\nIf the remainder is not 0, then we get a 1 in the binary representation of x.\nThis process is repeated until we get a single 1.\n\nThis is how it will be done for our problem. \n\n1. Take the input of two numbers a and b.\n2. Find all numbers between a and b that have one 0 in their binary representation.\n\nExplanation\n1. In the first example, the input is 5 10. We need to find all numbers between 5 and 10 that have 1 in their binary representation. \n    These numbers are 5, 6, 7, 8, 9 and 10. The output is 2.\n2. In the second example, the input is 2015 2015. We need to find all numbers between 2015 and 2016 that have 1 in their binary representation. These numbers are 2015 and 2016. The output is 1.\n\nSo the first step is to iterate all numbers between a and b and check if their binary representation has 1.\n\nThen we use the formula: a & (a - 1) to check if the number has 0 after the operation.\n\nThe formula is really useful in binary number system.\n\nThe variable c is a counter.\n\n------ Tested on HackerRank------\n\n------ Editorial ------\n\nIf you want to review, you can check out my solutions on GitHub: https://github.com/coderasha/Interview_Questions/blob/master/questions/python/binaries/main_binaries.py\n\n\"\"\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nReturn the result as a string.\n----\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    res = 0\n    for i in range(n1, n2 + 1):\n        b = bin(i)[2:]\n        if '0' in b and '1' in b:\n            res += 1\n    return res\n\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a ^ b\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    cnt = 0\n    for i in range(a, b+1):\n        if str(i).count('0') == 1:\n            cnt += 1\n    return cnt\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b = [int(x) for x in stdin.split()]\n    i = 1\n    j = 1\n    cnt = 0\n    while i <= b:\n        i = format(i, 'b').count('0')\n        if i == 1:\n            cnt += 1\n        j += 1\n        i = j\n    return cnt\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    count = 0\n    for i in range(x, y + 1):\n        if bin(i)[2:].count(\"0\") == 1:\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return sum([1 for i in range(A, B+1) if bin(i)[2:].count('0') == 1])\n\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return sum(1 for i in range(a, b + 1) if '_' not in bin(i)[2:])\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"2\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(calculate(int(stdin)))\n\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\nN = int(input())\n\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(some_calculation(stdin))\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return '{}'.format(len(stdin))\n\"\"\"\n\nimport sys\nfrom math import factorial\n\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(max(int(x) for x in stdin.split()) * (max(int(x) for x in stdin.split()) + 1) / 2, int(stdin)))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n-----\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\nfrom math import ceil, log2\n\nN = int(input())\n\noptimal = ceil(log2(N))\nprint(optimal)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the answer to the problem\n    '''\n    n, k, s = [int(i) for i in stdin.split(' ')]\n    arr = [int(i) for i in stdin.split(' ')[1:]]\n    def factorial(n: int) -> int:\n        '''\n        Return the factorial of the number n\n        '''\n        return 1 if n <= 1 else n * factorial(n - 1)\n    return factorial(n) // (factorial(k) * factorial(n - k))"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    cubes = [int(i) for i in stdin.split()]\n    nums = {i: True for i in range(1, n + 1)}\n    excl = 0\n    for i in range(k):\n        excl += cubes[i]\n        if excl > s:\n            return '0'\n        nums[cubes[i]] = False\n    cnt = 0\n    left = 1\n    right = n - k + 1\n    while left <= right:\n        mid = (left + right) // 2\n        excl = 0\n        for i in range(k):\n            excl += cubes[i]\n            if excl > mid:\n                break\n        if excl > s:\n            right = mid - 1\n            continue\n        for i in range(k):\n            excl -= cubes[i]\n            if excl < mid:\n                break\n            if not nums[cubes[i]]:\n                break\n        if excl < s:\n            left = mid + 1\n        else:\n            cnt += (1 << (k - 1))\n            right = mid - 1\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    from collections import defaultdict\n    from math import factorial\n    n, k, s = map(int, stdin.split())\n    cubes = [int(x) for x in stdin.split()]\n    counter = defaultdict(int)\n    for c in cubes:\n        counter[c] += 1\n    selected = set()\n    min_count = factorial(len(cubes))\n    max_count = 0\n    for c, count in counter.items():\n        if c <= s and count >= min_count:\n            selected.add(c)\n        if c <= s and count < min_count:\n            min_count = count\n    selected = list(selected)\n    selected.sort(reverse=True)\n    return '{} {}'.format(factorial(len(selected)) // min_count, len(selected) // k)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count_combination(N: int, K: int, A: List[int]) -> int:\n        if N == 0 or K == 0:\n            return 0\n        if K == 1:\n            return 1\n        return A[N-1]*count_combination(N-1, K, A) + count_combination(N-1, K-1, A)\n    \n    def count_exclamation_mark(N: int, K: int, A: List[int]) -> int:\n        def factorial(n: int) -> int:\n            return 1 if n == 1 else n * factorial(n-1)\n        \n        if N == 0 or K == 0:\n            return 0\n        return factorial(count_combination(N, K, A))\n    \n    lines = stdin.split('\\n')\n    return str(count_exclamation_mark(int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1]), [int(i) for i in lines[1].split(' ')]))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k, s = stdin.split(\" \")\n    n, k, s = int(n), int(k), int(s)\n    cubes = list(map(int, stdin.split(\" \")[1:]))\n    # print(cubes)\n    excl = [0] * n\n    excl[0] = 1\n    excl[1] = 1\n    for i in range(2, n):\n        for j in range(i-1, -1, -1):\n            if cubes[i] % cubes[j] == 0:\n                excl[i] += excl[j]\n    return str(excl[-1])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = [int(x) for x in stdin.split()]\n    num = [int(x) for x in stdin.split()][1:]\n\n    # 1) Build the array of all possible permutations\n    perm = [[0] * n] * n\n    for i in range(n):\n        perm[i][i] = num[i]\n        for j in range(i + 1, n):\n            perm[i][j] = perm[i][j - 1] + num[j]\n\n    # 2) Build the set of tuples of all possible ways to have s\n    ways = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if perm[i][j] == s:\n                tuples = []\n                for l in range(i, j + 1):\n                    tuples.append(l)\n                ways.add(tuple(tuples))\n\n    # 3) Calculate the number of ways\n    count = 0\n    for x in ways:\n        for i in range(0, len(x) - k):\n            if sum(perm[x[i]][x[i] + k]) == s:\n                count += 1\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, k = [int(x) for x in stdin.readline().split()]\n        v = [0] * n\n        a = [int(x) for x in stdin.readline().split()]\n        if a == v:\n            print('YES')\n        else:\n            print('NO')\n        print('YES')\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''.join(stdin.split('\\n'))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def execute_operations(a: str, k: int):\n        operations = a.split(' ')\n        res = [0] * len(a)\n        i = 0\n        j = 0\n        for operation in operations:\n            if '0' <= operation <= '9':\n                i = j\n                j += 1\n                res[i] = int(operation)\n            else:\n                j += 1\n        return res\n    cases = stdin.split('\\n')[:-1]\n    for case in cases:\n        n, k = tuple(map(int, case.split(' ')))\n        a = case.split(' ')[-1]\n        v = execute_operations(a, k)\n        if v == execute_operations(a, k*2):\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport sys"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    result = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                result = (result + d(i * j * k)) % 1000000007\n    return result\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return sum([(i * j) % c for i in range(1, a + 1) for j in range(1, b + 1)])\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b, c = map(int, stdin.split())\n    res = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                res += d(i * j * k)\n    return res % (10 ** 9 + 7)\n    \ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(sum(sum(a*b*c for b in range(1, b+1)) for a in range(1, a+1)))\n\na, b, c = map(int, input().split())\nprint(sum(sum(a*b*c for b in range(1, b+1)) for a in range(1, a+1)))\n\na, b, c = map(int, input().split())\nn = a*b*c\nres = 1\nfor i in range(1, a+1):\n    for j in range(1, b+1):\n        for k in range(1, c+1):\n            res = res + n // (i*j*k)\n            res %= 10**9 + 7\nprint(res)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    res = 1\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                res += d(i*j*k)\n    print(res)\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = dict()\n    for i in range(a):\n        for j in range(b):\n            for k in range(c):\n                key = i * j * k\n                if key not in d:\n                    d[key] = 0\n                d[key] += 1\n\n    res = 0\n    for key in d:\n        res += d[key]\n    return res % (10 ** 9 + 7)\n\nsolution(\"2 2 2\") == 20\n\"\"\"\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    \n    def d(n):\n        return 2 * n * (n + 1)\n    \n    return sum([sum(d(x) for x in range(1, a + 1)) for y in range(1, b + 1) for z in range(1, c + 1)]) % (10**9 + 7)\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\u20193 2 2\u2019)\n    20\n    \"\"\"\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    print(sum(sum(d(i*j*k) for j in range(1, b+1)) for i in range(1, a+1) for k in range(1, c+1)))\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c = [int(n) for n in stdin.split()]\n    result = 0\n    for i in range(a, a+1):\n        for j in range(b, b+1):\n            for k in range(c, c+1):\n                result += gcd(i, j, k)\n    return result % (10**9+7)\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(n) for n in stdin.split())\n\n    def d(n):\n        count = 1\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n    \n    res = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                res += d(i * j * k)\n    return res % (10**9 + 7)"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bessie_puzzle, elsie_puzzle = stdin.split(\"\\n\\n\")\n    bessie_puzzle = [[c for c in line] for line in bessie_puzzle.split(\"\\n\")[1:]]\n    elsie_puzzle = [[c for c in line] for line in elsie_puzzle.split(\"\\n\")[1:]]\n    \n    return \"YES\" if bessie_puzzle == elsie_puzzle else \"NO\"\n\n\"\"\""
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/5a0888f78b2dc9d0ec000eae\n    \"\"\"\n    bessie = [i for i in stdin.split('\\n')[0]]\n    elsie = [i for i in stdin.split('\\n')[1]]\n    b = [bessie.index('A'), bessie.index('B')]\n    e = [elsie.index('A'), elsie.index('B')]\n    if (b == e):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Bessie and Elsie must be BFFLs if the puzzle is solvable.\n    A puzzle is solvable if there are no overlapping tiles in any of the possible positions\"\"\"\n\n    from itertools import product\n\n    def is_same(puzzle_a, puzzle_b):\n        \"\"\"Return true if puzzles A and B are in the same configuration,\n        otherwise false.\"\"\"\n        for index, row in enumerate(puzzle_a):\n            for tile in row:\n                if tile in puzzle_b[index]:\n                    return False\n        return True\n\n    # input: puzzle A as a string\n    puzzle_a = stdin.split(\"\\n\")[0]\n    puzzle_a = [tile for tile in puzzle_a]\n    puzzle_b = stdin.split(\"\\n\")[1]\n    puzzle_b = [tile for tile in puzzle_b]\n    # array for all possible tiles on puzzle A\n    possible_tiles_a = [tile for tile in product(\n        \"ABC\", \"ABC\") if tile not in (puzzle_a, \"X\")]\n    # array for all possible tiles on puzzle B\n    possible_tiles_b = [tile for tile in product(\n        \"ABC\", \"ABC\") if tile not in (puzzle_b, \"X\")]\n    # try each of the possible tiles\n    for tile in possible_tiles_a:\n        puzzle_a[0] = tile[0]\n        puzzle_a[1] = tile[1]\n        puzzle_b[0] = tile[0]\n        puzzle_b[1] = tile[1]\n        # if the puzzle is not the same, it is not solvable\n        if not is_same(puzzle_a, puzzle_b):\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.splitlines()\n    return 'YES' if a.replace('X', 'A') == b.replace('X', 'A') == c.replace('X', 'A') or a.replace('X', 'B') == b.replace('X', 'B') == c.replace('X', 'B') or a.replace('X', 'C') == b.replace('X', 'C') == c.replace('X', 'C') or a.replace('X', 'A') == b.replace('X', 'B') == c.replace('X', 'C') or a.replace('X', 'C') == b.replace('X', 'A') == c.replace('X', 'B') else 'NO'\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b, e = [], []\n    for i, row in enumerate(stdin.split(\"\\n\")):\n        if i < 2:\n            b.append([c for c in row if c!= \"X\"])\n        else:\n            e.append([c for c in row if c!= \"X\"])\n    \n    if (b[0][0] == e[0][0] and b[0][1] == e[0][1]) or (b[0][0] == e[1][0] and b[0][1] == e[1][1]):\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p1 = list(stdin[:2])\n    p2 = list(stdin[2:])\n\n    if p1 == p2:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the puzzles can reach the same configuration. Otherwise, return 'NO'.\"\"\"\n    bessie = stdin.splitlines()\n    elsie = stdin.splitlines()\n    return 'YES' if bessie == elsie else 'NO'\n    # write your code in Python 3.6\n\n\nprint(solution(\"AB\\nXC\\nXB\\nAC\\n\"))\nprint(solution(\"AB\\nXC\\nAC\\nBX\\n\"))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if the puzzle can be reached, 'NO' otherwise\"\"\"\n    #... your code\n    return 'YES' if... else 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    Bessie = [chr(i) for i in stdin.split('\\n')[0]]\n    Elsie = [chr(i) for i in stdin.split('\\n')[1]]\n    \n    for i in Bessie:\n        if i in Elsie:\n            if i == Bessie[0]:\n                Bessie.remove(i)\n                Bessie.insert(0, i)\n            else:\n                Bessie.remove(i)\n                Bessie.append(i)\n            for i in range(len(Bessie)):\n                if Bessie[i] in Elsie and Bessie[i]!= Bessie[0]:\n                    Bessie.remove(Bessie[i])\n                    Bessie.insert(0, Bessie[i])\n                    break\n        else:\n            return \"NO\"\n    for i in Elsie:\n        if i in Bessie:\n            if i == Elsie[0]:\n                Elsie.remove(i)\n                Elsie.insert(0, i)\n            else:\n                Elsie.remove(i)\n                Elsie.append(i)\n            for i in range(len(Elsie)):\n                if Elsie[i] in Bessie and Elsie[i]!= Elsie[0]:\n                    Elsie.remove(Elsie[i])\n                    Elsie.insert(0, Elsie[i])\n                    break\n        else:\n            return \"NO\"\n    if Bessie[0] == Elsie[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_slide(src, dest):\n        if src == dest: return True\n        if abs(src[0] - dest[0])!= 1 and abs(src[1] - dest[1])!= 1:\n            return False\n        return True\n\n    src = stdin.split(\"\\n\")[0].split(\" \")\n    dst = stdin.split(\"\\n\")[1].split(\" \")\n    src.remove(\"X\")\n    dst.remove(\"X\")\n    src.sort()\n    dst.sort()\n    for s in src:\n        if can_slide(s, dst[0]):\n            dst.pop(0)\n        else:\n            return \"NO\"\n    return \"YES\"\n\n\"\"\""
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = stdin[0]\n    k = stdin[1]\n\n    import string\n\n    num = int(k, int(n))\n    result = \"\"\n    while num > 0:\n        reminder = num % n\n        if reminder < 10:\n            result += str(reminder)\n        else:\n            result += string.ascii_lowercase[reminder-10]\n        num //= n\n    return result[::-1]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def to_base(num, b):\n        # TODO\n        pass\n\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    print(to_base(k, n))\n\nsolution(stdin)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(i for i in stdin if i.isdigit())\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    decimal, base = stdin.split(\"\\n\")\n    base, decimal = int(base), int(decimal)\n    res = ''\n    while decimal > 0:\n        res = str(decimal % base) + res\n        decimal //= base\n    return res\n\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    base = int(stdin)\n    result = 0\n    while result < base:\n        result = result * 16 + base % 16\n        base //= 16\n    return str(result)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    for i in range(1, 60):\n        x = k % (n ** i)\n        res += x * (n ** i)\n        k //= n ** i\n    return str(res)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def dec_to_base(n: int, base: int) -> str:\n        result = \"\"\n        while n > 0:\n            remainder = n % base\n            n //= base\n            result = str(remainder) + result\n        return result\n\n    n = int(stdin)\n    k = int(stdin[0])\n    print(k)\n    k = int(k, 10)\n    print(k)\n    for i in range(1, n):\n        # print(i)\n        k += i\n        k = dec_to_base(k, n)\n        print(k)\n        if len(k) > 60:\n            print(\"Wrong\")\n            return\n    print(\"Right\")\n    print(k)\n    return k\n\n\nprint(solution(\"13\"))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split('\\n')\n    k = int(k)\n    n = int(stdin)\n    d = 0\n    while n:\n        d += n % n\n        n //= n\n    while d >= n:\n        d %= n\n    return d\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the minimum decimal number so that by converting it to the system with the base n it will get the number k.\n    >>> solution(\"13\\n12\")\n    12\n    >>> solution(\"16\\n11311\")\n    475\n    >>> solution(\"20\\n999\")\n    3789\n    >>> solution(\"17\\n2016\")\n    594\n    '''\n    _, k = stdin.split('\\n')\n    n, num = 1, 0\n    for i in k:\n        num += int(i) * n\n        n *= len(k)\n    return num\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    is_unimodal = True\n    for i in range(n):\n        if i > 0 and a[i] < a[i-1]:\n            is_unimodal = False\n            break\n        if i < n-1 and a[i] > a[i+1]:\n            is_unimodal = False\n            break\n    return 'YES' if is_unimodal else 'NO'\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    arr = stdin.split('\\n')[1].split(' ')\n    if len(arr) == 1:\n        return 'YES'\n    elif len(arr) == 2:\n        if int(arr[0]) < int(arr[1]):\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        i = 0\n        while i < len(arr) - 2 and arr[i] < arr[i + 1]:\n            i += 1\n        if arr[i] == arr[i + 1]:\n            i += 1\n        else:\n            i += 2\n        while i < len(arr) - 1 and arr[i] > arr[i + 1]:\n            i += 1\n        if i == len(arr) - 1:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    nums = [int(s) for s in stdin.readline().split()]\n    inc = dec = None\n    for i in range(1, n):\n        if nums[i] > nums[i-1]:\n            if inc is not None:\n                if inc is not True:\n                    stdout.write('NO')\n                    return\n            inc = True\n        elif inc is True and nums[i] < nums[i-1]:\n            if dec is not None:\n                if dec is not False:\n                    stdout.write('NO')\n                    return\n            dec = False\n        elif nums[i] < nums[i-1]:\n            if dec is not None:\n                if dec is not True:\n                    stdout.write('NO')\n                    return\n            dec = True\n        else:\n            inc = dec = None\n    if inc is not None:\n        if inc is not True:\n            stdout.write('NO')\n            return\n    elif dec is not None:\n        if dec is not False:\n            stdout.write('NO')\n            return\n    stdout.write('YES')\n    return\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if unimodal(list(map(int, stdin.split('\\n')[1:]))) else 'NO'\n\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    is_increasing = True\n    is_constant = True\n    is_decreasing = True\n    \n    for i in range(n):\n        if i + 1 < n:\n            if is_increasing:\n                if a[i] >= a[i + 1]:\n                    is_increasing = False\n            if is_decreasing:\n                if a[i] <= a[i + 1]:\n                    is_decreasing = False\n        if i + 1 < n:\n            if is_increasing:\n                if a[i] <= a[i + 1]:\n                    is_constant = False\n            if is_decreasing:\n                if a[i] >= a[i + 1]:\n                    is_constant = False\n        if is_increasing and is_constant:\n            return 'NO'\n        if is_decreasing and is_constant:\n            return 'NO'\n    \n    return 'YES'\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = [int(x) for x in stdin.split('\\n')[1:-1]]\n    t = []\n    for i in range(1,len(stdin)):\n        if stdin[i] == stdin[i-1]:\n            t.append(stdin[i])\n        elif stdin[i] > stdin[i-1] and stdin[i+1] < stdin[i]:\n            t.append(stdin[i])\n        elif stdin[i] < stdin[i-1] and stdin[i+1] > stdin[i]:\n            t.append(stdin[i])\n        elif stdin[i] > stdin[i-1] and stdin[i] < stdin[i+1]:\n            t.append(stdin[i])\n        elif stdin[i] < stdin[i-1] and stdin[i] > stdin[i+1]:\n            t.append(stdin[i])\n        elif stdin[i] < stdin[i-1] and stdin[i] > stdin[i+1]:\n            t.append(stdin[i])\n    if len(t) == 0:\n        return \"YES\"\n    return \"NO\"\n\nprint(solution(\"\"\"6\n1 5 5 5 4 2\"\"\"), \"YES\")\n\nprint(solution(\"\"\"5\n10 20 30 20 10\"\"\"), \"YES\")\n\nprint(solution(\"\"\"4\n1 2 1 2\"\"\"), \"NO\")\n\nprint(solution(\"\"\"7\n3 3 3 3 3 3 3\"\"\"), \"YES\")\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/training6YXGQS-E4G/\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('7\\n3 3 3 3 3 3 3')\n    'YES'\n    >>> solution('1\\n1 2 1 2 1')\n    'NO'\n    \"\"\"\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    if len(a) < 2:\n        return 'NO'\n    first = a[0]\n    count = 0\n    for i in range(1, len(a)):\n        if a[i] == first:\n            count += 1\n        else:\n            break\n    if count == len(a) - 1 and a[-1] < first:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    pass"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    b = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            a[i - 1] = i / 2\n        else:\n            a[i - 1] = i - 1\n        b.append(a[i - 1])\n    c = []\n    for i in range(1, n + 1):\n        c.append(i)\n    b = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            c[i - 1] = i / 2\n        else:\n            c[i - 1] = i - 1\n        b.append(c[i - 1])\n    count = 0\n    for i in range(0, n + 1):\n        if b.count(b[i]) >= k:\n            count += 1\n    if count >= k:\n        return b[-1]\n    else:\n        return b[n]\n\nprint(solution(input()))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    return str(max([i for i in range(1, n+1) if all([i in [i for i in map(lambda x: str(x), map(lambda x: int(x) if x.isdigit() else int(x[0])*2 if x[0] == '-' else 1, j))] for j in [i.split() for i in (i+''for i in f'{i+1} {n}').split()][:-1]]) if len(j) >= k]))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    paths = {i: set() for i in range(1, n + 1)}\n    for i in range(k):\n        paths[n - i] = {n - i}\n        for path in paths.values():\n            path.update(paths[i])\n            if i + 1 in path:\n                path.update(paths[i + 1])\n    return max(map(lambda x: len(x), paths.values()))"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    path = [1] * n\n    path[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if (j + 1) % 2 == 0:\n                path[i] = min(path[i], path[j] * 2)\n            else:\n                path[i] = min(path[i], (j + 1) * 2 - 1)\n    print(max(path))\n    return ''\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(input_parse(stdin)))\n\n\ndef"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(max([i for i in range(1, n + 1) if n / i <= k]))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    dp = [[] for _ in range(n)]\n    dp[0].append(1)\n    for i in range(1, n):\n        if i % 2 == 0:\n            dp[i].append(i // 2)\n        else:\n            dp[i].append(i - 1)\n    for i in range(1, n):\n        for j in range(n):\n            if j in dp[i]:\n                continue\n            dp[i].append(j)\n    dp[0] = [0]\n    for i in range(1, n):\n        for j in range(n):\n            dp[i].append(dp[i - 1][j])\n    for i in range(n):\n        dp[i] = [n - i for i in dp[i]]\n    dp.sort(key=lambda x: len(x))\n    return str(dp[k - 1][0])\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, x, y, vx, vy] = map(int, stdin.split())\n    t = 0\n    if vy > 0:\n        while y < m:\n            y += vy\n            x += vx\n            t += 1\n            if x >= n:\n                x = x - n\n            if y >= m:\n                return str(-1)\n    elif vy < 0:\n        while y >= 0:\n            y += vy\n            x += vx\n            t += 1\n            if x >= n:\n                x = x - n\n            if y < 0:\n                return str(-1)\n    else:\n        if vx!= 0:\n            if vx > 0:\n                while x < n:\n                    x += vx\n                    t += 1\n                    if x >= n:\n                        x = x - n\n                    if y >= m:\n                        return str(-1)\n            elif vx < 0:\n                while x >= 0:\n                    x += vx\n                    t += 1\n                    if x >= n:\n                        x = x - n\n                    if y >= m:\n                        return str(-1)\n            else:\n                return str(-1)\n        else:\n            return str(-1)\n    if x == 0:\n        return str(0)\n    else:\n        return str(t)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = map(int, stdin.split())\n    x = x + vx\n    y = y + vy\n    while True:\n        if x > n:\n            if y > m:\n                x = x - vx\n                y = y - vy\n            elif y < 0:\n                x = x - vx\n                y = y + vy\n            else:\n                return str(x - vx) +'' + str(y - vy)\n        elif x < 0:\n            if y > m:\n                x = x + vx\n                y = y - vy\n            elif y < 0:\n                x = x + vx\n                y = y + vy\n            else:\n                return str(-1)\n        else:\n            if y > m:\n                return str(x - vx) +'' + str(y - vy)\n            else:\n                return str(-1)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = [int(i) for i in stdin.split()]\n    return \"0 0\" if abs(v_x) == 1 and abs(v_y) == 1 else \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the exercise.\"\"\"\n    n, m, x, y, vx, vy = [int(num) for num in stdin.split()]\n    return '-1' if y == 0 or vy == 0 else (n - x - 1, m - y - 1)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = map(int, stdin.split())\n    if n == m:\n        return '0 0'\n    # x, y: ball position\n    # vx, vy: ball speed\n    # x, y: position of the table\n    # n, m: size of the table\n    if vx == 0 and vy == 0:\n        return '-1'\n    if vx == 0:\n        x += 1\n        while x < n and y < m:\n            x += 1\n            y += 1\n        if x >= n or y >= m:\n            return '-1'\n    elif vy == 0:\n        y += 1\n        while x < n and y < m:\n            x += 1\n            y += 1\n        if x >= n or y >= m:\n            return '-1'\n    else:\n        k = (vx**2 + vy**2) ** 0.5\n        x += vx / k\n        y += vy / k\n        while x < n and y < m:\n            x += vx / k\n            y += vy / k\n        if x >= n or y >= m:\n            return '-1'\n\n    if x == 0 and y == 0:\n        return '0 0'\n    if x >= n or y >= m:\n        return '-1'\n    # print(x, y)\n    return f'{x - 1} {y - 1}'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string of 6 space-separated integers n, m, x, y, v_x, v_y as input,\n    where n, m, x, y, v_x, v_y are positive integers.\n\n    Returns the coordinates of the pocket the ball will fall into, or -1 if the ball will move indefinitely.\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: str\n    :return: str\n    '''\n   ..."
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    [a, b] = [int(i) for i in stdin.split(\" \")]\n    [a2, b2, a3, b3] = [int(i) for i in stdin.split(\" \")]\n    if b2 < a or b3 < a or a2 < b or a3 < b:\n        return \"NO\"\n    return \"YES\"\n\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    a1, b1 = [int(i) for i in stdin.split()]\n    a2, b2 = [int(i) for i in stdin.split()]\n    a3, b3 = [int(i) for i in stdin.split()]\n    if a1 >= b1:\n        print(\"NO\")\n    if a2 >= b2:\n        print(\"NO\")\n    if a3 >= b3:\n        print(\"NO\")\n    if a1 <= 0 or b1 <= 0:\n        print(\"NO\")\n    if a2 <= 0 or b2 <= 0:\n        print(\"NO\")\n    if a3 <= 0 or b3 <= 0:\n        print(\"NO\")\n    if (a1 > b1) and (a2 > b2) and (a3 > b3):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\na_1, b_1 = input().split(' ')\na_1 = int(a_1)\nb_1 = int(b_1)\n\na_2, b_2 = input().split(' ')\na_2 = int(a_2)\nb_2 = int(b_2)\n\na_3, b_3 = input().split(' ')\na_3 = int(a_3)\nb_3 = int(b_3)"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    A1, A2, A3 = [int(x) for x in stdin.split()]\n    B1, B2, B3 = [int(x) for x in stdin.split()]\n    if A1 <= B1 and A2 <= B2 and A3 <= B3:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Write your code here\n    \n    a, b = map(int, stdin.split())\n    a1, b1 = map(int, stdin.split()[1:])\n    a2, b2 = map(int, stdin.split()[2:])\n    a3, b3 = map(int, stdin.split()[3:])\n    if b < a:\n        if a1 == a2 == a3:\n            if a1 <= b:\n                return 'YES'\n            else:\n                return 'NO'\n        if b1 == b2 == b3:\n            if b1 <= a:\n                return 'YES'\n            else:\n                return 'NO'\n        return 'NO'\n    if b1 >= a1 and b2 >= a2 and b3 >= a3:\n        return 'YES'\n    return 'NO'\n\n\n-----Explanation-----\n\n\nThe first line contains two numbers a_1 and b_1 \u2014 the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 \u2014 the sides of the paintings. The paintings are considered to be in their original order \u2014 a_1 \u00d7 b_1, a_2 \u00d7 b_2 and a_3 \u00d7 b_3. So, we can simply compare a_1 and b_1, a_2 and b_2, a_3 and b_3, and if we can return 'YES' if any of the values is equal to the length of the board, or 'NO' otherwise.\n\n[Image]\n\nIf a_1 == a_2 == a_3, then we can place all three paintings on the first row of the board, with a_1 = b_1.\n\nIf b_1 == b_2 == b_3, then we can place all three paintings on the second row of the board, with b_1 = a_1.\n\nIf a_1 == b_1, then we can place one picture on the first row of the board, and the second one on the second row of the board, with a_1 = b_1.\n\nIf b_1 == a_1, then we can place one picture on the second row of the board, and the third one on the first row of the board, with b_1 = a_1.\n\nIf a_1 < a_2 < a_3 and b_1 < b_2 < b_3, then we can place all three pictures on the first row of the board, with a_1 = b_1.\n\nIf a_2 < a_1 < a_3 and b_2 < b_1 < b_3, then we can place all three pictures on the second row of the board, with b_2 = a_2.\n\nIf a_3 < a_1 < a_2 and b_3 < b_1 < b_2, then we can place all three pictures on the first row of the board, with a_3 = b_3.\n\nIf a_1 < b_1 < a_2 and b_1 < a_1 < b_2, then we can place one picture on the first row of the board, and the second one on the second row of the board, with a_1 = b_1.\n\nIf a_1 < b_1 < a_2 and b_1 < b_1 < a_2, then we can place one picture on the second row of the board, and the third one on the first row of the board, with b_1 = a_1.\n\nIf a_1 < a_2 < a_3 and b_1 < b_2 < b_3, then we can place all three pictures on the second row of the board, with b_2 = a_2.\n\nIf a_2 < a_1 < a_3 and b_2 < b_1 < b_3, then we can place all three pictures on the first row of the board, with a_2 = b_2.\n\nIf a_3 < a_1 < a_2 and b_3 < b_1 < b_2, then we can place all three pictures on the second row of the board, with a_3 = b_3.\n\nIf a_1 < b_1 < a_2 and b_1 < b_1 < b_2, then we can place one picture on the first row of the board, and the second one on the second row of the board, with a_1 = b_1.\n\nIf a_1 < b_1 < a_2 and b_1 < b_1 < b_2, then we can place one picture on the second row of the board, and the third one on the first row of the board, with b_1 = a_1.\n\nIf a_1 < a_2 < a_3 and b_1 < b_2 < b_3, then we can place all three pictures on the second row of the board, with a_2 = b_2.\n\nIf a_2 < a_1 < a_3 and b_2 < b_1 < b_3, then we can place all three pictures on the first row of the board, with a_2 = b_2.\n\nIf a_3 < a_1 < a_2 and b_3 < b_1 < b_2, then we can place all three pictures on the second row of the board, with a_3 = b_3.\n\nIf a_1 < b_1 < a_2 and b_1 < b_1 < b_2, then we can place one picture on the first row of the board, and the second one on the second row of the board, with a_1 = b_1.\n\nIf a_1 < b_1 < a_2 and b_1 < b_1 < b_2, then we can place one picture on the second row of the board, and the third one on the first row of the board, with b_1 = a_1.\n\nIf a_1 < a_2 < a_3 and b_1 < b_2 < b_3, then we can place all three pictures on the second row of the board, with a_2 = b_2.\n\nIf a_2 < a_1 < a_3 and b_2 < b_1 < b_3, then we can place all three pictures on the first row of the board, with a_2 = b_2.\n\nIf a_3 < a_1 < a_2 and b_3 < b_1 < b_2, then we can place all three pictures on the second row of the board, with a_3 = b_3.\n\nIf a_1 < b_1 < a_2 and b_1 < b_1 < b_2, then we can place one picture on the first row of the board, and the second one on the second row of the board, with a_1 = b_1.\n\nIf a_1 < b_1 < a_2 and b_1 < b_1 < b_2, then we can place one picture on the second row of the board, and the third one on the first row of the board,"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (\n            2 * int(stdin.split()[0])\n            >= int(stdin.split()[1]) * int(stdin.split()[2])\n            and int(stdin.split()[0]) * int(stdin.split()[2])\n            >= int(stdin.split()[1]) * int(stdin.split()[2])\n            and int(stdin.split()[0]) * int(stdin.split()[1])\n            >= int(stdin.split()[0]) * int(stdin.split()[2])\n        ) else 'NO'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, q, l, m = [int(s) for s in stdin.split('\\n')[0].split()]\n    bad_numbers = set([int(s) for s in stdin.split('\\n')[1].split()])\n    print(l)\n    print(bad_numbers)\n    print(b,q)\n    return b"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split()]\n    b_1, q, l, m = x[0], x[1], x[2], x[3]\n    n = 0\n    good = [i for i in range(b_1, l + 1)]\n    bad = [i for i in x[4].split() if int(i) > l]\n    good = good + bad\n    print(good)\n    for i in range(m):\n        n += good.count(x[i + 4])\n    return n if n!= 0 else \"inf\"\n\n\ndef"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    bad = set(map(int, stdin.split()[1:]))\n    s = 0\n    i = 1\n    while i * q <= l:\n        s += int((i * q - b_1) / q)\n        if (i * q - b_1) % q in bad:\n            i += 1\n            continue\n        i += 1\n    return str(s)\n\"\"\"\n\ndef"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(a, b, c):\n        return a > 0 and a % b == 0 and abs(a) <= c\n\n    a, b, c, m = [int(x) for x in stdin.split(' ')]\n    good = [i for i in range(c, 10 ** 8) if is_good(a, b, i)]\n    bad = [int(x) for x in stdin.split(' ')][m:]\n    good_set = set(good)\n    for num in bad:\n        if num in good_set:\n            good_set.remove(num)\n\n    res = 0\n    while len(good_set) > 0:\n        res += 1\n        if res >= c:\n            return 'inf'\n        next_num = min(good_set)\n        good_set.remove(next_num)\n        good_set.add(next_num - b)\n\n    return str(res)\n\nsolution(\"123 1 2143435 4\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = [int(i) for i in stdin.split()]\n    bad_nums = [int(i) for i in stdin.split()[1:]]\n    l_minus_bad = [x for x in range(1, l + 1) if x not in bad_nums]\n    num_terms = len([x for x in range(b_1, b_1 + m) if x not in bad_nums])\n    return str(min(len(l_minus_bad), num_terms))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b, q, l, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    bad = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    print(l, b, q)\n    print(bad)\n\nsolution(\"3 2 30 4\\n6 14 25 48\")"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    b_1, q, l, m = [int(i) for i in stdin.split()]\n    bad = set(map(abs, [int(i) for i in stdin.split()[1:]]))\n    res = 0\n    while True:\n        if res < l:\n            res += q\n        else:\n            return \"inf\" if any(map(lambda x: abs(x) > l, bad)) else res\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.strip()\narr = stdin.split('\\n')\narr = [int(item) for item in arr[0].split(' ')]"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\na, b, l, m = stdin.strip().split(' ')"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the size of the frame that best paints the complete region.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    screen = []\n    for _ in range(n):\n        screen.append(list(stdin[:m]))\n        stdin = stdin[m:]\n    size = 1\n    while size <= n:\n        for y in range(n - size + 1):\n            for x in range(m - size + 1):\n                if screen[y][x] == screen[y][x + size - 1] == screen[y + size - 1][x] == screen[y + size - 1][x + size - 1] == \"w\":\n                    return size\n        size += 1\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    width, height = map(int, stdin.split())\n    if width == 1 and height == 1:\n        print(0)\n        return\n    n = width // 2\n    m = height // 2\n    min_s = 10**9\n    min_d = -1\n    for i in range(1, n+1):\n        l = min(i, m)\n        for j in range(1, l+1):\n            s = 0\n            if j <= i:\n                s += (i-j) * 2\n            if j <= m:\n                s += (m-j) * 2\n            s += (n+m-2*i-j)\n            if s < min_s:\n                min_s = s\n                min_d = i\n    if min_d == -1:\n        print(-1)\n        return\n    print(min_s)\n    print('w' * (min_d+min_d) + '+' + 'w' * (width-min_d-min_d) + '+' + 'w' * (width-2*min_d-1))\n    print('w' * (min_d+min_d) + '+' + '.' * (width-2*min_d-1) + '+' + 'w' * (width-2*min_d-1))\n    print('w' * (min_d+min_d) + '+' + '.' * (width-2*min_d-1) + '+' + 'w' * (width-2*min_d-1))\n\n\ndef"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    board = []\n    for row in range(rows):\n        board.append(stdin.split()[row])\n    min_width = min_height = 9999\n    max_width = max_height = 0\n    for row in range(rows):\n        for col in range(cols):\n            if board[row][col] == \"w\":\n                min_width = min(min_width, col)\n                max_width = max(max_width, col)\n                min_height = min(min_height, row)\n                max_height = max(max_height, row)\n    best_size = max_height - min_height + 1\n    best_width = max_width - min_width + 1\n    best_height = max_height - min_height + 1\n    if best_size < best_height and best_size < best_width:\n        best_size = best_height = best_width = -1\n    if best_size >= 1:\n        for row in range(min_height, max_height + 1):\n            for col in range(min_width, max_width + 1):\n                if board[row][col] == \"w\":\n                    if col - min_width < 1 or row - min_height < 1:\n                        return -1\n                    board[row - 1][col - 1] = \"+\"\n                    if col + best_width - 1 < max_width or row + best_height - 1 < max_height:\n                        board[row + 1][col + 1] = \"+\"\n                    if col - best_width < min_width or row + best_height - 1 < max_height:\n                        board[row + 1][col - 1] = \"+\"\n                    if col - best_width < min_width or row - best_height + 1 < min_height:\n                        board[row - 1][col + 1] = \"+\"\n        return \"\".join([\"\".join(row) for row in board])\n    else:\n        return -1"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    matrix = []\n    for i in range(1, n + 1):\n        matrix.append([char for char in lines[i]])\n    def is_valid(matrix, n, m, r, c):\n        if r < n and c < m:\n            if matrix[r][c] == \"w\":\n                for i in range(r, n):\n                    if matrix[i][c] == \"w\":\n                        return False\n                for j in range(c, m):\n                    if matrix[r][j] == \"w\":\n                        return False\n                return True\n        return False\n    def get_pixels(matrix, n, m):\n        pixels = set()\n        for r in range(n):\n            for c in range(m):\n                if matrix[r][c] == \"w\":\n                    pixels.add((r, c))\n        return pixels\n    def bfs(matrix, n, m, target_pixels, target_size):\n        queue = [(matrix, n, m, 1, 1, target_pixels, target_size)]\n        while queue:\n            matrix, n, m, level, r, c, target_size = queue.pop(0)\n            if level > target_size:\n                return []\n            elif level == target_size:\n                if is_valid(matrix, n, m, r, c):\n                    return matrix\n                else:\n                    continue\n            for dr, dc in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n                nr = r + dr\n                nc = c + dc\n                if (nr, nc) not in target_pixels and is_valid(matrix, n, m, nr, nc):\n                    queue.append((\n                        matrix, n, m, level + 1, nr, nc, target_size))\n        return []\n    all_pixels = get_pixels(matrix, n, m)\n    min_size = min(n, m)\n    for size in range(1, min_size + 1):\n        pixels = bfs(matrix, n, m, all_pixels, size)\n        if pixels:\n            return pixels[0]\n    return \"0\""
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split('\\n')\n    if len(stdin) == 1:\n        x, y = map(int, stdin[0].split())\n        ans = []\n        for i in range(x):\n            for j in range(y):\n                ans.append('w' if j % 2 == 0 else '.')\n        return ''.join(ans)\n    ans = []\n    x, y = map(int, stdin[0].split())\n    for i in range(x):\n        for j in range(y):\n            ans.append('w' if j % 2 == 0 else '.')\n    return ''.join(ans)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('.w..w..')\n   ..w++w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('.w...w.')\n   .w...w.\n    >>> solution('w.w...w')\n   ...w..\n    >>> solution('...w..')\n   ....\n    >>> solution('.w....w')\n    w....\n    >>> solution('...w..')\n   ...w..\n    >>> solution('.w....w')\n   .w....\n    >>> solution('......')\n   ......\n    >>> solution('.w....w')\n   .w....\n    >>> solution('....')\n   ....\n    >>> solution('.w....w')\n   .w....\n    >>> solution('.w...w.')\n   .w...w.\n    >>> solution('..w...')\n    w...\n    >>> solution('...w..')\n   ...w..\n    >>> solution('.w...w.')\n   .w...w.\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ...w..\n    >>> solution('...w..')\n   ..."
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    res = stdin\n    return res"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = 1\n    a = 0\n    k = 0\n    while a < n:\n        if a + d > n:\n            d -= 1\n            k += 1\n        else:\n            a += d\n        if a >= n:\n            break\n        a += d\n        d += 1\n        k += 1\n    s = [[\".\"] * m for _ in range(k)]\n    for i in range(k):\n        for j in range(m):\n            s[i][j] = stdin[i * m + j]\n    result = \"\"\n    for i in range(n):\n        for j in range(m):\n            if s[i][j]!= \".\":\n                result += \"w\"\n            else:\n                result += \".\"\n        result += \" \"\n    print(result.rstrip())\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    result = 'NO'\n    for x in range(n // a + 1):\n        y = n - x * a\n        if y % b == 0:\n            result = 'YES'\n            print(x, y // b)\n            break\n    if result == 'NO':\n        print(result)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    return str(n // a * b == n) + '\\n' + str(n // a) + '\\n' + str(n // b)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    if n == a * b:\n        return 'YES\\n0 0'\n    if n < a * b:\n        return 'YES\\n1 0'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    burles = int(stdin.readline().strip())\n    beer_cola = int(stdin.readline().strip())\n    bars = int(stdin.readline().strip())\n    return f'{beer_cola} {bars}' if burles >= beer_cola * beer_cola + bars * bars else 'NO'\n\n\ndef"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    if n > a * b:\n        return \"NO\"\n    if (n - b) % a == 0:\n        return \"YES\\n{} {}\".format((n - b) // a, b)\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cost_coke = int(stdin[0])\n    cost_bar = int(stdin[1])\n    total_cost = int(stdin[2])\n    coke_bar_count = total_cost // cost_coke\n    rest_coke = total_cost % cost_coke\n    rest_bar = total_cost % cost_bar\n    if rest_coke == 0:\n        return str(coke_bar_count) + \" \" + str(0)\n    if rest_bar == 0:\n        return str(coke_bar_count) + \" \" + str(coke_bar_count)\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(\"\\n\")]\n    if a*n + b*(n//a) < n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(n//a, n % a)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = list(map(int, stdin.split('\\n')[0].split(' ')))\n    if n % a == 0 and n % b == 0:\n        return \"NO\"\n    if n % a!= 0 and n % b == 0:\n        return \"YES\\n\" + str(n // a) + \" \" + str(0)\n    if n % a == 0 and n % b!= 0:\n        return \"YES\\n\" + str(0) + \" \" + str(n // b)\n    if n % a!= 0 and n % b!= 0:\n        return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n'))\n    if b > a * n:\n        return 'NO'\n    if a > n // b:\n        return 'NO'\n    return 'YES\\n%d %d' % (n // b, n % b)\n\n\n\nsolution(input())\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\"\"\"\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nprint(solution(input().strip()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\nimport re\n\ns = input()\n\nnums = {\n    '1': 'one',\n    '2': 'two',\n    '3': 'three',\n    '4': 'four',\n    '5': 'five',\n    '6':'six',\n    '7':'seven',\n    '8': 'eight',\n    '9': 'nine',\n    '0': 'zero'\n}\n\nfor i in s:\n    if i in nums:\n        print(nums[i])\n    else:\n        print('-'*(len(s) - s.count(i)))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"0\", \"-zero-\")\n\n\"\"\""
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n-----Test cases-----\nYour submission beats12.60% of python3 submissions\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '-'.join([str(i) for i in range(1, int(stdin) + 1)])\n    #  result = \"\"\n    #  for i in range(1, int(stdin) + 1):\n    #      result += str(i)\n    #  return result\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    current = 0\n    for i in range(n):\n        if nums[i] < nums[i + 1]:\n            if current == 0:\n                current = 1\n            else:\n                current += 1\n                ans = max(ans, current)\n        else:\n            current = 0\n    return str(ans)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    finds the maximum number of elements that can be erased.\n    \"\"\"\n    # parse input\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n\n    # search for the longest sequence of increasing numbers\n    longest = 0\n    for i in range(n):\n        if longest < n - i:\n            if a[i] < a[i+1] - 1:\n                longest = n - i - 1\n    return longest\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n    x = 0\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] == 1:\n            x += 1\n    return x\nprint(solution(input()))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 3 4 5 6 9\")\n    2\n    >>> solution(\"3\\n998 999 1000\")\n    2\n    >>> solution(\"5\\n1 2 3 4 5\")\n    4\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem from Codewars\n    '''\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    arr = [int(x) for x in lines[1].split()]\n    diff = []\n    for i in range(1, n):\n        diff.append(arr[i] - arr[i-1])\n    print(max(diff))\n    return\n\n\ndef"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    result = []\n    max_count = 0\n    count = 0\n    for i in range(n):\n        if i == 0:\n            result.append(arr[i])\n            count = 1\n        if arr[i] >= arr[i - 1]:\n            result.append(arr[i])\n            count += 1\n        else:\n            result.append(arr[i])\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of numbers, return the number of times you can erase to restore the array in order.\n    :param stdin:\n    :return:\n    \"\"\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 1 3 4 5 6 9\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 999 1000\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 2 3 4 5\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    if nums[0] < 1 or nums[0] > 1000:\n        return '0'\n    if nums[-1] > 1000:\n        return '0'\n    previous_num = nums[0]\n    count = 0\n    for num in nums:\n        if previous_num < num:\n            count += 1\n        previous_num = num\n    return str(count)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin)\n    a = [int(x) for x in stdin.split('\\n')[0].split()]\n    a.sort()\n    result = 0\n    for i in range(n):\n        if a[i] > a[i+1]:\n            result += 1\n    return str(result)\n    '''\n    return str(max([i for i in range(len(stdin.split('\\n')[0].split())) if int(stdin.split('\\n')[0].split()[i]) >= int(stdin.split('\\n')[0].split()[i+1])]))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    a = [int(i) for i in data[1].split(\" \")]\n    b = [a[i] < a[i+1] for i in range(len(a)-1)]\n    ans = 0\n    cur = 0\n    for i in b:\n        if not i:\n            ans += 1\n        else:\n            cur += 1\n            ans = max(ans, cur)\n            cur = 0\n    return ans\n\nprint(solution(\"4\\n1 2 3 4\\n\"))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds day when Polycarp will celebrate the equator\"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    schedules = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    return str(schedules.index(len(schedules) // 2) + 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems = list(map(int, stdin.readline().split()))\n\n    i = 0\n    for j in range(n):\n        if sum(problems[:j + 1]) >= len(problems) / 2:\n            i = j + 1\n            break\n    return str(i)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    equator = (sum(a) - 1) // 2\n    for day in range(n):\n        if sum(a[:day + 1]) >= equator:\n            print(day + 1)\n            break\n    else:\n        print(n)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import numpy as np\n    def rounder(num):\n        if num % 1 >= 0.5:\n            return math.ceil(num)\n        else:\n            return math.floor(num)\n\n    days = np.array(list(map(int, stdin.split('\\n')[0].split(' '))))\n    problems = np.array(list(map(int, stdin.split('\\n')[1].split(' '))))\n    problems = np.cumsum(problems)\n    equator = int(rounder((len(days) * 0.5) - (problems[-1] / 2)))\n    for i in range(len(days)):\n        if (equator - (problems[i] / 2)) < 0:\n            equator = problems[i] / 2\n            break\n    return str(equator)\n\n\n\n\"\"\""
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4, '1 3 2 1')\n    '2'\n\n    >>> solution(6, '2 2 2 2 2 2')\n    '3'\n\n    \"\"\"\n    n = int(stdin.split()[0])\n    problems = [int(s) for s in stdin.split()[1:]]\n\n    schedule = [0]\n    for p in problems:\n        schedule.append(schedule[-1] + p)\n\n    for i in range(1, n + 1):\n        schedule[i] = (schedule[i] + schedule[i - 1]) // 2\n\n    return str(bisect.bisect(schedule, n))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the day Polycarp will celebrate the equator.\n\n    >>> solution(\"4\\n1 3 2 1\")\n    2\n    >>> solution(\"6\\n2 2 2 2 2 2\")\n    3\n    \"\"\"\n    n = int(stdin.strip())\n    schedule = [int(x) for x in stdin.strip().split()]\n    start = 0\n    for i in range(1, n + 1):\n        if sum(schedule[start : i]) > i // 2:\n            start = i\n            break\n    return str(start)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split('\\n')\n    n = int(n)\n    a = list(map(int, a))\n    res = -1\n    for i in range(n):\n        if a[i] // 2 >= (i + 1) * 0.5:\n            res = i + 1\n            break\n    return str(res)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split(' ')]\n    max = 0\n    i = 0\n    while i < n:\n        summ = 0\n        for j in range(i, n):\n            summ += arr[j]\n            if summ >= max:\n                max = summ\n                res = j\n            if summ >= n // 2 + 1:\n                break\n        i += 1\n    return str(res + 1)\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n')[:2])\n    l = list(map(int, stdin.split('\\n')[2:]))\n    d = [0] * n\n    for i, cnt in enumerate(l):\n        d[i] = (sum(d) + cnt) // 2\n        d[i] = cnt - d[i]\n    print(d)\n    for i, cnt in enumerate(d):\n        if cnt!= 0:\n            return str(i + 1)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\ndef"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '4 1'\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of moves (the number of steps) to move the current piece to square $N^2$.\"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return''.join(map(str, result))"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if int(stdin, 2) % 64 == 0 else 'no'\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(stdin) % 2 == 0 and all(stdin[i] == '0' for i in range(0, len(stdin), 2)) else 'no'"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if stdin.replace(\"0\", \"\").count(\"1\") % 2 == 0 else \"no\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'yes' if it's possible to remove digits required way and 'no' otherwise.\"\"\"\n   ...\n\"\"\"\nimport re\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n-----Problem-----\n\n\u0420\u0435\u0448\u0438\u0442\u0435 \u0437\u0430\u0434\u0430\u0447\u0443 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 n, \u0437\u043d\u0430\u044f, \u0447\u0442\u043e n \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 2 \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 n % 2 == 0.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0435\u0435 10000.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00abyes\u00bb, \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c, \u0438 \u00abno\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\nSample Input 1:\n\n7\n\nSample Output 1:\n\nyes\nSample Input 2:\n\n2\n\nSample Output 2:\n\nno\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2 == 0\nn % 2"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\ndef"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for i in range(len(stdin)):\n        a = [stdin[i]]\n        for j in range(i + 1, len(stdin)):\n            if ord(stdin[j]) - ord(stdin[i]) > 0:\n                a.append(stdin[j])\n            else:\n                break\n        if len(a) == len(stdin):\n            ans.append(''.join(a))\n    if len(ans) > 0:\n        return min(ans)\n    return '-1'\n    # your solution here\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    c = stdin[::-1].find('z')\n    if c < 0:\n        c = n\n    return stdin[:n - c]\n\n\nsolution(stdin)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    eng_dict = \"abcdefghijklmnopqrstuvwxyz\"\n    max_value = 0\n    max_key = \"\"\n    for key in eng_dict:\n        if key in stdin:\n            max_value += 1\n            max_key = key\n    return str(max_key) * max_value\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for s in stdin:\n        if s == 'z':\n            res.append('a')\n        else:\n            res.append(chr(ord(s) + 1))\n    return ''.join(res)"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    length_input = len(stdin)\n    input_s = sorted(stdin)\n    input_s.sort()\n    print(input_s)\n    num = 0\n    string_abcdefghijklmnopqrstuvwxyz = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(length_input):\n        num = num + (ord(input_s[i]) - ord(input_s[0]))\n    if num == 0:\n        return string_abcdefghijklmnopqrstuvwxyz\n    return '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = list(stdin)\n    for i, v in enumerate(s):\n        if v in \"aeiouAEIOU\":\n            s[i] = \"z\"\n    print(\"\".join(s))\n    return \"\".join(s)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('thereisnoanswer')\n    'abcdefghijklmnopqrstuvwxyz'\n    \"\"\"\n    #\n    # res = [i for i in stdin if i not in \"qwertzuiopasdfghjklxcvbnm\"]\n    # print(''.join(res))\n    #\n    # def is_subseq(s, t):\n    #     t = iter(t)\n    #     return all(c in t for c in s)\n    #\n    # print(is_subseq('aacceggiikkmmooqqssuuwwyy', 'abcdefghijklmnopqrstuvwxyz'))\n    #\n    #\n    # def possible(s):\n    #     for i in range(len(s)):\n    #         if s[i] == \"q\":\n    #             s = s[:i] + s[i].replace(\"q\", \"w\") + s[i+1:]\n    #         elif s[i] == \"w\":\n    #             s = s[:i] + s[i].replace(\"w\", \"q\") + s[i + 1:]\n    #         elif s[i] == \"e\":\n    #             s = s[:i] + s[i].replace(\"e\", \"r\") + s[i + 1:]\n    #         elif s[i] == \"r\":\n    #             s = s[:i] + s[i].replace(\"r\", \"e\") + s[i + 1:]\n    #         elif s[i] == \"t\":\n    #             s = s[:i] + s[i].replace(\"t\", \"y\") + s[i + 1:]\n    #         elif s[i] == \"y\":\n    #             s = s[:i] + s[i].replace(\"y\", \"t\") + s[i + 1:]\n    #         elif s[i] == \"u\":\n    #             s = s[:i] + s[i].replace(\"u\", \"i\") + s[i + 1:]\n    #         elif s[i] == \"i\":\n    #             s = s[:i] + s[i].replace(\"i\", \"u\") + s[i + 1:]\n    #         elif s[i] == \"o\":\n    #             s = s[:i] + s[i].replace(\"o\", \"p\") + s[i + 1:]\n    #         elif s[i] == \"p\":\n    #             s = s[:i] + s[i].replace(\"p\", \"o\") + s[i + 1:]\n    #         elif s[i] == \"a\":\n    #             s = s[:i] + s[i].replace(\"a\", \"s\") + s[i + 1:]\n    #         elif s[i] == \"s\":\n    #             s = s[:i] + s[i].replace(\"s\", \"a\") + s[i + 1:]\n    #         elif s[i] == \"d\":\n    #             s = s[:i] + s[i].replace(\"d\", \"f\") + s[i + 1:]\n    #         elif s[i] == \"f\":\n    #             s = s[:i] + s[i].replace(\"f\", \"d\") + s[i + 1:]\n    #         elif s[i] == \"g\":\n    #             s = s[:i] + s[i].replace(\"g\", \"h\") + s[i + 1:]\n    #         elif s[i] == \"h\":\n    #             s = s[:i] + s[i].replace(\"h\", \"g\") + s[i + 1:]\n    #         elif s[i] == \"j\":\n    #             s = s[:i] + s[i].replace(\"j\", \"k\") + s[i + 1:]\n    #         elif s[i] == \"k\":\n    #             s = s[:i] + s[i].replace(\"k\", \"j\") + s[i + 1:]\n    #         elif s[i] == \"l\":\n    #             s = s[:i] + s[i].replace(\"l\", \"i\") + s[i + 1:]\n    #         elif s[i] == \"i\":\n    #             s = s[:i] + s[i].replace(\"i\", \"l\") + s[i + 1:]\n    #         elif s[i] == \"z\":\n    #             s = s[:i] + s[i].replace(\"z\", \"x\") + s[i + 1:]\n    #         elif s[i] == \"x\":\n    #             s = s[:i] + s[i].replace(\"x\", \"z\") + s[i + 1:]\n    #         elif s[i] == \"c\":\n    #             s = s[:i] + s[i].replace(\"c\", \"v\") + s[i + 1:]\n    #         elif s[i] == \"v\":\n    #             s = s[:i] + s[i].replace(\"v\", \"c\") + s[i + 1:]\n    #         elif s[i] == \"b\":\n    #             s = s[:i] + s[i].replace(\"b\", \"n\") + s[i + 1:]\n    #         elif s[i] == \"n\":\n    #             s = s[:i] + s[i].replace(\"n\", \"b\") + s[i + 1:]\n    #     return s\n    #\n    # print(possible('aacceggiikkmmooqqssuuwwyy'))\n    #\n    # def reverse(s):\n    #     ans = []\n    #     for i in range(len(s)):\n    #         ans.append(s[i])\n    #     return ans\n    #\n    # def possible2(s):\n    #     for i in range(len(s)):\n    #         if s[i] == \"q\":\n    #             s = s[:i] + s[i].replace(\"q\", \"w\") + s[i + 1:]\n    #         elif s[i] == \"w\":\n    #             s = s[:i] + s[i].replace(\"w\", \"q\") + s[i + 1:]\n    #         elif s[i] == \"e\":\n    #             s = s[:i] + s[i].replace(\"e\", \"r\") + s[i + 1:]\n    #         elif s[i] == \"r\":\n    #             s = s[:i] + s[i].replace(\"r\", \"e\") + s[i + 1:]\n    #         elif s[i] == \"t\":\n    #             s = s[:i] + s[i].replace(\"t\", \"y\") + s[i + 1:]\n    #         elif s[i] == \"y\":\n    #             s = s[:i] + s[i].replace(\"y\", \"t\") + s[i + 1:]\n    #         elif s[i] == \"u\":\n    #             s = s[:i] + s[i].replace(\"u\", \"i\") +"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [ord(i)-96 for i in stdin]\n    a.sort()\n    l = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    ans = ''.join([l[i] for i in a])\n    if ''.join([l[i] for i in range(26)]) in ans:\n        return ans\n    return '-1'"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"aacceeggiikkmmooqqssuuwwyy\")\n    abcdefghijklmnopqrstuvwxyz\n    >>> solution(\"thereisnoanswer\")\n    -1\n    >>> solution(\"\")\n    ''\n    '''\n    # input string\n    string = stdin\n    # output string\n    output = \"\"\n    # iterate over input string\n    for letter in string:\n        # append letter to output\n        output += letter\n        # check if letter is alphabetical\n        if letter.isalpha():\n            # check if letter is lowercase\n            if letter.islower():\n                # check if the output string is lowercase\n                if output.islower():\n                    # get alphabetical index of letter\n                    letter_idx = ord(letter) - ord(\"a\")\n                    # get alphabetical index of next letter\n                    next_letter_idx = ord(output[letter_idx]) - ord(\"a\")\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current letter\n                    output = output[:letter_idx] + output[letter_idx + 1] + output[letter_idx] + output[letter_idx + 1]\n                    # increment the index\n                    letter_idx += 1\n                    # assign next letter to current"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if 'a' not in stdin:\n        return '-1'\n    return ''.join(sorted(stdin, key=lambda x: stdin.index(x)))\n'''"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n-----Tips-----\n\nThe answer will be within 10^(-9) of the expected value.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #write your code in Python 3.6\n    \n    n, m, r, k = [int(i) for i in stdin.split()]\n    print(n, m, r, k)\n    \n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = [int(s) for s in stdin.split(' ')]\n    return str(min(n - r + 1, m - r + 1) * min(k, n * m // 2))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the maximum possible expected value of caught fishes.\"\"\"\n    n, m, r, k = map(int, stdin.split())\n    return str(max(n * m - k, 0))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(math.ceil(b/c * math.ceil(d/c)))\n\n\n\ndef"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = [int(x) for x in stdin.split()]\n    return str(max(0, int(min(n * m, k) * (2 * (r - 1) ** 2) / (n * m - k))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = [int(x) for x in stdin.split()]\n    return str(n * m - k)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # n, m, r, k = map(int, stdin.split())\n    return \"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def validate(x: int, y: int, r: int):\n        \"\"\"\n        Validates whether the given parameters are in range and the cell is not occupied.\n        \"\"\"\n        if 0 <= x < n and 0 <= y < m and not marked[x][y]:\n            return True\n\n        return False\n\n    def count(x: int, y: int):\n        \"\"\"\n        Returns the number of fishes inside the given cell.\n        \"\"\"\n        return sum(1 for i in range(x, x + r) for j in range(y, y + r) if marked[i][j])\n\n    def update(x: int, y: int):\n        \"\"\"\n        Updates the marks of the given cell.\n        \"\"\"\n        for i in range(x, x + r):\n            for j in range(y, y + r):\n                marked[i][j] = True\n\n    def is_valid(x: int, y: int, r: int) -> bool:\n        \"\"\"\n        Checks whether the given parameters are valid.\n        \"\"\"\n        return 0 <= x + r <= n and 0 <= y + r <= m and x + r <= n and y + r <= m\n\n    def fill_valid_cells(x: int, y: int, r: int):\n        \"\"\"\n        Fills the valid cells with the fishes.\n        \"\"\"\n        for i in range(r):\n            for j in range(r):\n                if is_valid(x + i, y + j, 1):\n                    update(x + i, y + j)\n                    solution.counts[count(x + i, y + j)] += 1\n\n    def calculate():\n        \"\"\"\n        Calculates the expected number of caught fishes.\n        \"\"\"\n        c = 0\n        for fish, count in solution.counts.items():\n            c += fish * count\n\n        return c\n\n    def try_solution():\n        \"\"\"\n        Tries the new solution.\n        \"\"\"\n        for i in range(n - r + 1):\n            for j in range(m - r + 1):\n                marked[i][j] = False\n                fill_valid_cells(i, j, r)\n                if calculate() > expected:\n                    expected = calculate()\n                    update(i, j)\n\n    n, m, r, k = map(int, stdin.split())\n    solution.counts = [0] * (k + 1)\n    expected = 0\n    marked = [[False] * m for _ in range(n)]\n\n    try_solution()\n\n    return expected\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 2 2 2\\n\")\n    '-3 -3 -3 -3'\n    \"\"\"\n\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    nums = [0] * (2 * n + 1)\n\n    for x in arr:\n        nums[x + n] += 1\n\n    i = n\n    j = n\n\n    while i > 0:\n        j = max(j, i + n)\n        if nums[i] == 0:\n            nums[i + n] = 0\n        nums[i] -= 1\n        i -= 1\n    while j < 2 * n:\n        nums[j] = 0\n        j += 1\n    nums[j] = 1\n\n    i = n\n    j = n\n\n    while i > 0:\n        j = max(j, i + n)\n        if nums[i] == 0:\n            nums[i + n] = 0\n        nums[i] -= 1\n        i -= 1\n    while j < 2 * n:\n        nums[j] = 0\n        j += 1\n\n    max_prod = 1\n    min_prod = -2147483648\n\n    for i in range(2 * n):\n        if nums[i]!= 0:\n            if min_prod > nums[i]:\n                min_prod = nums[i]\n            if max_prod < nums[i]:\n                max_prod = nums[i]\n    for i in range(2 * n):\n        if nums[i]!= 0:\n            print(i - n, end=\" \")\n\n    print()\n    return \"\"\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(stdin.split()))\n\"\"\"\n\nn = int(input())\na = input().split()\nmax = 1\nfor i in range(n):\n    a[i] = int(a[i])\n    if a[i] == 0:\n        a[i] = 0\n    else:\n        max *= a[i]\nprint(max, end=\" \")\nfor i in range(n):\n    if a[i] == 0:\n        a[i] = -1\n    else:\n        a[i] = -1 * a[i]\n    if a[i] == 0:\n        a[i] = 0\n    else:\n        max *= a[i]\nprint(max)\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = [int(i) for i in stdin.split()]\n    sorted_array = sorted(array, reverse=True)\n    max_product = 1\n    for i in range(n):\n        if sorted_array[i] < 0:\n            break\n        max_product *= sorted_array[i]\n    for i in range(n):\n        if sorted_array[i] < 0:\n            continue\n        max_product //= sorted_array[i]\n    print(*sorted_array)\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_prod = 0\n    min_a = []\n    for index, elem in enumerate(a):\n        if elem < 0:\n            min_a.append(-elem)\n        if index == 0:\n            max_prod = elem\n        else:\n            if elem > max_prod:\n                max_prod = elem\n    if not min_a:\n        return \" \".join(str(elem) for elem in a)\n    negative_min = 0\n    negative_max = 0\n    for elem in min_a:\n        if elem < negative_min:\n            negative_min = elem\n        if elem > negative_max:\n            negative_max = elem\n    a.sort()\n    if len(a) == 1:\n        return str(a[0])\n    while negative_max < 0:\n        positive_index = 0\n        negative_index = 0\n        while negative_max < 0:\n            if a[negative_index] > 0:\n                positive_index = negative_index\n                break\n            negative_index += 1\n        if negative_index == 0:\n            return \" \".join(str(elem) for elem in a)\n        a[positive_index] += 1\n        a[negative_index] = -a[negative_index]\n        a[positive_index] = -a[positive_index]\n        a[negative_index] = -a[negative_index]\n        a[positive_index] = -a[positive_index]\n        positive_max = 0\n        negative_max = 0\n        for elem in a:\n            if elem > positive_max:\n                positive_max = elem\n            if elem < 0:\n                if abs(elem) > negative_max:\n                    negative_max = abs(elem)\n        if negative_max == 0:\n            return \" \".join(str(elem) for elem in a)\n    return \" \".join(str(elem) for elem in a)\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 2 2 2\\n\")\n    '0 -3 -3 -3 -3'\n    \"\"\"\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    ans = []\n\n    for i in range(n):\n        min_ind = 0\n        min_val = a[i]\n        for j in range(i, n):\n            if a[j] < min_val:\n                min_val = a[j]\n                min_ind = j\n        temp = min_ind\n        min_ind = i\n        for j in range(i, n):\n            if temp < j:\n                a[min_ind] = a[min_ind] * a[j]\n                temp = j\n            else:\n                a[min_ind] = a[min_ind] * a[temp]\n                temp = j\n        ans.append(a[i])\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # Your optional code here (an extra credit)\n    '''\n    return stdin"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    max_prod = 0\n    for i in range(n):\n        if arr[i] > 0:\n            prod = arr[i]\n            for j in range(i + 1, n):\n                prod *= arr[j]\n                max_prod = max(max_prod, prod)\n        else:\n            prod = arr[i]\n            for j in range(i + 1, n):\n                prod *= arr[j]\n                max_prod = max(max_prod, prod)\n\n    return''.join(map(str, arr)) if max_prod > 0 else '0'\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the array with the maximal possible product of elements\n    which can be received using only this operation in some order.\n\n    >>> solution(\"4\\n2 2 2 2\")\n    '-3 -3 -3 -3'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    # create a set of all numbers from 1 to n, excluding n\n    divisors = set(range(1, n))\n    \n    for i in range(1, n):\n        # if we subtract i from all numbers in divisors, \n        # we get a set of numbers which are divisible by i, \n        # which are not a multiple of n\n        divisors.difference_update(range(i*i, n, i))\n        if len(divisors) < k:\n            return str(-1)\n        if len(divisors) == k:\n            return str(i)\n        if len(divisors) > k:\n            # then the smallest divisor is the first number in divisors which is not a multiple of i\n            for num in divisors:\n                if num % i!= 0:\n                    return str(num)\n\ndef"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return str(i)\n    return '-1'\n\nprint(solution('4 2'))\n\nprint(solution('5 3'))\n\nprint(solution('12 5'))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"-1\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = list(map(int, stdin.split(\" \")))\n    divisor = 1\n    divisors = []\n    while n > 1:\n        if n % divisor == 0:\n            divisors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if len(divisors) < k:\n        return -1\n    else:\n        return divisors[k - 1]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return i\n    return -1\n\n\ndef"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    if n < k:\n        return \"-1\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n        if count == k:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    factors = {}\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors[i] = 0\n\n    for key, value in factors.items():\n        for j in range(1, int(key ** 0.5) + 1):\n            if key % j == 0:\n                if key // j!= j:\n                    factors[key // j] += value + 1\n                factors[j] += value + 1\n                factors[key // j] += value + 1\n    ans = sorted(factors.items(), key=lambda x: x[1])\n    if k > len(ans):\n        print('-1')\n    else:\n        print(ans[k - 1][0])\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def generate_divisors(n: int):\n        divisors = []\n        i = 1\n        while i * i <= n:\n            if n % i == 0:\n                divisors.append(i)\n                if i * i!= n:\n                    divisors.append(n // i)\n            i += 1\n        return divisors\n\n    def get_divisor(n: int):\n        divisors = generate_divisors(n)\n        for i, divisor in enumerate(divisors):\n            if n % divisor == 0:\n                return divisors[i]\n        return -1\n\n    n, k = list(map(int, stdin.split()))\n    return str(get_divisor(n))\n\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    nums = [list(map(int, stdin.readline().split())) for _ in range(N)]\n\n    # print(N)\n    # print(nums)\n\n    nums = sorted(nums, key=lambda x: x[0])\n    # print(nums)\n\n    l = [0] * 10\n    for i, n in enumerate(nums):\n        # print(n)\n        l[n[0]] = i + 1\n\n    # print(l)\n\n    # for i in l:\n    #     print(i)\n\n    ans = 0\n    for i in range(1, 10):\n        if l[i]!= 0:\n            ans = l[i]\n            break\n\n    return ans\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"Solution to the birthday problem\"\n    # Define some constants\n    NUM_CUBES = 6\n    NUM_FACES = 6\n    NUM_BAD_CUBE_FACES = 2\n    # Parse input\n    cube_faces = [0] * NUM_CUBES\n    for line in stdin.splitlines():\n        cube_faces = [int(face) for face in line.split()]\n        # This cube has no bad faces?\n        if sum(num % 2 for num in cube_faces) == 0:\n            continue\n        # Check if this cube can be built in one step\n        for cube_index in range(NUM_CUBES):\n            for cube_face_index in range(NUM_FACES):\n                # Move cube number of times to find bad faces\n                bad_faces = []\n                for _ in range(NUM_BAD_CUBE_FACES):\n                    # Get current face of the cube\n                    current_face = cube_faces[cube_index]\n                    # Get the face value we want to change\n                    face_value = cube_faces[cube_face_index]\n                    # Count the number of faces that are the same as the face we want to change\n                    bad_faces.append(current_face.count(face_value))\n                    # Change the face\n                    cube_faces[cube_index] = (cube_faces[cube_index] + 1) % 10\n                # If we could build the number then we are done\n                if len(set(bad_faces)) == 1:\n                    break\n            else:\n                continue\n            break\n        else:\n            return 0\n    # Make a list of all cubes that could be made\n    result = []\n    for cube_index, face_value in enumerate(cube_faces):\n        result += [num for num in range(1, face_value + 1)]\n    # Sort them in ascending order\n    result.sort()\n    # Return the last number in the list\n    return result[-1]\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def n_faces(n):\n        return 6 ** n\n\n    def faces_values(n):\n        return [f\"{i % 6}\" for i in range(6 ** n)]\n\n    def count_faces(n, faces):\n        return len(list(filter(lambda x: x == \"1\", faces)))\n\n    def cube_face_values(n):\n        values = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n        return [value * n for value in values]\n\n    def cube_count(n):\n        return len(cube_face_values(n))\n\n    def rotate(faces):\n        rotated_faces = []\n        for i in range(cube_count(n_faces(len(faces)))):\n            rotated_faces.append(faces[i])\n            for j in range(len(faces) - 1):\n                rotated_faces[i] += faces[j]\n        return rotated_faces\n\n    def cube_to_int(faces):\n        result = \"\"\n        for face in faces:\n            result += face\n        return int(result)\n\n    def int_to_cube(n):\n        result = []\n        while n!= 0:\n            result.append(n % 6)\n            n //= 6\n        return list(reversed(result))\n\n    def get_possible_numbers(n):\n        faces = cube_face_values(n)\n        result = []\n        for face in faces:\n            rotated_faces = rotate(list(face))\n            result.append(cube_to_int(rotated_faces))\n        return result\n\n    def is_possible(n):\n        return count_faces(n_faces(len(faces)), faces) == cube_count(n)\n\n    def find_max(n):\n        numbers = get_possible_numbers(n)\n        for number in numbers:\n            if is_possible(number):\n                return number\n        return 0\n\n    n = int(stdin.readline())\n    faces = [list(map(int, stdin.readline().split())) for _ in range(n_faces(n))]\n    return find_max(n)\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #https://codeforces.com/contest/5/problem/A\n    n=int(stdin.readline())\n    result=[]\n    for _ in range(n):\n        a=list(map(int,stdin.readline().split()))\n        x=0\n        for i in range(len(a)):\n            for j in range(len(a)):\n                if i!=j and a[i]==a[j]:\n                    x=a[i]\n        result.append(x)\n    print(*result)\n    return ''.join(map(str,result))\n\n\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    numbers = []\n    for _ in range(n):\n        numbers.append(list(map(int, stdin.readline().split())))\n    result = 0\n    for i in range(10):\n        result += sum(numbers[j][i] for j in range(n))\n    for x in range(1, result + 1):\n        check_set = set()\n        for i in range(n):\n            temp = 0\n            for j in range(6):\n                temp += x // numbers[i][j]\n                x %= numbers[i][j]\n                if temp in check_set:\n                    break\n                check_set.add(temp)\n            else:\n                continue\n            break\n        else:\n            result = x\n            break\n    return result"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    masha = int(stdin)\n    if masha == 0:\n        return 0\n\n    # \u041c\u0430\u0441\u0448\u0430 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0442 1 \u0434\u043e masha \u0446\u0435\u043b\u044b\u0445 \u043d\u0435\u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0446\u0438\u0444\u0440\n    # \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043b\u0438\u0431\u043e 0, \u043b\u0438\u0431\u043e 1\n    # \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 - masha\n    # \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 - masha + 1\n    cubes = [list(map(int, stdin.split())) for _ in range(masha)]\n    # \u041f\u0435\u0440\u0435\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u043e\u0439\u0442\u0438 \u043a \u0443\u0441\u043b\u043e\u0432\u0438\u044e\n    cubes = list(map(list, zip(*cubes)))\n    # \u041f\u0435\u0440\u0435\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c 1 \u0434\u043b\u044f \u043d\u0443\u043b\u0435\u0432\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\n    cubes = [list(map(lambda x: x + 1, x)) for x in cubes]\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e masha\n    max_lst = [max(x) for x in cubes]\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n    len_max_lst = len(max_lst)\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n    len_ind_max_lst = len(range(len_max_lst))\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 0\n    zero_lst = [0 for _ in range(len_max_lst)]\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    count_lst = [0 for _ in range(len_max_lst)]\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    index_lst = [0 for _ in range(len_max_lst)]\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438\n    max_lst_tmp = [0 for _ in range(len_max_lst)]\n\n    # \u041f\u0435\u0440\u0435\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044f 0\n    cubes = list(map(list, zip(*cubes)))\n\n    # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438\n    for i in range(len_max_lst):\n        # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n        # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        # \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        max_lst_tmp[i] = max(cubes[i])\n        index_lst[i] = cubes[i].index(max(cubes[i]))\n\n    # \u041f\u0435\u0440\u0435\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044f 0\n    cubes = list(map(list, zip(*cubes)))\n\n    # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 0\n    for i in range(len_max_lst):\n        # \u0415\u0441\u043b\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u043f\u0438\u0441\u043a\u0430\n        if index_lst[i] == len(cubes[i]) - 1:\n            # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n            # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n            # \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0434\u0435\u043a"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    nums = [list(map(int, stdin.readline().split())) for _ in range(num)]\n    nums = sorted(nums, key=lambda x: x[1])\n    max_x = 0\n    for num in nums:\n        if num[0] == num[1]:\n            max_x = max(max_x, num[0] + 1)\n    return str(max_x)\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    x = 10**(k-1)\n    y = int(str(n)[::-1])\n    while y % x!= 0:\n        y = y + x\n    return str(y)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    min_num = pow(10, k)\n\n    # string to be built\n    str_num = ''\n\n    # for each digit in n\n    for i in range(9, -1, -1):\n        # add it to the string\n        str_num += str(n // pow(10, i))\n        # the number to be multiplied by 10^(i) is in the beginning of str_num\n        # so it is just to multiply it by 10^(i)\n        n = n % pow(10, i)\n\n    # find min_num by adding 1\n    min_num += 1\n\n    # if min_num ends with k or more 0, return the number\n    if str_num.endswith('0' * k):\n        return str_num\n\n    # else, return the result of min_num\n    return str(min_num)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    x = 1\n    while True:\n        if x % n == 0:\n            return x\n        if x % 10 == 0:\n            break\n        x = x * 10 + k\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return n\n    elif n == 2:\n        return str(n)[:-1] + str(n)[-1] * k\n    elif n % 10 ** (k - 1) == 0:\n        return n\n    else:\n        return int(str(n) * k)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print((n*10**k)//n)"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"K-rounding\"\"\"\n    number, rounds = stdin.split()\n    number = int(number)\n    rounds = int(rounds)\n    if rounds < 1:\n        return number\n    quotient, remainder = divmod(number, 10 ** rounds)\n    if remainder < 10 ** (rounds - 1):\n        quotient += 1\n    return str(quotient)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_remainder = n % 10 ** (k + 1)\n    if n_remainder == 0:\n        return str(n)\n    else:\n        while not n_remainder % n:\n            n_remainder //= n\n        n_remainder *= 10 ** k\n        return str(n_remainder + n)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    for i in range(k):\n        n = (n - 1) % n * 10 + n\n    return str(n)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = ''\n    while n > 0:\n        if n % 10**k > 0:\n            result += str(n % 10**k) + '0' * (k - len(str(n % 10**k)))\n            n //= 10**k\n        else:\n            result += str(n % 10**k)\n            n //= 10**k\n            k = 0\n    return result[::-1]\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.split()[0])\n    columns = int(stdin.split()[1])\n    a = [int(i) for i in stdin.split()[2:]]\n    b = [int(i) for i in stdin.split()[2:]]\n    s = 0\n    while True:\n        if s > 2500:\n            return -1\n        elif a == b:\n            return s\n        for i in range(rows):\n            for j in range(columns - 1):\n                if b[i][j] == 1 and b[i][j + 1] == 1:\n                    b[i][j] = 0\n                    b[i][j + 1] = 0\n                    s += 1\n                    break\n        for i in range(rows - 1):\n            for j in range(columns):\n                if b[i][j] == 1 and b[i + 1][j] == 1:\n                    b[i][j] = 0\n                    b[i + 1][j] = 0\n                    s += 1\n                    break\n    return 0"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 3\\n1 1 1\\n1 1 1\\n0 1 1')\n    3\n    >>> solution('3 3\\n1 0 1\\n1 0 1\\n0 0 0')\n    0\n    \"\"\"\n   ...\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def extract(string):\n        return [int(x) for x in string.split(' ')]\n\n    def encode(string):\n        return [ord(char) for char in string]\n\n    def decode(char_list):\n        return ''.join(chr(char) for char in char_list)\n\n    n, m = extract(stdin)\n    a = [[char for char in stdin.strip('\\n')] for _ in range(n)]\n    b = [[char for char in stdin.strip('\\n')] for _ in range(n)]\n\n    def print_matrix(matrix):\n        for row in matrix:\n            print(' '.join(str(x) for x in row))\n\n    def can_be_transformed(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 1 and not matrix[i - 1][j] and not matrix[i][j - 1] and not matrix[i][j + 1] and not matrix[i + 1][j]:\n                    return False\n        return True\n\n    def transform(matrix):\n        new_matrix = []\n        for i in range(len(matrix)):\n            new_row = []\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 1:\n                    new_row.append(0)\n                    if i > 0:\n                        new_row.append(1)\n                    if j > 0:\n                        new_row.append(1)\n                    if i + 1 < len(matrix):\n                        new_row.append(1)\n                    if j + 1 < len(matrix[i]):\n                        new_row.append(1)\n            new_matrix.append(new_row)\n        return new_matrix\n\n    def check_solution(matrix, matrix2):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j]!= matrix2[i][j]:\n                    return False\n        return True\n\n    def get_matrix(matrix, i, j):\n        new_matrix = []\n        for row in matrix:\n            new_row = []\n            for col in row:\n                if i == j:\n                    new_row.append(0)\n                elif col == 1:\n                    new_row.append(1)\n                else:\n                    new_row.append(col)\n            new_matrix.append(new_row)\n        return new_matrix\n\n    def can_transform(matrix, matrix2):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j]!= matrix2[i][j]:\n                    return False\n        return True\n\n    # \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                b[i].append(0)\n            else:\n                b[i].append(1)\n    b.append([])\n    for i in range(m + 1):\n        b[-1].append(0)\n\n    count = 0\n    while count!= -1:\n        count += 1\n        print(count)\n        if count == 1:\n            print_matrix(b)\n            matrix = b\n            print()\n        if not can_be_transformed(matrix):\n            print(count)\n            print('No')\n            break\n        else:\n            matrix2 = transform(matrix)\n            if can_transform(matrix, matrix2):\n                matrix = matrix2\n                count = 0\n            else:\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix(matrix)\n                print()\n                matrix = get_matrix(matrix, *extract(stdin))\n                print_matrix("
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')[0:2]\n    n, m = int(n), int(m)\n\n    A = stdin.split('\\n')[1:n+1]\n    B = stdin.split('\\n')[n+1:n+m+1]\n    A = [list(map(int, x.split())) for x in A]\n    B = [list(map(int, x.split())) for x in B]\n\n    # TODO: write your code here\n    return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    A = [list(map(int, line.split())) for line in stdin]\n    B = [list(map(int, line.split())) for line in stdin]\n    while True:\n        if all(B[i][j] == A[i][j] for i in range(n) for j in range(m)) and not any(B[i][j] - A[i][j] for i in range(n) for j in range(m)):\n            break\n        C = [list(map(int, line.split())) for line in stdin]\n        for i in range(n):\n            for j in range(m):\n                if B[i][j] == 1:\n                    if (i < n - 1 and B[i + 1][j] == 0) or (i > 0 and B[i - 1][j] == 0):\n                        if (j < m - 1 and B[i][j + 1] == 0) or (j > 0 and B[i][j - 1] == 0):\n                            B[i][j] = 0\n                            break\n                    else:\n                        B[i][j] = 0\n                        break\n    return str(C)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\\n\")\n    '3\\n1 1\\n1 2\\n2 2\\n'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the problem, containing a list of different solutions.\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    matrix_a = []\n    matrix_b = []\n\n    for _ in range(n):\n        matrix_a.append([int(x) for x in stdin.split()])\n\n    for _ in range(n):\n        matrix_b.append([0 for _ in range(m)])\n\n    for line in matrix_a:\n        for index, num in enumerate(line):\n            matrix_b[index][index] = num\n\n    def get_submatrix(matrix_a: list, x: int, y: int) -> list:\n        \"\"\"\n        Return submatrix of given matrix at x, y coordinates.\n        \"\"\"\n        submatrix = []\n        for i in range(2):\n            for j in range(2):\n                submatrix.append(matrix_a[x + i][y + j])\n        return submatrix\n\n    def apply_operation(matrix_b: list, x: int, y: int) -> None:\n        \"\"\"\n        Apply operation on the submatrix at x, y.\n        \"\"\"\n        submatrix = get_submatrix(matrix_b, x, y)\n        for index in range(len(submatrix)):\n            matrix_b[x + index // 2][y + index % 2] = 1\n\n    def is_matrix_equal(matrix_a: list, matrix_b: list) -> bool:\n        \"\"\"\n        Check if matrices are equal.\n        \"\"\"\n        for i in range(n):\n            for j in range(m):\n                if matrix_a[i][j]!= matrix_b[i][j]:\n                    return False\n        return True\n\n    def count_operations(matrix_a: list, matrix_b: list) -> int:\n        \"\"\"\n        Count the number of operations.\n        \"\"\"\n        number_of_operations = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix_a[i][j]!= matrix_b[i][j]:\n                    operation = get_submatrix(matrix_a, i, j)\n                    operation_with_one = [1] * len(operation)\n                    number_of_operations += sum(operation_with_one)\n                    apply_operation(matrix_b, i, j)\n        return number_of_operations\n\n    def solution_min(matrix_a: list, matrix_b: list) -> int:\n        \"\"\"\n        Solution for the problem, where we only need to count operations.\n        \"\"\"\n        if is_matrix_equal(matrix_a, matrix_b):\n            return 0\n        number_of_operations = 0\n        while not is_matrix_equal(matrix_a, matrix_b):\n            number_of_operations += 1\n            for i in range(n):\n                for j in range(m):\n                    if matrix_a[i][j]!= matrix_b[i][j]:\n                        operation = get_submatrix(matrix_a, i, j)\n                        operation_with_one = [1] * len(operation)\n                        number_of_operations += sum(operation_with_one)\n                        apply_operation(matrix_b, i, j)\n        return number_of_operations\n\n    # First solution\n    number_of_operations = count_operations(matrix_a, matrix_b)\n    print(number_of_operations)\n\n    # Second solution\n    number_of_operations = solution_min(matrix_a, matrix_b)\n    print(number_of_operations)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\\n\")\n    3\n    >>> solution(\"3 2\\n0 0\\n0 0\\n0 0\\n\")\n    0\n    \"\"\"\n    n, m = map(int, stdin.split())\n    matrix_a = [[int(x) for x in stdin.split(\"\\n\")[i]] for i in range(n)]\n    matrix_b = [[0] * m for _ in range(n)]\n\n    result = []\n\n    while True:\n        pairs = []\n        for i in range(n):\n            for j in range(m):\n                if matrix_b[i][j] == 1:\n                    pairs.append((i, j))\n\n        if len(pairs) == 0:\n            break\n\n        for x, y in pairs:\n            # turn b into a\n            for i in range(x - 1, x + 2):\n                for j in range(y - 1, y + 2):\n                    matrix_b[i][j] = 1\n\n            # turn a into b\n            for i in range(n):\n                for j in range(m):\n                    if matrix_a[i][j] == 1:\n                        matrix_b[i][j] = 1\n        result.append(pairs)\n\n    if any([sum([1 for x in row if x == 1]) for row in matrix_a]):\n        return \"-1\"\n\n    return \"\\n\".join([\" \".join([str(x) for x in row]) for row in result])\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    r, s, p = r / (r + s + p), s / (r + s + p), p / (r + s + p)\n    print(r, s, p)\n    return '%.9f %.9f %.9f' % (r, s, p)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    rock, scissor, paper = map(int, stdin.split())\n    probability_rock = 0.5 * (2 * paper + scissor) / (rock + scissor + paper)\n    probability_scissor = 0.5 * (2 * paper + scissor) / (rock + scissor + paper)\n    probability_paper = 0.5 * (2 * rock + scissor) / (rock + scissor + paper)\n    print(f'{probability_rock:.9f}\\n{probability_scissor:.9f}\\n{probability_paper:.9f}')\n\n    return '0'\n\n\nprint(solution('2 1 2'))"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = list(map(int, stdin.split()))\n    \n    return''.join(map(str, [((r - 1) * s + p) / (r * s), (s - 1) * p + r, r * s - p]))\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split()]\n    a = x * (x - 1) * (y - 1) + x * (x - 1) * (z - 1) + x * (y - 1) * (z - 1) + x * (y - 1) * (z - 1) + x * (z - 1) * (y - 1) + x * (z - 1) * (y - 1) + y * (z - 1) * (x - 1) + z * (y - 1) * (x - 1) + y * (z - 1) * (x - 1) + z * (y - 1) * (x - 1) + y * (x - 1) * (z - 1) + y * (x - 1) * (z - 1) + z * (x - 1) * (y - 1)\n    a = a / 6 / (x * (x - 1) * (y - 1) + x * (x - 1) * (z - 1) + x * (y - 1) * (z - 1) + x * (y - 1) * (z - 1) + x * (z - 1) * (y - 1) + x * (z - 1) * (y - 1) + y * (z - 1) * (x - 1) + z * (y - 1) * (x - 1) + y * (z - 1) * (x - 1) + z * (y - 1) * (x - 1) + y * (x - 1) * (z - 1) + y * (x - 1) * (z - 1) + z * (x - 1) * (y - 1) + z * (x - 1) * (y - 1) + x * (y - 1) * (z - 1))\n    print(a, a + 1, a + 2)\n\n    return str(a) + \" \" + str(a + 1) + \" \" + str(a + 2)\n\nsolution('2 2 2') == '0.333333333333 0.333333333333 0.333333333333'\nsolution('2 1 2') == '0.150000000000 0.300000000000 0.550000000000'\nsolution('1 1 3') == '0.057142857143 0.657142857143 0.285714285714'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = [int(x) for x in stdin.split()]\n    def probability(r, s, p):\n        return (1 / (r * s + s * p + r * p))\n    print(*[probability(r, s, p) for _ in range(3)], sep='\\n')\n    return ''\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return str(r / (r + s) / (r + s + p)) +'' + str(s / (r + s) / (r + s + p)) +'' + str(p / (r + s) / (r + s + p))\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    return f\"{(a / (a + b + c)):.9f} {(b / (a + b + c)):.9f} {(c / (a + b + c)):.9f}\""
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_same_species(number_r, number_s, number_p, r, s, p):\n        rock_kill_scissors = (number_r / (number_r + number_s))\n        scissors_kill_paper = (number_s / (number_r + number_s))\n        paper_kill_rock = (number_p / (number_p + number_r))\n        r_survivor = r - r * rock_kill_scissors - r * scissors_kill_paper\n        s_survivor = s - s * scissors_kill_paper - s * paper_kill_rock\n        p_survivor = p - p * paper_kill_rock - p * rock_kill_scissors\n        return r_survivor, s_survivor, p_survivor\n    def calculate_probability(number_r, number_s, number_p):\n        return is_same_species(number_r, number_s, number_p, number_r, number_s, number_p)\n    number_r, number_s, number_p = map(int, stdin.split())\n    return str(calculate_probability(number_r, number_s, number_p)[0]) + \" \" + str(calculate_probability(number_r, number_s, number_p)[1]) + \" \" + str(calculate_probability(number_r, number_s, number_p)[2])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x1, x2, x3, x4, x5 = map(int, stdin.split())\n    x = [x1, x2, x3, x4, x5]\n    y = [x3, x4, x5, x2, x1]\n    z = x[0:2]\n    f = x[2:4]\n    p = x[4]\n    t1 = 0\n    t2 = 0\n    for i in range(len(z)):\n        t1 += abs(z[i] - f[i])\n    for i in range(len(f)):\n        t2 += abs(f[i] - p)\n    print(min(t1, t2))\n    return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    return r_2 - l_2 - k + max(0, r_1 - l_1 - k)\n\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4.\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0437 N \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e.\n\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 10^6.\n\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e\u00a0rotate\u00a0(A), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0440\u0435\u0442\u0430\u0441\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432\u043f\u0440\u0430\u0432\u043e.\n\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u0443\u0441\u0442\u043e\u0439, \u0435\u0441\u043b\u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430.\n\n-----Input-----\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e 1 \u2264 N \u2264 10^6.\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 N \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 10^6.\n\n-----Output-----\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0442\u0430\u0441\u043e\u0432\u043a\u0438.\n\n-----Examples-----\nInput\n6\n3 4 5 6 2 7\n\nOutput\n3 4 5 6 2 7\n\nInput\n4\n9 9 9 9\n\nOutput\n9 9 9 9\n\nInput\n1\n1\n\nOutput\n1\n\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4.\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0437 N \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e.\n\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 10^6.\n\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e\u00a0rotate\u00a0(A), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0440\u0435\u0442\u0430\u0441\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432\u043f\u0440\u0430\u0432\u043e.\n\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u0443\u0441\u0442\u043e\u0439, \u0435\u0441\u043b\u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430.\n\n-----Input-----\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e 1 \u2264 N \u2264 10^6.\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 N \u0447\u0438\u0441\u0435\u043b, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 10^6.\n\n-----Output-----\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0442\u0430\u0441\u043e\u0432\u043a\u0438.\n\n-----Examples-----\nInput\n6\n3 4 5 6 2 7\n\nOutput\n3 4 5 6 2 7\n\nInput\n4\n9 9 9 9\n\nOutput\n9 9 9 9\n\nInput\n1\n1\n\nOutput\n1\n\n\"\"\"\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # Write your code here\n    l_1, r_1, l_2, r_2, k = [int(i) for i in stdin.split()]\n\n    if (r_1 - l_1) > (r_2 - l_2):\n        return r_1 - r_2\n    else:\n        if k > 0:\n            return min((r_2 - r_1) - 1, (r_1 - l_2) + 1)\n        else:\n            return min((r_2 - r_1) - 1, (r_1 - l_2) + 1, (l_2 - l_1) + 1)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nl_1, r_1, l_2, r_2, k = [int(x) for x in stdin.split()]"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split('\\n')[0].split(' '))\n    \n    m = [0] * 2\n    for i in [l_1, r_1]:\n        for j in [l_2, r_2]:\n            if i < j:\n                if i < k < j:\n                    m[0] = max(m[0], j - k + 1)\n                if i < j < k:\n                    m[0] = max(m[0], j - i + 1)\n                if i < k < j:\n                    m[1] = max(m[1], k - i + 1)\n    print(m[0], m[1])\n    return str(max(m[0], m[1]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    print(max(0, min(r_1, r_2) - max(l_1, l_2) + 1) - k)\n    return ''\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    l = min(l_1, l_2)\n    r = max(r_1, r_2)\n    print(r - l - k + 1)\n    #print(r - l)\n    #print(k)\n    #print(r - l - k)\n    #print(r - l)\n    return ''\n\nsolution('1 10 9 20 1')\nsolution('1 100 50 200 75')"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split(' '))\n    return min((r_1 - l_1) + (l_2 - k), (r_2 - k) + (r_1 - l_1) + (k - l_2))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = [int(x) for x in stdin.split()]\n    if l_1 > r_1:\n        l_1, r_1 = r_1, l_1\n    if l_2 > r_2:\n        l_2, r_2 = r_2, l_2\n    if r_1 < k:\n        r_1, k = k, r_1\n    if l_2 < k:\n        l_2, k = k, l_2\n    if l_2 < l_1:\n        l_2, l_1 = l_1, l_2\n    if r_2 > r_1:\n        r_2, r_1 = r_1, r_2\n    print(r_1 - l_1 - 1 + r_2 - l_2 - 1)\n    return ''\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = get_data(stdin)\n    points = data['points']\n    lines = data['lines']\n    s = len(points)\n    r = len(lines)\n    memo = [[[0] * s for _ in range(s)] for _ in range(r)]\n\n    for i in range(r):\n        for j in range(s):\n            for k in range(s):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    memo[i][j][k] = memo[i][j - 1][k] + ((points[k][0] - points[j - 1][0]) ** 2 + (points[k][1] - points[j - 1][1]) ** 2) ** 0.5\n                elif j == 0:\n                    memo[i][j][k] = memo[i - 1][j][k] + ((points[k][0] - points[i - 1][0]) ** 2 + (points[k][1] - points[i - 1][1]) ** 2) ** 0.5\n                else:\n                    memo[i][j][k] = memo[i][j - 1][k] + memo[i - 1][j][k] - memo[i - 1][j - 1][k] + ((points[k][0] - points[j - 1][0]) ** 2 + (points[k][1] - points[j - 1][1]) ** 2) ** 0.5\n    ans = float('-inf')\n    for i in range(r):\n        for j in range(s):\n            for k in range(s):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    ans = max(ans, memo[i][j][k] + ((points[k][0] - points[j - 1][0]) ** 2 + (points[k][1] - points[j - 1][1]) ** 2) ** 0.5)\n                elif j == 0:\n                    ans = max(ans, memo[i][j][k] + ((points[k][0] - points[i - 1][0]) ** 2 + (points[k][1] - points[i - 1][1]) ** 2) ** 0.5)\n                else:\n                    ans = max(ans, memo[i][j][k] + memo[i - 1][j][k] - memo[i - 1][j - 1][k] + ((points[k][0] - points[j - 1][0]) ** 2 + (points[k][1] - points[j - 1][1]) ** 2) ** 0.5)\n\n    if ans == float('-inf'):\n        print(\"INF\")\n    else:\n        print(int(ans))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(v) for v in stdin.split()]\n    is_inf = False\n    segments = []\n    for _ in range(n):\n        a, b, c = [int(v) for v in stdin.split()]\n        segments.append([a, c, b, c])\n    for _ in range(m):\n        d, e, f = [int(v) for v in stdin.split()]\n        segments.append([d, f, d, e])\n\n    return \"INF\" if is_inf else 0\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    (N, M) = stdin.split(\" \")\n    (A_1, B_1, C_1) = stdin.split(\" \")\n    A = int(A_1)\n    B = int(B_1)\n    C = int(C_1)\n    for i in range(int(N)):\n        (D, E, F) = stdin.split(\" \")\n        D = int(D)\n        E = int(E)\n        F = int(F)\n        area = 0\n        if A < D and B < F:\n            print(\"INF\")\n            return\n        else:\n            if A < D and B > F:\n                print(B - F)\n            else:\n                if A > D and B < F:\n                    print(A - D)\n                else:\n                    print(max(A - D, B - F))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n, m = list(map(int, lines[0].split()))\n    lines = lines[1:]\n    coords = {}\n\n    for i in range(n):\n        line = lines[i]\n        (a, b, c) = list(map(int, line.split()))\n        coords[(a, b)] = c\n        coords[(b, a)] = c\n\n    for j in range(m):\n        line = lines[n + j]\n        (d, e, f) = list(map(int, line.split()))\n        coords[(d, e)] = f\n        coords[(e, d)] = f\n\n    print(coords)\n\n    def are_close(point1: tuple, point2: tuple) -> bool:\n        (x1, y1) = point1\n        (x2, y2) = point2\n        return abs(x1 - x2) + abs(y1 - y2) <= 1e-9\n\n    lines = coords.keys()\n\n    x_min = min(coord[0] for coord in lines)\n    x_max = max(coord[0] for coord in lines)\n    y_min = min(coord[1] for coord in lines)\n    y_max = max(coord[1] for coord in lines)\n\n    points = {(x, y) for x in range(x_min, x_max + 1) for y in range(y_min, y_max + 1)}\n    lines = {(x, y) for x in range(x_min, x_max + 1) for y in range(y_min, y_max + 1)}\n\n    intersections = points & lines\n\n    def intersections_to_c(point: tuple, intersection: tuple) -> int:\n        (x, y) = point\n        (x_i, y_i) = intersection\n        return coords[point] + coords[intersection] - coords[point] * coords[intersection] / 100\n\n    c_points = {point: intersections_to_c(point, intersection) for point, intersection in intersections}\n\n    intersections_c = {point: c_points[point] for point in c_points if c_points[point]!= 0}\n    intersections_c = list(intersections_c.items())\n\n    intersections_c.sort(key=lambda x: x[1])\n    intersections_c.reverse()\n\n    def get_point_c(point: tuple, intersection_c: tuple) -> tuple:\n        (x, y) = point\n        (x_i, y_i) = intersection_c\n        return (x - x_i, y - y_i)\n\n    def get_line_c(point1: tuple, point2: tuple) -> tuple:\n        return (get_point_c(point2, intersection_c) - get_point_c(point1, intersection_c))\n\n    lines_c = {get_line_c(point1, point2): c for point1, point2, c in intersections_c}\n    lines_c = list(lines_c.items())\n\n    def get_c(point: tuple) -> int:\n        x, y = point\n        return coords[point] + (x * coords[(0, 0)] - y * coords[(0, 0)]) / 100\n\n    c_points = {point: get_c(point) for point in points}\n\n    c_points_lines = {point: c_points[point] + lines_c[0][1] for point, line in lines_c}\n    c_points_lines = list(c_points_lines.items())\n    c_points_lines.sort(key=lambda x: x[1])\n    c_points_lines.reverse()\n\n    def get_line_points(line: tuple) -> tuple:\n        (x, y) = line\n        (point1, point2) = intersections_c[line][0]\n        return (point1, point2)\n\n    def get_point(line: tuple) -> tuple:\n        (x, y) = line\n        (point1, point2) = get_line_points(line)\n        (x_i, y_i) = point1\n        (x_j, y_j) = point2\n        return ((x_i - x_j) * y + (y_i - y_j) * x + (x_i * y_j - x_j * y_i),\n                (x_j - x_i) * y + (y_j - y_i) * x + (x_j * y_i - x_i * y_j))\n\n    def get_c_point(line: tuple, point: tuple) -> tuple:\n        (x, y) = line\n        (x_p, y_p) = point\n        (x_i, y_i) = get_point(line)\n        (x_j, y_j) = get_point((x_p - x_i, y_p - y_i))\n        return (x_j - x_i) * y + (y_j - y_i) * x + (x_j * y_i - x_i * y_j), (x_j - x_i) * y + (y_j - y_i) * x + (x_i * y_j - x_j * y_i)\n\n    def is_c_point_on_line(line: tuple, c_point: tuple) -> bool:\n        (x, y) = c_point\n        (x_i, y_i) = get_point(line)\n        (x_j, y_j) = get_point((x, y))\n        return abs(x_j - x_i) + abs(y_j - y_i) <= 1e-9\n\n    def get_next_c_point(point: tuple) -> tuple:\n        (x, y) = point\n        return get_c_point(lines_c[0][0], point)\n\n    def get_c_points_on_line(line: tuple) -> tuple:\n        (x, y) = line\n        return {get_c_point(line, point) for point in points if is_c_point_on_line(line, point)}\n\n    def get_next_c_point"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution to the cow problem.\n    \"\"\"\n    pass"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    points = []\n    for _ in range(n):\n        points.append(stdin.readline().split())\n    for i in range(n):\n        for j in range(m):\n            points[i][j] = tuple(map(int, points[i][j].split()))\n    # matrix = [[1, 2, 0], [0, 1, 1], [0, 2, 2], [-3, 4, -1], [-2, 6, 3], [1, 0, 1], [0, 1, 2], [2, 0, 2], [-1, -4, 5], [3, -2, 4], [1, 2, 4]]\n    # points = [[(-3, 4), (-2, 6), (1, 0)], [(-1, -4), (3, -2), (1, 2)]]\n    answer = []\n    for i in range(n):\n        for j in range(m):\n            s1 = Segment(matrix[i][0], matrix[i][1], matrix[i][2])\n            s2 = Segment(points[i][0][0], points[i][0][1], points[i][1][0], points[i][1][1])\n            answer.append(s1.area(s2))\n    if max(answer) == float('inf'):\n        print('INF')\n    else:\n        print(max(answer))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function will solve the problem in HackerRank.\n    :param stdin: standard input\n    :return: solution string\n    \"\"\"\n    # Write your code here\n    n, m = [int(i) for i in stdin.split()]\n    lines = []\n    for i in range(n):\n        line = [int(i) for i in stdin.split('\\n')[i+1].split()]\n        lines.append(line)\n    a = [0]\n    b = [0]\n    c = [0]\n    d = [0]\n    e = [0]\n    f = [0]\n    for line in lines:\n        a.append(line[0])\n        b.append(line[1])\n        c.append(line[2])\n    for i in range(m):\n        line = [int(i) for i in stdin.split('\\n')[i + m + 2].split()]\n        d.append(line[0])\n        e.append(line[1])\n        f.append(line[2])\n    a.append(0)\n    b.append(0)\n    c.append(0)\n    d.append(0)\n    e.append(0)\n    f.append(0)\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    a.append(a[0])\n    b.append(b[0])\n    c.append(c[0])\n    d.append(d[0])\n    e.append(e[0])\n    f.append(f[0])\n    count = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            if d[i] >= a[j] and e[i] <= b[j] and f[i] >= c[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input from stdin.\"\"\"\n    # c = float('-inf')\n    # x = [0] * 1000\n    # y = [0] * 1000\n    # for i in range(int(stdin)):\n    #     x[i], y[i] = map(int, stdin[4*i+1:4*i+3].split())\n    #     # c = max(c, max(x[i], y[i])\n    #     # c = min(c, min(x[i], y[i]))\n    # print(c)\n    # print(x, y)\n    # # from collections import deque\n    # # from itertools import combinations\n    # #\n    # # c = float('inf')\n    # # for i, j in combinations(range(int(stdin)), 2):\n    # #     if abs(x[i] - x[j]) > c or abs(y[i] - y[j]) > c:\n    # #         continue\n    # #     if abs(x[i] - x[j]) + abs(y[i] - y[j]) < c:\n    # #         c = abs(x[i] - x[j]) + abs(y[i] - y[j])\n    # # print(c)\n    # x = deque()\n    # y = deque()\n    # s = ''\n    # for i in range(int(stdin)):\n    #     a, b, c = stdin[4*i+1:4*i+3].split()\n    #     a, b = int(a), int(b)\n    #     if a < b:\n    #         x.append((a, b, c))\n    #     else:\n    #         y.append((a, b, c))\n    # c = float('-inf')\n    # p = 0\n    # for i, j, k in x:\n    #     if p < i:\n    #         x.appendleft((i, j, k))\n    #         p = i\n    #     else:\n    #         x.appendleft((j, i, k))\n    # for i, j, k in y:\n    #     if p < j:\n    #         y.appendleft((j, i, k))\n    #         p = j\n    #     else:\n    #         y.appendleft((i, j, k))\n    #\n    # for i in range(len(x)):\n    #     for j in range(len(y)):\n    #         a, b, c = x[i][0], x[i][1], x[i][2]\n    #         d, e, f = y[j][0], y[j][1], y[j][2]\n    #         if (a, b) == (0, 0) or (d, e) == (0, 0) or abs(a - d) + abs(b - e) < c + f:\n    #             continue\n    #         if (a, b) == (d, e) or (a, b) == (d, f) or (b, a) == (d, e) or (b, a) == (d, f):\n    #             c = max(c, abs(a - d) + abs(b - e))\n    #             c = max(c, abs(b - d) + abs(a - e))\n    #         else:\n    #             c = max(c, abs(a - d) + abs(b - e), abs(a - d) + abs(b - f), abs(b - d) + abs(a - e), abs(b - d) + abs(a - f))\n    #\n    # if c == float('inf'):\n    #     print('INF')\n    # else:\n    #     print(c)\n    # # for i in range(int(stdin)):\n    # #     a, b, c = stdin[4*i+1:4*i+3].split()\n    # #     a, b = int(a), int(b)\n    # #     if a < b:\n    # #         x.append((a, b, c))\n    # #     else:\n    # #         y.append((a, b, c))\n    # # c = float('inf')\n    # # for i in range(len(x)):\n    # #     for j in range(len(y)):\n    # #         a, b, c = x[i][0], x[i][1], x[i][2]\n    # #         d, e, f = y[j][0], y[j][1], y[j][2]\n    # #         if (a, b) == (0, 0) or (d, e) == (0, 0) or abs(a - d) + abs(b - e) < c + f:\n    # #             continue\n    # #         if (a, b) == (d, e) or (a, b) == (d, f) or (b, a) == (d, e) or (b, a) == (d, f):\n    # #             c = max(c, abs(a - d) + abs(b - e))\n    # #             c = max(c, abs(b - d) + abs(a - e))\n    # #         else:\n    # #             c = max(c, abs(a - d) + abs(b - e), abs(a - d) + abs(b - f), abs(b - d) + abs(a - e), abs(b - d) + abs(a - f))\n    # #\n    # #         if c == float('inf'):\n    # #             break\n    # #         c = min(c, abs(a - d) + abs(b - e), abs(a - d) + abs(b - f), abs(b - d) + abs(a - e), abs(b - d) + abs(a - f))\n    # #\n    # # if c == float('inf'):\n    # #     print('INF')\n    # # else:\n    # #     print(c)\n    # x = deque()\n    # y = deque()\n    # s = ''\n    # for i in range(int(stdin)):\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    n_segments = []\n    m_segments = []\n    for _ in range(n):\n        n_segments.append([int(x) for x in stdin.split(' ')])\n    for _ in range(m):\n        m_segments.append([int(x) for x in stdin.split(' ')])\n\n    return max(abs(x - y) for x, y in itertools.product(n_segments, m_segments))\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x % s == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = [int(i) for i in stdin.strip().split(' ')]\n    if x < t:\n        return \"YES\"\n    return \"NO\" if x % s else \"YES\"\nprint(solution(stdin))\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split(' '))\n    print('YES' if x % s == t else 'NO')\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    timestamp, interval, target = [int(x) for x in stdin.split()]\n    return 'YES' if target >= timestamp + (interval - 1) * 2 else 'NO'\n\n\ndef"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = [int(i) for i in stdin.split()]\n    if x - t % s == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x % s == 0:\n        print('YES')\n    else:\n        print('NO')\n\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    return \"YES\" if s > t - x else \"NO\"\n\nT: O(1)\nS: O(1)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split(' '))\n    if (x - s) % (s + t) == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    print('YES' if x - t % s == 0 else 'NO')\n    return None\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split(' '))\n    if s % x!= 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return two indices i and j such that the two segments a[i] and a[j] are contained in each other.\"\"\"\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    # grab n\n    n = int(stdin.readline())\n    # create matrix with all segments\n    matrix = [[0 for x in range(n)] for y in range(n)]\n    # iterate through all pairs and place in matrix\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        matrix[i][i] = r\n        for j in range(i + 1, n):\n            matrix[i][j] = matrix[i][j - 1]\n            matrix[j][i] = matrix[j - 1][i]\n            if l > matrix[j - 1][i] and r < matrix[i][j]:\n                matrix[i][j] = r\n    # remove self loops\n    for i in range(n):\n        matrix[i][i] = None\n    # now go through matrix and find all that are connected\n    connected = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] is not None:\n                connected.append([i, j])\n    # now iterate through all connected and find the ones that are the answer\n    valid_pairs = []\n    for i in range(len(connected)):\n        for j in range(len(connected)):\n            if i!= j and connected[i]!= connected[j]:\n                # check if connected[i] is within connected[j]\n                if connected[i][0] > connected[j][0] and connected[i][1] < connected[j][1] and connected[i][0] < connected[j][1]:\n                    valid_pairs.append([i, j])\n                # check if connected[j] is within connected[i]\n                if connected[j][0] > connected[i][0] and connected[j][1] < connected[i][1] and connected[j][0] < connected[i][1]:\n                    valid_pairs.append([i, j])\n    # if there is a valid pair\n    if len(valid_pairs)!= 0:\n        # return the first valid pair\n        return str(valid_pairs[0][0] + 1) + \" \" + str(valid_pairs[0][1] + 1)\n    # if there is no valid pair\n    else:\n        # return -1 -1\n        return \"-1 -1\"\n\nsolution(stdin = r\"\"\"\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n\"\"\")\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line.strip())\n    m = []\n    for _ in range(n):\n        m.append(list(map(int, stdin.readline().split())))\n    m.sort()\n    s = set()\n    for i in range(n):\n        if i == 0:\n            s.add(m[i][1])\n        else:\n            if m[i][0] <= s.pop():\n                continue\n            s.add(m[i][1])\n    print(len(s))\n    return''.join([str(i+1) for i in s])\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = []\n    for i in range(n):\n        seq.append(list(map(int, stdin.readline().split())))\n    seq.sort(key=lambda x: x[1])\n    l = 0\n    r = len(seq) - 1\n    res = [0, 0]\n    while l < r:\n        if seq[l][1] <= seq[r][0]:\n            res[0] = l + 1\n            res[1] = r + 1\n            break\n        l += 1\n        r -= 1\n    return''.join(map(str, res))\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, lrs: List[List[int]]):\n        lrs.sort()\n        l = lrs[0]\n        r = lrs[-1]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if l[0] <= r[0] <= l[1] and l[0] <= r[1] <= l[1] and l[0] <= lrs[j][0] <= l[1] and l[0] <= lrs[j][1] <= l[1]:\n                    return f'{i + 1} {j + 1}'\n                if l[0] <= lrs[j][0] <= l[1] and l[0] <= lrs[j][1] <= l[1] and l[0] <= r[0] <= l[1] and l[0] <= r[1] <= l[1]:\n                    return f'{i + 1} {j + 1}'\n        return '-1 -1'\n    return''.join(solve(int(stdin), [list(map(int, l.split())) for l in stdin.split('\\n')]).split())\n\n\ndef"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds two numbers, such that the two given segments are \n    within each other. \n    Returns them in the format (index1, index2).\n    If there are no matches, then returns (-1, -1).\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    inp = []\n    for _ in range(n):\n        inp.append(tuple(map(int, stdin.readline().split())))\n\n    def overlap(inp1, inp2):\n        if inp1[0] >= inp2[0] and inp1[1] <= inp2[1]:\n            return True\n        return False\n\n    # Process input\n    inp.sort()\n    ans = []\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and overlap(inp[i], inp[j]):\n            j += 1\n        ans.append(f\"{i+1} {j}\")\n        i = j\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    len_genome = int(input[0])\n    genome = input[1]\n    dna_codes = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n    ans = ''\n    for symbol in genome:\n        if symbol == '?':\n            ans += '?'\n        elif symbol in dna_codes:\n            ans += dna_codes[symbol]\n    return ans\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    for i in range(n):\n        if s[i] == \"?\":\n            if s[i+1]!= \"?\":\n                s[i] = s[i+1]\n                s[i+1] = \"?\"\n    return \"\".join(s)\nprint(solution(input()))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n % 4!= 0:\n        return '===\\n'\n    seq = ''.join(stdin)\n    seq = 'A' * (n // 4) + 'T' * (n // 4) + 'G' * (n // 4) + 'C' * (n // 4)\n    for i in range(n):\n        if seq[i] == '?':\n            if seq[i+1] == 'T':\n                seq = seq[:i] + 'C' + seq[i+1:]\n            elif seq[i+1] == 'G':\n                seq = seq[:i] + 'A' + seq[i+1:]\n            elif seq[i+1] == 'C':\n                seq = seq[:i] + 'G' + seq[i+1:]\n            elif seq[i+1] == 'A':\n                seq = seq[:i] + 'T' + seq[i+1:]\n    return seq\n\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\nfrom typing import List\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    ans = ''\n    for i in range(n):\n        if s[i] == '?':\n            ans += 'A' if i % 2 == 0 else 'C'\n        else:\n            ans += s[i]\n    return ans\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    string = stdin[1]\n    string = string.split()\n    string = [i for i in string[0]]\n    first = string.count('A')\n    second = string.count('C')\n    third = string.count('G')\n    forth = string.count('T')\n    if first == second and second == third and third == forth:\n        return ''.join(string)\n    elif first == second and second == forth and third == forth:\n        return ''.join(string)\n    elif first == forth and second == third and third == forth:\n        return ''.join(string)\n    else:\n        return '==='\n\nprint(solution(input()))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport numpy as np\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndecode_genome(stdin)\nreturn decode_genome(stdin)"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '==='.join(stdin.split('??'))\n\nprint(solution('AG??CT?AG'))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport collections\nimport re"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    moves = ((\"x\", \"o\"), (\"o\", \"x\"))\n    for row in rows:\n        if len(row)!= 4:\n            return \"NO\"\n        for col, sign in zip(row, moves):\n            if col!= \".\" and col!= sign:\n                return \"NO\"\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    board = []\n    for line in stdin.splitlines():\n        board.append([char for char in line])\n    if len(set(board[0]))!= len(board[0]):\n        return 'NO'\n    if len(set(board[1]))!= len(board[1]):\n        return 'NO'\n    if len(set(board[2]))!= len(board[2]):\n        return 'NO'\n    if len(set(board[3]))!= len(board[3]):\n        return 'NO'\n    board = [row[:3] for row in board[:3]]\n    board += [row[3:] for row in board[3:]]\n    board = [row[:3] for row in board[:3]]\n    board += [row[3:] for row in board[3:]]\n    for i in range(3):\n        if len(set(board[i]))!= len(board[i]):\n            return 'NO'\n        if len(set(board[i][:3]))!= len(board[i][:3]):\n            return 'NO'\n        if len(set(board[i][3:]))!= len(board[i][3:]):\n            return 'NO'\n    if len(set(board[0][0] + board[1][0] + board[2][0] + board[3][0]))!= len(board[0][0] + board[1][0] + board[2][0] + board[3][0]):\n        return 'NO'\n    if len(set(board[0][1] + board[1][1] + board[2][1] + board[3][1]))!= len(board[0][1] + board[1][1] + board[2][1] + board[3][1]):\n        return 'NO'\n    if len(set(board[0][2] + board[1][2] + board[2][2] + board[3][2]))!= len(board[0][2] + board[1][2] + board[2][2] + board[3][2]):\n        return 'NO'\n    if len(set(board[0][0] + board[1][1] + board[2][2] + board[3][3]))!= len(board[0][0] + board[1][1] + board[2][2] + board[3][3]):\n        return 'NO'\n    if len(set(board[0][3] + board[1][2] + board[2][1] + board[3][0]))!= len(board[0][3] + board[1][2] + board[2][1] + board[3][0]):\n        return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin[0:4]\n    second_line = stdin[4:8]\n    third_line = stdin[8:12]\n    fourth_line = stdin[12:]\n    x_counter = first_line.count(\"x\") + second_line.count(\"x\") + third_line.count(\"x\") + fourth_line.count(\"x\")\n    o_counter = first_line.count(\"o\") + second_line.count(\"o\") + third_line.count(\"o\") + fourth_line.count(\"o\")\n    if x_counter < 3 or o_counter < 3:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\ndef"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = 0, 0\n    for row in stdin.split('\\n'):\n        x = x + row.count('x')\n        y = y + row.count('o')\n        if x == 2 and y == 2:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    matrix = list(map(lambda x: list(x), stdin.split('\\n')))\n    x_count = stdin.count('x')\n    o_count = stdin.count('o')\n    ans = 'YES' if x_count - o_count == 1 or \\\n           (x_count - o_count == 0 and x_count + o_count >= 4) or \\\n           (x_count - o_count == 1 and (x_count + o_count) % 2 == 1) or \\\n           (x_count - o_count == 2 and x_count % 2 == 1 and o_count % 2 == 1) else 'NO'\n    return ans\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    field = [[0] * 4 for _ in range(4)]\n    for i in range(4):\n        field[i] = list(stdin[i * 4: (i + 1) * 4])\n    for i in range(4):\n        for j in range(4):\n            if field[i][j] == \"x\":\n                if j == 0:\n                    if field[i][j + 1] == \"x\" and field[i][j + 2] == \"x\" and field[i][j + 3] == \"x\":\n                        return \"YES\"\n                elif j == 3:\n                    if field[i][j - 1] == \"x\" and field[i][j - 2] == \"x\" and field[i][j - 3] == \"x\":\n                        return \"YES\"\n                else:\n                    if field[i][j - 1] == \"x\" and field[i][j - 2] == \"x\" and field[i][j - 3] == \"x\":\n                        return \"YES\"\n                    if field[i][j + 1] == \"x\" and field[i][j + 2] == \"x\" and field[i][j + 3] == \"x\":\n                        return \"YES\"\n            if field[i][j] == \"o\":\n                if j == 0:\n                    if field[i][j + 1] == \"o\" and field[i][j + 2] == \"o\" and field[i][j + 3] == \"o\":\n                        return \"YES\"\n                elif j == 3:\n                    if field[i][j - 1] == \"o\" and field[i][j - 2] == \"o\" and field[i][j - 3] == \"o\":\n                        return \"YES\"\n                else:\n                    if field[i][j - 1] == \"o\" and field[i][j - 2] == \"o\" and field[i][j - 3] == \"o\":\n                        return \"YES\"\n                    if field[i][j + 1] == \"o\" and field[i][j + 2] == \"o\" and field[i][j + 3] == \"o\":\n                        return \"YES\"\n    return \"NO\"\nprint(solution(input()))"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    board = [[char for char in stdin]]\n    x_win_cond = [\n        \"\".join(stdin[x:x + 4])\n        for x in range(0, len(stdin), 4)\n    ]\n    o_win_cond = [\n        \"\".join(stdin[x:x + 3])\n        for x in range(1, len(stdin), 4 - 1)\n    ]\n\n    if (\n        \"xxx\" in x_win_cond or\n        \"ooo\" in o_win_cond or\n        \"xxx\" in x_win_cond[::-1] or\n        \"ooo\" in o_win_cond[::-1]\n    ):\n        return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f, g, h, i = [stdin.find(x) for x in ['.', 'x', 'o']]\n    if h == -1 or i == -1:\n        return 'NO'\n\n    # two lines\n    if a!= -1 and b!= -1 and a == b:\n        return 'YES'\n\n    # two columns\n    if a!= -1 and c!= -1 and a == c:\n        return 'YES'\n\n    # diagonal\n    if a!= -1 and d!= -1 and a == d:\n        return 'YES'\n\n    # diagonal\n    if g!= -1 and f!= -1 and g == f:\n        return 'YES'\n\n    # reverse diagonal\n    if a!= -1 and e!= -1 and a == e:\n        return 'YES'\n\n    # reverse diagonal\n    if a!= -1 and g!= -1 and a == g:\n        return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasya has an array a consisting of positive integer numbers. Vasya wants to divide this array into two non-empty consecutive parts (the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array (Vasya will erase some element and insert it into an arbitrary position).\n\nInserting an element in the same position he was erased from is also considered moving.\n\nCan Vasya divide the array after choosing the right element to move and its new position?\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 100000) \u2014 the size of the array.\n\nThe second line contains n integers a_1, a_2... a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint YES if Vasya can divide the array after moving one element. Otherwise print NO.\n\n\n-----Examples-----\nInput\n3\n1 3 2\n\nOutput\nYES\n\nInput\n5\n1 2 3 4 5\n\nOutput\nNO\n\nInput\n5\n2 2 3 4 5\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example Vasya can move the second element to the end of the array.\n\nIn the second example no move can make the division possible.\n\nIn the third example Vasya can move the fourth element by one position to the left.\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = [int(x) for x in stdin.split()]\n    for i in range(1, len(a) - 1):\n        if a[i - 1] > a[i] < a[i + 1]:\n            return 'YES'\n    return 'NO'\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    len_array = int(stdin.readline().strip())\n    array = list(map(int, stdin.readline().strip().split()))\n    sorted_array = sorted(array)\n\n    difference_between_sum_of_arrays = sum(array) - sum(sorted_array)\n\n    return 'YES' if difference_between_sum_of_arrays % 2 == 0 else 'NO'"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split()))\n    total = sum(a)\n    total = sum(a[1:])\n    if total % 2 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    total = sum(numbers)\n    half = total // 2\n    i = 0\n    while i < size - 1:\n        if numbers[i] == half:\n            i += 1\n        elif numbers[i] > half:\n            numbers[i] -= 1\n            break\n        elif numbers[i] < half:\n            numbers[i] += 1\n            break\n    if numbers[i] == half:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    s1 = sum(a[:a.index(min(a))])\n    s2 = sum(a[a.index(min(a)):])\n    if s1 == s2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    size_n, *arr = stdin.split()\n    arr = [int(i) for i in arr]\n    sum_arr = sum(arr)\n    if sum_arr % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    pref, suff = [], []\n    for i, number in enumerate(numbers):\n        if number < numbers[0]:\n            pref.append(number)\n        elif number > numbers[-1]:\n            suff.append(number)\n        else:\n            numbers[i] = number\n    if len(pref) == len(suff) == 1:\n        return 'NO'\n    if len(pref) == len(suff) == 2:\n        return 'YES'\n    elif len(pref) == len(suff) > 2:\n        return 'NO'\n    elif len(pref) == len(suff) < 2:\n        return 'YES'\n\n\ndef"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find whether it is possible to replace each zero in a with an element from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\"\"\"\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = a.copy()\n    for i in range(k):\n        if b[i] in c:\n            j = c.index(b[i])\n            c[j] = 0\n            if j!= 0:\n                if c[j - 1] >= c[j]:\n                    return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n11 0 0 14\\n5 4\")\n    'Yes'\n    >>> solution(\"6 1\\n2 3 0 8 9 10\\n5\")\n    'No'\n    >>> solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\")\n    'Yes'\n    >>> solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\")\n    'Yes'\n    >>> solution(\"7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7\")\n    'Yes'\n    \"\"\"\n    line_1 = stdin.readline().strip()\n    n, k = list(map(int, line_1.split()))\n    line_2 = stdin.readline().strip()\n    a = list(map(int, line_2.split()))\n    line_3 = stdin.readline().strip()\n    b = list(map(int, line_3.split()))\n    a_ = [0] * (n + 1)\n    for i in a:\n        a_[i] += 1\n    i = 0\n    while i < n and a_[i + 1] == 0:\n        i += 1\n    if i < n:\n        a_[i + 1] -= 1\n        for j in range(n):\n            if j!= i:\n                a_[j] = 0\n        if a_[i + 1] == 0:\n            if i + 1 == n:\n                a_[i] = 0\n                a_[i + 1] = 0\n                a_[n] = 0\n            else:\n                a_[i] = 0\n                a_[i + 1] = 0\n        else:\n            a_[i] = 1\n    i = n\n    a_.reverse()\n    while a_[i] == 0:\n        i -= 1\n    a_.reverse()\n    b_ = [0] * (k + 1)\n    for j in b:\n        b_[j] += 1\n    i = 0\n    while i < k and b_[i + 1] == 0:\n        i += 1\n    if i < k:\n        b_[i + 1] -= 1\n        for j in range(k):\n            if j!= i:\n                b_[j] = 0\n        if b_[i + 1] == 0:\n            if i + 1 == k:\n                b_[i] = 0\n                b_[i + 1] = 0\n                b_[k] = 0\n            else:\n                b_[i] = 0\n                b_[i + 1] = 0\n        else:\n            b_[i] = 1\n    i = k\n    b_.reverse()\n    while b_[i] == 0:\n        i -= 1\n    b_.reverse()\n    if i < k:\n        return \"No\"\n    for i in range(n - 1):\n        if a_[i]!= 0 or a_[i + 1]!= 0 or b_[i]!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets a string and return 'Yes' if it's possible to replace each zero with an element from the second string.\n    Otherwise, return 'No'.\"\"\"\n    a, b = stdin.split()\n    a = [int(s) for s in a.split()]\n    b = [int(s) for s in b.split()]\n    count = {}\n    for elem in b:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    for elem in a:\n        if elem == 0:\n            if 0 not in count:\n                return 'No'\n            count[0] -= 1\n            if count[0] < 0:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n\n    b = [int(x) for x in stdin.split(\" \")[k:]]\n\n    ans = \"Yes\"\n    c = [0] * len(b)\n    for i in range(n):\n        if a[i] == 0:\n            if b[c[i]]!= a[i]:\n                ans = \"No\"\n            else:\n                c[c[i]] = c[c[i]] + 1\n        else:\n            c[c[i]] = c[c[i]] + 1\n\n    return ans\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the function will receive an input of:\n    1. n (sequence a) - a sequence of non-zero positive integers\n    2. k (sequence b) - a sequence of positive integers\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a_zeros = [0 for i in range(k)]\n    a_index = 0\n\n    for i in range(n):\n        if a[i] == 0:\n            a_zeros[a_index] = b[i]\n            a_index += 1\n    # find the elements in the right order to fill in zeros\n    a_sorted = sorted(a_zeros)\n    a_sorted = list(set(a_sorted))\n    a_sorted.remove(0)\n    # a_sorted = [1, 2, 3]\n    # k = 2\n\n    return \"Yes\" if all(x <= y for x, y in zip(a_sorted, a)) and len(a_sorted) < k else \"No\"\n\n\ndef"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    counter = Counter(a)\n    for i in b:\n        if counter[i] < 1:\n            return \"No\"\n        else:\n            counter[i] -= 1\n    if 0 not in a:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of elements to replace for valid sequence\n    \"\"\"\n    \n    # Get the input\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    \n    # Find the number of elements to replace\n    replacements = 0\n    for i in a:\n        if i == 0:\n            replacements += 1\n    \n    # Compare if replacements are in b\n    for i in range(replacements):\n        if b.count(a[i]) == 0:\n            return \"No\"\n    \n    # Return Yes if replacements are in b\n    return \"Yes\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin.split(\" \")\n    x, y, z = int(x), int(y), int(z)\n    a, b, c = stdin.split(\" \")\n    a, b, c = int(a), int(b), int(c)\n    return \"YES\" if ((x + a) % 2) == 0 and (y + b) % 2 == 0 and (z + c) % 2 == 0 else \"NO\"\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom itertools import product\nfrom typing import Dict\n\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    if x + y + z == 2 * a + 2 * b + c:\n        return \"YES\"\n    return \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if there is a solution to the problem\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: [description]\n    \"\"\"\n    return \"YES\" if can_be_distributed(list(map(int, stdin.split(' ')))) else \"NO\"\n\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(s) for s in stdin.split()]\n    a, b, c = [int(s) for s in stdin.split()]\n    \n    return \"YES\" if (b * 2 + c) < (a + y) else \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, y, z = [int(x) for x in stdin.split()]\n    a, b, c = [int(x) for x in stdin.split()]\n    if c < a:\n        return \"NO\"\n    if c < b:\n        return \"NO\"\n    if c < x:\n        return \"NO\"\n    if c >= x and c < x + y:\n        return \"NO\"\n    if c >= x + y and c < x + y + z:\n        return \"NO\"\n    if c >= x + y + z:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nx, y, z = [int(c) for c in stdin.split(\"\\n\")[0].split(\" \")]\na, b, c = [int(c) for c in stdin.split(\"\\n\")[1].split(\" \")]\nprint(\"YES\" if a + b >= x + y and a + c >= y + z and c + b >= x + z else \"NO\")\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, y, z = [int(s) for s in stdin.split()]\n    a, b, c = [int(s) for s in stdin.split()]\n\n    def possible(n):\n        return 2 * n >= x + y + c\n\n    if possible(a):\n        if possible(b):\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nfrom itertools import product\n\nx, y, z = [int(i) for i in stdin.split()]\na, b, c = [int(i) for i in stdin.split()]\n\nprint('YES' if (x, y, z) in product([x, y, z], [a - x, b - y, c - z], [0, 0, 0]) else 'NO')"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    lights = [[int(l[0]), int(l[1]), int(l[2]), int(l[3])],\n              [int(l[4]), int(l[5]), int(l[6]), int(l[7])],\n              [int(l[8]), int(l[9]), int(l[10]), int(l[11])],\n              [int(l[12]), int(l[13]), int(l[14]), int(l[15])]]\n    cars = [0, 1]\n    pedestrians = [1, 0]\n    return \"YES\" if check(lights, cars, pedestrians) else \"NO\"\n\ndef"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    roads = [list(map(int, line.split())) for line in stdin]\n    return 'YES' if any(len(set(sorted(part, reverse=True))) < 4 for part in zip(*roads)) else 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    road_1 = [int(stdin[i]) for i in range(4)]\n    road_2 = [int(stdin[i]) for i in range(4, 8)]\n    road_3 = [int(stdin[i]) for i in range(8, 12)]\n    road_4 = [int(stdin[i]) for i in range(12, 16)]\n    possible_accidents = []\n    for i in range(4):\n        if road_1[i] == 0 and road_2[i] == 0 and road_3[i] == 0 and road_4[i] == 0:\n            possible_accidents.append(i)\n    for i in range(4):\n        if road_1[i] == 1 and road_2[i] == 1 and road_3[i] == 1 and road_4[i] == 1:\n            possible_accidents.append(i)\n    for i in range(4):\n        if road_1[i] == 0 and road_2[i] == 0 and road_3[i] == 0 and road_4[i] == 1:\n            possible_accidents.append(i)\n    for i in range(4):\n        if road_1[i] == 0 and road_2[i] == 0 and road_3[i] == 1 and road_4[i] == 0:\n            possible_accidents.append(i)\n    for i in range(4):\n        if road_1[i] == 0 and road_2[i] == 1 and road_3[i] == 0 and road_4[i] == 0:\n            possible_accidents.append(i)\n    for i in range(4):\n        if road_1[i] == 0 and road_2[i] == 0 and road_3[i] == 0 and road_4[i] == 1:\n            possible_accidents.append(i)\n    for i in range(4):\n        if road_1[i] == 1 and road_2[i] == 0 and road_3[i] == 1 and road_4[i] == 1:\n            possible_accidents.append(i)\n    if len(possible_accidents) > 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(\"0 1 1 0 0 0 1 1 1 1\"))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    roads = [[int(char) for char in stdin.strip().split(\" \")] for _ in range(4)]\n    crossings = []\n    for road in roads:\n        crossings.extend([road[0], road[2]])\n    crossings = list(set(crossings))\n\n    for crossing in crossings:\n        visited = []\n        for road in roads:\n            if crossing in road[1:3]:\n                visited.append(road)\n        for road in visited:\n            for i in range(1, 3):\n                if road[i] == 1 and (road[i + 1] == 0 or road[i - 1] == 0):\n                    return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '':\n        return 'YES'\n\n    road_config = list(map(int, stdin.split()))\n\n    is_possible = True\n    for i in range(4):\n        p_lights = [road_config[i * 4], road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3]]\n        if 1 not in p_lights:\n            continue\n        for j in range(4):\n            if j == 0:\n                l_lights = [road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3], road_config[i * 4 + 4]]\n            elif j == 1:\n                l_lights = [road_config[i * 4], road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3]]\n            elif j == 2:\n                l_lights = [road_config[i * 4], road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3]]\n            elif j == 3:\n                l_lights = [road_config[i * 4], road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3]]\n            for l in range(4):\n                if l == 0:\n                    s_lights = [road_config[i * 4 + 2], road_config[i * 4 + 3], road_config[i * 4 + 4], road_config[i * 4 + 5]]\n                elif l == 1:\n                    s_lights = [road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3], road_config[i * 4 + 4]]\n                elif l == 2:\n                    s_lights = [road_config[i * 4], road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3]]\n                elif l == 3:\n                    s_lights = [road_config[i * 4], road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3]]\n                for s in range(4):\n                    if s == 0:\n                        r_lights = [road_config[i * 4 + 3], road_config[i * 4 + 4], road_config[i * 4 + 5], road_config[i * 4 + 6]]\n                    elif s == 1:\n                        r_lights = [road_config[i * 4 + 2], road_config[i * 4 + 3], road_config[i * 4 + 4], road_config[i * 4 + 5]]\n                    elif s == 2:\n                        r_lights = [road_config[i * 4], road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3]]\n                    elif s == 3:\n                        r_lights = [road_config[i * 4], road_config[i * 4 + 1], road_config[i * 4 + 2], road_config[i * 4 + 3]]\n                    if (road_config[i * 4 + l] == 1 and road_config[i * 4 + s] == 1) and (road_config[i * 4 + r] == 1):\n                        is_possible = False\n                        break\n                if not is_possible:\n                    break\n            if not is_possible:\n                break\n        if not is_possible:\n            break\n\n    if is_possible:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_light_status(road_part: str) -> str:\n        lights = {\"left\": {\"p\": road_part[0], \"l\": road_part[1], \"s\": road_part[2]},\n                  \"straight\": {\"p\": road_part[3], \"l\": road_part[4], \"s\": road_part[5]},\n                  \"right\": {\"p\": road_part[6], \"l\": road_part[7], \"s\": road_part[8]}\n                  }\n        #   lights = {\n        #       \"left\": {\"p\": road_part[0], \"l\": road_part[1], \"s\": road_part[2]},\n        #       \"straight\": {\"p\": road_part[3], \"l\": road_part[4], \"s\": road_part[5]},\n        #       \"right\": {\"p\": road_part[6], \"l\": road_part[7], \"s\": road_part[8]}\n        #   }\n        \n        return lights\n    \n    stdin = stdin.strip()\n    road_parts = [stdin[i:i+9] for i in range(0, len(stdin), 9)]\n    \n    light_status = []\n    for part in road_parts:\n        light_status.append(get_light_status(part))\n    \n    for i in range(len(road_parts)):\n        for side in [\"left\", \"straight\", \"right\"]:\n            for idx in range(len(road_parts[i][side])):\n                if (road_parts[i][side][idx] == \"1\") and (light_status[i][side][\"p\"] == \"1\"):\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    pass\n\ndef"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    roads = [list(map(int, road.strip().split())) for road in stdin.split('\\n')]\n    lights = {(0, 0, 1, 0): 'YES', (1, 0, 0, 1): 'YES', (0, 1, 0, 0): 'NO'}\n    for road in roads:\n        if road[3] == 1:\n            lights.update(all_combinations(road))\n    return lights[(0, 0, 0, 0)]\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ...\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n-----Test Case-----\n\n- Multiple Choice\n- Matching\n- Keyboard\n- Tiling\n- Permutation\n- Numberline\n- Recursion\n\n'''\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if len(stdin)!= 3 else 'YES'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_digits = int(stdin.split('\\n')[0])\n    digits_string = stdin.split('\\n')[1]\n    digits = []\n    for digit in digits_string:\n        digits.append(int(digit))\n    all_possible_digits = []\n    for n in range(10):\n        possible_digits = []\n        for digit in digits:\n            possible_digits.append(n)\n        all_possible_digits.append(possible_digits)\n\n    for possible_digits in all_possible_digits:\n        valid = True\n        for i in range(num_digits - 1):\n            if possible_digits[i]!= possible_digits[i + 1]:\n                valid = False\n                break\n        if valid:\n            print('YES')\n            break\n\n    if not valid:\n        print('NO')\n\nsolution(stdin)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == len(stdin.readline()):\n        return \"YES\"\n    return \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    phone_number = [int(n) for n in stdin]\n    digits = len(phone_number)\n    pressed_keys = {}\n    \n    for i in range(digits):\n        pressed_keys[i] = 0\n        for j in range(i, digits):\n            pressed_keys[i] = pressed_keys[i] * 10 + phone_number[j]\n            if i == j:\n                break\n            \n    for number in pressed_keys.values():\n        if number == pressed_keys[0]:\n            continue\n        if number in pressed_keys.values():\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n911\")\n    NO\n    >>> solution(\"2\\n09\")\n    NO\n    >>> solution(\"9\\n123456789\")\n    YES\n    >>> solution(\"3\\n911\")\n    YES\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    phone_number = stdin[1]\n    key_length = len(phone_number)\n    d = {'0': {'0': '0', '1': '1'}, '1': {'0': '2', '1': '3'}, '2': {'0': '4', '1': '5'}, '3': {'0': '6', '1': '7'},\n         '4': {'0': '8', '1': '9'}, '5': {'0': 'A', '1': 'B'}, '6': {'0': 'C', '1': 'D'}, '7': {'0': 'E', '1': 'F'},\n         '8': {'0': 'G', '1': 'H'}, '9': {'0': 'I', '1': 'J'}, 'A': {'0': 'K', '1': 'L'}, 'B': {'0': 'M', '1': 'N'},\n         'C': {'0': 'O', '1': 'P'}, 'D': {'0': 'Q', '1': 'R'}, 'E': {'0': 'S', '1': 'T'}, 'F': {'0': 'U', '1': 'V'},\n         'G': {'0': 'W', '1': 'X'}, 'H': {'0': 'Y', '1': 'Z'}}\n    d_keys = {}\n    for i in range(key_length):\n        d_keys[phone_number[i]] = d[phone_number[i]][phone_number[(i + 1) % key_length]]\n    print(d_keys)\n    for key in d_keys.keys():\n        for key1 in d_keys.keys():\n            if key!= key1:\n                if d_keys[key] == d_keys[key1]:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == 2 else 'NO'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given input, return output.\"\"\"\n\n    # Your code here\n\"\"\"\nn, f = map(int, stdin.readline().split())\n\nproducts = []\nfor _ in range(n):\n    products.append(tuple(map(int, stdin.readline().split())))\n\ndp = [[0 for _ in range(f + 1)] for _ in range(n + 1)]\n\nfor i in range(n):\n    for j in range(f + 1):\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + products[i][0] * products[i][1])\n\nprint(dp[n - 1][f])\n\"\"\"\n\nn, f = map(int, input().split())\nproducts = []\nfor _ in range(n):\n    products.append(list(map(int, input().split())))\n\ndp = [[0 for _ in range(f + 1)] for _ in range(n + 1)]\n\nfor i in range(n):\n    for j in range(f + 1):\n        if j == 0:\n            dp[i + 1][j] = dp[i][j]\n        elif j == i + 1:\n            dp[i + 1][j] = max(dp[i][j - 1], products[i][0] * products[i][1])\n        else:\n            dp[i + 1][j] = max(dp[i][j - 1], dp[i][j - 2] + products[i][0] * products[i][1])\n\nprint(dp[n][f])"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 1\\n0 2\\n0 3\\n3 5\\n0 6\\n')\n    5\n    \"\"\"\n    data = stdin.splitlines()\n    n, f = (int(d) for d in data[:2])\n    days = [int(d) for d in data[2:]]\n    days = [days[i - 1:i + 2] for i in range(1, len(days), 2)]\n    res = [sum([a * b for a, b in days[:i + 1]]) for i in range(f)]\n    return max(res)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def product(a: List[int]) -> int:\n        total = 1\n        for x in a:\n            total *= x\n        return total\n    n, f = map(int, stdin.split('\\n')[0].split())\n    c = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, n + 1)]\n    dp = [[[0, []] for _ in range(n)] for _ in range(f + 1)]\n    for i in range(n):\n        for j in range(f + 1):\n            for k in range(j + 1):\n                prod = c[i][0] * k\n                if prod * c[i][1] > prod * dp[j][i][0]:\n                    dp[j][i][0] = prod * c[i][1]\n                    dp[j][i][1] = dp[j][i][1] + [k]\n    total = 0\n    for i in range(f + 1):\n        total = max(total, product(dp[i][n - 1][1]))\n    print(total)\n    return\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def create_matrix(n: int, m: int, s: str):\n        return [list(map(int, s[i:i+m])) for i in range(0, len(s), m)]\n\n    def print_matrix(m: list):\n        for row in m:\n            print(' '.join(list(map(str, row))))\n\n    n, m = stdin.split('\\n')[:2]\n    matrix = create_matrix(int(n), int(m), stdin)\n    print_matrix(matrix)\n    return matrix[0][0]\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, f = [int(x) for x in stdin.split()]\n    l = []\n    for _ in range(n):\n        l.append([int(x) for x in stdin.split()])\n    ans = 0\n    for x in range(f):\n        s = 0\n        for y in range(n):\n            s += l[y][0]\n            l[y][0] = 0\n            l[y][1] += l[y][1]\n            if l[y][1] > 0:\n                l[y][0] = l[y][1]\n                l[y][1] = 0\n            l[y][0] *= 2\n        ans = max(s, ans)\n    print(ans)\n    return ''\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\\n0 2\\n0 3\\n3 5\\n0 6\\n\")\n    10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, f = [int(s) for s in stdin.split(\" \")]\n    # k, l = [list(map(int, s.split(\" \"))) for s in stdin.split(\"\\n\")[:n]]\n    # print(k)\n    # print(l)\n    n, f = 4, 1\n    k, l = [2, 1], [3, 5]\n    k_new, l_new = [0] * n, [0] * n\n    for i in range(f):\n        for j in range(n):\n            k_new[j] += k[j]\n            l_new[j] += l[j]\n            k_new[j] %= 2\n            l_new[j] %= 2\n            if k_new[j] == 0:\n                l_new[j] -= 1\n            if l_new[j] == 0:\n                k_new[j] -= 1\n    print(k_new)\n    print(l_new)\n    return \"1\""
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    r = []\n    for i in range(n):\n        r.append((s[i] // 2, s[i] // 2))\n    r.sort()\n    r.append((0, 0))\n    return r[f][1]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution currently has an efficiency of O(n^2)\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution output\n    \"\"\"\n    n, k = list(map(int, stdin.split(\" \")))\n    cows = list(map(int, stdin.split(\" \")))\n\n    def findMaxSwaps(cows: list) -> int:\n        max = 0\n        for i in range(len(cows) - 1):\n            swaps = 0\n            for j in range(i + 1, len(cows)):\n                if cows[i] > cows[j]:\n                    swaps += 1\n            if swaps > max:\n                max = swaps\n        return max\n    return findMaxSwaps(cows)"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    [n, k] = map(int, stdin.split())\n    cows = [0] * n\n    for i in range(n):\n        cows[i] = i + 1\n    s = set()\n    res = 0\n    for _ in range(k):\n        l, r = stdin.split()\n        l, r = int(l), int(r)\n        s.add((l, r))\n        if len(s) > res:\n            res = len(s)\n        m1, m2 = cows[l - 1], cows[r - 1]\n        cows[l - 1], cows[r - 1] = m2, m1\n        s.remove((l, r))\n        s.add((m1, m2))\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return number of pairs of cows that is larger than another pair of cows\n    \"\"\"\n    n, k = list(map(int, stdin.split(' ')))\n    cows = [i + 1 for i in range(n)]\n    i = 0\n    while i < k:\n        new_cows = [0] * n\n        for j in range(n):\n            new_cows[j] = cows[cows[j] - 1]\n        for j in range(n):\n            if cows[j] > new_cows[j]:\n                cows[j] = new_cows[j]\n        i += 1\n    return sum(map(lambda x: x[1] - x[0], zip(cows[:-1], cows[1:])))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.split())\n    return n * (n - 1) // 2"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    sorted_arr = sorted(arr)\n    swap_count = 0\n    for i in range(n):\n        for j in range(n - i - 1):\n            if sorted_arr[j] > sorted_arr[j + 1]:\n                sorted_arr[j], sorted_arr[j + 1] = sorted_arr[j + 1], sorted_arr[j]\n                swap_count += 1\n            if swap_count == k:\n                break\n        if swap_count == k:\n            break\n    return str(swap_count)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"Hello, World!\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = list(map(int, stdin.split()))\n    if N < M:\n        return '-1'\n    coins = list(map(int, stdin.split()))\n    coins.sort()\n    if K > coins[-1]:\n        return '-1'\n    if M * K < L:\n        return '-1'\n    return coins[-L]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = stdin.split()\n    N, M, K, L = int(N), int(M), int(K), int(L)\n    set_n = set(range(1, N + 1))\n    new_set_n = set()\n    ans = 0\n    for i in range(M):\n        s = input()\n        s = set(map(int, s.split()))\n        if len(set_n - s) < L:\n            continue\n        ans += 1\n        new_set_n = new_set_n.union(s)\n    new_set_n = set_n - new_set_n\n    if len(new_set_n) < K:\n        print(-1)\n    else:\n        print(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return solution\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n    if k >= n or l >= m:\n        return -1\n    if m * k >= n:\n        return n\n    if m == 0:\n        return n * k\n\n    result = n\n    for coin in range(n):\n        # if len(set(map(int, stdin.split()))) == n:\n        if m * k <= n:\n            result = min(result, n - m * k + coin + 1)\n    return result\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = [int(i) for i in stdin.split()]\n    if l > n or m > n * (n - 1) / 2 or m < 0 or k > n or k < 0:\n        return \"-1\"\n    elif k == 0 and m == 0 and l == 0:\n        return \"0\"\n    else:\n        return str(m // (k + 1) + m // (k - 1) - (m // k + m // (k - 1) - (m // k - m // (k - 1))))\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport itertools\nimport unittest\nfrom collections import Counter\nfrom functools import reduce\n\nimport numpy as np\n\ntry:\n    import utils\nexcept ModuleNotFoundError:\n    import solution as utils\n\n\nclass TestToday(unittest.TestCase):\n    def test_case_0(self):\n        assert solution(\"4 2 1 2\") == 1\n\n    def test_case_1(self):\n        assert solution(\"10 9 2 3\") == -1\n\n    def test_case_2(self):\n        assert solution(\"100 100 100 100\") == -1\n\n    def test_case_3(self):\n        assert solution(\"20 15 2 3\") == 1\n\n    def test_case_4(self):\n        assert solution(\"10 10 10 10\") == -1\n\n    def test_case_5(self):\n        assert solution(\"11 2 4 2\") == -1\n\n    def test_case_6(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_7(self):\n        assert solution(\"20 10 2 3\") == -1\n\n    def test_case_8(self):\n        assert solution(\"1 1 1 1\") == 1\n\n    def test_case_9(self):\n        assert solution(\"10 10 1 10\") == 1\n\n    def test_case_10(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_11(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_12(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_13(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_14(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_15(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_16(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_17(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_18(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_19(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_20(self):\n        assert solution(\"20 20 20 20\") == 1\n\n    def test_case_21(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_22(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_23(self):\n        assert solution(\"20 10 2 3\") == -1\n\n    def test_case_24(self):\n        assert solution(\"20 20 20 20\") == -1\n\n    def test_case_25(self):\n        assert solution(\"10 10 10 10\") == -1\n\n    def test_case_26(self):\n        assert solution(\"10 10 10 10\") == -1\n\n    def test_case_27(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_28(self):\n        assert solution(\"10 10 10 10\") == 1\n\n    def test_case_29(self):\n        assert solution(\"100 100 100 100\") == -1\n\n    def test_case_30(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_31(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_32(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_33(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_34(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_35(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_36(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_37(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_38(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_39(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_40(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_41(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_42(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_43(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_44(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_45(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_46(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_47(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_48(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_49(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_50(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_51(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_52(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_53(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_54(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_55(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_56(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_57(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_58(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_59(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_60(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_61(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_62(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_63(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_64(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_65(self):\n        assert solution(\"100 100 100 100\") == 1\n\n    def test_case_66(self):\n        assert solution(\"100 100 1 1\") == 1\n\n    def test_case_67(self):\n        assert solution(\"100 100 100 100\")"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    print(max(min(M, K)//L, min(N, K)//L))\n\n-----Solution-----\n\nIt's a simple solution.\n\n\"\"\"\n\nfrom typing import NamedTuple\n\nclass Solution(NamedTuple):\n    count: int\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    N, M, K, L = list(map(int, stdin.split()))\n\n    count = 0\n    for m in range(M):\n        for k in range(K):\n            for n in range(N):\n                if k * n + m >= L:\n                    count += 1\n                    break\n    return str(count) if count else '-1'\n\nprint(solution('20 15 2 3'))\nprint(solution('10 11 2 4'))\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n    coins = set(range(k, n+1))\n    all_coins = set(range(1, n+1))\n    friends = set(map(int, stdin.split()[1:]))\n    if m + 1 > k or m + 1 > n or len(friends) < m:\n        return \"-1\"\n    return str(len(all_coins - coins) - len(friends))\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size_n, size_m = [int(x) for x in stdin.split(\" \")]\n    nums = [x for x in stdin.split(\" \")]\n    pos = 0\n    ans = 0\n    while pos < size_m:\n        if nums[pos][pos] == \"W\":\n            break\n        else:\n            ans += 1\n        pos += 1\n    if pos == size_m:\n        return str(ans)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [list(map(str, stdin.split())) for _ in range(n)]\n    dp = [[[0 for _ in range(n)] for _ in range(m)] for _ in range(n)]\n    def bfs(x, y, w, h):\n        dp[x][y][w] = 1\n        q = collections.deque([(x, y, w)])\n        while q:\n            x, y, w = q.popleft()\n            for dx, dy in (1, 0), (0, 1), (-1, 0), (0, -1):\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and board[nx][ny] == 'B' and dp[nx][ny][w] == 0:\n                    dp[nx][ny][w] = 1\n                    q.append((nx, ny, w))\n                elif 0 <= nx < n and 0 <= ny < m and board[nx][ny] == 'W' and (w == 0 or w == 1):\n                    dp[nx][ny][w] = 1\n                    q.append((nx, ny, w))\n    ans = 1e9\n    for x in range(n):\n        for y in range(m):\n            if board[x][y] == 'B' and dp[x][y][0] == 0 and dp[x][y][1] == 0:\n                bfs(x, y, 1, 0)\n    for x in range(n):\n        for y in range(m):\n            for w in range(2):\n                ans = min(ans, dp[x][y][w])\n    return -1 if ans == 1e9 else ans"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # We need n and m\n    n, m = [int(x) for x in stdin.split()]\n    # We need n and m\n    n, m = [int(x) for x in stdin.split()]\n\n    # I have an idea:\n    # We will add each number to a set and check if the sum of numbers is not divisible by n\n    # If it is divisible, then we must add m to the result\n    result = 0\n    s = set()\n    for i in range(n):\n        for j in range(m):\n            s.add(i+j)\n\n    for num in s:\n        if num % n!= 0:\n            result += m\n\n    return str(result)"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    size_sheet = stdin.split('\\n')\n    sheet = []\n    for row in size_sheet:\n        sheet.append([elem for elem in row])\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043b\u0435\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b\n    min_left_side = 0\n    for row in sheet:\n        min_left_side += row.count('W')\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b\n    min_right_side = 0\n    for row in sheet:\n        min_right_side += row.count('B')\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f\n    max_down_side = 0\n    for index, row in enumerate(sheet):\n        max_down_side += row.count('W')\n        if row.count('B') < min_right_side:\n            min_right_side = row.count('B')\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b\n    max_up_side = 0\n    for row in sheet[::-1]:\n        max_up_side += row.count('B')\n        if row.count('W') < min_left_side:\n            min_left_side = row.count('W')\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432\n    count_squares = 0\n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435\n    for index, row in enumerate(sheet):\n        if row.count('B') < min_right_side:\n            break\n        count_squares += 1\n        if index == len(sheet) - 1:\n            count_squares += 1\n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043f\u0440\u0430\u0432\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435\n    for index, row in enumerate(sheet):\n        if row.count('W') < min_left_side:\n            break\n        count_squares += 1\n        if index == len(sheet) - 1:\n            count_squares += 1\n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043d\u0438\u0436\u043d\u0435\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435\n    for index, row in enumerate(sheet[::-1]):\n        if row.count('B') < min_left_side:\n            break\n        count_squares += 1\n        if index == len(sheet) - 1:\n            count_squares += 1\n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043b\u0435\u0432\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435\n    for index, row in enumerate(sheet[::-1]):\n        if row.count('W') < min_right_side:\n            break\n        count_squares += 1\n        if index == len(sheet) - 1:\n            count_squares += 1\n    # \u0415\u0441\u043b\u0438 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432, \u0442\u043e \u043d\u0435\u043b\u044c\u0437\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\n    if count_squares < 4:\n        return -1\n    # \u041f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0432 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0435\n    count_squares = (min_left_side + min_right_side) * 2 - 4\n    if count_squares % 4 > 0:\n        count_squares += 4 - count_squares % 4\n    return count_squares\n    \n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    row, col = map(int, stdin.split())\n    map_ = []\n    for _ in range(row):\n        map_.append(stdin.split()[1:])\n    # return str(len(map_[0]))\n    for row_idx, row in enumerate(map_):\n        for col_idx, col in enumerate(row):\n            if col == 'W':\n                for i in range(row_idx, 0, -1):\n                    if map_[i][col_idx] == 'B':\n                        map_[i][col_idx], map_[i - 1][col_idx] = map_[i - 1][col_idx], map_[i][col_idx]\n                        break\n            if col == 'B':\n                for i in range(row_idx, len(map_)):\n                    if map_[i][col_idx] == 'W':\n                        map_[i][col_idx], map_[i - 1][col_idx] = map_[i - 1][col_idx], map_[i][col_idx]\n                        break\n    for row_idx, row in enumerate(map_):\n        for col_idx, col in enumerate(row):\n            if col == 'W':\n                for i in range(col_idx, 0, -1):\n                    if map_[row_idx][i] == 'B':\n                        map_[row_idx][i], map_[row_idx][i - 1] = map_[row_idx][i - 1], map_[row_idx][i]\n                        break\n    for row_idx, row in enumerate(map_):\n        for col_idx, col in enumerate(row):\n            if col == 'B':\n                for i in range(col_idx, len(map_[0])):\n                    if map_[row_idx][i] == 'W':\n                        map_[row_idx][i], map_[row_idx][i - 1] = map_[row_idx][i - 1], map_[row_idx][i]\n                        break\n    for row_idx, row in enumerate(map_):\n        for col_idx, col in enumerate(row):\n            if col == 'W':\n                for i in range(row_idx, 0, -1):\n                    if map_[i][col_idx] == 'B':\n                        map_[i][col_idx], map_[i - 1][col_idx] = map_[i - 1][col_idx], map_[i][col_idx]\n                        break\n    for row_idx, row in enumerate(map_):\n        for col_idx, col in enumerate(row):\n            if col == 'B':\n                for i in range(row_idx, len(map_)):\n                    if map_[i][col_idx] == 'W':\n                        map_[i][col_idx], map_[i - 1][col_idx] = map_[i - 1][col_idx], map_[i][col_idx]\n                        break\n    # print('\\n'.join([''.join([str(x) for x in y]) for y in map_]))\n    for row_idx, row in enumerate(map_):\n        for col_idx, col in enumerate(row):\n            if col == 'W':\n                return '-1'\n    return str(row * col)\n\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if n == m:\n        return \"-\"\n    else:\n        return n + m - 2\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    ans = 0\n    matrix = [list(stdin[i * m:(i + 1) * m]) for i in range(n)]\n    def is_square(matrix):\n        return all(matrix[0][0] == x[0] == x[-1] for x in matrix) and \\\n               all(matrix[i][0] == x[0] == x[-1] for x in matrix[i])\n    def find_cell(matrix, is_wanted):\n        for r, row in enumerate(matrix):\n            for c, cell in enumerate(row):\n                if is_wanted!= cell:\n                    return r, c\n    for r in range(n - 1, -1, -1):\n        for c in range(m - 1, -1, -1):\n            if matrix[r][c] == 'W':\n                nr, nc = find_cell(matrix, 'B')\n                if (nr, nc) == (r, c):\n                    matrix[nr][nc] = 'B'\n                else:\n                    matrix[r][c] = 'B'\n                    matrix[nr][nc] = 'B'\n                ans += 2\n    if not is_square(matrix):\n        return '-1'\n    else:\n        return str(ans)"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    x = list(map(int, stdin[1].split(' ')))\n    y = list(map(int, stdin[2].split(' ')))\n\n    if sorted(x) == sorted(y):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input().split()))\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_ints(input_str: str) -> List[int]:\n        return [int(s) for s in input_str.split(' ') if s.isdigit()]\n\n    n = int(stdin)\n    x = get_ints(stdin)\n    y = get_ints(stdin)\n\n    print('YES' if x == y else 'NO')"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a solution to the problem\"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please use the provided template to implement your solution.\n    # Do not use input().\n    # This function should return the template string.\n    # The input is provided as a string, so you should use the string functions and slices to parse it.\n    # If you need to do it, convert the string into the list.\n    # Example:\n    # string_to_list(\"1 2 3\") -> ['1', '2', '3']\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(\" \")))\n    y = list(map(int, stdin.readline().strip().split(\" \")))\n    if x == y:\n        return \"Yes\"\n    return \"No\"\n\nsolution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\")\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    init = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    ans = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n    init.sort()\n    ans.sort()\n    if N == 1:\n        return 'Yes' if init == ans else 'No'\n    elif N == 2:\n        return 'Yes' if init == ans and init[0] < ans[1] or init == ans and init[0] > ans[1] else 'No'\n    else:\n        for i in range(N):\n            if init[i]!= ans[i]:\n                break\n        if i == 0:\n            j = N - 1\n        else:\n            j = i - 1\n        if j == 0:\n            return 'Yes'\n        else:\n            return 'No'\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (x == y) and (x.count(0) == x.count(1) - 1) and (y.count(0) == y.count(1) - 1) else \"No\"\n\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nprint(\"Yes\" if (x == y) and (x.count(0) == x.count(1) - 1) and (y.count(0) == y.count(1) - 1) else \"No\")\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find if the notes are correct.\"\"\"\n    stones = [int(line) for line in stdin.split('\\n')]\n    stones_first, stones_second = stones[:stones.index(0)], stones[stones.index(0) + 1:]\n    if all(stones_first[i] == stones_second[i] for i in range(len(stones_first))):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    angles = list(map(int, stdin.readline().strip().split()))\n\n    print(abs(sum(angles) - 2 * sum(angles[:n // 2])))\n\n\nsolution(\"4\\n90 90 90 90\")\nsolution(\"3\\n100 100 160\")\nsolution(\"1\\n360\")\nsolution(\"4\\n170 30 150 10\")\n\ndef"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n    return str(min([abs(lst[i] - lst[i + 1]) for i in range(0, n - 1, 2)]))\n\n\ndef"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    list_of_angle = [int(number) for number in stdin.readline().split(\" \")]\n    angle = 360 - sum(list_of_angle)\n    list_of_angle.append(angle)\n    if n == 1:\n        return str(angle)\n    n = n + 1\n    list_of_angle.sort()\n    list_of_angle_for_vasya = []\n    list_of_angle_for_petya = []\n    count_vasya = 0\n    count_petya = 0\n    count = 0\n    count_both = 0\n    while count!= n:\n        if angle > sum(list_of_angle_for_vasya):\n            list_of_angle_for_vasya.append(angle)\n            count_vasya += 1\n            count += 1\n        elif angle < sum(list_of_angle_for_petya):\n            list_of_angle_for_petya.append(angle)\n            count_petya += 1\n            count += 1\n        elif count_both!= 1:\n            list_of_angle_for_vasya.append(angle)\n            count_vasya += 1\n            count_both += 1\n        if count == n:\n            break\n        if count_vasya == n - 1:\n            break\n        angle = 360 - sum(list_of_angle)\n    # print(sum(list_of_angle_for_vasya), sum(list_of_angle_for_petya))\n    if sum(list_of_angle_for_vasya) == sum(list_of_angle_for_petya):\n        return str(0)\n    if sum(list_of_angle_for_vasya) < sum(list_of_angle_for_petya):\n        for angle in list_of_angle_for_petya:\n            list_of_angle_for_vasya.append(angle)\n    if sum(list_of_angle_for_vasya) > sum(list_of_angle_for_petya):\n        for angle in list_of_angle_for_vasya:\n            list_of_angle_for_petya.append(angle)\n    return str(abs(sum(list_of_angle_for_vasya) - sum(list_of_angle_for_petya)))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The expected solution for this problem is given in the hint.\n    \"\"\"\n    # Convert input string to integer array.\n    angles = [int(angle) for angle in stdin.split()]\n\n    # Find sum of all angles.\n    sum_angles = sum(angles)\n\n    # Difference between all sectors is equal to the difference between their sum and sum of all angles.\n    # This difference will be minimal among all sectors.\n    return abs(sum_angles - sum(angles) * 2)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a: str) -> bool:\n        if not a.isdigit():\n            return False\n        return int(a) >= 1 and int(a) <= 360\n\n    def get_total_angle(a: str) -> int:\n        return int(a) + int(a)\n\n    a_str, b_str = stdin.split(\"\\n\")\n    a = [get_total_angle(a_str)]\n    for s in b_str.split():\n        a.append(get_total_angle(s))\n    a.sort()\n    return str(abs(a[0] - a[-1]))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin)\n    arr = [int(input()) for _ in range(n)]\n    arr.sort()\n    s = 0\n    for i in range(n):\n        s += arr[i]\n    s = 360 - s\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *angles = list(map(int, stdin.split('\\n')[0].split()))\n    diff = 360 * n\n    for i in range(n):\n        diff -= max(angles[i], angles[(i + 1) % n])\n    return str(diff)\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    print(stdin)\n    \n    return ''\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sizes = [int(x) for x in stdin.split('\\n')]\n    min_diff = 1000000000\n    for i in range(len(sizes) - 1):\n        if min_diff > abs(sizes[i] - sizes[i + 1]):\n            min_diff = abs(sizes[i] - sizes[i + 1])\n    return str(min_diff)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return n * m"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [0] * n\n    for _ in range(m):\n        k, *v = map(int, stdin.split())\n        arr[k - 1] = v\n    return n - len(set.union(*arr))"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, m = [int(i) for i in input[0].split(' ')]\n\n    # How many ways to pack n gifts\n    def ways_to_pack_n(n: int) -> int:\n        dp = [0] * (n + 1)\n        dp[1] = 1\n\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n\n        return dp[-1]\n\n    # How many ways to pack n gifts\n    def ways_to_pack_n_modulo_10_9_7(n: int) -> int:\n        dp = [0] * (n + 1)\n        dp[1] = 1\n\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n\n        return dp[-1] % (10 ** 9 + 7)\n\n    # How many ways to pack n gifts with m boxes\n    def ways_to_pack_n_m(n: int, m: int) -> int:\n        dp = [0] * (m + 1)\n        dp[0] = 1\n\n        for i in range(1, n + 1):\n            for j in range(m + 1):\n                dp[j] = (dp[j] + dp[j - 1]) % (10 ** 9 + 7)\n\n        return dp[-1]\n\n    # How many ways to pack n gifts with m boxes\n    def ways_to_pack_n_m_modulo_10_9_7(n: int, m: int) -> int:\n        dp = [0] * (m + 1)\n        dp[0] = 1\n\n        for i in range(1, n + 1):\n            for j in range(m + 1):\n                dp[j] = (dp[j] + dp[j - 1]) % (10 ** 9 + 7)\n\n        return dp[-1]\n\n    return str(ways_to_pack_n(n) * ways_to_pack_n_modulo_10_9_7(n, m))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, m = map(int, stdin.split())\n    x = 1\n    for i in range(n, n*m+1):\n        x *= i\n        x %= 10**9+7\n    return x"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Not yet implemented\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    presents = [list(map(int, stdin.split())) for _ in range(n)]\n\n    return n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    lines = stdin.splitlines()\n    n, m = list(map(int, lines[0].split(' ')))\n    \n    return f'{math.factorial(n) // (math.factorial(n - m) * math.factorial(m))}'\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_line_inp = stdin.split(\"\\n\")[0].split()\n    return str(int(first_line_inp[0]) ** int(first_line_inp[1]))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2, len(stdin.split()[0]), 10**9+7))\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i**2 + j**2 == n**2:\n                l.append((i, j))\n    if l:\n        l.sort(key=lambda x: x[0])\n        for i, j in l:\n            print(i, j)\n            return \"\"\n    print(-1)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"1 2\\n2 4\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        print('-1')\n    elif len(stdin) < 1:\n        print('-1')\n    else:\n        length = int(stdin)\n        i = 1\n        while i ** 2 < length:\n            j = 1\n            while j ** 2 < i:\n                k = length - i - j\n                if k ** 2 == i ** 2 + j ** 2:\n                    print(i, j, k)\n                    return\n                j += 1\n            i += 1\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int((n * 2) ** 0.5))\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    import math\n    n = int(stdin)\n    # a = [i for i in range(1, math.ceil(n / 2) + 1)]\n    # b = [i for i in range(1, math.ceil(n / 2) + 1)]\n    # print(a, b)\n    # for i in a:\n    #     for j in b:\n    #         if n == (i ** 2 + j ** 2):\n    #             print(i, j)\n    #             break\n    #         else:\n    #             continue\n    # print(-1)\n\n    for i in range(1, math.ceil(n / 2) + 1):\n        for j in range(1, math.ceil(n / 2) + 1):\n            if i ** 2 + j ** 2 == n:\n                print(i, j)\n                break\n        else:\n            continue\n    print(-1)\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, n + 1):\n        for k in range(1, m + 1):\n            if m * m == k * k + n * n:\n                return f\"{m} {k}\"\n    return \"-1\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    for m in range(1, 10 ** 18):\n        for k in range(1, 10 ** 18):\n            if (m ** 2 + k ** 2) == n ** 2 and m < k:\n                return (str(m) + \" \" + str(k))\n\n    return \"-1\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'Yes' if all remainders of n by all integers i from 1 to k are distinct,\n       'No' otherwise.\n\n    >>> solution('4 3')\n    'No'\n    >>> solution('5 3')\n    'Yes'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    # remove duplicate remainders\n    remainders = set(n % i for i in range(1, k + 1))\n    return 'Yes' if len(remainders) == k else 'No'\n\n\"\"\"\n--- Part Two ---\nImp got a problem: now the numbers look like this:\n\n\n\n1 2 3 4 5 6 7 8 9\n  |   |   |   |\n9 8 7 6 5 4 3 2 1\n  |   |   |   |\n\nIt is now clear that the remainders are not distinct anymore.\nNow Imp is considering the different remainders for each number in the range.\nFormally, for each number n, imp is trying to check whether:\n\n\nn \\text{mod} 1 = n \\text{mod} 2 = n \\text{mod} 3 = n \\text{mod} 4 = n \\text{mod} 5 = n \\text{mod} 6 = n \\text{mod} 7 = n \\text{mod} 8 = n \\text{mod} 9 = n\n\nImp is not convinced yet, and he is still considering other numbers. Help him!\n\nInput\n\nThe only line of the input contains two integers n and k (1 \u2264 n, k \u2264 10^18).\n\nOutput\n\nPrint \"Yes\", if Imp can prove that remainders are not distinct, and \"No\" otherwise.\n\nYou can print each letter in arbitrary case (lower or upper).\n\n--- Examples\n\nInput\n\n5 3\n\nOutput\n\nYes\n\nInput\n\n3 3\n\nOutput\n\nNo\n\nInput\n\n7 8\n\nOutput\n\nNo\n\"\"\"\n\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\"\\n\")\n    n, k = int(n), int(k)\n    if len(set([n % i for i in range(1, k + 1)])) == k:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n % m == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n'''"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = {}\n    for i in range(1, k + 1):\n        d[n % i] = i\n    for i in range(1, k + 1):\n        if d[i] == i:\n            return \"Yes\"\n    return \"No\"\n    \n\n\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"Yes\" if k == len(set(n % i for i in range(1, k + 1))) else \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem `Checking remainders modulo m`\n    \"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    count = 0\n    for i in range(1, m):\n        if n % i == 0:\n            count += 1\n\n    if count == m - 1:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = math.ceil(k**0.5)\n    for i in range(1, m + 1):\n        if n % i == 0:\n            j = n // i\n            if i == j:\n                return \"Yes\"\n            if i!= j and i + j == k:\n                return \"Yes\"\n    return \"No\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n\n    return 'No' if len(list(set(n % i for i in range(1, k + 1))))!= k else 'Yes'\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    if int(a) < int(b):\n        return \"<\"\n    elif int(a) > int(b):\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    return '<' if a < b else '>' if a > b else '='\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    return '>' if int(a) > int(b) else '<' if int(a) < int(b) else '='"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = int(stdin)\n    return '<' if x < y else '>' if x > y else '='"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    if int(a) == int(b):\n        return '='\n    elif int(a) > int(b):\n        return '>'\n    return '<'"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0:stdin.find(' ')]\n    b = stdin[stdin.find(' ')+1:]\n    if int(a) < int(b):\n        return '<'\n    elif int(a) > int(b):\n        return '>'\n    elif int(a) == int(b):\n        return '='\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    for i in a:\n        if i in b:\n            b = b.replace(i,'0')\n    if int(a) < int(b):\n        return '<'\n    elif int(a) > int(b):\n        return '>'\n    return '='"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, p] = [int(x) for x in stdin.split('\\n')[0].split()]\n    [c] = [int(x) for x in stdin.split('\\n')[1].split()]\n\n\n    return int(((n * (n + 1) / 2) ** p) % (10 ** 9 + 7))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    \n    return ''.join(map(str, answer(arr, p)))\n    \n    \ndef"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport itertools\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return '0'\n    \n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\""
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    if n == 1:\n        print(c[0] - 1)\n    else:\n        k = 1\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if c[j] * c[i] > 0:\n                    k *= 2\n        print((k - 1) * pow(2, n - 2, 10 ** 9 + 7) % (10 ** 9 + 7))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    result = n * (n-1) // 2 - 1\n    result = result // (p*(p+1))\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = list(map(int, stdin.split()))\n    min_count = 10 ** 9\n    for i in range(n, n + ((n + 1) // 4) * 4):\n        if i % 4 == 0:\n            if a * i + b * (i // 2) + c * (i // 3) <= min_count:\n                min_count = a * i + b * (i // 2) + c * (i // 3)\n    return str(min_count)\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n % 4 == 0:\n        return 0\n    if n % 4 == 3:\n        return a * n\n    if n % 4 == 1:\n        return a * n + b\n    if n % 4 == 2:\n        return a * n + b + c\n    \n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split(' ')]\n    return str(max(n % 4, min(a, b, c)))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = list(map(int, stdin.split(\" \")))\n\n    return str(max(0, a * n + b * (n // 2) + c * (n // 3)))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(min(a * n, b * (n // 2), c * (n // 3)))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split(' ')]\n    r = 0\n    while n + r % 4!= 0:\n        r += 1\n    return r\n\"\"\"\n\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Parses input and prints out solution.\"\"\"\n    n, a, b, c = [int(x) for x in stdin.split()]\n    print(\n        int(\n            math.ceil(n / 4)\n            * min(a, b, c)\n            + min(a, b, c)\n            * (n - math.ceil(n / 4) * 4)\n        )\n    )\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_books, num_a, num_b, num_c = map(int, stdin.split(' '))\n    return str(num_books // (num_a + num_b + num_c) * min(num_a, num_b, num_c))"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    ans = 0\n    if a == b == c:\n        ans = n * a // 4\n    elif a == b or b == c or a == c:\n        ans = n // 2\n    elif a!= b and b!= c:\n        ans = n // 4\n    else:\n        ans = -1\n    return str(ans)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split(' '))\n    return str(min(b*n//4 + a*(n%4), b*(n//4 + 1) + a*(n%4)))\n\n\n-----Test-----\n\nsolution()\n\n-----Problem-----\n\n\u0412 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u043e\u0441\u0442\u0430\u043d\u0443\u043b\u0438\u0441\u044c \u0434\u0432\u0430 \u0441\u043a\u043b\u0430\u0434\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f. \u041e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445 \u043a\u043b\u0430\u0434\u0435\u0442 \u0432 \u043a\u043e\u043b\u043e\u0434\u0443 \u0448\u0435\u0441\u0442\u044c \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a, \u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0434\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a. \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 9. \u0423 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0435\u0441\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u0432 \u043a\u043e\u043b\u043e\u0434\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c. \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 1:\n\n6 1 2 3\n\n4 9 5 6\n\n1 1 1 1\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0447\u0435\u0442\u043d\u044b\u043c. \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u043a\u0430\u0440\u0442\u0443 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432.\n\n\u041a\u0430\u0436\u0434\u0430\u044f \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0442\u0440\u0438 \u043a\u0430\u0440\u0442\u044b \u043e\u0442 \u0441\u0432\u043e\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430, \u0442.\u0435. \u043d\u0435\u043b\u044c\u0437\u044f \u0438\u043c\u0435\u0442\u044c \u0442\u0440\u0438 \u043a\u0430\u0440\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430, \u0442\u0440\u0438 \u043a\u0430\u0440\u0442\u044b \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0438\u043b\u0438 \u0442\u0440\u0438 \u043a\u0430\u0440\u0442\u044b \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430.\n\n\u041a\u0430\u0436\u0434\u0430\u044f \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e. \u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0430\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0432\u0441\u0435\u0445 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u0432 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0434\u043d\u043e\u0439 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438:\n\n1 1 1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0431\u044b\u0447\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438:\n\n9 9 9 9\n\n\n-----Problem-----\n\n\u0412 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u043e\u0441\u0442\u0430\u043d\u0443\u043b\u0438\u0441\u044c \u0434\u0432\u0430 \u0441\u043a\u043b\u0430\u0434\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f. \u041e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445 \u043a\u043b\u0430\u0434\u0435\u0442 \u0432 \u043a\u043e\u043b\u043e\u0434\u0443 \u0448\u0435\u0441\u0442\u044c \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a, \u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0434\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a. \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 9. \u0423 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 \u0435\u0441\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u0432 \u043a\u043e\u043b\u043e\u0434\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c. \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0438 1:\n\n6 1 2 3\n\n4 9 5 6\n\n1 1 1 1\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442\u043e\u0447\u0435\u043a \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0447\u0435\u0442\u043d\u044b\u043c. \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u043a\u0430\u0440\u0442\u0443 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432.\n\n\u041a\u0430\u0436\u0434\u0430\u044f \u043a\u0430\u0440"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem\"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    edges = []\n    for _ in range(m):\n        edges.append(stdin.split(' '))\n\n    for x in edges:\n        if x[0] == x[1]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = [int(x) for x in lines[0].split()]\n    edges = []\n    for i in range(1, m + 1):\n        edge = [int(x) for x in lines[i].split()]\n        edges.append(edge)\n    print(edges)\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n    print(graph)\n    in_degree = [0] * n\n    for i in range(n):\n        for j in graph[i]:\n            in_degree[j] += 1\n    print(in_degree)\n\n    "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(start: int, graph: dict, visited: list):\n        if start not in graph:\n            return False\n        if start in visited:\n            return True\n        visited.append(start)\n        for v in graph[start]:\n            if dfs(v, graph, visited):\n                return True\n        return False\n    def dfs2(start: int, graph: dict, visited: list):\n        if start in visited:\n            return True\n        visited.append(start)\n        for v in graph[start]:\n            if dfs2(v, graph, visited):\n                return True\n        return False\n\n    n, m = map(int, stdin.readline().split())\n    edges = [list(map(int, line.split())) for line in stdin.read().strip().split('\\n')]\n    graph = dict()\n    for x, y in edges:\n        if x in graph:\n            graph[x].append(y)\n        else:\n            graph[x] = [y]\n        if y in graph:\n            graph[y].append(x)\n        else:\n            graph[y] = [x]\n    # start = 1\n    # if dfs(start, graph, list()):\n    #     return 'YES'\n    # else:\n    #     start = 2\n    #     if dfs2(start, graph, list()):\n    #         return 'YES'\n    #     else:\n    #         return 'NO'\n    return 'NO' if len(edges) < n - 1 or len(edges) < n - 1 and dfs2(1, graph, list()) or dfs2(1, graph, list()) else 'YES'\n\nimport unittest\n\nclass TestDay1(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(solution('4 5\\n1 2\\n2 3\\n3 2\\n3 1\\n'), 'YES')\n\n    def test_case_2(self):\n        self.assertEqual(solution('3 4\\n1 2\\n2 3\\n3 2\\n3 1\\n'), 'NO')\n\n    def test_case_3(self):\n        self.assertEqual(solution('5 6\\n1 2\\n2 3\\n3 2\\n3 1\\n2 1\\n4 5\\n'), 'NO')\n\n    def test_case_4(self):\n        self.assertEqual(solution('1 2\\n2 1\\n'), 'NO')"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"You are given a directed graph consisting of n vertices and m edges (each edge is directed, so it can be traversed in only one direction). You are allowed to remove at most one edge from it.\n\nCan you make this graph acyclic by removing at most one edge from it? A directed graph is called acyclic iff it doesn't contain any cycle (a non-empty path that starts and ends in the same vertex).\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 500, 1 \u2264 m \u2264 min(n(n - 1), 100000)) \u2014 the number of vertices and the number of edges, respectively.\n\nThen m lines follow. Each line contains two integers u and v denoting a directed edge going from vertex u to vertex v (1 \u2264 u, v \u2264 n, u \u2260 v). Each ordered pair (u, v) is listed at most once (there is at most one directed edge from u to v).\n\n\n-----Output-----\n\nIf it is possible to make this graph acyclic by removing at most one edge, print YES. Otherwise, print NO.\n\n\n-----Examples-----\nInput\n3 4\n1 2\n2 3\n3 2\n3 1\n\nOutput\nYES\n\nInput\n5 6\n1 2\n2 3\n3 2\n3 1\n2 1\n4 5\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example you can remove edge $2 \\rightarrow 3$, and the graph becomes acyclic.\n\nIn the second example you have to remove at least two edges (for example, $2 \\rightarrow 1$ and $2 \\rightarrow 3$) in order to make the graph acyclic.\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import defaultdict, deque\nfrom typing import Dict, List, Set\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        graph[u].append(v)\n        graph[v].append(u)\n    graph_copy = [[] for _ in range(n)]\n    for u, v in graph:\n        graph_copy[u].append(v)\n    solution = []\n    for u, v in graph:\n        if graph_copy[u] and graph_copy[v]:\n            if graph_copy[u][0] in v and graph_copy[v][0] in u:\n                solution.append([u, v])\n    if not solution:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_nodes, num_edges = map(int, stdin.split())\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    # create an adjacency list\n    adjacency_list = {}\n    for edge in edges:\n        if edge[0] not in adjacency_list:\n            adjacency_list[edge[0]] = []\n        if edge[1] not in adjacency_list:\n            adjacency_list[edge[1]] = []\n        adjacency_list[edge[0]].append(edge[1])\n        adjacency_list[edge[1]].append(edge[0])\n    # generate all the edges and see if it can be acyclic\n    removed_edges = []\n    while len(removed_edges) < num_edges:\n        for i in range(num_nodes):\n            if i in adjacency_list:\n                for j in adjacency_list[i]:\n                    if (j, i) not in removed_edges and (i, j) not in removed_edges:\n                        if j in adjacency_list:\n                            adjacency_list[j].remove(i)\n                        if i in adjacency_list:\n                            adjacency_list[i].remove(j)\n                        removed_edges.append((i, j))\n                        removed_edges.append((j, i))\n                        if len(adjacency_list[j]) == 0:\n                            del adjacency_list[j]\n                        if len(adjacency_list[i]) == 0:\n                            del adjacency_list[i]\n                        break\n    if len(adjacency_list) > 0:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nclass Graph(object):\n    def __init__(self, edges):\n        self.edges = edges\n        self.graph_dict = {}\n\n        for start, end in self.edges:\n            if start in self.graph_dict:\n                self.graph_dict[start].append(end)\n            else:\n                self.graph_dict[start] = [end]\n\n    def get_paths(self, start, end, path=[]):\n        \"\"\"\n        :param graph: dict\n        :param start: starting node\n        :param end: end node\n        :param path: current path\n        :return: list of paths\n        \"\"\"\n        path = path + [start]\n\n        if start == end:\n            return [path]\n\n        if start not in self.graph_dict:\n            return []\n\n        paths = []\n        for node in self.graph_dict[start]:\n            if node not in path:\n                new_paths = self.get_paths(node, end, path)\n                for p in new_paths:\n                    paths.append(p)\n\n        return paths\n\n    def get_edge_count(self, start, end, path=[]):\n        path = path + [start]\n\n        if start == end:\n            return 1\n\n        if start not in self.graph_dict:\n            return 0\n\n        count = 0\n        for node in self.graph_dict[start]:\n            if node not in path:\n                count += self.get_edge_count(node, end, path)\n\n        return count\n\n    def check_if_acyclic(self):\n        for start, end in self.edges:\n            if self.get_edge_count(start, end) > 1:\n                return False\n\n        return True\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    c = 0\n    maxx = 0\n    for _ in range(n):\n        x, s = [int(x) for x in stdin.split(' ')]\n        c = max(c, x - s)\n        maxx = max(maxx, x + s)\n    return c + maxx - 1\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_range(key: str, range: str, ranges: Dict) -> Tuple[int, int]:\n        return ranges[key][0], ranges[key][1]\n\n    n, m = map(int, stdin.split())\n    ranges = dict()\n    for i in range(n):\n        x, s = map(int, stdin.split())\n        ranges[i + 1] = [x, x + s]\n\n    result = 0\n    i = 1\n    covered = set()\n    while i <= m:\n        covered = set(range(ranges[i][0], ranges[i][1] + 1))\n        for key, value in ranges.items():\n            if key in covered:\n                continue\n            start, end = get_range(key,'start', ranges)\n            if end + 1 in covered:\n                covered.update(range(start, end + 1))\n                result += 1\n        i += 1\n    return result\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\"\\n\")[0].split())\n    p = [map(int, stdin.split(\"\\n\")[i].split()) for i in range(1, N + 1)]\n    p.sort(key=lambda x: x[0])\n    i, s, ans = 0, 0, 0\n    for j in range(M + 1):\n        while i < N and p[i][0] <= j:\n            s = max(s, p[i][1])\n            i += 1\n        ans += j - s + 1\n    return str(ans)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    for i in range(n):\n        x, s = [int(x) for x in stdin.split('\\n')[i + 1].split()]\n        count += x - s\n        for j in range(s):\n            count += min(s, m - x)\n    return count\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = (int(x) for x in lines[0].split())\n    if n == 1 and m == 1:\n        return 0\n    x, s = (int(x) for x in lines[1].split())\n    result = x\n    for line in lines[2:]:\n        x, s = (int(x) for x in line.split())\n        if x <= m:\n            result += 1\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 50\\n3 1\\n\")\n    '30'\n    >>> solution(\"5 240\\n13 0\\n50 25\\n60 5\\n155 70\\n165 70\\n\")\n    '26'\n    \"\"\"\n    n, m = [int(x) for x in stdin.splitlines()[0].split()]\n    lst = [(int(x), int(y)) for x, y in [line.split() for line in stdin.splitlines()[1:]]]\n    lst.sort()\n    first, second = 0, 0\n    for x, s in lst:\n        if x - s < 1:\n            first = max(first, s)\n        elif x - s > m:\n            second = max(second, s)\n        else:\n            first = max(first, s)\n            second = max(second, s)\n    return str(first + second)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    # arr = sorted([[int(i) for i in stdin.split()] for i in range(n)], key=lambda x: x[0])\n    arr = []\n    for _ in range(n):\n        x, s = [int(i) for i in stdin.split()]\n        arr.append([x, s])\n    arr.sort()\n\n    arr_covered = set()\n    last_covered = 0\n    total_cost = 0\n    for x, s in arr:\n        if x in arr_covered:\n            continue\n        if x - last_covered < s:\n            s = x - last_covered\n            arr_covered.add(last_covered)\n        if x + s > m:\n            s = m - x\n        else:\n            arr_covered.add(x + s)\n        total_cost += s\n        last_covered = x + s\n    return str(total_cost)\n\nprint(solution(stdin))\n\n------\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [map(int, stdin.split(' ')) for _ in range(n)]\n\n    a.sort(key=lambda x: x[0])\n    res = 0\n    for i in range(n):\n        x, s = a[i]\n        x, s = x - 1, s - 1\n        l, r = x - s, x + s\n        while l > 0:\n            if l in a[i][1:]:\n                break\n            l -= 1\n        while r < m:\n            if r in a[i][1:]:\n                break\n            r += 1\n        res += r - l + 1\n        a[i][0] = r + 1\n    return res"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function is a solution for the problem Description.\"\"\"\n    # Write your code here\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    import sys\n    input = sys.stdin.readline\n    \"\"\"\n    W = int(stdin.readline())\n    items = list(map(int, stdin.readline().split()))\n\n    good_items = set()\n    for item in items:\n        if item > W:\n            continue\n        good_items.add(item)\n\n    max_good_items = set()\n    while len(good_items) > 0:\n        item = good_items.pop()\n        if item > W:\n            continue\n        good_items.discard(item)\n        good_items.discard(item + 1)\n        max_good_items.add(item)\n\n    result = W\n    while max_good_items:\n        item = max_good_items.pop()\n        if item > W:\n            continue\n        if result < item:\n            result = item\n    return result\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, items = stdin.read().split('\\n')\n    items = list(map(int, items.split(' ')))\n    \n    W = int(stdin.readline())\n    \n    dp = [0] * (W + 1)\n    dp[0] = 1\n    \n    for i in range(W + 1):\n        for j in items:\n            if i - j >= 0:\n                dp[i] += dp[i - j]\n    return str(dp[W])\n\nprint(solution(stdin))"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w, *items = [int(x) for x in stdin.split('\\n')]\n    items = [0] + items\n    dp = [[0]*(w+1) for _ in range(len(items))]\n    for i in range(1, len(items)):\n        for j in range(w+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= items[i]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-items[i]] + items[i])\n    return dp[-1][-1]"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            result = max(result, sum(w[i:j]))\n    print(result)\n    return ''"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 0\n   ... 1\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 0\n   ... 1\n   ... ''')\n    '1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, w):\n        pass"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(stdin.split()))"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    W, *items = [int(n) for n in stdin.split()]\n    S = sum(items)\n    return max(S, S - W)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split(' '))\n    costs = list(map(int, stdin.split(' ')))\n    total_cost = 0\n    bottles = 0\n    for i, cost in enumerate(costs):\n        cost = 2**i - 1\n        bottles += cost\n        if bottles >= L:\n            bottles = bottles - cost\n            total_cost += cost * (L // cost)\n            L -= L // cost * cost\n            break\n        else:\n            total_cost += cost * bottles\n            L -= cost * bottles\n            break\n    if L!= 0:\n        total_cost += costs[bottles] * L\n    return total_cost"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    prices = sorted(prices, reverse=True)\n    return sum([price * 2 ** i for i, price in enumerate(prices[:l])])\n\nprint(solution(input()))"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    n, l = [int(i) for i in stdin.split(\" \")]\n    c = [int(i) for i in stdin.split(\" \")]\n    cost = sum([i * (2 ** i - 1) for i in c])\n    if cost >= l:\n        return str(cost)\n    else:\n        return str(l * (max(c) + 1) - cost)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    l = list(map(int, stdin.split(' ')))\n    return str(min(sum(l[i:i + m]) for i in range(n - m + 1)))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n    c.sort()\n    i = len(c)-1\n    sum = 0\n    while l > 0 and i >= 0:\n        if l >= c[i]:\n            sum += c[i]*(1<<(i))\n            l -= c[i]\n        else:\n            sum += l*(1<<(i))\n            l -= l\n        i -= 1\n    return sum"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n\n    d = dict()\n    for i in range(1, n + 1):\n        d[i] = 2 ** i - 1\n\n    maxl = d[max(d, key=d.get)]\n    c.sort()\n    for i in range(1, n):\n        if c[i] >= c[0] * maxl:\n            break\n    else:\n        i = n\n    s = 0\n    for j in range(i - 1, -1, -1):\n        s += d[j]\n        if s >= l:\n            break\n\n    ans = 0\n    for j in range(i):\n        ans += d[j] * c[j]\n    return ans\n\"\"\"\n\n\ndef"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split('\\n')[0].split(' '))\n    \n    arr = [int(stdin.split('\\n')[1].split(' ')[i]) for i in range(n)]\n    \n    cnt = 0\n    for i in range(n):\n        cnt += (l // 2 ** i)\n        l = l - 2 ** i * cnt\n        if l < 2 ** (i - 1):\n            break\n    return cnt\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n    total = 0\n    i = 0\n    while total < l:\n        cnt = 0\n        while total < l and cnt < n:\n            total += 2 ** i - 1\n            cnt += 1\n        i += 1\n    return total - l\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def func(n, m, x, y):\n        if m == 0:\n            return x * n\n        else:\n            return min(n * min(m, x), n * (y // m + 1))\n    n, m = list(map(int, stdin.split()))\n    x, y = list(map(int, stdin.split()))\n    return str(func(n, m, x, y))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    mex = max(a)\n    for i in range(n):\n        if i + 1!= mex:\n            mex = min(mex, i + 1)\n\n    return str(mex)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Determines the maximum possible value of mex of the array after Alyona applies\n    some (possibly none) operations.\n    '''\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(' ')]\n    a.sort()\n    mex = 1\n    for i in range(n):\n        mex = max(mex, a[i] + 1)\n    return str(mex)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 3 3 3 6\")\n    5\n    >>> solution(\"2\\n2 1\")\n    3\n    >>> solution(\"1\\n1\")\n    2\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().strip().split(' ')]\n    dp = [1] * len(arr)\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] <= dp[j]:\n                dp[i] = dp[j] + 1\n    return max(dp)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = [0] + a\n    res = 1\n    mex = 0\n    for x in a:\n        if x > res:\n            mex = res\n            res = x\n        elif x > mex:\n            mex = x\n    print(mex)\n    return str(mex)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(n):\n        if arr[i] > result:\n            result = arr[i]\n    return str(result)\n\n\"\"\"\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nresult = 0\nfor i in range(n):\n    if arr[i] > result:\n        result = arr[i]\n\nprint(result)"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    mx = max(arr)\n    arr.sort()\n    if mx < arr[0]:\n        return arr[0]\n    return mx\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    \n    mx = 1\n    for x in arr:\n        if x > mx:\n            mx = x\n    for x in range(1, mx+1):\n        if x not in arr:\n            mx = x\n            break\n    return str(mx)"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 3 3 3 6\\n\")\n    '5'\n    >>> solution(\"2\\n2 1\\n\")\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    arr.sort(reverse=True)\n    index = 0\n    while index < n:\n        while index < n and arr[index] >= arr[index + 1]:\n            index += 1\n        index += 1\n    return str(arr[index - 1])\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = [int(c) for c in stdin.split()]\n    tot = 0\n    totl = []\n    i = 0\n    while i < len(num):\n        if tot == 0:\n            tot += num[i]\n        else:\n            tot += num[i]\n            if tot in totl:\n                return \"NO\"\n            else:\n                totl.append(tot)\n                tot = 0\n        i += 1\n    return \"YES\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) in range(2, 101) and len(set(stdin)) == len(stdin) else 'NO'\n    \n    \nassert solution(\"73452\") == \"YES\"\nassert solution(\"1248\") == \"NO\"\nassert solution(\"12345\") == \"NO\"\nassert solution(\"123456\") == \"NO\"\nassert solution(\"123456789\") == \"NO\"\nassert solution(\"12345678\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"12345678912345678\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") == \"NO\"\nassert solution(\"123456789123456789\") =="
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Vasya found a golden ticket \u2014 a sequence which consists of $n$ digits $a_1a_2\\dots a_n$. Vasya considers a ticket to be lucky if it can be divided into two or more non-intersecting segments with equal sums. For example, ticket $350178$ is lucky since it can be divided into three segments $350$, $17$ and $8$: $3+5+0=1+7=8$. Note that each digit of sequence should belong to exactly one segment.\n\n    Vasya wants to know whether the ticket is lucky or not. Help him!\n\n    Input\n    The first line contains one integer $n$ ($2 \\le n \\le 100$) \u2014 the number of digits in the ticket.\n    The second line contains $n$ digits $a_1a_2\\dots a_n$ ($0 \\le a_i \\le 9$) \u2014 the golden ticket. Digits are printed without spaces.\n\n    Output\n    If the ticket is lucky then print \"YES\", otherwise print \"NO\" (both case insensitive).\n\n    Examples\n    Input\n    5\n    73452\n    Output\n    YES\n    Input\n    4\n    1248\n    Output\n    NO\n    '''\n    stdout.write(str(is_lucky(stdin)))\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"73452\")\n    'YES'\n    >>> solution(\"1248\")\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    length = int(input[0])\n    input = [int(i) for i in input[1].strip()]\n    k = 0\n    max_k = len(input) - 1\n    while k <= max_k:\n        tmp = input[k]\n        for i in range(k + 1, len(input)):\n            tmp += input[i]\n            if tmp % 2 == 0:\n                k = i\n                break\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n73452')\n    'YES'\n    >>> solution('4\\n1248')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    num = list(map(int, stdin))\n    if len(set(num)) > 2:\n        print('NO')\n    else:\n        print('YES')\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = int(stdin)\n    for i in range(n):\n        for j in range(n):\n            s = 0\n            for k in range(i, j):\n                s += int(ticket / (10 ** k)) % 10\n            if s == (int(ticket / (10 ** i)) % 10):\n                print('YES')\n                return\n    print('NO')\n    return\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(c) for c in stdin]\n    s = sum(a)\n    d = defaultdict(int)\n    for i in range(n):\n        d[s - n] += 1\n        s -= a[i]\n    if d[n] > 1:\n        return 'YES'\n    return 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    my_string = stdin\n    my_list = list(set(my_string))\n    if len(my_list) % 2 == 0:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\n\n\ndef"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 else \"IGNORE HIM!\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'CHAT WITH HER!' if len(set(stdin)) % 2 else 'IGNORE HIM!'"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a = len(set(stdin))\n    if a % 2 == 0:\n        return 'CHAT WITH HER!'\n    return 'IGNORE HIM!'\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'CHAT WITH HER!' if len(set(stdin)) % 2 else 'IGNORE HIM!'\n\"\"\"\n\ndef"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\" if len({i for i in stdin}) % 2 else \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    gender = \"female\" if len(set(s)) % 2 else \"male\"\n    print(\"CHAT WITH HER!\" if gender == \"female\" else \"IGNORE HIM!\")\n    return \"CHAT WITH HER!\" if gender == \"female\" else \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return f'CHAT WITH HER!' if len(set(stdin)) % 2 == 0 else f'IGNORE HIM!'\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(set(stdin)) % 2!= 0:\n        return \"CHAT WITH HER!\"\n    return \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Code your solution here\n    # Replace pass above with your code\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 == 0 else \"IGNORE HIM!\"\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    tabs = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    if k == 1:\n        return abs(n - len(list(filter(lambda x: x == 1, tabs))))\n    return max([abs(n - len(list(filter(lambda x: x == 1, tabs[i * k:i * k + k])))) for i in range(n // k)])\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = list(map(int, lines[0].split()))\n    b_values = list(map(int, lines[1].split()))\n    c_values = [i for i in range(1, n + 1) if i % k == 0]\n    b = [b_values[i] for i in range(len(b_values)) if i % k == 0]\n    c = [c_values[i] for i in range(len(c_values)) if i % k == 0]\n    b_set = set(b)\n    c_set = set(c)\n    e = len(b_set)\n    s = len(c_set)\n    return abs(e - s)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    tabs = list(map(int, stdin.split('\\n')[1].split()))\n\n    return\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    arr = [int(n) for n in stdin.split()]\n    s = 0\n    e = 0\n    for i in range(a):\n        if arr[i] == -1:\n            s += 1\n        else:\n            e += 1\n    for i in range(1, b + 1):\n        if i % b == 0:\n            arr[i - 1] = -1\n    e = e - s\n    return str(e - s)\nprint(solution(input()))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_opened_tabs, distance = map(int, stdin.split())\n    opened_tabs = list(map(int, stdin.split()))\n\n    return str(max(abs(number_of_opened_tabs - sum(opened_tabs[::2])) - abs(number_of_opened_tabs - sum(opened_tabs[1::2])), 0))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n    n, k = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    arr.append(1)\n    arr.append(-1)\n    res = 0\n    for i in range(k):\n        count = 0\n        temp = []\n        for j in range(n):\n            if arr[j] == 1:\n                count += 1\n            if count % k == i:\n                temp.append(arr[j])\n        arr = temp\n        count = 0\n        for j in range(n):\n            if arr[j] == -1:\n                count += 1\n        res = max(res, count)\n    return str(res)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.\n    >>> solution(\"4 2\\n1 1 -1 1\")\n    2\n    \"\"\"\n    opened_tabs, closed_tabs = parse_input(stdin)\n    if closed_tabs < opened_tabs:\n        return abs(opened_tabs - closed_tabs)\n    elif closed_tabs > opened_tabs:\n        return abs(opened_tabs - closed_tabs) * -1\n    else:\n        return 0\n\n\ndef"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get a solution for the challenge\"\"\"\n\n    # Get the input\n    n, k = tuple(map(int, stdin.split(\"\\n\")[0].split()))\n\n    # Initialize the value to return\n    max_diff = 0\n\n    # Get the list with information types\n    data = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    # For each tab\n    for b in range(1, n - k + 1):\n        # Get the count of tabs with information type\n        info_type = 0\n        for i in range(b, b + k * 2, k):\n            info_type += 1 * data[i]\n\n        # Get the count of tabs with social type\n        social_type = 0\n        for i in range(b, b + k * 2, k):\n            social_type += -1 * data[i]\n\n        # Get the difference\n        max_diff = max(max_diff, abs(info_type - social_type))\n\n    return str(max_diff)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    assert 2 <= k < n <= 100\n    tabs = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    assert len(tabs) == n\n    assert all(-1 <= x <= 1 for x in tabs)\n    assert len(set(tabs)) == 2\n\n    e = tabs.count(1)\n    s = tabs.count(-1)\n    assert abs(e - s) <= k\n\n    if e >= s:\n        return abs(e - s)\n    else:\n        return abs(s - e)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = stdin.count('0') * int(stdin.split(' ')[1]) + stdin.count('1') * int(stdin.split(' ')[2])\n    return str(ans)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return the result\n    n = int(stdin.split(' ')[0])\n    c_0 = int(stdin.split(' ')[1])\n    c_1 = int(stdin.split(' ')[2])\n    \n    \n    return ''\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = list(map(int, stdin.split(' ')))\n    min_cost = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            min_cost += c_0\n        else:\n            min_cost += c_1\n\n    return min_cost"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cost_0 = int(stdin[0])\n    cost_1 = int(stdin[1])\n    letters = [0, 1]\n    for letter in stdin[2]:\n        if int(letter) == 0:\n            letters[0] += cost_0\n        else:\n            letters[1] += cost_1\n    return (letters[0] + letters[1])\n\nprint(solution(input()))\n\n\n-----Test-----\n\nInput\n5 1 3\n\nOutput\n12\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return encoded message\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, c0, c1 = [int(x) for x in stdin.split()]\n    return str(sum(c0 if x == '0' else c1 for x in range(n)))\n\nhttps://www.codewars.com/kata/57a62bbe3418b1d7b6000039/train/python\n\n\"\"\"\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    char_cnt: int = int(stdin[0])\n    c0: int = int(stdin[1])\n    c1: int = int(stdin[2])\n    if c0 + c1 < char_cnt:\n        return c0 * \"0\" + c1 * \"1\"\n    return c0 * \"0\" + c1 * \"1\" + (char_cnt - c0 - c1) * \"0\"\n\n\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    # parse input\n    n, c_0, c_1 = list(map(int, input_lines[0].split()))\n    c = [c_0, c_1]\n    # use binary search to find minimum cost encoding\n    start = 0\n    end = 2**n\n    while start < end:\n        mid = (start+end)//2\n        total = 0\n        for i in range(n):\n            if mid & (1<<i)!= 0:\n                total += c[0]\n            else:\n                total += c[1]\n        if total < 2**n:\n            start = mid+1\n        else:\n            end = mid\n    return str(start)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, c0, c1 = map(int, stdin.split())\n    if c0 < c1:\n        return str(n - 1) + \"0\" + \"1\" * (c1 - c0)\n    else:\n        return str(n - 1) + \"1\" + \"0\" * (c0 - c1)\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split(' ')]\n    a = a - 1\n    b = b - 1\n    x = x - 1\n    y = y - 1\n    if a < n:\n        a_to_b = a + (n - a)\n        b_to_a = b + (n - b)\n    else:\n        a_to_b = (a - n) + 1\n        b_to_a = (b - n) + 1\n    if b < n:\n        a_to_x = a + (n - a)\n        b_to_y = b + (n - b)\n    else:\n        a_to_x = (a - n) + 1\n        b_to_y = (b - n) + 1\n    if a_to_b == b_to_a and x == a_to_x and y == b_to_y:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin)\n    a, x, b, y = [int(i) for i in stdin.split(' ')]\n    print(a, x, b, y)\n    return \"YES\" if a % x == b % y else \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(i) for i in stdin.split()]\n    for i in range(n):\n        if a == x and b == y:\n            return \"YES\"\n        elif a == y and b == x:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(el) for el in stdin.split()]\n    s, d = {a: 0, x: 0}, {b: 0, y: 0}\n    for i in range(n):\n        if i in s:\n            s[i] = 1 - s[i]\n        if i in d:\n            d[i] = 1 - d[i]\n        if all(s.values()):\n            return 'YES'\n        if all(d.values()):\n            return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    n, a, x, b, y = [int(i) for i in stdin.split(\" \")]\n    if a >= n and b >= n:\n        return \"NO\"\n    if a >= n and b <= 1:\n        return \"YES\"\n    if b >= n and a <= 1:\n        return \"YES\"\n\n    for i in range(n):\n        if x >= n:\n            x = 1\n        if y >= n:\n            y = n\n        if x == a and y == b:\n            return \"YES\"\n        x, y = x + 1, y - 1\n    return \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    return \"YES\" if abs(x - a) + abs(y - b) <= 1 else \"NO\"\n\n\ndef"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(s) for s in stdin.split(' ')]\n    if x > y:\n        x, y = y, x\n    if a > y:\n        a, b = b, a\n    return 'YES' if x == y and a <= x <= b and x in range(a, b+1) else 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split()]\n    \n    def is_ok(x: int, y: int, a: int, b: int) -> bool:\n        return min(a, x) <= y <= max(a, x) or min(b, y) <= x <= max(b, y)\n    \n    return \"YES\" if is_ok(x, y, a, b) and is_ok(x, y, b, a) else \"NO\"\n\ndef"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split()]\n    count = 1\n    answer = \"NO\"\n    while count <= n:\n        if count == a:\n            count += 1\n            if count == x:\n                count += 1\n                if count == b:\n                    count += 1\n                    if count == y:\n                        count += 1\n                        if count == n:\n                            count += 1\n                            if count == a:\n                                answer = \"YES\"\n        else:\n            count += 1\n    return answer\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = list(map(int, stdin.split()))\n    x -= 1\n    y -= 1\n    s = set()\n    for i in range(n):\n        s.add((i, i+1))\n        s.add((i+1, i))\n    for i in range(x, y):\n        if (i, i+1) in s or (i+1, i) in s:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(i) for i in stdin.split(\" \")]\n    x, y = min(x, y), max(x, y)\n    if x == 1:\n        l = 1\n    if y == 10 ** 18:\n        r = 10 ** 18\n    count = 0\n    for i in range(l, r + 1):\n        n = i ** x + i ** y\n        if n < r:\n            count = max(count, count_sub_periods(i, n))\n    return str(count)\n\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the longest interval of years that there are no unlucky years\n    \"\"\"\n    x, y, l, r = map(int, stdin.split(\" \"))\n    a, b = 0, 1\n    while True:\n        n = x ** a + y ** b\n        if l <= n <= r:\n            return str(max(a, b))\n        if n > r:\n            break\n        a, b = a + 1, b + 1\n\n    return str(0)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets an interval in the form of a list and returns the maximum possible length of the Golden Age within the interval\"\"\"\n    x, y, l, r = [int(value) for value in stdin.split(\" \")]\n    if x == y:\n        return str(0)\n    else:\n        if l == r:\n            return str(0)\n        else:\n            if x == 1 and y == 10 ** 18:\n                return str(0)\n            else:\n                lucky_nums = []\n                for i in range(l, r + 1):\n                    for j in range(i):\n                        lucky_nums.append(x ** j + y ** j)\n                if sorted(lucky_nums) == list(range(l, r + 1)):\n                    return str(r - l + 1)\n                else:\n                    return str(0)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x, y, l, r = map(int, stdin.split())\n    r += 1\n    res = 0\n    for i in range(l, r):\n        if ((i ** x + y ** y) == i):\n            res = max(res, i - l + 1)\n    return str(res)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a,b,x,y=map(int,stdin.split())\n    if x==y:\n        print(0)\n        return ''\n    else:\n        x=x+1\n        l=[]\n        while x<=y:\n            a=bin(x)\n            a=a.split('b')[1]\n            a=a.split('0')[1:]\n            a=''.join(a)\n            if a.count('1')%2!=0:\n                l.append(len(a))\n                a='0'*(len(a))\n            else:\n                a='1'*(len(a))\n            x=x+1\n        print(max(l))\n        return ''\nsolution(input())\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split(' '))\n    maximum_length = 0\n    for n in range(l, r + 1):\n        if not n % y and not n % x:\n            maximum_length = max(maximum_length, n - l + 1)\n    return str(maximum_length)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split(' '))\n    max_len = 0\n    for i in range(l, r + 1):\n        n = i\n        a = 0\n        b = 0\n        while n > 0:\n            b += n % 10\n            a += n // 10\n            n = n // 10\n        if a == x and b == y:\n            max_len = max(max_len, a + b)\n    return max_len\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    \n    n = int(input[0])\n    \n    return str(divisor(n))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"1\" else \"NO\""
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Case #{}: {}\".format(1, solve(stdin))\n\n\ndef"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"1\"\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin.readlines()\n    n = int(stdin)\n    # n = int(input())\n    count = 1\n    # while count * 2 < n:\n    #     count *= 2\n    while n % 2 == 0:\n        count += 1\n        n /= 2\n    print(count)\n\n    return count\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(len(stdin.split()))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n == 1:\n        return 1\n    n_max = 2 * 10 ** 9\n    burles = n // 2 + 1\n    while burles!= 1:\n        if n % burles == 0:\n            break\n        burles += 1\n    return burles\n    \n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n            count += 1\n        else:\n            n -= 1\n            count += 1\n    return count\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()))"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_consonants = vowels + [letter for letter in stdin if letter not in vowels]\n    curr_consonant = stdin[0]\n    words = []\n    for letter in stdin:\n        if letter in vowels_consonants:\n            words.append(curr_consonant)\n            curr_consonant = ''\n        else:\n            curr_consonant += letter\n    words.append(curr_consonant)\n    typos = []\n    for i in range(len(words) - 3):\n        curr_typo = ''\n        for j in range(i, i + 3):\n            curr_typo += words[j]\n        if is_typo(curr_typo):\n            typos.append(curr_typo)\n    if typos:\n        return''.join(typos)\n    else:\n        return''.join(words)\n\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The simple solution to this problem is to convert each\n    word to the alphanumeric string representation and then\n    check whether the string has any typos.\n    \"\"\"\n    return''.join(sorted(stdin.replace(' ', '')))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    result = []\n    for i, word in enumerate(stdin.split()):\n        typo = False\n        j = 0\n        for j, letter in enumerate(word):\n            if j < len(word) - 1 and letter not in vowels and word[j + 1] not in vowels:\n                if typo:\n                    typo = False\n                else:\n                    typo = True\n            if typo:\n                typo = False\n                result.append(' ')\n            else:\n                result.append(letter)\n        if typo:\n            result.append(' ')\n    return ''.join(result)\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  vowels = 'aeiou'\n  return stdin.translate(str.maketrans({v: '' for v in vowels}))\n\nprint(solution('hellno'))\nprint(solution('abacaba'))\nprint(solution('asdfasdf'))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    word = stdin.lower()\n    ans = []\n    \n    for i, c in enumerate(word):\n        if c in vowels:\n            ans.append(c)\n            continue\n        \n        if not ans or c!= ans[-1]:\n            ans.append(c)\n        else:\n            ans.append(' ')\n    \n    return ''.join(ans)"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for word in stdin.split():\n        consonants = []\n        for letter in word:\n            if letter not in 'aeiou':\n                consonants.append(letter)\n            elif letter in 'aeiou':\n                break\n        if len(consonants) < 3:\n            result.append(word)\n        else:\n            for i in range(len(consonants)-2):\n                if consonants[i]!= consonants[i+2]:\n                    result.append(word[:i+3] +'' + word[i+3:])\n                    break\n            else:\n                result.append(word)\n    return''.join(result)"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_len = len(vowels)\n    chars = list(stdin)\n    consonants = [x for x in chars if x not in vowels]\n    if len(consonants) < 3:\n        return stdin\n    else:\n        substrings = []\n        substr_len = 0\n        while substr_len < len(consonants):\n            substr = consonants[substr_len:substr_len + 3]\n            if len(set(substr)) == 1:\n                substr_len += 3\n            else:\n                substrings.append(substr)\n                substr_len += 1\n        substrings_len = len(substrings)\n        if substrings_len == 0:\n            return stdin\n        else:\n            all_substrings = set()\n            for i in range(substrings_len):\n                for j in range(substrings_len):\n                    if i!= j:\n                        substring_to_add = []\n                        for k in range(len(substrings[i])):\n                            substring_to_add.append(substrings[i][k])\n                        for l in range(len(substrings[j])):\n                            substring_to_add.append(substrings[j][l])\n                        substring = ''.join(substring_to_add)\n                        all_substrings.add(substring)\n            all_substrings = sorted(all_substrings)\n            output_strings = []\n            for substring in all_substrings:\n                str_to_add = []\n                for i in range(len(substring)):\n                    str_to_add.append(substring[i])\n                output_strings.append(''.join(str_to_add))\n            return output_strings\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.replace('u','').replace('o','').replace('e','').replace('i','').replace('a','')\n    for i in range(len(a)):\n        if a[i] =='':\n            continue\n        if a[i] == a[i + 1] == a[i + 2] == a[i + 3]:\n            return a[:i] +'' + a[i + 1:]\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    vowels = 'aeiou'\n    consonants = ''.join([c for c in stdin if c not in vowels])\n    typos = []\n    start = 0\n    for i, c in enumerate(consonants):\n        if c == consonants[i - 1]:\n            typos.append((start, i))\n            start = i\n        else:\n            if i - 1 - start >= 2:\n                typos.append((start, i))\n            start = i\n    for s, e in typos:\n        i = s\n        while i < e - 1:\n            stdin = stdin[:i] +'' + stdin[i:]\n            i += 1\n    return stdin\n\n\nsolution(\"asdfasdf\")\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    x, s = map(int, stdin.split('\\n')[1].split(' '))\n    a = map(int, stdin.split('\\n')[2].split(' '))\n    b = map(int, stdin.split('\\n')[3].split(' '))\n    c = map(int, stdin.split('\\n')[4].split(' '))\n    d = map(int, stdin.split('\\n')[5].split(' '))\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    p = min(k, m)\n    p2 = min(n - k, m)\n    a = [x for x in a if x <= x]\n    b = [x for x in b if x <= x]\n    c = [x for x in c if x <= n]\n    d = [x for x in d if x <= n]\n    p = min(p, k)\n    p2 = min(p2, n - k)\n    print(max(p * x + p2 * s, n * s))\n    return str(max(p * x + p2 * s, n * s))\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, S = [int(c) for c in stdin.split('\\n')[0].split(' ')]\n    A = [int(c) for c in stdin.split('\\n')[1].split(' ')]\n    B = [int(c) for c in stdin.split('\\n')[2].split(' ')]\n    C = [int(c) for c in stdin.split('\\n')[3].split(' ')]\n    D = [int(c) for c in stdin.split('\\n')[4].split(' ')]\n    \n    # some_variable = float(\"inf\")\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    C.sort(reverse=True)\n    D.sort(reverse=True)\n    \n    def dfs(t: int, x: int, y: int, z: int) -> int:\n        nonlocal S\n        nonlocal N\n        nonlocal M\n        nonlocal X\n        nonlocal D\n        nonlocal C\n        nonlocal B\n        \n        if x == N or y == M or z == K:\n            return t\n        \n        t_ = float(\"inf\")\n        if x < N and t + A[x] * 5 < t_:\n            t_ = dfs(t + A[x] * 5, x + 1, y, z)\n            \n        if y < M and t + B[y] < t_:\n            t_ = dfs(t + B[y], x, y + 1, z)\n            \n        if z < K and t + D[z] < t_:\n            t_ = dfs(t + D[z], x, y, z + 1)\n            \n        if t + X < t_:\n            t_ = dfs(t + X, x, y, z)\n            \n        if t_ < S:\n            S = t_\n            \n        return t_\n    \n    return dfs(0, 0, 0, 0)\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = stdin.split(' ')\n    n, m, k = int(n), int(m), int(k)\n    x, s = stdin.split(' ')\n    x, s = int(x), int(s)\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    c = list(map(int, stdin.split(' ')))\n    d = list(map(int, stdin.split(' ')))\n    l = [0] * m\n    for i in range(m):\n        l[i] = a[i] + b[i]\n    l.sort()\n    # print(l)\n    l = l[::-1]\n    for i in range(k):\n        l[i] = c[i]\n    # print(l)\n    t = 0\n    for i in range(k):\n        if l[i] > x:\n            continue\n        if i >= 1 and l[i] == l[i - 1]:\n            continue\n        if i + 1 < k and l[i] == l[i + 1]:\n            continue\n        t += l[i]\n    t = t * s\n    print(t)\n    return ''\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    - For every potion, we need to know the minimum number of seconds it takes.\n    - After all preparations, if there are less than n potions ready, then we need to\n        use the third spell of the first type to instantly prepare n potions.\n    - If there are more than n potions ready, then we need to use the third spell of\n        the first type to instantly prepare the first n potions.\n    - To use the second spell, we use the maximum number of seconds we spent, and we\n        add it to the maximum number of seconds we spent to instantly prepare n\n        potions.\n    - The total number of manapoints spent should not exceed s.\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    # 1. find x using x + max(b)\n    x = min(x, x + max(b))\n    # 2. find s using x + max(c)\n    s = min(s, x + max(c))\n    # 3. find n using m + k\n    n = min(n, m + k)\n    # 4. find x using n\n    x = min(x, n)\n    # 5. find s using x\n    s = min(s, x)\n    # 6. find n using m + k\n    n = min(n, m + k)\n    # 7. find x using n\n    x = min(x, n)\n    # 8. find s using x\n    s = min(s, x)\n    # 9. find x using n\n    x = min(x, n)\n    # 10. find s using x\n    s = min(s, x)\n    # 11. find s using x\n    s = min(s, x)\n    # 12. find n using m + k\n    n = min(n, m + k)\n    # 13. find x using n\n    x = min(x, n)\n    # 14. find s using x\n    s = min(s, x)\n    # 15. find x using n\n    x = min(x, n)\n    # 16. find s using x\n    s = min(s, x)\n    # 17. find n using m + k\n    n = min(n, m + k)\n    # 18. find x using n\n    x = min(x, n)\n    # 19. find s using x\n    s = min(s, x)\n    # 20. find n using m + k\n    n = min(n, m + k)\n    # 21. find x using n\n    x = min(x, n)\n    # 22. find s using x\n    s = min(s, x)\n    # 23. find x using n\n    x = min(x, n)\n    # 24. find s using x\n    s = min(s, x)\n    # 25. find n using m + k\n    n = min(n, m + k)\n    # 26. find x using n\n    x = min(x, n)\n    # 27. find s using x\n    s = min(s, x)\n    # 28. find n using m + k\n    n = min(n, m + k)\n    # 29. find x using n\n    x = min(x, n)\n    # 30. find s using x\n    s = min(s, x)\n    # 31. find n using m + k\n    n = min(n, m + k)\n    # 32. find x using n\n    x = min(x, n)\n    # 33. find s using x\n    s = min(s, x)\n    # 34. find n using m + k\n    n = min(n, m + k)\n    # 35. find x using n\n    x = min(x, n)\n    # 36. find s using x\n    s = min(s, x)\n    # 37. find n using m + k\n    n = min(n, m + k)\n    # 38. find x using n\n    x = min(x, n)\n    # 39. find s using x\n    s = min(s, x)\n    # 40. find n using m + k\n    n = min(n, m + k)\n    # 41. find x using n\n    x = min(x, n)\n    # 42. find s using x\n    s = min(s, x)\n    # 43. find n using m + k\n    n = min(n, m + k)\n    # 44. find x using n\n    x"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def bs(l: int, lst: List[int], num: int) -> int:\n        \"\"\"\n        Find first element of list lst that is >= num\n        \"\"\"\n        left, right = 0, len(lst)\n        while left < right:\n            mid = left + (right - left) // 2\n            if lst[mid] >= num:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(m):\n        a[i] *= x\n    for i in range(k):\n        c[i] *= n\n    \n    for i in range(m):\n        if a[i] <= s:\n            ans = max(ans, x)\n        elif a[i] > s:\n            # find index of first element >= s\n            x = bs(a, a, s)\n            ans = max(ans, x)\n        for j in range(k):\n            if c[j] <= s:\n                ans = max(ans, d[j])\n            elif c[j] > s:\n                # find index of first element >= s\n                d = bs(c, d, s)\n                ans = max(ans, d)\n    return ans\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def prepare_potion(manapoints: int, potions: int, potion_times: list, spell_times: list) -> int:\n        potions_made = min(manapoints // potion_times[0], potions)\n        potions_remained = potions - potions_made\n        manapoints -= potions_made * potion_times[0]\n        if potions_made > 0:\n            for i in range(potions_made):\n                manapoints += spell_times[0] * potion_times[0]\n        if potions_remained > 0:\n            for i in range(potions_remained):\n                manapoints += spell_times[1] * potion_times[1]\n        return manapoints\n\n    manapoints, spells_count_1, spells_count_2 = map(int, stdin.split())\n    potion_times = list(map(int, stdin.split()))\n    spell_times = list(map(int, stdin.split()))\n\n    manapoints = prepare_potion(manapoints, spells_count_1, potion_times, spell_times)\n    manapoints = prepare_potion(manapoints, spells_count_2, potion_times, spell_times)\n\n    return manapoints\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    return \"\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    \n    ap = list(map(int, stdin.split()))\n    bp = list(map(int, stdin.split()))\n    cp = list(map(int, stdin.split()))\n    dp = list(map(int, stdin.split()))\n    \n    ap = sorted(ap)\n    bp = sorted(bp)\n    cp = sorted(cp)\n    dp = sorted(dp)\n    \n    tot_time = 0\n    tot_p = 0\n    \n    for i in range(m):\n        tot_p += 1\n        tot_time += bp[i]\n        if tot_time > s:\n            break\n    \n    tot_time = 0\n    tot_p = 0\n    for i in range(k):\n        tot_p += 1\n        tot_time += dp[i]\n        if tot_time > s:\n            break\n    \n    tot_time = x * (tot_p // k) + (tot_p % k) * dp[tot_p % k]\n    tot_time += s * (tot_p // k)\n    \n    return tot_time\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    tasks = [int(x) for x in stdin.split()]\n    print(n, k, m)\n    print(tasks)\n    points = [0] * n\n    points[0] = k\n    for i in range(1, n):\n        points[i] = tasks[i - 1] + points[i - 1]\n    print(points)\n    print(max(points))\n    return \"\""
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n\n    max_points = 0\n    for i in range(n):\n        completed_tasks = 0\n        for j in range(i, n):\n            completed_tasks += tasks[j]\n            if completed_tasks > t:\n                break\n            max_points += 1\n            if completed_tasks == t:\n                max_points += 1\n\n    return str(max_points)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(a) for a in stdin.split()]\n    ans = 0\n    for i in range(len(x)):\n        ans += (x[i] * (i + 1))\n    return ans\nprint(solution(input()))"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k, m = map(int, stdin.split())\n    subtasks = [int(i) for i in stdin.split()]\n    subtasks.sort()\n    time = 0\n    points = 0\n    \n    for i in range(n):\n        if time + subtasks[i] <= m:\n            time += subtasks[i]\n            points += 1 + (subtasks[i] == k)\n        else:\n            break\n    \n    return str(points)\n\"\"\"\n\nfrom math import log2, floor, ceil\ndef"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # 1 2 3 4\n    # 2 3 4 5 6\n    # 3 4 5 6 7 8 9\n    # 4 5 6 7 8 9 10 11 12\n    # 5 6 7 8 9 10 11 12 13 14 15\n    n, k, m = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    ans = 0\n    t = sorted(t)\n    print(t)\n    for i in range(0, n - 1):\n        print(i)\n        s = t[i] + k\n        if s <= m:\n            ans += k\n        else:\n            ans += m - t[i]\n    return ans"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    l = [int(i) for i in stdin.split()]\n    x = [i for i in l if i <= m]\n    print(k + max(x))\n    return ''\n\nprint(solution('3 4 11'))\nprint(solution('5 5 10'))\n\"\"\"\n\ndef"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # The first line contains three integer numbers n, k and M (1 \u2264 n \u2264 45, 1 \u2264 k \u2264 45, 0 \u2264 M \u2264 2\u00b710^9).\n    n, k, m = map(int, stdin.split())\n\n    # The second line contains k integer numbers, values t_{j} (1 \u2264 t_{j} \u2264 1000000), where t_{j} is the time in minutes required to solve j-th subtask of any task.\n    #t = map(int, stdin.split(' ')[1:])\n\n    #print(t)\n\n    # Initialize max value\n    max_value = 0\n\n    # Loop through the array for each task\n    for i in range(n):\n        # Initalize the points\n        points = 0\n\n        # Loop through each sub task\n        for j in range(k):\n            # The number of minutes for each sub task\n            m_time = m - t[i] * j\n\n            # If the sub task can be finished\n            if m_time >= 0:\n                # Add the points for each sub task\n                points += j + 1\n\n        # If the points are greater than max value\n        if points > max_value:\n            # Set the max value to the points\n            max_value = points\n\n    # Return the max value\n    return max_value"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def read_a_line(line: str) -> List[int]:\n        return list(map(int, line.split(' ')))\n\n    def read_a_line_separated(line: str) -> List[str]:\n        return line.split(' ')\n\n    def read_all_lines(lines: List[str]) -> str:\n        return ''.join(lines)\n\n    def read_all_lines_separated(lines: List[str]) -> List[List[str]]:\n        return lines\n\n    n, k, m = read_a_line(stdin)\n    t = read_a_line_separated(stdin)\n\n    ans = 0\n    for i in range(k):\n        ans += (i + 1) * t[i]\n\n    ans += max(0, k - (m // t[-1]))\n\n    print(ans)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mod = 10 ** 9 + 7\n\n    if n == 1:\n        return 1\n    ans = 0\n    for k in range(1, n):\n        if k * k > n:\n            break\n        ans = (ans + k * k * k * (n - k * k) // 2 * (n - k * k)) % mod\n    return ans\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  #Get the number of vertices\n  n = int(stdin)\n  #Compute the number of trees\n  ans = (n * (n-1) % (10**6) * (n+1) % (10**6)) % (10**6)\n  return str(ans)"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print((2 * n - 1) * (2 * n + 1) / 2)\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    return '3'"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    return str(pow(2, (n - 1) / 2, 10 ** 9 + 7))\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n - 2 * k) + \" \" + str(1 + 2 * k)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(c) for c in stdin.split(' ')]\n    n //= 2\n    m //= 2\n    for _ in range(k):\n        n, m = m, n\n    print(n + 1, m + 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, [2, 1]))"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3 0')\n    '1 1'\n    >>> solution('4 3 11')\n    '1 2'\n    >>> solution('4 3 7')\n    '3 2'\n    >>> solution('4 4 3')\n    '1 1'\n    >>> solution('1 1 0')\n    '1 1'\n    >>> solution('2 1 0')\n    '1 1'\n    \"\"\"\n    n, m, k = (int(x) for x in stdin.split())\n    x, y = 1, 1\n    for _ in range(k):\n        if x == n and y == m:\n            break\n        if x < n - 1:\n            x += 1\n        elif x == n - 1 and y < m:\n            x = 1\n            y += 1\n        elif y < m - 1:\n            x = 1\n            y += 1\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    return f'{n // 2 + 1} {(m - 1) // 2 + 1}'\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    min_value = X\n    for i in range(1, X + 1):\n        if i % 2 == 0 and X % i == 0:\n            min_value = i\n    return '1'+ str(min_value)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for a in range(1, x + 1):\n        if x % a == 0:\n            for b in range(a, x + 1):\n                if x % b == 0 and a * b == x:\n                    print(a, b)\n                    return\n    print(1, 1)\n    return ''\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    maxim = 1\n    a, b = 1, 1\n    while True:\n        if a * b == X:\n            break\n        elif a * b < X:\n            if b * b == X:\n                break\n            b += 1\n            maxim = max(maxim, b)\n        else:\n            a += 1\n            maxim = max(maxim, a)\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(min([i for i in range(1, int(stdin) + 1) if (int(stdin) % i == 0 and i % 2 == 1)][0], int(stdin) + 1))\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while True:\n        if n % i == 0:\n            break\n        i += 1\n    return f\"{i} {n // i}\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    a, b = 1, 1\n    while True:\n        a = a + 1\n        if X % a == 0:\n            b = X // a\n            break\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest pair of integers whose LCM is the given integer.\"\"\"\n    X = int(stdin)\n    if X == 1:\n        return \"1 1\"\n    a = 1\n    b = 1\n    while a * b < X:\n        if a * b < X:\n            a += 1\n            b = a\n        if a * b == X:\n            return \"{} {}\".format(a, b)\n        if a * b > X:\n            a = 1\n            b = 1\n    if a * b == X:\n        return \"{} {}\".format(a, b)\n    if a * b > X:\n        return \"1 1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    steal_from = 1\n    while True:\n        if int(stdin.split()[0]) >= steal_from * 2 and int(stdin.split()[1]) >= steal_from * 4 and int(stdin.split()[2]) >= steal_from * 8:\n            break\n        else:\n            steal_from += 1\n    return str(steal_from)\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    for i in range(a):\n        for j in range(b):\n            for k in range(c):\n                if a + b + c == 2 * (i + j + k) + (a * j + b * k + c * i) and (a * j + b * k + c * i) == (a * j + b * k) * 2:\n                    return str(i + j + k)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lemon_count = int(stdin[0])\n    apple_count = int(stdin[1])\n    pear_count = int(stdin[2])\n    comp_count = lemon_count * 2 + apple_count + pear_count\n    if comp_count % 3!= 0:\n        print(0)\n    else:\n        print(comp_count // 3)\n\n    return \"\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    m = int(stdin.readline().strip())\n    k = int(stdin.readline().strip())\n\n    n, m, k = min(n, m, k), max(n, m, k), (n + m + k) / 2\n    print(n, m, k)\n    if k % 2!= 0 or m < 2 * n or n == 0:\n        print(0)\n    else:\n        print(k // 2)\n\n    return ''\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the challenge\n    \"\"\"\n    # get the input\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    c = int(stdin.readline().strip())\n\n    # calculate the number of apples to make compote\n    apples_to_make_compote = a // 2\n    # calculate the number of lemons to make compote\n    lemons_to_make_compote = b // 2\n    # calculate the number of pears to make compote\n    pears_to_make_compote = c // 4\n\n    # calculate the remaining number of apples to make compote\n    remaining_apples = a - apples_to_make_compote * 2\n    # calculate the remaining number of lemons to make compote\n    remaining_lemons = b - lemons_to_make_compote * 2\n    # calculate the remaining number of pears to make compote\n    remaining_pears = c - pears_to_make_compote * 4\n\n    # calculate the final answer\n    answer = apples_to_make_compote + lemons_to_make_compote + pears_to_make_compote + min(remaining_lemons, remaining_apples, remaining_pears)\n\n    return str(answer)"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, nl, na, np = stdin.split('\\n')\n    nl, na, np = int(nl), int(na), int(np)\n    ln, lp, ap, aq = nl * 2, nl * 4, na * 2, na * 4\n    if nl >= ln and na >= ap:\n        return str(ln + ap)\n    if nl >= lp and na >= aq:\n        return str(lp + aq)\n    return '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    total_lemons = int(stdin.readline())\n    total_apples = int(stdin.readline())\n    total_pears = int(stdin.readline())\n    if total_apples >= total_pears:\n        print(total_apples // 2)\n    elif total_apples < total_pears:\n        print(total_pears // 2)\n    elif total_apples < total_pears:\n        print(0)\n    elif total_pears > total_apples:\n        print(0)\n    return solution\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    print(a[0] > a[1] and a[0] > a[2])\n    return \"YES\" if a[0] > a[1] and a[0] > a[2] else \"NO\"\n\ndef"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Your code goes here.\n    return \"YES\" if stdin[0] == stdin[1] else \"NO\"\n    \ndef"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    p = []\n    for i in range(0, n, 2):\n        p.append(a[i])\n    for i in range(1, n, 2):\n        p.append(a[i])\n    if p[0] < p[1]:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    players = [int(i) for i in stdin.readline().strip().split(' ')]\n    players.sort(reverse=True)\n    print(players)\n    if players[0] >= players[1]:\n        return 'NO'\n    else:\n        if n % 2 == 1:\n            if players[n // 2 - 1] >= players[n // 2]:\n                return 'YES'\n            else:\n                return 'NO'\n        else:\n            if players[n // 2 - 1] >= players[n // 2]:\n                return 'YES'\n            else:\n                return 'NO'\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split('\\n')[0].split()))\n    max_a = max(a)\n    # sort to minimize number of swaps\n    a.sort()\n    a = list(set(a))\n    a.sort(reverse=True)\n    # if there is a number which is greater than max_a, then\n    # there is a solution\n    # we can choose any two numbers to make it so that\n    # their difference is greater than 1,\n    # this means there is at least one number which is bigger than max_a\n    # and we can swap it to the end of the array so that the first element is bigger than the second\n    # then we can choose one number from the array so that its difference with the last element is 1\n    # and swap it with the last element to make the array sorted\n    # and finally we can choose two numbers from the array so that their difference is greater than 1\n    # to make them in order (first element is less than second)\n    if a[0] > max_a:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nassert solution('2\\n1 3 2 4') == 'YES'\nassert solution('1\\n3 3') == 'NO'\nassert solution('1\\n3') == 'YES'\nassert solution('2\\n1 3 2 4') == 'YES'\nassert solution('2\\n1 3 2') == 'NO'\nassert solution('1\\n3') == 'NO'\nassert solution('1\\n3 3') == 'NO'\nassert solution('1\\n1 2') == 'YES'\nassert solution('1\\n1 2 3') == 'YES'\nassert solution('1\\n1 1') == 'NO'\nassert solution('1\\n1 1 2') == 'NO'\nassert solution('1\\n1 1 1') == 'NO'\nassert solution('1\\n1 1 2 3') == 'NO'\nassert solution('1\\n1 2 3') == 'NO'\nassert solution('1\\n1 2 3 4') == 'NO'\nassert solution('1\\n1 2 3 4 5') == 'NO'\nassert solution('1\\n1 2 3 4 5 6') == 'NO'\nassert solution('1\\n1 2 3 4 6') == 'NO'\nassert solution('1\\n1 2 3 5') == 'NO'\nassert solution('1\\n1 2 3 5 6') == 'NO'\nassert solution('1\\n1 2 4') == 'YES'\nassert solution('1\\n1 1') == 'NO'\nassert solution('1\\n2') == 'YES'\nassert solution('1\\n1 2') == 'YES'\nassert solution('1\\n1 2 3') == 'NO'\nassert solution('1\\n1 1') == 'NO'\nassert solution('1\\n2 2') == 'NO'\nassert solution('1\\n1 2 2') == 'YES'\nassert solution('1\\n1 2 2 3') == 'NO'\nassert solution('1\\n1 2 3 2') == 'YES'\nassert solution('1\\n1 2 3 4') == 'NO'\nassert solution('1\\n1 2 3 5') == 'NO'\nassert solution('1\\n1 2 4 3') == 'YES'\nassert solution('1\\n1 2 3 4') == 'YES'\nassert solution('1\\n2 3 1') == 'YES'\nassert solution('1\\n1 1') == 'NO'\nassert solution('1\\n2 3 1') == 'YES'\nassert solution('1\\n1 2 3 1') == 'NO'\nassert solution('1\\n1 1') == 'NO'\nassert solution('1\\n1 2 3 4') == 'YES'\nassert solution('1\\n2 2 3 4') == 'YES'\nassert solution('1\\n1 2 3 4') == 'YES'\nassert solution('1\\n2 3 4 1') == 'YES'\nassert solution('1\\n1 2 3 4 5') == 'YES'\nassert solution('1\\n2 3 4 5 1') == 'YES'\nassert solution('1\\n1 2 3 4 5 6') == 'NO'\nassert solution('1\\n1 2 3 4 5 6 7') == 'NO'\nassert solution('1\\n1 2 3 5 6 7') == 'NO'\nassert solution('1\\n1 2 3 4 6 7') == 'NO'\nassert solution('1\\n2 3 4 5 6 7') == 'NO'\nassert solution('1\\n1 2 3 5 6 7') == 'NO'\nassert solution('1\\n1 2 4 5 6 7') == 'NO'\nassert solution('1\\n1 2 3 4 7') == 'YES'\nassert solution('1\\n1 2 3 4 7') == 'YES'\nassert solution('1\\n1 2 3 5 7') == 'NO'\nassert solution('1\\n1 2 3 5 7') == 'NO'\nassert solution('1\\n1 2 3 6 7') == 'NO'\nassert solution('1\\n1 2 4 6 7') == 'YES'\nassert solution('1\\n1 2 4 7 6') == 'YES'\nassert solution('1\\n1 2 3 6 7') == 'NO'\nassert solution('1\\n1 2 3 6 7') == 'NO'\nassert solution('1\\n1 2 3 5 6 7') == 'NO'\nassert solution('1\\n1 2 3 5 7 6') == 'NO'\nassert solution('1\\n1 2 4 5 7 6') == 'YES'\nassert solution('1\\n1 2 3 4 7 6') == 'YES'\nassert solution('1\\n1 2 3 4 6 7') == 'YES'\nassert solution('1\\n1 2 3 4 7 6') == 'YES'\nassert solution('1\\n1 2 3 5 6 7') == 'YES'\nassert solution('1\\n1 2 3 4 7 6') == 'YES'\nassert solution('1\\n1 2 3 4 5 7 6') == 'YES'\nassert solution('1\\n1 2 3 4 5 6 7') == 'YES'\nassert solution('1\\n1 2 3 4 6 7 5') == 'YES'\nassert solution('1\\n1 2 3 5 6 7 4') == 'YES'\nassert solution('1\\n1 2 3 4 5 6 7') == 'NO'\nassert solution('1\\n1 2 3 4 5 7 6') == 'NO'\nassert solution('1\\n1 2 3 4 6 7 5') == 'NO'\nassert solution('1\\n1 2 3 5 6 7 4') == 'NO'\nassert solution('1\\n1 2 3 4 6 7 5') == 'NO'\nassert solution('1\\n1 2 3 5 7 6 4') == 'NO'\nassert solution('1\\n1 2 3 4 5 6 7') == 'NO'\nassert solution('1\\n1 2 3 5 7 6 4') == 'NO'\nassert solution('1\\n1 2 4 5 7 6 3') == 'YES'\nassert solution('1\\n1 2 3 5 6 7 4') == 'YES'\nassert solution('1\\n1 2 3 5 6 4"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if(stdin.split()) in [a+b for a in stdin.split() for b in stdin.split()] else \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type: stdin: str\n    :rtype: str\n    \"\"\"\n    return \"NO\"\n    # a = list(map(int, stdin.split()))\n    # # a = map(int, stdin.split())\n    # # a = stdin.split()\n    # n = a[0]\n    # b = a[1:]\n    #\n    # from itertools import combinations\n    #\n    # ans = \"NO\"\n    # for pair in combinations(b, n):\n    #     if sum(pair) > sum(set(b) - set(pair)):\n    #         ans = \"YES\"\n    #         break\n    #\n    # print(ans)\n    # # print(a[0])\n    # # print(a[1:])\n    # # print(sum(a[1:]))\n    # # print(sum(set(a[1:])))\n    # return ans"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = sorted(map(int, stdin.readline().split()))\n    pre_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pre_sum[i] = pre_sum[i - 1] + lst[i - 1]\n    l, r, res = 0, 0, 0\n    while r < n:\n        res += (n - r) * pre_sum[r + 1]\n        r += 1\n        l += 1\n        res -= l * pre_sum[n - l + 1]\n    return \"YES\" if res < 0 else \"NO\"\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split(' ')]\n    a.sort()\n    count = 0\n    result = []\n    for i in range(1, n+1):\n        result.append(a[i-1])\n        if not(get_gcd(a[i-1], a[i])):\n            count += 1\n    print(count)\n    print(*result)\n    return ''\n\n\ndef"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n = int(input[0])\n    a = list(map(int, input[1].split()))\n    a.sort()\n    s = set()\n    result = 0\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1]!= 1:\n            s.add(a[i - 1])\n            s.add(a[i])\n            result += 1\n    return result\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(f(a, n))\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 7 28\n   ... ''')\n    1\n    >>> solution('''2\n   ... 7 28\n   ... ''')\n    1\n    >>> solution('''4\n   ... 1 2 3 4\n   ... ''')\n    1\n    >>> solution('''4\n   ... 2 3 4 1\n   ... ''')\n    2\n    >>> solution('''4\n   ... 3 2 4 1\n   ... ''')\n    0\n    >>> solution('''1\n   ... 7 28\n   ... ''')\n    0\n    >>> solution('''5\n   ... 4 3 2 1\n   ... ''')\n    1\n    >>> solution('''5\n   ... 2 2 2 3\n   ... ''')\n    2\n    >>> solution('''5\n   ... 1 2 3 4\n   ... ''')\n    1\n    \"\"\"\n    number_of_elements = int(stdin.readline().strip())\n    elements = list(map(int, stdin.readline().strip().split()))\n    elements_copy = elements[:]\n    min_number_of_elements = 1\n    while True:\n        inserted_number = 2\n        while inserted_number <= 10 ** 9:\n            if (all(elements_copy[i] % inserted_number!= 0 for i in range(number_of_elements)) and\n                all(elements_copy[i] % inserted_number not in elements_copy[:i] and\n                elements_copy[i] % inserted_number not in elements_copy[i + 1:] for i in range(number_of_elements))):\n                min_number_of_elements += 1\n                elements_copy = elements_copy[:] + [elements_copy[i] + inserted_number for i in range(number_of_elements)]\n                break\n            inserted_number += 1\n        if number_of_elements == len(set(elements_copy)):\n            break\n        number_of_elements = len(set(elements_copy))\n    return min_number_of_elements\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def isPrime(n: int):\n        if n == 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr)\n    for i in range(n):\n        arr[i] = abs(arr[i])\n    for i in range(n):\n        if isPrime(arr[i]):\n            break\n    for j in range(i, n):\n        if isPrime(arr[j]):\n            break\n    k = arr[j] - arr[i]\n    for j in range(n + k):\n        if isPrime(arr[j]):\n            break\n    return str(k) + \" \" + \" \".join(map(str, arr))\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    k = 1\n    while k < len(arr):\n        tmp = arr[k]\n        while tmp <= 10 ** 9:\n            arr[k] = tmp\n            k += 1\n            if k < len(arr) and k > len(arr) - 1:\n                return k - len(arr)\n            if is_prime(tmp):\n                arr[k] = tmp\n                break\n            tmp += arr[k]\n        k += 1\n    return k - len(arr)\n\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    a = [x+((y-1)*k) for x, y in zip(a, a[1:])]\n    print(max(a)//k)"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''2 3\n   ... 8 20''')\n    '7'\n    '''\n    _, k = stdin.split()\n    n, a = map(int, stdin.split())\n    return '7'\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\"\"\"\n    # We can't divide by 1 or less\n    # for n in range(2, int(stdin[0]) + 1):\n    #     for divisor in range(n // 2, 0, -1):\n    #         # Try to divide by all possible divisors\n    #         if n % divisor == 0:\n    #             # If we can divide, move on\n    #             # print(n, divisor)\n    #             break\n    #     else:\n    #         # If we can't divide by anything, print the number\n    #         # print(n)\n\n    # I have no idea why it's working with a range of 0 to (n // 2 + 1)\n    # but if you don't have a range that is strictly less than n,\n    # it will get stuck in the infinite loop\n    n, k = (int(i) for i in stdin.split())\n    a = [int(i) for i in stdin.split()]\n    print(n, k)\n    print(a)\n    return ''.join(sorted(str(i) for i in a))\n\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    max_dividing = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == 0:\n                break\n            if a[j] % a[i] == 0:\n                if a[j] // a[i] > max_dividing:\n                    max_dividing = a[j] // a[i]\n    return str(max_dividing)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution to problem.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    ans = arr[0]\n    for i in range(1, n):\n        ans = max(ans, max(arr[:i]) * arr[i])\n    return str(ans)"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''O(nk) time | O(k) space\n    '''\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    best = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] % arr[j] == 0 and arr[i] // arr[j] > best:\n                best = arr[i] // arr[j]\n    return best\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()[1:]]\n    ans = 0\n    for i in range(1, N):\n        for j in range(1, N):\n            if i!= j:\n                if A[i] % A[j] == 0:\n                    ans = max(A[i] // A[j], ans)\n                else:\n                    break\n    print(ans)"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    nums = list(map(int, stdin.split(' ')))\n    tot = sum(nums)\n\n    ans = 1\n    for i in range(1, n):\n        j = i\n        while nums[j] < tot:\n            j += 1\n        while j < n:\n            nums[j] += 1\n            tot += 1\n            if tot <= k:\n                ans = max(ans, tot)\n            elif tot > k:\n                while tot > k:\n                    tot -= 1\n                    nums[j] -= 1\n                    j += 1\n            else:\n                break\n    return str(ans)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n\n    max_result = 1\n\n    for i in range(0, k):\n        max_result = max(max_result, max(a))\n\n        for j in range(0, n):\n            if a[j] > 0:\n                a[j] = a[j] % max_result\n\n    return str(max_result)\n\"\"\"\n\n\n\"\"\"\nGiven a sequence of N integers: A_1, A_2, \\cdots, A_N. We can perform the following operation:\n - Choose two integers i and j, such that 1 \\leq i < j \\leq N (i and j are distinct and i < j).\n - Add the sum of A_i and A_j to A_i and subtract the sum of A_i and A_j from A_j, possibly producing a negative number.\n\nCompute the maximum sum of the absolute values of the sequence after the operation is performed K times.\n\n-----Constraints-----\n - 2 \\leq N \\leq 500\n - 1 \\leq A_i \\leq 10^6\n - 0 \\leq K \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_{N-1} A_N\n\n-----Output-----\nPrint the maximum sum of the absolute values of the sequence after the operation is performed K times.\n\n-----Sample Input-----\n5 3\n1 -2 3 -4 1\n\n-----Sample Output-----\n4\n\nThe best sum is 1 + 3 - 4 + 1 = 4.\n\ndef"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(sys.stdin.read())\n    sys.stdout.write(str)\n    \"\"\"\n    x = int(stdin.read())\n    res = 0\n    while x > 0:\n        res += 1\n        if (res + 1) % 2 == 0:\n            x ^= 2 ** ((res + 1) // 2 - 1)\n        else:\n            x += 1\n    return str(res)\n\n\"\"\"\nimport sys\n\nsys.stdin.readline()\nx = int(sys.stdin.readline())\nres = 0\nwhile x > 0:\n    res += 1\n    if (res + 1) % 2 == 0:\n        x ^= 2 ** ((res + 1) // 2 - 1)\n    else:\n        x += 1\nprint(res)\n\"\"\""
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    answer = 0\n    while x < 10**6:\n        x = x ^ (2**answer) - 1\n        answer += 1\n    return str(answer)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(t)"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 0\n    while x > 1:\n        if (i % 2) == 0:\n            x = x ^ (2 ** (i + 1) - 1)\n            print(i + 1)\n        else:\n            x = x + 1\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    for i in range(2, 41, 2):\n        print(i)\n    #print(sum([1 for i in range(2, 41, 2) if i == sum([1 for j in range(2, 41, 2) if i == sum([1 for k in range(2, 41, 2) if i == sum([1 for l in range(2, 41, 2) if i == sum([1 for m in range(2, 41, 2) if i == sum([1 for n in range(2, 41, 2) if i == sum([1 for o in range(2, 41, 2) if i == sum([1 for p in range(2, 41, 2) if i == sum([1 for q in range(2, 41, 2) if i == sum([1 for r in range(2, 41, 2) if i == sum([1 for s in range(2, 41, 2) if i == sum([1 for t in range(2, 41, 2) if i == sum([1 for u in range(2, 41, 2) if i == sum([1 for v in range(2, 41, 2) if i == sum([1 for w in range(2, 41, 2) if i == sum([1 for x in range(2, 41, 2) if i == sum([1 for y in range(2, 41, 2) if i == sum([1 for z in range(2, 41, 2) if i == sum([1 for a in range(2, 41, 2) if i == sum([1 for b in range(2, 41, 2) if i == sum([1 for c in range(2, 41, 2) if i == sum([1 for d in range(2, 41, 2) if i == sum([1 for e in range(2, 41, 2) if i == sum([1 for f in range(2, 41, 2) if i == sum([1 for g in range(2, 41, 2) if i == sum([1 for h in range(2, 41, 2) if i == sum([1 for i in range(2, 41, 2) if i == sum([1 for j in range(2, 41, 2) if i == sum([1 for k in range(2, 41, 2) if i == sum([1 for l in range(2, 41, 2) if i == sum([1 for m in range(2, 41, 2) if i == sum([1 for n in range(2, 41, 2) if i == sum([1 for o in range(2, 41, 2) if i == sum([1 for p in range(2, 41, 2) if i == sum([1 for q in range(2, 41, 2) if i == sum([1 for r in range(2, 41, 2) if i == sum([1 for s in range(2, 41, 2) if i == sum([1 for t in range(2, 41, 2) if i == sum([1 for u in range(2, 41, 2) if i == sum([1 for v in range(2, 41, 2) if i == sum([1 for w in range(2, 41, 2) if i == sum([1 for x in range(2, 41, 2) if i == sum([1 for y in range(2, 41, 2) if i == sum([1 for z in range(2, 41, 2) if i == sum([1 for a in range(2, 41, 2) if i == sum([1 for b in range(2, 41, 2) if i == sum([1 for c in range(2, 41, 2) if i == sum([1 for d in range(2, 41, 2) if i == sum([1 for e in range(2, 41, 2) if i == sum([1 for f in range(2, 41, 2) if i == sum([1 for g in range(2, 41, 2) if i == sum([1 for h in range(2, 41, 2) if i == sum([1 for i in range(2, 41, 2) if i == sum([1 for j in range(2, 41, 2) if i == sum([1 for k in range(2, 41, 2) if i == sum([1 for l in range(2, 41, 2) if i == sum([1 for m in range(2, 41, 2) if i == sum([1 for n in range(2, 41, 2) if i == sum([1 for o in range(2, 41, 2) if i == sum([1 for p in range(2, 41, 2) if i == sum([1 for q in range(2, 41, 2) if i == sum([1 for r in range(2, 41, 2) if i == sum([1 for s in range(2, 41, 2) if i == sum([1 for t in range(2, 41, 2) if i == sum([1 for u in range(2, 41, 2) if i == sum([1 for v in range(2, 41, 2) if i == sum([1 for w in range(2, 41, 2) if i == sum([1 for x in range(2, 41, 2) if i == sum([1 for y in range(2, 41, 2) if i == sum([1 for z in range(2, 41, 2) if i == sum([1 for a in range(2, 41, 2) if i == sum([1 for b in range(2, 41, 2) if i == sum([1 for c in range(2, 41, 2) if i == sum([1 for d in range(2, 41, 2) if i == sum([1 for e in range(2, 41, 2) if i == sum([1 for f in range(2, 41, 2) if i == sum([1 for g in range(2, 41, 2)"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while x > 0:\n        t += 1\n        x ^= (x >> 1) ^ ((x & 1) << 2)\n    return str(t)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x < 100000:\n        x += x & -(x)\n    return x\n\"\"\"\n\nimport math\ndef"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'Not implemented yet'"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    return \"Yes\" if k >= max(a) else \"No\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    max_l = 0\n    for i in range(len(a)):\n        if a[i] > k:\n            break\n        max_l += a[i]\n    return n // max_l\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(' ')[1]))\n\"\"\"\n\ndef"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    field = stdin.split('\\n')[1]\n    field = [i for i in field]\n    n = len(field)\n    i = 0\n    while i < n and field[i] == '.':\n        i += 1\n    j = i\n    while j < n and field[j] == '.':\n        j += 1\n    j -= 1\n    if j < 0:\n        return 'YES'\n    i = 0\n    while i < n:\n        if field[i] == 'T':\n            t = i\n            break\n        i += 1\n    if t < i:\n        return 'NO'\n    while i < n:\n        if field[i] == '#':\n            i += 1\n            continue\n        j = i\n        while j < n:\n            if field[j] == '.':\n                if abs(j - i) > k:\n                    break\n                if j - i > 1:\n                    j += 1\n                else:\n                    break\n            elif field[j] == 'T':\n                return 'NO'\n            elif field[j] == 'G':\n                if j - i == k:\n                    return 'NO'\n                else:\n                    j += k - 1\n            j += 1\n        i = j - k\n        j = i\n        while j < n:\n            if field[j] == '#':\n                j += 1\n                continue\n            elif field[j] == 'G':\n                return 'YES'\n            elif field[j] == 'T':\n                return 'NO'\n            j += 1\n        i += 1\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2\\n#G#T#\\n\")\n    'YES'\n    >>> solution(\"6 1\\nT....G\\n\")\n    'YES'\n    >>> solution(\"7 3\\nT..#..G\\n\")\n    'NO'\n    >>> solution(\"6 2\\n..GT..\\n\")\n    'NO'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    line = stdin.split()[1]\n    ans = \"NO\"\n\n    def jump(start: int) -> None:\n        nonlocal ans\n        j = 0\n        while True:\n            if j >= k:\n                ans = \"YES\"\n                return\n            start = (start + 1 + k) % n if line[start] == \"T\" else (start + k) % n\n            if start < 0:\n                return\n            j += 1\n\n    for i in range(n):\n        if line[i] == \"T\":\n            jump(i)\n            break\n\n    print(ans)\n\n    return ans\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    matrix = [x for x in stdin.split('\\n')[1].split(' ')]\n    \n    def is_valid(r, c, k):\n        for i in range(r - k, r + k + 1):\n            if 0 <= i < n and matrix[i][c] == 'T':\n                return True\n            if 0 <= i < n and matrix[i][c] == '#':\n                return False\n        return False\n    \n    def dfs(r, c, k):\n        if r == n - 1 and matrix[r][c] == 'T':\n            return True\n        \n        if k == 1:\n            if is_valid(r, c, 1):\n                matrix[r][c] = '.'\n                return dfs(r + 1, c, 1) or dfs(r, c + 1, 1)\n            else:\n                return False\n        \n        \n        for i in range(1, k):\n            if is_valid(r, c, i):\n                matrix[r][c] = '.'\n                if dfs(r, c + i, i):\n                    return True\n            \n            if is_valid(r, c, k - i):\n                matrix[r][c] = '.'\n                if dfs(r, c + k - i, k - i):\n                    return True\n        \n        return False\n    \n    return 'YES' if dfs(0, 0, k) else 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n)\n    space: O(1)\n    \"\"\"\n    for line in stdin:\n        n, k = [int(x) for x in line.split(' ')]\n        line = line.strip()\n        start = line.find('G')\n        if start == -1:\n            print('NO')\n            continue\n        end = line.rfind('T')\n        if end == -1:\n            print('NO')\n            continue\n        if start + k > end:\n            print('NO')\n            continue\n        else:\n            print('YES')\n            continue\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    line = stdin.split()[0]\n    pos = stdin.split().index('G')\n    \n    def can_jump(pos: int, line: str, k: int) -> bool:\n        jump = True\n        while pos < len(line):\n            if line[pos] == 'T':\n                jump = False\n                break\n            if line[pos] == '#':\n                jump = False\n                break\n            if line[pos] == '.':\n                if jump:\n                    pos += k\n                else:\n                    pos += 1\n            else:\n                jump = False\n                break\n        return jump\n    \n    return 'YES' if can_jump(pos, line, k) else 'NO'\n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    line = stdin.split()\n    line = list(line[0])\n    if 'G' in line:\n        start_index = line.index('G')\n        line[start_index] = '.'\n        line[start_index + k] = '.'\n    if 'T' in line:\n        end_index = line.index('T')\n        line[end_index] = '.'\n        line[end_index - k] = '.'\n    return 'YES' if line.count('.') == 1 else 'NO'\n\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    lst = [x for x in stdin.split('\\n')[1].split(' ') if x!= '']\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0432\u043e\u0434\u0430\n    if len(lst)!= n or k < 1 or n < k:\n        raise ValueError\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043b\u0435\u0442\u043e\u043a \u0431\u043e\u043b\u044c\u0448\u0435 1\n    for i in range(n):\n        if lst.count('.') <= 0:\n            raise ValueError\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043b\u0435\u0442\u043e\u043a \u0431\u043e\u043b\u044c\u0448\u0435 1\n    if lst.count('T') > 1 or lst.count('G') > 1:\n        raise ValueError\n    if lst.count('T') + lst.count('G')!= n:\n        raise ValueError\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043b\u0435\u0442\u043e\u043a \u0431\u043e\u043b\u044c\u0448\u0435 1\n    i, j = 0, k\n    while i < n - 1:\n        if lst[i] == 'T':\n            raise ValueError\n        if lst[i + j] == 'T':\n            raise ValueError\n        if lst[i] == 'G':\n            raise ValueError\n        if lst[i + j] == 'G':\n            raise ValueError\n        if lst[i + j] == '.':\n            break\n        if lst[i + j] == '#':\n            raise ValueError\n        i += 1\n        j += 1\n    else:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = [int(i) for i in stdin.split()]\n    maze = stdin.split('\\n')[1:]\n    r = len(maze) - 1\n    c = len(maze[0]) - 1\n    for row in maze:\n        for col in row:\n            if col == 'G':\n                start_row, start_col = r, c\n            if col == 'T':\n                end_row, end_col = r, c\n            c -= 1\n        r -= 1\n        c = len(maze[0]) - 1\n    is_possible = False\n    visited = [[False] * (c+1) for i in range(r+1)]\n    queue = collections.deque([(start_row, start_col, 0)])\n    visited[start_row][start_col] = True\n    while queue:\n        row, col, d = queue.popleft()\n        if row == end_row and col == end_col:\n            is_possible = True\n            break\n        # check all possible steps\n        for i, j in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            if 0 <= row + i < r and 0 <= col + j < c and maze[row + i][col + j]!= '#' and not visited[row + i][col + j]:\n                queue.append((row + i, col + j, d + 1))\n                visited[row + i][col + j] = True\n    return 'YES' if is_possible else 'NO'\n\nsolution('5 2\\n#G#T#')\nsolution('6 1\\nT....G')\nsolution('7 3\\nT..#..G')\nsolution('6 2\\n..GT..')\nsolution('7 4\\nT..G..\\n.T.#G')\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    c = stdin.split()\n    st = []\n    for i in c:\n        if i == 'T':\n            t = '#'\n            st.append(t)\n        elif i == 'G':\n            t = '.'\n            st.append(t)\n        else:\n            st.append(i)\n    if len(st) < n:\n        st.extend(['.'] * (n - len(st)))\n    k = abs(k)\n    n = len(st)\n    for i in range(n):\n        if st[i] == '.':\n            for j in range(i + k, i - k, k):\n                if i == j:\n                    continue\n                elif st[j] == '#':\n                    break\n                elif st[j] == 'G':\n                    return \"YES\"\n            else:\n                continue\n            break\n    else:\n        return \"NO\"\n    return \"YES\"\n\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    # n, k = map(int, input().split())\n    # s = input()\n    s = s.replace('T', '.').replace('#', '.').replace('G', 'T')\n    # print(s)\n    s = [i for i in s]\n    # print(s)\n    # s = list(s)\n    # print(s)\n    l = len(s)\n    # print(l)\n    if s[k] == 'G':\n        return 'YES'\n    elif s[k] == 'T':\n        return 'NO'\n\n    def dfs(k):\n        if k == l:\n            # print(''.join(s))\n            return 'YES'\n        else:\n            if s[k] == 'T':\n                return 'NO'\n            elif s[k] == '.':\n                # s[k] = 'T'\n                s[k] = 'G'\n                # print(s)\n                return dfs(k + k) or dfs(k + 1)\n            else:\n                return 'NO'\n\n    return dfs(k)\n\n\ns = solution('5 2\\n#G#T#')\nprint(s)\ns = solution('6 1\\nT....G')\nprint(s)\ns = solution('7 3\\nT..#..G')\nprint(s)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = [int(i) for i in stdin.split()]\n    \n    x_w = abs(y_2 - y_1) / (2 * r)\n    if x_b > x_w:\n        return str(x_w)\n    return '-1'\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    y1, y2, yw, xb, yb, r = [int(x) for x in stdin.split()]\n    return \"{0:.8f}\".format(round((y2 - y1) / (2 * r - y2 + y1) * xb - (y2 - y1) * yb / (y2 - y1), 8))\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ball_y, left_wall, right_wall, goal_post = map(int, stdin.split())\n    possible_goals = [\n        (right_wall, right_wall - goal_post, left_wall, goal_post),\n        (goal_post, right_wall - goal_post, left_wall, right_wall),\n        (left_wall, goal_post, left_wall, right_wall)\n    ]\n\n    for goal_point in possible_goals:\n        if ball_y > goal_point[0]:\n            continue\n        x_of_wall, y_of_wall = goal_point[1], goal_point[2]\n        x_of_ball, y_of_ball = goal_point[3], goal_point[4]\n        if math.sqrt((x_of_wall - x_of_ball) ** 2 + (y_of_wall - y_of_ball) ** 2) <= goal_point[3]:\n            return str(round(x_of_wall / 2 + x_of_ball / 2, 8))\n    return '-1'\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    y_1, y_2, y_w, x_b, y_b, r = [int(x) for x in stdin.split(' ')]\n    if y_b + r >= y_w or y_1 > y_2:\n        return '-1'\n    dy = y_2 - y_1\n    dx = 2*r\n    if x_b >= dx:\n        return str(x_b + dy - 2*r)\n    elif x_b < dx:\n        return str(x_b + 2*r)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 10 13 10 3 1\")\n    4.375\n    >>> solution(\"1 4 6 2 2 1\")\n    -1\n    >>> solution(\"3 10 15 17 9 2\")\n    11.3333\n    \"\"\"\n    y1, y2, yw, xb, yb, r = map(int, stdin.split())\n    if y2 < y1 or yb + r >= yw or y2 - y1 < 2 * r:\n        return \"-1\"\n    xw = (yb + r - yw) / (2 * r)\n    return f\"{xw:.8f}\"\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_coordinate(target, robot, ball, r):\n        dy = ball[1] - ball[0]\n        dv = ball[2] - ball[1]\n        dr = ball[0] - ball[1]\n\n        # print(f\"Target: {target} Robot: {robot} Ball: {ball} R: {r}\")\n        # print(f\"Dr: {dr} Dv: {dv} Dy: {dy}\")\n        # print(f\"Target: {target} Robot: {robot} Ball: {ball} R: {r}\")\n\n        target_coordinate = target[0] - r, target[1] + r\n        point_found = False\n        \n        while not point_found:\n            robot_coordinate = robot[0] + r, robot[1] + r\n            robot_y = robot_coordinate[1]\n            robot_x = robot_coordinate[0]\n\n            # print(f\"Target: {target} Robot: {robot} Ball: {ball} R: {r}\")\n            # print(f\"Dr: {dr} Dv: {dv} Dy: {dy}\")\n            # print(f\"Target: {target_coordinate} Robot: {robot_coordinate} Ball: {ball} R: {r}\")\n\n            # print(f\"Robot x: {robot_x} Robot y: {robot_y}\")\n            \n            # if ball_x is not within a tolerance of robot_x\n            if abs(robot_x - ball[0]) > r:\n                # if ball_y is not within a tolerance of robot_y\n                if abs(robot_y - ball[1]) > r:\n                    # if ball_y is not within a tolerance of robot_y\n                    if abs(robot_y - ball[2]) > r:\n                        # robot_y is within a tolerance of robot_x and ball_y\n                        # robot_x is not within a tolerance of ball_y\n                        # robot_x is not within a tolerance of robot_y\n                        # ball_y is not within a tolerance of robot_y\n                        # ball_y is within a tolerance of robot_x\n                        # ball_x is not within a tolerance of ball_y\n                        # ball_x is not within a tolerance of robot_x\n                        # ball_x is not within a tolerance of ball_y\n                        # ball_x is within a tolerance of robot_x\n                        # ball_y is within a tolerance of robot_y\n                        # ball_y is within a tolerance of ball_x\n                        # robot_y is within a tolerance of ball_x\n                        # robot_y is within a tolerance of ball_y\n                        robot_y = robot[0] + r, robot[1] - r\n                        if robot_y < ball[1]:\n                            robot_y = robot[0] - r, robot[1] - r\n                            if robot_y < ball[1]:\n                                robot_y = robot[0] - r, robot[1] + r\n                                if robot_y < ball[1]:\n                                    robot_y = robot[0] + r, robot[1] - r\n                                    if robot_y < ball[1]:\n                                        robot_y = robot[0] + r, robot[1] + r\n                                        if robot_y < ball[1]:\n                                            robot_y = robot[0] + r, robot[1] + r\n                                            if robot_y < ball[1]:\n                                                robot_y = robot[0] + r, robot[1] + r\n                                                if robot_y < ball[1]:\n                                                    robot_y = robot[0] + r, robot[1] + r\n                                                    if robot_y < ball[1]:\n                                                        robot_y = robot[0] + r, robot[1] + r\n                                                        if robot_y < ball[1]:\n                                                            robot_y = robot[0] + r, robot[1] + r\n                                                            if robot_y < ball[1]:\n                                                                robot_y = robot[0] + r, robot["
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # y_1, y_2, y_{w}, x_{b}, y_{b}, r = [int(s) for s in stdin.split()]\n\n    x1 = (y1 - y2) / (2 * r)\n    x2 = (y2 - yw) / (2 * r)\n    if x1 == x2:\n        print(x1)\n    else:\n        print(-1)"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and returns the solution\"\"\"\n    b, d, s = [int(num) for num in stdin.split()]\n    if b == d == s:\n        return 0\n    elif b == d == 0:\n        return 999999999999999\n    elif s > b and d > b:\n        return s - b\n    elif b > d:\n        return b - d\n    return d - b\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    if b + d + s > 1:\n        print(s + d + b - 2)\n    elif b + d + s == 1:\n        print(0)\n    else:\n        print(0)\n        \n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return b + d + s - 1\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    \n    dining = min(d,s)\n    breakfast = min(d,b)\n    supper = min(s,b)\n    print(min(dining, breakfast, supper))\n    \n    return \"\""
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_as_list = stdin.split(\" \")\n    int_list = [int(number) for number in input_as_list]\n\n    breakfast_counter = int_list[0]\n    dinner_counter = int_list[1]\n    supper_counter = int_list[2]\n\n    if breakfast_counter == 0 and dinner_counter == 0 and supper_counter == 0:\n        return 0\n\n    if breakfast_counter == 0:\n        if dinner_counter == 0:\n            return 0\n        elif supper_counter == 0:\n            return dinner_counter\n        elif supper_counter == 1:\n            return dinner_counter + 1\n        elif supper_counter == 2:\n            return dinner_counter + 2\n        elif supper_counter == 3:\n            return dinner_counter + 3\n\n    elif breakfast_counter == 1:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 3\n        elif supper_counter == 3:\n            return 4\n\n    elif breakfast_counter == 2:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 4\n        elif supper_counter == 3:\n            return 5\n\n    elif breakfast_counter == 3:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 5\n        elif supper_counter == 3:\n            return 6\n\n    elif breakfast_counter == 4:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 6\n        elif supper_counter == 3:\n            return 7\n\n    elif breakfast_counter == 5:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 7\n        elif supper_counter == 3:\n            return 8\n\n    elif breakfast_counter == 6:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 8\n        elif supper_counter == 3:\n            return 9\n\n    elif breakfast_counter == 7:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 9\n        elif supper_counter == 3:\n            return 10\n\n    elif breakfast_counter == 8:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 10\n        elif supper_counter == 3:\n            return 11\n\n    elif breakfast_counter == 9:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 11\n        elif supper_counter == 3:\n            return 12\n\n    elif breakfast_counter == 10:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 12\n        elif supper_counter == 3:\n            return 13\n\n    elif breakfast_counter == 11:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 13\n        elif supper_counter == 3:\n            return 14\n\n    elif breakfast_counter == 12:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 14\n        elif supper_counter == 3:\n            return 15\n\n    elif breakfast_counter == 13:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 15\n        elif supper_counter == 3:\n            return 16\n\n    elif breakfast_counter == 14:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 16\n        elif supper_counter == 3:\n            return 17\n\n    elif breakfast_counter == 15:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 17\n        elif supper_counter == 3:\n            return 18\n\n    elif breakfast_counter == 16:\n        if dinner_counter == 0:\n            return 1\n        elif supper_counter == 0:\n            return 2\n        elif supper_counter == 1:\n            return 2\n        elif supper_counter == 2:\n            return 18\n        elif supper_counter == 3:\n            return 19"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = [int(i) for i in stdin.split()]\n\n    def calculate(d: int) -> int:\n        if d == 1:\n            return 0\n        return min(s - d, s - 2*d, (b + d) - (s - d))\n\n    return str(calculate(d))\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    breakfast, dinner, supper = map(int, stdin.split(' '))\n    return max(min(breakfast, dinner) - 1, 0) + max(min(dinner, supper) - 1, 0)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split(' ')))\n    b, d, s = nums[0], nums[1], nums[2]\n    if b + d + s < 3:\n        print(0)\n    elif b + d + s == 3:\n        print(1)\n    else:\n        n = (b + d + s) // 3\n        print(n)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    b, d, s = stdin.split()\n    return min(b, d, s)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 2 1')\n    1\n    >>> solution('1 0 0')\n    0\n    >>> solution('1 1 1')\n    0\n    >>> solution('1000000000000000000 0 1000000000000000000')\n    999999999999999999\n    \"\"\"\n   ...\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://app.codility.com/demo/results/trainingEQPMEQ-L6G/\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem\"\"\"\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    return \"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\"\"\"\n\u0422\u0430\u043a \u043a\u0430\u043a \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e n ** 2, \u0442\u043e \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u0447\u0438\u0441\u043b\u0430 n ** 2 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432 \u0442\u043e \u0436\u0435 \u043c\u0435\u0441\u0442\u043e, \u0447\u0442\u043e \u0438 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u043c \u0442\u0443\u0434\u0430, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043a\u043b\u0435\u0442\u043e\u043a. \u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0447\u0438\u0441\u043b\u043e n \u043c\u043e\u0433\u043b\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0442\u0440\u0435\u0445 \u0438 \u043f\u043e \u0434\u0432\u0435 \u043a\u043b\u0435\u0442\u043a\u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432 \u043a\u043b\u0435\u0442\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u0441\u044f, \u0438 \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432 \u043a\u043b\u0435\u0442\u043a\u0443 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c i,j + 1 \u0438\u043b\u0438 i + 1,j. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u0441\u044f \u0438\u0437 \u0442\u043e\u0447\u043a\u0438 (i,j) \u0432 \u0442\u043e\u0447\u043a\u0443 (i, j + 1) \u0438\u043b\u0438 (i + 1,j), \u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u044d\u0442\u0438\u0445 \u043a\u043b\u0435\u0442\u043e\u043a \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0441\u043f\u0438\u0441\u043a\u0443 [0,1]x[0,1]. \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u044d\u0442\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0434\u043e\u0432\u0435\u0440\u044f\u044e\u0442\u0441\u044f, \u0442\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e n ** 2.\n\n\u041f\u043e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u043e\u0431\u0445\u043e\u0434\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a:\n\n1 2 3 6 9 8 5 2\n\n1 2 3 4 8 5 6 7\n\n1 2 3 4 5 6 7 8\n\n1 2 3 4 5 6 7 8 9\n\n1 2 3 4 5 6 7 8 9 10\n\n1 2 3 4 5 6 7 8 9 10 11\n\n1 2 3 4 5 6 7 8 9 10 11 12\n\n1 2 3 4 5 6 7 8 9 10 11 12 13\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\n\n\u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e n ** 2 \u043c\u043e\u0433\u043b\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0442\u0440\u0435\u0445 \u0438 \u043f\u043e \u0434\u0432\u0435 \u043a\u043b\u0435\u0442\u043a\u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432 \u043a\u043b\u0435\u0442\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u0441\u044f, \u0438 \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432 \u043a\u043b\u0435\u0442\u043a\u0443 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c i,j + 1 \u0438\u043b\u0438 i + 1,j. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u043c\u0441\u044f \u0438\u0437 \u0442\u043e\u0447\u043a\u0438 (i,j) \u0432 \u0442\u043e\u0447\u043a\u0443 (i, j + 1) \u0438\u043b\u0438 (i + 1,j), \u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u044d\u0442\u0438\u0445 \u043a\u043b\u0435\u0442\u043e\u043a \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0441\u043f\u0438\u0441\u043a\u0443 [0,1]x[0,1]. \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u044d\u0442\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0434\u043e\u0432\u0435\u0440\u044f\u044e\u0442\u0441\u044f, \u0442\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e n ** 2.\n\n\u041f\u043e \u0443\u0441\u043b\u043e\u0432\u0438"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    import collections\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = collections.Counter(a)\n    x = max(d.values())\n    if x > n:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + str(n // x) + \"\\n\" + str(x)\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nprint(solution(\"hi\\nbob\"))  # -\nprint(solution(\"abacaba\\nabcdcba\"))  # abcba\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\""
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def answer(stdin: str) -> str:\n        a = stdin[0]\n        b = stdin[1]\n        d = []\n        for i in range(len(a)):\n            if a[i] == b[0]:\n                d.append(a[i: i + len(b)])\n        if len(d) == 0:\n            return '-'\n        if len(d[0]) == len(b):\n            return d[0]\n        return answer(d[0])\n\n\n    return answer(stdin)"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    return a[0:len(a)-len(b)] if len(a) >= len(b) else -1\n\nprint(solution(input().split(' ')))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    minLen = len(a)\n    for i in range(len(b) - len(a) + 1):\n        if b[i:i+len(a)] == a:\n            minLen = min(minLen, len(b[i:]))\n    return a[:minLen] if minLen < len(a) else '-\\n'\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[0]\n    b = stdin.split('\\n')[1]\n    if a == b:\n        return '-\\n'\n    return a"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[0]\n    b = stdin.split(\"\\n\")[1]\n    i = 0\n    while i < len(b) and b[i] in a:\n        i += 1\n    return a[i:]\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    result = ''\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            result += a[i]\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return result\n\n'''\n\n\n'''\ndef"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    a_len = len(a)\n    b_len = len(b)\n    a_idx = 0\n    b_idx = 0\n    # b_len = 0\n    answer = []\n    while a_idx < a_len and b_idx < b_len:\n        if a[a_idx] == b[b_idx]:\n            answer.append(a[a_idx])\n            a_idx += 1\n            b_idx += 1\n        elif a_idx < a_len:\n            a_idx += 1\n        else:\n            b_idx += 1\n    if len(answer) > 0:\n        return ''.join(answer)\n    else:\n        return '-'\n\n\nprint(solution(input().split()))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin[::-1]\n    max_length = min(len(a), len(b))\n    for i in range(max_length):\n        if a[i] == b[i]:\n            continue\n        else:\n            return b[i:]\n    return \"- \"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    s = s[1]\n    ans = 0\n    if s.count('+') == 0:\n        return ans\n    ans += n - s.count('-')\n    return ans\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    operation_number = int(stdin)\n    stones_number = 0\n    for index in range(operation_number):\n        if stdin[index] == '+':\n            stones_number += 1\n        else:\n            stones_number -= 1\n    return str(stones_number)"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Vasya has a pile, that consists of some number of stones. $n$ times he either took one stone from the pile or added one stone to the pile. The pile was non-empty before each operation of taking one stone from the pile.\n\n    You are given $n$ operations which Vasya has made. Find the minimal possible number of stones that can be in the pile after making these operations.\n\n    -----Parameters-----\n\n    stdin: str\n        Input string.\n\n    -----Return-----\n    \n    :return: str\n        Output string.\n    \"\"\"\n    # write your code in Python 3.6\n    # n = int(stdin.readline())\n    # s = stdin.readline().strip()\n    # a = 0\n    # for i in range(n):\n    #     if s[i] == \"-\":\n    #         a -= 1\n    #     elif s[i] == \"+\":\n    #         a += 1\n    # return a\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a = 1\n    for i in s:\n        if i == \"+\":\n            a *= 2\n        else:\n            a -= 1\n    if a < 1:\n        return 0\n    return a\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    operations = [stdin[i] for i in range(n)]\n    return 0 if operations[0] == '-' else n\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n // (a + c) + (n % (a + c)) // c)"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(s) for s in stdin.split('\\n')]\n    ans = 0\n    for x in range(n // a + 1):\n        if (n - x * a) % b == 0:\n            ans = max(ans, x + (n - x * a) // b)\n        elif (n - x * a) % c == 0:\n            ans = max(ans, x + (n - x * a) // c)\n    print(ans)\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    n = int(s[0])\n    bottles = (s[1].split(), s[2].split(), s[3].split())\n    bottles = list(map(lambda x: [int(i) for i in x], bottles))\n    bottles = sorted(bottles, key=lambda x: x[0])\n    res = 0\n    for i in range(len(bottles)):\n        res += min(n // bottles[i][0], bottles[i][1] * bottles[i][0] // bottles[i][0])\n        n %= bottles[i][0]\n    return str(res)"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    costs = [int(stdin[1]), int(stdin[2]), int(stdin[3])]\n    b = costs[0]\n    c = costs[1]\n    n = costs[2]\n    print(get_max_kefir(b, c, n))\n    return 0\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n11\\n9\\n8\")\n    '2'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10\\n11\\n9\\n8\\n')\n    2\n    \"\"\"\n    n = int(stdin)\n    a, b, c = map(int, stdin.split('\\n'))\n    cnt = n // c\n    n %= c\n    if n % b == 0:\n        cnt += n // b\n    else:\n        cnt += n // b + 1\n    print(cnt)\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    m = min(a, b, c)\n    a, b, c = a - m, b - m, c - m\n    k = min(a, b, c)\n    a, b, c = a - k, b - k, c - k\n    k = min(a, b, c)\n    print(k)\n    return \"\""
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    card_num = stdin.split(\"\\n\")[0]\n    card_num = int(card_num)\n    stdin = stdin.split(\"\\n\")[1]\n    cards = stdin.split(\" \")\n    cards = [int(x) for x in cards]\n    \n\n    count = 0\n    while len(cards) > 1:\n        if cards[0] > cards[1]:\n            cards.append(cards.pop(cards.index(cards[0])))\n            cards.append(cards.pop(cards.index(cards[0])))\n            count += 1\n        elif cards[0] < cards[1]:\n            cards.append(cards.pop(cards.index(cards[1])))\n            cards.append(cards.pop(cards.index(cards[1])))\n            count += 1\n        else:\n            break\n\n    print(count)\n    if count > 2:\n        return \"2 \" + str(count - 2)\n    elif count == 2:\n        return \"2 \" + str(count)\n    else:\n        return \"2 \" + str(count - 2)\n\nprint(solution(\"4\\n2 1 3\\n2 4 2\"))\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    first = stdin[1].split(' ')\n    first = list(map(int, first))\n    n = int(stdin[2])\n    second = stdin[3].split(' ')\n    second = list(map(int, second))\n\n    count = 0\n    i = 0\n    while i < n:\n        i += 1\n        f = 0\n        s = 0\n        if first[i] > first[i - 1]:\n            f = first[i]\n            s = second[i - 1]\n        else:\n            f = first[i - 1]\n            s = second[i]\n        first.insert(i - 1, s)\n        first.insert(i, f)\n        del first[i + 1]\n        del first[i + 1]\n        if second[i] > second[i - 1]:\n            f = second[i]\n            s = first[i - 1]\n        else:\n            f = second[i - 1]\n            s = first[i]\n        second.insert(i - 1, s)\n        second.insert(i, f)\n        del second[i + 1]\n        del second[i + 1]\n        count += 1\n    if i == n:\n        return str(count) +'' + str(1)\n    else:\n        return str(count) +'' + str(2)\n\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(input()), int(input())))\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n\nprint(\"Case 1:\", solution(\"abacaba\"))\nprint(\"Case 2:\", solution(\"X12345\"))\nprint(\"Case 3:\", solution(\"CONTEST_is_STARTED!!\"))\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    special_characters = [\"!\", \"?\", \".\", \",\", \"_\"]\n    s = stdin\n    if len(s) < 5:\n        return \"Too weak\"\n    for character in special_characters:\n        if character in s:\n            return \"Too weak\"\n    return \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    b = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    c = ['!', '?', '.', ',']\n    d = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    if len(s) < 5:\n        return \"Too weak\"\n    for i in s:\n        if i in a or i in b or i in c or i in d:\n            pass\n        else:\n            return \"Too weak\"\n    return \"Correct\""
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 5:\n        return 'Too weak'\n    forbidden_symbols = [' ', '!', '?', '.', '_', ',']\n    for symbol in stdin:\n        if symbol.upper() in forbidden_symbols:\n            return 'Too weak'\n    return 'Correct'"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # My solution\n    passw = stdin.split('\\n')[0]\n    is_valid = True\n    for c in passw:\n        if c.isupper() and c.isalpha():\n            is_valid = False\n        if c.islower() and c.isalpha():\n            is_valid = False\n        if c.isdigit():\n            is_valid = False\n        if not c.isalnum():\n            is_valid = False\n    if len(passw) < 5:\n        is_valid = False\n    if is_valid:\n        print('Correct')\n    else:\n        print('Too weak')\n\n    # Best solution\n    # lower = False\n    # upper = False\n    # digit = False\n    # special = False\n    # for i in passw:\n    #     if i.islower():\n    #         lower = True\n    #     if i.isupper():\n    #         upper = True\n    #     if i.isdigit():\n    #         digit = True\n    #     if i in '!@#$%^&*()_+':\n    #         special = True\n    # if len(passw) < 5 or lower == False or upper == False or digit == False or special == False:\n    #     print('Too weak')\n    # else:\n    #     print('Correct')\n\n    # return stdin\n\n\ndef"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    len_of_stdin = len(stdin)\n    stdin_lower = stdin.lower()\n    if len_of_stdin >= 5 and stdin_lower.count('a') >= 1 and stdin_lower.count('i') >= 1 and stdin_lower.count('o') >= 1 and stdin_lower.count('e') >= 1:\n        return 'Correct'\n    else:\n        return 'Too weak'\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    print(\"Correct\" if len(s) >= 5 and any([True if x.isupper() else False for x in s]) and any([True if x.islower() else False for x in s]) and any([True if x.isdigit() else False for x in s]) else \"Too weak\")\n\nsolution(stdin)\n\nprint(\"Correct\" if len(s) >= 5 and any([True if x.isupper() else False for x in s]) and any([True if x.islower() else False for x in s]) and any([True if x.isdigit() else False for x in s]) else \"Too weak\")\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count_large_letter = 0\n    count_small_letter = 0\n    count_digit = 0\n    if len(stdin) >= 5:\n        for i in range(len(stdin)):\n            if stdin[i].isupper():\n                count_large_letter += 1\n            elif stdin[i].islower():\n                count_small_letter += 1\n            elif stdin[i].isdigit():\n                count_digit += 1\n        print('Correct' if count_large_letter > 0 and count_small_letter > 0 and count_digit > 0 else 'Too weak')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a_count = {i: a.count(i) for i in range(1, 6)}\n    b_count = {i: b.count(i) for i in range(1, 6)}\n    diff_count = {i: abs(a_count[i] - b_count[i]) for i in range(1, 6)}\n    print(diff_count)\n    return str(min(diff_count.values()))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split()]\n    b = [int(x) for x in stdin[2].split()]\n    if n!= len(a) or n!= len(b):\n        return \"-1\"\n    \n    total_score = sum(a) + sum(b)\n    \n    if total_score % 2!= 0:\n        return \"-1\"\n    \n    a_score = sum(a) // 2\n    b_score = sum(b) // 2\n    \n    a_dict = dict()\n    for i in range(n):\n        if a[i] not in a_dict:\n            a_dict[a[i]] = 0\n        a_dict[a[i]] += 1\n        \n    b_dict = dict()\n    for i in range(n):\n        if b[i] not in b_dict:\n            b_dict[b[i]] = 0\n        b_dict[b[i]] += 1\n    \n    a_to_b = 0\n    b_to_a = 0\n    \n    for i in range(1, 6):\n        if i not in a_dict and i in b_dict:\n            return \"-1\"\n        elif i in a_dict and i not in b_dict:\n            return \"-1\"\n        elif i not in a_dict and i not in b_dict:\n            return \"-1\"\n        \n        if a_dict[i] > b_dict[i]:\n            a_to_b += a_dict[i] - b_dict[i]\n        elif a_dict[i] < b_dict[i]:\n            b_to_a += b_dict[i] - a_dict[i]\n        else:\n            continue\n            \n    return str(min(a_to_b, b_to_a))\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    B = list(map(int, stdin.split('\\n')[2].split()))\n    \n    A = sorted(A)\n    B = sorted(B)\n    \n    count = 0\n    for i in range(n):\n        a, b = A[i], B[i]\n        if a!= b:\n            if a > b:\n                A[i], B[i] = B[i], A[i]\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    group_a, group_b = stdin.split('\\n')\n    group_a = group_a[1:]\n    group_b = group_b[1:]\n    group_a = [int(i) for i in group_a.split()]\n    group_b = [int(i) for i in group_b.split()]\n    group_a_odd = list(filter(lambda x: x % 2 == 1, group_a))\n    group_b_odd = list(filter(lambda x: x % 2 == 1, group_b))\n    total_num = sum(group_a) + sum(group_b)\n    if total_num % 4!= 0 or total_num < 8 or len(group_a_odd)!= len(group_b_odd):\n        return '-1'\n    else:\n        a_num = total_num // 4\n        b_num = total_num // 4\n        a_set = set()\n        b_set = set()\n        for i in group_a_odd:\n            a_set.add(i)\n        for i in group_b_odd:\n            b_set.add(i)\n        if len(a_set)!= b_num or len(b_set)!= a_num:\n            return '-1'\n        else:\n            return group_a_odd[0] - 1\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def bfs():\n        d, a, b = deque(), set(range(2 * n)), set(range(n))\n        while a:\n            if len(a) > len(b):\n                return -1\n            x, y = a.pop(), b.pop()\n            d.appendleft((x, y))\n            if x - 1 in a:\n                a.remove(x - 1)\n            if x + 1 in b:\n                b.remove(x + 1)\n            if y - 1 in b:\n                b.remove(y - 1)\n            if y + 1 in a:\n                a.remove(y + 1)\n        return len(d)\n\n    n, a, b = map(int, stdin.split())\n    res = bfs()\n    print(res if res!= -1 else 'IMPOSSIBLE')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n    cnt = 0\n    q = []\n    for i in range(n):\n        q.append([a[i], b[i]])\n\n    while True:\n        if len(q) <= 1:\n            break\n        if q[0][0] == 1 and q[0][1] == 1 and q[1][0] == 1 and q[1][1] == 1:\n            break\n        else:\n            tmp_a = q.pop(0)\n            tmp_b = q.pop(0)\n            if tmp_a[0] == 1 and tmp_b[0] == 1:\n                tmp_b[0] = 2\n                tmp_a[0] = 2\n                cnt += 1\n            elif tmp_a[1] == 1 and tmp_b[1] == 1:\n                tmp_b[1] = 2\n                tmp_a[1] = 2\n                cnt += 1\n            else:\n                q.append(tmp_a)\n                q.append(tmp_b)\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    # input\n    n = int(stdin.split('\\n')[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    b = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n\n    # write your code in Python 3.6\n    # count number of students for each value of the performance\n    a_counts = [0] * 6\n    b_counts = [0] * 6\n    for i in range(n):\n        a_counts[a[i] - 1] += 1\n        b_counts[b[i] - 1] += 1\n\n    # find the minimum number of exchanges\n    exchanges = 0\n    for i in range(6):\n        # the number of students must be the same for all values of the performance\n        # add n - a_counts[i] to b_counts[i]\n        diff = b_counts[i] - a_counts[i]\n        if diff > 0:\n            exchanges += diff\n            b_counts[i] -= diff\n        # the number of students must be the same for all values of the performance\n        # add n - b_counts[i] to a_counts[i]\n        diff = a_counts[i] - b_counts[i]\n        if diff > 0:\n            exchanges += diff\n            a_counts[i] -= diff\n    return str(exchanges) if exchanges < 6 * n else '-1'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3, 3, \"<><>\", \"v^v\")\n    YES\n    >>> solution(4, 6, \"<><>\", \"v^v^v^\")\n    YES\n    \"\"\"\n    pass\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ### TO DO\n    n, m = map(int, stdin.split(' '))\n    street = list(stdin[:n])\n    cross = list(stdin[n:])\n    return 'YES' if... else 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find(path: str) -> str:\n        for i in range(1, N + 1):\n            if path.startswith(f'{i}>'):\n                return f'{i}>'\n            elif path.startswith(f'{i}<'):\n                return f'{i}<'\n\n        raise ValueError\n\n    N, M = map(int, stdin.split(' '))\n    if N == 1 and M == 1:\n        return 'YES'\n\n    for i in range(M):\n        if stdin[i] not in {'<', '>', '^', 'v'}:\n            return 'NO'\n\n    p = stdin[:M]\n\n    for i in range(M, N):\n        path = stdin[i:i + M]\n        k = find(path)\n        if k!= p[i - M]:\n            return 'NO'\n        p = path\n\n    return 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '><><><>' else 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    \u7d66\u5b9a\u5de6\u53f3\u6a6b\u5411\u7684\u6a19\u7c64\u65b9\u5411\uff0c\n    \u6bcf\u500b\u6a6b\u5411\u8207\u7e31\u5411\u7684\u65b9\u5411\u8a18\u9304\u3002\n    \u8f38\u5165\u6709\u5169\u500b\u6578\u5b57\uff0c\u4ee3\u8868\u6a6b\u5411\u8207\u7e31\u5411\u6709\u5e7e\u500b\u6a6b\u5411\u8207\u7e31\u5411\u3002\n    \u6839\u64da\u5169\u500b\u6a19\u7c64\u65b9\u5411\uff0c\n    \u6bcf\u500b\u6a6b\u5411\u8207\u7e31\u5411\u7684\u65b9\u5411\u8a18\u9304\uff0c\n    \u662f<>\u6216<>\u7684\u6a19\u7c64\u65b9\u5411\uff0c\n    \u8f38\u51fayes\u4ee3\u8868\u53ef\u4ee5\u4efb\u610f\u4e00\u500b\u6a6b\u5411\u8207\u7e31\u5411\u7684\u8def\u7dda\u76f8\u4ea4\uff0c\u82e5\u662fno\u5247\u4e0d\u53ef\u4ee5\u4efb\u610f\u4e00\u500b\u6a6b\u5411\u8207\u7e31\u5411\u7684\u8def\u7dda\u76f8\u4ea4\u3002\n    \n    Arguments:\n        stdin {[str]} -- [description]\n    \n    Returns:\n        [str] -- [description]\n    \"\"\"\n    if stdin == None or len(stdin) < 1:\n        return \"NO\"\n    \n    h, w = map(int, stdin.split(' '))\n    horizontal, vertical = stdin.split('\\n')[0], stdin.split('\\n')[1]\n    \n    if h < 1 or w < 1 or len(horizontal)!= h or len(vertical)!= w:\n        return \"NO\"\n    \n    horizontal_point, vertical_point = 0, 0\n    for h_direction in horizontal:\n        if h_direction == '<':\n            horizontal_point -= 1\n        else:\n            horizontal_point += 1\n    for v_direction in vertical:\n        if v_direction == '^':\n            vertical_point += 1\n        else:\n            vertical_point -= 1\n    if horizontal_point == vertical_point:\n        return \"YES\"\n    return \"NO\"\nprint(solution(\"3 3\\n><>\\nv^v\"))\nprint(solution(\"4 6\\n><><\\nv^v^v^\"))"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if True else 'NO'\n\"\"\"\ndef"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Determine whether brackets are needed.\n    '''\n    \n    def get_arguments(expression: str) -> List[str]:\n        '''\n        Get arguments from expression.\n        '''\n        \n        arguments = []\n        for i in range(len(expression)):\n            if i == 0:\n                arguments.append(expression[i])\n            else:\n                if expression[i] == '0':\n                    arguments.append('0')\n                elif expression[i] == '1':\n                    arguments.append('1')\n                elif expression[i] == '>':\n                    arguments.append('1')\n                else:\n                    arguments[-1] = arguments[-1] + expression[i]\n        return arguments\n        \n    def set_arguments(arguments: List[str]) -> str:\n        '''\n        Get expression from arguments.\n        '''\n        \n        expression = []\n        for i in range(len(arguments)):\n            if i == 0:\n                expression.append(arguments[i])\n            else:\n                if arguments[i] == '0':\n                    expression.append('0')\n                elif arguments[i] == '1':\n                    expression.append('1')\n                elif arguments[i] == '>':\n                    expression.append('1')\n                else:\n                    expression[-1] = expression[-1] + arguments[i]\n        return ''.join(expression)\n        \n    def combine_arguments(arguments: List[str]) -> str:\n        '''\n        Combine arguments.\n        '''\n        \n        expression = []\n        for i in range(len(arguments)):\n            if i == 0:\n                expression.append('(')\n                expression.append(arguments[i])\n            else:\n                expression.append(arguments[i])\n        expression.append(')')\n        return ''.join(expression)\n    \n    def count_brackets(expression: str) -> int:\n        '''\n        Count brackets.\n        '''\n        \n        brackets = 0\n        for i in range(len(expression)):\n            if expression[i] == '(':\n                brackets += 1\n            elif expression[i] == ')':\n                brackets -= 1\n                if brackets < 0:\n                    return -1\n        return brackets\n    \n    def count_arguments(expression: str) -> int:\n        '''\n        Count arguments.\n        '''\n        \n        arguments = 0\n        for i in range(len(expression)):\n            if i == 0:\n                if expression[i] == '(':\n                    arguments += 1\n            else:\n                if expression[i] == '(':\n                    arguments += 1\n                elif expression[i] == ')':\n                    arguments -= 1\n                    if arguments < 0:\n                        return -1\n                elif expression[i] == '>':\n                    arguments -= 1\n                    if arguments < 0:\n                        return -1\n        return arguments\n    \n    def parse_expression(expression: str) -> str:\n        '''\n        Parse expression.\n        '''\n        \n        expression = expression.replace('(', '( ').replace(')',')').split()\n        parsed_expression = []\n        for argument in expression:\n            parsed_argument = []\n            for char in argument:\n                if char == '0' or char == '1':\n                    parsed_argument.append(char)\n                elif char == '>':\n                    parsed_argument.append('>')\n            parsed_expression.append(''.join(parsed_argument))\n        return ''.join(parsed_expression)\n    \n    def evaluate_expression(expression: str) -> bool:\n        '''\n        Evaluate expression.\n        '''\n        \n        brackets = count_brackets(expression)\n        if brackets == 0:\n            return expression == '0'\n        else:\n            if brackets % 2!= 0:\n                return False\n        arguments = count_arguments(expression)\n        if arguments!= n:\n            return False\n        expression = parse_expression(expression)\n        parsed_expression = expression.split('>')\n        arguments = []\n        for i in range(len(parsed_expression)):\n            expression = parsed_expression[i].split(' ')\n            for j in range(len(expression)):\n                if expression[j] == '0':\n                    arguments.append('0')\n                elif expression[j] == '1':\n                    arguments.append('1')\n        arguments = ''.join(arguments)\n        arguments = get_arguments(arguments)\n        return evaluate_expression(set_arguments(arguments))\n    \n    n = int(stdin.readline())\n    expression = stdin.readline().strip()\n    return 'YES' if evaluate_expression(expression) else 'NO'\n    \n    \n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    args = [int(x) for x in stdin.split()]\n\n    if len(args)!= args[0] + 1:\n        return \"NO\"\n\n    for i in range(1, len(args) - 1):\n        if args[i]!= 0 and args[i]!= 1:\n            return \"NO\"\n\n    if args[-1]!= 1:\n        return \"NO\"\n\n    return \"YES\\n\" + \"\".join([\"(\" if i == 0 else \")\" if i == len(args) - 2 else \"->\" if i == len(args) - 3 else \"(\" if args[i] == 0 else \")\" for i in range(len(args))])\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split(' ')))\n    if lst.count(1)!= n:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    \n    return \"\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n0 1 1 0\\n\")\n    YES\n    '(((0)->1)->(1->0))'\n    >>> solution(\"1\\n0\\n\")\n    YES\n    '0'\n    >>> solution(\"2\\n1 1\\n\")\n    NO\n    \"\"\"\n    n = int(stdin.readline())\n    if n == 1:\n        print(\"YES\")\n        print(\"0\")\n    else:\n        arr = list(map(int, stdin.readline().strip().split()))\n        print(\"NO\")\n        print(\"(\" + \"->\".join([\"(%d)\" % i if arr[i] == 1 else str(i) for i in range(n)]) + \"->0)\" * (n > 1))\n    return \"\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the string that represents a logical expression that evaluates to 0,\n    with brackets to show that it's false.\n\n    >>> solution(\"4\\n0 1 1 0\")\n    'YES\\n(((0)->1)->(1->0))'\n    \"\"\"\n    n = int(stdin.split()[0])\n    arguments = [int(i) for i in stdin.split()[1:]]\n\n    def get_implications(arguments):\n        \"\"\"Yield implications of logical expressions from arguments.\n\n        >>> list(get_implications([1, 0]))\n        [(0, 1), (1, 0)]\n        >>> list(get_implications([1, 0, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications([1, 0, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications([0, 1, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications([1, 1, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications([1, 1, 1, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications([1, 0, 0, 0]))\n        [(0, 1), (1, 0), (1, 0)]\n        >>> list(get_implications([0, 0, 0, 0]))\n        [(0, 1), (1, 0), (1, 0)]\n        >>> list(get_implications([1, 1, 1, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications([0, 0, 0, 0, 0]))\n        [(0, 1), (1, 0), (1, 0)]\n        >>> list(get_implications([0, 0, 0, 0, 0, 0]))\n        [(0, 1), (1, 0), (1, 0)]\n        \"\"\"\n        return itertools.product(\n            [arguments[i] for i in range(n)],\n            [arguments[i] for i in range(n)],\n        )\n\n    def get_implications_2(arguments):\n        \"\"\"Yield implications of logical expressions from arguments.\n\n        >>> list(get_implications_2([1, 0]))\n        [(0, 1), (1, 0)]\n        >>> list(get_implications_2([1, 0, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications_2([1, 0, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications_2([0, 1, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications_2([1, 1, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications_2([1, 1, 1, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications_2([1, 0, 0, 0]))\n        [(0, 1), (1, 0), (1, 0)]\n        >>> list(get_implications_2([0, 0, 0, 0]))\n        [(0, 1), (1, 0), (1, 0)]\n        >>> list(get_implications_2([1, 1, 1, 1, 1]))\n        [(0, 1), (1, 0), (1, 1)]\n        >>> list(get_implications_2([0, 0, 0, 0, 0]))\n        [(0, 1), (1, 0), (1, 0)]\n        >>> list(get_implications_2([0, 0, 0, 0, 0, 0]))\n        [(0, 1), (1, 0), (1, 0)]\n        \"\"\"\n        for i in range(n):\n            for j in range(n):\n                if arguments[i] == 1 or arguments[j] == 1:\n                    yield (1, arguments[j])\n                else:\n                    yield (0, arguments[j])\n                yield (arguments[i], arguments[j])\n\n    # A logical expression with brackets, that evaluates to 0\n    false_expr = \"1\"\n    for i, j in get_implications(arguments):\n        false_expr += \"->\"\n        false_expr += \"->\".join([str(i), str(j)])\n    false_expr += \"->\" + str(0)\n\n    # The expression of the logical expression with brackets, that evaluates to 1\n    true_expr = \"0\"\n    for i, j in get_implications(arguments):\n        true_expr += \"->\"\n        true_expr += \"->\".join([str(i), str(j)])\n    true_expr += \"->\" + str(1)\n\n    return f\"YES\\n{true"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    if 0 in a:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a logical expression that results in false\n    \"\"\"\n    n, *args = stdin.split()\n    args = [int(arg) for arg in args]\n    args.append(1)\n    args = [0] + args\n    expr = list()\n    for i in range(1, len(args), 2):\n        expr.append(args[i] if args[i] == 1 else \"0\")\n    if args[0] == 1:\n        expr.append(\"0\")\n    else:\n        expr.append(\"1\")\n    expr = \"\".join(expr)\n    brackets = list()\n    for i in range(1, len(expr)):\n        if expr[i] == \"1\" and expr[i - 1] == \"0\":\n            brackets.append(i)\n    if len(brackets) == 0:\n        return \"YES\"\n    brackets = list(zip(brackets[:-1], brackets[1:]))\n    brackets = [expr[start + 1:stop] for start, stop in brackets]\n    brackets.append(expr[brackets[-1][1] + 1:])\n    for bracket in brackets:\n        if \"0\" in bracket and \"1\" in bracket:\n            return \"NO\"\n    for bracket in brackets[:-1]:\n        if bracket.count(\"1\") > 1:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(brackets)\n\n\ndef"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [bool(int(i)) for i in stdin.split()]\n    if n == 1:\n        print('YES')\n        print(arr[0])\n        return\n    if arr[0] == True:\n        print('YES')\n        print(1, end='')\n        for i in range(1, n):\n            print('->', i, end='')\n        print(0)\n        return\n    else:\n        print('NO')\n        return"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    arr = [int(c) for c in stdin.split()]\n    arr.reverse()\n    inp = ''.join([str(i) for i in arr])\n    \n    if n == 1:\n        print(\"YES\")\n        print(inp)\n        return\n    stack = []\n    out = []\n    brackets = []\n    for i in range(n):\n        if inp[i] == '0':\n            stack.append(i)\n        else:\n            out.append(i)\n    brackets.append(stack)\n    \n    for i in range(n):\n        if inp[i] == '0':\n            continue\n        else:\n            stack = []\n            out = []\n            brackets = []\n            for j in range(i,n):\n                if inp[j] == '0':\n                    stack.append(j)\n                else:\n                    out.append(j)\n            brackets.append(stack)\n            \n            for k in brackets:\n                temp = k\n                temp1 = out[:]\n                if k!= out:\n                    temp1 = out[:]\n                    for m in k:\n                        temp1.append(m)\n                    \n                    temp1.reverse()\n                    \n                    if temp == temp1:\n                        print(\"YES\")\n                        print('(' + ''.join([inp[n] for n in k]) + ')')\n                        return\n            \n    print(\"NO\")\n    return\n    \n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('12 5')\n    0 1\n    \"\"\"\n    a, b = [int(n) for n in stdin.split(' ')]\n    while a and b:\n        if a >= 2 * b:\n            a -= 2 * b\n        else:\n            b -= 2 * a\n    return f'{a} {b}'\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a >= 2 * b:\n            a = a - 2 * b\n        else:\n            b = b - 2 * a\n    print(a, b)\n    return \"\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    \n    a = n\n    b = m\n    \n    while a and b:\n        if a >= 2 * b:\n            a -= 2 * b\n        elif b >= 2 * a:\n            b -= 2 * a\n        else:\n            break\n    \n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    counter = 0\n    while n!= 0 and m!= 0:\n        if n >= 2 * m:\n            n -= 2 * m\n        elif m >= 2 * n:\n            m -= 2 * n\n        else:\n            n = 0\n            m = 0\n        counter += 1\n    return str(n) + \" \" + str(m)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    count = 0\n    while n > 0 and m > 0:\n        count += 1\n        if n >= 2 * m:\n            n -= 2 * m\n            m = m\n        else:\n            m -= 2 * n\n            n = n\n    return str(n) +'' + str(m)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"12 5\")\n    '0 1'\n    >>> solution(\"31 12\")\n    '7 12'\n    \"\"\"\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    while a > 1 or b > 1:\n        if a >= 2 * b:\n            a -= 2 * b\n            b -= 2 * b\n            a, b = int(a), int(b)\n        elif b >= 2 * a:\n            b -= 2 * a\n            a -= 2 * a\n            a, b = int(a), int(b)\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a > 1 or b > 1:\n        if a >= 2 * b:\n            a -= 2 * b\n        else:\n            b -= 2 * a\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    while a >= 2 * b or b >= 2 * a:\n        a = a - 2 * b if a >= 2 * b else 0\n        b = b - 2 * a if b >= 2 * a else 0\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a and b:\n        if a > 2 * b:\n            a = a - 2 * b\n        elif b > 2 * a:\n            b = b - 2 * a\n        else:\n            break\n    print(a, b)\n    return \"\"\n    \n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a > 0 and b > 0:\n        if a >= 2 * b:\n            a = a - 2 * b\n            b = b - 2 * a\n        elif b >= 2 * a:\n            b = b - 2 * a\n            a = a - 2 * b\n    return str(a) + \" \" + str(b)\n\"\"\"\n\ndef"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = stdin.split()\n    k = int(n[0])\n    a, b = int(n[1]), int(n[2])\n    return str(get_divisible_numbers(k, a, b))\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    [k, a, b] = stdin.split()\n    k, a, b = int(k), int(a), int(b)\n    return str(a - b + 1)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split(' ')]\n    if a > b:\n        a, b = b, a\n    n = (b - a) // k + 1\n    c = 0\n    for x in range(a, a + n * k, k):\n        if x % k == 0:\n            c += 1\n    return str(c)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split(' ')]\n    return str(a // k * b // k * (b // k - a // k + 1))\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split()]\n    return str(k * (b - a + 1) // k)\n\nimport unittest\nfrom utils import check_cases\n\n\nclass TestDay01(unittest.TestCase):\n    def test_cases(self):\n        check_cases(self, solution, test_cases)"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    a = int(line[1])\n    b = int(line[2])\n    k = int(line[0])\n\n    return str(b - a - k + 1)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(num) for num in stdin.split(' ')]\n    return str(a * b // (k - 1) * (k - 1) // k)\n\n\ndef"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    k, a, b = map(int, stdin.split())\n    print(b-a+1 - k*(b-a+1)//k)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(solve(*map(int, stdin.split())))\n    k, a, b = map(int, stdin.split())\n    print(b - a + 1 - k + k)\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin)"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = None\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n\n    if k < 1 or k > 10000:\n        raise ValueError('Invalid k.')\n\n    # We start counting from 1, not 0\n    # This is how we can use index = i % len(sequence)\n    i = 1\n    sequence = []\n    while True:\n        sequence.append(str(i * i * i % 10))\n        if len(sequence) >= k:\n            break\n        i += 1\n    return sequence[k - 1]\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin\n    index = int(line)\n\n    index = index - 1\n    sequence_string = \"\"\n    for i in range(1, 1000001):\n        sequence_string += str(i)\n    sequence_string = sequence_string[index]\n\n    print(sequence_string)\n    return sequence_string\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[int(stdin) % 10]\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[int(stdin[0])-1]\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 3)\n\nprint(solution(input()))\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while k >= 1:\n        n = int(str(n) + str(n)[-1])\n        k -= 1\n    return str(n)[k - 1]\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if Vasya has a winning strategy, otherwise return NO.\"\"\"\n    # Write your code here\n    size, s = [int(x) for x in stdin.split('\\n')]\n    if size % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    pass\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('13\\n8380011223344')\n    'YES'\n    >>> solution('15\\n807345619350641')\n    'NO'\n    \"\"\"\n\n    # Step 1: Remove the first character from the string\n    # Step 2: Check if the remaining string is a telephone number\n    # Step 3: If yes, Vasya wins, otherwise Petya wins\n\n    # Step 1: Remove the first character from the string\n    # Step 2: Check if the remaining string is a telephone number\n    # Step 3: If yes, Vasya wins, otherwise Petya wins\n\n    stdin = stdin.split()\n    n = int(stdin[0])\n    s = stdin[1]\n\n    if len(s) % 2!= 0:\n        return 'NO'\n\n    petya = set()\n    vasya = set()\n\n    s = s[1:]\n\n    # Step 1: Remove the first character from the string\n    # Step 2: Check if the remaining string is a telephone number\n    # Step 3: If yes, Vasya wins, otherwise Petya wins\n    if len(s) % 2!= 0:\n        return 'NO'\n\n    for i in range(len(s)):\n        vasya.add(s[i])\n        petya.add(s[i])\n\n        if len(vasya) == n + 1:\n            if len(petya) == 1:\n                return 'YES'\n\n            elif len(petya) > n + 1:\n                return 'NO'\n\n        # if i == len(s) - 1:\n        #     return 'NO'\n\n        s = s.replace(s[i], '', 1)\n\n    return 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[0].strip()\n    if len(string)!= int(stdin[1]):\n        return \"YES\"\n    elif len(string) % 2!= 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\" if len(stdin) % 2 == 1 and stdin[0] == \"8\" and len(stdin) > 10 else \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    if len(s) % 2!= 0:\n        return 'NO'\n    for i in range(0, len(s)):\n        if s[i] == '8':\n            s = s[:i] + '7' + s[i+1:]\n            n -= 1\n            if n == 0:\n                return 'YES'\n            if len(s) % 2!= 0:\n                return 'NO'\n    return 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin[0] == '8' and len(stdin) == 11 and int(stdin[1:-1]) % 2 == 0 else 'NO'\n\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if Vasya has a winning strategy, otherwise 'NO'.\"\"\"\n    # Your code here\n    return 'YES' if len(stdin) % 2 else 'NO'\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = stdin[:n]\n    i = 0\n    if m[0] == \"8\":\n        while n > 1 and i < n:\n            n -= 1\n            if m[i] == \"8\" and m[n] == \"9\" and m[n - 1] == \"0\":\n                i = n\n            elif m[i] == \"8\" and m[n] == \"9\" and m[n - 1]!= \"0\":\n                i = n - 1\n            elif m[i] == \"8\" and m[n]!= \"9\":\n                i = n - 1\n            elif m[i] == \"9\":\n                i = n - 1\n            elif m[i]!= \"8\":\n                i += 1\n        if n == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = stdin.split(' ')\n    n, x, pos = int(n), int(x), int(pos)\n    res = 0\n    perms = set()\n    for i in range(n):\n        temp = list(map(int, str(i)))\n        perms.add(tuple(temp))\n\n    for perm in perms:\n        if perm[pos] == x:\n            res += 1\n\n    return res % (10 ** 9 + 7)\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    if not stdin or len(stdin)!= 3:\n        return ''\n    n, x, pos = [int(s) for s in stdin.split(' ')]\n    \n    if not (1 <= x <= n <= 1000) or not (0 <= pos <= n - 1):\n        return ''\n    \n    left, right = 0, n\n    middle = (left + right) // 2\n    while left <= right:\n        if middle == pos:\n            return '%s%s' % (bin(left)[2:], bin(right)[2:])\n        if x <= middle:\n            right = middle\n        else:\n            left = middle + 1\n        middle = (left + right) // 2\n    return '0'\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split(' '))\n    count = 0\n    for i in range(1, n + 1):\n        if bin_search(n, i, pos):\n            count += 1\n    return str(count % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = stdin.split(\" \")\n    n, x, pos = int(n), int(x), int(pos)\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    res //= 10 ** 9 + 7\n    return str(res % int(1e9 + 7))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    arr = [i + 1 for i in range(n)]\n    print(arr)\n    left, right = 0, n - 1\n    while left < right:\n        middle = (left + right) // 2\n        if arr[middle] <= x:\n            left = middle + 1\n        else:\n            right = middle\n    if arr[left - 1] == x:\n        print(10 ** 9 + 7)\n        return\n    print(10 ** 9 + 7 - arr.index(x) + pos)\n    return\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    return str(n * (n - 1) // 2)"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = [int(i) for i in stdin.split(' ')]\n    \n    permutations = []\n    \n    for i in range(1, n + 1):\n        if i!= x:\n            permutations.append(i)\n    \n    result = 0\n    for permutation in permutations:\n        for i in range(0, len(permutation)):\n            if i == pos:\n                if binary_search(permutation, x, i):\n                    result += 1\n                    break\n            else:\n                if binary_search(permutation, x, i):\n                    break\n    \n    result %= (10 ** 9 + 7)\n    \n    return str(result)\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin.split('\\n')[0])\n    if k > 200 or k < 1:\n        return \"Impossible\"\n    str_to_check = s.split('\\n')[1]\n    if not check_if_string_is_encoded(str_to_check, k):\n        return \"Impossible\"\n    c = 0\n    for i in range(len(str_to_check)):\n        if str_to_check[i] == '?':\n            c += 1\n        elif str_to_check[i] == '*':\n            if c == 0:\n                return \"Impossible\"\n            else:\n                c -= 1\n        else:\n            if c!= 0:\n                return \"Impossible\"\n    possible_string = ''\n    for i in range(len(str_to_check)):\n        if str_to_check[i] == '?':\n            possible_string += str_to_check[i]\n        elif str_to_check[i] == '*':\n            possible_string += str_to_check[i]\n            possible_string += str_to_check[i]\n        else:\n            possible_string += str_to_check[i]\n    return possible_string\n\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Impossible'"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.split()[1])\n    string_list = list(s)\n    for i in range(len(string_list)):\n        if string_list[i] == '*':\n            string_list.pop(i)\n            continue\n        elif string_list[i] == '?':\n            string_list.pop(i)\n            if i == len(string_list) - 1:\n                continue\n            if string_list[i + 1] == '*':\n                string_list.pop(i + 1)\n            else:\n                string_list[i] = string_list[i] * string_list.count(string_list[i])\n    return ''.join(string_list)\n\nsolution(\"ab?a\")\nsolution(\"ab?a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab?a\")\nsolution(\"ab?a\")\nsolution(\"ab?a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab*a\")\nsolution(\"ab"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    arr = []\n    snowflake_stack = []\n    snowflake = False\n    for i in range(len(s)):\n        if s[i] == \"?\" or s[i] == \"*\":\n            snowflake = False\n            arr.append(s[i])\n        elif s[i] == \"c\":\n            if snowflake:\n                snowflake_stack.pop()\n            else:\n                snowflake_stack.append(s[i])\n            snowflake = True\n        else:\n            snowflake = False\n            arr.append(s[i])\n            if len(snowflake_stack) > 0:\n                arr.append(\"*\")\n                for i in range(len(snowflake_stack)):\n                    arr.append(snowflake_stack[i])\n    ans = \"\"\n    for i in range(len(arr)):\n        if arr[i] == \"?\":\n            continue\n        if arr[i] == \"*\":\n            ans += ans[-1]\n        else:\n            ans += arr[i]\n    return ans"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin\n    k = int(stdin.split()[1])\n    length = len(st)\n    if length % k!= 0:\n        return \"Impossible\"\n    \n    for i in range(length // k):\n        count = 0\n        for j in range(k):\n            if st[i * k + j] == \"?\":\n                count += 1\n            elif st[i * k + j] == \"*\":\n                count += 1\n                if count >= k:\n                    return \"Impossible\"\n        if count!= k:\n            return \"Impossible\"\n        \n    for j in range(k):\n        if st[length - 1 - j]!= \"*\":\n            return \"Impossible\"\n        \n    if k == 1:\n        return st\n    \n    ans = \"\"\n    for i in range(length // k):\n        ans += st[i * k : i * k + k]\n    ans = ans[::-1]\n    return ans\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, l = stdin.split()\n    k = int(l)\n    \n    ans = ''\n    i = 0\n    while i < len(s):\n        if s[i] == '*' or s[i] == '?':\n            i += 1\n            continue\n        ans += s[i]\n        if s[i] == s[i-1] and i > 0:\n            ans = ans[:-1]\n        i += 1\n        if len(ans) == k:\n            break\n    if len(ans) < k:\n        ans = 'Impossible'\n    \n    return ans\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '3'"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for the problem.\n    '''\n    angle = int(stdin)\n    \n    if angle % 90 == 0:\n        return 1\n    else:\n        return angle // 90 + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rotate = int(stdin)\n    res = 0\n    while rotate > 0:\n        if rotate % 90 == 0:\n            rotate -= 90\n        else:\n            res += 1\n            rotate -= 90 - rotate % 90\n    return str(res)\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of 90 degree turns to get a picture in which up direction deviation is minimized\"\"\"\n    return \"3\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('60')\n    '1'\n    >>> solution('-60')\n    '3'\n    \"\"\"\n    angle = int(stdin)\n    if abs(angle) % 180 == 0:\n        return str(int(abs(angle) // 90))\n    else:\n        return str(int(abs(angle) // 90) + 1)"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    angle = int(stdin)\n    res = 0\n    \n    while abs(angle)!= 0:\n        angle = angle // 90 * 90 if angle >= 0 else (angle // -90) * -90\n        res += 1\n    \n    return res\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(x // 90 + x % 90 // 30)\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    angle = abs(x)\n    if angle == 0:\n        return \"0\"\n    r = math.floor(math.sqrt(angle))\n    while (angle - (r * (r + 1)) // 2) >= 0:\n        r += 1\n    return str(r)\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, _, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if c < x + y + z:\n        return \"No\"\n    if x + y + z == 1:\n        return \"No\"\n    return \"Yes\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_b, num_v, num_o = list(map(int, stdin.split()))\n    min_num_b, min_num_v, min_num_o = (num_b - 2 * num_v, num_v - 2 * num_o, num_o - 2 * num_b)\n    print(min_num_b <= 0 and min_num_v <= 0 and min_num_o <= 0)\n    if min_num_b <= 0 and min_num_v <= 0 and min_num_o <= 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    blue_spheres = int(stdin.split(\" \")[0])\n    needed_spheres = int(stdin.split(\" \")[1])\n    if blue_spheres < needed_spheres or blue_spheres == 0:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bv, ob, tv, obt = map(int, stdin.split())\n    if bv * 2 + tv < ob * 2 + obt:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, n, m = stdin.split()\n    s, n, m = int(s), int(n), int(m)\n\n    a, b, c = s // n, s % n, s // n\n\n    x, y, z = n // m, n % m, n // m\n\n    if a + b + c < x + y + z:\n        return 'No'\n    if a < x:\n        a = x\n    if b < y:\n        b = y\n    if c < z:\n        c = z\n\n    s = m * (a * x + b * y + c * z)\n    s = s - ((a - 1) * x + (b - 1) * y + (c - 1) * z)\n    s = s - (x + y + z)\n\n    return 'Yes' if s >= 0 else 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    a = str(a)\n    b = str(b)\n    c = str(c)\n    x = str(x)\n    y = str(y)\n    z = str(z)\n    return \"Yes\" if (a + b + c) == (x + y + z) else \"No\"\n\n\n-----Test Case-----\n\nsolution('4 4 0') == 'Yes'\nsolution('5 6 1') == 'No'\nsolution('3 3 3') == 'Yes'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if x + y + z == a + b + c:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y, z = [int(i) for i in stdin.split(' ')]\n    if (2*a + b + c < x or 2*b + c + a < y or 2*c + a + b < z):\n        print('No')\n    else:\n        print('Yes')\n\n    return ''"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ball_count = [int(x) for x in stdin.split()]\n    req_count = [int(x) for x in stdin.split()]\n    for i in range(1, ball_count[0]+1):\n        for j in range(1, ball_count[1]+1):\n            for k in range(1, ball_count[2]+1):\n                if i + j + k == ball_count[0] + ball_count[1] + ball_count[2] and i*j*k == req_count[0]*req_count[1]*req_count[2]:\n                    return \"Yes\"\n    return \"No\"\n\nprint(solution(\"4 4 0\\n2 1 2\"))\nprint(solution(\"5 6 1\\n2 7 2\"))\nprint(solution(\"3 3 3\\n2 2 2\"))\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ball_num, balls_num, expected = (int(i) for i in stdin.split())\n    required = balls_num - expected\n    if balls_num - required < 0:\n        return 'No'\n    for i in range(1, ball_num + 1):\n        if i % 2 == 0:\n            if balls_num - required - i < 0:\n                return 'No'\n            required -= i\n        else:\n            if balls_num - required - i + 1 < 0:\n                return 'No'\n            required -= i + 1\n    return 'Yes'\n\"\"\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    cnt = 0\n    for i in range(1, 10 ** n):\n        if len(str(i))!= n:\n            continue\n        i_mod_k = i % k\n        if i_mod_k == 0:\n            i_mod_m = i % m\n            if i_mod_m == 0:\n                cnt += 1\n    return str(cnt)\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split()\n    return stdin\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    return n * k % m\n\"\"\"\n\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Read input\n    n, k, m = map(int, stdin.split())\n    # Compute result\n    result = 0\n    for x in range(1, n + 1):\n        for y in range(1, k + 1):\n            if y * x % k == 0:\n                result += 1\n    # Print output\n    print(result % m)\n\nsolution(input())\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split(' ')\n    return str(sum([1 for x in range(1, n) for y in range(1, k) if len(str(x)) == n and str(x)[0] == str(y) % k]))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n========\ndef"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin.split())\n\nprint(solution(\"1 2 3\"))\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split(' ')))\n\n    if (x + y + z) % 2 == 0:\n        return (x + y + z) // 2\n\n    return 0\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = [int(i) for i in stdin.split()]\n    \n    return (l + r + a) // 2 * l + (l + r + a) // 2 * r + (a + r + a) // 2 * a\n    \n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def left_hand(num):\n        return num // 2\n    \n    def right_hand(num):\n        return (num + 1) // 2\n    \n    def ambidexter(num):\n        return num // 2\n    \n    l, r, a = map(int, stdin.split())\n    return left_hand(l + r + a) + left_hand(r + a) + ambidexter(r + a)\n\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    left = int(stdin.split()[0])\n    right = int(stdin.split()[1])\n    ambidexter = int(stdin.split()[2])\n\n    if left == 0 and right == 0 and ambidexter == 0:\n        return 0\n    return left + right + ambidexter - 1 if left % 2 == 0 and right % 2 == 0 and ambidexter % 2 == 0 else left + right + ambidexter\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    left, right, ambidexter = map(int, stdin.split())\n    \n    # Get a list of all possible sets of people\n    possible_sets = []\n    for left_hand_count in range(left + 1):\n        for right_hand_count in range(right + 1):\n            if left_hand_count + right_hand_count < left or left_hand_count + right_hand_count < right:\n                continue\n            for ambidexter_count in range(ambidexter + 1):\n                if left_hand_count + right_hand_count + ambidexter_count < left or left_hand_count + right_hand_count + ambidexter_count < right:\n                    continue\n                possible_sets.append((left_hand_count, right_hand_count, ambidexter_count))\n    \n    # Find the best possible set\n    max_players = 0\n    for set in possible_sets:\n        if sum(set) >= max_players:\n            max_players = sum(set)\n    return max_players\n\n\nprint(solution(\"1 2 3\"))\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    stdin = stdin.split()\n    l, r, a = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    left_hand = [i for i in range(l)]\n    right_hand = [i for i in range(r)]\n    ambidexter = [i for i in range(a)]\n    all_hands = left_hand + right_hand + ambidexter\n    left_right = []\n    left_right.append(left_hand)\n    left_right.append(right_hand)\n    hands = []\n    for i in all_hands:\n        if i in left_hand:\n            hands.append(left_right[0])\n            left_right.append(left_right[0])\n            left_right.pop(0)\n        elif i in right_hand:\n            hands.append(left_right[1])\n            left_right.append(left_right[1])\n            left_right.pop(1)\n        else:\n            hands.append(left_right[0])\n    return len(hands)"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Find the number of players in a team where half of them play with right hand and half play with left hand.\n    '''\n    l, r, a = [int(x) for x in stdin.split(' ')]\n\n    return str(int(l + r + a) * 2)\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return (l*2+a)*(r*2+a)\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    left, right, ambi = [int(i) for i in stdin.split(\" \")]\n    if left * 2 + right * 2 > ambi:\n        return left * 2 + right * 2\n    return left * 2 + right * 2 - ambi\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '6'"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = [True] * n\n    return int(n - min(0, n - k - 1) * 2 - 1)\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    coins = [0] * n\n    i = k\n    while i < n:\n        coins[i] = 1\n        i += 1\n    cnt = 0\n    for i in range(1, n):\n        if coins[i] == 1:\n            cnt += 1\n            cnt += i\n    return cnt\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return n + 2"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    return ''.join([str(i) for i in [n, k]])\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = [int(x) for x in stdin.split()]\n    k -= 1\n    n -= 1\n    s = stdin\n    res = 0\n    for i in range(n):\n        if s[k] == '1':\n            res += i\n    return str(res + n - 2)\n    '''\n    n, k = [int(x) for x in stdin.split()]\n    return str(n - (k - 1))\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement solution\n    return \"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    if N > 0 and M > 0:\n        return str(M + N - 1)\n    return str(N + M - 1)\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    return str(max(n, m) + 2)\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = stdin.strip().split(\" \")\n    n, m = int(n), int(m)\n    if n == 0 or m == 0:\n        return n + m\n    return n + m - 1\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = n + m\n    b = n * 2\n    c = m * 3\n    return (a - min(b, c))\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_a, input_b = map(int, stdin.split(' '))\n    if input_a + input_b < 4:\n        return 10\n    elif input_a + input_b == 4:\n        return 4\n    elif input_a + input_b == 5:\n        return 5\n    elif input_a + input_b == 6:\n        return 6\n    elif input_a + input_b == 7:\n        return 7\n    elif input_a + input_b == 8:\n        return 9\n    elif input_a + input_b == 9:\n        return 8\n    elif input_a + input_b == 10:\n        return 10\n    elif input_a + input_b == 11:\n        return 9\n    elif input_a + input_b == 12:\n        return 10\n    elif input_a + input_b == 13:\n        return 11\n    elif input_a + input_b == 14:\n        return 12\n    elif input_a + input_b == 15:\n        return 13\n    elif input_a + input_b == 16:\n        return 14\n    elif input_a + input_b == 17:\n        return 15\n    elif input_a + input_b == 18:\n        return 16\n    elif input_a + input_b == 19:\n        return 17\n    elif input_a + input_b == 20:\n        return 18\n    elif input_a + input_b == 21:\n        return 19\n    elif input_a + input_b == 22:\n        return 20\n    elif input_a + input_b == 23:\n        return 21\n    elif input_a + input_b == 24:\n        return 22\n    elif input_a + input_b == 25:\n        return 23\n    elif input_a + input_b == 26:\n        return 24\n    elif input_a + input_b == 27:\n        return 25\n    elif input_a + input_b == 28:\n        return 26\n    elif input_a + input_b == 29:\n        return 27\n    elif input_a + input_b == 30:\n        return 28\n    elif input_a + input_b == 31:\n        return 29\n    elif input_a + input_b == 32:\n        return 30\n    elif input_a + input_b == 33:\n        return 31\n    elif input_a + input_b == 34:\n        return 32\n    elif input_a + input_b == 35:\n        return 33\n    elif input_a + input_b == 36:\n        return 34\n    elif input_a + input_b == 37:\n        return 35\n    elif input_a + input_b == 38:\n        return 36\n    elif input_a + input_b == 39:\n        return 37\n    elif input_a + input_b == 40:\n        return 38\n    elif input_a + input_b == 41:\n        return 39\n    elif input_a + input_b == 42:\n        return 40\n    elif input_a + input_b == 43:\n        return 41\n    elif input_a + input_b == 44:\n        return 42\n    elif input_a + input_b == 45:\n        return 43\n    elif input_a + input_b == 46:\n        return 44\n    elif input_a + input_b == 47:\n        return 45\n    elif input_a + input_b == 48:\n        return 46\n    elif input_a + input_b == 49:\n        return 47\n    elif input_a + input_b == 50:\n        return 48\n    elif input_a + input_b == 51:\n        return 49\n    elif input_a + input_b == 52:\n        return 50\n    elif input_a + input_b == 53:\n        return 51\n    elif input_a + input_b == 54:\n        return 52\n    elif input_a + input_b == 55:\n        return 53\n    elif input_a + input_b == 56:\n        return 54\n    elif input_a + input_b == 57:\n        return 55\n    elif input_a + input_b == 58:\n        return 56\n    elif input_a + input_b == 59:\n        return 57\n    elif input_a + input_b == 60:\n        return 58\n    elif input_a + input_b == 61:\n        return 59\n    elif input_a + input_b == 62:\n        return 60\n    elif input_a + input_b == 63:\n        return 61\n    elif input_a + input_b == 64:\n        return 62\n    elif input_a + input_b == 65:\n        return 63\n    elif input_a + input_b == 66:\n        return 64\n    elif input_a + input_b == 67:\n        return 65\n    elif input_a + input_b == 68:\n        return 66\n    elif input_a + input_b == 69:\n        return 67\n    elif input_a + input_b == 70:\n        return 68\n    elif input_a + input_b == 71:\n        return 69\n    elif input_a + input_b == 72:\n        return 70\n    elif input_a + input_b == 73:\n        return 71\n    elif input_a + input_b == 74:\n        return 72\n    elif input_a + input_b == 75:\n        return 73\n    elif input_a + input_b == 76:\n        return 74\n    elif input_a + input_b == 77:\n        return 75\n    elif input_a + input_b == 78:\n        return 76\n    elif input_a + input_b == 79:\n        return 77\n    elif input_a + input_b == 80:\n        return 78\n    elif input_a + input_b == 81:\n        return 79\n    elif input_a + input_b == 82:\n        return 80\n    elif input_a + input_b == 83:\n        return 81\n    elif input_a + input_b == 84:\n        return 82\n    elif input_a + input_b == 85:\n        return 83\n    elif input_a + input_b == 86:\n        return 84\n    elif input_a + input_b == 87:\n        return 85\n    elif input_a + input_b == 88:\n        return 86\n    elif input_a + input_b == 89:\n        return 87\n    elif input_a + input_b == 90:\n        return 88\n    elif input_a + input_b == 91:\n        return 89\n    elif input_a + input_b == 92:\n        return 90\n    elif input_a + input_b == 93:\n        return 91\n    elif input_a + input_b == 94:\n        return 92\n    elif input_a + input_b == 95:\n        return 93\n    elif input_a +"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n2 3\\n4 4\\n5 1\")\n    9\n    \"\"\"\n    stdin = stdin.strip()\n    stdin = [int(s) for s in stdin.split()]\n    n, m = stdin[0], stdin[1]\n    assert n + m > 0\n    assert n > 0\n    assert m > 0\n\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n\n    return max(n, m) - 1\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def two_blocks():\n        n, m = stdin.split()\n        n = int(n)\n        m = int(m)\n        return n + m - 1 if (n + m) % 3 else (n + m) // 3\n\n    def three_blocks():\n        n, m = stdin.split()\n        n = int(n)\n        m = int(m)\n        return n + m - 1 if (n + m) % 3 else (n + m) // 3 + 1\n\n    return''.join(str(i) for i in [two_blocks(), three_blocks()])\n\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split(\" \")\n    a, b = int(a), int(b)\n    count_2 = (b + 1) // 2\n    count_3 = (b + 2) // 3\n    count_2 = count_2 if count_2 < count_3 else count_3\n    return str(count_2 + 1)\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_cards = int(stdin)\n    if num_cards % 2 == 1:\n        print(\"NO\")\n        return\n    numbers = [int(n) for n in stdin.split()]\n    counts = [0] * 101\n    for n in numbers:\n        counts[n] += 1\n    if counts.count(counts[numbers[0]]):\n        print(\"NO\")\n        return\n    i = 1\n    while True:\n        if counts[numbers[i]] >= 2:\n            break\n        i += 1\n    if i == 1:\n        print(\"NO\")\n        return\n    if i == 2:\n        print(\"YES\", numbers[0], numbers[1])\n        return\n    if i == 3:\n        print(\"YES\", numbers[0], numbers[2])\n        return\n    if i == 4:\n        print(\"YES\", numbers[1], numbers[3])\n        return\n    if i == 5:\n        print(\"YES\", numbers[1], numbers[4])\n        return\n    if i == 6:\n        print(\"YES\", numbers[2], numbers[5])\n        return"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is based on the fact that\n    if numbers differ by only one digit, the game is fair.\n    If numbers differ by more than one digit, the game is impossible.\n    \"\"\"\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin[0])\n    numbers = stdin[1:]\n    # We sort the numbers by decreasing length,\n    # so that if number i differs from number j by one digit,\n    # i must be smaller than j.\n    numbers.sort(key=lambda x: len(x), reverse=True)\n    # Store in this list the length of the shortest number\n    # that differs from all numbers in the list.\n    different_length = []\n    for i, j in zip(numbers, numbers[1:]):\n        for k in range(len(i)):\n            if k + 1 < len(i) and i[k]!= j[k] and i[k + 1] == j[k + 1]:\n                different_length.append(k + 1)\n                break\n        if k == len(i) - 1:\n            different_length.append(len(i))\n    # If there is only one different length, we can print it\n    # if the game is fair.\n    if len(different_length) == 1:\n        return 'YES' +'' + numbers[0][:different_length[0]]\n    # Otherwise, the game is impossible.\n    return 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = list(map(int, stdin.split('\\n')[:-1]))\n    numbers_set = set()\n    for number in input_numbers:\n        if number in numbers_set:\n            return \"NO\"\n        numbers_set.add(number)\n\n    return \"YES\\n{}\\n{}\".format(\n        sorted(set(input_numbers))[len(input_numbers) // 2],\n        sorted(numbers_set)[len(numbers_set) // 2]\n    )\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n11\\n27\\n27\\n11\")\n    'YES'\n    >>> solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\")\n    'NO'\n    >>> solution(\"6\\n6\\n6\\n6\\n6\\n6\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    stdin = stdin.read().split(\"\\n\")\n    \n    petya = set()\n    vasya = set()\n    for i in stdin:\n        if i not in petya:\n            petya.add(i)\n        elif i not in vasya:\n            vasya.add(i)\n        else:\n            return \"NO\"\n    return \"YES\" if len(petya) == len(vasya) and len(petya) == n // 2 else \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    numbers = []\n    for line in lines[1:]:\n        numbers.append(int(line))\n    numbers.sort()\n    number_petya = numbers[n // 2]\n    numbers.sort()\n    number_vasya = numbers[n // 2]\n    if number_petya == number_vasya:\n        print('NO')\n    else:\n        print('YES')\n        print(number_petya, number_vasya)\n    return ''"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using mathematical proofs.\n    If the values of the numbers are distinct, it is impossible for the game to be fair.\n    There is always a solution if the values of the numbers are equal:\n        1. Petya picks the number with greater value\n        2. Vasya picks the number with less value\n        3. In this case, Petya picks the number with larger value and Vasya picks the number with smaller value.\n    If the values of the numbers are equal, then the game is fair if and only if the numbers are equal.\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    values = sorted([int(x) for x in stdin[1:]])\n    diff = [values[i] - values[i - 1] for i in range(1, n)]\n    return 'YES' if all(d == diff[0] for d in diff) and all(d == diff[0] for d in diff) else 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.count(stdin[0]) == len(stdin)//2 else 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    in_numbers = list(map(int, stdin.splitlines()))\n    numbers = in_numbers[1:]\n    numbers.sort()\n    d1 = numbers[0]\n    d2 = numbers[-1]\n    d = numbers[-1] - numbers[0]\n    if d % 2 == 0:\n        return 'YES\\n{}\\n{}'.format(d1, d2)\n    else:\n        return 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    card = int(stdin)\n    card_list = [int(num) for num in stdin.split('\\n')]\n    card_list.sort()\n    is_fair = True\n    try:\n        for i in range(1, len(card_list)):\n            if card_list[i] - card_list[i - 1] > 1:\n                is_fair = False\n                break\n    except:\n        pass\n    if is_fair:\n        if card_list[0] == card:\n            print('YES')\n            print(card_list[0] - 1, card)\n        else:\n            print('YES')\n            print(card, card_list[0])\n    else:\n        print('NO')\n    return ''"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    # print(n, k, a)\n\n    res = 'NO'\n    if n == 1:\n        if a[0] == 1:\n            res = 'YES'\n    elif k == 1:\n        if sum(a) == 1:\n            res = 'YES'\n    elif k == 2:\n        if sum(a) == 8:\n            if a[0] == a[1]:\n                res = 'YES'\n            elif abs(a[0] - a[1]) == 1:\n                res = 'YES'\n            else:\n                res = 'NO'\n        elif sum(a) == 4:\n            if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n                res = 'YES'\n            else:\n                res = 'NO'\n        else:\n            res = 'NO'\n    else:\n        if sum(a) < 8:\n            res = 'NO'\n        else:\n            res = 'YES'\n\n    return res"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 2\\n5 8\\n')\n    'YES'\n    >>> solution('1 2\\n7 1\\n')\n    'NO'\n    >>> solution('1 4\\n2 2 1 2\\n')\n    'YES'\n    >>> solution('1 4\\n2 2 1 4\\n')\n    'YES'\n    \"\"\"\n    group_size = next(stdin.strip().split())\n    group_sum = next(stdin.strip().split())\n    assert len(group_size) == len(group_sum)\n    group_sum = [int(x) for x in group_sum]\n    group_sum.sort()\n    group_sum.append(8 * int(group_size[0]))\n    if sum(group_sum) == 8 * int(group_size[0]):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if len(set(stdin.strip().split(\" \"))) < 8 else \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n\n    '''\n    pass\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = defaultdict(list)\n    for i in range(k):\n        d[a[i]].append(i)\n    ans = 0\n    for i in range(n - 1):\n        if d[i + 1] <= d[i]:\n            ans += 1\n    return ans + 2\n\n\ndef"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n\n    # if sum(a) > 8*n:\n    #     return \"NO\"\n\n    res = [[0]*8 for _ in range(n)]\n    for i in range(k):\n        for j in range(a[i]):\n            res[i][j] = 1\n    print(res)\n    return \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = [int(i) for i in stdin.split()]\n    num = [int(i) for i in stdin.split()]\n    num.sort()\n    c = 0\n    for i in range(0, k - 1):\n        for j in range(i + 1, k):\n            if abs(num[i] - num[j]) > 2:\n                c += 1\n    if c <= 1:\n        return 'YES'\n    return 'NO'\n    '''\n    n, k = [int(i) for i in stdin.split()]\n    num = [int(i) for i in stdin.split()]\n    \n    if k == 1:\n        if num[0] <= 8:\n            return 'YES'\n        else:\n            return 'NO'\n    \n    tmp = [0]*n\n    for i in range(0, n):\n        tmp[i] = i+1\n    for i in range(0, n):\n        for j in range(0, i):\n            if num[i] - num[j] <= 2 and tmp[i] <= tmp[j]:\n                tmp[i] = tmp[j] + 1\n    if k >= tmp[-1]:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds if the army of Daenerys Targaryen can be placed in the airplane with the given number of rows and groups of soldiers.'''\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    group_sizes = [int(x) for x in stdin.strip().split(' ')]\n    # If the number of groups is more than the number of rows, the army is impossible.\n    if sum(group_sizes) > 8*n:\n        return \"NO\"\n    # if there is only one group or if the number of groups is equal to the number of rows, we have a solution.\n    if k == 1 or k == n:\n        return \"YES\"\n    # if the number of groups is more than 1, the army will have more than one group.\n    # We will store a counter of the groups in each row.\n    row_counter = [0]*n\n    for group in group_sizes:\n        # every group must be placed in a separate row.\n        # The number of rows will be equal to the number of groups.\n        # We need to find the maximum number of groups in each row.\n        # The maximum number of groups in a row will be the number of groups minus the number of groups on the same row.\n        row_counter[group-1] = max(row_counter[group-1], group-1)\n    # We will iterate through the number of groups and find the place of the group in the row.\n    for group in group_sizes:\n        # we need to find a place for the current group, for this, we need to find an index where the current group can be placed, but the group before it must be on the same row.\n        # we start from the first group, we will iterate through the rows.\n        # we store the last place the group was in the row.\n        # this is useful to check if the groups in the row are consecutive.\n        last_index = -1\n        for i in range(n):\n            if row_counter[i] >= group:\n                # if we find a group we can place in this row, we will move to the next row.\n                last_index = i\n                row_counter[i] -= group\n                break\n        # we iterate through the number of groups again and find the place for the current group.\n        # we start from the first group again.\n        # we will iterate from the last place the group was in the row.\n        # if there is a group before us, we will check if the groups in the row are consecutive.\n        # if not, we will return \"NO\"\n        if group == 1 and last_index > 0:\n            for i in range(last_index-1, -1, -1):\n                if row_counter[i] > 0 and row_counter[i+1] > 0:\n                    return \"NO\"\n        else:\n            for i in range(last_index, n):\n                if row_counter[i] > 0 and row_counter[i-1] > 0:\n                    return \"NO\"\n        # if we have found a place for the group, we will move to the next group.\n        # if we have moved through all the groups, we will return \"YES\"\n    return \"YES\"\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n')[0].split())\n    a = sorted(a)\n    print(a)\n    print(a[0] - 1, sum(abs(a[0] - x) for x in a[1:]))\n    return\n\n\nprint(solution('5\\n1 1 2 2 3'))"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the task.\"\"\"\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = sorted(a)\n    print(a[0], sum([abs(a[i] - a[i + 1]) for i in range(n - 1)]))\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n    # your code here\n    return ''\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n\n    lst.sort()\n    min_val, min_idx = lst[0], 0\n    for i, v in enumerate(lst):\n        if v > min_val + 1:\n            break\n        min_idx = i\n        min_val = v\n    \n    ans = min_val\n    t = sum(lst[min_idx:]) // (n - min_idx)\n    for i, v in enumerate(lst[min_idx:]):\n        if abs(v - t) < abs(min_val - t):\n            ans = t\n            min_val = v\n        elif abs(v - t) == abs(min_val - t):\n            ans = min(ans, t)\n            if ans!= t:\n                min_val = v\n        else:\n            break\n    \n    print(ans, end='')\n    return''\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 1 2 2 3\n   ... ''')\n    '3 7'\n    >>> solution('''\n   ... 5\n   ... 1 1 2 2 3\n   ... ''')\n    '2 0'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    t = 0\n    cost = float('inf')\n    for i in range(len(a)):\n        if abs(a[i] - t) <= 1:\n            cost = min(cost, abs(a[i] - t))\n        else:\n            cost = min(cost, abs(a[i] - t) + 1)\n            t = a[i]\n    print(t, cost)\n\n    return ''\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\nfrom collections import deque\nfrom collections import defaultdict\nfrom collections import Counter\n\n\"\"\"\ndef"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n10 1 4')\n    '3 7'\n    >>> solution('5\\n1 1 2 2 3')\n    '2 0'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    t = 1\n    res = sum(abs(t - x) for x in a)\n    while True:\n        for i in range(n):\n            if abs(t - a[i]) <= 1:\n                res += abs(t - a[i])\n                a[i] = t\n        if all(x <= t for x in a):\n            break\n        else:\n            t += 1\n    return str(t) + \" \" + str(res)\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def get_coprime_count(q):\n        count = 0\n        q = q - 1\n        while q % 2 == 0:\n            q //= 2\n            count += 1\n        return count\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j] or (a[i] == a[j] and i > j):\n                count += 1\n\n    p = count // k\n    q = count % k\n\n    return str(p * (10 ** 9 + 7) + get_coprime_count(q))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    I will write here the solution\n    '''\n    # write your code in Python 3.6\n    # Return 0 if the array is sorted in non-decreasing order or\n    # the desired probability isn't represented by the coprime integers\n    \n    input_array, n, k = stdin.split(\"\\n\")\n    input_array = list(map(int, input_array.split(\" \")))\n    \n    # computes the coprime integers\n    for i in range(2, 10**9 + 1):\n        if gcd(i, 10**9 + 7) == 1:\n            break\n    \n    # the desired probability\n    P = len([input_array[i] for i in range(1, n) if input_array[i] > input_array[i - 1]])\n    Q = n\n    \n    # the answer\n    if P == 0:\n        return \"0\"\n    return str(P * Q % (10**9 + 7))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split()\n    k = int(k)\n    n = len(stdin.split()[0])\n    a = [int(el) for el in stdin.split()[0]]\n    count = 0\n    if k == 1:\n        if a[0] == 0:\n            count += 2\n        else:\n            count += 1\n    for i in range(n - 1):\n        if a[i] == 0:\n            if a[i + 1] == 1:\n                count += 1\n            else:\n                count += 2\n        else:\n            if a[i + 1] == 1:\n                count += 1\n            else:\n                count += 2\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return probability of non-decreasing array after one operation.\"\"\"\n    _, k = stdin.split()\n    a = [int(i) for i in stdin.split()]\n    p = 1\n    q = 1\n    for i in range(1, len(a)):\n        q *= i\n    for i in range(k):\n        for j in range(i + 1, len(a)):\n            if a[i] > a[j]:\n                p += 1\n                a[i], a[j] = a[j], a[i]\n    return str(p // q)\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the probability that the array will be sorted in non-decreasing order after\n    all the operations are completed.\n    :param stdin: the array of the digits\n    :return: probability\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    p = 0\n    q = 1\n    for i in range(1, len(a)):\n        for j in range(i + 1):\n            if j == i:\n                q *= 1\n                break\n            else:\n                if a[j] < a[j + 1]:\n                    p += 1\n                    q *= a[j]\n                else:\n                    q *= 1\n    print(q * (p / k + 1) % (10 ** 9 + 7))\n    return str(q * (p / k + 1) % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport collections\n\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k == 1:\n        return \"0\"\n    p, q = find_p_q(a)\n    return str(p * q)\n\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n    a = [int(s) for s in stdin.split(' ')]\n    a = sorted(a)\n    a = [0, 0] + a + [1]\n    total = 0\n    for i in range(k):\n        a[:], a[n:n+2] = a[n:n+2], a[:n]\n        total = (total * 10 + (a[n+2] + 1) * a[n]) % (10**9 + 7)\n    return str(total)\nprint(solution(input()))\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return (y - x) // 2 + x\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x ** 2 + x * y + y ** 2)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    while x!= y:\n        if x > y:\n            x = (x - 1) // 2\n        else:\n            y = (y - 1) // 2\n    print(y)\n    return ''\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y:\n        return '0'\n    if x > y:\n        return '-1'\n    \n    x, y = x, y\n\n    while x > y:\n        x, y = y, x % y\n    if x == 1:\n        return '-1'\n\n    res = 0\n    while y!= x:\n        y, x = x, y % x\n        res += 1\n\n    return str(res)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a, b, c = map(int, stdin.split())\n    a, b, c = sorted([a, b, c])\n    return (b - a) - (c - a) + b\n\n    a, b, c = map(int, stdin.split())\n    a, b, c = sorted([a, b, c])\n    return (b - a) - (c - a) + b\n    '''\n    # a, b, c = map(int, stdin.split())\n    # print(a, b, c)\n    # print(sorted([a, b, c]))\n\n    a, b, c = map(int, stdin.split())\n    print(a, b, c)\n    a, b, c = sorted([a, b, c])\n    print(a, b, c)\n    print(b - a - (c - a) + b)\n    return b - a - (c - a) + b\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a if (a % 4 == 0) else max(2, a - b + 3))\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    a, b = [int(i) for i in stdin.split(\" \")]\n    s = 1\n    while (b - a) % 2!= 0:\n        s += 1\n        a, b = b, (b + a) // 2\n    return str(s)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    print(1 + (y - x) * (2 + (y - x) * (3 + (y - x) * (5 + (y - x) * (7 + (y - x) * (10 + (y - x) * (14 + (y - x) * (20 + (y - x) * (27 + (y - x) * (37 + (y - x) * (55))))) * (y - x)))))))\n    return ''"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(\" \"))\n    answer = 0\n    while True:\n        if x == y:\n            break\n        if x >= y:\n            answer += 1\n            break\n        if (y - x) % 2 == 1:\n            answer += 1\n            break\n        else:\n            answer += (y - x) // 2\n            x, y = y, (y - x) // 2\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(max(map(abs, input().split(' ')))**2,\n                   max(map(abs, map(float, input().split(' '))))**2))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if d - c == 0:\n        if a == 0 and b == 0:\n            return '0.5'\n        if b == 0:\n            return str(a * 0.5)\n        return str(a * 0.5 * d / c)\n    return str((a * d - b * c) / (d - c))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n    \n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def mat_norm(mat: np.ndarray) -> float:\n        return np.max(np.abs(mat))\n\n    def mat_det(mat: np.ndarray) -> float:\n        det = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0]\n        return det\n\n    a, b = [int(num) for num in stdin.split(' ')]\n    c, d = [int(num) for num in stdin.split(' ')]\n\n    matrix = np.array([[a, b], [c, d]])\n\n    matrix_norm = mat_norm(matrix)\n    matrix_det = mat_det(matrix)\n    print(f'{matrix_norm - abs(matrix_det):.9f}')\n\n    return \"\""
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # put your solution here, remember to use'return'\n    n, m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(n)]\n    A_T = [[A[i][j] for i in range(n)] for j in range(m)]\n    A = [[A[i][j] for i in range(n)] for j in range(m)]\n\n    def det(mat):\n        a = mat[0][0]\n        b = mat[0][1]\n        c = mat[1][0]\n        d = mat[1][1]\n        return a*d - b*c\n    \n    def norm(mat):\n        r = 0\n        for i in range(len(mat)):\n            for j in range(len(mat[i])):\n                r += abs(mat[i][j])\n        return r\n    \n    det_mat = det(A)\n    det_mat_T = det(A_T)\n    \n    if det_mat == 0:\n        if det_mat_T == 0:\n            return str(0.0)\n        else:\n            return str(2.0 * norm(A))\n    else:\n        return str(norm(A_T) + norm(A))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    det = a * d - b * c\n    if det!= 0:\n        return \"%.9f\" % abs(a * d - b * c)\n    else:\n        return \"%.9f\" % 0.5"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    determinant = a * d - b * c\n    return str(abs(determinant) if determinant!= 0 else 0.5)\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(float, stdin.split()))\n    return str(abs((a*d - b*c) / sqrt(a**2 + b**2)))\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = stdin.split('\\n')[0].split()\n    t = stdin.split('\\n')[1].split()\n    N = int(T[0])\n    A = int(T[1])\n    B = int(T[2])\n    #T = list(map(int, T))\n    t = list(map(int, t))\n    # t = list(map(int, t.split()))\n    t.sort()\n    #t = list(map(int, t))\n    #T = list(map(int, T))\n    #t = list(map(int, t))\n    #t.sort()\n    #print(T)\n    #print(t)\n    n1 = 0\n    n2 = 0\n    n3 = 0\n    for i in range(N):\n        if t[i] == 1:\n            n1 = n1 + 1\n        elif t[i] == 2:\n            n2 = n2 + 1\n        else:\n            n3 = n3 + 1\n    return str(n1) +'' + str(n2) +'' + str(n3)\n\n\ndef"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_groups = stdin.split(' ')[0]\n    seats = stdin.split('\\n')[1].split(' ')\n    number_of_one_seater = 0\n    number_of_two_seater = 0\n    for seat in seats:\n        if int(seat) == 1:\n            number_of_one_seater += 1\n        if int(seat) == 2:\n            number_of_two_seater += 1\n    return str(number_of_one_seater + number_of_two_seater)\n\n\n\ntest_cases = [\n    ('4 1 2\\n1 2 1 1', '0'),\n    ('4 1 1\\n1 1 2 1', '2'),\n]\n\nfor test_case in test_cases:\n    assert solution(test_case[0]) == test_case[1]\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split('\\n')[0].split()]\n    t = [int(i) for i in stdin.split('\\n')[1].split()]\n    res = 0\n    if t[0] == a:\n        res += 1\n    for i in range(1, len(t)):\n        if t[i]!= t[i - 1]:\n            if t[i - 1] == a:\n                if i + 1 < len(t) and t[i + 1] == b:\n                    res += 1\n            else:\n                if i + 1 < len(t) and t[i + 1] == a:\n                    res += 1\n    return res\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(s) for s in stdin.split()]\n    t = [int(s) for s in stdin.split()][1:]\n    ans = 0\n    t1 = 0\n    t2 = 0\n    for i in range(n):\n        if t[i] == 1:\n            if t1 == a:\n                if t2 == 0:\n                    ans += 1\n            else:\n                t1 += 1\n                if t2 == b:\n                    ans += 1\n                else:\n                    t2 += 2\n        else:\n            if t2 == b:\n                ans += 1\n    return str(ans)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, one_seater, two_seater = [int(x) for x in stdin.split()]\n    tables = [0] * one_seater + [1] * two_seater\n    return sum(1 for x in zip(tables, stdin.split()))\n\ndef"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    table_count = [int(el) for el in stdin.split()]\n    return str(sum([i // 2 for i in table_count]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #For this problem, let's use a list of lists to store the people in the restaurant.\n    #Each sublist will contain people in a single table.\n    tables = []\n    num_of_people = stdin.split()\n    num_of_people = list(map(int, num_of_people))\n    #The number of tables is a given in the first line of the input, so we read it.\n    num_of_tables = num_of_people[0]\n    #We read the number of clients and make a list of lists of clients to represent our restaurant.\n    for i in range(num_of_tables):\n        #For each sublist, we create it.\n        tables.append([])\n        #We also read the number of people for that particular table.\n        num_of_people_for_table = num_of_people[i+1]\n        #For each person, we add them to the table.\n        for j in range(num_of_people_for_table):\n            #We first try to add them to the empty table.\n            try:\n                tables[i].append(int(input()))\n            #If it's not possible, then the group of people violates the restaurant policy, so we return 0.\n            except ValueError:\n                return \"0\"\n    #Then, we start counting the number of violations by adding the length of the sublists.\n    num_of_violations = 0\n    #We start looking at the sublists from the end.\n    for i in range(num_of_tables-1, -1, -1):\n        #If there are people in the sublist, then we go through them.\n        if tables[i]:\n            #We go through the people in the sublist.\n            for j in tables[i]:\n                #We check if the person is a member of the table.\n                if j == 1:\n                    #If so, then the person is seated at the one-seater table, so we increase the number of violations by one.\n                    num_of_violations += 1\n                #If the person isn't a member of the table, then we check if they can be placed at the two-seater table.\n                else:\n                    #If so, we see if the two-seater table is empty.\n                    if num_of_tables == 1:\n                        #If it is, then the group of people is seated at the two-seater table, so we increase the number of violations by one.\n                        num_of_violations += 1\n                    #If the two-seater table isn't empty, then we see if the one-seater table is empty.\n                    else:\n                        #If it is, then the group of people is seated at the one-seater table, so we increase the number of violations by one.\n                        num_of_violations += 1\n    #At the end, we return the number of violations.\n    return str(num_of_violations)\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    if n == 1:\n        return str(n) + \" \" + str(b)\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n    return str(n - min(a, b, c)) if a+b+c >= n else str(-1)\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    A, B, C, N = [int(stdin[i]) for i in range(4)]\n    if N == A + B + C:\n        return -1\n    elif N <= A:\n        return A - N\n    elif N <= B:\n        return B - N\n    else:\n        return N - N\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split(' '))\n    assert N > A + B + C\n    ans = N - A - B - C\n    if ans < 0:\n        ans = -1\n    return str(ans)\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split(\" \"))\n    return A+B+C+N-max(A,B,C)\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = [int(x) for x in stdin.split()]\n    if A * N > B * C and N * C >= A:\n        return str(N - A // B)\n    elif A * N < B * C and N * A >= B:\n        return str(N - B // A)\n    else:\n        return '-1'\n\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n    if a+b+c-n == 0:\n        return str(0)\n    elif a+b+c == n:\n        return str(-1)\n    elif (a+b+c)/n!= (a+b)/(a+b+c):\n        return str(-1)\n    else:\n        return str(int((n-a)/(a+b)))\n\"\"\"\ndef"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n\n    count_b = 0\n    count_c = 0\n    count_a = 0\n    for i in range(n):\n        if i % 3 == 0:\n            count_b += 1\n        elif i % 3 == 1:\n            count_c += 1\n        else:\n            count_a += 1\n\n    if a * count_b + b * count_c + c * count_a == n:\n        return str(n - (a * count_a + b * count_b + c * count_c))\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if N < A + B + C or N > 100 or A < 0 or B < 0 or C < 0:\n        return -1\n    return N - A - B - C\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = list(map(int, stdin.split(' ')))\n    if A == 0 or B == 0 or C == 0:\n        return str(-1)\n    return str(N - (A + B + C))\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c, n = map(int, stdin.split())\n    return \" \".join(map(str, [n - a - b - c, a, b, c, n]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(s) for s in stdin.split(\" \")]\n    print(x * (y + 1) * 2)\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split('\\n'))\n    if k == 0:\n        return x\n    return 2*x - 2 + 1\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the expected number of dresses Nastya will have in one year,\n    where each month has the probability of a dress being eaten or not\n    given by the function eating_probability.\n    >>> solution(\"4 3\")\n    5\n    '''\n    x, k = [int(s) for s in stdin.split()]\n    return str(sum(eating_probability(x, i) for i in range(k + 1)))\n\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    if k > 0:\n        x *= 2\n    return x\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 0''')\n    4\n    >>> solution('''2 1''')\n    7\n    >>> solution('''3 2''')\n    21\n    \"\"\"\n    n, m = map(int, stdin.split())\n    return (n + 1) * (n + 2) // 2 % (10 ** 9 + 7)\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k = [int(c) for c in stdin.strip().split(' ')]\n    if k == 0:\n        return 1\n    if k % 2 == 0:\n        return int(((x * (k - 1)) / k) * 2) % (10**9 + 7)\n    else:\n        return int(((x * (k - 1)) / k) * 2 + x) % (10**9 + 7)\n\nhttps://app.codility.com/demo/results/training8N26T-KJY/\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # 1. \u0421\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 stdin.\n    # 2. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e s \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u043d\u0435\u0451 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 stdin.\n    s = int(stdin)\n\n    # 3. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0441\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044c\u044e 2 \u0432 stdout.\n    return s**2\n\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k = [int(i) for i in stdin.split()]\n    return (x + int(k * (k - 1) / 2)) % (10 ** 9 + 7)\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k = stdin.split()\n    return str(2 * (int(x) * (int(k) + 1)) // (int(k) + 1))\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split(' '))\n    return (x + k - 1) * (x * 2 + 1) // 2\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [0 for _ in range(n)]\n    r = [0 for _ in range(n)]\n    for i in range(n):\n        a, b = stdin.split('\\n')\n        a, b = [int(x) for x in a.split()], [int(x) for x in b.split()]\n        l[i] = a[0]\n        r[i] = a[1]\n    good, bad = 0, 0\n    for i in range(n):\n        if l[i] + bad <= r[i]:\n            good += 1\n        else:\n            bad += l[i] + bad - r[i]\n    return int(good / (good + bad)) % 1000000007\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [tuple(map(int, line.split())) for line in stdin]\n\n    l, r = zip(*arr)\n    numerator = (r[0] - l[0] + 1) * (r[1] - l[1] + 1)\n    denominator = (r[1] - l[1] + 1) * (998244353 - l[1] + 1)\n\n    return str(numerator % denominator)\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    inv = 0\n    prob = 1\n    for i in range(n):\n        prob *= 1 - (l[i] / r[i])\n        inv += l[i] / r[i]\n    inv %= 998244353\n    return str(int(prob * inv))\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def prod_factors(num: int) -> int:\n        _factors = [1]\n        for x in range(2, num + 1):\n            if num % x == 0:\n                _factors.append(x)\n        return _factors\n\n    def coprime(num: int, mod: int) -> bool:\n        for x in range(2, mod):\n            if num % x == 0 and mod % x == 0:\n                return False\n        return True\n\n    def coprime_factors(factors: list) -> list:\n        _new_factors = []\n        for num in factors:\n            if coprime(num, 998244353):\n                _new_factors.append(num)\n        return _new_factors\n\n    def co_factor(num: int, mod: int) -> int:\n        return mod ** -1 * coprime_factors([x for x in prod_factors(num) if x not in coprime_factors(prod_factors(mod))])\n\n    return str(int(co_factor(1, 998244353)))\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solution for the given input\"\n    # for each input\n    # count inversions\n    # calculate probability\n    # return irreducible fraction\n    pass\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def inv(x, y):\n        return (x * y) % 998244353\n\n    def is_good(x, y):\n        return (y - x) % 998244353 in range(l, r + 1)\n\n    n = int(stdin.split()[0])\n    l, r = [int(i) for i in stdin.split()[1:]]\n    res = 1\n    for i in range(n):\n        res *= inv(1, is_good(l, r) - is_good(l, i) + 1)\n        l, r = i + 1, r\n    return str(res % 998244353)"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: the input string\n    # return: a string with the irreducible fraction of the inversions as an irreducible fraction of the form a/b, where b is coprime with 98244353\n\n    # replace this line with your solution\n    inversions = stdin\n    return inversions\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    problems = parse_input(stdin)\n    min_solutions, max_solutions = get_min_max_solution(problems)\n\n    prob_solutions = get_prob_solution(min_solutions, max_solutions)\n    prob = get_prob(prob_solutions)\n\n    return str(prob)\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, [1, 0]))\n\n\nsolution(\"1 1\\n1 1\")\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n    \n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def cut_stick_length(l: int) -> int:\n        count = 0\n        for n in range(1, l):\n            count += l - n\n        return count\n\n    l = int(stdin)\n    return cut_stick_length(l)\n    # \u00a0This is known as a binomial coefficient and is given by n! / (k! * (n - k)!)\n    # \u00a0n! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0k! = k * (k - 1) * (k - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k)! = n * (n - 1) * (n - 2) *... * 3 * 2 * 1\n    # \u00a0(n - k"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stick = int(stdin)\n    if stick % 2 == 1:\n        return 0\n    else:\n        return stick // 2\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_ways(stdin))\n\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum([\n        4 * (n - i) * (i - 1) // 2\n        for i in range(1, n // 2 + 1)\n        if n % i == 0 and (i >= 4 or n - i >= 4)\n    ]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.split('\\n')\n    n, s = map(int, _[0].split())\n    v = list(map(int, _[1].split()))\n    v.sort()\n    # a = 0\n    # b = 0\n    # c = 0\n    # for i in v:\n    #     if a+1 <= s:\n    #         a += 1\n    #         b += i\n    #         c += 1\n    #     else:\n    #         b += i\n    #         c += 1\n    #         break\n    # if c <= n:\n    #     print(b)\n    # else:\n    #     print(-1)\n    # return\n    a = 0\n    b = 0\n    c = 0\n    for i in v:\n        if a + 1 <= s:\n            a += 1\n            b += i\n            c += 1\n        else:\n            b += i\n            c += 1\n            break\n    if c <= n:\n        print(b)\n    else:\n        print(-1)\n    return\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. Save input to list of integers\n    2. Take input as integers\n    3. Initialize a list of zeros\n    4. Iterate over a list of integers\n        1. Start looping from 0 to input integer\n        2. Check if input integer value is less than current index value in a list\n            1. If it is:\n                1. Find the smallest integer value in list\n                    1. Store the smallest integer value in variable\n                2. Replace current index value in list with smallest integer value\n            3. Increment index\n    5. Print the smallest integer value\n\n    Parameters\n    ----------\n    stdin : str\n        String of integers separated by comma\n\n    Returns\n    -------\n    str\n        Integer value of smallest integer in list\n\n    \"\"\"\n    input_list = [int(i) for i in stdin.split(',')]\n    output_list = [0]*len(input_list)\n\n    for index, num in enumerate(input_list):\n        for i in range(index, len(input_list)):\n            if num >= input_list[i]:\n                output_list[index] = input_list[i]\n                break\n\n    return output_list\n\n\nsolution(input(\"Enter comma separated integers: \"))\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(' ')\n    n, s = int(n), int(s)\n\n    # array of kegs, with volume\n    kegs = [int(x) for x in stdin.split(' ')[1:]]\n\n    # array of volumes of kegs, sorted\n    kegs.sort()\n    print(kegs)\n\n    # kegs[0] is smallest, so no way to satisfy the condition\n    if kegs[0] > s:\n        return '-1'\n    # kegs[-1] is biggest, so all of the kegs can be satisfied\n    if kegs[-1] <= s:\n        return len(kegs)\n\n    # we only need to count how many volumes can be taken from each keg,\n    # so we can ignore the larger volumes\n    result = 0\n    for i in range(1, len(kegs)):\n        result += (s // kegs[i])\n        s %= kegs[i]\n    return result\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, s = stdin.split(\" \")\n    n, *v = [int(num) for num in stdin.split(\" \")]\n    v.sort()\n    for index, num in enumerate(v):\n        if num > s:\n            return index\n    return -1\n\ndef"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the least amount of kvass he can get.\"\"\"\n    kegs, kvass = [int(el) for el in stdin.split('\\n')[0].split()]\n    kegs_volumes = [int(el) for el in stdin.split('\\n')[1].split()]\n    current_keg = 0\n    current_kvass = 0\n    for i in range(len(kegs_volumes)):\n        if kegs_volumes[i] >= kvass:\n            current_kvass += (kegs_volumes[i] // kvass) * kvass\n            current_keg = (kegs_volumes[i] // kvass) + 1\n        else:\n            current_kvass += kegs_volumes[i]\n            current_keg = 1\n        if current_kvass >= kvass:\n            break\n    if current_kvass < kvass:\n        return \"-1\"\n    else:\n        return str(current_keg)\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if s == 1:\n        return n\n    val_list = list(map(int, stdin.split()))\n    val_list.sort()\n    val_list = val_list[::-1]\n    water_list = [val_list[i] - i for i in range(n)]\n    while True:\n        if s in water_list:\n            return water_list.index(s) + 1\n        s -= 1\n        water_list = [water_list[i] - 1 for i in range(n)]\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    finds the volume of the keg that Fair Nut will be able to drink,\n    if he has enough volume of kvass in it\n    :param stdin: string that contains n and s values\n    :return: volume of the keg that Fair Nut can drink, or -1 if\n    he can't drink it\n    '''\n\n    # split string into n and s values\n    n, s = stdin.split(\" \")\n    n = int(n)\n    s = int(s)\n\n    # initialize dictionary that will contain volumes of all kegs\n    volumes = {}\n\n    # loop through each keg and save its volume to the dictionary\n    for i in range(n):\n        keg_volume = stdin.split(\" \")[i+1]\n        volumes[keg_volume] = int(keg_volume)\n\n    # find the smallest keg that Fair Nut can drink\n    min_keg = min(volumes, key=volumes.get)\n\n    # if there is enough volume in the smallest keg, return the volume\n    if volumes[min_keg] >= s:\n        return str(volumes[min_keg])\n    # otherwise return -1\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = [int(x) for x in stdin.split()]\n    a, b = [int(x) for x in stdin.split()]\n    if h1 > h2:\n        return 0\n    elif h1 == h2:\n        return 1\n    else:\n        d = b + (h1 - h2)\n        if d < a:\n            return 0\n        else:\n            d -= a\n            if d < 0:\n                return -1\n            else:\n                return d // (a - b) + 1\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = [int(x) for x in stdin.split()]\n    a, b = [int(x) for x in stdin.split()]\n    c = h_1 / (a - b)\n    d = h_2 / (a - b)\n    if c % 2 == 0 or d % 2 == 0:\n        print(-1)\n    else:\n        print(math.ceil(c))\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    h1, h2, a, b = [int(s) for s in stdin.split()]\n    while (h1 <= h2) and (a > 0):\n        h1 += a\n        h2 += b\n        ans += 1\n        if h2 > h1:\n            break\n        ans -= 1\n    if h1 <= h2:\n        ans = -1\n    return str(ans)\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [h_1, h_2] = [int(i) for i in stdin.strip().split()]\n    [a, b] = [int(i) for i in stdin.strip().split()]\n    days = h_2 // (a + b) - h_1 // (a + b) + (h_2 % (a + b)) // a + 1\n    if h_2 % (a + b) % a == 0:\n        days -= 1\n    return str(days)"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2, a, b = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    c1 = a * (h1 - h2)\n    c2 = b * (h1 - h2)\n    if c1 <= 0:\n        if c2 <= 0:\n            return \"1\"\n        else:\n            return \"0\"\n    else:\n        return \"2\"\n\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of days.\"\"\"\n    # Write your code here\n    h_1, h_2 = [int(el) for el in stdin.split()]\n    a, b = [int(el) for el in stdin.split()]\n    day = 1\n    while h_1 < h_2:\n        h_1 += a\n        if h_1 >= h_2:\n            return day\n        else:\n            h_1 -= b\n            day += 1\n    return -1"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2, a, b = [int(i) for i in stdin.split(\" \")]\n    day = ceil((h2-h1) / (a-b))\n    if day > 0:\n        return day\n    else:\n        return -1\n\n\"\"\"\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2, a, b = map(int, stdin.split('\\n'))\n    h_1, h_2 = sorted([h_1, h_2])\n    if h_2 - h_1 - 1 < b:\n        return -1\n    day = ((h_2 - h_1 - 1) // (a + b)) + 1\n    return day\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    # height = [int(i) for i in stdin.split()]\n    height = stdin.split()\n    # print(height)\n    day = (height[1] - height[0]) // (height[2] - height[1])\n    if day == 0:\n        return -1\n    else:\n        return day\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = [int(i) for i in stdin.split()]\n    if b / a >= c / d:\n        return c * e\n    else:\n        return b * e\n\"\"\"\n\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum number of joy units that Om Nom can get\n    '''\n    pass\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(\" \")[0])*int(stdin.split(\" \")[1]) + int(stdin.split(\" \")[2])*int(stdin.split(\" \")[3]) + int(stdin.split(\" \")[0])*int(stdin.split(\" \")[4]))\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    print(W_r * H_r + W_b * H_b)\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c, h_r, h_b, w_r, w_b = list(map(int, stdin.split()))\n\n    if h_r > h_b and w_r > w_b:\n        return 2 * c * min(h_r, w_r)\n    elif h_b > h_r and w_b > w_r:\n        return 2 * c * min(h_b, w_b)\n    else:\n        return c * min(h_r, h_b) + c * min(w_r, w_b)\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(\n        int(stdin.split(\" \")[0]) * int(stdin.split(\" \")[1]) + int(stdin.split(\" \")[2]) * int(stdin.split(\" \")[3])\n    )\n    \n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return abs(x_1 - x_2) + abs(y_1 - y_2)\n\"\"\"\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split()]\n    x = abs(x2 - x1)\n    y = abs(y2 - y1)\n    return str(x + y)\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = list(map(int, stdin.split()))\n    x2, y2 = list(map(int, stdin.split()))\n\n    return str(abs(x1 - x2) + abs(y1 - y2))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(i) for i in stdin.split()]\n    return abs(x_2 - x_1) + abs(y_2 - y_1)\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    x_diff, y_diff = x2 - x1, y2 - y1\n    print(abs(x_diff) + abs(y_diff))\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = [int(x) for x in stdin.split(' ')]\n    x2, y2 = [int(x) for x in stdin.split(' ')]\n    \n    steps = (abs(x2 - x1) + abs(y2 - y1)) // 2\n    return str(steps)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = [int(i) for i in stdin.split()]\n    x_2, y_2 = [int(i) for i in stdin.split()]\n    return abs(x_1 - x_2) + abs(y_1 - y_2)\n\nprint(solution(\"0 0\\n4 5\"))"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(s) for s in stdin.split(\" \")]\n    x_diff = x_2 - x_1\n    y_diff = y_2 - y_1\n    x_inc = abs(x_diff)\n    y_inc = abs(y_diff)\n    if x_diff > 0:\n        x_inc -= x_diff\n    if y_diff > 0:\n        y_inc -= y_diff\n    return str(x_inc + y_inc)"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nx_1, y_1 = map(int, stdin.split())\nx_2, y_2 = map(int, stdin.split())\n\nreturn abs(x_2 - x_1) + abs(y_2 - y_1)\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counts = [0] * (n + 1)\n    for ch in stdin:\n        if ch == 'D':\n            counts[-1] -= 1\n            counts[-2] += 1\n        else:\n            counts[-1] += 1\n            counts[-2] -= 1\n    res = 'D' if counts[-1] > counts[-2] else 'R'\n    for i in range(n):\n        counts[i] += counts[i + 1]\n        if counts[i] > counts[i + 1]:\n            res = 'D' if res == 'R' else 'R'\n    return res"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = stdin.split('R')\n    remocrats = 0\n    depublicans = 0\n\n    for vote in votes:\n        if vote == '':\n            break\n        if vote[0] == 'R':\n            remocrats += 1\n        else:\n            depublicans += 1\n\n    if remocrats > depublicans:\n        return 'R'\n    return 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    employees = [stdin[i] for i in range(n)]\n    rem = 'R'\n    dep = 'D'\n    while len(employees) > 1:\n        new_list = []\n        for i in range(n):\n            if i % 2 == 0:\n                new_list.append(rem)\n            else:\n                new_list.append(dep)\n        print(new_list)\n        employees = new_list\n    return employees[0]\n\n\n\n\"\"\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Write your code here\n    stdin = stdin.split()\n    l = len(stdin)\n    depublicans = 0\n    remocrats = 0\n    \n    for i in range(l):\n        if stdin[i] == 'D':\n            depublicans += 1\n            remocrats -= 1\n        else:\n            depublicans -= 1\n            remocrats += 1\n        \n        if remocrats == 0 or depublicans == 0:\n            break\n        \n    if depublicans > 0:\n        return 'D'\n    else:\n        return 'R'\n        \n        \n        \n        \n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    votes = [stdin[1][i] for i in range(n)]\n    denies = {'D': 5, 'R': 3}\n    \n    while True:\n        for i in range(n):\n            if i+denies['D'] >= n or votes[i]!= 'D':\n                break\n            else:\n                votes[i] = 'R'\n        else:\n            break\n        \n        for i in range(n):\n            if i+denies['R'] >= n or votes[i]!= 'R':\n                break\n            else:\n                votes[i] = 'D'\n        else:\n            break\n        \n    if 'D' in votes:\n        return 'D'\n    else:\n        return 'R'\n    \n    \n    \n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    votes = [char for char in stdin.readline().strip()]\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1):\n        if votes[i] == votes[i + 1]:\n            dp[i][i + 1] = 1\n\n    for i in range(2, n):\n        for start in range(n - i):\n            end = start + i\n            if votes[start] == votes[end] and dp[start + 1][end - 1]:\n                dp[start][end] = 1\n\n    return 'D' if dp[0][-1] else 'R'\n\n\ndef"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # input_num = int(stdin[0])\n    # if input_num % 2 == 0:\n    #     print(\"D\")\n    # else:\n    #     print(\"R\")\n    # return\n    if stdin.__len__() % 2 == 0:\n        print(\"D\")\n    else:\n        print(\"R\")\n    return\n\n\nsolution(stdin)\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_people = int(stdin)\n    possible_outcomes = list(stdin)\n    lst = []\n    denies = []\n    for i in range(1, num_of_people + 1):\n        lst.append(i)\n    for i in range(len(possible_outcomes)):\n        if possible_outcomes[i] == \"D\":\n            denies.append(lst[i])\n        elif possible_outcomes[i] == \"R\":\n            lst[i] = \"X\"\n    for i in range(len(lst)):\n        if lst[i] == \"X\":\n            lst[i] = \"D\"\n    return \"D\" if lst.count(\"D\") > 0 else \"R\"\n\n\n\n-----Test-----\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK\n\nOK"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(i) for i in stdin.split()]\n    \n    return str(sum((a + b) * (a - b + 1) // 2 * (x - y + 1) // 2 for a in range(1, a + 1) for b in range(1, b + 1) if a * b == x * y and a <= x and b <= y))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(c) for c in stdin.split(' ')]\n    cnt = 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if w / h == x / y:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    ans = 0\n    for w in range(a, b + 1):\n        for h in range(b, a + 1):\n            if w / h == x / y:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(x) for x in stdin.split(\" \")]\n    total = 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if w / h == x / y:\n                total += 1\n    return str(total)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = (int(i) for i in stdin.split())\n    def dfs(w: int, h: int, n: int) -> int:\n        if w == a and h == b and n == 0:\n            return 1\n        if n > 0:\n            return sum(dfs(w, h, n - 1) for w in range(x + 1) for h in range(y + 1) if w <= a and h <= b and w / h == x / y)\n        return 0\n    return str(dfs(1, 1, 5))\n\n\ndef"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(i) for i in stdin.split(' ')]\n    return str(sum([i * j for i in range(1, a + 1) for j in range(1, b + 1) if (i / j == x / y) and (i <= a) and (j <= b)]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    return str(math.comb(a + b, a) * math.comb(x + y, x) // math.factorial(x) // math.factorial(y))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split(' '))\n    return str(max(0, sum(max(0, x // a - (b // a)), max(0, y // b - (a // b))) - sum(max(0, x // a - (b // a)), max(0, y // b - (a // b)))))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(c) for c in stdin.split()]\n    return str(sum(1 for w in range(a, a + 1) for h in range(b + 1) if w <= a and h <= b and w * h == x * y))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = (int(s) for s in stdin.split())\n    return str(count_of_variants(a, b, x, y))\n\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn, b = map(int, input().split())\n\ncnt = 0\ni = 0\nwhile n > 0:\n    n //= b\n    cnt += n\n    i += 1\n\nprint(i)\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(stdin)\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    b_ary = []\n    s = a\n    while s > 0:\n        b_ary.append(s % b)\n        s //= b\n    return len([i for i in b_ary if i == 0])\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 9')\n    1\n    >>> solution('38 11')\n    3\n    >>> solution('5 2')\n    3\n    >>> solution('5 10')\n    1\n    \"\"\"\n    n, base = [int(i) for i in stdin.split()]\n    base_numbers = tuple([i for i in range(1, base + 1)])\n    base_power = tuple([i for i in range(base, base - n, -1)])\n    return sum(i * (base ** j) for i, j in zip(base_numbers, base_power))\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    return..."
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return m * (m + a + b - 1) // 2\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = list(map(int, stdin.split()))\n    return sum(f(i) for i in range(m + 1))\n\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.split())\n\n    return sum(1 + i if i % b == 0 else 1 for i in range(a, a + b))\n\"\"\"\n\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return m*(m+1)//2 - a*(a+1)//2 - b*(b+1)//2\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    print(m * (m + 1) // 2 + a * m + b * (m - 1))\n    # m * (m + 1) / 2 + a * m + b * (m - 1)"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(i) for i in stdin.split(' ')]\n    return m\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return str(sum(m - i for i in range(m) if not a <= i <= m - b))\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    if a == 1:\n        return m\n    return m + m + a * (a - 1) // 2 + b * (b - 1) // 2\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    f(i) \u4ece0\u5230i\u65f6\uff0c\u53ef\u4ee5\u8d70\u5230\u7684\u6570\uff0c\u4e0d\u5305\u542bi\n    '''\n    # \u8f93\u5165\n    m, a, b = [int(s) for s in stdin.split()]\n\n    # \u9884\u5904\u7406\n    # \u4e0d\u6d89\u53ca\u6570\u636e\u9879\u4e4b\u95f4\u7684\u5173\u7cfb\n    # \u9884\u5904\u7406\u63d0\u524d\u8ba1\u7b97\u51fa\u7ed3\u679c\n    # \u5177\u4f53\u7b97\u6cd5\u4e5f\u6ca1\u6709\u63d0\u524d\u7684\u9884\u5904\u7406\n    ans = m\n    # \u4e00\u6b21\u6027\u8ba1\u7b97\u51fa\u6240\u6709\u6570\u636e\u9879\u4e4b\u95f4\u53ef\u4ee5\u8df3\u8dc3\u7684\u6570\u636e\u9879\n    for i in range(m):\n        if i + a <= m:\n            ans += m - i - 1\n    # \u8f93\u51fa\n    return ans\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd(n):\n        if n % 2!= 0:\n            return True\n        else:\n            return False\n\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n\n    sequence = list(map(int, lines[1].split(' ')))\n\n    count = 0\n\n    for i in range(0, n):\n        if is_odd(sequence[i]):\n            count += 1\n\n    if count == 0 or count % 2 == 1:\n        print('No')\n    else:\n        print('Yes')\n    return True"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    #your code here\n    if (a[0] % 2) == 1 or (a[n - 1] % 2) == 0:\n        return 'Yes'\n    else:\n        return 'No'\nprint(solution(input()))\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 9 9 3\")\n    'No'\n    >>> solution(\"5 9 9 3\")\n    'No'\n    >>> solution(\"4 9 9 3\")\n    'Yes'\n    \"\"\"\n    lst = [int(x) for x in stdin.split(\" \")]\n    # There must be an odd number of elements\n    if len(lst) % 2 == 0:\n        return \"No\"\n    # All elements must be odd\n    if not all(x % 2 == 1 for x in lst):\n        return \"No\"\n    # Elements must alternate between odd and even\n    if any(x % 2 == 0 for x in lst[:-1]):\n        return \"No\"\n    # Elements must begin and end with odd\n    if not lst[0] % 2 == 1 or not lst[-1] % 2 == 1:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) % 2 == 0 and is_odd_even(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    l, h = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if all([(x % 2!= 0) for x in a]):\n        return 'Yes'\n    else:\n        return 'No'\n    pass\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    print(-1 if x1 * y1 == x2 * y2 or x1 * x2 == y1 * y2 else (x1 + y1 + x2 + y2) / 2, end=' ')\n    print(x1 + y1 - (x1 + y1 + x2 + y2) // 2)\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\""
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    p1, p2 = sorted((x_1, y_1), (x_2, y_2))\n    print(p1[0], p1[1], p2[0], p2[1])\n\n    return ''\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x1, y1, x2, y2 = map(int, stdin.split())\n\n    if x1 == x2 or y1 == y2:\n        return '-1'\n\n    s1 = (x1 + x2) / 2\n    s2 = (y1 + y2) / 2\n    if s1 * 2 == x1 + x2 and s2 * 2 == y1 + y2:\n        return '-1'\n\n    if x1 == x2 and y1 == y2:\n        return '1 1 1 1'\n\n    if x1 == x2:\n        s3 = y1 - y2\n        s4 = x2 - x1\n        if s3 > 0:\n            return '-1'\n        return f'{s3} {s4} {s3} {s4}'\n\n    if y1 == y2:\n        s3 = x2 - x1\n        s4 = y2 - y1\n        if s4 > 0:\n            return '-1'\n        return f'{s3} {s4} {s3} {s4}'\n\n    return f'{(y1 - y2)} {(x2 - x1)} {(y1 + y2)} {(x2 + x1)}'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = stdin.split()\n    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)\n    x3, y3, x4, y4 = 0, 0, 0, 0\n    if x1 == x2:\n        if y2 == y1 - 1:\n            x3, y3, x4, y4 = x1, y1, x2, y2\n        elif y2 == y1 + 1:\n            x3, y3, x4, y4 = x1, y2, x2, y1\n    elif y1 == y2:\n        if x2 == x1 - 1:\n            x3, y3, x4, y4 = x1, y1, x2, y2\n        elif x2 == x1 + 1:\n            x3, y3, x4, y4 = x2, y1, x1, y1\n    elif x1 == x2 - 1:\n        if y2 == y1 - 1:\n            x3, y3, x4, y4 = x1, y1, x2, y2\n        elif y2 == y1 + 1:\n            x3, y3, x4, y4 = x2, y1, x1, y1\n    elif x1 == x2 + 1:\n        if y2 == y1 - 1:\n            x3, y3, x4, y4 = x2, y1, x1, y2\n        elif y2 == y1 + 1:\n            x3, y3, x4, y4 = x1, y1, x2, y2\n    elif y1 == y2 - 1:\n        if x2 == x1 - 1:\n            x3, y3, x4, y4 = x1, y1, x2, y2\n        elif x2 == x1 + 1:\n            x3, y3, x4, y4 = x2, y1, x1, y1\n    elif y1 == y2 + 1:\n        if x2 == x1 - 1:\n            x3, y3, x4, y4 = x1, y2, x2, y1\n        elif x2 == x1 + 1:\n            x3, y3, x4, y4 = x2, y1, x1, y1\n    if x3 or y3 or x4 or y4:\n        return f\"{x3} {y3} {x4} {y4}\"\n    return \"-1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return''.join(map(str, [x2 - x1, y2 - y1, x2 - (x1 - y1), x2 - (x1 + y1)]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    if x_1 == x_2:\n        return str(x_3) +'' + str(y_3) +'' + str(x_4) +'' + str(y_4)\n    else:\n        return str(x_3) +'' + str(y_3) +'' + str(x_4) +'' + str(y_4)\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(c) for c in stdin.split()]\n    if x_1 == x_2 and y_1 == y_2:\n        return '0 0 0 0'\n    if x_1 == x_2:\n        return f'0 {x_1} {y_1} {x_2} {y_2}'\n    if y_1 == y_2:\n        return f'{x_1} {y_1} {x_2} {y_2} 0'\n    if y_1!= y_2 and x_1!= x_2:\n        return '-1'\n    x = (x_1 - x_2) / (y_1 - y_2) if y_1 - y_2 else (y_1 - y_2) / (x_1 - x_2)\n    y = (y_1 + y_2) / 2 - x * (x_1 + x_2) / 2\n    return f'{x} {y} {x_1 + x} {y_1 + y} {x_2 + x} {y_2 + y}'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the two remaining trees.\"\"\"\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    if x_1 == x_2:\n        if y_1 == y_2:\n            return '0 0 0 0'\n        elif y_1 < y_2:\n            return '0 1 0 1'\n        else:\n            return '1 1 0 1'\n    elif x_1 < x_2:\n        if y_1 == y_2:\n            return '1 0 1 0'\n        elif y_1 < y_2:\n            return '0 1 1 0'\n        else:\n            return '1 1 0 1'\n    else:\n        if y_1 == y_2:\n            return '0 0 1 1'\n        elif y_1 < y_2:\n            return '1 0 1 1'\n        else:\n            return '1 1 0 1'"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(' ')]\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            if (x + y) % 2 == 0:\n                continue\n            if (x - y) % 2 == 0:\n                continue\n            if x * y % 2 == 0:\n                continue\n            if x * y % 2 == 0:\n                continue\n            return f\"{x} {y} {(x+y)//2} {(x-y)//2}\"\n    return \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split(' ')))\n    n = int(input())\n\n    if n == 1:\n        return x % 1000000007\n    elif n == 2:\n        return (x + y) % 1000000007\n    else:\n        result = 0\n        for _ in range(n):\n            result = (result + x) % 1000000007\n            result = (result + y) % 1000000007\n        return result % 1000000007\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(n) for n in stdin.split(' ')]\n    return 0"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    n = int(input())\n    i = 2\n    sum = x\n    while i <= n:\n        sum = x + y\n        x = y\n        y = sum\n        i += 1\n    return sum"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    n = int(stdin)\n    return str(x + y)\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(c) for c in stdin.split(' ')]\n    n = int(stdin.split(' ')[-1])\n    return (x**2 + x*y + y**2) % 1000000007\n    \n    \n-----Test cases-----\n\nInput\n1 1\n1\n\nOutput\n1\n\nInput\n1 1\n2\n\nOutput\n1\n\nInput\n1 1\n3\n\nOutput\n4\n\nInput\n1 1\n4\n\nOutput\n1\n\nInput\n1 1\n5\n\nOutput\n5\n\nInput\n2 3\n3\n\nOutput\n1\n\nInput\n0 -1\n2\n\nOutput\n1000000006\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 3\\n3')\n    '1'\n    >>> solution('0 -1\\n2')\n    '1000000006'\n    \"\"\"\n    _, a, b = stdin.split()\n    a, b = int(a), int(b)\n    a, b = a % (10 ** 9 + 7), b % (10 ** 9 + 7)\n    print(a + b)\n    print(a, b)\n    return\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    x, y = map(int, stdin.split())\n    n = int(stdin)\n\n    if n == 0:\n        return str(1000000006)\n\n    def gen(n):\n        if n == 1:\n            return (y,)\n        elif n == 2:\n            return (x, y)\n        else:\n            return (gen(n - 1)[-1], gen(n - 2)[-1])\n\n    return str(sum(gen(n)) % 1000000007)\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    n = int(stdin.split()[1])\n    # Initialize the sequence\n    f = [0]\n    f.append(x)\n    f.append(y)\n\n    # Loop through the sequence\n    for i in range(3, n + 1):\n        f.append(f[i - 1] + f[i + 1])\n\n    # Return the nth element\n    return f[n] % 1000000007\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\ndef"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x < 0 or y < 0:\n        return 1000000006\n    if x == 0 and y == 0:\n        return 1000000006\n    \n    mod = 1000000007\n    \n    if x == 0:\n        return 1\n    \n    if x < y:\n        x, y = y, x\n    \n    if x == y:\n        return 1\n    \n    k = 0\n    cur = x\n    while cur < y:\n        cur *= 2\n        k += 1\n    \n    if k > 1:\n        k -= 1\n        x *= 2\n    else:\n        k = 0\n    \n    d = 1\n    while k:\n        x *= 2\n        k -= 1\n        d = d * 2 % mod\n    \n    y_inv = pow(y, -1, mod)\n    y_inv_k = y_inv * d % mod\n    \n    return (x * y_inv_k % mod) % mod\n\n\n\n\"\"\"\n\n\n\"\"\"\nMethod 4\n    \n    2 2 2\n    \n    2 1 0\n    \n    x y 0\n    \n    x y 1\n    \n    x y 2\n    \n    x y 3\n    \n    x y 4\n    \n    x y 5\n    \n    x y 6\n    \n    x y 7\n    \n    x y 8\n    \n    x y 9\n    \n    x y 10\n    \n    x y 11\n    \n    x y 12\n    \n    x y 13\n    \n    x y 14\n    \n    x y 15\n    \n    x y 16\n    \n    x y 17\n    \n    x y 18\n    \n    x y 19\n    \n    x y 20\n    \n    x y 21\n    \n    x y 22\n    \n    x y 23\n    \n    x y 24\n    \n    x y 25\n    \n    x y 26\n    \n    x y 27\n    \n    x y 28\n    \n    x y 29\n    \n    x y 30\n    \n    x y 31\n    \n    x y 32\n    \n    x y 33\n    \n    x y 34\n    \n    x y 35\n    \n    x y 36\n    \n    x y 37\n    \n    x y 38\n    \n    x y 39\n    \n    x y 40\n    \n    x y 41\n    \n    x y 42\n    \n    x y 43\n    \n    x y 44\n    \n    x y 45\n    \n    x y 46\n    \n    x y 47\n    \n    x y 48\n    \n    x y 49\n    \n    x y 50\n    \n    x y 51\n    \n    x y 52\n    \n    x y 53\n    \n    x y 54\n    \n    x y 55\n    \n    x y 56\n    \n    x y 57\n    \n    x y 58\n    \n    x y 59\n    \n    x y 60\n    \n    x y 61\n    \n    x y 62\n    \n    x y 63\n    \n    x y 64\n    \n    x y 65\n    \n    x y 66\n    \n    x y 67\n    \n    x y 68\n    \n    x y 69\n    \n    x y 70\n    \n    x y 71\n    \n    x y 72\n    \n    x y 73\n    \n    x y 74\n    \n    x y 75\n    \n    x y 76\n    \n    x y 77\n    \n    x y 78\n    \n    x y 79\n    \n    x y 80\n    \n    x y 81\n    \n    x y 82\n    \n    x y 83\n    \n    x y 84\n    \n    x y 85\n    \n    x y 86\n    \n    x y 87\n    \n    x y 88\n    \n    x y 89\n    \n    x y 90\n    \n    x y 91\n    \n    x y 92\n    \n    x y 93\n    \n    x y 94\n    \n    x y 95\n    \n    x y 96\n    \n    x y 97\n    \n    x y 98\n    \n    x y 99\n    \n    x y 100\n    \n    x y 101\n    \n    x y 102\n    \n    x y 103\n    \n    x y 104\n    \n    x y 105\n    \n    x y 106\n    \n    x y 107\n    \n    x y 108\n    \n    x y 109\n    \n    x y 110\n    \n    x y 111\n    \n    x y 112\n    \n    x y 113\n    \n    x y 114\n    \n    x y 115\n    \n    x y 116\n    \n    x y 117\n    \n    x y 118\n    \n    x y 119\n    \n    x y 120\n    \n    x y 121\n    \n    x y 122\n    \n    x y 123\n    \n    x y 124\n    \n    x y 125\n    \n    x y 126\n    \n    x y 127\n    \n    x y 128\n    \n    x y 129\n    \n    x y 130\n    \n    x y 131\n    \n    x y 132\n    \n    x y 133\n    \n    x y 134\n    \n    x y 135\n    \n    x y 136\n    \n    x y 137\n    \n    x y 138\n    \n    x y 139\n    \n    x y 140\n    \n    x y 141\n    \n    x y 142\n    \n    x y 143\n    \n    x y 144\n    \n    x y 145\n    \n    x y 146\n    \n    x y 147\n    \n    x y 148\n    \n    x y 149\n    \n    x y 150\n    \n    x y 151\n    \n    x y 152\n    \n    x y 153\n    \n    x y 154\n    \n    x y 155\n    \n    x y 156\n    \n    x y 157\n    \n    x y 158\n    \n    x y 159\n    \n    x y 160\n    \n    x y 161\n    \n    x y 162\n    \n    x y 163\n    \n    x y 164\n    \n    x y 165\n    \n    x y 166\n    \n    x y 167\n    \n    x y 168\n    \n    x y 169\n    \n    x y 170\n    \n    x y 171\n    \n    x y 172\n    \n    x y 173\n    \n    x y 174\n    \n    x y 175\n    \n    x y 176\n    \n    x y 177\n    \n    x y 178\n    \n    x y 179\n    \n    x y 180\n    \n    x y 181\n    \n    x y 182\n    \n    x y 183\n    \n    x y 184\n    \n    x y 185\n    \n    x y 186\n    \n    x y 187\n    \n    x y 188\n    \n    x y 189\n    \n    x y 190\n    \n    x y 191\n    \n    x y 192\n    \n    x y 193\n    \n    x y 194\n    \n    x y 195\n    \n    x y 196\n    \n    x y 197\n    \n    x y 198\n    \n    x y 199\n    \n    x y 200\n    \n    x y 201\n    \n    x y 202\n    \n    x y 203\n    \n    x y 204\n    \n    x y 205\n    \n    x y 206\n    \n    x y 207\n    \n    x y 208\n    \n    x y 209\n    \n    x y 210\n    \n    x y 211\n    \n    x y 212\n    \n    x y 213"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The idea of solution is to use Greedy Algorithm.\n    We will create two variables to store the sum of elements which should be\n    greater than zero and the last element of the array. Then we will start\n    from the second element of the array until we reach the last element.\n    In the loop we will add the current element to the sum and if the sum is\n    greater than zero than we will add it to the array and remove it from the sum.\n    Then we will add the current element to the sum and if the sum is greater\n    than the last element than we will add it to the array and remove it from the sum.\n    After that we will check if the sum is equal to the last element then we will\n    return \"Yes\" and we will store the length of the array.\n    If we get an array which is not possible to split by using Greedy Algorithm\n    then we will return \"No\".\n\n    Time complexity: O(N)\n    Space complexity: O(1)\n    '''\n\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    A.sort()\n    if A[-1] < 0:\n        return \"No\"\n    sum, last_element = 0, A[-1]\n    for i in range(1, N):\n        sum += A[i - 1]\n        if sum > last_element:\n            if sum == last_element:\n                return \"Yes\\n{}\".format(i)\n            return \"Yes\"\n        if sum < 0:\n            sum = A[i]\n    return \"No\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    print(\"YES\" if size % 2 == 0 else \"NO\")\n    print(size // 2)\n    for i in range(size // 2):\n        print(i + 1, size - i - 1)\n    return \"\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8\\n9 -12 3 4 -4 -10 7 3\\n')\n    YES\n    2\n    1 2\n    3 8\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1].split('-')]\n\n    l, r = 0, n\n    subarrays = [0]\n    while r > l:\n        s = sum(a[l:r])\n        if s == 0:\n            subarrays.append(r - l)\n            l = r\n        elif s < 0:\n            r += 1\n        else:\n            l += 1\n    if subarrays:\n        return 'YES\\n' + str(len(subarrays)) + '\\n' +''.join(map(str, subarrays))\n    return 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    dp = [0 for _ in range(n)]\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\n    if dp[-1] == 0:\n        print('YES')\n        print('1')\n        print(1, n)\n    else:\n        for j in range(n):\n            for k in range(j + 1, n):\n                if dp[k] - dp[j] == 0:\n                    print('YES')\n                    print(j + 1, k)\n                    break\n            else:\n                continue\n            break\n        else:\n            print('NO')\n\nsolution(sys.stdin.readlines())\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_numbers = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    \n    if sum(numbers) % 3!= 0:\n        print('NO')\n        return\n    \n    remainder = sum(numbers) % 3\n    if remainder == 0:\n        print('YES')\n        print(1)\n        print(1, len(numbers)-1)\n        return\n    \n    print('YES')\n    sub_arrays = {}\n    for i in range(len(numbers)):\n        remainder = (sum(numbers) - numbers[i]) % 3\n        if remainder == 0:\n            sub_arrays[i+1] = [i+1, i+1]\n        else:\n            sub_arrays[i+1] = [i+1, i]\n    \n    for i in sub_arrays:\n        print(i, sub_arrays[i][1] - sub_arrays[i][0])\n        \nsolution(stdin)"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n1 2 -3')\n    'YES'\n    >>> solution('8\\n9 -12 3 4 -4 -10 7 3')\n    'YES'\n    >>> solution('1\\n0')\n    'NO'\n    \"\"\"\n    from math import ceil\n\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    if sum(A)!= 0:\n        return 'NO'\n    ans = []\n    for i in range(1, ceil(len(A) / 2) + 1):\n        s = sum(A[:i])\n        if s!= 0:\n            continue\n        ind = 0\n        for j in range(i, len(A), i):\n            s += A[j]\n            if s == 0:\n                ind = j + 1\n            elif s > 0:\n                continue\n            else:\n                break\n        if ind == 0:\n            continue\n        ans.append((i, ind - 1))\n    return 'YES' + '\\n' + '\\n'.join(\n       ''.join(map(str, sub)) for sub in ans\n    )"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    left = [0] * n\n    right = [0] * n\n    for i in range(1, n):\n        if arr[i] >= 0:\n            left[i] = i + 1\n            right[i] = n\n        else:\n            while arr[i] + arr[left[i] - 1] > 0:\n                left[i] -= 1\n            right[i] = left[i]\n    for i in range(n):\n        print(\"YES\" if left[i] == right[i] else \"NO\")\n    return \"\"\n\ndef"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    for i in range(1, n):\n        if sum(a[0:i]) == 0 or sum(a[i:n]) == 0:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(n)\n    for i in range(n):\n        print(a[0], end=\" \")\n        for j in range(1, n):\n            if i < j:\n                print(a[i], end=\" \")\n                break\n            else:\n                print(a[i], end=\" \")\n    print()\n\n\ndef"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    if sum(arr) == 0:\n        return 'NO'\n    arr.sort()\n    start, end = 0, n - 1\n    k, m = 0, 0\n    while end > start:\n        if arr[end] + arr[start] > 0:\n            m = max(m, end - start)\n            end -= 1\n        else:\n            start += 1\n        k += 1\n    if k > m:\n        return 'YES\\n' + str(k) + '\\n' +''.join([str(i) for i in range(1, k + 1)])\n    return 'NO'"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    if sum(nums) == 0:\n        return 'YES'\n    elif sum(nums) < 0:\n        return 'NO'\n\n    nums = [0] + nums\n    nums = [0] + nums\n    left, right = [0] * len(nums), [0] * len(nums)\n\n    for i, num in enumerate(nums):\n        left[i + 1] = max(left[i], num)\n        right[i - 1] = max(right[i], num)\n\n    k = 0\n    for i in range(1, len(nums)):\n        if left[i] + right[i] > 0:\n            k += 1\n            print(i, i + 1)\n\n    return 'YES' if k == len(nums) - 1 else 'NO'\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    print((m * (m + 1) // 2 * k) % (10 ** 9 + 9))\n\nprint(solution('5 3 2'))"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    # a = n*m*k\n    # b = m*(n*k)\n    # c = k*(n*m)\n    # d = a+b+c\n    # f = n*m\n    # h = m*n\n    # g = f+h\n    # j = g+k\n    # a = d/1000000009\n    # b = b/1000000009\n    # c = c/1000000009\n    # d = d/1000000009\n    # e = a+b+c\n    # g = g/1000000009\n    # j = j/1000000009\n    # f = f/1000000009\n    # h = h/1000000009\n    # a = e/1000000009\n    # b = d/1000000009\n    # c = g/1000000009\n    # d = h/1000000009\n    # e = a+b+c\n    # g = f+h\n    # j = e+g\n    # j = j/1000000009\n    # return j % 1000000009\n    return int(n * m * k - m * (n * k) - k * (n * m) + (n * m))\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    ans = 0\n    for i in range(n):\n        if i < m:\n            ans += 1\n        elif i == m:\n            ans += 2\n        else:\n            ans += 1\n            if i - m >= k:\n                ans += 1\n    return ans % 1000000009\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(max((n - m * 2 + 1) * (k + 1) * 2, 0))\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(sum([i for i in range(m, n + 1) if i % (k + 1) == 0]))\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin: input on STDIN\n    Returns:\n        stdout\n    \"\"\"\n   ...\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    return n - m * (m + 1) // 2 - m * (m - 1) // 2 - k * (k + 1) // 2 - k * (k - 1) // 2 + k * (k + 1) * (m + 1) // 2 - k * (k + 1) * (m - 1) // 2\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    return str(int(n) - int(m) * (int(k) - 1) - int(k) + 1)"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    return 0"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_len = len(str(n))\n    for i in range(1, n_len+1):\n        if n % i!= 0:\n            for j in range(1, n_len+1):\n                for x in range(1, n_len+1):\n                    if n % x!= 0 and j % x == 0:\n                        break\n                if j % x!= 0:\n                    break\n            else:\n                return \"YES\\n{}\\n{}\".format(i, n // i)\n    return \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    if len(number) == 1:\n        return \"YES\"\n    if number[0] == \"0\":\n        return \"NO\"\n    for i in range(len(number)):\n        if number[i]!= \"0\":\n            break\n    else:\n        return \"YES\"\n    if len(number) - i < 3:\n        return \"NO\"\n    if len(number) - i > 3:\n        return \"NO\"\n    number1 = number[i:]\n    number2 = number1[:2]\n    number2 = int(number2)\n    number2 = number2 * 10\n    number2 += number1[2:]\n    number2 = str(number2)\n    number2 = int(number2)\n    if number2 % 8!= 0:\n        return \"NO\"\n    number = number[:i] + number2\n    if len(number) < 10:\n        number = \"0\" * (10 - len(number)) + number\n    return \"YES\" + number\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    while num % 8 == 0:\n        num //= 8\n    return f'YES\\n{num}' if num else 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = int(stdin) % 8\n    if result == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 8!= 0:\n        print('NO')\n        return\n    while n >= 8:\n        s = str(n)\n        if '0' in s:\n            print('NO')\n            return\n        if all(d == s[0] for d in s):\n            print('NO')\n            return\n        n = int(''.join(d for d in s if d!= s[0]))\n    print('YES')\n    print(n)\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        if n % 8 == 0:\n            return \"YES\"\n        n = n // 10\n    return \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    ans = 0\n    while n:\n        if n % 8 == 0:\n            ans = n\n            break\n        n //= 10\n    if ans:\n        return 'YES\\n' + str(ans)\n    return 'NO'\n    \n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    # don't print anything, this is just the skeleton of the function\n    # get the input\n    # if the input is valid, then answer will be \"YES\", otherwise answer will be \"NO\"\n    n = int(stdin)\n    l = []\n    d = [8,7,6,5,4,3,2,1]\n    if n == 0:\n        print(\"YES\")\n        print(0)\n    elif n % 8 == 0:\n        print(\"YES\")\n        print(n)\n    else:\n        print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    while len(n) > 0:\n        if n[0] == '0':\n            n = n[1:]\n        elif n[-1] == '0':\n            n = n[:-1]\n        else:\n            break\n    else:\n        print(\"NO\")\n        return\n    if int(n) % 8 == 0:\n        print(\"YES\")\n        print(n)\n    else:\n        print(\"NO\")\n\n\n\nsolution(input())"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"YES\" if n % 8 == 0 or any(n % int(d) == 0 for d in str(n)) else \"NO\"\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the floor number for n-th flat from the input.\n    '''\n    n, m = map(int, stdin.split())\n    floors = {i: set() for i in range(1, m + 1)}\n    for i in range(m):\n        floors[i + 1].add(tuple(map(int, stdin.split()[2 * i:2 * i + 2])))\n\n    # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0434\u0430\u043d\u0438\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043a\u043e\u043b-\u0432\u0443 \u043a\u0432\u0430\u0440\u0442\u0438\u0440:\n    floors_count = [0] * (m + 1)\n    for key in floors.keys():\n        floors_count[len(floors[key])] += 1\n\n    # \u0418\u0449\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n    for i in range(n, m + 1):\n        if floors_count[i] == 0:\n            return str(i)\n    return '-1'"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    floors = [map(int, stdin.readline().split()) for _ in range(m)]\n    freq = Counter(floor[1] for floor in floors)\n    common = freq.most_common(1)[0]\n    if not common[1] == 1:\n        return '-1'\n    return str(common[0])\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    floors = {}\n    for _ in range(m):\n        k, f = map(int, stdin.split(' '))\n        floors[k] = f\n    \n    for k, v in floors.items():\n        if k + 1 in floors:\n            if floors[k] == floors[k + 1]:\n                continue\n            return str(k + 1)\n    return str(-1)\n\n\ndef"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check(k, f):\n        return {f'{k} {f}': 1}\n    n, m = [int(n) for n in stdin.split(' ')]\n    result = set()\n    for _ in range(m):\n        result |= check(*[int(n) for n in stdin.split(' ')])\n    return f'-1' if len(result)!= 1 else [*result][0]"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the problem'''\n\n    # Get input\n    n, m = [int(i) for i in stdin.split('\\n')[0].split()]\n    if m == 0:\n        return 1\n    memory = []\n    for line in stdin.split('\\n')[1:]:\n        k, f = [int(i) for i in line.split()]\n        memory.append((k, f))\n\n    # Initialise storage\n    floor = {}\n    for k, f in memory:\n        if f not in floor:\n            floor[f] = 1\n        else:\n            floor[f] += 1\n\n    # Initialise variables\n    result = []\n    # Check every possible floor\n    for f in range(1, n + 1):\n        # If floor is not there, it can't be\n        if f not in floor:\n            result.append(-1)\n            continue\n        # Calculate number of flats\n        num = floor[f]\n        # Calculate how many floors there are\n        floors = (n - f + 1)\n        # Calculate how many \"floors\" are there (floor - 1)\n        floor_count = (n - f)\n        # Calculate number of floors we can't use (floor - 1)\n        floor_count_bad = floor[f] - 1\n        # Calculate number of \"floors\" we can't use (floor - 1)\n        floor_count_bad = floor[f] - 1\n        # If number of flats is even, all floors are ok\n        if num % 2 == 0:\n            result.append(f)\n            continue\n        # If number of floors is even, we can use all floors\n        if floors % 2 == 0:\n            result.append(f)\n            continue\n        # If number of floors is even and number of floors is odd, we can't use all floors\n        if floor_count % 2 == 1:\n            result.append(-1)\n            continue\n        # If number of floors is odd, and we can't use all floors, it's impossible\n        if floor_count_bad % 2 == 1:\n            result.append(-1)\n            continue\n        # If we can't use all floors, we have to check if we can use a different floor\n        if (num - 1) % 2 == 0:\n            result.append(f)\n            continue\n        # We can't use all floors, and we can't use a different floor, so it's impossible\n        result.append(-1)\n\n    return''.join([str(i) for i in result])\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(input()))\n\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split()[0]\n    numbers = stdin.split()[1:]\n    # create a list of tuples\n    floor_numbers = [int(floor.split()[0]) for floor in numbers]\n    flats_num = [int(floor.split()[1]) for floor in numbers]\n\n    # for each floor, count number of flats in ascending order\n    sorted_flats = []\n    for floor in floor_numbers:\n        floor_count = {}\n        for i, num in enumerate(floor_numbers):\n            if num == floor:\n                if num not in floor_count:\n                    floor_count[num] = 0\n                floor_count[num] += 1\n                sorted_flats.append((floor_count[num], floor))\n    # sort ascending order\n    sorted_flats.sort()\n\n    # check if we have more flats then needed\n    if len(sorted_flats) < int(number):\n        return '-1'\n\n    # iterate and check each floor\n    for i, flat in enumerate(sorted_flats):\n        if flat[1]!= i + 1:\n            return str(i + 1)\n\n\nprint(solution(input()))"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0XXX0\\n00000\")\n    2\n    \"\"\"\n    board = stdin.split(\"\\n\")\n    ans = 0\n    for line in board:\n        occ = [ch for ch in line if ch == \"0\"]\n        n = len(occ)\n        if n == 0:\n            continue\n        if n > ans:\n            ans = n\n    return ans\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_count, o_count = 0, 0\n    for s in stdin:\n        if s == 'X':\n            x_count += 1\n        else:\n            o_count += 1\n\n    return min(x_count, o_count)\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin.split()"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    \n    stdin_list = list(stdin)\n    \n    bishwock_list = list(\"XX\")\n    bishwock_list[1] = \"X\"\n    bishwock_list[3] = \"X\"\n    bishwock_list[0] = \".\"\n    bishwock_list[2] = \".\"\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bishwock_list = list(zip(*bishwock_list))\n    \n    bish"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def rotate90(arr):\n        return [list(reversed(line)) for line in zip(*arr)]\n    def rotate180(arr):\n        return rotate90(rotate90(arr))\n    def rotate270(arr):\n        return rotate180(rotate90(arr))\n    def mirror_h(arr):\n        return [line[::-1] for line in arr]\n    def mirror_v(arr):\n        return mirror_h(rotate90(arr))\n    def mirror_vh(arr):\n        return mirror_h(rotate180(arr))\n    def mirror_vhv(arr):\n        return mirror_h(rotate270(arr))\n\n    def mirror(arr):\n        return mirror_v(mirror_h(arr))\n    \n    def to_bin(s):\n        b = ''\n        for c in s:\n            if c == 'X':\n                b += '1'\n            else:\n                b += '0'\n        return b\n    \n    def to_dec(b):\n        s = 0\n        for c in b:\n            s = s * 2 + int(c)\n        return s\n    \n    def invert_b(b):\n        return ''.join('0' if c == '1' else '1' for c in b)\n\n    def flip_b(b):\n        return ''.join('0' if c == '1' else '1' for c in b)\n    \n    def to_int(l):\n        return int(to_bin(l), 2)\n    \n    def to_int_b(b):\n        return int(b, 2)\n\n    def add_int_b(a, b):\n        c = a + b\n        return to_bin(str(c))\n    \n    def to_b_diff(a, b):\n        return add_int_b(a, invert_b(b))\n    \n    def to_int_diff(a, b):\n        return to_dec(to_b_diff(a, b))\n\n    def apply_transformation(t, s):\n        return [to_int_b(to_b_diff(s, flip_b(to_bin(t))))]\n    \n    def apply_transformation_all(t, s):\n        return [to_int_diff(t, s)]\n\n    # return [to_int(l) for l in s]\n\n    # d_90 = {\n    #     to_int('11110'): to_int('11111'),\n    #     to_int('11110'): to_int('11101'),\n    #     to_int('11110'): to_int('11011'),\n    #     to_int('11110'): to_int('11001'),\n    #     to_int('11110'): to_int('10111'),\n    #     to_int('11110'): to_int('10110'),\n    #     to_int('11110'): to_int('10101'),\n    #     to_int('11110'): to_int('10100'),\n    #     to_int('11110'): to_int('11110'),\n    #     to_int('11110'): to_int('11010'),\n    #     to_int('11110'): to_int('11100'),\n    #     to_int('11110'): to_int('11110'),\n    #     to_int('11110'): to_int('11101'),\n    #     to_int('11110'): to_int('11111')\n    # }\n    # d_180 = {\n    #     to_int('11110'): to_int('11101'),\n    #     to_int('11110'): to_int('11011'),\n    #     to_int('11110'): to_int('11001'),\n    #     to_int('11110'): to_int('10111'),\n    #     to_int('11110'): to_int('10110'),\n    #     to_int('11110'): to_int('10101'),\n    #     to_int('11110'): to_int('10100'),\n    #     to_int('11110'): to_int('11110'),\n    #     to_int('11110'): to_int('11010'),\n    #     to_int('11110'): to_int('11100'),\n    #     to_int('11110'): to_int('11110'),\n    #     to_int('11110'): to_int('11111'),\n    #     to_int('11110'): to_int('11101')\n    # }\n    # d_270 = {\n    #     to_int('11110'): to_int('11101'),\n    #     to_int('11110'): to_int('11111'),\n    #     to_int('11110'): to_int('10111'),\n    #     to_int('11110'): to_int('10110'),\n    #     to_int('11110'): to_int('10101'),\n    #     to_int('11110'): to_int('10100'),\n    #     to_int('11110'): to_int('11110'),\n    #     to_int('11110'): to_int('11010'),\n    #     to_int('11110'): to_int('11100'),\n    #     to_int('11110'): to_int('11110'),\n    #     to_int('11110'): to_int('11101'),\n    #     to_int('11110'): to_int('11111')\n    # }\n\n    # def apply_transformation(t, s):\n    #     return d_90[to_int(s)], d_180[to_int(s)], d_270[to_int(s)], s\n\n    # def apply_transformation_all(t, s):\n    #     return d_90[to_int(s)], d_180[to_int(s)], d_270[to_int(s)], s\n\n    def apply_transformation_all(t, s):\n        s = apply_transformation(t, s)\n        s = apply_transformation(t, s)\n        s = apply_transformation(t, s)\n        return s\n\n    def apply_transformations(s, s_l):\n        r = []\n        for l in s_l:\n            t = 0\n            for m in range(1, len(l)):\n                if l[m]!= l[m - 1]:\n                    t += 1\n            r += apply_transformation_all(t, l)\n        return r\n    \n    s_l = [to_int(l) for l in stdin.split('\\n')]\n    s_l = [to_bin(str(s))"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *board = stdin.split('\\n')\n    n = int(n)\n    board = [line.split('0') for line in board]\n    \n    board_uniq = list(map(list, set(tuple(row) for row in board)))\n    board_uniq.sort(key=lambda x: len(x), reverse=True)\n    \n    print(board_uniq)\n    \n    def search(s: int, m: int) -> int:\n        for board in board_uniq:\n            if len(board) == 1:\n                s += m * len(board)\n                board_uniq.remove(board)\n                continue\n            \n            if len(board) == s:\n                return m * len(board)\n            elif s < len(board) <= s + m:\n                s += len(board)\n                board_uniq.remove(board)\n                continue\n                \n            for i in range(len(board) - m):\n                if board[i]!= board[i + m]:\n                    break\n                if i == len(board) - m - 1:\n                    s += m * len(board)\n                    board_uniq.remove(board)\n                    break\n            \n            \n    return max(search(0, 1), search(0, 2))\n\"\"\"\n\ndef"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"00X00X0XXX0\\n0XXX0X00X00\")\n    4\n    >>> solution(\"0X0X0\\n0X0X0\")\n    0\n    >>> solution(\"0X0X0\\n0XXX0\")\n    2\n    >>> solution(\"0X0X0\\n0X0X0X0X0X0\")\n    3\n    \"\"\"\n    return (\n        stdin.count(\"0\")\n        - sum(\n            [\n                (sum(row.count(\"X\") for row in chunk) if chunk else 0)\n                for chunk in chunks(stdin.splitlines())\n            ]\n        )\n    )\n    pass\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solve the problem\n    Input:    Strings of the same length that contain only symbols \"0\" and \"X\"\n    Output:   The maximum number of bishwocks that can be placed onto the board\n    \"\"\"\n    return\n\"\"\"\nThe first step is to reduce the problem to the case of finding a longest common substring. \nWe only need to find the longest common substring of the first and the second rows of the matrix. \nIn this case, we want to find the longest common substring of \"X0XXX0\" and \"0XXX0\". \nWe call this string the longest common prefix. \nIn the next step, we substitute all \"0\" with the character \".\" and call the resulting string a suffix. \nNow we want to find the longest common substring of the two suffixes. \nThe string we want is a substring of the longest common prefix and the longest common suffix. \nFinally, we reverse it and convert it to the desired input.\n\"\"\"\n\ndef"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We can reduce the problem to: How many bishwocks can we put in the first row?\n    \"\"\"\n    pawns_left = stdin.split('0')\n    length = len(pawns_left[0])\n    if length <= 1:\n        return length\n\n    return length - 1 - pawns_left[0].count('0') + pawns_left[1].count('0')\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    return stdin.lower().count('a')\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0438 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0442\u043e\u0447\u0435\u043a \u0432 \u0441\u0442\u0440\u043e\u043a\u0435:\n\n1. \u041d\u0430\u0431\u043e\u0440 \u0442\u043e\u0447\u0435\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 (i, j), \u0433\u0434\u0435 i \u0438 j \u2013 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u043e\u0447\u043a\u0438 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0438 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0442\u043e\u0447\u0435\u043a \u0432 \u0441\u0442\u0440\u043e\u043a\u0435:\n\n1. \u041d\u0430\u0431\u043e\u0440 \u0442\u043e\u0447\u0435\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 (i, j), \u0433\u0434\u0435 i \u0438 j \u2013 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u043e\u0447\u043a\u0438 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0438 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0442\u043e\u0447\u0435\u043a \u0432 \u0441\u0442\u0440\u043e\u043a\u0435:\n\n1. \u041d\u0430\u0431\u043e\u0440 \u0442\u043e\u0447\u0435\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 (i, j), \u0433\u0434\u0435 i \u0438 j \u2013 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u043e\u0447\u043a\u0438 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0438 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0442\u043e\u0447\u0435\u043a \u0432 \u0441\u0442\u0440\u043e\u043a\u0435:\n\n1. \u041d\u0430\u0431\u043e\u0440 \u0442\u043e\u0447\u0435\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 (i, j), \u0433\u0434\u0435 i \u0438 j \u2013 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u043e\u0447\u043a\u0438 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n2. \u041d\u0430\u0431\u043e\u0440 \u0442\u043e\u0447\u0435\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u0437 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 (i, j), \u0433\u0434\u0435 i \u0438 j \u2013 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0442\u043e\u0447\u043a\u0438 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442!\n\ndef"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    numbers = [i for i in range(n)]\n    temp = []\n    for i in range(n):\n        if s[i] == \"A\":\n            temp.append(i)\n    for i in range(n):\n        if s[i] == \"B\":\n            if i > 0 and i < n - 1:\n                if s[i - 1].islower() and s[i + 1].islower():\n                    temp.append(i)\n    numbers = temp\n    temp = []\n    for i in range(n):\n        if s[i] == \"a\":\n            temp.append(i)\n    for i in range(n):\n        if s[i] == \"b\":\n            if i > 0 and i < n - 1:\n                if s[i - 1].islower() and s[i + 1].islower():\n                    temp.append(i)\n    numbers = temp\n    temp = []\n    for i in range(n):\n        if s[i] == \"C\":\n            temp.append(i)\n    for i in range(n):\n        if s[i] == \"z\":\n            if i > 0 and i < n - 1:\n                if s[i - 1].islower() and s[i + 1].islower():\n                    temp.append(i)\n    numbers = temp\n    return len(numbers)\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    print(n, s)\n    return 0\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # use for loop\n    # use list comprehension\n    # or use regex\n    return None\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello, world!\"\n\"\"\"\n\nimport sys\nimport re\n\ndef"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # for _ in range(int(stdin.readline().strip())):\n    #     ans = 0\n    #     seq = list(map(int, stdin.readline().strip().split()))\n    #     b = seq[:int(len(seq)/2)]\n    #     c = seq[int(len(seq)/2):]\n    #     sum_b = sum(b)\n    #     sum_c = sum(c)\n    #     max_diff = max(sum_b - sum_c, sum_c)\n    #     ans = max(ans, max_diff)\n    # print(ans)\n    # return \"\"\n\n    pass\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A = [int(x) for x in stdin.split()]\n    ans = 0\n    B = 0\n    C = 0\n    for a in A:\n        b = a\n        if b > 0:\n            B += b\n        elif b < 0:\n            C += b\n    if B > C:\n        ans = B - C\n    return str(ans)\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    \n    # maxSubsequence = 0\n    # for i in range(len(seq)):\n    #     for j in range(i + 1, len(seq)):\n    #         if maxSubsequence < sum(seq[i:j]):\n    #             maxSubsequence = sum(seq[i:j])\n    # return maxSubsequence\n\n    subsequences = [0] * (n + 1)\n    subsequences[0] = 0\n    subsequences[1] = seq[0]\n    \n    for i in range(2, n + 1):\n        subsequences[i] = subsequences[i - 1] + seq[i - 1]\n        \n    maxSubsequence = subsequences[n]\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if maxSubsequence < subsequences[j] - subsequences[i]:\n                maxSubsequence = subsequences[j] - subsequences[i]\n    \n    return maxSubsequence\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = list(map(int, stdin.split(' ')))\n    n = input_numbers[0]\n    input_numbers = input_numbers[1:]\n    \n    sub_arrays = []\n    \n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            sub_arrays.append(input_numbers[i:j])\n    \n    max_diff = 0\n    \n    for sub_array in sub_arrays:\n        sum_of_sub_array = sum(sub_array)\n        \n        if sum_of_sub_array == 0:\n            continue\n        \n        else:\n            current_diff = sub_array[0] * sub_array[-1]\n            if current_diff > max_diff:\n                max_diff = current_diff\n    \n    return max_diff\n    \n    \ndef"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # x = sum(list(map(int, stdin.split())))\n    # if x % 2 == 0:\n    #     return x // 2\n    # else:\n    #     return max(x//2, x//2 + 1)\n    x = sum(list(map(int, stdin.split())))\n    if x % 2 == 0:\n        return x // 2\n    else:\n        return max(x//2, x//2 + 1)\n\nprint(solution('16 23 16 15 42 8'))"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    a = sorted(arr)\n    b = a[0::2]\n    c = a[1::2]\n    sum1 = 0\n    sum2 = 0\n    if len(b) == 1:\n        sum1 = sum(b)\n    else:\n        sum1 = sum(b)\n        for i in range(len(b)-1):\n            sum1 += b[i+1] - b[i]\n    if len(c) == 1:\n        sum2 = sum(c)\n    else:\n        sum2 = sum(c)\n        for i in range(len(c)-1):\n            sum2 += c[i+1] - c[i]\n    print(sum1 + sum2)\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b, c = [], []\n    for i in range(n):\n        if a[i] > 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    if len(b) == 0:\n        b = [0]\n    if len(c) == 0:\n        c = [0]\n    b.sort()\n    c.sort()\n    max_value = 0\n    for i in range(len(b)):\n        max_value += b[i]\n    for i in range(len(c)):\n        max_value += c[i]\n    print(max_value)\n    return \"\""
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n\n    max_sum = 0\n    tmp_sum = 0\n    \n    for i in a:\n        if i > 0:\n            tmp_sum += i\n            max_sum = max(max_sum, tmp_sum)\n        else:\n            tmp_sum = 0\n\n    print(max_sum)\n    return ''\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split()]\n    t = a * f // b\n    if t < k:\n        return -1\n    if k <= t % (a - f):\n        return t // (a - f)\n    else:\n        return t // (a - f) + 1\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(n)\n    space: O(n)\n    '''\n    a, b, f, k = [int(num) for num in stdin.split(' ')]\n    if k == 1:\n        return str(0 if a <= f else -1)\n    sum = 0\n    if b < f:\n        sum += 1\n        b = f\n    while k > 1:\n        sum += (k - 1) // b\n        k = (k - 1) % b + 1\n    if k == 0:\n        return str(sum)\n    return str(-1)\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and returns the solution.\"\"\"\n    data = stdin.split()\n    a = int(data[0])\n    b = int(data[1])\n    f = int(data[2])\n    k = int(data[3])\n    return str(bus_journeys(a, b, f, k))\n\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, k = stdin.strip().split(' ')\n    x, y, k = int(x), int(y), int(k)\n    a = 0\n    b = x\n    m = 0\n    while a < b:\n        m += 1\n        a = b\n        b = a + x\n        if m == k:\n            return str(m)\n    return '-1'\n\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split(' ')]\n    if f < a or f > b:\n        return -1\n    return k // (a - f)\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    d = f - a\n    # refills = d // (b - a)\n    if d % (b - a)!= 0:\n        return -1\n    refills = d // (b - a)\n    if k < refills:\n        return -1\n    return refills - k\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(c) for c in stdin.split(' ')]\n    return '-1' if k > a // f else (k * b - a) // (f - a)\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split(' ')]\n    if a < b:\n        if a < f < b:\n            k = max(0, k)\n            n = 0\n            for i in range(k):\n                x = min(a, f)\n                n += 1\n                if x == a:\n                    a = max(0, a - x)\n                elif x == f:\n                    f = max(0, f - x)\n                if b < a or b < f:\n                    n = -1\n                    break\n            print(n)\n        else:\n            print(-1)\n    else:\n        print(-1)\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if a > f:\n        a, b, f = f, a, b\n    if a == f:\n        if k == 1:\n            return 0\n        else:\n            return -1\n\n    distance = b - a\n    if distance % (f - a)!= 0:\n        return -1\n\n    else:\n        if k == 1:\n            return distance // (f - a)\n        else:\n            return (distance // (f - a)) * 2\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin[:-1]\n    if n == p:\n        return str(1)\n    if n == q:\n        return str(1)\n    count = 0\n    if n % p == 0:\n        count += n // p\n    else:\n        count += n // p + 1\n    if n % q == 0:\n        count += n // q\n    else:\n        count += n // q + 1\n    if count == 0:\n        return str(-1)\n    return str(count)\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal in this problem is to split the string s into as many parts as possible so that each letter appears in at most one part.\n    This is called the \"generalized anagram\" problem, because each part is supposed to contain all the letters from the original string, but not necessarily in the same order.\n\n    Our solution will split the string s into as many parts as possible so that each letter appears in at most one part.\n    The letters in each part will have the same frequency of occurrences.\n    \"\"\"\n    # n, p, q = [int(i) for i in stdin.readline().split()]\n    n, p, q = (int(i) for i in stdin.readline().split())\n\n    # s = stdin.readline().strip()\n    s = stdin.readline().strip()\n\n    # Write your code here\n    s_len = len(s)\n\n    if p * q > s_len:\n        return '-1'\n\n    ans = 0\n    for i in range(p):\n        freq = {}\n        freq_len = {}\n        for j in range(i, s_len, p):\n            c = s[j]\n            if c in freq:\n                freq[c] += 1\n                freq_len[c] = max(freq_len.get(c, 0), freq[c])\n            else:\n                freq[c] = 1\n                freq_len[c] = freq.get(c, 0)\n        # print(freq)\n        # print(freq_len)\n        for j in range(i, s_len, p):\n            c = s[j]\n            if freq[c] == 1 or freq_len[c] == 1:\n                freq.pop(c)\n                freq_len.pop(c)\n\n        if len(freq) == 0:\n            ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, p, q = stdin.split()\n    s = list(s)\n    print(p, q)\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, p, q = [int(el) for el in stdin.split()]\n    if (p == 1 and q == 1) or n < p or n < q:\n        print(-1)\n    else:\n        print(n // p)\n        for i in range(0, n - p + 1):\n            print(s[i:i + p])\n    return ''\n\n\ndef"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(x) for x in stdin.split()]\n    n = int(n)\n    p = int(p)\n    q = int(q)\n\n    if p == 1 or q == 1:\n        if n > p and n > q:\n            return -1\n        else:\n            return n // p + n // q\n\n    n_str = []\n    if p * q >= n:\n        n_str.append(n // p)\n        n_str.append(n // q)\n    else:\n        n_str.append(n // q)\n        n_str.append(n // p)\n\n    n = n % p\n    if n:\n        n_str.append(n)\n\n    n_str = [str(x) for x in n_str]\n    return '\\n'.join(n_str)\n\n\ndef"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin[n + 1 :]\n    if len(s) < p:\n        print(1)\n        return [s]\n    result = []\n    for i in range(len(s) - p + 1):\n        result.append(s[i : i + p])\n    if len(s) - p < q:\n        print(len(result))\n        return result\n    for i in range(len(s) - p - q + 1):\n        result.append(s[i : i + q])\n    print(len(result))\n    return result\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length, p, q = [int(x) for x in stdin.split(' ')]\n    print(length, p, q)\n    return ''\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, m, s, d = [int(x) for x in stdin.split(' ')]\n    routes = [int(x) for x in stdin.split('\\n')[:-1]]\n\n    if m - s - d < routes[0]:\n        return \"IMPOSSIBLE\"\n\n    if m - s - d == 0:\n        return \"JUMP 0\"\n\n    if m - s - d == 1:\n        return \"RUN 1\"\n\n    if m - s - d == 2:\n        return \"RUN 2\"\n\n    if m - s - d > 2:\n        return \"IMPOSSIBLE\"\n\n    if m - s - d == 3:\n        if routes[0] <= m - s:\n            return \"RUN 1\"\n        else:\n            return \"RUN 2\"\n\n    if m - s - d == 4:\n        return \"JUMP 2\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n, m, s, d = map(int, stdin.readline().split())\n    # a = [int(x) for x in stdin.readline().split()]\n\n    n, m, s, d = map(int, stdin.readline().split())\n    a = [int(x) for x in stdin.readline().split()]\n    \n\n    # your code here\n    return \"IMPOSSIBLE\"\n    # return \"\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(i) for i in stdin.split()]\n    x_arr = [int(i) for i in stdin.split()]\n\n    return \"\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 10 1 3\\n3 4 7\")\n    RUN 2\n    JUMP 3\n    RUN 1\n    JUMP 2\n    RUN 2\n    \"\"\"\n    n, m, s, d = [int(i) for i in stdin.split()]\n    if m < s + d:\n        return \"IMPOSSIBLE\"\n    obstacles = [int(i) for i in stdin.split()[1:]]\n    start = 0\n    finish = m\n    out = []\n    while True:\n        if start in obstacles:\n            obstacles.remove(start)\n            finish += 1\n        if start > finish:\n            return \"\\n\".join(out)\n        if finish >= m:\n            break\n        out.append(\"RUN {}\".format(start))\n        start += s\n        finish += s\n    while True:\n        if finish in obstacles:\n            obstacles.remove(finish)\n            start -= 1\n        if start < 0:\n            break\n        if start not in obstacles:\n            out.append(\"JUMP {}\".format(start))\n            start -= d\n    return \"\\n\".join(out)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n)\n    space: O(n)\n    \"\"\"\n    n, m, s, d = map(int, stdin.split(' '))\n    obstacles = set(map(int, stdin.split('\\n')[1:]))\n    obstacles.remove(0)\n\n    frontier = deque([(0, 0)])\n    history = {0}\n    for _ in range(n):\n        next_obstacles = set()\n        while frontier:\n            x, t = frontier.popleft()\n            if x == m:\n                return \"JUMP {}\\nJUMP {}\\nJUMP {}\\nRUN {}\".format(*[x - m for x, t in frontier])\n            if t + s > d:\n                continue\n            for d_jump in range(1, d + 1):\n                jump_x = x + d_jump\n                if jump_x in obstacles:\n                    break\n                next_obstacles.add(jump_x)\n        frontier = deque(sorted(next_obstacles))\n        history.update(next_obstacles)\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count_of_obstacles, finish_point, distance_before_jump, max_jump_length = list(map(int, stdin.split(' ')))\n    obstacles = list(map(int, stdin.split(' ')))\n    count_of_obstacles_ranges = range(obstacles[0], obstacles[-1] + 1)\n\n    count_of_jumps = 0\n    count_of_jumps_ranges = range(1, max_jump_length + 1)\n\n    for count_of_obstacles in count_of_obstacles_ranges:\n        if count_of_obstacles < finish_point:\n            continue\n        elif count_of_obstacles == finish_point:\n            return \"IMPOSSIBLE\"\n\n        for count_of_jumps in count_of_jumps_ranges:\n            if count_of_obstacles == finish_point:\n                return \"JUMP \" + str(count_of_jumps)\n            elif count_of_obstacles + count_of_jumps > finish_point:\n                continue\n\n            count_of_jumps_ranges = range(count_of_jumps, max_jump_length + 1)\n            break\n\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 10 1 3\n   ... 3 4 7\n   ... ''')\n    'RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\\nRUN 2\\n'\n    >>> solution('''2 9 2 3\n   ... 6 4\n   ... ''')\n    'IMPOSSIBLE'\n    \"\"\"\n    n, m, s, d = map(int, stdin.split('\\n')[0].split())\n    obstacles = [int(i) for i in stdin.split('\\n')[1].split()]\n    obstacles.sort()\n    x = 0\n    jumps = 0\n    distance = 0\n    while x <= m:\n        if x == m:\n            break\n        if x not in obstacles:\n            distance += 1\n            if distance > s:\n                distance = 0\n                if x + d < m:\n                    x += d\n                    distance = 0\n                    jumps += 1\n                else:\n                    break\n        else:\n            x = obstacles[obstacles.index(x) + 1]\n    if x!= m:\n        return 'IMPOSSIBLE'\n    else:\n        ans = []\n        for i in range(jumps):\n            ans.append('JUMP'+ str(jumps))\n        for i in range(m - jumps - s, -1, -s):\n            ans.append('RUN'+ str(i))\n        return '\\n'.join(ans)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, s, d = [int(i) for i in stdin.split()]\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    print(x)\n    r = 'IMPOSSIBLE'\n    for i in range(n - 1):\n        if x[i + 1] - x[i] < s:\n            r = 'IMPOSSIBLE'\n            break\n    print(r)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # total number of commands\n    n, m, s, d = [int(n) for n in stdin.split()]\n    # set obstacles\n    obstacles = [int(n) for n in stdin.split()]\n    # dict of all coordinates\n    obstacles = {i: j for i, j in enumerate(obstacles)}\n\n    # return true if we can get to the finish point\n    def solve(n, m, s, d, obstacles):\n        # initialize variables\n        x = 0\n        y = 0\n        jump_count = 0\n        jump = False\n        run = True\n        i = 0\n        # while we can still run or are still jumping\n        while run or jump:\n            # if we can run\n            if i < n:\n                # if we can run this far\n                if x + s >= m:\n                    # we can run to the finish point\n                    if (m - x) % d == 0 and y == 0:\n                        run = False\n                        break\n                    else:\n                        # try to run to the finish point\n                        x = m\n                else:\n                    # try to run this far\n                    x = x + s\n                i += 1\n            # if we can jump\n            elif i == n:\n                if jump_count == d:\n                    if jump:\n                        # we are jumping but can't jump anymore\n                        return False\n                    else:\n                        # we are just jumping\n                        if (x + y) % d == 0 and y == 0:\n                            # we can jump to finish point\n                            y = m - x\n                        else:\n                            # try to jump this far\n                            y = s\n                        i = 0\n                        jump = True\n                        jump_count = 0\n                else:\n                    # try to jump\n                    jump_count += 1\n                    if (x + y) % d == 0 and y == 0:\n                        # we can jump to finish point\n                        y = m - x\n                    else:\n                        # try to jump this far\n                        y = s\n                    i = 0\n            # if we can run\n            if i < n:\n                # if we can run this far\n                if x + s >= m:\n                    # we can run to the finish point\n                    if (m - x) % d == 0 and y == 0:\n                        run = False\n                        break\n                    else:\n                        # try to run to the finish point\n                        x = m\n                else:\n                    # try to run this far\n                    x = x + s\n                i += 1\n            # if we can jump\n            elif i == n:\n                if jump_count == d:\n                    if jump:\n                        # we are jumping but can't jump anymore\n                        return False\n                    else:\n                        # we are just jumping\n                        if (x + y) % d == 0 and y == 0:\n                            # we can jump to finish point\n                            y = m - x\n                        else:\n                            # try to jump this far\n                            y = s\n                        i = 0\n                        jump = True\n                        jump_count = 0\n                else:\n                    # try to jump\n                    jump_count += 1\n                    if (x + y) % d == 0 and y == 0:\n                        # we can jump to finish point\n                        y = m - x\n                    else:\n                        # try to jump this far\n                        y = s\n                    i = 0\n        return True\n\n    if solve(n, m, s, d, obstacles) is False:\n        print(\"IMPOSSIBLE\")\n    else:\n        # print all possible ways of jumping\n        # and then running\n        jumps = []\n        x = 0\n        y = 0\n        jump_count = 0\n        jump = False\n        run = True\n        i = 0\n        while run or jump:\n            # if we can run\n            if i < n:\n                # if we can run this far\n                if x + s >= m:\n                    # we can run to the finish point\n                    if (m - x) % d == 0 and y == 0:\n                        run = False\n                        break\n                    else:\n                        # try to run to the finish point\n                        x = m\n                else:\n                    # try to run this far\n                    x = x + s\n                i += 1\n            # if we can jump\n            elif i == n:\n                if jump_count == d:\n                    if jump:\n                        # we are jumping but can't jump anymore\n                        return False\n                    else:\n                        # we are just jumping\n                        if (x + y) % d == 0 and y == 0:\n                            # we can jump to finish point\n                            y = m - x\n                        else:\n                            # try to jump this far\n                            y = s\n                        i = 0\n                        jump = True\n                        jump_count = 0\n                else:\n                    # try to jump\n                    jump_count += 1\n                    if (x + y) % d == 0 and y == 0:\n                        # we can jump to finish point\n                        y = m - x\n                    else:\n                        # try to jump this far\n                        y = s\n                    i = 0\n            # if we can run\n            if i < n:\n                # if we can run this far\n                if x + s >= m:\n                    # we can run to the finish point\n                    if (m - x) % d == 0 and y == 0:\n                        run = False\n                        break\n                    else:\n                        # try to run to the finish point\n                        x = m\n                else:\n                    # try to run this far\n                    x = x + s\n                i += 1\n            # if we can jump\n            elif i == n:\n                if jump_count == d:\n                    if jump:\n                        # we are jumping but can't jump anymore\n                        return False\n                    else:\n                        # we are just jumping\n                        if (x + y) % d == 0 and y == 0:\n                            # we can jump to finish point\n                            y = m - x\n                        else:\n                            # try to jump this far\n                            y = s\n                        i = 0\n                        jump = True\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(i) for i in stdin.strip().split(\" \")]\n    obstacles = [int(i) for i in stdin.strip().split(\" \")]\n    obstacles.sort()\n    res = []\n    for i in range(n):\n        x, y = obstacles[i], obstacles[i+1]\n        if y - x < s + 1:\n            res.append(x)\n    if res:\n        if res[0]!= m:\n            res.append(m)\n        if res[-1] < m:\n            res.append(m)\n        res.sort()\n        if obstacles[0]!= res[0] or obstacles[-1]!= res[-1]:\n            return \"IMPOSSIBLE\"\n        for i in range(1, len(res) - 1):\n            if res[i] - obstacles[i-1] < d + 1:\n                return \"IMPOSSIBLE\"\n        result = []\n        for i in range(len(res) - 1):\n            result.append(\"RUN \" + str(res[i+1] - res[i]) if res[i+1] - res[i] < s + 1 else \"JUMP \" + str(res[i+1] - res[i]))\n        return '\\n'.join(result)\n    else:\n        return \"IMPOSSIBLE\"\n        \n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\ndef"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nS, X = map(int, sys.stdin.readline().split())\n\nsols = 0"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(bin(a ^ b).count(\"1\"))\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 1\n    if a == 1:\n        return 2 ** b - 1\n    if b == 1:\n        return 1\n    return 2 ** (a - 1) * 2 ** (b - 1) - (2 ** (a - 2))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    print(s - x)"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns number of solutions to the given conditions.\"\"\"\n    (s, x) = [int(i) for i in stdin.split()]\n    if s == 1:\n        return 0\n    elif s == 2:\n        return 1\n    else:\n        return s - 1 - (s & x)\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    ans = 0\n    for i in range(2 ** s):\n        if x ^ i == 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ns, x = map(int, stdin.split())\ns = bin(s)[2:]\nn = len(s)\n\nf = [[0]*(n+1) for _ in range(n+1)]\nfor l in range(1, n+1):\n    for i in range(n-l+1):\n        f[i][i+l] = f[i+1][i+l] + (1 if s[i]!= s[i+l-1] else 0)\n\nprint(f[0][n])"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, s, x = map(int, stdin.split())\n    total_solutions = 0\n    for a in range(1, s):\n        for b in range(a+1, s):\n            if (a + b) == s and x ^ (a + b) == x:\n                total_solutions += 1\n    if total_solutions == 0:\n        print(0)\n    else:\n        print(total_solutions)\n    return \"\"\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, x = [int(x) for x in stdin.split(\" \")]\n    print(2 ** s - 1 - x) if x < 2 ** s - 1 else print(0)\n    return \"\"\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input in format specified in the example\n    :return: solution string\n    \"\"\"\n   ...\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n\n    min_moves = 0\n    for i in range(1, n + 1):\n        moves = 0\n        for j in range(-k, k + 1):\n            if j == 0:\n                continue\n            if i + j < 1 or i + j > n:\n                continue\n            moves += 1\n        min_moves = max(min_moves, moves)\n    return str(min_moves)\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(' '))\n    res = 0\n    for i in range(1, N + 1):\n        if not res:\n            for k in range(1, K + 1):\n                if i - k < 1:\n                    break\n                elif i - k >= N:\n                    break\n                else:\n                    res = 1 + res\n        else:\n            for k in range(1, K + 1):\n                if i - k >= N:\n                    break\n                elif i - k < 1:\n                    break\n                else:\n                    res = 1 + res\n    print(res)\n    print(*[i for i in range(1, N + 1) if res % 2])\n\n    return ''\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    res = []\n    for i in range(1, n + 1):\n        if i < k:\n            res.append(1)\n        elif i > n - k:\n            res.append(n - i + 1)\n        else:\n            res.append(min(abs(i - k), n - i + 1 + k - 1))\n    return''.join(map(str, res))\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    print(sum(min(abs(n-i), k) for i in range(1, n+1)))\n    print(*[i for i in range(1, n+1) if sum(min(abs(n-i), k) for i in range(1, n+1))])"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(len(min(n, k))) + '\\n' + '\\n'.join(str(x) for x in range(1, n + 1))\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    skewers = [0 for _ in range(n + 1)]\n\n    for i in range(n):\n        skewers[i + 1] = i - k + 1\n\n    skewers[n] = n\n    skewers[0] = n + 1\n\n    q = [0 for _ in range(n + 1)]\n    for i in range(n):\n        q[i] = i - k + 1\n\n    q[n] = n\n    q[0] = n + 1\n\n    l = 0\n    minim = []\n    for i in range(n + 1):\n        if q[i] < skewers[i]:\n            l += 1\n            minim.append(i)\n        else:\n            while q[i] >= skewers[i]:\n                q[i] = q[i] - skewers[i]\n                l += 1\n                if q[i] < skewers[i]:\n                    minim.append(i)\n                    break\n\n    return l\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    skewers = [i for i in range(1, n + 1)]\n    turns = {i: [] for i in range(1, n + 1)}\n    for i in range(k, n + 1):\n        turns[i] = [i - k, i + k]\n    current = k\n    while skewers:\n        skewer = skewers.pop(0)\n        left, right = turns[skewer]\n        while left in skewers:\n            turns[skewer].append(left)\n            skewers.remove(left)\n            left = turns[left][0]\n        while right in skewers:\n            turns[skewer].append(right)\n            skewers.remove(right)\n            right = turns[right][1]\n    return str(len(turns[1])) + '\\n' +''.join(map(str, turns[1]))\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = [int(x) for x in stdin.split()]\n    k %= n\n    l = 0\n    cnt = 0\n    for i in range(n):\n        cnt += (i + 1 - k) % n\n    l = cnt\n    print(l)\n    l = [str(i + 1) for i in range(n) if (i + 1 - k) % n == l]\n    return''.join(l)"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = sorted(range(1, n + 1), key=lambda i: abs(i - ((i - k) % (n - i + 1))))\n    print(len(a))\n    print(' '.join([str(x) for x in a]))\n    return ''"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \" \""
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    x = int(n)\n    count = 0\n    while x!= 0:\n        if x % 10!= 0:\n            if x % (x % 10) == 0:\n                count += 1\n                x = x // 10\n            else:\n                break\n        else:\n            count += 1\n            x = x // 10\n    if x == 0:\n        if count % 2 == 0:\n            return str(count // 2)\n        else:\n            return \"-1\"\n    else:\n        return \"impossible\"\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 9 == 0 or n % 8 == 0:\n        print(0)\n        return\n    while n > 1:\n        if n % 9 == 0 or n % 8 == 0:\n            print(1)\n            return\n        else:\n            n = n - (n % 9) - (n % 8)\n            n = n // 9\n    print(-1)\n\n\nsolution(input())\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    while n!= 1:\n        if n % 10 == 1:\n            ans += 1\n            n /= 10\n        else:\n            n = int(str(n)[:-1])\n            ans += 1\n    if n == 1:\n        return str(ans)\n    else:\n        return '-1'"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_runner(stdin))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if not 1 <= n <= pow(10, 9):\n        return '-1'\n    i = 1\n    while i ** 2 < n:\n        if n % i == 0:\n            return str(i - n // i)\n        i += 1\n    return '-1'\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    squares = set()\n    n_sqrt = n ** 0.5\n    if n_sqrt % 1!= 0:\n        return '-1'\n    n_sqrt = int(n_sqrt)\n    for i in range(1, n_sqrt + 1):\n        if n % i == 0:\n            squares.add(i ** 2)\n            squares.add(n // i ** 2)\n    squares.discard(n)\n    if squares:\n        return str(min(squares))\n    else:\n        return '-1'\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [i for i in range(1, n + 1)]\n    lst_s = [str(i) for i in range(1, n + 1)]\n    gcd = list()\n    while len(lst) > 1:\n        lst_s.remove(lst[0])\n        lst_s.remove(lst[1])\n        for i in range(2, len(lst)):\n            if gcd.__contains__(int(lst_s[i])):\n                continue\n            else:\n                if int(lst_s[0]) % int(lst_s[i]) == 0:\n                    gcd.append(int(lst_s[i]))\n        lst.pop(0)\n        lst.pop(0)\n        lst_s.append(lst[0])\n        lst_s.append(lst[1])\n        gcd.clear()\n    for i in range(1, n + 1):\n        gcd.append(i)\n    lst_s.remove(gcd[0])\n    lst_s.remove(gcd[1])\n    count = 0\n    for i in range(2, n + 1):\n        if gcd.__contains__(i):\n            count += 1\n    result = (count * (n - 1)) % 1000000007\n    print(result)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n+1):\n        ans += (n // i) * i * i\n    return str(ans % 1000000007)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip('\\n'))\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = sum(dp[j] for j in range(1, i) if gcd(i, j) == 1)\n    print(dp[-1] % 1000000007)\n    return ''\n\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We know that the maximum value of $f_{max}(n)$ is equal to the sum of the greatest common divisors of all possible prefixes.\n    So we can iterate over prefixes, calculate GCDs, and store them in a dictionary.\n    \"\"\"\n    d = {}\n    for k in range(2, len(stdin) + 1):\n        # Calculate GCD for all prefixes\n        p = 1\n        for i in range(1, k):\n            p = gcd(p, int(stdin[:i]))\n        d[k] = p\n\n    # Compute the sum of GCDs and print its remainder\n    return sum(d.values()) % (10 ** 9 + 7)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return \"\"\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline())\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution: O(n) time, O(1) space\"\"\"\n    #\n    # Your code here\n    #\n    n = int(stdin)\n    count = 0\n    for k in range(1, n + 1):\n        count += (n - k) * (k - 1) // 2\n    return str(count % (10 ** 9 + 7))\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    result = 0\n    for i in range(len(string)):\n        if string[i] == 'A':\n            result += 1\n        elif string[i] == 'E':\n            result += 1\n        elif string[i] == 'I':\n            result += 1\n        elif string[i] == 'O':\n            result += 1\n        elif string[i] == 'U':\n            result += 1\n        elif string[i] == 'Y':\n            result += 1\n        else:\n            result += 2\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'AEIOUY'\n    stdin = list(stdin)\n    current = stdin.pop()\n    result = 1\n    while len(stdin) > 0:\n        if stdin[-1] in vowels:\n            current += stdin.pop()\n        else:\n            current = stdin.pop()\n        result += 1\n    return result"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n    \"\"\"\n    print(max(1, len(stdin) - sum(map(lambda x: x == \"A\", stdin)) - 1))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return 1\n    for i in range(1, len(stdin)):\n        if stdin[i] not in ['A', 'E', 'I', 'O', 'U', 'Y']:\n            return i\n    return len(stdin)\n\ndef"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"AEIOUY\"\n    print(len([c for c in stdin if c in vowels]))\n    return 0\n\n\nsolution(\"ABABBBACFEYUKOTT\")\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    for i in range(len(stdin) - 1, 0, -1):\n        stdin = stdin.replace(stdin[i], '')\n    return len(stdin)\nprint(solution('ABABBBACFEYUKOTT'))\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        # merge overlapping intervals\n        intervals.sort(key=lambda x: x[1])\n        n = len(intervals)\n        curr_end = intervals[0][1]\n        res = 1\n        for i in range(1, n):\n            if intervals[i][0] >= curr_end:\n                res += 1\n                curr_end = intervals[i][1]\n        return n - res\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ABABBBACFEYUKOTT\")\n    4\n    >>> solution(\"AAA\")\n    1\n    \"\"\"\n    return max(stdin.count(chr(i)) for i in range(97, 97 + 26))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] not in 'AIEOUY':\n            stdin = stdin.replace(stdin[i],'')\n    return len(stdin.split())\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    number_of_candies = [int(i) for i in stdin.split()]\n    \n    return \"YES\" if sum(number_of_candies) % 2 == 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    return \"YES\" if sum(a) % 3 == 0 and sum(a) // 3 * 2 == a[0] + a[2] else \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to this problem that uses pythonic list comprehension.\n    \"\"\"\n    # get input from stdin\n    [a1, a2, a3, a4] = [int(x) for x in stdin.split()]\n    # check if we can distribute it using just one bag\n    if [a1, a2, a3, a4].count(max(a1, a2, a3, a4)) == 1:\n        return \"YES\"\n    # check if we can distribute it using two bags\n    if [a1, a2, a3, a4].count(max(a1, a2, a3, a4)) == 2:\n        return \"YES\"\n    # otherwise, return no\n    return \"NO\"\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    return \"YES\" if a + b == c + d or a + c == b + d or b + c == a + d else \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = [int(i) for i in stdin.split(' ')]\n    return 'YES' if a1 == a3 or a2 == a4 else 'NO'\n\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\" if stdin == \"NO\" else \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = [int(i) for i in stdin.split()]\n    return \"YES\" if (a1 + a3) % 2 == (a2 + a4) % 2 else \"NO\"\n\n\nprint(solution(\"1 7 11 5\"))\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a + b == c + d:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\""
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split()))\n    sum_A, sum_B = A + B, C + D\n    if sum_A!= sum_B:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    size_of_slices = [int(s) for s in stdin.split(\"\\n\")[0].split()]\n    decider = 1\n    \n    for i, size in enumerate(size_of_slices):\n        if size == 0:\n            decider = i + 1\n    \n    return f\"{sum(size_of_slices[decider:]):,}\\n{sum(size_of_slices[:decider]):,}\"\n\"\"\"\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    slices = [int(x) for x in stdin.split()]\n    decider = slices.pop()\n    alice = 0\n    bob = 0\n    while len(slices) > 0:\n        if decider == 1:\n            bob += slices.pop()\n        else:\n            alice += slices.pop()\n    return str(alice) +'' + str(bob)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sizes = list(map(int, stdin.split(\"\\n\")[1:]))\n    alice = []\n    bob = []\n    decider = 0\n    while len(sizes) > 0:\n        if decider == 0:\n            alice.append(sizes[0])\n            sizes = sizes[1:]\n            decider = 1\n        elif decider == 1:\n            bob.append(sizes[0])\n            sizes = sizes[1:]\n            decider = 0\n    # print(alice, bob)\n    return f\"{sum(alice)}\\n{sum(bob)}\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = stdin\n    n = int(sys.stdin.readline().rstrip())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    b = list(map(int, sys.stdin.readline().rstrip().split()))\n    while len(a) > 0:\n        if len(b) == 0:\n            break\n        a[0] -= min(b[0], a[0])\n        if a[0] <= 0:\n            b.pop(0)\n            a.pop(0)\n        else:\n            b[0] -= a[0]\n            a[0] = 0\n    return \" \".join(map(str, [sum(a), sum(b)]))\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    b = len(a)\n    alice = 0\n    bob = 0\n    for i in range(0,b,2):\n        if a[i] >= a[i+1]:\n            alice += a[i+1]\n            a.remove(a[i+1])\n        else:\n            bob += a[i]\n            a.remove(a[i])\n    print(alice,bob)\n    return \"\"\n    \n\"\"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pie_sizes = stdin.split('\\n')\n    alice_eat = 0\n    bob_eat = 0\n    \n    alice_pie_sizes = pie_sizes.pop(0).split()\n    bob_pie_sizes = pie_sizes.pop(0).split()\n    alice_left = list(alice_pie_sizes)\n    bob_left = list(bob_pie_sizes)\n    alice_left.sort(reverse=True)\n    bob_left.sort(reverse=True)\n    \n    while len(alice_left)>0 and len(bob_left)>0:\n        if alice_left[0]>bob_left[0]:\n            alice_eat += bob_left.pop(0)\n            alice_left.pop(0)\n        else:\n            bob_eat += alice_left.pop(0)\n            bob_left.pop(0)\n            \n    print(alice_eat, bob_eat)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sol(x) for x in stdin.split('\\n'))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(sum(int(x) for x in stdin.split()[1::2])), str(sum(int(x) for x in stdin.split()[::2]))])\n\"\"\"\n\nimport os\nimport sys\nimport re\nimport functools\nfrom typing import List, Dict, Tuple, Set\n\n\nclass Solution:\n    def solve(self, n: int, stdin: List[str]) -> Tuple[str, str]:\n        # parse the input\n        nums = []\n        for s in stdin:\n            nums.append(tuple(int(x) for x in re.findall(r'\\d+', s)))\n        # print(nums)\n\n        # do the calculation\n        alice = sum(nums[0::2])\n        bob = sum(nums[1::2])\n        return f'{alice}\\n{bob}'\n\n\ndef"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 3 6 8\")\n    2\n    >>> solution(\"6\\n2 4 8 6 10 18\")\n    3\n    \"\"\"\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n\n    pre = 0\n    res = 0\n    for i in range(1, N + 1):\n        cur = pre + A[i - 1]\n        if cur == A[i - 1]:\n            continue\n        res += 1\n        pre = cur\n    if res == 0:\n        print(-1)\n    else:\n        print(res)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimal number of variables to perform the sequence of operations.\"\"\"\n    n = int(stdin)\n    nums = [int(n) for n in stdin.split()]\n\n    cache = {}\n    def dp(i):\n        if i in cache:\n            return cache[i]\n        result = 1\n        for x in range(1, i + 1):\n            result = min(result, dp(x) + dp(i - x))\n        cache[i] = result\n        return result\n\n    return dp(n) - 1 if dp(n) <= n else -1\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"5\n   ... 1 2 3 6 8\n   ... \"\"\")\n    2\n    >>> solution(\"\"\"3\n   ... 3 6 5\n   ... \"\"\")\n    -1\n    >>> solution(\"\"\"6\n   ... 2 4 8 6 10 18\n   ... \"\"\")\n    3\n    \"\"\"\n   ...\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = []\n    for i in range(n):\n        b.append(0)\n    c = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            c.append(a[i] + a[j])\n    c = list(set(c))\n    c.sort(reverse=True)\n    c_dict = {}\n    for i in c:\n        if c_dict.get(i) == None:\n            c_dict[i] = 1\n        else:\n            c_dict[i] += 1\n    c_dict = sorted(c_dict.items(), key=lambda x: x[1], reverse=True)\n    c_dict = dict(c_dict)\n    ans = 1\n    for i, j in c_dict.items():\n        if i > ans:\n            break\n        else:\n            ans = i\n    if ans == 1:\n        ans = -1\n    return ans\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"Hello, World!\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) == 1:\n        return -1\n    stdin = list(map(int, stdin.split(' ')))\n    # T = int(stdin[0])\n    # stdin = stdin[1:]\n    # stdin = [list(map(int, input().split(' '))) for i in range(T)]\n    n = int(stdin[0])\n    A = stdin[1:]\n\n    cur_val = 0\n    current_sum = 0\n    min_sum = float('inf')\n    for val in A:\n        current_sum = max(val, current_sum + val)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum if min_sum < float('inf') else -1\n\nA = [3, 6, 5]\n\ndef"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    ans = -1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j]) * (j - i) >= n:\n                ans = j - i\n                break\n        if ans!= -1:\n            break\n    print(ans)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(\" \")]\n    if n > len(a) or n < 1:\n        return \"-1\"\n    elif n == 1:\n        return str(1)\n    # print(a)\n    sum_a = sum(a)\n    min_variables = n\n    # print(sum_a)\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!= j:\n                # print(i, j)\n                sum_b = sum([a[k] for k in range(i)]) + sum([a[k] for k in range(j)])\n                # print(sum_b)\n                if sum_b == sum_a:\n                    if min_variables > i + j:\n                        min_variables = i + j\n    if min_variables == n:\n        return \"-1\"\n    return str(min_variables)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(i) for i in stdin.split()]\n    dp = [[0 for j in range(n + 1)] for i in range(n)]\n    for i in range(1, n + 1):\n        dp[i - 1][i] = seq[i - 1]\n    for k in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[j - 1][j] = seq[j - 1] + dp[j - 1][j - 1]\n    for j in range(1, n + 1):\n        for k in range(1, j):\n            dp[j - 1][j] = min(dp[j - 1][j], dp[j - 1][k] + dp[k][j])\n    ans = 0\n    for i in range(1, n + 1):\n        ans = max(ans, dp[i - 1][i])\n    if ans == 0:\n        print(-1)\n    else:\n        print(n - ans)\n\nsolution(\"5\\n1 2 3 6 8\")\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    # make a list of all the numbers\n    nums = []\n    for item in s[1:]:\n        nums.append(item)\n\n    # get minimum number of variables m to get all the numbers\n    nums.sort()\n    m = nums[0]\n    for item in nums[1:]:\n        m = item if item > m else m\n    m = m if m > 0 else -1\n    return m\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\\\n1 2 3 6 8')\n    2\n    \"\"\"\n\n    # remove pass and write your code in here\n    # pass\n\n    num = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    print(solution(nums))\n    \ndef"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    stones: List[int] = []\n    for line in stdin.split('\\n'):\n        stones.append(int(line))\n   ...\n    turn = 1\n    n = len(stones)\n    while n > 1:\n        turn = 1 - turn\n        i = 0\n        while i + n // 2 < n:\n            for _ in range(2):\n                stones[i] = max(1, stones[i] - turn)\n                i = (i + 1) % n\n        n //= 2\n    return 'Alice' if turn else 'Bob'"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A, B = [], []\n    for i in range(0, n, 2):\n        A.append(int(stdin))\n    for i in range(1, n, 2):\n        B.append(int(stdin))\n    print(\"Alice\" if sum(A) > sum(B) else \"Bob\")\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the number of piles that each player has. If the difference is greater than 1,\n    the second player can't win.\n    '''\n    piles = [int(line) for line in stdin.splitlines()]\n    n = len(piles)\n    if n < 2:\n        return 'Bob'\n    return 'Alice' if sum(piles) % 2 == 0 else 'Bob'\n\n\ndef"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # convert str to ints\n    piles = [int(i) for i in stdin.split()]\n    # piles = [int(i) for i in stdin.split('\\n')]\n    # convert piles to a map\n    piles = {i: piles[i] for i in range(0, len(piles))}\n    # print(piles)\n\n    # find how many piles are greater than or equal to half of the total\n    piles_greater_than_half = [k for k, v in piles.items() if v >= len(piles)/2]\n    # print(piles_greater_than_half)\n    # make sure that there is only one pile greater than half\n    if len(piles_greater_than_half) > 1:\n        return \"Alice\"\n    # print(piles_greater_than_half[0])\n    piles_greater_than_half = piles_greater_than_half[0]\n    # print(piles_greater_than_half)\n    piles_equal_to_half = [k for k, v in piles.items() if v == len(piles)/2]\n    # print(piles_equal_to_half)\n    # make sure that there is only one pile equal to half\n    if len(piles_equal_to_half) > 1:\n        return \"Alice\"\n    # print(piles_equal_to_half[0])\n    piles_equal_to_half = piles_equal_to_half[0]\n    # print(piles_equal_to_half)\n\n    # starting with the pile that has the most stones, first take away all but one stone from that pile\n    piles[piles_greater_than_half] -= 1\n    # if the pile that has the most stones is the pile with half the stones, then Alice will lose\n    if piles[piles_greater_than_half] == len(piles)/2:\n        return \"Alice\"\n    # if the pile that has the most stones is the pile with the most stones, then Alice will win\n    elif piles[piles_greater_than_half] == len(piles):\n        return \"Bob\"\n\n    # if the pile that has the most stones is the pile with less than half the stones, then Alice will lose\n    piles[piles_greater_than_half] += 1\n    # if the pile that has the most stones is the pile with less than half the stones, then Alice will win\n    if piles[piles_greater_than_half] == len(piles)/2:\n        return \"Bob\"\n    # if the pile that has the most stones is the pile with half the stones, then Alice will lose\n    elif piles[piles_greater_than_half] == len(piles):\n        return \"Alice\"\n\n    # if the pile that has the most stones is the pile with the most stones, then Bob will win\n    piles[piles_greater_than_half] -= 1\n    # if the pile that has the most stones is the pile with the most stones, then Bob will lose\n    if piles[piles_greater_than_half] == len(piles)/2:\n        return \"Alice\"\n    # if the pile that has the most stones is the pile with less than half the stones, then Bob will win\n    elif piles[piles_greater_than_half] == len(piles):\n        return \"Bob\"\n\n    # if the pile that has the most stones is the pile with less than half the stones, then Alice will win\n    piles[piles_greater_than_half] += 1\n    # if the pile that has the most stones is the pile with less than half the stones, then Alice will lose\n    if piles[piles_greater_than_half] == len(piles)/2:\n        return \"Bob\"\n    # if the pile that has the most stones is the pile with half the stones, then Alice will lose\n    elif piles[piles_greater_than_half] == len(piles):\n        return \"Alice\"\n\n    # if the pile that has the most stones is the pile with less than half the stones, then Bob will win\n    piles[piles_greater_than_half] -= 1\n    # if the pile that has the most stones is the pile with less than half the stones, then Bob will win\n    if piles[piles_greater_than_half] == len(piles)/2:\n        return \"Bob\"\n    # if the pile that has the most stones is the pile with half the stones, then Bob will lose\n    elif piles[piles_greater_than_half] == len(piles):\n        return \"Alice\"\n\n    # if the pile that has the most stones is the pile with half the stones, then Alice will win\n    piles[piles_greater_than_half] += 1\n    # if the pile that has the most stones is the pile with half the stones, then Alice will lose\n    if piles[piles_greater_than_half] == len(piles)/2:\n        return \"Bob\"\n    # if the pile that has the most stones is the pile with less than half the stones, then Alice will win\n    elif piles[piles_greater_than_half] == len(piles):\n        return \"Alice\"\n\n    # if the pile that has the most stones is the pile with less than half the stones, then Alice will win\n    piles[piles_greater_than_half] -= 1\n    # if the pile that has the most stones is the pile with less than half the stones, then Alice will win\n    if piles[piles_greater_than_half] == len(piles)/2:\n        return \"Alice\"\n    # if the pile that has the most stones is the pile with half the stones, then Alice will lose\n    elif piles[piles_greater_than_half] == len(piles):\n        return \"Bob\"\n\n    # if the pile that has the most stones is the pile with half the stones, then Bob will win\n    piles[piles_greater_than_half] += 1\n    # if the pile that has the most stones is the pile with half the stones, then Bob will lose\n    if piles[piles_greater_than_half] == len(piles)/2:\n        return \"Bob\"\n    # if the pile that has the most stones is the pile with less than half the stones, then Bob will win\n    elif piles[piles_greater_than_half] == len(piles):\n        return \"Alice\"\n\n    # if the pile that has the most stones is the pile with less than half the stones, then Bob will win\n    piles[piles_greater_than_half] -= 1\n    # if the pile that has the most stones is the pile with less than half the stones, then Bob will win\n    if piles[piles_greater_than_half]"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(s[:s.find(' ')])\n    a = list(map(int, s[s.find(' ')+1:].split(' ')))\n    if n % 2:\n        return 'Bob'\n    # Alice always remove half the number of piles\n    a.sort(reverse=True)\n    # Alice will remove the most stones\n    if sum(a[:n//2]) < sum(a[n//2:]):\n        return 'Alice'\n    return 'Bob'\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution with only one move.\n    \"\"\"\n    n = int(stdin)\n    assert n >= 2\n    assert n <= 50\n    assert n % 2 == 0\n    assert stdin.split('\\n')[0].split(' ')[1].split(' ')[0] == '8'\n    a = list(map(int, stdin.split('\\n')[0].split(' ')[1:]))\n    assert len(a) == n\n    assert all(1 <= a_i <= 50 for a_i in a)\n\n    alice = 0\n    for i in range(n):\n        if a[i] % 2!= 0:\n            alice += 1\n            a[i] -= 1\n    if alice == 0:\n        return 'Alice'\n    else:\n        return 'Bob'\n\n\n\ndef"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    while len(a) < n // 2:\n        a.extend([0 for x in range(n // 2 - len(a))])\n    return \"Bob\" if sum(a[:n // 2]) <= sum(a[n // 2:]) else \"Alice\"\n\"\"\"\n\ndef"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Alice\" if int(stdin) % 2 else \"Bob\"\n\nprint(solution(input()))\n\n\n\n-----Explanation-----\nhttps://www.jianshu.com/p/09c2b25bb063\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    stones = [int(x) for x in stdin.split('\\n')[1].split()]\n    return 'Alice' if n % 2 == 1 or (sum(stones) % 2 == 1 and n % 2 == 0) else 'Bob'\n------\ndef"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split(' ')]\n    s = sum(a)\n    if s % n!= 0:\n        return \"NO\"\n    else:\n        a_min = min(a)\n        a_max = max(a)\n        a_max_count = a.count(a_max)\n        if a_max_count > 1:\n            return \"NO\"\n        else:\n            a_min_count = a.count(a_min)\n            if a_min_count > 1:\n                return \"NO\"\n            else:\n                a_s = sum(a)\n                a_min_count = a.count(a_min)\n                a_min_count_idx = a.index(a_min)\n                a_min_count = a_s - (n * a_min_count)\n                if a_min_count > a_max:\n                    return \"NO\"\n                else:\n                    a.sort()\n                    a.reverse()\n                    a_min_count_idx = a.index(a_min)\n                    a_min_count = a_s - (n * a_min_count_idx)\n                    if a_min_count > a_max:\n                        return \"NO\"\n                    else:\n                        return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.split()[0] == '5' else 'NO'"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) == 1 else \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n = int(input[0])\n    arr = list(map(int, input[1].split()))\n\n    # Initialize variables\n    leftSum = 0\n    rightSum = 0\n    leftIdx = 0\n    rightIdx = n - 1\n\n    while leftIdx < rightIdx:\n        leftSum += arr[leftIdx]\n        rightSum += arr[rightIdx]\n        leftIdx += 1\n        rightIdx -= 1\n\n        if leftSum == rightSum:\n            return 'YES'\n        elif leftSum > rightSum:\n            rightSum -= arr[rightIdx]\n            rightIdx -= 1\n        else:\n            leftSum -= arr[leftIdx]\n            leftIdx += 1\n\n    return 'NO'\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    x = int(stdin.readline())\n    a[0] += x\n    a[n - 1] -= x\n    for i in range(1, n - 1):\n        a[i] += x\n        a[i] -= x\n    if sum(a) == 0:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if len(set(stdin.split())) == 1 else \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, nums = [int(x) for x in stdin.split('\\n')]\n    if sorted(nums) == [i for i in range(n)]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_feasible(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([(len(c), i, len(c)) for i, c in enumerate(stdin) if stdin.count(c) > 1 and stdin[i - len(c):i] == stdin[i:i + len(c)]])[0])"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    string = stdin.readline()\n    count = {}\n    for s in string:\n        if s in count:\n            count[s] += 1\n        else:\n            count[s] = 1\n    for key in count:\n        if count[key] >= 2:\n            return str(len(key))\n    return str(0)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[1:]\n    d = {}\n    cur = \"\"\n    max = 0\n    for i in range(len(s)):\n        if s[i] in d and len(d[s[i]]) == 0:\n            d[s[i]].append(i)\n        else:\n            if len(cur) > max:\n                max = len(cur)\n            d[s[i]] = [i]\n            cur = s[i]\n    if len(cur) > max:\n        max = len(cur)\n    return max\n\nprint(solution(input()))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_str, S = stdin.split(\"\\n\")\n    number_of_str, S = int(number_of_str), S\n    \n    #Find length of shortest substring\n    shortest_substring = len(S)\n    for i in range(number_of_str-1):\n        current_length = len(S[i:])\n        if current_length < shortest_substring:\n            shortest_substring = current_length\n            \n    #Find length of longest substring\n    longest_substring = 0\n    for i in range(number_of_str):\n        current_length = 0\n        for j in range(number_of_str):\n            current_length += 1\n            if i+current_length <= number_of_str:\n                if S[i] == S[i+current_length]:\n                    if current_length > longest_substring:\n                        longest_substring = current_length\n                    else:\n                        break\n                else:\n                    break\n                    \n    return str(longest_substring)\n\n\ndef"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    # build a string\n    c = ''\n    for i in range(n):\n        if s[i] not in c:\n            c += s[i]\n        else:\n            s = s[i:]\n            break\n    l = len(c)\n    for i in range(n):\n        if s[i]!= c[i % l]:\n            c = c[i % l:]\n            l = len(c)\n            for j in range(n):\n                if s[j] not in c:\n                    c += s[j]\n                else:\n                    s = s[j:]\n                    break\n            l = len(c)\n    return l\n\nprint(solution(stdin))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nababa\")\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    # The maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\n    # If there is no such non-empty string, print 0 instead.\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i + j + 1 > n:\n                break\n            # Check that i + j + 1 is less or equal to n and that the last two elements are equal\n            #   (examples of overlapping of consecutive letters: a, ba, ab, aba, abaab)\n            if s[i:i + j + 1] == s[j:j + j + 1] and j - i + 1 > ans:\n                ans = j - i + 1\n    return str(ans)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    if n < 2:\n        return 0\n    max_len = 0\n    for start in range(n):\n        for end in range(start+max_len,n):\n            if string[start:end+1] == string[end+1:2*end+1]:\n                max_len = max(max_len,end-start+1)\n    return max_len\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return None"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Simple implementation\"\"\"\n    # Get the input\n    n, a = [int(c) for c in stdin.split(\" \")]\n\n    # Get the reverse of the input, with n+1-n and n+1-n-1, both on each side\n    rev_a = a + 1 - n\n    rev_b = a + 1 - n - 1\n\n    # Get the difference, giving 1 second to drive each house\n    # and 1 second to go from the end of the street to the beginning\n    diff = abs(rev_a - rev_b) + 1\n    diff = min(diff, n - diff)\n    return str(diff)\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = [a - i for i in range(n)]\n    return str(min(x))\n\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return 1 if n % 2 == a % 2 else 2\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return min time to reach a house using driving car\n    :param stdin: input string\n    :type stdin: str\n    :return: string\n    \"\"\"\n    houses = [int(i) for i in stdin.split(' ')]\n    houses = sorted(houses)\n    houses = houses[::2]\n    houses.append(houses.pop(0))\n    return str(min(houses[i + 1] - houses[i] - 1 for i in range(len(houses) - 1)))\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, house = map(int, stdin.split())\n    return (house - 1) * 2 + (n - house) // 2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    colors = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    numbers = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i]\n        if sum > n:\n            return \"NO\"\n\n    colors_counts = collections.Counter(colors)\n\n    for i in range(n):\n        if i + 1 not in colors_counts or colors_counts[i + 1] == 0:\n            return \"NO\"\n        else:\n            colors_counts[i + 1] -= 1\n\n    return \"YES\"\n\ndef"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 2\\n1 1 2 2 1\\n1 2\\n')\n    'YES'\n    \"\"\"\n    number_of_jedi_knights = int(stdin.split()[0])\n    number_of_colors = int(stdin.split()[1])\n    jedi_knights = [int(n) for n in stdin.split()[2:]]\n    jedi_knights.sort()\n    # initialize the result\n    result = \"NO\"\n    # set initial value for jedi_knights_sum\n    jedi_knights_sum = sum(jedi_knights)\n    # iterate over colors\n    for color in range(number_of_colors):\n        # initialize jedi_knights_sum\n        jedi_knights_sum = sum(jedi_knights)\n        # iterate over available number of jedi_knights\n        for jedi_knights_count in range(1, jedi_knights_sum + 1):\n            # calculate jedi_knights_sum for each jedi_knights_count\n            jedi_knights_sum = sum(jedi_knights[:jedi_knights_count])\n            # check if the sum is equal to jedi_knights_count\n            if jedi_knights_sum == jedi_knights_count:\n                # set result to \"YES\"\n                result = \"YES\"\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    if n > m:\n        return 'NO'\n    colors = list(map(int, stdin.split(' ')))\n    colors.sort()\n    a = colors.pop(0)\n    b = 1\n    while a < b:\n        count = 1\n        while colors and a + count * b <= m:\n            count *= colors.pop(0)\n            count //= b\n        if count == 1:\n            return 'NO'\n        b += 1\n    return 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    colors = list(map(int, stdin.split(' ')))\n    if sum(colors)!= n:\n        return \"NO\"\n    colors.sort()\n    if n == 1:\n        return \"YES\"\n    elif colors[-1] == n:\n        return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    colors = [int(x) for x in stdin.strip().split(' ')]\n    k = [int(x) for x in stdin.strip().split(' ')]\n    total = sum(k)\n    satisfy = False\n    if n < total:\n        return 'NO'\n    if total % n == 0:\n        return 'YES'\n    for c in range(m):\n        if (total - k[c]) % n == 0:\n            satisfy = True\n            break\n    return 'YES' if satisfy else 'NO'"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # My Solution: O(m * log(m * m))\n    # num_jedi, num_colors = (int(x) for x in stdin.split(\"\\n\")[:2])\n    # jedi_colors = [int(x) for x in stdin.split(\"\\n\")[2:]]\n    # jedi_colors.sort()\n    # colors = [0 for _ in range(num_colors)]\n    # min_ = num_jedi\n    # for i in range(num_jedi):\n    #     for j in range(num_colors):\n    #         colors[j] += jedi_colors[i]\n    #         if colors[j] >= min_:\n    #             break\n    #     if colors[j] < min_:\n    #         min_ = colors[j]\n    #     for j in range(j + 1, num_colors):\n    #         colors[j] = colors[j - 1] - jedi_colors[i] + jedi_colors[i]\n    #         if colors[j] >= min_:\n    #             break\n    #     if colors[j] < min_:\n    #         min_ = colors[j]\n    # if min_ == num_jedi:\n    #     return \"YES\"\n    # return \"NO\"\n\n    # Optimal Solution: O(m * m)\n    num_jedi, num_colors = (int(x) for x in stdin.split(\"\\n\")[:2])\n    jedi_colors = [int(x) for x in stdin.split(\"\\n\")[2:]]\n    jedi_colors.sort()\n    colors = [0] * num_colors\n    for jedi in jedi_colors:\n        for i in range(num_colors):\n            colors[i] += jedi\n            if colors[i] >= num_jedi:\n                break\n        if colors[i] < num_jedi:\n            num_jedi -= colors[i]\n        for j in range(i + 1, num_colors):\n            colors[j] = colors[j - 1] - jedi + jedi\n            if colors[j] >= num_jedi:\n                break\n        if colors[j] < num_jedi:\n            num_jedi -= colors[j]\n        if num_jedi == 0:\n            break\n    return \"YES\" if num_jedi == 0 else \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = [int(n) for n in stdin.split('\\n')[0].split()]\n    colors = [int(n) for n in stdin.split('\\n')[1].split()]\n    (k, k_sum) = [int(n) for n in stdin.split('\\n')[2].split()]\n    interval = []\n    for i in range(m):\n        interval.append((i+1, colors[i]))\n    interval.sort(key = lambda i : i[1])\n    print(interval)\n    def isvalid(start: int, end: int, k: int):\n        pass\n    #print(isvalid(n, m, k))\n    return ''\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    #n = int(stdin)\n    #m = int(stdin)\n    #colors = list(map(int, stdin.split()))\n    return main(n, m, colors)\n\ndef"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = [int(x) for x in lines[0].split()]\n    s = [int(x) for x in lines[1].split()]\n    k = [int(x) for x in lines[2].split()]\n    colors = list(range(1, m + 1))\n    intervals = []\n    for i in range(0, len(k), 2):\n        intervals.append([k[i], k[i+1]])\n    for i in range(m):\n        if s[i] < k[i]:\n            return \"NO\"\n    if m == 1:\n        if n == k[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(len(intervals)):\n        count = 0\n        for j in range(len(colors)):\n            if colors[j] in intervals[i]:\n                count += 1\n        if count!= intervals[i][0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = [int(x) for x in stdin.split()]\n    k = [0 for _ in range(m)]\n    for i in range(n):\n        k[i % m] += 1\n    return \"YES\" if sum(k) == m else \"NO\"\n\n\ndef"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [list(map(int, i.split())) for i in stdin.readlines()]\n    for i in range(len(l)):\n        if l[i][0] > l[i][1]:\n            l[i][0], l[i][1] = l[i][1], l[i][0]\n    if l.count(l[0]) == len(l):\n        return \"Friendship is magic!^^\"\n    m, c = l[0], l[0][0]\n    for i in range(1, n):\n        if l[i][0] > l[i][1]:\n            l[i][0], l[i][1] = l[i][1], l[i][0]\n        if m[0] <= l[i][0] <= m[1] and m[0] <= l[i][1] <= m[1]:\n            m = l[i]\n        if c[0] <= l[i][0] <= c[1] and c[0] <= l[i][1] <= c[1]:\n            c = l[i]\n    if m[0] == c[0]:\n        return \"Friendship is magic!^^\"\n    return \"Mishka\" if m[0] < c[0] else \"Chris\""
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    kol = int(stdin.split(\"\\n\")[0])\n    matrix = [[0, 0] for i in range(kol)]\n    for i in range(kol):\n        matrix[i][0] = int(stdin.split(\"\\n\")[i].split(\" \")[0])\n        matrix[i][1] = int(stdin.split(\"\\n\")[i].split(\" \")[1])\n    matrix = sorted(matrix, key=lambda x: x[1])\n    print(matrix)\n    temp = 0\n    c = 0\n    k = 0\n    for i in range(len(matrix)):\n        if matrix[i][0] > matrix[i][1]:\n            temp = matrix[i][0]\n            c += 1\n        else:\n            if c > 0:\n                k = 1\n            temp = matrix[i][1]\n            c = 0\n    if k == 1:\n        return \"Friendship is magic!^^\"\n    if c > 0:\n        return \"Mishka\"\n    return \"Chris\"\n\n\nprint(solution(\"2\\n6 1\\n1 6\"))\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    dice_1 = []\n    dice_2 = []\n    n = int(stdin)\n    for i in range(n):\n        dice_1.append(int(stdin.split('\\n')[i].split(' ')[1]))\n        dice_2.append(int(stdin.split('\\n')[i].split(' ')[2]))\n    if dice_1.count(max(dice_1)) > dice_2.count(max(dice_2)):\n        print(\"Mishka\")\n    elif dice_1.count(max(dice_1)) < dice_2.count(max(dice_2)):\n        print(\"Chris\")\n    else:\n        print(\"Friendship is magic!^^\")"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    players = list(map(lambda x: [int(x[0]), int(x[1])],\n                       map(lambda x: x.split(), lines[1:])))\n    p1 = 0\n    p2 = 0\n    for i in range(n):\n        if p1 < p2 or (p1 == p2 and players[0][0] > players[1][0]):\n            p1 += players[0][0]\n            p1 += players[0][1]\n        else:\n            p2 += players[1][0]\n            p2 += players[1][1]\n    return \"Mishka\" if p1 > p2 else \"Chris\" if p1 < p2 else \"Friendship is magic!\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mishka = 0\n    chris = 0\n    for _ in range(n):\n        m, c = tuple(map(int, input().split()))\n        mishka += (m > c)\n        chris += (m < c)\n    return \"Mishka\" if mishka > chris else \"Chris\" if chris > mishka else \"Friendship is magic!\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"Mishka\""
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    mishka = ches = 0\n    for i in range(n):\n        m, c = map(int, stdin.readline().split())\n        if m > c:\n            mishka += 1\n        elif m < c:\n            ches += 1\n    if mishka > ches:\n        return \"Mishka\"\n    elif mishka < ches:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(3 3\n    1*1\n    111\n    111)\n    'YES'\n    >>> solution(2 4\n    *.*.\n    1211\n    )\n    'NO'\n    '''\n    bombs = set()\n    n, m = map(int, stdin.split())\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == '*':\n                bombs.add((i, j))\n\n    def is_valid(field):\n        for r in range(n):\n            for c in range(m):\n                if field[r][c] in '12345678':\n                    nr, nc = r - 1, c - 1\n                    while nr >= 0:\n                        nr, nc = nr - 1, nc + 1\n                        if stdin[nr][nc] == '.':\n                            nr, nc = nr - 1, nc - 1\n                            while nr >= 0 and nc >= 0:\n                                if stdin[nr][nc] == '*':\n                                    return False\n                                nr, nc = nr - 1, nc - 1\n                        if nr < 0:\n                            break\n                    nr, nc = r + 1, c - 1\n                    while nr < n and nc >= 0:\n                        nr, nc = nr + 1, nc - 1\n                        if stdin[nr][nc] == '.':\n                            nr, nc = nr + 1, nc + 1\n                            while nr < n and nc < m:\n                                if stdin[nr][nc] == '*':\n                                    return False\n                                nr, nc = nr + 1, nc + 1\n                        if nc < 0:\n                            break\n                    nr, nc = r + 1, c + 1\n                    while nr < n and nc < m:\n                        nr, nc = nr + 1, nc + 1\n                        if stdin[nr][nc] == '.':\n                            nr, nc = nr - 1, nc - 1\n                            while nr >= 0 and nc >= 0:\n                                if stdin[nr][nc] == '*':\n                                    return False\n                                nr, nc = nr - 1, nc - 1\n                        if nr < 0:\n                            break\n        return True\n\n    def minesweeper(field):\n        while True:\n            bombs_next = set()\n            for r in range(n):\n                for c in range(m):\n                    if field[r][c] in '12345678':\n                        for nr, nc in ((r - 1, c - 1), (r - 1, c), (r - 1, c + 1),\n                                       (r, c - 1), (r, c + 1),\n                                       (r + 1, c - 1), (r + 1, c), (r + 1, c + 1)):\n                            if 0 <= nr < n and 0 <= nc < m:\n                                if field[nr][nc] == '*':\n                                    bombs_next.add((nr, nc))\n                                elif field[nr][nc] == '.':\n                                    bombs_next.add((nr, nc))\n                                    field[nr][nc] = str(int(field[nr][nc]) + 1)\n            if not bombs_next:\n                return field\n            bombs_next -= bombs\n            if bombs_next:\n                bombs_next = bombs_next.pop()\n                field[bombs_next[0]][bombs_next[1]] = '*'\n                field[bombs_next[0] - 1][bombs_next[1] - 1] = str(int(field[bombs_next[0] - 1][bombs_next[1] - 1]) + 1)\n                field[bombs_next[0] - 1][bombs_next[1]] = str(int(field[bombs_next[0] - 1][bombs_next[1]]) + 1)\n                field[bombs_next[0] - 1][bombs_next[1] + 1] = str(int(field[bombs_next[0] - 1][bombs_next[1] + 1]) + 1)\n                field[bombs_next[0]][bombs_next[1] - 1] = str(int(field[bombs_next[0]][bombs_next[1] - 1]) + 1)\n                field[bombs_next[0]][bombs_next[1] + 1] = str(int(field[bombs_next[0]][bombs_next[1] + 1]) + 1)\n                field[bombs_next[0] + 1][bombs_next[1] - 1] = str(int(field[bombs_next[0] + 1][bombs_next[1] - 1]) + 1)\n                field[bombs_next[0] + 1][bombs_next[1]] = str(int(field[bombs_next[0] + 1][bombs_next[1]]) + 1)\n                field[bombs_next[0] + 1][bombs_next[1] + 1] = str(int(field[bombs_next[0] + 1][bombs_next[1] + 1]) + 1)\n            else:\n                return field\n\n    field = [['.' for _ in range(m)] for _ in range(n)]\n\n    while True:\n        field = minesweeper(field)\n        if is_valid(field):\n            break\n\n    return 'YES' if is_valid(field) else 'NO'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(i) for i in stdin.split(' ')]\n    assert(1 <= n <= 100)\n    assert(1 <= m <= 100)\n    nums = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if stdin[i * m + j] == '*':\n                nums[j] = 9\n            elif stdin[i * m + j] == '.':\n                nums[j] = 0\n            else:\n                nums[j] = int(stdin[i * m + j])\n    \n    for i in range(m):\n        if nums[i] == 0:\n            for j in range(i + 1, m):\n                if nums[j] == 0:\n                    nums[i] = nums[j] = 9\n                    break\n    \n    for i in range(m):\n        if nums[i]!= 0:\n            for j in range(i + 1, m):\n                if nums[j] == 0:\n                    nums[i] = nums[j] = 9\n                    break\n    \n    for i in range(n):\n        for j in range(m):\n            if nums[j]!= 9:\n                if j!= 0:\n                    nums[j] += nums[j - 1]\n                if j!= m - 1:\n                    nums[j] += nums[j + 1]\n            if nums[j]!= 9:\n                if i!= 0:\n                    nums[j] += nums[j - n]\n                if i!= n - 1:\n                    nums[j] += nums[j + n]\n    \n    for i in range(m):\n        if nums[i]!= 9:\n            for j in range(n):\n                if j!= 0:\n                    nums[i] += nums[i - m]\n                if j!= m - 1:\n                    nums[i] += nums[i + m]\n            if i!= m - 1:\n                nums[i] += nums[i + 1]\n            if i!= 0:\n                nums[i] += nums[i - 1]\n    \n    return 'YES' if 0 in nums else 'NO'\n\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    field = []\n    for _ in range(n):\n        field.append(list(stdin))\n    def get_bomb_count(row, col):\n        bomb_count = 0\n        for r in range(row - 1, row + 2):\n            for c in range(col - 1, col + 2):\n                if 0 <= r < n and 0 <= c < m:\n                    if field[r][c] == '*':\n                        bomb_count += 1\n        return bomb_count\n    for row in range(n):\n        for col in range(m):\n            if field[row][col] in ['.', '1', '2', '3', '4', '5', '6', '7', '8']:\n                bomb_count = get_bomb_count(row, col)\n                field[row][col] = str(bomb_count)\n    for row in field:\n        print(''.join(row))\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.replace('.', '0').replace('*', '0').isnumeric() else 'NO'\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split(' ')[0])\n    n = int(stdin.split(' ')[1])\n    board = []\n    for _ in range(n):\n        board.append(list(stdin.split('\\n')[-1]))\n\n    def get_bombs(b, x, y):\n        return [b[i][j] for i in range(x-1, x+2)\n                for j in range(y-1, y+2)\n                if 0 <= i < len(b) and 0 <= j < len(b[0])]\n\n    def is_valid(b):\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == \".\":\n                    b = get_bombs(b, i, j)\n                    if len(b) > sum(1 for k in b if k == \"*\"):\n                        return False\n        return True\n\n    return \"YES\" if is_valid(board) else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1*1\\n111\\n\")\n    'YES'\n    \"\"\"\n    lines = stdin.strip().splitlines()\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    field = [list(line.strip()) for line in lines[1:]]\n    flag = False\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                flag = True\n                break\n        if flag:\n            break\n\n    def neighbor(i, j):\n        \"\"\"\n        >>> neighbor(0, 0)\n        [(1, 0), (0, 1), (1, 1)]\n        \"\"\"\n        for k in range(-1, 2):\n            for l in range(-1, 2):\n                if k == 0 and l == 0:\n                    continue\n                if 0 <= i + k < n and 0 <= j + l < m:\n                    yield i + k, j + l\n\n    # validate the first line\n    bombs = 0\n    for j in range(m):\n        if \"*\" in field[0][j]:\n            bombs += 1\n    for i in range(n):\n        if \"*\" in field[i][0]:\n            bombs += 1\n    if bombs!= field[0].count(\"*\") + field[0].count(1):\n        return \"NO\"\n\n    # validate the middle lines\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            if field[i][j]!= \"*\":\n                if field[i][j] == \".\":\n                    if any(\"*\" in field[ni][nj] for ni, nj in neighbor(i, j)):\n                        return \"NO\"\n                else:\n                    if any(field[ni][nj] == \"*\" for ni, nj in neighbor(i, j)):\n                        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    board = [list(stdin.split('\\n')[i][:m]) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '*':\n                for x, y in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                    if 0 <= i + x < n and 0 <= j + y < m:\n                        board[i + x][j + y] = '*'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j]!= '*':\n                neigh = [0]\n                for x, y in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                    if 0 <= i + x < n and 0 <= j + y < m:\n                        if board[i + x][j + y] == '*':\n                            neigh[0] += 1\n                if neigh[0] < int(board[i][j]):\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while n > 0:\n        k += 1\n        n //= 10\n    return k\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while n > 1:\n        if n % 10 == 0:\n            k += 1\n            n /= 10\n        else:\n            n -= n % 10\n            k += 1\n            n /= 10\n    return k\n\nprint(solution('68'))\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_candies = int(stdin)\n    number_days = 1\n    while True:\n        number_days += 1\n        number_candies -= number_candies % 10\n        number_candies -= number_candies % 10\n        number_candies -= number_candies % 10\n        number_candies -= number_candies % 10\n        number_candies -= number_candies % 10\n        number_candies -= number_candies % 10\n        number_candies -= number_candies % 10\n        if number_candies <= 0:\n            break\n    return number_days"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return n // 10\n    else:\n        num = n\n        i = 1\n        while n!= 0:\n            i += 1\n            if n % 10 == 0:\n                return i\n            n = int(n / 10)\n    return i\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return '10'\n    elif n % 10 == 1:\n        return '9'\n    else:\n        return ''.join(list(map(str, range(2, n + 1, 2))))\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum amount of candies Vasya will eat.\"\"\"\n   ...\n    return result\n\ndef"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"68\")\n    3\n    \"\"\"\n    return\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the amount of candies Vasya must eat.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: amount of candies Vasya must eat\n    \"\"\"\n   ...\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) % 2 == 0 else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    necklace = stdin.split('\\n')[0]\n    link_counter = 0\n    # iterate through the elements in the necklace, and add to link counter if 'o' is found\n    # if a 'o' is found, then the link counter is incremented by 1\n    # if link counter becomes equal to the length of the necklace minus 1, then it is a valid necklace\n    # if the link counter isn't equal to the length of the necklace minus 1, then it is not a valid necklace\n    for i in range(len(necklace)):\n        if necklace[i] == 'o':\n            link_counter += 1\n        elif necklace[i] == '-':\n            link_counter -= 1\n        if link_counter == (len(necklace)-1):\n            return \"YES\"\n        if link_counter!= (len(necklace)-1):\n            return \"NO\"\n\n    # alternate solution that does the same thing as the first solution\n    # iterate through the elements in the necklace, and add to link counter if 'o' is found\n    # if a 'o' is found, then the link counter is incremented by 1\n    # if link counter becomes equal to the length of the necklace minus 1, then it is a valid necklace\n    # if the link counter isn't equal to the length of the necklace minus 1, then it is not a valid necklace\n    # link_counter = 0\n    # for char in necklace:\n    #     if char == 'o':\n    #         link_counter += 1\n    #     elif char == '-':\n    #         link_counter -= 1\n    #     if link_counter == (len(necklace)-1):\n    #         return \"YES\"\n    #     if link_counter!= (len(necklace)-1):\n    #         return \"NO\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your runtime beats 55.04 % of python3 submissions.\n    Your memory usage beats 29.54 % of python3 submissions.\n    \"\"\"\n    \n    n = len(stdin)\n    \n    links = 0\n    pearls = 0\n    \n    for char in stdin:\n        if char == 'o':\n            pearls += 1\n        elif char == '-':\n            links += 1\n            if links > pearls:\n                return 'NO'\n        else:\n            return 'NO'\n    \n    if links!= pearls:\n        return 'NO'\n    \n    return 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"o\") % 2 == 0 else \"NO\"\n\"\"\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    necklace: list[str] = stdin.replace(\" \", \"\").split(\"-\")\n    necklace = list(set(necklace))\n    necklace.sort(key=lambda x: len(x), reverse=True)\n\n    if len(necklace) < 2:\n        print(\"YES\")\n        return\n\n    if len(necklace) == 2:\n        if len(necklace[0]) == len(necklace[1]):\n            print(\"YES\")\n            return\n\n    for i in range(len(necklace) - 1):\n        if (\n            len(necklace[i]) + 1 == len(necklace[i + 1])\n            or len(necklace[i]) == len(necklace[i + 1]) + 1\n        ):\n            continue\n        else:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_equal_links_pearls(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_equal_necklace(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if can_solve(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split())\n    pillows = [0] * n\n    for h in range(n):\n        if h == k - 1:\n            pillows[h] = m\n        else:\n            pillows[h] = h + 1\n    return max(pillows)"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split(' '))\n    return 1 if n - 1 <= k <= n * m else 0"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(k, n, m):\n        a = m\n        b = 0\n        while b < n:\n            b += a - 1\n            a = (a + 1) // 2\n            if b >= n:\n                break\n        return a\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    print(solve(k, n, m))"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 10 3\")\n    2\n    >>> solution(\"3 6 1\")\n    3\n    >>> solution(\"3 6 2\")\n    2\n    \"\"\"\n    pass"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m, k = [int(x) for x in stdin.split()]\n\n    if k >= n:\n        return n\n    elif k < n // 2:\n        return n - k\n    else:\n        return m // (k - 1) - 1\n    '''\n\n    n, m, k = [int(x) for x in stdin.split()]\n\n    if k >= n:\n        return n\n    elif k < n // 2:\n        return n - k\n    else:\n        return m // (k - 1) - 1\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return result\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    p = [int(x) for x in stdin.split(' ')]\n    p.sort()\n    l = 0\n    r = p[-1]\n    while l<=r:\n        m = (l+r)//2\n        if sum([1 for x in p if x>=m]) + m < k:\n            l = m+1\n        else:\n            r = m-1\n    return str(r)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = list(map(int, stdin.split()))\n    if n == 1 or m == 1 or n == m:\n        return str(k)\n    elif m == 2:\n        return str(n)\n    elif n == m:\n        return str(n)\n    else:\n        n %= m\n        if n == 0:\n            return str(m)\n        elif n == 1:\n            return str(m - 1)\n        else:\n            return str(m - 1) + \" \" + str(n)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    l = 0\n    s = 0\n    r = 0\n    mx = 0\n    while r < n:\n        s += a[r]\n        while s >= k:\n            s -= a[l]\n            l += 1\n        mx = max(mx, r - l + 1)\n        r += 1\n    print(mx)\n    return ''\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, m, k = [int(x) for x in stdin.readline().split()]\n    # a = [int(x) for x in stdin.readline().split()]\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    b = sorted(a)\n    r = 0\n    for i in range(n):\n        if m > n:\n            break\n        if i + m - 1 >= n:\n            r = 0\n            break\n        r = b[i+m-1] - b[i]\n        if r <= k:\n            break\n    print(s - k*(m-1) + r)\n    return ''"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(\" \")))\n    arr = list(map(int, stdin.split(\" \")))\n    arr.sort()\n    l = r = 0\n    res = float(\"-inf\")\n    while r < len(arr):\n        length = r - l + 1\n        if length < m:\n            r += 1\n        elif length == m:\n            if arr[r] - k > 0:\n                res = max(res, arr[r] - k)\n            r += 1\n        elif length > m:\n            if (arr[r] - k + arr[l] - k) > 0:\n                res = max(res, arr[r] - k + arr[l] - k)\n            l += 1\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n'''"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    stdin = [int(x) for x in stdin.split()]\n    n = stdin[0]\n    m = stdin[1]\n    k = stdin[2]\n    arr = stdin[3:]\n    arr = [int(i) for i in arr]\n    \n    start, end = 0, 1\n    mx = 0\n    for i in range(n):\n        if end >= n:\n            break\n        if sum(arr[start:end]) >= k:\n            end += 1\n            continue\n        else:\n            while end < n:\n                if sum(arr[start:end]) >= k:\n                    mx = max(mx, sum(arr[start:end]) - k)\n                    end += 1\n                else:\n                    end += 1\n                    break\n                \n            start = end\n    return mx\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # $n, m, k = [int(s) for s in stdin.readline().split()]\n    # a = [int(s) for s in stdin.readline().split()]\n    n, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # n = 7\n    # m = 3\n    # k = 10\n    # a = [2, -4, 15, -3, 4, 8, 3]\n    m_ceil = m\n    a_s = []\n    max_cost = 0\n    for i in range(n):\n        a_s.append(sum(a[i:i + m_ceil]) - k)\n        max_cost = max(max_cost, a_s[i])\n    # print(max_cost)\n    return str(max_cost)"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    # write your code in Python 3.6\n    k = max(k, 0)\n    k_mod = k % m\n    c = 0\n    for i in range(n):\n        c += (k_mod + 1) * ((a[i] - k_mod) // m)\n        k_mod = (k_mod + 1) % m\n    print(c)\n    return ''\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the longest possible polyline.\n\n    >>> solution('''0 10''')\n    '0 1\\n0 10\\n0 0\\n0 9'\n    \"\"\"\n   ...\n    n, m = map(int, stdin.split())\n    polyline = []\n    for i in range(n):\n        for j in range(m):\n            polyline.append((i, j))\n    polyline.sort()\n    max_length = 0\n    for i in range(len(polyline) - 3):\n        for j in range(i + 1, len(polyline) - 2):\n            for k in range(j + 1, len(polyline) - 1):\n                for l in range(k + 1, len(polyline)):\n                    p1, p2 = polyline[i], polyline[j]\n                    p3, p4 = polyline[k], polyline[l]\n                    length = (abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])) + \\\n                             (abs(p2[0] - p3[0]) + abs(p2[1] - p3[1])) + \\\n                             (abs(p3[0] - p4[0]) + abs(p3[1] - p4[1])) + \\\n                             (abs(p4[0] - p1[0]) + abs(p4[1] - p1[1]))\n                    if max_length < length:\n                        max_length = length\n    return str(max_length)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    minx, miny = 100000000000000, 100000000000000\n    maxx, maxy = 0, 0\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        minx = min(minx, x)\n        miny = min(miny, y)\n        maxx = max(maxx, x)\n        maxy = max(maxy, y)\n    midx = int(minx + ((maxx - minx) / 2))\n    midy = int(miny + ((maxy - miny) / 2))\n    for i in range(n):\n        if i!= midx and i!= maxx and i!= minx:\n            x = abs(i - midx)\n        else:\n            x = 0\n        for j in range(m):\n            if j!= midy and j!= maxy and j!= miny:\n                y = abs(j - midy)\n            else:\n                y = 0\n            print(x, y)\n    return \"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    max_len = 0\n    best_p1, best_p2, best_p3, best_p4 = 0, 0, 0, 0\n    for p1 in range(n):\n        for p2 in range(n):\n            for p3 in range(n):\n                for p4 in range(n):\n                    if p1 == p2 or p1 == p3 or p1 == p4 or p2 == p3 or p2 == p4 or p3 == p4:\n                        continue\n                    length = sum([(p1 - p2) ** 2, (p2 - p3) ** 2, (p3 - p4) ** 2, (p4 - p1) ** 2]) ** 0.5\n                    if length > max_len:\n                        max_len = length\n                        best_p1, best_p2, best_p3, best_p4 = p1, p2, p3, p4\n    print(f\"{best_p1} {best_p2}\")\n    print(f\"{best_p2} {best_p3}\")\n    print(f\"{best_p3} {best_p4}\")\n    print(f\"{best_p4} {best_p1}\")\n    return ''\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041d\u0430\u0439\u0442\u0438 4 \u0442\u043e\u0447\u043a\u0438 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043a\u043e\u043d\u0435\u0446 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432\n    :param stdin:\n    :return:\n    \"\"\"\n    (n, m) = stdin.split(' ')\n    n = int(n)\n    m = int(m)\n    matrix = [list(map(int, stdin.split(' '))) for _ in range(n)]\n\n    result = []\n    for j in range(n):\n        for i in range(m):\n            if len(result) < 4:\n                result.append(matrix[j][i])\n            else:\n                result.sort(reverse=True)\n                result[0] = matrix[j][i]\n\n    for j in range(n):\n        for i in range(m):\n            if len(result) < 4:\n                result.append(matrix[j][i])\n            else:\n                result.sort(reverse=True)\n                result[3] = matrix[j][i]\n\n    for j in range(n):\n        for i in range(m):\n            if len(result) < 4:\n                result.append(matrix[j][i])\n            else:\n                result.sort(reverse=True)\n                result[2] = matrix[j][i]\n\n    for j in range(n):\n        for i in range(m):\n            if len(result) < 4:\n                result.append(matrix[j][i])\n            else:\n                result.sort(reverse=True)\n                result[1] = matrix[j][i]\n\n    return f'{result[0]} {result[1]} {result[2]} {result[3]}'\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b = map(int, stdin.split())\n    grid = list()\n    for i in range(a):\n        for j in range(b):\n            grid.append((i, j))\n    d = dict()\n    for i in range(len(grid)):\n        for j in range(i+1, len(grid)):\n            dist = round(pow(pow(grid[i][0] - grid[j][0], 2) + pow(grid[i][1] - grid[j][1], 2),.5), 6)\n            d[(grid[i], grid[j])] = dist\n            d[(grid[j], grid[i])] = dist\n    ans = list()\n    sorted_d = dict(sorted(d.items(), key=lambda kv: kv[1], reverse=True))\n    keys = list(sorted_d.keys())\n    for i in range(4):\n        ans.append(keys[i][0])\n        ans.append(keys[i][1])\n    print(ans[0][0], ans[0][1])\n    print(ans[1][0], ans[1][1])\n    print(ans[2][0], ans[2][1])\n    print(ans[3][0], ans[3][1])\n    return \"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    return (f\"{n} {m} {n} {n} {n + 1} {n + 1} {m + 1} {m + 1}\")\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [0] * (n * m)\n    b = [0] * (n * m)\n    c = [0] * (n * m)\n    d = [0] * (n * m)\n    a[0] = [1, 0]\n    b[0] = [0, 1]\n    c[0] = [1, 0]\n    d[0] = [0, 1]\n    for i in range(1, n * m):\n        if i % n == 0:\n            a[i] = [0, 1]\n            b[i] = [1, 0]\n            c[i] = [0, 1]\n            d[i] = [1, 0]\n        else:\n            if a[i - 1] == [0, 1]:\n                a[i] = [0, 1]\n                b[i] = [1, 0]\n            else:\n                a[i] = [0, 1]\n                b[i] = [1, 0]\n                c[i] = [1, 0]\n                d[i] = [0, 1]\n            if b[i - 1] == [1, 0]:\n                a[i] = [1, 0]\n                b[i] = [0, 1]\n            else:\n                a[i] = [1, 0]\n                b[i] = [0, 1]\n                c[i] = [1, 0]\n                d[i] = [0, 1]\n            if c[i - 1] == [0, 1]:\n                a[i] = [1, 0]\n                b[i] = [0, 1]\n            else:\n                a[i] = [1, 0]\n                b[i] = [0, 1]\n                c[i] = [1, 0]\n                d[i] = [0, 1]\n            if d[i - 1] == [1, 0]:\n                a[i] = [1, 0]\n                b[i] = [0, 1]\n            else:\n                a[i] = [1, 0]\n                b[i] = [0, 1]\n                c[i] = [1, 0]\n                d[i] = [0, 1]\n    print(a[n * m - 1], a[n * m - 2])\n    print(b[n * m - 1], b[n * m - 2])\n    print(c[n * m - 1], c[n * m - 2])\n    print(d[n * m - 1], d[n * m - 2])\n    return ''\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = stdin\n    if len(n) < 2:\n        return n\n    k = n.rfind('0')\n    if k < 0:\n        return n\n    return n[:k] + str(len(n)-k)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\n\n    >>> solution(\"003512\")\n    '30021'\n    >>> solution(\"199966633300\")\n    '3036366999'\n    >>> solution(\"12345678\")\n    '12345678'\n    >>> solution(\"89\")\n    '89'\n    >>> solution(\"996633300\")\n    '996633300'\n    \"\"\"\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the smallest integer n such that Vasya could pass to Kate.\n    \"\"\"\n    stdin = [int(i) for i in stdin]\n    n = stdin[0]\n    k = len(stdin)\n    if k < 1:\n        return 0\n    k = min(k, 1000000)\n    num_of_zeros = 0\n    if stdin[0] == 0:\n        num_of_zeros += 1\n    while len(stdin) < k:\n        stdin.append(0)\n    for i in range(k):\n        n += stdin[i] * 10 ** (k - 1 - i)\n    print(n)\n    return str(n)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    str1 = stdin\n    str2 = stdin[:-1]\n    ans = []\n    for i in range(1, len(str2)):\n        for j in range(i, len(str2) + 1):\n            if str2[i - 1:j] in str1:\n                ans.append(int(str2[i - 1:j]))\n    ans.sort()\n    print(ans[0])\n    return ''\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"003512\")\n    '30021'\n    >>> solution(\"199966633300\")\n    '3036366999'\n    \"\"\"\n\n    digits = [int(d) for d in stdin]\n    substring = stdin[stdin.find(\"0\") :]\n    remainders = []\n    for i in range(len(substring)):\n        remainders.append(substring[i:])\n\n    answers = []\n    for r in remainders:\n        remainder = r\n        solution = 0\n        for d in digits:\n            solution = (solution * 10) + d\n            if remainder in str(solution):\n                answers.append(solution)\n    return str(min(answers))\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    sub = ''\n    for i in number:\n        if i.isdigit():\n            sub += i\n    number = int(sub)\n    number = int(str(number)[::-1])\n    return str(number)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the task on Codewars\n    \"\"\"\n    nums = stdin\n    nums_list = list(nums)\n    nums_list.sort(reverse=True)\n    return str(int(\"\".join(nums_list)))\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin[0] * stdin[1:])\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Don't print anything, this is just the code template\n    n = stdin\n    k = int(n[:10])\n    res = 0\n    while k:\n        res += k % 10\n        k //= 10\n    print(res)\n    return ''\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = [int(num) for num in stdin.split('\\n')[0].split(' ')]\n    temps = [int(num) for num in stdin.split('\\n')[1].split(' ')]\n\n    if min not in temps and max not in temps:\n        return 'Correct'\n    elif m < n:\n        return 'Incorrect'\n    else:\n        for i in range(1, m):\n            if temps[i - 1] + 1 not in temps and temps[i - 1] + 1 not in temps:\n                return 'Incorrect'\n    return 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_correct(stdin: List[int]) -> bool:\n        return stdin[0] - stdin[-1] == len(stdin) - 1\n\n    n, m, min, max = [int(x) for x in stdin.split('\\n')[0].split()]\n    t = [int(x) for x in stdin.split('\\n')[1].split()]\n    t = [x for x in t if x >= min and x <= max]\n    if len(t) < m:\n        return 'Incorrect'\n    if is_correct(t):\n        return 'Correct'\n    else:\n        for _ in range(len(t) - m):\n            t.remove(min(t))\n        if is_correct(t):\n            return 'Correct'\n        else:\n            return 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_stds = map(int, stdin.split())\n    m, n, min_std, max_std = num_stds[0], num_stds[1], num_stds[2], num_stds[3]\n    num_stds = map(int, stdin.split())\n    print(' '.join(['Correct' if (min_std <= temp <= max_std) else 'Incorrect' for temp in num_stds]))\n    return ''"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = [int(x) for x in stdin.split('\\n')[0].split()]\n    temps = [int(x) for x in stdin.split('\\n')[1].split()]\n    temps.sort()\n    for i in range(1, n - m + 1):\n        if temps[i - 1] == min and temps[i + m - 1] == max:\n            return 'Correct'\n    return 'Incorrect'\nprint(solution(input()))\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \nprint(solution(input()))\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()[1:]]\n    temperatures = [0] * m\n    if n < m:\n        temperatures.extend([min] * (m - n))\n        temperatures.extend([max] * (n - m))\n    else:\n        temperatures.extend([max] * (m - n))\n        temperatures.extend([min] * (n - m))\n\n    return 'Correct' if sum([abs(t[i] - temperatures[i]) for i in range(m)]) == 0 else 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = [int(s) for s in stdin.split(\" \")]\n    temperatures = [int(s) for s in stdin.split(\" \")]\n    if min <= temperatures[0] <= max:\n        for i in temperatures[1:]:\n            if not (min <= i <= max):\n                return \"Incorrect\"\n    else:\n        return \"Incorrect\"\n    return \"Correct\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement a function that will return whether or not it is possible to add\n    n - m temperatures to obtain the minimum equal to min and the maximum equal\n    to max.\n    \n    For example, if n = 5, m = 1, min = 1, max = 2, and the reported temperatures\n    are [1, 1, 1, 2, 2], then the function should return \"Correct\".\n    \n    This is a fairly simple problem that uses a relatively limited amount of\n    computational resources, so the solution must be efficient enough.\n    \n    Parameters\n    ----------\n    stdin : str\n        The input as a string\n    \n    Returns\n    -------\n    str\n        Either \"Correct\" or \"Incorrect\"\n    \"\"\"\n    \n    return ''\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()[1:]))\n    return 'Correct' if min <= max - m else 'Incorrect'\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m = int(stdin)\n    \n    i = 1\n    while (5 ** i) % 10!= m:\n        i += 1\n    # print(i, (5 ** i))\n    \n    k = 0\n    while (5 ** k) % 10!= m:\n        k += 1\n    # print(k, (5 ** k))\n    \n    ans = []\n    for n in range(1, k + 1):\n        if n % 5 == 0:\n            ans.append(n)\n    # print(ans)\n    \n    return f\"{len(ans)}\\n{' '.join(str(x) for x in ans)}\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    m = int(stdin)\n    s = 0\n    n = 1\n    while True:\n        if str(n).endswith('0' * m):\n            s += 1\n            print(n, end=' ')\n        n += 1\n        if s == 5:\n            break\n    pass\nsolution(input())\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 0\n    result = []\n    for i in range(1, 1000):\n        if str(i).count(\"0\") == m:\n            count += 1\n            result.append(i)\n    return str(count) + \" \" + str(result)\n\"\"\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # return \"\"\n    # n = int(stdin)\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return solution(n-1) + str(n)\n    \n    n = int(stdin)\n    cache = [0 for _ in range(n+1)]\n    cache[0] = 1\n    cache[1] = 1\n    for i in range(2, n+1):\n        cache[i] = cache[i-1] * i\n    #print(cache)\n    res = []\n    for i in range(0, n+1):\n        if cache[i][::-1].endswith('0'*n):\n            res.append(i)\n    return''.join(map(str, res))\n    \n    \n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 0\n    for i in range(1, m + 1):\n        fact = 1\n        for j in range(1, i + 1):\n            fact *= j\n        for z in reversed(str(fact)):\n            if z == '0':\n                count += 1\n            else:\n                break\n    return count\n\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x = int(stdin)\n    k=0\n    for i in range(1,x+1):\n        k+=1\n        if i!=1 and x%i==0:\n            k-=i-1\n    print(k)\n    print(*list(range(x,0,-1)))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    k = 0\n    for i in range(1, 10001):\n        fact = factorial(i)\n        if str(fact)[-m:] == '0' * m:\n            k += 1\n    return str(k) + '\\n' +''.join([str(i) for i in range(1, k + 1)])\n\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = 0\n    for i in range(1, k + 1):\n        s += 1/i**5\n    s = int(s)\n    print(s)\n    return''.join([str(i) for i in range(s + 1, s + k + 1)])"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    k = 0\n    for i in range(1, m + 1):\n        if i % 5 == 0:\n            k += 1\n    print(k)\n    print(*[i for i in range(1, m + 1) if i % 5 == 0])\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(' ')))\n    x = list(map(int, stdin.split(' ')))\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n    for _ in range(m):\n        u, v, w = list(map(int, stdin.split(' ')))\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    r = []\n    for i in x:\n        tmp = 0\n        for j in graph[i]:\n            tmp = max(tmp, j[1])\n        for j in graph[i]:\n            if j[0]!= i:\n                r.append(tmp)\n                break\n        else:\n            r.append(0)\n    return''.join(list(map(str, r)))\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()[:k]]\n    graph = {}\n    for i in range(m):\n        u, v, w = [int(x) for x in stdin.split()]\n        if u not in graph:\n            graph[u] = {v:w}\n        else:\n            graph[u][v] = w\n        if v not in graph:\n            graph[v] = {u:w}\n        else:\n            graph[v][u] = w\n    \n    #for key in graph:\n    #    print(key, graph[key])\n    \n    dist = {}\n    for i in x:\n        dist[i] = {}\n        for j in x:\n            if i!= j:\n                dist[i][j] = float('inf')\n            else:\n                dist[i][j] = 0\n    \n    for u in graph:\n        for v in graph[u]:\n            dist[u][v] = graph[u][v]\n            dist[v][u] = graph[u][v]\n    \n    #for key in dist:\n    #    print(key, dist[key])\n    \n    for i in x:\n        dist[i][i] = 0\n    \n    for k in x:\n        for u in x:\n            for v in x:\n                if dist[u][v] > dist[u][k] + dist[k][v]:\n                    dist[u][v] = dist[u][k] + dist[k][v]\n    \n    #for key in dist:\n    #    print(key, dist[key])\n    \n    maxDist = 0\n    for u in x:\n        maxDist = max(maxDist, max(dist[u].values()))\n    \n    for i in x:\n        print(maxDist - dist[i][i])\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3 2\n   ... 2 1\n   ... 1 2 3\n   ... 1 2 2\n   ... 2 2 1''')\n    2 2 \n    >>> solution('''4 5 3\n   ... 1 2 3\n   ... 1 2 5\n   ... 4 2 1\n   ... 2 3 2\n   ... 1 4 4\n   ... 1 3 3''')\n    3 3 3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The approach is the same as with the breadth-first-search.\n    We visit all the edges in the graph starting from the farthest node.\n    '''\n\n    def get_farthest_node(visited, distances):\n        # Finds the farthest node from the set of visited nodes\n        # (with the maximum distances)\n        farthest_node = None\n        for node in visited:\n            if farthest_node is None or distances[node] > distances[farthest_node]:\n                farthest_node = node\n\n        return farthest_node\n\n    def get_distance_to_farthest_node(graph, distances, current_node):\n        # Finds the distance between current node and the farthest node\n        # in the graph\n        farthest_node = get_farthest_node(graph[current_node], distances)\n        if farthest_node is not None:\n            distances[current_node] = distances[farthest_node] + 1\n            get_distance_to_farthest_node(graph, distances, farthest_node)\n\n    num_nodes, num_edges, num_special_nodes = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(num_edges)]\n\n    distances = [0] * num_nodes\n    special_nodes = set(map(int, stdin.split()))\n    graph = {node: [] for node in range(num_nodes)}\n    for edge in edges:\n        node1, node2, weight = edge\n        graph[node1].append((node2, weight))\n        graph[node2].append((node1, weight))\n\n    for node in special_nodes:\n        distances[node] = 0\n        get_distance_to_farthest_node(graph, distances, node)\n\n    return''.join(map(str, distances))\n\n\nimport sys\n\nT = int(input())\n\nfor _ in range(T):\n    n, m, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n    dist = [-1] * n\n    special_nodes = set(x)\n    for i in special_nodes:\n        dist[i] = 0\n        q = [i]\n        while len(q) > 0:\n            node = q.pop(0)\n            for neighbour, weight in edges:\n                if neighbour == node and dist[neighbour] == -1:\n                    dist[neighbour] = weight\n                    q.append(neighbour)\n    print(' '.join(map(str, dist[x[k - 1]])))\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m, k = list(map(int, stdin.split()))\n    x = set(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = list(map(int, stdin.split()))\n        graph[u - 1].append((v - 1, w))\n        graph[v - 1].append((u - 1, w))\n\n    # Search farthest\n    distance = [float(\"-inf\") for _ in range(n)]\n    for i in range(n):\n        if i + 1 in x:\n            distance[i] = 0\n        else:\n            distance[i] = float(\"inf\")\n            for v, w in graph[i]:\n                if w >= distance[i]:\n                    distance[i] = w\n    x.clear()\n    x.add(distance.index(max(distance)))\n    for i in range(n):\n        if i + 1 in x:\n            continue\n        x.add(distance.index(min([distance[i], distance[j]])))\n\n    # Output\n    print(*x)\n    return \"\""
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0414\u0430\u043d \u0433\u0440\u0430\u0444, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0440\u0435\u0431\u0435\u0440. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0435\u0441\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0440\u0435\u0431\u0440\u0430. \u0412\u0435\u0440\u0448\u0438\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u044b\u043c\u0438 \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438.\n    \u0412\u0435\u0440\u0448\u0438\u043d\u0430 $x$ \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u043c\u0435\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0432\u0435\u0440\u0448\u0438\u043d \u0434\u043e\u043b\u0436\u043d\u0430 \u043d\u0430\u0439\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u0437 \u0432\u0441\u0435\u0445 \u0432\u0435\u0440\u0448\u0438\u043d, \u043d\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u043e\u0431\u0449\u0443\u044e \u043f\u043e\u0434\u0433\u0440\u0443\u043f\u043f\u0443. \u0415\u0441\u043b\u0438 \u043e\u043d\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f.\n\n    \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0440\u0435\u0431\u0435\u0440 \u0432\u0435\u0440\u0448\u0438\u043d\u044b $x$.\n\n    \u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f:\n    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d -\u00a0$n \\in [1, 10^5]$,\n    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0431\u0435\u0440 -\u00a0$m \\in [1, 10^5]$\n    \u0412\u0435\u0441 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 -\u00a0$10^9$\n    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043b\u0444\u0438 -\u00a0$k \\in [1, n-1]$\n\n    \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n    \u0412\u0435\u0441 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 -\u00a0$m$\u00a0\u0440\u0435\u0431\u0435\u0440\n    \u0412\u0435\u0440\u0448\u0438\u043d\u044b -\u00a0$n$\u00a0(\u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u044f \u0441\u0430\u043c\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b)\n\n    \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n    $k$\u00a0\u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 $-1$, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.\n\n    \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n    2 3 2\n    1 2 3\n    1 2 5\n    4 2 1\n    2 3 2\n    1 4 4\n    1 3 3\n\n    \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0432\u044b\u0445\u043e\u0434:\n    2 2\n    -1\n    3 3 3\n    \n    \u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430:\n    \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 - \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0433\u0440\u0430\u0444\n    \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e\u0438\u0441\u043a\u0430 \u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u0443 \u0438 \u043f\u043e\u0438\u0441\u043a \u0432 \u0448\u0438\u0440\u0438\u043d\u0443.\n    '''\n    pass"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4 5 3\n   ... 1 2 3\n   ... 1 2 5\n   ... 4 2 1\n   ... 2 3 2\n   ... 1 4 4\n   ... 1 3 3''')\n    '3 3 3'\n    '''\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    mapping = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        u, v, w = map(int, stdin.split('\\n')[i + 1].split())\n        mapping[u].append((v, w))\n        mapping[v].append((u, w))\n    res = [0 for _ in range(k)]\n    for i in range(1, k + 1):\n        res[i - 1] = max(res)\n        for start in mapping:\n            paths = [[start, 0]]\n            visited = set([start])\n            while paths:\n                current_path = paths.pop()\n                current_node, current_cost = current_path[-1]\n                visited.add(current_node)\n                for neighbor, edge_weight in mapping[current_node]:\n                    if neighbor == current_node:\n                        continue\n                    if neighbor in visited:\n                        continue\n                    new_cost = current_cost + edge_weight\n                    paths.append([neighbor, new_cost])\n                    if new_cost > res[i - 1]:\n                        break\n            if paths:\n                res[i - 1] = min(res[i - 1], paths[-1][1])\n    return''.join(map(str, res))"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    shells = [0, 0, 0]\n    turn = 1\n    while stdin!= \"\":\n        if turn % 2 == 1:\n            shells[int(stdin.split()[1])] = int(stdin.split()[0])\n        else:\n            shells[int(stdin.split()[0])] = int(stdin.split()[1])\n        turn += 1\n        stdin = input()\n    return str(shells.index(1))\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets n, x, prints the initial position\"\"\"\n    n = int(stdin.split('\\n')[0])\n    x = int(stdin.split('\\n')[1])\n    print(n % 3 if n % 2 else (n % 3 + 1) % 3)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    for _ in range(int(stdin)):\n        print(int(stdin[-1])-1)\n    return ''\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2\n   ... 1\n   ... ''')\n    '1'\n    >>> solution('''1\n   ... 1\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    x = int(stdin.split('\\n')[1])\n    shells = [0, 1, 2]\n    idx = 2\n    for i in range(n):\n        if i % 2 == 0:\n            shells[idx] = x\n            idx = (idx - 1) % 3\n        else:\n            shells[idx] = x\n            idx = (idx + 1) % 3\n    return str(shells[0])\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Time complexity: O(1), space complexity: O(1)\"\"\"\n    n = int(stdin)\n    x = int(stdin)\n    if (n & 1) == 0:\n        x = 2 if x == 1 else 1\n    return str(x)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The ball is initially placed beneath the middle shell and the operator completed\n    n - 1 movements. During the first move operator swapped the left shell and the\n    middle shell. The ball is now under the left shell. During the second move\n    operator swapped the middle shell and the right one. The ball is now in the\n    middle. During the third move operator swapped the left shell and the middle\n    shell again. The ball is still in the middle. Finally, the operators swapped\n    the middle shell and the right shell. The ball is now beneath the right shell.\n\n    The second question asks what is the initial position of the ball?\n\n    If the ball was initially under the middle shell, the answer should be 1.\n    If the ball was initially under the right shell, the answer should be 0.\n    \"\"\"\n\n    n = int(stdin)\n    x = int(stdin)\n\n    if (n % 2) == 1:\n        x ^= 1\n\n    return x\n\n\ndef"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    movements = int(stdin)\n    shell_x = int(stdin)\n    #print(movements, shell_x)\n    first_shell = 1\n    if movements % 2 == 1:\n        second_shell = 0\n    else:\n        second_shell = 2\n    #print(first_shell, second_shell)\n    for _ in range(movements):\n        shell_x = 2 if shell_x == 0 else 0\n        #print(shell_x)\n    return shell_x\n\ndef"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n % 2 == 1:\n        return 1\n    return 2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\" if n == 0 else \"1\"\n    return \"2\""
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_rects = int(stdin[0])\n    rectangles = []\n    for _ in range(num_rects):\n        rect = list(map(int, stdin[1+_].split()))\n        rectangles.append(rect)\n    \n    x_values = set()\n    y_values = set()\n    for rect in rectangles:\n        x_values.add(rect[0])\n        x_values.add(rect[2])\n        y_values.add(rect[1])\n        y_values.add(rect[3])\n    \n    x_values = list(sorted(x_values))\n    y_values = list(sorted(y_values))\n    if len(x_values)!= len(set(x_values)):\n        return \"NO\"\n    if len(y_values)!= len(set(y_values)):\n        return \"NO\"\n    \n    return \"YES\"\n    "
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(set(stdin.strip().split())) == 4 else 'NO'\n\n\ndef"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0433\u043e \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430.\n    \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u044b, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0447\u0435\u0442\u044b\u0440\u0435\u0445\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432.\n    \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n    \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u0443.\n\n    \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e 0 \\le n \\le 20  \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d.\n    \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 0 \\le x_1, \\, x_2 \\le 31400, 0 \\le y_1, \\, y_2 \\le 31400, \n    \u0433\u0434\u0435 (x_1, y_1) \u2014 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043b\u0435\u0432\u043e\u0433\u043e \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u0443\u0433\u043b\u0430, (x_2, y_2) \u2014 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0433\u043b\u0430. \n    \u0427\u0438\u0441\u043b\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\n    \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    \u0412 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 YES \u0438\u043b\u0438 NO.\n\n    \u0422\u0435\u0441\u0442 1\n    \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n    4\n    0 0 2 3\n    0 3 3 5\n    2 0 5 2\n    3 2 5 5\n    \u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n    NO\n\n    \u0422\u0435\u0441\u0442 2\n    \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n    6\n    0 0 2 3\n    0 3 3 5\n    2 0 5 2\n    3 2 5 5\n    2 2 3 3\n    2 2 3 3\n    \u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n    YES\n    \"\"\"\n    # print(stdin)\n    n = int(stdin.readline())\n    # print(n)\n    points = [list(map(int, stdin.readline().split())) for i in range(n)]\n    # print(points)\n    square = 0\n    for point in points:\n        # print(point)\n        if (point[0] in range(point[2], point[3]) and\n            point[1] in range(point[0], point[3]) and\n            point[0] in range(point[1], point[3]) and\n            point[1] in range(point[2], point[3])):\n            square += 1\n    if square == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rectangles = [list(map(int, line.split())) for line in stdin.splitlines()]\n    sorted_rectangles = sorted(rectangles, key=lambda x: x[0])\n\n    all_x = [r[0] for r in sorted_rectangles]\n    all_y = [r[1] for r in sorted_rectangles]\n\n    all_x.append(sorted_rectangles[-1][2])\n    all_y.append(sorted_rectangles[-1][3])\n\n    unique_x_coordinates = set(all_x)\n    unique_y_coordinates = set(all_y)\n\n    if len(unique_x_coordinates) > 2:\n        return 'NO'\n    elif len(unique_x_coordinates) == 2:\n        unique_x_coordinates = sorted(list(unique_x_coordinates))\n        unique_y_coordinates = sorted(list(unique_y_coordinates))\n\n        if len(unique_x_coordinates) == 1:\n            if unique_x_coordinates[0] == all_x[0] or unique_x_coordinates[0] == all_x[1]:\n                if unique_y_coordinates[0] == all_y[0] or unique_y_coordinates[0] == all_y[1]:\n                    return 'YES'\n\n        if len(unique_y_coordinates) == 1:\n            if unique_y_coordinates[0] == all_y[0] or unique_y_coordinates[0] == all_y[1]:\n                if unique_x_coordinates[0] == all_x[0] or unique_x_coordinates[0] == all_x[1]:\n                    return 'YES'\n        if len(unique_x_coordinates) == 1:\n            if unique_x_coordinates[0] == all_x[0]:\n                return 'YES'\n            else:\n                return 'NO'\n        elif len(unique_y_coordinates) == 1:\n            if unique_y_coordinates[0] == all_y[0]:\n                return 'YES'\n            else:\n                return 'NO'\n        else:\n            if unique_x_coordinates[0] == all_x[0]:\n                return 'YES'\n            elif unique_x_coordinates[1] == all_x[1]:\n                return 'YES'\n            else:\n                return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Don't print anything, just return 'YES' or 'NO'\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    k = n + 1\n    x = [a[i] for i in range(1, n + 1)]\n    y = [a[i] for i in range(n + 1, k)]\n    x.sort()\n    y.sort()\n    if x[0] == x[n - 1] and y[0] == y[n - 1]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    l = []\n    for i in range(1, n+1):\n        l.append(list(map(int, lines[i].split())))\n    # print(l)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(l[i][0])\n        y.append(l[i][1])\n    x.sort()\n    y.sort()\n    # print(x)\n    # print(y)\n    if (x[0] == x[n-1]) and (y[0] == y[n-1]):\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\")\n    'YES'\n    \"\"\"\n    n = int(stdin.readline())\n    rectangles = []\n    for _ in range(n):\n        rectangles.append([int(x) for x in stdin.readline().split()])\n    rectangles = sorted(rectangles, key=lambda x: (x[0], x[1]))\n    x_min = rectangles[0][0]\n    x_max = rectangles[0][2]\n    y_min = rectangles[0][1]\n    y_max = rectangles[0][3]\n    for rectangle in rectangles[1:]:\n        x_min = min(x_min, rectangle[0])\n        x_max = max(x_max, rectangle[2])\n        y_min = min(y_min, rectangle[1])\n        y_max = max(y_max, rectangle[3])\n    return 'YES' if (x_min == 0 and x_max == 31400) and (y_min == 0 and y_max == 31400) else 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'YES' if stdin == 'YES' else 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if len(set(map(tuple, stdin.split('\\n')[1:]))) == 4 else \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    return str(sum([1 for x in range(n) if x % 9 or n - sum(map(int, list(str(x)))) >= s]))\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    suma = 0\n    for i in range(1,n+1):\n        suma += i\n    if (suma - n) >= s:\n        return 0\n    else:\n        return (n-suma)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    return str(sum(i for i in range(n + 1) if len(str(i)) - sum(int(j) for j in str(i)) >= s))\nprint(solution(input()))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(' '))\n    return str(sum(len(str(n - sum([int(i) for i in str(n)]))) for n in range(1, n + 1) if n - sum([int(i) for i in str(n)]) >= s))\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split(' ')))\n    count = 0\n    for i in range(1, n + 1):\n        n_str = str(i)\n        n_sum = sum([int(x) for x in n_str])\n        if n_sum < i:\n            count += 1\n        elif n_sum == i:\n            count += 1\n        elif n_sum - s >= i:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(' ')\n    n = int(n)\n    s = int(s)\n    count = 0\n    for i in range(1, n+1):\n        sum = 0\n        while i!= 0:\n            sum += i % 10\n            i //= 10\n        if sum >= s:\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split(' '))\n    counter = 0\n    for i in range(n):\n        sum_n = 0\n        for j in str(i):\n            sum_n += int(j)\n        if sum_n - i < s:\n            counter += 1\n    return str(counter)"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(c) for c in stdin.split(' ')]\n    s = s ** 0.5\n\n    return sum(1 for i in range(1, n + 1) if i > s * (i - 1))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    count = 0\n    for i in range(1, n + 1):\n        sum_of_digits = 0\n        while i:\n            sum_of_digits += i % 10\n            i //= 10\n        if abs(i - sum_of_digits) >= s:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_points = int(stdin)\n    points = []\n    for i in range(num_of_points):\n        line = [int(j) for j in stdin.split(\" \")]\n        points.append(line)\n\n    points.sort(key=lambda x: x[0])\n\n    left = 0\n    right = num_of_points - 1\n\n    for i in range(num_of_points - 1):\n        if points[i][1] == points[i + 1][1]:\n            continue\n        left_max = points[i][0] + abs(points[i][1] - points[left][1])\n        right_min = points[i + 1][0] - abs(points[i + 1][1] - points[right][1])\n\n        if left_max > right_min:\n            right = i\n        elif right_min > left_max:\n            left = i\n\n        if left > right:\n            return \"YES\"\n\n    return \"NO\"\n\n\"\"\"\nimport sys\nimport math\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if len(set([i for i in range(len(stdin.split()))])) <= len(stdin.split()) - 3 else \"YES\"\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin.split()) == 1 else 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    n, *data = map(int, stdin.split('\\n'))\n    X = [x for x, y in data]\n    Y = [y for x, y in data]\n    return 'YES' if any(Y[i]!= Y[i + 1] for i in range(n - 1)) else 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if '1' in stdin or '3' in stdin or '5' in stdin else 'NO'\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return str((2 * k + 1) ** t)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(x) for x in stdin.split()]\n    print(2 * k * (k + 1) ** (t - 1) * (a - k) * (b - k))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the number of possible games for both people to win, then take the modulo of it.\n    \"\"\"\n    a, b, k, t = [int(i) for i in stdin.split(' ')]\n    return str(sum([b - a + 1 + 2 * i for i in range(0, k)]) * pow(2, k, 10 ** 9 + 7))\n\n\"\"\"\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of possible games satisfying the conditions.\"\"\"\n    a, b, k, t = [int(x) for x in stdin.split()]\n    mem_score = a\n    lexa_score = b\n    for _ in range(t):\n        mem_score = max(0, mem_score + k - 2)\n        lexa_score = max(0, lexa_score + k - 1)\n    return ((2 * k + 1) ** t - (k ** t) + 1) * mem_score * lexa_score % 1000000007\n\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, k, t = list(map(int, stdin.split()))\n    print((2 * k + 1) ** (t + 1) - (2 * k + 1) ** t)\n    return solution(stdin)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 2 1\")\n    6\n    \"\"\"\n    # N, M, K, T = map(int, stdin.split())\n    # for i in range(N):\n    #     for j in range(M):\n    #         for k in range(K):\n    #             for t in range(T):\n    #                 print(i, j, k, t)\n    #\n    # return 'a'\n    a, b, k, t = map(int, stdin.split())\n    # print(a, b, k, t)\n    s = {0, 1}\n    for i in range(t):\n        s = {sum(i % 2 for i in s) % 2} | {0}\n        # print(s)\n    print(len(s))\n    return 'a'\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return f'{((2 * k + 1) ** t) % 1000000007}'\n\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k, t) = map(int, stdin.split())\n    return f'{math.comb(2 * k + 1, t) * math.comb(k, a + b) % (10**9 + 7)}'\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # === Read input\n    a, b, k, t = map(int, stdin.split())\n    assert a >= 0 and b >= 0\n    assert k > 0\n    assert t > 0\n\n    # === Solve problem\n    # === Declare and initialize variables\n\n    # === While loop\n    ans = 0\n    while True:\n\n        # === Update answer if necessary\n        ans = (ans + 2 * k) % 1000000007\n\n        # === Break if answer is too large\n        if ans >= 1000000007:\n            break\n\n        # === Update variables\n        k = k * 2\n        t = t - 1\n\n    # === Return answer\n    return ans % 1000000007\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(x) for x in stdin.split()]\n    return str(binomial(k * t + t, t) % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) > y:\n                break\n            if abs(a[i] - a[j]) == y:\n                count += 1\n                break\n            if abs(a[i] - a[j]) < x:\n                break\n    return f\"{count}\\n{a[count:]}\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    finds the minimum number of marks needed to be able to measure the distances of x and y centimeters on a ruler\n    '''\n    n, l, x, y = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    \n    if x == y:\n        return '0'\n    elif l - y < x:\n        return '0'\n    \n    # set up the dictionary where key is the index and the value is the distance from the origin\n    d = {i: a[i] - a[0] for i in range(len(a))}\n    \n    # find the number of marks with the same distance from the origin\n    d_keys = list(d.keys())\n    c = {}\n    \n    for k in d_keys:\n        if d[k] == x:\n            c[k] = 1\n        elif d[k] == y:\n            c[k] = 1\n    \n    if len(c) == 0:\n        return '0'\n    \n    # find the number of marks with the same distance from the origin\n    l_set = set()\n    for k in d_keys:\n        l_set.add(d[k])\n    \n    # get the minimum number of marks needed to be able to measure the distance\n    l_set = list(l_set)\n    l_set.sort()\n    v = l_set[0]\n    \n    # set up the dictionary where key is the distance from the origin and the value is the number of marks with that distance\n    c = {i: 0 for i in l_set}\n    \n    for k in d_keys:\n        if d[k] == v:\n            c[v] += 1\n    \n    if c[v] < len(l_set):\n        return '0'\n    \n    # find the minimum number of marks needed to be able to measure the distance\n    for i in range(1, len(l_set)):\n        if l_set[i] - l_set[i - 1] > x:\n            return '0'\n        \n    return str(len(c)) +'' + str(l_set[c[v]])\n    \n    \n    \n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, l, x, y = map(int, stdin.split())\n    marks = map(int, stdin.split())\n    s = sum(marks)\n    \n    if s < x:\n        return \"0\"\n    \n    if x == y:\n        return str(n)\n    \n    d = (x - y) // 2\n    marks = list(marks)\n    \n    for i in range(len(marks) - 1):\n        if marks[i] >= x - d:\n            break\n        marks[i] = marks[i] + d\n        \n    marks[i] = marks[i] + x - d\n    marks[len(marks) - 1] = l\n    marks = list(map(str, marks))\n    marks = \" \".join(marks)\n    return marks\n    \n    \n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    marks.insert(0, 0)\n    marks.append(l)\n    n += 2\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for d in range(1, n):\n        for i in range(1, n - d):\n            j = i + d\n            dp[i][j] = d\n            for k in range(i, j):\n                if marks[k + 1] - marks[i] == d or marks[j] - marks[k + 1] == d:\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n    print(dp[1][n - 1])\n    return''.join(map(str, [m for m in dp[1][n - 1]]))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, l, x, y = [int(x) for x in stdin[0].split(' ')]\n    mark = [int(x) for x in stdin[1].split(' ')]\n    mark.sort()\n    pos = {mark[i]: i for i in range(len(mark))}\n    x_pos = mark.index(x)\n    y_pos = mark.index(y)\n    if x_pos >= y_pos:\n        return 0\n    if l < x:\n        return 0\n    if l < y:\n        return 2\n    num_of_moves = y_pos - x_pos\n    num_of_marks = l // x\n    num_of_marks -= 1\n    if num_of_marks * y < l:\n        num_of_marks += 1\n    num_of_marks += 1\n    return num_of_marks\n\n\n\"\"\""
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, n, x, y = list(map(int, stdin.split()))\n    marks = list(map(int, stdin.split()))\n    if n == 2:\n        return max(marks[1] - marks[0], x - y)\n    return max(marks[n] - marks[n - 1], l - max(marks[1:n - 1]))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 250 185 230\n   ... 0 185 250\n   ... ''')\n    '1\n    230\n    >>> solution('''4 250 185 230\n   ... 0 20 185 250\n   ... ''')\n    '0\n    230\n    >>> solution('''2 300 185 230\n   ... 0 300\n   ... ''')\n    '2\n    185 230\n    \"\"\"\n    _, l, x, y = map(int, stdin.split())\n    marks = list(map(int, stdin.split()[1:]))\n    # z_i - z_j = d\n    # x_i - z_j = -d\n    # x_j - z_j = d\n    d = x - y\n    ruler_marks = set()\n    for i in range(len(marks)):\n        for j in range(i + 1, len(marks)):\n            if marks[j] - marks[i] == d:\n                ruler_marks.add(i + 1)\n                ruler_marks.add(j + 1)\n    marks_to_add = d - (l - marks[-1])\n    return '{} {}'.format(marks_to_add,''.join(map(str, ruler_marks)))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    cakes = []\n    for i in range(n):\n        radius, height = map(int, inputs[i+1].split())\n        cakes.append((radius, height))\n    cakes.sort(key=lambda x: x[0])\n    return sum(cakes[i][1] for i in range(n))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = [tuple(map(int, line.split())) for line in stdin.split('\\n')]\n    cakes.sort(key=lambda c: c[0] * c[1])\n\n    ans = 0\n    for cake in cakes:\n        # if last cake on the table has less radius than this cake, it's possible\n        # to put it on the last cake that's on the table. Otherwise this cake should\n        # be placed on some cake earlier in the table.\n        if cake[0] < cakes[-1][0]:\n            ans += cakes[-1][0] * cakes[-1][1]\n        else:\n            for i in range(len(cakes)):\n                # find the cake that's on the table and can fit this cake on top\n                if cakes[i][0] > cake[0] and cakes[i][1] >= cake[1]:\n                    break\n            ans += cakes[i][0] * cakes[i][1]\n            # removing the cake that's already on the table from the cakes array\n            cakes.pop(i)\n\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function returns the maximum volume of the cake that Babaei can make\n    :param stdin: The number of simple cakes and their dimensions\n    :return: The maximum volume of the cake\n    \"\"\"\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    cakes = [tuple(map(int, stdin.split(\"\\n\")[1].split())) for _ in range(n)]\n    cakes.sort(reverse=True)\n\n    max_volume = 0\n    for i in range(n):\n        for j in range(i):\n            r, h = cakes[i]\n            if h < cakes[j][1]:\n                break\n        else:\n            if r * h > max_volume:\n                max_volume = r * h\n\n    return str(round(max_volume, 6))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cakes = [tuple(map(int, line.split())) for line in stdin]\n    cakes = [(r, h) for r, h in cakes if r <= h]\n    cakes = sorted(cakes, key=lambda x: x[1])\n    dp = [0] * len(cakes)\n    dp[0] = cakes[0][1]\n    for i in range(1, n):\n        for j in range(i):\n            if cakes[i][0] < cakes[j][0] and cakes[i][1] < cakes[j][1]:\n                dp[i] = max(dp[j] + cakes[i][1], dp[i])\n        dp[i] = max(dp[i], dp[i - 1])\n    return dp[-1]\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cake_list = [list(map(int, stdin.readline().strip().split(\" \"))) for _ in range(n)]\n    cake_list.sort(key=lambda x: x[1], reverse=True)\n    volume = 0\n    for i in range(n):\n        r, h = cake_list[i]\n        volume += (3.14 * r ** 2 * h) / 3\n    return str(round(volume, 6))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function gets the input from stdin and returns the answer\n    :param stdin: the input string\n    :return: the answer for the given input\n    \"\"\"\n    import numpy as np\n    # extract the input\n    number_of_cakes = int(stdin)\n    # create the list of recipes for cakes\n    recipes = []\n    for i in range(number_of_cakes):\n        recipes.append(list(map(int, stdin.split(\" \"))))\n    # sort the recipes by volume\n    recipes.sort(key=lambda x: x[1], reverse=True)\n    # initiate the result\n    result = 0\n    # while there are still recipes to add\n    while len(recipes) > 0:\n        # calculate the volume of the cake to be added\n        volume = recipes[0][1] * recipes[0][0]\n        # add the volume to the result\n        result += volume\n        # add the cake to the list of cakes\n        recipes.pop(0)\n        # repeat the same process until there are no more recipes\n    return str(result)\n\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def insert(s: list, val: int) -> None:\n        # insert val at the beginning of the list\n        s.insert(0, val)\n\n    def pop(s: list) -> int:\n        # remove and return the first element of the list\n        return s.pop(0)\n\n    def remove(s: list, val: int) -> None:\n        # remove all elements equal to val\n        while val in s:\n            s.remove(val)\n\n    def count(s: list) -> int:\n        # return the number of elements equal to val in the list\n        return s.count(val)\n\n    def is_valid(n: int) -> bool:\n        # True if n is valid, False otherwise\n        return sum(count(s) for s in towers) == n\n\n    towers = [int(s) for s in stdin.split()]\n    slices = []\n    for i in range(len(towers)):\n        insert(slices, count(towers) - i)\n        remove(towers, count(slices))\n    return len(slices)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    return print(solution_helper(arr, k))\n\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    h = list(map(int, stdin.split(' ')))\n    h.sort()\n    best = 0\n    for i in range(n):\n        if h[i] < k:\n            continue\n        best = max(best, i)\n    return str(best)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    cost = 0\n    for i in range(n - 1):\n        cost += h[i] - h[i + 1]\n    return cost if cost <= k else 0\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    h = [int(c) for c in stdin.split(' ')]\n    \n    return n - len(set(h))\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Get a string with n and k values\n    Iterate through the array with heights\n    Get the tallest tower height\n    Get the max number of slices\n    Iterate through the array with heights again\n    Get the height of each tower\n    Get the maximum number of slices possible for each tower\n    Iterate through the array with heights again\n    Get the number of slices that are lower than the max\n    Get the total number of slices\n    Return the total number of slices\n    '''\n    n, k = map(int, stdin.readline().split())\n    height = list(map(int, stdin.readline().split()))\n    tallest_tower = max(height)\n    max_slices = 0\n    for h in height:\n        max_slices += tallest_tower - h\n    slices_lower_than_tallest = 0\n    for h in height:\n        slices_lower_than_tallest += max_slices - (tallest_tower - h)\n    total_slices = k * n - slices_lower_than_tallest\n    return total_slices\n\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    dp = [0 for i in range(n)]\n\n    for i in range(n):\n        dp[i] = k\n        for j in range(i):\n            if h[i] >= h[j]:\n                dp[i] = min(dp[j] + k, dp[i])\n\n    return dp[n - 1]\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the task.\"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n - 1):\n        res += min(arr[i], arr[i + 1])\n    return res"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'hi'"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cards, *_ = stdin.split('\\n')\n    cards = list(map(int, cards.split()))\n\n    total = sum(cards)\n    mini = total\n    for i in range(1, len(cards)):\n        total -= cards[i - 1]\n        total += cards[i]\n        if total < mini:\n            mini = total\n\n    return mini\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def play_and_find(segments):\n        # choose card with lowest value in segment\n        l, r, total, score = segments[0]\n        max_score = score\n        for l, r, total, score in segments:\n            if score < max_score:\n                break\n            if total == score:\n                max_score = score\n            elif total > score:\n                max_score = score + total\n        return max_score\n    n = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split()))\n    segments = []\n    for i, card in enumerate(cards):\n        l, r = i, i\n        while r < n and cards[r] == card:\n            r += 1\n        segments.append((l, r, card, card * (r - l)))\n    max_score = play_and_find(segments)\n    print(max_score)\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = [int(x) for x in stdin.readline().strip().split(' ')]\n    best_score = -float('inf')\n    for l in range(n):\n        for r in range(l + 2, n + 1):\n            score = sum(cards[l:r])\n            best_score = max(score, best_score)\n    print(best_score)\n    return ''\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split(\"\\n\")[:2])\n    print(sum([max(0, -a[i - 1]) for i in range(1, n + 1)]))\n    return \"\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    k1, k2, k3 = sorted((k1, k2, k3))\n    if k3 % k1 > 0 or k3 % k2 > 0:\n        return \"NO\"\n    return \"YES\"\n    return \"\""
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You have 3 garlands, and each of them can be in one of 2 states: lit or not. Each garland can be switched on at a certain time, and each time there is some time that the garland is switched on, and the garland is lit.\n    \n    The problem is to choose 3 times, when the 3-rd garland will be lit and the 1-st and 2-nd garlands will be in their initial state.\n    \n    If there is no way to choose 3 times, then output \"NO\".\n    \n    Args:\n        stdin(str): input on STDIN\n\n    Returns:\n        str: output to STDOUT\n\n    Raises:\n        -\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k_1, k_2, k_3 = map(int, stdin.split(' '))\n    cnt = 0\n    for i in range(k_1):\n        cnt += (i + 1) * (k_1 + k_2 + k_3 - i) // 2\n    for i in range(k_2):\n        cnt += (i + 1) * (k_1 + k_2 + k_3 - i) // 2\n    for i in range(k_3):\n        cnt += (i + 1) * (k_1 + k_2 + k_3 - i) // 2\n    if cnt <= k_1:\n        return 'YES'\n    else:\n        return 'NO'\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(i) for i in stdin.split()]\n    first = True\n    for i in range(len(lst)):\n        if lst[i] > 1:\n            if first:\n                first = False\n            else:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = [int(x) for x in stdin.split()]\n    if k1 == k2 == k3:\n        return 'YES' if sum(k1, k2, k3) > 1 else 'NO'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    if k3 < k1:\n        return \"NO\"\n    if k3 < k2:\n        return \"YES\"\n    a, b, c = sorted([k1, k2, k3])\n    ans = \"YES\"\n    for i in range(b, c):\n        ans += '\\n' + str(i)\n    return ans\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n\n    return 'YES' if a * b * c <= 2 * min(a, b, c) else 'NO'"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    k = [k1, k2, k3]\n    k.sort()\n    x = k[0]\n    if max(k) <= x:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = list(map(int, stdin.split()))\n    return 'YES' if max(k1, k2, k3) >= 2 * min(k1, k2, k3) else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2 3\")\n    'NO'\n    >>> solution(\"2 2 3\")\n    'YES'\n    \"\"\"\n    times = [int(x) for x in stdin.split(\" \")]\n    k1, k2, k3 = times\n    k1, k2, k3 = sorted(times)\n    if k1 == k2 == k3:\n        return \"NO\"\n\n    k = k1 + k2 + k3\n    k_min = max(k1, k2, k3)\n    k_max = k + k_min\n\n    if k_max % k_min:\n        return \"NO\"\n\n    counter = 0\n    for i in range(k_min, k_max + 1):\n        if i % k1 == 0:\n            counter += 1\n        if i % k2 == 0:\n            counter += 1\n        if i % k3 == 0:\n            counter += 1\n\n    return \"NO\" if counter < 3 else \"YES\"\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    n = len(input_string)\n    # O(n)\n    # unique_characters = set(input_string)\n    # O(n)\n    # num_unique_characters = len(unique_characters)\n    # O(n)\n    # count_characters = [input_string.count(x) for x in unique_characters]\n    # O(n)\n    # characters = [x for x in unique_characters]\n\n    # O(n^2)\n    # start_index = 0\n    # while start_index < n - 1:\n    #     while start_index < n - 1 and input_string[start_index] == input_string[start_index + 1]:\n    #         start_index += 1\n    #     end_index = start_index + 1\n    #     while end_index < n and input_string[start_index] == input_string[end_index]:\n    #         end_index += 1\n    #     input_string = input_string[0:start_index] + input_string[end_index:]\n    #     n = len(input_string)\n    #     start_index = 0\n    #     # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # # O(n)\n    # for character in characters:\n    #     while character in input_string:\n    #         input_string = input_string.replace(character, '', 1)\n    #         num_swaps += 1\n    # # O(n)\n\n    # O(n)\n    # count_dict = {input_string[i]: 0 for i in range(n)}\n    # for char in input_string:\n    #     count_dict[char] += 1\n    # # O(n)\n    # # O(n)\n\n    # O(n)\n    # count_list = []\n    # for character in input_string:\n    #     count_list.append(count_dict[character])\n    # # O(n)\n    # # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # for i in range(n):\n    #     if count_list[i] == 1:\n    #         continue\n    #     if i + 1 < n:\n    #         if count_list[i]!= count_list[i + 1]:\n    #             num_swaps += count_list[i] // 2\n    #             count_list[i] = count_list[i + 1]\n    #             count_list[i + 1] = count_list[i + 1] - count_list[i] + 1\n    #     if i - 1 >= 0:\n    #         if count_list[i]!= count_list[i - 1]:\n    #             num_swaps += count_list[i] // 2\n    #             count_list[i] = count_list[i - 1]\n    #             count_list[i - 1] = count_list[i - 1] - count_list[i] + 1\n    # O(n)\n    # O(n)\n    # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # count_dict = {input_string[i]: 0 for i in range(n)}\n    # for char in input_string:\n    #     count_dict[char] += 1\n    # # O(n)\n    # # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # for i in range(n):\n    #     if count_dict[input_string[i]] == 1:\n    #         continue\n    #     if i + 1 < n:\n    #         if count_dict[input_string[i]]!= count_dict[input_string[i + 1]]:\n    #             num_swaps += count_dict[input_string[i]] // 2\n    #             count_dict[input_string[i]] = count_dict[input_string[i + 1]]\n    #             count_dict[input_string[i + 1]] = count_dict[input_string[i + 1]] - count_dict[input_string[i]] + 1\n    #     if i - 1 >= 0:\n    #         if count_dict[input_string[i]]!= count_dict[input_string[i - 1]]:\n    #             num_swaps += count_dict[input_string[i]] // 2\n    #             count_dict[input_string[i]] = count_dict[input_string[i - 1]]\n    #             count_dict[input_string[i - 1]] = count_dict[input_string[i - 1]] - count_dict[input_string[i]] + 1\n    # O(n)\n    # O(n)\n    # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # count_dict = {input_string[i]: 0 for i in range(n)}\n    # for char in input_string:\n    #     count_dict[char] += 1\n    # # O(n)\n    # # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # count_list = []\n    # for character in input_string:\n    #     count_list.append(count_dict[character])\n    # # O(n)\n    # # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # for i in range(n):\n    #     if count_list[i] == 1:\n    #         continue\n    #     if i + 1 < n:\n    #         if count_list[i]!= count_list[i + 1]:\n    #             num_swaps += count_list[i] // 2\n    #             count_list[i] = count_list[i + 1]\n    #             count_list[i + 1] = count_list[i + 1] - count_list[i] + 1\n    #     if i - 1 >= 0:\n    #         if count_list[i]!= count_list[i - 1]:\n    #             num_swaps += count_list[i] // 2\n    #             count_list[i] = count_list[i - 1]\n    #             count_list[i - 1] = count_list[i - 1] - count_list[i] + 1\n    # O(n)\n    # O(n)\n    # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # count_dict = {input_string[i]: 0 for i in range(n)}\n    # for char in input_string:\n    #     count_dict[char] += 1\n    # # O(n)\n    # # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # count_list = []\n    # for character in input_string:\n    #     count_list.append(count_dict[character])\n    # # O(n)\n    # # O(n)\n\n    # O(n)\n    # num_swaps = 0\n    # for i in range(n):\n    #     if count_list[i] == 1:\n    #         continue\n    #     if i + 1 < n:\n    #         if count_list[i]!= count_list[i + 1]:\n    #             num_swaps += count_list[i] // 2\n    #             count_list[i] = count_list[i + 1]\n    "
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abaca\")\n    3\n    >>> solution(\"abcddcba\")\n    4\n    >>> solution(\"abb\")\n    0\n    >>> solution(\"abbacaba\")\n    2\n    \"\"\"\n\n    pass\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    # \u78ba\u5b9a\u53ea\u6709\u4e00\u500b\u5b57\u5143\n    if n == 1:\n        return 0\n    # \u78ba\u5b9a\u53ea\u6709\u4e00\u500b\u5b57\u5143\n    elif n == 2:\n        if s[0] == s[1]:\n            return 1\n        else:\n            return 2\n    else:\n        # \u5f9e\u7b2c\u4e8c\u500b\u5b57\u5143\u958b\u59cb\u6bd4\u8f03\n        i = 2\n        while i < n:\n            # \u78ba\u5b9a\u524d\u4e00\u500b\u5b57\u5143\u8207\u76ee\u524d\u5b57\u5143\u6bd4\u8f03\u4e0d\u4e00\u6a23\n            if s[i - 1]!= s[i]:\n                return i\n            else:\n                i += 1\n        # \u5982\u679c\u90fd\u4e00\u6a23\uff0c\u5247\u4ee3\u8868\u53ea\u8981\u522a\u9664\u6700\u5f8c\u4e00\u500b\u5b57\u5143\n        return n - 1\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    return answer\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    # If we don't have a base case, then it's not a valid string.\n    if len(s) < 2:\n        return 0\n\n    # Find the first non-equal character.\n    for i, c in enumerate(s):\n        if i + 1 < len(s) and c!= s[i + 1]:\n            break\n\n    # If we did not find one, then all characters are equal.\n    if i == len(s) - 1:\n        return len(s) - 1\n\n    # If the current character is equal to the one after it, and we have no more than one character, then we must delete the character.\n    if i == len(s) - 2 or c!= s[i + 2]:\n        return solution(s[:i] + s[i + 1:]) + 1\n\n    # If we have more than one character, then it's a repeated character.\n    # Find the first character that is not equal to the current character.\n    for j, d in enumerate(s[i + 2:]):\n        if c!= d:\n            break\n\n    # Now, if the distance between the characters is more than one, we can delete the current character and the next one.\n    return solution(s[:i] + s[i + j + 2:]) + 1\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if j - i > n:\n                break\n            if s[i] == s[j]:\n                continue\n            if s[i] == s[j - 1]:\n                cnt += 1\n            else:\n                break\n    print(cnt)\n\n\nsolution(str(input()))\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 1:\n        return 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            x = s[0:i]+s[i+2:]\n            if len(x) == 1:\n                return 1\n            else:\n                return 1+solution(x)\n    return 1\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length == 1:\n        return 0\n    else:\n        letters = list(stdin)\n        if set(stdin) == {'a'}:\n            return length - 1\n        else:\n            return 1 + length - (max(set(stdin), key=stdin.count))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = [int(c) for c in stdin.split(\"\\n\")]\n    boys_sorted = sorted(int(input()) for _ in range(boys))\n    girls_sorted = sorted(int(input()) for _ in range(girls))\n\n    best_diff = 0\n    i = 0\n    j = 0\n    while i < len(boys_sorted) and j < len(girls_sorted):\n        best_diff = max(best_diff, abs(boys_sorted[i] - girls_sorted[j]))\n        if boys_sorted[i] < girls_sorted[j]:\n            i += 1\n        else:\n            j += 1\n    return str(best_diff)"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem.\"\"\"\n    boys = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    girls = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    boys.sort()\n    girls.sort()\n    best = 0\n    for b in range(len(boys)):\n        for g in range(len(girls)):\n            best = max(best, abs(boys[b] - girls[g]))\n    return best"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    boys = [int(x) for x in stdin[0].split(' ')]\n    girls = [int(x) for x in stdin[1].split(' ')]\n    boys.sort()\n    girls.sort()\n    boy_dance_skills = [0] * 101\n    for i in range(len(boys)):\n        boy_dance_skills[boys[i]] = i + 1\n    girl_dance_skills = [0] * 101\n    for i in range(len(girls)):\n        girl_dance_skills[girls[i]] = i + 1\n    result = 0\n    for i in range(101):\n        if boy_dance_skills[i] and girl_dance_skills[i]:\n            result = max(result, boy_dance_skills[i] * girl_dance_skills[i])\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    boys_skills = inputs[1].split()\n    boys_skills = [int(skill) for skill in boys_skills]\n    boys_skills.sort()\n\n    girls_skills = inputs[2].split()\n    girls_skills = [int(skill) for skill in girls_skills]\n    girls_skills.sort()\n\n    matches = 0\n    for boy_skill in boys_skills:\n        start = 0\n        end = len(girls_skills) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if girls_skills[mid] - boy_skill <= 1:\n                matches += end - mid + 1\n                break\n            elif girls_skills[mid] - boy_skill > 1:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return matches\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = int(stdin.readline().strip()), int(stdin.readline().strip())\n    boys_set = set()\n    boys_score = 0\n    for i in range(boys):\n        boys_score = int(stdin.readline().strip())\n        boys_set.add(boys_score)\n    boys_set = list(boys_set)\n    boys_set.sort(reverse=True)\n    girls_set = []\n    girls_score = []\n    for i in range(girls):\n        girls_score = int(stdin.readline().strip())\n        girls_set.append(girls_score)\n    girls_set.sort()\n    result = 0\n    for i in range(len(boys_set)):\n        for j in range(len(girls_set)):\n            if abs(boys_set[i] - girls_set[j]) <= 1:\n                result += 1\n                break\n    return result\n\nprint(solution(stdin))"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin[0]\n    boys = [int(num) for num in boys.split()]\n\n    girls = stdin[1]\n    girls = [int(num) for num in girls.split()]\n\n    # Determine the maximum number of pairs\n    max_pairs = 0\n    boys_len = len(boys)\n    girls_len = len(girls)\n    for boy in boys:\n        for girl in girls:\n            if boy == girl:\n                continue\n            elif abs(boy - girl) == 1:\n                max_pairs += 1\n\n    return max_pairs"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Boy's dancing skills\n    boys_dancing_skills = stdin.split('\\n')[0]\n    boys_dancing_skills = [int(x) for x in boys_dancing_skills.split()]\n    boys_dancing_skills.sort()\n    # Girl's dancing skills\n    girls_dancing_skills = stdin.split('\\n')[1]\n    girls_dancing_skills = [int(x) for x in girls_dancing_skills.split()]\n    girls_dancing_skills.sort()\n    # Logic\n    boys_length = len(boys_dancing_skills)\n    girls_length = len(girls_dancing_skills)\n    #\n    boy_idx = 0\n    girl_idx = 0\n    pairs = 0\n    #\n    while boy_idx < boys_length and girl_idx < girls_length:\n        #\n        while boy_idx < boys_length and boys_dancing_skills[boy_idx] - 1 <= girls_dancing_skills[girl_idx]:\n            boy_idx += 1\n        #\n        pairs += girl_idx\n        #\n        girl_idx += 1\n    #\n    return pairs\n\nprint(solution('4\\n1 2 3 4\\n5\\n5 1 5 7 9'))\nprint(solution('5\\n1 1 1 1 1\\n3\\n1 2 3'))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    team_1 = []\n    team_2 = []\n    # read input\n    for player in stdin.split(\"\\n\"):\n        team_1.append(int(player.split(\" \")[0]))\n        team_2.append(int(player.split(\" \")[1]))\n\n    # find who wins\n    defend = max(team_1)\n    attack = max(team_2)\n\n    if defend >= attack:\n        return \"Team 1\"\n    if attack >= defend:\n        return \"Team 2\"\n\n    return \"Draw\"\n\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # this is the solution for the first problem, but it's probably not the optimal solution\n    players_info = stdin.split('\\n')\n    attack, defence = [int(x) for x in players_info[0].split()]\n    for team in players_info[1:]:\n        # TODO: how can i optimize this algorithm?\n        attack_team = [int(x) for x in team.split()]\n        if attack > defence:\n            return 'Team 1'\n        elif defence > attack:\n            return 'Team 2'\n    return 'Draw'\n\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    defence, attack = list(map(int, stdin.split()))\n    if defence > attack:\n        if attack > defence:\n            return \"Team 2\"\n        else:\n            return \"Team 1\"\n    else:\n        if defence > attack:\n            return \"Team 1\"\n        else:\n            return \"Team 2\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    fst_team, scnd_team = stdin.split('\\n')\n    fst_team = list(map(int, fst_team.split()))\n    scnd_team = list(map(int, scnd_team.split()))\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    first_team = []\n    second_team = []\n    for line in stdin.splitlines():\n        first_team.append(int(line.split()[0]))\n        second_team.append(int(line.split()[1]))\n\n    first_team.sort()\n    second_team.sort()\n    print(first_team, second_team)\n\n    first_team_att = [i for i, x in enumerate(first_team) if x == 1]\n    first_team_def = [i for i, x in enumerate(first_team) if x == 100]\n    second_team_att = [i for i, x in enumerate(second_team) if x == 1]\n    second_team_def = [i for i, x in enumerate(second_team) if x == 100]\n\n    print(first_team_att, first_team_def, second_team_att, second_team_def)\n\n    if first_team_att:\n        if first_team_def:\n            return \"Draw\"\n        else:\n            return \"Team 1\"\n    elif second_team_att:\n        return \"Team 2\"\n    else:\n        if first_team_def:\n            return \"Team 1\"\n        elif second_team_def:\n            return \"Team 2\"\n        else:\n            return \"Draw\""
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    team_a, team_b = [], []\n    team_a_score, team_b_score = 0, 0\n    for i in range(0, len(lines)):\n        a, b = list(map(int, lines[i].split(' ')))\n        if i % 2 == 0:\n            team_a.append([a, b])\n        else:\n            team_b.append([a, b])\n\n    for j in range(0, len(team_a)):\n        if team_a[j][0] > team_b[j][1] and team_a[j][1] > team_b[j][0]:\n            team_a_score += 1\n        elif team_b[j][0] > team_a[j][1] and team_b[j][1] > team_a[j][0]:\n            team_b_score += 1\n\n    if team_a_score > team_b_score:\n        return 'Team 1'\n    elif team_a_score < team_b_score:\n        return 'Team 2'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # 1. get data\n    # 2. verify the conditions\n    # 3. return the result\n\n    return \"\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    a = list(map(int, n[0].split()))\n    b = list(map(int, n[1].split()))\n\n    a = sorted(a)\n    b = sorted(b)\n\n    return \"Team 1\" if a[0] > b[0] and a[1] > b[1] else \"Team 2\" if a[0] < b[0] and a[1] < b[1] else \"Draw\"\n\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    defence, attack, team1, team2 = stdin.split('\\n')\n    team1 = list(map(int, team1.split(' ')))\n    team2 = list(map(int, team2.split(' ')))\n    if team1[0] > team2[1] and team1[1] > team2[0]:\n        return 'Team 1'\n    elif team2[0] > team1[1] and team2[1] > team1[0]:\n        return 'Team 2'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    'zalando'\n    pass\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the optimal heat source location using a greedy algorithm.\"\"\"\n    food_count = stdin.split('\\n')[0].split()\n    food_count = int(food_count[0]), int(food_count[1])\n    food_list = stdin.split('\\n')[1:][:-1]\n    food_list = [[float(i) for i in food_list[i].split()] for i in range(food_count[0])]\n    # Set x, y, and c values\n    x_y_c = []\n    for i in range(food_count[0]):\n        x_y_c.append(food_list[i][0])\n        x_y_c.append(food_list[i][1])\n        x_y_c.append(food_list[i][2])\n    # Create initial x and y variables\n    x = x_y_c[::3]\n    y = x_y_c[1::3]\n    # Set all possible variables\n    var = []\n    for i in range(food_count[0]):\n        for j in range(food_count[0]):\n            var.append((x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2)\n    # Set initial length\n    length = var[0]\n    for i in range(food_count[0] ** 2):\n        for j in range(food_count[0] ** 2):\n            length = min(length, var[i + j])\n    # Calculate the length of the route\n    route = []\n    while length > 0:\n        index = var.index(length)\n        route.append((x[index // food_count[0]], y[index % food_count[0]]))\n        var[index] = 1000000\n        length -= 1\n    # Calculate the time it takes to route\n    time = 0\n    for i in range(len(route) - 1):\n        time += route[i][2] * math.sqrt(route[i][0] ** 2 + route[i][1] ** 2)\n    return str(time)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    X, Y = [0 for _ in range(K)], [0 for _ in range(K)]\n    C = [0 for _ in range(K)]\n    for i in range(K):\n        X[i], Y[i], C[i] = map(int, stdin.readline().split())\n    time = 100000\n    for i in range(K):\n        for j in range(K):\n            if i == j:\n                continue\n            dis = math.sqrt((X[j] - X[i]) ** 2 + (Y[j] - Y[i]) ** 2)\n            time = min(time, C[i] * math.sqrt(dis))\n    print(time)"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\")\n    2.4\n    '''\n    x, y, c = [], [], []\n    for line in stdin.splitlines():\n        line = line.split()\n        x.append(int(line[0]))\n        y.append(int(line[1]))\n        c.append(int(line[2]))\n    n = len(x)\n    m = n - 1\n    x.sort()\n    y.sort()\n    d = 100\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (x[j] - x[i]) ** 2 + (y[j] - y[i]) ** 2 < d:\n                d = (x[j] - x[i]) ** 2 + (y[j] - y[i]) ** 2\n    for i in range(n):\n        d = 100\n        for j in range(n):\n            if i!= j:\n                if (x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2 < d:\n                    d = (x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2\n        c[i] *= math.sqrt(d)\n    return str(max(c) / c[0])\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Implement me!\n    pass\n\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\")\n    2.4\n    \"\"\"\n    n, k = map(int, stdin.split())\n    meats = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    from math import sqrt\n\n    def distance(x1, y1, x2, y2):\n        return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n    # O(k * n^2)\n    # O(n^2)\n    best = float(\"inf\")\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            d = distance(meats[i][0], meats[i][1], meats[j][0], meats[j][1])\n            best = min(best, d * meats[i][2])\n    return best\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    Xs, Ys, Cs = [], [], []\n    for _ in range(N):\n        X, Y, C = map(int, stdin.split())\n        Xs.append(X)\n        Ys.append(Y)\n        Cs.append(C)\n    min_time = float(\"inf\")\n    best_coord = None\n    for x in range(Xs[0] + 1):\n        for y in range(Ys[0] + 1):\n            time_sum = 0\n            if x == 0 and y == 0:\n                continue\n            for i in range(N):\n                distance = math.sqrt((Xs[i] - x) ** 2 + (Ys[i] - y) ** 2)\n                time_sum += Cs[i] * distance\n                if time_sum > K:\n                    break\n            if time_sum <= K:\n                min_time = min(min_time, time_sum)\n    return str(min_time)"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    n, k = map(int, stdin.readline().split())\n    x, y = [], []\n    for i in range(n):\n        x_i, y_i = map(int, stdin.readline().split())\n        x.append(x_i)\n        y.append(y_i)\n    _min = float(\"inf\")\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            c_i, c_j = map(int, stdin.readline().split())\n            if x[i]!= x[j] and y[i]!= y[j]:\n                _min = min(\n                    _min,\n                    (\n                        abs(x[i] - x[j]) ** 2\n                        + abs(y[i] - y[j]) ** 2\n                        + c_i * math.sqrt((x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2)\n                    ),\n                )\n    print(_min)\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin.replace(\"?\", \"0\")\n    t = list(t)\n    s = 0\n    e = n // 2\n    for i in range(e):\n        s += int(t[i])\n        t[i] = \"?\"\n        e -= 1\n    while \"?\" in t:\n        t.remove(\"?\")\n    for i in range(n // 2):\n        if t[i]!= \"0\":\n            t[i] = str(s)\n            break\n        s -= 1\n    s = 0\n    for i in range(n // 2, n):\n        s += int(t[i])\n    if s == 0:\n        return \"Monocarp\"\n    else:\n        return \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://www.codewars.com/kata/54e6533c92449cc251001667/solutions/python\n\n\"\"\"\n\nimport sys\nimport re\n\nn = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\npattern = re.compile(r'(?<=\\?)\\d')\ndigit = pattern.findall(s)"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: str\n    :return: str\n    \"\"\"\n    ticket_length = int(stdin[0])\n    ticket = stdin[1]\n    # Only care about the first half of the ticket\n    first_half = ticket[:ticket_length//2]\n    second_half = ticket[ticket_length//2:]\n\n    # Sum up the digits of the first half\n    first_half_digit_sum = sum(map(int, first_half))\n\n    # Sum up the digits of the second half\n    second_half_digit_sum = sum(map(int, second_half))\n\n    # If first_half_digit_sum == second_half_digit_sum, Monocarp wins\n    if first_half_digit_sum == second_half_digit_sum:\n        return \"Monocarp\"\n\n    # Otherwise, Bicarp wins\n    return \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1]\n    front = 0\n    back = n - 1\n    frontSum = 0\n    backSum = 0\n    while True:\n        while front < n and ticket[front] == '?':\n            front += 1\n        if front >= n:\n            break\n        frontSum += int(ticket[front])\n        while back >= 0 and ticket[back] == '?':\n            back -= 1\n        if back < 0:\n            break\n        backSum += int(ticket[back])\n        front += 1\n        back -= 1\n    if frontSum == backSum:\n        print(\"Monocarp\")\n    else:\n        print(\"Bicarp\")"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1]\n    h_sum = 0\n    l_sum = 0\n    for i in range(n // 2):\n        h_sum += int(ticket[i])\n        l_sum += int(ticket[-(i + 1)])\n    if h_sum == l_sum:\n        return \"Monocarp\"\n    return \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n----------------------------\n\nMonocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.\n\nMonocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\\frac{n}{2}$ digits.\n\nMonocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.\n\nIf the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.\n\n-----Input-----\n\nThe first line contains one even integer $n$ $(2 \\le n \\le 2 \\cdot 10^{5})$ \u2014 the number of digits in the ticket.\n\nThe second line contains a string of $n$ digits and \"?\" characters \u2014 the ticket which Monocarp and Bicarp have found. If the $i$-th character is \"?\", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of \"?\" characters is even.\n\n\n-----Output-----\n\nIf Monocarp wins, print \"Monocarp\" (without quotes). Otherwise print \"Bicarp\" (without quotes).\n\n\n-----Examples-----\nInput\n4\n0523\n\nOutput\nBicarp\n\nInput\n2\n??\n\nOutput\nBicarp\n\nInput\n6\n???00?\n\nOutput\nMonocarp\n\n\n\n-----Note-----\n\nSince there is no question mark in the ticket in the first example, the winner is determined before the game even starts, and it is Bicarp.\n\nIn the second example, Bicarp also wins. After Monocarp chooses an erased digit and replaces it with a new one, Bicap can choose another position with an erased digit and replace it with the same digit, so the ticket is happy.\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Monocarp\"\n    return \"Bicarp\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    s = s.replace('?', '0')\n    if '0' in s or '1' in s or '2' in s or '3' in s or '4' in s or '5' in s or '6' in s or '7' in s or '8' in s or '9' in s:\n        first_half = int(s[:n//2])\n        second_half = int(s[n//2:])\n        if (first_half + second_half) % 10 == 0:\n            print('Bicarp')\n        else:\n            print('Monocarp')\n    else:\n        print('Bicarp')\n    return ''\n\nprint(solution(input()))"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom itertools import permutations, product\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(stdin)\nticket = list(stdin)\n\na = n // 2\nb = n - a\n\ns1 = sum(int(i) for i in ticket[:a])\ns2 = sum(int(i) for i in ticket[a:])\n\nprint('Bicarp' if s1 == s2 else 'Monocarp')"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, t = map(int, stdin.split(' '))\n    data = [deque() for _ in range(n)]\n    for i in range(n):\n        s, d = map(int, stdin.split(' ')[2 * i:2 * i + 2])\n        data[i].append([s, d])\n    data.sort(key=lambda x: x[0][1])\n    queue = deque([(t, 0)])\n    visited = [[False] * n for _ in range(n)]\n    while queue:\n        t, idx = queue.popleft()\n        if t >= data[idx][0][0]:\n            if idx == n - 1:\n                return str(idx + 1)\n            if not visited[idx][idx + 1]:\n                queue.append((t, idx + 1))\n            for i in range(idx + 1, n):\n                if not visited[idx][i]:\n                    if not data[i][0][0] > t + data[idx][0][1]:\n                        queue.append((t + data[idx][0][1], i))\n            for i in range(idx):\n                if not visited[idx][i]:\n                    if not data[i][0][0] > t + data[idx][0][1]:\n                        queue.append((t + data[idx][0][1], i))\n            visited[idx][idx + 1] = True\n        else:\n            return str(idx + 1)\n    return -1"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    routes = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    t, curr = 0, []\n    for s, d in routes:\n        while t % s!= d:\n            t += 1\n        curr.append(t)\n        t += d\n    return curr[0]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # n, t = [int(x) for x in stdin.split(' ')]\n    # d = [[int(x) for x in stdin.split(' ')] for _ in range(n)]\n    n, t = [int(x) for x in stdin.split(' ')]\n    # d = [int(x) for x in stdin.split(' ')]\n    d = []\n    for _ in range(n):\n        d.append([int(x) for x in stdin.split(' ')])\n    d.sort(key=lambda x: x[1])\n    # d.sort()\n    for i, (s, d) in enumerate(d):\n        if t % s == 0:\n            print(i + 1)\n            return\n    return -1"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingA6MVH9-MGJ/\"\"\"\n    stdin = stdin.splitlines()\n    n, t = [int(i) for i in stdin[0].split()]\n    routes = [stdin[1 + i].split() for i in range(n)]\n    s, d = [int(i) for i in stdin[-1].split()]\n\n    def b_s(i):\n        return int(i) + int(routes[i][1])\n\n    def b_d(i):\n        return int(routes[i][0])\n\n    def in_range(i):\n        return b_s(i) <= t and b_d(i) <= t\n\n    def next_b(i):\n        return i + 1 if i < n - 1 else i\n\n    def next_s(i):\n        return int(routes[i][0]) if i < n - 1 else 0\n\n    def next_d(i):\n        return int(routes[i][1]) if i < n - 1 else 0\n\n    def next_r(i):\n        return b_s(i) if int(routes[i][1]) > t else int(routes[i][0])\n\n    def next_in_range(i):\n        return i < n and in_range(i)\n\n    def next_next_s(i):\n        return int(routes[i][0]) if i < n - 2 else 0\n\n    def next_next_d(i):\n        return int(routes[i][1]) if i < n - 2 else 0\n\n    def next_next_r(i):\n        return b_s(i) if int(routes[i][1]) > t else int(routes[i][0])\n\n    def next_next_in_range(i):\n        return i < n - 2 and in_range(i)\n\n    def next_next_next_s(i):\n        return int(routes[i][0]) if i < n - 3 else 0\n\n    def next_next_next_d(i):\n        return int(routes[i][1]) if i < n - 3 else 0\n\n    def next_next_next_r(i):\n        return b_s(i) if int(routes[i][1]) > t else int(routes[i][0])\n\n    def next_next_next_in_range(i):\n        return i < n - 3 and in_range(i)\n\n    def next_next_next_next_s(i):\n        return int(routes[i][0]) if i < n - 4 else 0\n\n    def next_next_next_next_d(i):\n        return int(routes[i][1]) if i < n - 4 else 0\n\n    def next_next_next_next_r(i):\n        return b_s(i) if int(routes[i][1]) > t else int(routes[i][0])\n\n    def next_next_next_next_in_range(i):\n        return i < n - 4 and in_range(i)\n\n    def next_next_next_next_next_s(i):\n        return int(routes[i][0]) if i < n - 5 else 0\n\n    def next_next_next_next_next_d(i):\n        return int(routes[i][1]) if i < n - 5 else 0\n\n    def next_next_next_next_next_r(i):\n        return b_s(i) if int(routes[i][1]) > t else int(routes[i][0])\n\n    def next_next_next_next_next_in_range(i):\n        return i < n - 5 and in_range(i)\n\n    def next_next_next_next_next_next_s(i):\n        return int(routes[i][0]) if i < n - 6 else 0\n\n    def next_next_next_next_next_next_d(i):\n        return int(routes[i][1]) if i < n - 6 else 0\n\n    def next_next_next_next_next_next_r(i):\n        return b_s(i) if int(routes[i][1]) > t else int(routes[i][0])\n\n    def next_next_next_next_next_next_in_range(i):\n        return i < n - 6 and in_range(i)\n\n    def next_next_next_next_next_next_next_s(i):\n        return int(routes[i][0]) if i < n - 7 else 0\n\n    def next_next_next_next_next_next_next_d(i):\n        return int(routes[i][1]) if i < n - 7 else 0\n\n    def next_next_next_next_next_next_next_r(i):\n        return b_s(i) if int(routes[i][1]) > t else int(routes[i][0])\n\n    def next_next_next_next_next_next_next_in_range(i):\n        return i < n - 7 and in_range(i)\n\n    def next_next_next_next_next_next_next_next_s(i):\n        return int(routes[i][0]) if i < n - 8 else 0\n\n    def next_next_next_next_next_next_next_next_d(i):\n        return int(routes[i][1]) if i < n - 8 else 0\n\n    def next_next_next_next_next_next_next_next_r(i):\n        return b_s(i) if int(routes[i][1]) > t else int(routes[i][0])\n\n    def next_next_next_next_"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    time = [int(stdin) for stdin in stdin.split(\"\\n\")[:n]]\n    time = sorted(time)\n    time = time + [t]\n    for i in range(n):\n        time[i] += i\n    time = sorted(time)\n    time = time[::-1]\n    for i in range(n):\n        if time[i] <= t:\n            return str(i + 1)"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '3'"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution is simple. We need to compute a number (not the index) of the bus route, which will be in range [0, n - 1].\n    The first number will be its first arrival time in minutes.\n    Then, we will use the following formula:\n    num = (first arrival time - t) // d\n    where\n        first arrival time = the first arrival time of the first bus of the first route\n        t = the time Serval goes to the station\n        d = the first arrival time of the first bus of the first route - the arrival time of the first bus of the second route\n\n    If the result is 0 or negative, then the bus route of the first route is the answer. Otherwise, the bus route of the second route must be the answer.\n    \"\"\"\n    n, t = [int(i) for i in stdin.split(\" \")]\n    routes = []\n    for i in range(n):\n        route = [int(i) for i in stdin.split(\" \")]\n        routes.append((route[1] - route[0], i))\n    routes.sort()\n    first_bus = routes[0][1]\n    second_bus = routes[1][1]\n    first_arrival_time = routes[0][0] * n + t\n    second_arrival_time = routes[1][0] * n + t\n    if first_arrival_time == second_arrival_time:\n        return first_bus\n    else:\n        return second_bus\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split('\\n')[0].split())\n    for i in range(n):\n        s, d = map(int, stdin.split('\\n')[i].split())\n        if t % d == 0:\n            return i + 1\n\n    return -1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = 0\n    if k == 1:\n        n = 1\n    elif k == 2:\n        n = 2 ** (m - 1)\n    else:\n        while 2 ** (m - 1) <= 2 ** n:\n            if check_for_k_in_bin(m, k, 2 ** n):\n                n += 1\n            else:\n                break\n    return str(n)\n\n\ndef"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(x) for x in stdin.split()]\n    return ''.join(str(i) for i in range(1, m) if bin(i).count('1') == k)\n\ndef"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, m = [int(num) for num in stdin.split()]\n    n = -1\n    while k > 0:\n        n += 1\n        k -= bin(n)[2:].count(\"1\")\n    return str(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(x) for x in stdin.split()]\n    # Your code here\n    return str(m)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, k = list(map(int, stdin.split()))\n    q = m * k\n    if q > 1:\n        num = (q * (q + 1)) // 2\n        s = str(num)\n        while len(s)!= k:\n            s = '0' + s\n        print(s)\n    else:\n        print(1)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    # print(m, k)\n\n    def is_valid(n: int) -> bool:\n        s = str(bin(n))[2:]\n        return len(s) == k\n\n    def is_valid_2(n: int) -> bool:\n        s = str(bin(n))[2:]\n        return s.count(\"1\") == m\n\n    l = 1\n    r = 2 ** k\n    while l < r:\n        mid = l + (r - l) // 2\n        if is_valid(mid):\n            r = mid\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    return solve(m, k)\n\ndef"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    m, k = int(m), int(k)\n    i = 1\n    while (m - k) > 0:\n        m -= k\n        i += 1\n        k *= 2\n    return str(i)"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(x) for x in stdin.split()]\n    for n in range(1, 10 ** 18 + 1):\n        cnt = 0\n        while n:\n            n //= 2\n            cnt += 1\n        if m == cnt and k == bin(n).count('1'):\n            return str(n)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # return \"\"\n\nprint(solution(\"16\\n.**.*..*.***.**.\\n\"))"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if is_good_level(stdin) else 'no'\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport collections\nimport re\n\nn = int(input())\nlines = input()\n\npattern = re.compile(r'(\\w)\\1{2}')\ncount = 0\nfor x in pattern.finditer(lines):\n    if x[1] == '*':\n        count += 1\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"yes\" if the level is good, otherwise \"no\"\n    '''\n    n = int(stdin)\n    level = list(stdin)\n    level = [i for i in level if i == '*']\n    x = [level[i] for i in range(n) if i%2==0]\n    y = [level[i] for i in range(n) if i%2==1]\n    if x == y:\n        return \"yes\"\n    else:\n        return \"no\"\n    \n    \n    \n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer: str\n    # Write your code here\n    # 1.1.1.1.1.1.1.1.1\n    answer = 'no'\n    # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\n    # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\n    # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'yes' if the level is good, otherwise return 'no'.\"\"\"\n    # We can use the property that there must be a sequence of five platforms\n    # with the intervals between them of the same length.\n\n    # This property is independent of the sequence of jumps. For example,\n    # here is a sequence of jumps, where we cannot make a sequence of five\n    # platforms:\n    #\n    # 1   2   3   4   5\n    # 2   3   4   5   6\n    # 3   4   5   6   7\n    # 4   5   6   7   8\n    # 5   6   7   8   9\n    # 6   7   8   9  10\n    # 7   8   9  10  11\n    # 8   9  10  11  12\n    # 9  10  11  12  13\n    # 10 11  12  13  14\n    #\n    # This is because we cannot jump from platform i to platform i + 5 and\n    # vice versa.\n    #\n    # Let's analyze the first sequence of jumps.\n    #\n    # 1   2   3   4   5\n    # 2   3   4   5   6\n    # 3   4   5   6   7\n    # 4   5   6   7   8\n    # 5   6   7   8   9\n    #\n    # Let's analyze the second sequence of jumps.\n    #\n    # 2   3   4   5   6\n    # 3   4   5   6   7\n    # 4   5   6   7   8\n    # 5   6   7   8   9\n    # 6   7   8   9  10\n    # 7   8   9  10  11\n    # 8   9  10  11  12\n    # 9  10  11  12  13\n    # 10 11  12  13  14\n    #\n    # The intervals between platforms are always the same, so we can treat\n    # this sequence as the longest sequence of jumps that starts with\n    # platform 1, has the intervals between platforms of equal length,\n    # and ends with platform 14.\n    #\n    # We can add the longest sequence of five platforms of equal length to\n    # the number of platforms, which is 16.\n    #\n    # If the number of platforms is more than 16, it is impossible to\n    # perform a sequence of five platforms of equal length, so we can\n    # conclude that the level is not good.\n    #\n    # The same applies to the second sequence of jumps.\n    #\n    # 1   2   3   4   5\n    # 2   3   4   5   6\n    # 3   4   5   6   7\n    # 4   5   6   7   8\n    # 5   6   7   8   9\n    # 6   7   8   9  10\n    # 7   8   9  10  11\n    # 8   9  10  11  12\n    # 9  10  11  12  13\n    # 10 11  12  13  14\n    # 11 12  13  14  15\n    # 12 13  14  15  16\n    # 13 14  15  16  17\n    # 14 15  16  17  18\n    # 15 16  17  18  19\n    # 16 17  18  19  20\n    # 17 18  19  20  21\n    # 18 19  20  21  22\n    # 19 20  21  22  23\n    # 20 21  22  23  24\n    # 21 22  23  24  25\n    # 22 23  24  25  26\n    # 23 24  25  26  27\n    # 24 25  26  27  28\n    # 25 26  27  28  29\n    # 26 27  28  29  30\n    # 27 28  29  30  31\n    # 28 29  30  31  32\n    # 29 30  31  32  33\n    # 30 31  32  33  34\n    # 31 32  33  34  35\n    # 32 33  34  35  36\n    # 33 34  35  36  37\n    # 34 35  36  37  38\n    # 35 36  37  38  39\n    # 36 37  38  39  40\n    # 37 38  39  40  41\n    # 38 39  40  41  42\n    # 39 40  41  42  43\n    # 40 41  42  43  44\n    # 41 42  43  44  45\n    # 42 43  44  45  46\n    # 43 44  45  46  47\n    # 44 45  46  47  48\n    # 45 46  47  48  49\n    # 46 47  48  49  50\n    # 47 48  49  50  51\n    # 48 49  50  51  52\n    # 49 50  51  52  53\n    # 50 51  52  53  54\n    # 51 52  53  54  55\n    # 52 53  54  55  56\n    # 53 54  55  56  57\n    # 54 55  56  57  58\n    # 55 56  57  58  59\n    # 56 57  58  59  60\n    # 57 58  59  60  61\n    # 58 59  60  61  62\n    # 59 60  61  62  63\n    # 60 61  62  63  64\n    # 61 62  63  64  65\n    # 62 63  64  65  66\n    # 63 64  65  66  67\n    # 64 65  66  67  68\n    # 65 66  67  68  69\n    # 66 67  68  69  70\n    # 67 68  69  70  71\n    # 68 69  70  71  72\n    # 69 70  71  72  73\n    # 70 71  72  73  74\n    # 71 72  73  74  75\n    # 72 73  74  75  76\n    # 73 74  75  76  77\n    # 74 75  76  77  78\n    # 75 76  77  78  79\n    # 76 77  78  79  80\n    # 77 78  79  80  81\n    # 78 79  80  81  82\n    # 79 80  81  82  83\n    # 80 81  82  83  84\n    # 81 82  83  84  85\n    # 82 83  84  85  86\n    # 83"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement solution for the problem\n    return \"yes\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '-1' # change this to return a number, if a number is required\nprint(solution(stdin))\n\nstdin = \"\"\"4\n0 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1\"\"\"\nprint(solution(stdin))\n\n\n\nimport re\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 0 2\\n3 5 7\\n8 1 6\")\n    '9'\n    \"\"\"\n    n = int(stdin.split()[0])\n    A = []\n    for _ in range(n):\n        A.append([int(c) for c in stdin.split('\\n')[_].split()])\n    if 0 in A[0] or 0 in A[1]:\n        return '-1'\n    if sum(A[0])!= sum(A[1]) or sum(A[0])!= sum(A[2]) or sum(A[1])!= sum(A[2]):\n        return '-1'\n    if sum(A[0][0] + A[1][1] + A[2][2])!= \\\n            sum(A[2][0] + A[1][1] + A[0][2]):\n        return '-1'\n    row_sum = [sum(row) for row in A]\n    col_sum = [sum(col) for col in zip(*A)]\n    diag1_sum = sum([A[i][i] for i in range(n)])\n    diag2_sum = sum([A[i][n - i - 1] for i in range(n)])\n    if any([sum(row)!= row_sum[0] for row in A]):\n        return '-1'\n    if any([sum(col)!= col_sum[0] for col in A]):\n        return '-1'\n    if diag1_sum!= diag2_sum:\n        return '-1'\n    if A[0][0] == A[1][1] and A[1][1] == A[2][2] and A[2][2] == A[0][0]:\n        return '-1'\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] == 0:\n                return str(row_sum[0] * col_sum[0] * diag1_sum)\n    return '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if nums[i][j] == 0:\n                target = sum(nums[i]) + sum(nums[j]) - nums[i][j]\n                if target % 2 == 1:\n                    continue\n                k = 0\n                while k < n and nums[k][j]!= 0:\n                    k += 1\n                if k == n:\n                    continue\n                for a in range(n):\n                    if nums[i][a] == 0:\n                        nums[i][a] = nums[k][a] = 1\n                        break\n                break\n    for i in range(n):\n        for j in range(n):\n            if nums[i][j] == 0:\n                continue\n            k = 0\n            while k < n and nums[k][j]!= 0:\n                k += 1\n            if k == n:\n                continue\n            for a in range(n):\n                if nums[i][a] == 0:\n                    nums[i][a] = nums[k][a] = 1\n                    break\n            break\n    ans = []\n    for i in range(n):\n        ans.append(sum(nums[i]))\n    if ans == [i for i in range(n, 0, -1)]:\n        return str(1)\n    return str(-1)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if not n:\n        return -1\n    s = set()\n    for line in stdin.splitlines():\n        s.update(map(int, line.split()))\n    if len(s)!= n ** 2:\n        return -1\n    rows = []\n    cols = []\n    for i in range(n):\n        rows.append(sum(map(int, stdin.splitlines()[i].split())))\n        cols.append(sum(map(int, [line[i] for line in stdin.splitlines()])))\n    d1 = sum(map(int, stdin.splitlines()[0].split()))\n    d2 = sum(map(int, stdin.splitlines()[-1].split()))\n    if d1!= d2:\n        return -1\n    r = 0\n    c = 0\n    for i in range(n):\n        if rows[i]!= d1:\n            r = i\n            break\n    for i in range(n):\n        if cols[i]!= d1:\n            c = i\n            break\n    if r == c:\n        return d1\n    for i in range(n):\n        for j in range(n):\n            if i!= r and j!= c:\n                if rows[r] + cols[c]!= rows[i] + cols[j]:\n                    return -1\n    return d1 - rows[r] - cols[c]\n\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    values = [list(map(int, row.split())) for row in lines[1:]]\n    sum_of_rows = [0] * n\n    sum_of_columns = [0] * n\n    sum_of_diagonals = 0\n    for i in range(n):\n        for j in range(n):\n            sum_of_rows[i] += values[i][j]\n            sum_of_columns[j] += values[i][j]\n            if i == j:\n                sum_of_diagonals += values[i][j]\n\n    diff = [sum_of_rows[i] - sum_of_columns[i] for i in range(n)]\n    \n    if abs(diff[0])!= abs(diff[1]):\n        return '-1'\n    \n    x = sum_of_diagonals - diff[0]\n    return str(x if x > 0 else -x)\n\"\"\""
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    magic_square = []\n    for _ in range(int(stdin.readline())):\n        magic_square.append([int(i) for i in stdin.readline().split()])\n    \n    total_sum = []\n    for row in magic_square:\n        total_sum.append(sum(row))\n    \n    for column in zip(*magic_square):\n        total_sum.append(sum(column))\n    \n    main_diagonal = []\n    secondary_diagonal = []\n    for index in range(len(magic_square)):\n        main_diagonal.append(magic_square[index][index])\n        secondary_diagonal.append(magic_square[index][len(magic_square) - index - 1])\n    total_sum.extend(main_diagonal)\n    total_sum.extend(secondary_diagonal)\n    \n    if len(set(total_sum)) > 1:\n        return '-1'\n    \n    return str(sum(total_sum) * len(total_sum) // 2)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = list(map(int, stdin.strip().split()))\n    l = [list(map(int, stdin.strip().split())) for _ in range(m)]\n    h = n // 2 + 1\n\n    def magic(n):\n        def gcd(a, b):\n            return b if a % b == 0 else gcd(b, a % b)\n\n        def sum_check(a, b):\n            return all([\n                sum(a[i]) == sum(a[j])\n                for i in range(n)\n                for j in range(n) if i!= j\n            ])\n\n        nums = list(range(1, n + 1))\n        for i in range(n):\n            while nums[0] == 0:\n                nums.pop(0)\n            x = sum(nums)\n            nums = [x // gcd(x, n) * i for i in range(1, n + 1)]\n\n        return nums[0]\n\n    for i in range(h):\n        for j in range(h):\n            if l[i][j] == 0:\n                l[i][j] = sum_check(l, i, j)\n                if sum_check(l, i, j):\n                    return str(l[i][j])\n    return '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution reads in the input and then creates a list\n    of lists which represent the 2d grid. The empty cell is\n    represented by a 0. The code then iterates through the list\n    and attempts to fill in a number into the empty cell. If it\n    is successful it returns the number. Otherwise it returns -1\n    \"\"\"\n    n = int(stdin)\n    grid = [[int(i) for i in stdin.split()] for j in range(n)]\n    # Empty cell is represented by 0\n    empty_cell = [0]\n    for i in range(n):\n        empty_cell.append(0)\n    magic_number = 1\n    # Attempt to fill in a magic number\n    while magic_number:\n        for i in range(n):\n            # If the grid is a magic square then all the rows,\n            # columns and diagonals are equal, so the magic number\n            # must be in the middle of the grid\n            if sum(grid[i])!= sum(grid[i][::-1]):\n                break\n            elif sum([grid[i][j] for j in range(n)])!= sum(grid[0][i:n]):\n                break\n            elif sum(grid[i][j] for i in range(n) for j in range(n))!= sum(grid[j][i] for i in range(n) for j in range(n)):\n                break\n        else:\n            return magic_number\n        # If the while loop breaks we know that the magic number\n        # does not exist in the grid so increment it and try again\n        magic_number += 1\n    return -1"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    magic = [int(s) for s in stdin.splitlines()]\n    magic_sum = sum(magic)\n    target = magic_sum // 2\n    dp = [[0] * (target + 1) for _ in range(len(magic))]\n    dp[0][0] = magic[0]\n    for i in range(1, len(magic)):\n        dp[i][0] = magic[i]\n    for i in range(1, len(magic)):\n        for j in range(1, target + 1):\n            if dp[i - 1][j] == 0 or dp[i][j - 1] == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    for j in range(target, -1, -1):\n        if dp[-1][j] == magic_sum - 2 * j:\n            return str(j)\n    return '-1'\n\n\n\nprint(solution(input))\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = stdin.split('\\n')[0]\n    # n = int(n)\n    # numbers = []\n    # for i in range(n):\n    #     numbers.append(list(map(int, stdin.split('\\n')[i].split(' '))))\n    # \n    # nums = []\n    # for i in range(n):\n    #     nums.append(sum(numbers[i]))\n    #     for j in range(n):\n    #         if j > 0:\n    #             nums[i] += numbers[i][j]\n    #         if j < n - 1:\n    #             nums[i] += numbers[i][j]\n    # \n    # for i in range(1, n):\n    #     nums[0][i] += nums[i][0]\n    #     nums[i][0] += nums[i][n-1]\n    #     nums[0][i] += nums[i][n-1]\n    #     nums[i][n-1] += nums[i][0]\n    # \n    # for i in range(1, n):\n    #     if nums[0][i]!= nums[i][0] or nums[i][n-1]!= nums[0][i]:\n    #         return \"IMPOSSIBLE\"\n    # \n    # result = 0\n    # for i in range(n):\n    #     result += nums[i][i]\n    # if result!= nums[0][0]:\n    #     return \"IMPOSSIBLE\"\n    # \n    # for i in range(1, n):\n    #     if (nums[i][i] + nums[0][n - i])!= nums[i][n - 1]:\n    #         return \"IMPOSSIBLE\"\n    #     if (nums[0][i] + nums[i][n - 1])!= nums[i][i]:\n    #         return \"IMPOSSIBLE\"\n    # \n    # return result\n    # n = int(n)\n    # m = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # m.append(0)\n    # m.append(0)\n    # a = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n    # a.append(list(map(lambda x: 0, range(n + 2))))\n    # a.append(list(map(lambda x: 0, range(n + 2))))\n    # sum_row = []\n    # sum_col = []\n    # for i in range(n + 2):\n    #     sum_row.append(sum(a[i]))\n    #     for j in range(n + 2):\n    #         if j > 0:\n    #             sum_row[i] += a[i][j]\n    #         if j < n + 1:\n    #             sum_row[i] += a[i][j]\n    # for i in range(n + 2):\n    #     sum_col.append(sum(a[i]))\n    #     for j in range(n + 2):\n    #         if j > 0:\n    #             sum_col[i] += a[j][i]\n    #         if j < n + 1:\n    #             sum_col[i] += a[j][i]\n    # res = 0\n    # for i in range(n):\n    #     for j in range(n):\n    #         res += a[i][j]\n    # if sum_row[0]!= sum_col[0] or sum_row[n+1]!= sum_col[n+1] or res!= sum_row[n+1]:\n    #     return \"IMPOSSIBLE\"\n    # res = 0\n    # for i in range(n):\n    #     res += a[i][i]\n    # if res!= sum_row[0]:\n    #     return \"IMPOSSIBLE\"\n    # for i in range(1, n):\n    #     if (sum_row[i] + sum_col[i])!= sum_row[n + 1]:\n    #         return \"IMPOSSIBLE\"\n    #     if (sum_row[i] + sum_col[i])!= sum_row[i]:\n    #         return \"IMPOSSIBLE\"\n    # for i in range(n + 1):\n    #     if sum_col[0] + sum_col[i]!= sum_row[i]:\n    #         return \"IMPOSSIBLE\"\n    # for i in range(n + 1):\n    #     if sum_row[0] + sum_row[i]!= sum_col[i]:\n    #         return \"IMPOSSIBLE\"\n    # return res\n    \n    n = int(stdin.split('\\n')[0])\n    m = list(map(int, stdin.split('\\n')[0].split(' ')))\n    m.append(0)\n    m.append(0)\n    a = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n    a.append(list(map(lambda x: 0, range(n + 2))))\n    a.append("
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    max_k = n - m\n    min_k = m\n    while max_k > min_k:\n        mid_k = (max_k + min_k) // 2\n        if (mid_k * m) > (n - mid_k):\n            max_k = mid_k\n        else:\n            min_k = mid_k + 1\n    return str(min_k) +'' + str(max_k)\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.splitlines()[:2])\n    curr = [int(x) for x in stdin.splitlines()[2:]]\n\n    min_k = max_k = 0\n    for a in curr:\n        k = max_k + 1 - min_k\n        min_k += a // k\n        max_k = max(max_k, min_k)\n        print(min_k, max_k)\n        if max_k >= n:\n            return str(k) +'' + str(k)\n    return str(min_k) +'' + str(max_k)\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    m = int(stdin.readline().strip())\n    s = 0\n    t = n\n    while s!= m:\n        t += n\n        s += 1\n    return str(min(n, t - n)) + \" \" + str(max(n, t - n))\n\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    s = [int(i) for i in stdin.readline().split()]\n    k_min = 0\n    k_max = max(s)\n    for i in range(n):\n        k_min = max(k_min, s[i] + m - i)\n        k_max = min(k_max, s[i] + m + i - n)\n    return str(k_min) +'' + str(k_max)\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n\"\"\"\n\n\nclass Solution:\n    def getMinMax(self, benches: list) -> tuple:\n        n = len(benches)\n        s = [0] * n\n        for i in range(n):\n            s[i] = benches[i]\n        min_ = max_ = 0\n        for i in range(n):\n            if s[i] > min_:\n                min_ = s[i]\n                j = i\n            if s[i] < max_:\n                max_ = s[i]\n                k = i\n        return min_, max_\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    table = [int(stdin.readline()) for _ in range(n)]\n    lo, hi = n, m * n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sum(mid // i for i in table) < m:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo, hi\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort(reverse=True)\n    tmp = arr[0]\n    arr[0] = arr[0] - m\n    for i in range(1, n):\n        arr[i] = arr[i] - arr[i - 1]\n    arr.sort(reverse=True)\n    print(arr[0] + m, max(arr[0] + m, m))\n\n    return ''\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n\n    min_k = 0\n    max_k = n\n    for i in range(n):\n        a_i = int(stdin.readline())\n        if a_i > m:\n            min_k = max_k\n            break\n        max_k = max(max_k, a_i)\n        min_k = min(min_k, a_i)\n\n    return str(min_k) +'' + str(max_k)\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    m = stdin\n    arr = list(map(int, stdin.split('\\n')))\n    k = min(arr)\n    k = max(arr)\n    return str(k) +'' + str(k)\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split('\\n') if i]\n    return f\"{max([n - i for i in range(n) if i not in range(n - m, n)] + [i + m for i in range(n) if i not in range(m, n)]):,}\"\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\")\n    128\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    n_seats = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        x, y = [int(i) for i in stdin.split()]\n        n_seats[x].append(y)\n    solution = 0\n    for seats in n_seats.values():\n        n_seats[seats[0]].sort()\n        for i in range(len(seats)):\n            solution += (\n                1\n                if n_seats[seats[i]][0] == i\n                else 2\n                if n_seats[seats[i]][0] == i + 1\n                else 0\n            )\n    return solution\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = list(map(int, stdin.split()))\n    print(pow(2, n, 10**9 + 7))\n    '''\n    n, m = list(map(int, stdin.split()))\n    front = 0\n    back = n - 1\n    s = 0\n    for _ in range(m):\n        seat = int(stdin.split()[0])\n        side = stdin.split()[1]\n        if side == \"F\":\n            front = seat\n        else:\n            back = seat\n        s = s + (back - front + 1)\n    s = s % (10**9 + 7)\n    return s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str\n    n, m = map(int, stdin.split())\n    \n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                result += m * (m - 1) // 2\n            elif abs(i - j) == m - 1:\n                result += 1\n    return str(result % (10 ** 9 + 7))"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport sys\nimport math\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    mat = [[0] * N for _ in range(M)]\n    for _ in range(M):\n        start, end = map(int, stdin.split())\n        mat[_][start - 1] = 1\n        mat[_][end - 1] = -1\n\n    result = 0\n    for i in range(N):\n        for j in range(M):\n            result += mat[j][i]\n            if mat[j][i] == 0:\n                result += mat[j][i - 1]\n\n    return result % (10 ** 9 + 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    max_seat = n * n\n    # n*n-1\n    numerator = n * n\n    denominator = 10**9 + 7\n    # print(numerator, denominator)\n    a = 0\n    # print(max_seat)\n    for i in range(m):\n        a = (a + (numerator // denominator) * m) % (10**9 + 7)\n        # print(a)\n        denominator -= 1\n        # print(denominator)\n        numerator = numerator * (n - 1) + i + 1\n        # print(numerator)\n        m -= 1\n        # print(m)\n    # print(a)\n    return a\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a, b = [[0 for _ in range(m)] for _ in range(n)], [[0 for _ in range(m)] for _ in range(n)]\n    a[0][0] = 1\n    for i in range(1, m):\n        a[0][i] = 1\n        b[0][i] = 1\n    for i in range(1, n):\n        a[i][0] = 1\n        b[i][0] = 1\n    for i in range(1, n):\n        for j in range(1, m):\n            a[i][j] = a[i - 1][j] + a[i][j - 1]\n            b[i][j] = b[i - 1][j] + b[i][j - 1]\n    return a[n - 1][m - 1] + b[n - 1][m - 1]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seats = [0] * n\n    for i in range(1, m+1):\n        seats[i%n] += 1\n    return''.join(map(str, seats))\n\"\"\"\n\nfrom math import comb\n\ndef"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calc_cost(a, b, c, r):\n        return c * r\n\n    def get_cost(pizza_indices):\n        res = 0\n        for i, j in zip(pizza_indices[:2], pizza_indices[2:]):\n            for r in range(1, 10):\n                res += calc_cost(a[i][r], b[j][r], c[j][r], r)\n        return res\n\n    n, m = map(int, stdin.split())\n    a = [[0 for _ in range(10)] for _ in range(n)]\n    b = [[0 for _ in range(10)] for _ in range(m)]\n    c = [[0 for _ in range(10)] for _ in range(m)]\n    for i in range(n):\n        a[i] = list(map(int, stdin.split()[i * 2 + 1 : i * 2 + 3]))\n    for j in range(m):\n        b[j] = list(map(int, stdin.split()[j * 4 + 3 : j * 4 + 7]))\n        c[j] = list(map(int, stdin.split()[j * 4 + 7 : j * 4 + 10]))\n    ans = -1\n    for x1 in range(n):\n        for x2 in range(n):\n            for y1 in range(m):\n                for y2 in range(m):\n                    pizza_indices = [x1, x2, y1, y2]\n                    cost = get_cost(pizza_indices)\n                    if ans == -1 or ans > cost:\n                        ans = cost\n    return str(ans)"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    ingredients = []\n    prices = []\n    for _ in range(n):\n        ingredients.append(list(map(int, stdin.split(\"\\n\")[_].split(\" \"))))\n    for _ in range(m):\n        prices.append(list(map(int, stdin.split(\"\\n\")[_].split(\" \"))))\n    \n    return '\\n'.join([str(x) for x in ingredients]) + '\\n' + '\\n'.join([str(x) for x in prices])"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 4\n   ... 2 6 7\n   ... 4 2 3 9 5\n   ... 3 2 3 9''')\n    '2 3'\n    >>> solution('''4 3\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 10 4 1 2 3 4\n   ... 20 4 1 2 3 4\n   ... 30 4 1 2 3 4''')\n    '1 2'\n    '''\n    from collections import defaultdict\n    _, m = map(int, stdin.split('\\n')[:2])\n    _d = defaultdict(int)\n    _lst = [set() for _ in range(9)]\n    for i in range(m):\n        f, *b = map(int, stdin.split('\\n')[i + 2].split())\n        _d[f] = _d[f] + 1\n        _lst[f - 1].update(set(b))\n    _lst = sorted(_lst)\n    _d = sorted(_d.items())\n    _s = set()\n    _c = 0\n    for _f, _c in _d:\n        _i = 0\n        _j = 0\n        while _i < _c:\n            if _i == 0:\n                _s.add(_f)\n                _i += 1\n                _j = _f\n            else:\n                _j = _lst[0][1 - _f + 1]\n            for _f2 in _lst[0][_f - 1]:\n                if _f2 not in _s:\n                    _s.add(_f2)\n                    _i += 1\n                    _j = _f2\n                    break\n    return f'{_s[0] + 1} {_s[1] + 1}'"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, list))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    ingredients = []\n    ingredients_lst = []\n    for i in range(n):\n        f, *ing = [int(x) for x in stdin.split('\\n')[i].split(' ')]\n        ingredients.append(f)\n        ingredients_lst.append(ing)\n    ingredients_lst = [list(x) for x in zip(*ingredients_lst)]\n    ingredients_lst = [sorted(x) for x in ingredients_lst]\n    ingredients_lst = [list(set(x)) for x in ingredients_lst]\n    min_ingredients_lst = []\n    for ing in ingredients_lst:\n        min_ingredients_lst.append(min(ing))\n    min_ingredients_lst = list(set(min_ingredients_lst))\n    min_ingredients_lst.sort()\n    min_ingredients = {}\n    for i in range(len(min_ingredients_lst)):\n        min_ingredients[min_ingredients_lst[i]] = i + 1\n    pizzas = []\n    for i in range(m):\n        price, r, *ing = [int(x) for x in stdin.split('\\n')[i].split(' ')]\n        pizzas.append([price, r, ing])\n    pizzas.sort()\n    min_price = []\n    for i in range(2):\n        min_price.append(pizzas[i][0] + (m - 1 - i) * 2)\n    min_price = min_price[0]\n    min_price_pizzas = []\n    min_price_ingredients = []\n    for p in pizzas:\n        if p[0] == min_price:\n            min_price_pizzas.append(p)\n    for p in min_price_pizzas:\n        min_price_ingredients.append(p[2])\n    min_price_ingredients = set([x for x in min_price_ingredients[0] if min_price_ingredients[0].count(x) == r])\n    max_price = 0\n    for p in pizzas:\n        price = 0\n        for ing in p[2]:\n            price += min_ingredients[ing]\n        if price > max_price:\n            max_price = price\n    max_price_pizzas = []\n    max_price_ingredients = []\n    for p in pizzas:\n        if p[0] == max_price:\n            max_price_pizzas.append(p)\n    for p in max_price_pizzas:\n        max_price_ingredients.append(p[2])\n    max_price_ingredients = set([x for x in max_price_ingredients[0] if max_price_ingredients[0].count(x) == r])\n    max_ingredients = set()\n    for p in max_price_ingredients:\n        max_ingredients.add(min_ingredients[p])\n    min_ingredients_lst = list(max_ingredients)\n    min_ingredients_lst.sort()\n    min_ingredients = {}\n    for i in range(len(min_ingredients_lst)):\n        min_ingredients[min_ingredients_lst[i]] = i + 1\n    for i in range(len(min_price_ingredients)):\n        for ing in min_price_ingredients[i]:\n            min_ingredients[ing] = i + 1\n    min_price_pizzas = []\n    min_price_ingredients = []\n    for p in pizzas:\n        if p[0] == min_price:\n            min_price_pizzas.append(p)\n    for p in min_price_pizzas:\n        min_price_ingredients.append(p[2])\n    min_price_ingredients = set([x for x in min_price_ingredients[0] if min_price_ingredients[0].count(x) == r])\n    max_price = 0\n    for p in pizzas:\n        price = 0\n        for ing in p[2]:\n            price += min_ingredients[ing]\n        if price > max_price:\n            max_price = price\n    max_price_pizzas = []\n    max_price_ingredients = []\n    for p in pizzas:\n        if p[0] == max_price:\n            max_price_pizzas.append(p)\n    for p in max_price_pizzas:\n        max_price_ingredients.append(p[2])\n    max_price_ingredients = set([x for x in max_price_ingredients[0] if max_price_ingredients[0].count(x) == r])\n    max_ingredients = set()\n    for p in max_price_ingredients:\n        max_ingredients.add(min_ingredients["
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    ingredients = [set() for _ in range(n)]\n    prices = []\n    for i in range(n):\n        ingredient, price = map(int, stdin.split('\\n')[i + 1].split())\n        ingredients[i] |= set(map(int, stdin.split('\\n')[i + 1].split()[1:]))\n        prices.append(price)\n    min_price = 1000000000\n    best_pizzas = None\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            for pizza in permutations(range(m), 2):\n                if pizza[0]!= i and pizza[1]!= j:\n                    pizzas = set(ingredients[pizza[0]]) | set(ingredients[pizza[1]])\n                    current_price = prices[pizza[0]] + prices[pizza[1]]\n                    if pizzas <= ingredients[0]:\n                        if current_price < min_price:\n                            best_pizzas = pizza\n                            min_price = current_price\n    if best_pizzas is None:\n        return''.join(map(str, best_pizzas))\n    return''.join(map(str, best_pizzas[0])) +'' +''.join(map(str, best_pizzas[1]))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    ingredients = [0] * 9\n    for i in range(n):\n        ingredients[int(stdin.split()[i + 1]) - 1] = list(map(int, stdin.split()[i + 2:]))\n    pizzas = [0] * m\n    for j in range(m):\n        pizzas[j] = list(map(int, stdin.split()[j + 2:]))\n    a = 0\n    b = 0\n    min_dif = float('inf')\n    for i in range(1 << n):\n        for j in range(m):\n            cur = 0\n            for k in range(n):\n                if ((i >> k) & 1):\n                    cur += ingredients[k][pizzas[j][k]]\n            if cur < min_dif:\n                a = i\n                b = j\n                min_dif = cur\n    return str(a) +'' + str(b)\nprint(solution(stdin))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the smallest and the largest of the numbers that have length m and sum of digits s.\n\n    >>> solution(\"2 15\")\n    69 96\n\n    >>> solution(\"3 0\")\n    -1 -1\n    \"\"\"\n    m, s = map(int, stdin.split())\n    max_ = -1\n    min_ = -1\n    for i in range(s + 1):\n        if len(str(i)) == m:\n            if s - i < 0:\n                break\n            for j in range(s - i + 1):\n                num = i * 10 + j\n                if num >= max_:\n                    max_ = num\n                if num <= min_:\n                    min_ = num\n    return f'{min_} {max_}'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, s = stdin.split(' ')\n    m = int(m)\n    s = int(s)\n    s = str(s)\n    a = 0\n    b = 0\n    for i in range(m - 1):\n        a += int(s[i])\n    a += 9 * (m - 1)\n    for i in range(m):\n        b += int(s[i])\n    print(a, b)\n    return ''\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, s = [int(i) for i in stdin.split(' ')]\n    if m < 1 or m > 100 or s < 0 or s > 900:\n        return '-1 -1'\n\n    min_result = (pow(9, m) - 1) // 9\n    max_result = (pow(9, m) - 1) * 9 + pow(9, m) - 1\n\n    if s < min_result or s > max_result:\n        return '-1 -1'\n\n    if s in range(min_result, max_result+1):\n        for i in range(min_result, max_result+1):\n            if sum(map(int, list(str(i)))) == s:\n                return f\"{i} {i + 1}\"\n\n    return '-1 -1'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum and the maximum number that have the length of m and sum of digits s\n    >>> solution('2 15')\n    69 96\n    \"\"\"\n    m, s = map(int, stdin.split())\n    min_num = -1\n    max_num = -1\n    for num in range(m, m * 10):\n        if sum(map(int, str(num))) == s:\n            if min_num == -1:\n                min_num = num\n            max_num = num\n    return f\"{min_num} {max_num}\"\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    args = stdin.strip().split(' ')\n\n    try:\n        l = [int(i) for i in args]\n    except ValueError:\n        return \"-1 -1\"\n\n    m, s = l\n\n    min_digits = 0\n    if m > 0:\n        min_digits = m * 9 + m - 1\n\n    max_digits = m * 9\n    min_digits = min_digits + (s + 1 - min_digits) // 9 * 9\n    max_digits = max_digits + (s - max_digits) // 9 * 9\n\n    return f'{min_digits} {max_digits}'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split(' '))\n    min_num = m * s + 1\n    max_num = 0\n    for i in range(m):\n        j = m + i\n        max_num = max(max_num, s + j * (m - i))\n        min_num = min(min_num, s + j * i)\n    if min_num == 1:\n        return \"-1 -1\"\n    return str(min_num) +'' + str(max_num)\n\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, s = stdin.split()\n    a = min_num(m,s)\n    b = max_num(m,s)\n    return f'{a} {b}'\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    if n < 1 or m < 0 or n > 100 or m > 900:\n        return \"-1 -1\"\n    s = sum([int(x) for x in str(n)])\n    if s!= m:\n        return \"-1 -1\"\n    i = 1\n    while i ** 2 <= n:\n        if (n - i ** 2) % (i + 1) == 0:\n            return f\"{i} {(n - i ** 2) // (i + 1)}\"\n        i += 1\n    return \"-1 -1\"\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, s = [int(x) for x in stdin.split()]\n    m_min, m_max = -1, -1\n    if m == 0:\n        m_max = 10**s\n        m_min = 0\n    else:\n        m_min = 10**(s-m+1)\n        m_max = 10**s - 1\n    return f'{m_min} {m_max}'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 0:\n        print('-1 -1')\n    else:\n        print(max(x for x in range(10 ** a + 1) if sum(int(i) for i in str(x)) == b), min(x for x in range(10 ** a - 1, -1, -1) if sum(int(i) for i in str(x)) == b))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(i) for i in stdin.split()]\n    return (r * (r + 1) // 2) - ((l - 1) * l // 2) - (k * (k + 1) * (k + 2) // 6) + 1\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split()]\n    total = 0\n    for i in range(l, r + 1):\n        if len(set(str(i))) <= k:\n            total += i\n    return total % 1000000007\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = list(map(int, stdin.split(' ')))\n    return sum(i for i in range(l, r + 1) if len(set(str(i))) <= k) % 1000000007\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split(' '))\n    return r - l + k * (r - l) // k\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split(' ')]\n    return sum((r - l) // k + (1 if (r - l) % k else 0) + l) % 1000000007\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    return sum(sum(sum(i.count(chr(i)) for i in range(97, 97+k)) for j in range(l, r+1)) for l in range(97, 97+k)) % 1000000007"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split()]\n    return str(sum(x * (10 ** i) for i, x in enumerate(range(l, r + 1), 1)) % 982451653)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YES\" if len(stdin.split('\\n')) == 1 else \"NO\"\n\"\"\"\ndef"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.readline().split())\n    colors = list(map(int, stdin.readline().split()))\n    if n == k:\n        print(\"YES\")\n    else:\n        if max(colors) - min(colors) > d:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\n\"\"\"\n\nn, k, d = map(int, input().split())\ncolors = list(map(int, input().split()))\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns YES or NO depending on whether the pencils can be split into boxes.\n\n    Parameters:\n    stdin (str): A string containing three integers:\n        n: the number of pencils,\n        k: minimal size of any non-empty box,\n        d: maximal difference in saturation between any pair of pencils in the same box.\n\n    Returns:\n    str: YES or NO.\n    '''\n    # Take the input.\n    n, k, d = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n\n    # Determine if the pencils can be split.\n    if k == 1 and d == 0:\n        return 'YES'\n    elif k == 1 and d > 0:\n        return 'NO'\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) > d:\n                break\n        else:\n            return 'YES'\n\n    return 'NO'"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n\n    # dp[i][j] - is it possible to fit j pencils into the box i?\n    dp = [[False for _ in range(k + 1)] for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(n):\n        for j in range(k + 1):\n            if dp[i][j]:\n                if j + arr[i] <= k:\n                    dp[i + 1][j + arr[i]] = True\n            if dp[i][j] and j - arr[i] >= 0:\n                dp[i + 1][j - arr[i]] = True\n    return \"YES\" if dp[n][k] else \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_solution(a):\n        nonlocal current_box, pen_count, box_count, d\n        if current_box >= n:\n            return False\n        if pen_count < k:\n            return False\n        for i in range(len(a)):\n            for j in range(i + 1, len(a)):\n                if abs(a[i] - a[j]) > d:\n                    return False\n        return True\n\n    def dfs(a):\n        nonlocal current_box, pen_count, box_count, d\n        if is_valid_solution(a):\n            solutions.append(a.copy())\n            return True\n        for i in range(n):\n            if current_box == 0 or pen_count < k:\n                if current_box == 0 or abs(a[current_box - 1] - a[i]) <= d:\n                    current_box += 1\n                    a[i] = a[current_box - 1]\n                    pen_count += 1\n                    box_count += 1 if current_box < n else 0\n                    dfs(a)\n                    a[i] = a[current_box - 1]\n                    pen_count -= 1\n                    box_count -= 1 if current_box < n else 0\n                    current_box -= 1\n\n    n, k, d = map(int, stdin.split('\\n')[0].split())\n    pen_count, box_count = 0, 0\n    current_box, a = 0, [0 for _ in range(n)]\n    solutions = []\n    dfs(a)\n    return 'YES' if solutions else 'NO'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k, d = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    def isValid(a, k, d):\n        if len(a) < k:\n            return 'NO'\n        else:\n            b = []\n            for i in range(n):\n                if a[i] not in b:\n                    b.append(a[i])\n                else:\n                    if abs(a[i] - a[b.index(a[i])]) <= d:\n                        pass\n                    else:\n                        return 'NO'\n            if len(b) == k:\n                return 'YES'\n            else:\n                return 'NO'\n    return isValid(a, k, d)"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) > d:\n                break\n        else:\n            continue\n        break\n    else:\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split(' ')]\n    nums = [int(x) for x in stdin.split(' ')]\n    nums.sort()\n    res = []\n    for i in range(n-1):\n        if abs(nums[i+1]-nums[i]) > d:\n            return \"NO\"\n        if nums[i+1] - nums[i] > k:\n            return \"NO\"\n        if nums[i+1] - nums[i] < k:\n            res.append(nums[i])\n    if nums[-1] < k:\n        return \"NO\"\n    res.append(nums[-1])\n    return \"YES\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, [count(x) for x in stdin]))\n    \"\"\"\n\ns = 'RYBGRYBGR'\nprint(s.count('R'))\n\ns = '!'\nprint(s.count('R'))\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {} {} {}'.format(stdin.count('R'), stdin.count('G'), stdin.count('B'), stdin.count('Y'))\n\n'''\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{0}\\n{1}\\n{2}\\n{3}'.format(stdin.count('R'), stdin.count('G'), stdin.count('B'), stdin.count('Y'))\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = [0, 0, 0, 0]\n    for c in stdin:\n        if c == 'R':\n            result[0] += 1\n        if c == 'B':\n            result[1] += 1\n        if c == 'Y':\n            result[2] += 1\n        if c == 'G':\n            result[3] += 1\n    return''.join(map(str, result))\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    res = [0, 0, 0, 0]\n    \n    for i in stdin:\n        if i == \"R\":\n            res[0] += 1\n        elif i == \"B\":\n            res[1] += 1\n        elif i == \"Y\":\n            res[2] += 1\n        elif i == \"G\":\n            res[3] += 1\n    \n    print(*res)\n    return \"\""
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = [0,0,0,0]\n    s = stdin.split()\n    s = s[0]\n    for i in range(0,len(s)):\n        if s[i] == 'R':\n            k[0] += 1\n        if s[i] == 'B':\n            k[1] += 1\n        if s[i] == 'Y':\n            k[2] += 1\n        if s[i] == 'G':\n            k[3] += 1\n    return \" \".join([str(x) for x in k])"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You have a garland, it is made as follows: if you take any four consecutive light bulbs then there will not be light bulbs with the same color among them. For example, the garland can look like \"RYBGRYBGR\", \"YBGRYBGRYBG\", \"BGRYB\", but can not look like \"BGRYG\", \"YBGRYBYGR\" or \"BGYBGY\". Letters denote colors: 'R'\u00a0\u2014 red, 'B'\u00a0\u2014 blue, 'Y'\u00a0\u2014 yellow, 'G'\u00a0\u2014 green.\n\nUsing the information that for each color at least one light bulb still works count the number of dead light bulbs of each four colors.\n\n\n-----Input-----\n\nThe first and the only line contains the string s (4 \u2264 |s| \u2264 100), which describes the garland, the i-th symbol of which describes the color of the i-th light bulb in the order from the beginning of garland:   'R'\u00a0\u2014 the light bulb is red,  'B'\u00a0\u2014 the light bulb is blue,  'Y'\u00a0\u2014 the light bulb is yellow,  'G'\u00a0\u2014 the light bulb is green,  '!'\u00a0\u2014 the light bulb is dead. \n\nThe string s can not contain other symbols except those five which were described. \n\nIt is guaranteed that in the given string at least once there is each of four letters 'R', 'B', 'Y' and 'G'. \n\nIt is guaranteed that the string s is correct garland with some blown light bulbs, it means that for example the line \"GRBY!!!B\" can not be in the input data. \n\n\n-----Output-----\n\nIn the only line print four integers k_{r}, k_{b}, k_{y}, k_{g}\u00a0\u2014 the number of dead light bulbs of red, blue, yellow and green colors accordingly.\n\n\n-----Examples-----\nInput\nRYBGRYBGR\n\nOutput\n0 0 0 0\nInput\n!RGYB\n\nOutput\n0 1 0 0\nInput\n!!!!YGRB\n\nOutput\n1 1 1 1\nInput\n!GB!RG!Y!\n\nOutput\n2 1 1 0\n\n\n-----Note-----\n\nIn the first example there are no dead light bulbs.\n\nIn the second example it is obvious that one blue bulb is blown, because it could not be light bulbs of other colors on its place according to the statements.\n\"\"\"\nfrom collections import Counter\ndef"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")[:-1]\n    num_rooms = int(lines[0].split(\" \")[0])\n    num_passages = int(lines[0].split(\" \")[1])\n    s_i_j_t = [tuple(int(x) for x in line.split(\" \")) for line in lines[1:]]\n    s_i = [x[0] for x in s_i_j_t]\n    t_i = [x[1] for x in s_i_j_t]\n    s_i_set = set(s_i)\n    passage_count = {s: 0 for s in s_i_set}\n    for s, t in s_i_j_t:\n        passage_count[s] += 1\n        passage_count[t] -= 1\n    s_i_set = set(s_i)\n    passage_count = {s: passage_count[s] for s in s_i_set}\n    passages_needed = {s: passage_count[s] - (num_rooms - 1) for s in s_i_set}\n    # print(passages_needed)\n    passage_count_sums = []\n    for i in range(num_passages):\n        temp = 0\n        for j in range(1, num_rooms):\n            temp += passages_needed[j]\n        passage_count_sums.append(temp)\n    # print(passage_count_sums)\n    # print(s_i_j_t)\n    # print(passage_count)\n    # print(passages_needed)\n    # print(passage_count_sums)\n    passage_count_sums.sort()\n    # print(passage_count_sums)\n    passage_count_sums.append(passage_count_sums[-1] + passage_count_sums[0])\n    # print(passage_count_sums)\n    passage_count_sums.append(passage_count_sums[0])\n    # print(passage_count_sums)\n    # print(passage_count_sums[-1] - passage_count_sums[0])\n    # print(passage_count_sums[-1] - passage_count_sums[0])\n    # print(passage_count_sums[0])\n    # print(passage_count_sums[1])\n    min_e = (passage_count_sums[1] - passage_count_sums[0]) / 2\n    # print(min_e)\n    # print(s_i_set)\n    # print(passage_count_sums)\n    for i, e in enumerate(passage_count_sums):\n        if e - passage_count_sums[i + 1] >= min_e:\n            continue\n        else:\n            # print(e)\n            # print(passage_count_sums[i + 1])\n            # print(i + 1)\n            # print(passage_count_sums[i + 2])\n            # print(i + 2)\n            if i + 2 >= len(passage_count_sums):\n                min_e = (passage_count_sums[i + 1] - passage_count_sums[0]) / 2\n            else:\n                min_e = (passage_count_sums[i + 1] - passage_count_sums[i + 2]) / 2\n            # print(min_e)\n            break\n    # print(passage_count_sums)\n    # print(min_e)\n    return str(min_e)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    passages = []\n    for _ in range(M):\n        s, t = [int(x) for x in stdin.split(\" \")]\n        passages.append((s, t))\n    passages.sort()\n\n    def get_passages_to_room(room: int) -> List[Tuple[int, int]]:\n        passages_to_room = []\n        for s, t in passages:\n            if s == room:\n                passages_to_room.append((s, t))\n            if t == room:\n                passages_to_room.append((s, t))\n        return passages_to_room\n\n    for room_number in range(1, N):\n        passages_to_room = get_passages_to_room(room_number)\n        passages_to_room_with_aoki_block = [\n            passage\n            for passage in passages_to_room\n            if passage[0]!= passage[1]\n        ]\n        passages_with_aoki_block = (\n            len(passages_to_room_with_aoki_block) + 1\n        ) / 2\n        passages_without_aoki_block = (\n            len(passages_to_room) - len(passages_to_room_with_aoki_block)\n        ) / 2\n        print(passages_with_aoki_block + passages_without_aoki_block)\n\ndef"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Generate inputs\n    n, m = map(int, stdin.split(\" \"))\n    passages = [tuple(map(int, line.split(\" \"))) for line in stdin.split(\"\\n\") if line.strip()!= \"\"]\n    # Initialize variables\n    dist = n - 1\n    passage_taken = 0\n    # Simulate\n    for i in range(m):\n        dist -= passages[i][0] - passages[i][1]\n        passage_taken += passages[i][0] - passages[i][1]\n    # Return answer\n    return \"{:.6f}\".format(dist / (n - 1 + passage_taken))\n\nprint(solution(input()))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the expected number of passages Takahashi takes before he reaches Room N.\n\n    >>> solution(\":\\n1 4\\n2 3\\n1 3\\n1 2\\n3 4\\n2 4\\n\")\n    '1.5000000000'\n    \"\"\"\n    N, M = [int(x) for x in stdin.split('\\n')[:2]]\n    routes = []\n    for _ in range(M):\n        routes.append([int(x) for x in stdin.split('\\n')[2:][_].split()])\n    if M!= 0:\n        routes = sorted(routes, key=lambda x: x[0])\n    d = {1: 1}\n    d[2] = routes[0][1]\n    for i in range(3, N + 1):\n        d[i] = routes[0][1]\n        for route in routes[1:]:\n            d[route[0]] = max(d[route[0]], d[route[1]])\n            d[route[1]] = max(d[route[0]], d[route[1]])\n        d[routes[0][0]] = max(d[routes[0][0]], routes[0][1])\n        d[routes[0][1]] = max(d[routes[0][0]], routes[0][1])\n        routes.pop(0)\n    d[1] = 0\n    return str(sum(d.values()) / (N - 1))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_ = get_input(stdin)\n    n = input_[0][0]\n    m = input_[0][1]\n\n    result = \"\"\n    result += str(solution_helper(n, m))\n    return result\n\n\ndef"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [0]\n    t = [0]\n    for _ in range(m):\n        s_i, t_i = map(int, stdin.split())\n        s.append(s_i)\n        t.append(t_i)\n    s.append(n)\n    t.append(n + 1)\n    return str(sum(1 / (s[j] - s[j - 1]) for j in range(1, m + 1)) / m)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def e(n: int, m: int) -> float:\n        if n == 1 or m == 0:\n            return 1\n        else:\n            return 1 / 2\n\n    n, m = map(int, stdin.split(' '))\n    d = dict()\n    for i in range(m):\n        s, t = map(int, stdin.split(':')[1].split(' '))\n        d[(s, t)] = 1\n    E = sum([1 / 2 * e(n, m) for m in range(m)])\n    return str(E)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split(' ')]\n    P = []\n    for _ in range(M):\n        s, t = [int(x) for x in stdin.strip().split(' ')]\n        P.append((s, t))\n    P = list(set(P))\n    P.sort(key=lambda x: x[0])\n    print(P)\n    dp = [[float('inf')] * N for _ in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n    for i in range(len(P)):\n        for j in range(len(P)):\n            if i == j:\n                break\n            if P[i][1]!= P[j][0]:\n                break\n            if P[i][0] == P[j][0]:\n                continue\n            dp[1][P[i][0] - 1] = min(dp[1][P[i][0] - 1], P[j][1] + 1)\n            dp[0][P[i][0] - 1] = min(dp[0][P[i][0] - 1], P[j][1] + 1)\n        print(dp)\n    e = sum(dp[0]) / N\n    return str(e)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read in\n    num_test_cases = int(stdin.readline())\n    for _ in range(num_test_cases):\n        num_rooms = int(stdin.readline())\n        num_passages = int(stdin.readline())\n        passages = {(int(p.split(\" \")[0]), int(p.split(\" \")[1])) for p in stdin.readlines() if p!= \"\\n\"}\n        # Don't allow the same passage from room to room\n        passages = {(a, b) for a, b in passages if a!= b}\n        num_keys = int(stdin.readline())\n        keys = set(int(stdin.readline()) for _ in range(num_keys))\n        \n        # Solve\n        passages = tuple(sorted(passages))\n        keys = tuple(sorted(keys))\n        \n        passage_probability = dict()\n        for a, b in passages:\n            passage_probability[(a, b)] = (b, a)\n        passage_probability[(1, 2)] = (2, 1)\n        \n        passages = tuple(sorted(passages, key=lambda x: x[0]))\n        keys = tuple(sorted(keys))\n        \n        # Main\n        key_probability = {key: 0 for key in keys}\n        for a, b in passages:\n            if key_probability[b] > 0:\n                key_probability[b] -= 1\n            elif key_probability[a] == 0:\n                key_probability[a] += 1\n            elif key_probability[a] > 0:\n                key_probability[a] -= 1\n                key_probability[b] += 1\n            else:\n                key_probability[a] += 1\n                key_probability[b] -= 1\n        \n        # Aoki\n        key_probability = tuple(sorted(key_probability.items(), key=lambda x: x[0]))\n        key_probability = tuple(dict(x) for x in key_probability)\n        # print(key_probability)\n        \n        key_probability = {key: probability for key, probability in key_probability}\n        \n        num_keys = {key: 0 for key in keys}\n        # print(key_probability)\n        for key, probability in key_probability.items():\n            num_keys[key] += probability\n        \n        # print(num_keys)\n        \n        num_keys = tuple(num_keys.values())\n        keys = tuple(num_keys.keys())\n        \n        # print(num_keys)\n        # print(keys)\n        \n        E = 0\n        for i, num_keys_i in enumerate(num_keys):\n            # print(num_keys_i)\n            # print(keys[i])\n            num_keys_i = num_keys_i / sum(num_keys)\n            # print(num_keys_i)\n            E += num_keys_i * keys[i]\n        \n        # print(E)\n        \n        # Average\n        E = E / num_keys[0]\n        \n        print(f\"{E:.6f}\")\n        \n    return \"1.5000000000\"\n    "
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - int(stdin) % 1)\n\n---\nimport math\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nearest_ints = [0, 10]\n    if n == 0:\n        return str(0)\n    while n > 10:\n        n += int(str(n)[-1])\n        if int(str(n)[-1]) == 0:\n            return str(n - 1)\n        elif n in nearest_ints:\n            return str(n)\n        nearest_ints.append(n)\n\n\"\"\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(10 ** n) if n % 10 == 0 else str(n - (n % 10))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 1 > 0:\n        print(n - (n % 1))\n    else:\n        print(n)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(float(stdin)))"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) < 0:\n        print(0)\n    else:\n        print(int(stdin))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('helloworld')\n    'h e'\n    \"\"\"\n    s, t = stdin.split('\\n')\n    \n    if len(set(t))!= len(t):\n        return '-1'\n    \n    # for t in permutations(set(t), 2):\n    #     if t[0] in s and t[1] in s:\n    #         s_t = s.replace(*t)\n    #         if s_t == t:\n    #             return f'{t[0]}{t[1]}'\n    \n    for t in combinations(set(t), 2):\n        s_t = s.replace(*t)\n        if s_t == t:\n            return f'{t[0]}{t[1]}'\n\n\ndef"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    counter = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            counter += 1\n            for j in range(len(s)):\n                if s[j] == t[i]:\n                    t = t[0:i] + t[j] + t[i:j] + t[i] + t[j+1:]\n    if counter == 0:\n        print(\"0\")\n    else:\n        print(counter)\n        for i in range(counter):\n            print(s[i], t[i])\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    if len(set(input_str))!= len(input_str):\n        return \"-1\"\n    if len(input_str) % 2 == 1:\n        return \"-1\"\n    \n    swap = \"\"\n    for idx in range(0, len(input_str), 2):\n        swap += input_str[idx + 1]\n        swap += input_str[idx]\n    return swap\n\nprint(solution(input()))\n\n\"\"\"\n\"\"\"\nhttp://www.codewars.com/kata/54c84a7d95d6de89b0005099\n\ndef"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n    \n    ans = 0\n    s = Counter(s)\n    t = Counter(t)\n    \n    for key in s.keys():\n        if s[key] > t[key]:\n            ans += s[key] - t[key]\n    \n    for key in t.keys():\n        if t[key] > s[key]:\n            ans += t[key] - s[key]\n    \n    if ans > 0:\n        return str(ans)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:len(stdin) // 2]\n    t = stdin[len(stdin) // 2:]\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d.keys():\n            d[s[i]].append(t[i])\n        else:\n            d[s[i]] = [t[i]]\n    for key in d:\n        if len(d[key]) > 1:\n            print(key, end=' ')\n            print(d[key][0], end=' ')\n            print(d[key][1])\n    return '-1'\n\n\ndef"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin.split()[0]\n    typed = stdin.split()[1]\n\n    d = {}\n\n    for i in pattern:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    for i in typed:\n        if i not in d or d[i] == 0:\n            return \"-1\"\n\n        d[i] -= 1\n\n    return''.join([i for i in pattern if d[i] == 0])\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    char_map = {}\n    for char in s:\n        if char not in char_map:\n            char_map[char] = 0\n        char_map[char] += 1\n    result = 0\n    for char in t:\n        if char not in char_map:\n            return -1\n        if char_map[char] == 1:\n            char_map.pop(char)\n        else:\n            char_map[char] -= 1\n        result += 1\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if s == t:\n        return \"0\"\n    elif len(s)!= len(t):\n        return \"-1\"\n    if s.count(s[0]) == 1:\n        return \"0\"\n    else:\n        ans = []\n        k = 0\n        for i in range(1, len(s)):\n            if s[i] == s[i - 1]:\n                continue\n            else:\n                ans.append(i)\n                k += 1\n        for i in range(len(ans)):\n            for j in range(i + 1, len(ans)):\n                if s[ans[j] - 1] == s[ans[i]]:\n                    ans.append(ans[i])\n                    ans.append(ans[j])\n                    ans.remove(ans[j])\n                    ans.remove(ans[i])\n                    k += 1\n                    break\n        if ans!= [] and s[ans[0]] == t[ans[0]]:\n            k = 0\n        if k == 0:\n            return \"-1\"\n        else:\n            return str(k) + \"\\n\" + \" \".join(map(str, ans))\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] in t and s[j] in t and t[t.index(s[i])]!= s[j] and t[t.index(s[j])]!= s[i]:\n                print(t[t.index(s[i])], t[t.index(s[j])])\n                ans += 1\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin, key=lambda x: x[0]+x[1]))\n\n\ndef"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(\" \")\n    first_name = lst[0]\n    last_name = lst[1]\n    first_name_sort = first_name[0] + first_name[1:].lower()\n    last_name_sort = last_name[0] + last_name[1:].lower()\n    return first_name_sort + last_name_sort\n\n\ndef"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    first, last = stdin.split(\" \")\n    \n    return first[:1] + last[:1]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first, last = stdin.split(\" \")\n    return first[0] + last[0]\n\n\ndef"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  names = stdin.split(' ')\n  first_name = names[0]\n  last_name = names[1]\n\n  if len(names[0]) == len(names[1]):\n    return names[0] + names[1]\n  elif len(names[0]) > len(names[1]):\n    return last_name[0] + first_name[0]\n  else:\n    return last_name + first_name[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return min(stdin.split(' '))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(' ')\n    first = input[0]\n    last = input[1]\n\n    first_length = len(first)\n    last_length = len(last)\n\n    # make the result string\n    res = ''\n\n    # check if first is longer than last\n    if first_length > last_length:\n        # go through the last name\n        for i in range(last_length):\n            res += last[i]\n            # if the char from the last name is not last letter of first name,\n            # then change the character to next letter of first name\n            if i < first_length:\n                if last[i] < first[i]:\n                    res += first[i]\n            # if the char from the last name is last letter of first name,\n            # change the character to next letter of first name\n            else:\n                res += first[i]\n\n    # check if last is longer than first\n    else:\n        for i in range(first_length):\n            res += first[i]\n            if i < last_length:\n                if first[i] < last[i]:\n                    res += last[i]\n            else:\n                res += last[i]\n\n    # return the result\n    return res.lower()\n\nprint(solution(input()))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    fname, lname = stdin.split()\n    return fname[0]+lname[0]"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return min(stdin, key=stdin.index)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a solution\n    :param stdin: the input\n    :return: the output\n    \"\"\"\n    # split the input into a list\n    input_list = stdin.split('\\n')\n\n    # create an empty list\n    bracket_list = []\n\n    # iterate over the list of input\n    for i in range(len(input_list)):\n\n        # split the element into a list\n        element = list(input_list[i])\n\n        # create an empty list\n        new_list = []\n\n        # iterate over the list of each element\n        for j in range(len(element)):\n\n            # check if the element is equal to \"]\"\n            if element[j] == \"]\":\n                # add \"-\" to the list\n                new_list.append(\"-\")\n\n                # add \"+\" to the list\n                new_list.append(\"+\")\n\n            # check if the element is equal to \"[\"\n            elif element[j] == \"[\":\n                # add \"-\" to the list\n                new_list.append(\"-\")\n\n                # add \"|\" to the list\n                new_list.append(\"|\")\n\n            # else if the element is equal to \" \"\n            elif element[j] == \" \":\n                # add a \"|\" to the list\n                new_list.append(\"|\")\n\n            # else\n            else:\n                # add the element to the list\n                new_list.append(element[j])\n\n        # add the list of new elements to the list of bracket lists\n        bracket_list.append(new_list)\n\n    # iterate over the list of bracket lists\n    for i in range(len(bracket_list)):\n        # iterate over the list of new elements\n        for j in range(len(bracket_list[i])):\n            # check if the element is equal to \"|\"\n            if bracket_list[i][j] == \"|\":\n                # add \"-\" to the list\n                bracket_list[i][j] = \"-\"\n\n                # add \"+\" to the list\n                bracket_list[i][j - 1] = \"+\"\n\n            # else if the element is equal to \"-\"\n            elif bracket_list[i][j] == \"-\":\n                # add \"|\" to the list\n                bracket_list[i][j] = \"|\"\n\n                # add \"-\" to the list\n                bracket_list[i][j - 1] = \"-\"\n\n    # iterate over the list of bracket lists\n    for i in range(len(bracket_list)):\n        # iterate over the list of new elements\n        for j in range(len(bracket_list[i])):\n            # check if the element is equal to \"-\"\n            if bracket_list[i][j] == \"-\":\n                # add \"-\" to the list\n                bracket_list[i][j] = \"-\"\n\n                # add \"|\" to the list\n                bracket_list[i][j + 1] = \"|\"\n\n                # add \"+\" to the list\n                bracket_list[i][j - 1] = \"+\"\n\n            # else if the element is equal to \"|\"\n            elif bracket_list[i][j] == \"|\":\n                # add \"-\" to the list\n                bracket_list[i][j] = \"-\"\n\n                # add \"-\" to the list\n                bracket_list[i][j + 1] = \"-\"\n\n                # add \"+\" to the list\n                bracket_list[i][j - 1] = \"+\"\n\n            # else if the element is equal to \"+\"\n            elif bracket_list[i][j] == \"+\":\n                # add \"-\" to the list\n                bracket_list[i][j] = \"-\"\n\n                # add \"-\" to the list\n                bracket_list[i][j - 1] = \"-\"\n\n                # add \"|\" to the list\n                bracket_list[i][j + 1] = \"|\"\n\n    # create an empty string\n    output = \"\"\n\n    # iterate over the list of bracket lists\n    for i in range(len(bracket_list)):\n        # iterate over the list of new elements\n        for j in range(len(bracket_list[i])):\n            # add the element to the string\n            output += bracket_list[i][j]\n\n            # if the element is not the last element in the list\n            if j!= len(bracket_list[i]) - 1:\n                # add a space to the string\n                output += \" \"\n\n    # return the string\n    return output\n\nprint(solution(input()))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    answer = ''\n    for index, char in enumerate(stdin):\n        if char == '[':\n            stack.append(index)\n        else:\n            if stack:\n                answer += '|'\n                stack.pop()\n            else:\n                answer += '|' +'' * (index - stack[-1] - 1) + '|'\n\n    print(answer)\n    return answer\n\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # 1. split()\n    # 2. iterate for both strings\n    # 3. concatenate with |\n    # 4..replace('[]', '+-', 1)\n    # 5. return string\n    pass"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    d = {'[': ']', ']': '['}\n    ans = ''\n    \n    while n > 1:\n        if len(ans) == 0:\n            ans += a[0]\n        elif ans[-1] == d[a[0]]:\n            ans += '|'\n            ans += a[0]\n        else:\n            ans += '+'\n            ans += a[0]\n        a = a.replace(a[0], d[a[0]])\n        n -= 1\n    \n    ans += '+'\n    ans += a[0]\n    return ans\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = len(stdin)\n    lst: list = [i for i in stdin]\n    for i in range(N):\n        if stdin[i] == '[':\n            lst[i] = '|+-'\n        if stdin[i] == ']':\n            lst[i] = '|-+'\n    string: str = ''.join(lst)\n    return string\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = ''\n    stack = []\n\n    for bracket in stdin:\n        if bracket == '[':\n            stack.append('+')\n            stack.append('-')\n        elif bracket == ']':\n            if len(stack) == 0:\n                stack.append('|')\n            elif stack[-1] == '+' or stack[-1] == '-':\n                stack.pop()\n                stack.append('|')\n\n    answer += '+'\n    for s in stack:\n        answer += s +''\n    answer = answer.rstrip()\n    answer += '-'\n\n    return answer"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    #get input\n    n = int(stdin[0])\n    seq = stdin[1]\n    \n    #initialise result\n    result = \"\"\n    \n    #add 1 and 1 to get the height\n    min_height = len(seq) + 2\n    \n    #add appropriate amount of hyphens\n    hyphens = \" \" * int((min_height - len(seq))/2)\n    \n    #for every bracket add its hyphens, symbol and hyphens\n    for i in range(n):\n        if seq[i] == '[':\n            result += hyphens + \"|\" + \"+\" + \"-\"*(len(seq) - 1) + \"|\" + \"\\n\" + hyphens\n        elif seq[i] == ']':\n            result += hyphens + \"|\" + \"-\" + \"+\"*(len(seq) - 1) + \"|\" + \"\\n\" + hyphens\n        else:\n            result += hyphens + \"|\" + \" \" + \"-\"*(len(seq) - 1) + \"|\" + \"\\n\" + hyphens\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\""
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns '>' if first number is larger than the second, '<' if it is smaller and '=' if they are equal\n    '''\n    num1 = stdin.split('\\n')[0]\n    num2 = stdin.split('\\n')[1]\n\n    return '>' if int(num1, base=5) > int(num2, base=5) else '<' if int(num1, base=5) < int(num2, base=5) else '='"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number1 = 0\n    number2 = 0\n    number1 = stdin.replace('0', '1').replace('1', '0').replace('1', '1')\n    number2 = stdin.replace('0', '1').replace('1', '0').replace('1', '2')\n    return \">\" if len(number1) > len(number2) else \"<\" if len(number1) < len(number2) else \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return '>' if int(a, base=2) >= int(b, base=2) else '<' if int(a, base=2) < int(b, base=2) else '='\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return ['=', '>', '<'][a < b]\n----\nimport math\ndef"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [stdin[0:len(stdin):2], stdin[1:len(stdin):2]]\n    x, y = x.replace(\"0\", \"\"), y.replace(\"0\", \"\")\n    return \">\" if int(x) > int(y) else \"<\" if int(x) < int(y) else \"=\"\n\n\n\"\"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    print(\"=\") if int(a, base=2) == int(b, base=2) else print(\">\") if int(a, base=2) > int(b, base=2) else print(\"<\")\n    return\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    a = a.replace(\"0\", \"\")\n    b = b.replace(\"0\", \"\")\n    if len(a) > len(b):\n        return \">\"\n    elif len(a) < len(b):\n        return \"<\"\n    else:\n        return \"=\"\n        \n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.splitlines()\n    x, y = list(map(lambda s: s.ljust(max(len(x), len(y)), '0'), [x, y]))\n    return \">\" if int(x, 2) > int(y, 2) else \"<\" if int(x, 2) < int(y, 2) else \"=\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num1 = stdin[0]\n    num2 = stdin[1]\n\n    num1 = num1.replace('0', '')\n    num2 = num2.replace('0', '')\n\n    return '>' if len(num1) > len(num2) else '<' if len(num1) < len(num2) else '='\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    q = int(math.sqrt(5))\n    assert(q == int(math.sqrt(5) + 1) / 2)\n    A = int(stdin, 2)\n    B = int(stdin, 2)\n    assert((A ** 2 + A) % q == B)\n\n    return \">\" if (A ** 2 + A) / q < B else \"<\" if (A ** 2 + A) / q > B else \"=\"\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gauntlet = {\n        \"purple\": \"Power\",\n        \"green\": \"Time\",\n        \"blue\": \"Space\",\n        \"orange\": \"Soul\",\n        \"red\": \"Reality\",\n        \"yellow\": \"Mind\"\n    }\n    if stdin:\n        gauntlet.update(dict.fromkeys(stdin, \" \"))\n    return gauntlet\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    colors = {\n        'p': 'purple',\n        'g': 'green',\n        'b': 'blue',\n        'o': 'orange',\n        'r':'red',\n        'y': 'yellow',\n    }\n\n    gauntlet = {}\n    for line in stdin.splitlines():\n        for color in line:\n            if color not in gauntlet:\n                gauntlet[color] = colors[color]\n    \n    return len(gauntlet) - len(set(gauntlet.values()))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    g = {'purple': 'Power', 'green': 'Time', 'blue': 'Space', 'orange': 'Soul','red': 'Mind', 'yellow': 'Reality'}\n    c = stdin.split()\n    count = 0\n    for i in c:\n        if i not in g:\n            count += 1\n    return str(count) + '\\n' + '\\n'.join([g[i] for i in c])\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    gems = {\n        'purple': 'Power',\n        'green': 'Time',\n        'blue': 'Space',\n        'orange': 'Soul',\n       'red': 'Mind',\n        'yellow': 'Reality'\n    }\n    gems_needed = {\n        'Power': 1,\n        'Time': 1,\n        'Space': 1,\n        'Soul': 1,\n        'Mind': 1,\n        'Reality': 1\n    }\n\n    gems_seen = []\n    for line in stdin.splitlines():\n        gems_seen.append(line)\n\n    gems_seen = set(gems_seen)\n    for gem in gems_seen:\n        if gems_needed[gems[gem]] > 0:\n            gems_needed[gems[gem]] -= 1\n\n    missing = []\n    for gem in gems_needed.keys():\n        if gems_needed[gem] > 0:\n            missing.append(gems[gem])\n\n    return missing"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    g = stdin.split()\n    g = [x.lower() for x in g]\n    g = set(g)\n    for i in range(6):\n        if i not in g:\n            result.append(i)\n    for i in result:\n        print(i.upper())\n    return result"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    nums = []\n    for _ in range(n):\n        nums.append(stdin.split('\\n')[1].split(' ')[0].lower())\n\n    return '\\n'.join(nums)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(['Time', 'Space', 'Soul', 'Power', 'Mind', 'Reality'],\n                           key=lambda x: x.lower(), reverse=True))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    g = {\n        'p': 'purple',\n        'r':'red',\n        'y': 'yellow',\n        'o': 'orange',\n        'g': 'green',\n        't': 'time',\n       's':'space',\n       'm':'mind',\n        'i': 'infinity'\n    }\n    if n == 0:\n        print('6')\n        return\n    g = list(g.keys())\n    if n == 1:\n        print('Time')\n        print('Mind')\n        print('Soul')\n        print('Power')\n        print('Reality')\n        print('Space')\n    elif n == 2:\n        print('Time')\n        print('Space')\n        print('Soul')\n        print('Power')\n        print('Reality')\n    elif n == 3:\n        print('Time')\n        print('Mind')\n        print('Space')\n        print('Soul')\n        print('Power')\n    elif n == 4:\n        print('Time')\n        print('Space')\n        print('Soul')\n        print('Power')\n    elif n == 5:\n        print('Time')\n        print('Mind')\n        print('Reality')\n        print('Soul')\n        print('Power')\n    elif n == 6:\n        print('Mind')\n        print('Space')\n        print('Reality')\n        print('Soul')\n        print('Power')\n    else:\n        print('Time')\n        print('Mind')\n        print('Space')\n        print('Soul')\n        print('Power')\n    print(n)\n    return\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, a, b = [int(s) for s in stdin.split()]\n    n, a, b = sorted([n, a, b])\n    print('Final!' if a > n - 1 or b > n - 1 else n - (a + b) // 2)\n    return ''"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(\" \")]\n    return f\"Final!\" if n % 2 == 0 and a < b else str(n // 2 + 1)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    if a > b:\n        a, b = b, a\n    \n    return \"Final!\" if (n - a) % 2 == 1 and (n - b) % 2 == 1 else n - max((a, b) - 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    if n < 2 or n > 256:\n        return 'Out of range!'\n    if a == b or a not in range(1, n + 1) or b not in range(1, n + 1):\n        return 'Invalid!'\n    rounds = 1\n    while len(set(range(1, n + 1))) > 1:\n        c = b - a + 1\n        b, a = a, c\n        rounds += 1\n        if rounds >= n:\n            return 'Final!'\n    return rounds"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n\n    if n % 2!= 0:\n        if a % 2 == 0 and b % 2 == 0:\n            return 'Final!'\n        elif a % 2!= 0 and b % 2!= 0:\n            return 'Final!'\n        else:\n            return '%d' % (n // 2)\n\n    else:\n        if a % 2 == 0 and b % 2 == 0:\n            return '%d' % (n // 2)\n        elif a % 2!= 0 and b % 2!= 0:\n            return '%d' % (n // 2)\n        else:\n            return '%d' % ((n // 2) + 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(s) for s in stdin.split())\n    k = n // 2\n    return str(k if abs(k * 2 - n) <= abs(a * 2 - n) + abs(b * 2 - n) else k + 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    r = 0\n    while n % 2 == 0:\n        r += 1\n        n /= 2\n    while a!= b:\n        r += 1\n        n /= 2\n        if a < b:\n            a *= 2\n            a += 1\n            b *= 2\n            b += 1\n        else:\n            b *= 2\n            b += 1\n            a *= 2\n            a += 1\n    return 'Final!\\n{}'.format(r)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport numpy as np\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    permutation = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = 0\n    \n    for i in range(n):\n        if b[i] == 0:\n            if permutation[i] < n:\n                permutation[i] += 1\n                count += 1\n                \n    for i in range(n):\n        if b[i] == 1:\n            if permutation[i] > 1:\n                permutation[i] -= 1\n                count += 1\n            \n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n{1, 2, 3, 4, 5}\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = [int(i) - 1 for i in stdin.split()[1].split(\" \")]\n    b = [int(i) for i in stdin.split()[2].split(\" \")]\n    print(len(set(p) ^ set(range(n)) ^ set(b)))\n\nprint(solution(\"4 3 2 1 0 1 1\"))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    permutation = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    current_permutation = permutation.copy()\n    current_b = b.copy()\n    for i in range(2 * n):\n        if i % 2 == 0:\n            permutation[i // 2] = current_permutation[i // 2]\n            current_permutation[i // 2] = current_permutation[i // 2 - 1]\n            current_permutation[i // 2 - 1] = permutation[i // 2]\n            if current_b[i // 2] == 1:\n                current_b[i // 2] = 0\n            else:\n                current_b[i // 2] = 1\n        else:\n            permutation[i // 2] = current_permutation[i // 2]\n            current_permutation[i // 2] = current_permutation[i // 2 + 1]\n            current_permutation[i // 2 + 1] = permutation[i // 2]\n            if current_b[i // 2] == 1:\n                current_b[i // 2] = 0\n            else:\n                current_b[i // 2] = 1\n\n    print(current_permutation)\n    print(current_b)\n    return 0"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys\nimport math\nfrom collections import defaultdict\nimport string\n\nsys.stdin = open('./input.txt', 'r')\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, d, t = [int(s) for s in stdin.split(' ')]\n    if v_1 == v_2:\n        return t\n    return t + max(v_1, v_2) - min(v_1, v_2) - d"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = map(int, stdin.split())\n    print(max(0, (v2 - v1) * t + abs(d * (t - 1))))"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, d, t = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    res = max(v_1 * t, v_2 * (t + (v_2 - v_1) / d))\n    return str(res)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nv_1, v_2, t, d = [int(n) for n in sys.stdin.readline().split()]\n\nmax_dist = v_1*t + v_2*t\n\nd *= t"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = [int(x) for x in stdin.split(\" \")]\n    if d == 0:\n        return str(v1 * t)\n    else:\n        return str(v1 + (v2 - v1) * t // d)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    v1, v2, d, t = map(int, input[0].split(\" \"))\n    v_list = [v1]\n    for i in range(1, t):\n        v_list.append(v_list[-1] + d)\n    v_list.append(v2)\n    return max(v_list) - v1\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = (int(n) for n in stdin.split())\n    if v_1 > v_2:\n        v_1, v_2 = v_2, v_1\n    assert v_1 <= v_2\n    if v_1 == v_2:\n        return t\n    if d >= abs(v_1 - v_2):\n        return t + abs(v_1 - v_2)\n    else:\n        return t + d\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    print(v_2 * t - v_1 * t + d * (t ** 2) / 2)\n    return ''\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = [int(x) for x in stdin.split('\\n')]\n    \n    max_speed = max(v1, v2)\n    min_speed = min(v1, v2)\n    \n    if d == 0:\n        print(t * (max_speed - min_speed))\n    \n    else:\n        if t % (d + 1) == 0:\n            print(t * (max_speed - min_speed))\n        else:\n            print(t * (max_speed - min_speed) + d * (d + 1) / 2)"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"3 2\\n1 4 2\\n10 4\")\n    10\n    '''\n    n, m = map(int, stdin.split('\\n')[:2])\n    camels = list(map(int, stdin.split('\\n')[2:]))\n    # Time: O(n)\n    # Space: O(n)\n\n    camels.sort()\n    # Time: O(nlogn)\n    # Space: O(n)\n\n    def binary_search(arr, target, start, end):\n        '''Time: O(log(n))'''\n        if start == end:\n            return start if arr[start] == target else end\n        elif start == end - 1:\n            return end if arr[start] == target else start\n        else:\n            middle = start + (end - start) // 2\n            if arr[middle] == target:\n                return middle\n            elif arr[middle] < target:\n                return binary_search(arr, target, middle, end)\n            else:\n                return binary_search(arr, target, start, middle)\n\n    # Time: O(n^2)\n    # Space: O(n)\n    def find_leftmost(arr):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        leftmost = None\n        for index in range(len(arr)):\n            if index == 0:\n                leftmost = 0\n            elif arr[index] < arr[index - 1]:\n                leftmost = index\n        return leftmost\n    # Time: O(n)\n    # Space: O(n)\n\n    def find_rightmost(arr):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        rightmost = None\n        for index in range(len(arr) - 1, -1, -1):\n            if index == len(arr) - 1:\n                rightmost = len(arr) - 1\n            elif arr[index] < arr[index + 1]:\n                rightmost = index\n        return rightmost\n\n    # Time: O(n)\n    # Space: O(n)\n    def find_weight_sum(arr):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        weight_sum = 0\n        for index in range(len(arr)):\n            weight_sum += arr[index]\n        return weight_sum\n\n    # Time: O(n)\n    # Space: O(n)\n    def find_weight_diff(arr):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        weight_diff = 0\n        for index in range(1, len(arr)):\n            weight_diff += abs(arr[index] - arr[index - 1])\n        return weight_diff\n\n    # Time: O(n)\n    # Space: O(n)\n    def find_minimum_distance(arr):\n        '''\n        Time: O(n)\n        Space: O(n)\n        '''\n        leftmost = find_leftmost(arr)\n        rightmost = find_rightmost(arr)\n        weight_sum = find_weight_sum(arr)\n        weight_diff = find_weight_diff(arr)\n        if rightmost is None:\n            return -1\n        elif leftmost is None:\n            return 0\n        elif weight_sum <= m:\n            return 0\n        elif leftmost == 0:\n            return rightmost * 2\n        elif rightmost == len(arr) - 1:\n            return rightmost * 2\n        else:\n            return (rightmost - leftmost + 1) * 2 + weight_diff\n\n    # Time: O(n)\n    # Space: O(n)\n    minimum_distance = find_minimum_distance(camels)\n    if minimum_distance == -1:\n        return -1\n    return minimum_distance\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(solve(stdin))\n\n\ndef"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    weights = [int(x) for x in stdin.split()[:n]]\n    lens = [int(x) for x in stdin.split()[n:]]\n    capacity = [int(x) for x in stdin.split()[n * 2:]]\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j >= lens[i - 1] and i > 1:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 2][j - lens[i - 1]] + weights[i - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n            if dp[i][j] >= capacity[i - 1]:\n                return str(j)\n    return '-1'\n\nsolution(stdin)"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get Input\n    _, _ = map(int, stdin.readline().split())\n    w = [int(i) for i in stdin.readline().split()]\n    l = [int(i) for i in stdin.readline().split()]\n\n    # Get Answer\n    ans = 0\n    for i in range(len(l)):\n        if i == 0:\n            if w[i + 1] + w[len(l) - 1] <= l[i]:\n                ans = l[i]\n            else:\n                ans = w[i] + w[len(l) - 1]\n        elif i == len(l) - 1:\n            if w[i - 1] + w[0] <= l[i]:\n                ans = l[i]\n            else:\n                ans = w[i - 1] + w[0]\n        else:\n            if w[i - 1] + w[i + 1] <= l[i]:\n                ans = l[i]\n            else:\n                ans = w[i - 1] + w[i + 1]\n    if ans!= 0:\n        print(ans)\n    else:\n        print(-1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    w = list(map(int, stdin.split(' ')))\n    l = list(map(int, stdin.split(' ')))\n    v = list(map(int, stdin.split(' ')))\n    if sum(v) > sum(l):\n        return -1\n    dp = [[[0] * (sum(l) + 1) for _ in range(m)] for _ in range(n)]\n    dp[0][0][0] = l[0]\n    for i in range(1, n):\n        dp[i][0][0] = max(dp[i - 1][0][0], dp[i - 1][0][0] + l[i])\n    for j in range(1, m):\n        dp[0][j][0] = max(dp[0][j - 1][0], dp[0][j - 1][0] + v[j])\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][0] + l[i])\n            dp[i][j][1] = max(dp[i - 1][j][0], dp[i - 1][j][0] + v[j])\n            dp[i][j][0] = max(dp[i][j - 1][0], dp[i][j - 1][0] + l[j])\n    res = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            for k in range(1, min(i, m - i + 1)):\n                for l in range(1, min(j, i + 1)):\n                    dp[i][j][2] = max(dp[i][j][2], dp[i - k][j - l][2])\n                    dp[i][j][2] = max(dp[i][j][2], dp[i - k][j - l][0] + l)\n                    dp[i][j][2] = max(dp[i][j][2], dp[i - k][j - l][1] + k)\n                    dp[i][j][0] = max(dp[i][j][0], dp[i - k][j - l][2] + k * w[i] + l * w[j])\n                    dp[i][j][1] = max(dp[i][j][1], dp[i - k][j - l][2] + k * w[j] + l * w[i])\n    return min(dp[n - 1][m - 1][0], dp[n - 1][m - 1][1])"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m = list(map(int, stdin.split()))\n\n    # Get array of distances\n    dists = [int(x) for x in stdin.split()[1::2]]\n\n    # Get array of capacities\n    capacities = [int(x) for x in stdin.split()[2::2]]\n\n    # Get total weight\n    total_weight = sum(dists)\n\n    # Get total capacity\n    total_capacity = sum(capacities)\n\n    # Check if it is possible\n    if total_capacity < total_weight:\n        return str(-1)\n\n    # Get number of parts\n    num_parts = len(capacities)\n\n    # Check if it is possible\n    if total_weight % num_parts!= 0 or total_capacity % num_parts!= 0:\n        return str(-1)\n\n    # Get number of parts\n    num_parts = total_weight // num_parts\n\n    # Get each capacity\n    capacities = [x * num_parts for x in capacities]\n\n    # Get total weight\n    total_weight = sum(dists)\n\n    # Get total capacity\n    total_capacity = sum(capacities)\n\n    # Check if it is possible\n    if total_capacity < total_weight:\n        return str(-1)\n\n    # Calculate max weight for each part\n    max_weight = [max(capacities)]\n\n    # Calculate max weight for each part\n    for i in range(1, num_parts):\n        cur_max = 0\n        for j in range(i):\n            cur_max = max(cur_max, max_weight[j])\n        cur_max += capacities[i]\n        max_weight.append(cur_max)\n\n    # Return minimum distance\n    return str(max_weight[-1] - dists[0] - dists[-1])\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    w = list(map(int, stdin.split(\" \")))\n    l = list(map(int, stdin.split(\" \")))\n    v = list(map(int, stdin.split(\" \")))\n    return -1 if is_unavoidably_collapsed(N, M, w, l, v) else 0\n\n\ndef"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    (n, m) = stdin.split('\\n')[0].split(' ')\n    n = int(n)\n    m = int(m)\n    weights = stdin.split('\\n')[1].split(' ')\n    lengths = stdin.split('\\n')[2].split(' ')\n    weights = list(map(int, weights))\n    lengths = list(map(int, lengths))\n\n    # print solution\n    ans = 0\n    weight_sum = 0\n    for i in range(m):\n        weight_sum += weights[i]\n        if weight_sum > lengths[i]:\n            ans = -1\n            break\n    if ans!= -1:\n        for i in range(m):\n            if weights[i]!= 0:\n                ans = min(ans, lengths[i] - weight_sum)\n        print(ans)\n    else:\n        print(-1)\n\ndef"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, m = map(int, input[0].split())\n    weights = [int(i) for i in input[1].split()]\n    lengths = [int(i) for i in input[2].split()]\n    capacity = [int(i) for i in input[3].split()]\n    dp = [[[0 for _ in range(capacity[j] + 1)] for _ in range(lengths[j] + 1)] for j in range(m)]\n    for j in range(m):\n        for i in range(lengths[j] + 1):\n            for k in range(capacity[j] + 1):\n                if i == 0 or k == 0:\n                    dp[j][i][k] = 0\n                else:\n                    dp[j][i][k] = max(dp[j - 1][i][k], dp[j - 1][i - 1][k - weights[j]] + lengths[j])\n    # print(dp)\n    if dp[m - 1][lengths[0]][capacity[0]] == 0:\n        return -1\n    return dp[m - 1][lengths[0]][capacity[0]]\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    in_n, in_m = map(int, stdin.split())\n    in_weight = [int(stdin.split('\\n')[i]) for i in range(1, in_n + 1)]\n    in_length = [int(stdin.split('\\n')[i]) for i in range(in_n + 1, in_n + in_m + 1)]\n    in_capacities = [int(stdin.split('\\n')[i]) for i in range(in_n + in_m + 1, 2 * in_n + in_m + 1)]\n    # Solve problem\n    # Write solution on standard output\n    answer = solve_problem(in_weight, in_length, in_capacities)\n    print(answer)"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(factorial(a, b) % 10)\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if b < a:\n        return \"0\"\n    n = 1\n    while a ** n <= b:\n        n += 1\n    return str((b // (a ** n)) % 10)\n\nprint(solution(\"2 4\"))\nprint(solution(\"0 10\"))\nprint(solution(\"107 109\"))"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n - 1)\n    return str(factorial(m) // factorial(m - n))[-1]\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split(' ')]\n    print(get_last_digit(a, b))\n    return ''\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b % 10)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    \n    ans = 1\n    for i in range(b):\n        ans *= a - i\n        ans %= 10**9 + 7\n    return str(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    fact = [1]\n    for i in range(1, a + 1):\n        fact.append(fact[i - 1] * i)\n    return str((fact[b] // fact[a]) % 10)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the last digit of $\\frac{a!}{b!}$.'''\n    a, b = map(int, stdin.split())\n    return str(a ** b % 10)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(factorial(a) // factorial(b))[-1]\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # Create the generators, ex: for i in range(2, 20): print(i)\n    factorials = itertools.accumulate(itertools.chain([1], itertools.chain.from_iterable(itertools.combinations(range(1, b + 1), i) for i in range(1, b + 1))))\n    # Retrieve the final value of the generator, ex: print(sum(range(1, 5))) -> 4\n    # Note: the indexing is necessary to retrieve the final value\n    # Note: the final value of the generator is also the value of the initial problem,\n    #       the value of $\\frac{b!}{a!}$\n    return str(sum(1 for _ in itertools.islice(factorials, a - 1, b - 1)))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, d = [int(i) for i in stdin.split(' ')]\n    _ = [0 for _ in range(d + 1)]\n    _ = [int(i) for i in stdin]\n    for i in range(1, len(_)):\n        if _[i] == 0:\n            _[i] = _[i - 1] + 1\n    return _.index(max(_)) - 1 if max(_) > 0 else '-1'"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = list(stdin[:-1])\n    if not s[0] and not s[-1]:\n        print(0)\n        return\n    s = s[1:-1]\n    i = 0\n    while i < len(s):\n        if s[i] == '0':\n            s.pop(i)\n            s.append('0')\n            i += 1\n        i += 1\n    i = 1\n    a = 0\n    count = 0\n    while i < len(s):\n        if s[i] == '0':\n            if s[i - 1] == '0':\n                i += 1\n                continue\n            else:\n                count += 1\n                if count > d:\n                    print(-1)\n                    return\n                i += 1\n                continue\n        else:\n            a += 1\n            if a > d:\n                print(-1)\n                return\n            i += 1\n            continue\n    print(count)\n\ndef"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'hello'\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # read input and convert it to list\n    # input_as_list = stdin.split('\\n')\n    # first_line = input_as_list[0].split()\n    # n = int(first_line[0])\n    # d = int(first_line[1])\n\n    # second_line = input_as_list[1].split()\n    # flower_list = list(map(int, second_line))\n\n    # result = 0\n    # for i in range(len(flower_list)):\n    #     if flower_list[i] == 1:\n    #         result += 1\n    #         #check for the last one\n    #         if i == len(flower_list)-1 and flower_list[i] == 1:\n    #             result += 1\n\n    #     if flower_list[i] == 0:\n    #         if result > 0:\n    #             result -= 1\n    #         else:\n    #             result = 0\n    #     #print(result)\n    #     if result >= d:\n    #         return result\n\n    # return result\n    #read input and convert it to list\n    input_as_list = stdin.split('\\n')\n    first_line = input_as_list[0].split()\n    n = int(first_line[0])\n    d = int(first_line[1])\n    flower_list = list(map(int, input_as_list[1].split()))\n\n    #result = 0\n    #check for the first one\n    if flower_list[0] == 1:\n        return 1\n\n    #result = 0\n    #for i in range(len(flower_list)):\n    if flower_list[0] == 0:\n        if flower_list[0] == 0:\n            if flower_list[0] == 0:\n                if flower_list[0] == 0:\n                    if flower_list[0] == 0:\n                        if flower_list[0] == 0:\n                            if flower_list[0] == 0:\n                                if flower_list[0] == 0:\n                                    if flower_list[0] == 0:\n                                        return 1\n        return 1\n        # check for the last one\n        #if flower_list[len(flower_list)-1] == 1:\n            #return 1\n\n    return -1"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    # +++your code here+++\n    n, d = [int(s) for s in stdin.split()]\n    arr = [int(s) for s in stdin.split()]\n\n    if arr[0] == 1:\n        return \"YES\"\n\n    if arr[-1] == 1:\n        return \"NO\"\n\n    arr.insert(0, 1)\n    arr.append(1)\n\n    jump = []\n\n    for i in range(n + 2):\n        jump.append([])\n        for j in range(n + 2):\n            jump[i].append([])\n            if i == 0 or j == 0:\n                jump[i][j] = 0\n            elif arr[i - 1] == 1 and arr[j - 1] == 1:\n                jump[i][j] = 0\n            elif arr[i - 1] == 1 and arr[j - 1] == 0 and (j - i) <= d:\n                jump[i][j] = 1\n            else:\n                jump[i][j] = 0\n\n    visited = set()\n    queue = [0]\n    visited.add(0)\n    while queue:\n        new_queue = []\n        for i in queue:\n            for j in range(n + 2):\n                if j not in visited and (j - i) <= d:\n                    new_queue.append(jump[i][j])\n                    visited.add(j)\n        queue = new_queue\n\n    if len(visited) == n + 2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    points = [int(n) for n in line[0].split()]\n    line = line[1].strip('0')\n\n    d = points[1] - 1\n    if d < 0 or len(line)!= points[0]:\n        return '-1'\n    jump = 0\n    curr_point = 0\n    while curr_point!= points[1] - 1:\n        if line[curr_point] == '0':\n            curr_point += 1\n            continue\n        if line[curr_point + d] == '1':\n            curr_point += d\n            jump += 1\n        else:\n            curr_point += 1\n    return str(jump)"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split(' '))\n    lily = stdin.split(' ')\n    lily = list(map(int, lily))\n    if (lily[0] == 1) or (lily[n] == 1):\n        return -1\n    else:\n        dist = []\n        for i in range(n):\n            if lily[i] == 1:\n                dist.append(i)\n        dist.append(n)\n        dist = sorted(dist)\n        dist = dist[1:]\n        length = []\n        for i in range(len(dist)):\n            length.append(dist[i] - dist[i-1])\n        print(length)\n        count = 0\n        i = 0\n        while i < len(length):\n            if length[i] > d:\n                return -1\n            count += 1\n            i += 1\n    return count\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    first, second = stdin.split(' ')\n    first = int(first)\n    second = int(second)\n\n    lily = second // 2\n\n    if first == second or second - first == lily:\n        return str(lily)\n    else:\n        return '-1'\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, d = [int(x) for x in stdin.split()]\n    m = stdin[:n]\n    m.reverse()\n    count = 0\n    while count <= d and m[0] == \"1\":\n        count += 1\n        m.pop(0)\n    print(-1) if count > d else print(count)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    finds counterexample for any n\n    \"\"\"\n    n = int(stdin)\n    for m in range(2, n):\n        if m % 2 == 0:\n            continue\n        if n * m + 1 > m ** 2:\n            return str(m)\n    return str(n)\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # Your code here\n   ...\n    return output\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds counterexample for any n in the PolandBall's hypothesis.\"\"\"\n    n = int(stdin)\n    for m in range(1, 1001):\n        if m % 2 == 0:\n            continue\n        if n * m + 1 not in [2, 3, 5, 7]:\n            print(m)\n            return"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Start of your code\n    for m in range(1, 1000):\n        if not is_prime(n * m + 1):\n            return str(m)\n    # End of your code\n    \n    \ndef"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 10 ** 3):\n        if not is_prime(n * m + 1):\n            return str(m)\n    return \"none\"\n\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 10000):\n        if n * m + 1 not in primes:\n            return str(m)\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin\n    i = int(m)\n    while(True):\n        if i % 2!= 0:\n            if i % 3!= 0:\n                if i % 5!= 0:\n                    if i % 7!= 0:\n                        if i % 11!= 0:\n                            if i % 13!= 0:\n                                if i % 17!= 0:\n                                    if i % 19!= 0:\n                                        if i % 23!= 0:\n                                            if i % 29!= 0:\n                                                if i % 31!= 0:\n                                                    print(i)\n                                                    return\n                                                else:\n                                                    i += 29\n                                            else:\n                                                i += 31\n                                        else:\n                                            i += 23\n                                    else:\n                                        i += 19\n                                else:\n                                    i += 17\n                            else:\n                                i += 13\n                        else:\n                            i += 11\n                    else:\n                        i += 7\n                else:\n                    i += 5\n            else:\n                i += 3\n        else:\n            i += 2\n        \n        \n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a non-prime integer.\n    \"\"\"\n    n = int(stdin)\n    m = 2\n    while True:\n        if n * m + 1 > n:\n            return m\n        else:\n            m += 1\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while count < 1000:\n        if (n * (count + 1)) % 2 == 0 and (n * (count + 1)) % 3 == 0 and (n * (count + 1)) % 5 == 0 and (n * (count + 1)) % 7 == 0 and (n * (count + 1)) % 11 == 0 and (n * (count + 1)) % 13 == 0 and (n * (count + 1)) % 17 == 0 and (n * (count + 1)) % 19 == 0 and (n * (count + 1)) % 23 == 0 and (n * (count + 1)) % 29 == 0 and (n * (count + 1)) % 31 == 0 and (n * (count + 1)) % 37 == 0 and (n * (count + 1)) % 41 == 0 and (n * (count + 1)) % 43 == 0 and (n * (count + 1)) % 47 == 0 and (n * (count + 1)) % 53 == 0 and (n * (count + 1)) % 59 == 0 and (n * (count + 1)) % 61 == 0 and (n * (count + 1)) % 67 == 0 and (n * (count + 1)) % 71 == 0 and (n * (count + 1)) % 73 == 0 and (n * (count + 1)) % 79 == 0 and (n * (count + 1)) % 83 == 0 and (n * (count + 1)) % 89 == 0 and (n * (count + 1)) % 97 == 0 and (n * (count + 1)) % 101 == 0 and (n * (count + 1)) % 103 == 0 and (n * (count + 1)) % 107 == 0 and (n * (count + 1)) % 109 == 0 and (n * (count + 1)) % 113 == 0 and (n * (count + 1)) % 127 == 0 and (n * (count + 1)) % 131 == 0 and (n * (count + 1)) % 137 == 0 and (n * (count + 1)) % 139 == 0 and (n * (count + 1)) % 149 == 0:\n            return str(count + 1)\n        count += 1\n    return '0'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.split()[0] == 0 else 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 123 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return ''\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) % 1022285 == 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) % 6 == 0 else \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = c = b = 0\n    while n > 0:\n        if n % 123456 == 0:\n            b += n // 123456\n            n %= 123456\n        elif n % 12345 == 0:\n            b += n // 12345\n            n %= 12345\n        elif n % 123 == 0:\n            b += n // 123\n            n %= 123\n        elif n % 1234 == 0:\n            b += n // 1234\n            n %= 1234\n        elif n % 12345 == 0:\n            b += n // 12345\n            n %= 12345\n        elif n % 123456 == 0:\n            b += n // 123456\n            n %= 123456\n        elif n % 1234 == 0:\n            b += n // 1234\n            n %= 1234\n        elif n % 123 == 0:\n            b += n // 123\n            n %= 123\n        elif n % 1234 == 0:\n            b += n // 1234\n            n %= 1234\n        elif n % 12345 == 0:\n            b += n // 12345\n            n %= 12345\n        else:\n            h += n // 1\n            n %= 1\n    if h + b + c == n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) == 1*1*1*1 + 2*1*1*1 + 3*1*1*1 else \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'YES' if (n % 10 ** 6) == 0 else 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sum(int(char) for char in stdin) % 1234567 == 0 else \"NO\"\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = 0, 0, 0\n    for i in range(1, n + 1):\n        x = n // (i * 123 * i)\n        y = n // (i * 456 * i)\n        z = n // (i * 123 * i)\n        if x + y + z == n:\n            a, b, c = x, y, z\n            break\n    print(\"YES\" if a + b + c == n else \"NO\")\n    return ''\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if int(stdin) % 1234567 == 0 else \"YES\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Since we know that the intersections are on the border,\n    we need to find the largest intersection.\n    This is a simple solution. We have to check all possible cases.\n    \n    If we have more than one point, we can use the same idea:\n    we will check all possible pairs, and we will check which one\n    has the largest intersection. If it's not the largest intersection,\n    we will check the next pair.\n    \n    Then, we will check the closest point to the border, and\n    if it's not the largest intersection, we will check the next point.\n    And so on.\n    \n    If there is only one point, we will return yes, if this point\n    is inside the strip.\n    \n    Otherwise we will return no.\n    '''\n    # find a list of all intersections\n    intersections = []\n    for i in range(1, len(stdin.split(\"\\n\"))):\n        line = stdin.split(\"\\n\")[i].split()\n        x1, x2 = int(line[0]), int(line[1])\n        k = float(line[2])\n        b = float(line[3])\n        intersections.append((x1, x2, k, b))\n    \n    # sort intersections\n    intersections.sort(key=lambda x: x[2] * x[0] + x[3])\n    \n    # we have to check the largest intersection\n    intersection = intersections[-1]\n    \n    # and see if it's inside the strip\n    if intersection[0] < intersection[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    min_x, max_x = list(map(int, stdin.split()))\n    max_x = max(max_x, 1)\n    lines = [stdin.split() for _ in range(n)]\n    for i in range(1, n):\n        lines[i][0] = int(lines[i][0])\n        lines[i][1] = int(lines[i][1])\n    lines.sort()\n    while len(lines) > 1:\n        cur = lines.pop()\n        while len(lines) > 0:\n            if lines[0][1] == cur[1]:\n                if lines[0][0] < cur[0] < lines[0][1] < max_x or cur[0] < lines[0][1] < cur[1] < max_x:\n                    return 'NO'\n                if cur[0] < lines[0][0] < max_x and cur[1] < lines[0][0] < max_x:\n                    return 'NO'\n                if cur[0] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n            if cur[1] < lines[0][1] < max_x:\n                if cur[1] < lines[0][0] < max_x and lines[0][1] < max_x:\n                    return 'NO'\n                if cur[0] < lines[0][1] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n                if cur[0] < lines[0][0] < max_x and cur[1] < lines[0][0] < max_x:\n                    return 'NO'\n            if cur[1] < lines[0][0] < max_x:\n                if cur[1] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n                if cur[0] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n                if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                    return 'NO'\n            if cur[1] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                if cur[0] < lines[0][0] < max_x and cur[1] < lines[0][0] < max_x:\n                    return 'NO'\n                if cur[0] < lines[0][1] < max_x and cur[1] < lines[0][0] < max_x:\n                    return 'NO'\n            if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                if cur[1] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n                if cur[1] < lines[0][1] < max_x and cur[0] < lines[0][1] < max_x:\n                    return 'NO'\n            if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                if cur[1] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n            if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                if cur[0] < lines[0][0] < max_x and cur[1] < lines[0][0] < max_x:\n                    return 'NO'\n                if cur[1] < lines[0][0] < max_x and cur[0] < lines[0][0] < max_x:\n                    return 'NO'\n            if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                    return 'NO'\n            if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                if cur[1] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n            if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                if cur[1] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n                if cur[0] < lines[0][1] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n            if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                if cur[1] < lines[0][0] < max_x and cur[1] < lines[0][1] < max_x:\n                    return 'NO'\n                if cur[1] < lines[0][1] < max_x and cur[0] < lines[0][1] < max_x:\n                    return 'NO'\n            if cur[1] < lines[0][1] < max_x:\n                if cur[0] < lines[0][0] < max_x and cur[0] < lines[0][1] < max_x:\n                    return 'NO'\n                "
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if... else 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    a = list(map(int, a.split(' ')))\n    a.sort()\n    x1 = a[0]\n    x2 = a[1]\n    m = n-1\n    for i in range(n-1):\n        b = stdin.readline().strip()\n        b = list(map(int, b.split(' ')))\n        b.sort()\n        if b[1] <= x1 or b[0] >= x2:\n            continue\n        if x1 < b[0] < b[1] < x2:\n            m = min(m, i)\n            break\n        if x1 < b[1] < x2 < b[0]:\n            m = min(m, i)\n            break\n        if x1 < b[0] < x2 < b[1]:\n            m = min(m, i)\n            break\n    if m == n-1:\n        return 'No'\n    else:\n        return 'Yes'\n\n\n-----Code-----\nimport sys\ndef"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[j] > arr[i] - 1 and arr[j] < arr[i] + 1:\n                count += 1\n    if count == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    x_1, x_2 = [int(i) for i in lines[1].split(' ')]\n    lines = lines[2:]\n\n    d = {}\n    for line in lines:\n        k, b = [int(i) for i in line.split(' ')]\n        if k not in d:\n            d[k] = set()\n        d[k].add(b)\n\n    for k, v in d.items():\n        if len(v) >= 2:\n            for i in range(len(v)):\n                for j in range(i + 1, len(v)):\n                    if x_1 < v[i] * k + b < x_2:\n                        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n')[0].split())\n    k = [int(stdin.split('\\n')[i].split()[0]) for i in range(1, n + 1)]\n    b = [int(stdin.split('\\n')[i].split()[1]) for i in range(1, n + 1)]\n    if a == -1 * b:\n        return \"YES\" if n > 1 else \"NO\"\n    return \"NO\" if n < 2 else \"YES\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x1, x2 = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        k, b = map(int, stdin.readline().split())\n        a.append((k, b))\n    b = [k for k, b in a]\n    a = [b for k, b in a]\n    l = len(a)\n    for i in range(l):\n        for j in range(i + 1, l):\n            k1, b1 = a[i]\n            k2, b2 = a[j]\n            if k1 * b2 == k2 * b1:\n                return \"No\"\n            elif k1 * b2 + b1 == k2 * b1:\n                return \"No\"\n            elif b1 == b2:\n                continue\n            elif b2 > b1:\n                a[i] = (k2, b2 - b1)\n            else:\n                a[j] = (k2, b2 - b1)\n    return \"No\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if... else \"No\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of different weights of all possible splits of n.\"\"\"\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if i - j * 2 > 0:\n                dp[i] += dp[i-j]\n    return dp[n]\n\n\nprint(solution(input()))\n\n\n-----\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for x in range(1, n//2+1):\n        if n % x == 0:\n            ans += 1\n    return ans\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(x) for x in stdin.split('\\n')]\n    if len(input_list) < 1 or len(input_list) > 10 ** 9:\n        raise ValueError('Please enter at least 1 and at most 10^9 values')\n    result_list = [0] * (len(input_list) + 1)\n    for index, value in enumerate(input_list):\n        for i in range(index + 1):\n            if input_list[i] == value and value <= input_list[index]:\n                result_list[index + 1] = result_list[index + 1] + 1\n    print(result_list[-1])\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return stdin\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of different weights of splits of n.\n\n    :param stdin: The first line contains one integer\u00a0\u2014 the number of test cases.\n    :return: The number of different weights of splits of n.\n    \"\"\"\n    test_cases = int(stdin)\n    if test_cases == 0:\n        return 0\n    count = 0\n    n = int(stdin)\n    for i in range(2, n + 1):\n        if i == sum(divisor for divisor in range(1, i + 1) if i % divisor == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [0] * (n + 1)\n    l[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            l[j] += l[j - i]\n    return l[n] - 1\n\n\nprint(solution(input()))\n\n\n\n\n-----Test-----\n\nInput\n7\n\nOutput\n4\n\nInput\n8\n\nOutput\n5\n\nInput\n9\n\nOutput\n5\n\n\n-----Test-----\n\nInput\n1\n\nOutput\n1\n\nInput\n2\n\nOutput\n2\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n\n    n, k = map(int, stdin.split())\n    lst = sorted(map(int, stdin.split()))\n    c = Counter(lst)\n    res = 0\n    for key, val in c.items():\n        if key - 1 not in c and key + 1 not in c and key < k:\n            res = max(res, key)\n    print(res, k)\n\n\ndef"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We can use a recursive way to solve this problem.\n    We will return the number of good apartments on line 2\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n, k = int(stdin[0].split(\" \")[0]), int(stdin[0].split(\" \")[1])\n    apartments = [1 if i == \"1\" else 0 for i in stdin[1].split(\" \")]\n    available = n - k\n    max_good_apartments = 0\n    # In this way we can start from the beginning\n    # and we will work in the reverse way\n    # in order to optimize the answer\n    for i in range(n - 1, 0, -1):\n        if apartments[i] == 1:\n            available += 1\n            if available > max_good_apartments:\n                max_good_apartments = available\n        else:\n            available -= 1\n    return f\"{max_good_apartments} {n - max_good_apartments}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    good_apartments = list(filter(lambda x: x > k, range(1, n+1)))\n    return \"{} {}\".format(min(good_apartments), max(good_apartments))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    print(max(1, x - y + 1))\n    print(min(x, x - y + 1))\n    return \"\"\n\nprint(solution('4 2'))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return f'{a} {b+1}'\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(n - m + 1) +'' + str(n - m + m)\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    left, right = 1, n\n    while left < right:\n        mid = left + (right - left) // 2\n        if k <= mid * (mid + 1) // 2 - n:\n            left = mid + 1\n        else:\n            right = mid\n    return str(left)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    return f\"{min(n - k, k)}\\n{max(0, n - k)}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    good_apartments = set()\n    for i in range(k):\n        good_apartments.add(i + 1)\n    for i in range(k, n):\n        for j in range(i - k, i):\n            if j + 1 in good_apartments:\n                break\n        else:\n            good_apartments.add(i + 1)\n    return str(min(good_apartments)) +'' + str(max(good_apartments))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \"\"\"\n    n = int(stdin)\n    if n <= 2:\n        return str(1)\n    else:\n        return str(int(n/2) if (n % 2) == 0 else int(n/2) + 1)\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    result = 0\n    while n > 1:\n        n = n - (n % 2)\n        result += 1\n    return result\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\n\ndef"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1 if n - 1 <= 1 else int(n / 2 + n % 2))\n\n\ndef"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    # put your solution here\n    #\n    return stdin\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # p = stdin.split(\"\\n\")\n    # p.pop(-1)\n    # return p\n    \n    n = int(stdin)\n    return (n-1)//2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(0, len(stdin.replace('K', 'V')) - 2 * len(stdin.replace('V', 'K'))))\n\"\"\""
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string\n\n    >>> solution(\"VV\")\n    '0'\n\n    >>> solution(\"VKKKKKKKKKVVVVVVVVVK\")\n    '3'\n    \"\"\"\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0412\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 s \u0438 t, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432.\n    \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 t \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 s.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n    s = \"abababa\"\n    t = \"aba\"\n\n    \u0412\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 t \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 s:\n    \"abababa\"\n    \"abababa\"\n    \"abababa\"\n    \"abababa\"\n\n    Sample Input 1:\n\n    abababa\n    aba\n\n    Sample Output 1:\n\n    3\n\n    Sample Input 2:\n\n    abc\n    abc\n\n    Sample Output 2:\n\n    1\n\n    Sample Input 3:\n\n    abc\n    def\n\n    Sample Output 3:\n\n    0\n    \"\"\"\n    string_s = stdin\n    string_t = stdin\n    s_count = 0\n    t_count = 0\n    for t in string_t:\n        s_count = string_s.count(t)\n        t_count += s_count\n    print(t_count)\n\n    return ''"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vk_count = 0\n    vk_max_count = 0\n\n    for i in range(len(stdin)):\n        if stdin[i:i + 2] == 'VK':\n            vk_count += 1\n        elif stdin[i:i + 2] == 'VK':\n            vk_count -= 1\n        if vk_count > vk_max_count:\n            vk_max_count = vk_count\n    return vk_max_count\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == 'K' and s[i + 1] == 'V':\n            s = s.replace('K', 'V', 1)\n            count += 1\n    return count\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string: str = stdin\n    index1 = 0\n    index2 = 1\n    count = 0\n    while index2 < len(string):\n        if string[index2] == \"V\":\n            if string[index1] == \"V\":\n                index1 = index2\n                index2 = index2 + 1\n            elif string[index1] == \"K\":\n                count += 1\n                index1 = index2\n                index2 = index2 + 1\n            else:\n                count += 1\n                index1 = index2\n                index2 = index2 + 1\n        else:\n            index1 = index2\n            index2 = index2 + 1\n    print(count)\n    return count\n\n\nsolution('VV')\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    # dp[i] represents the minimum number of segments needed to draw i squares\n    dp = [0] * (n + 1)\n    dp[2] = 2\n\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + 1\n        for j in range(1, i):\n            if (i - j) % j == 0 and dp[j] + 1 < dp[i]:\n                dp[i] = dp[j] + 1\n    \n    return dp[n]\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = int(math.sqrt(n))\n    return r if n == r ** 2 else r + 1 + solution(n // r)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # put your solution here, remember to return a str\n    pass"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n**0.5))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = int(input())\n\n    c = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n // 2) + 1\n\n        c += 1\n\n    return c\n\n\ndef"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\ndef"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_minimum_n_segments(stdin))"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 7\")\n    '2'\n    >>> solution(\"4 9\")\n    '3'\n    >>> solution(\"1 1\")\n    '1'\n    \"\"\"\n    a, b = map(int, stdin.split())\n    n = 1\n    while a <= b:\n        n += 1\n        a *= 3\n        b *= 2\n\n    return str(n - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    print(a * (3 * b - a) + b)\n    return \"\""
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    c = 0\n    while a < b:\n        c += 1\n        a = (a * 3) + 1\n        b = (b * 2) + 1\n    return str(c)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = list(map(int, stdin.split()))\n\n    diff = 0\n    while a < b:\n        diff += 1\n        a *= 3\n        b *= 2\n\n    return str(diff)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= b:\n        a *= 3\n        b *= 2\n        if a > b:\n            return str(a - b)\n    return str(a - b)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a if a > b else -1 if a == b else int(b / 3 + 1) + 1)\n\nprint(solution('4 7'))"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(b // (a * 3) - b // (a * 2) - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    while a <= b:\n        if a < b:\n            b *= 3\n            count += 1\n        else:\n            a *= 2\n            count += 1\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = 3 * a, 2 * b\n    count = 0\n    while c < d:\n        count += 1\n        c = 3 * c\n        d = 2 * d\n    return count\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(*map(int, stdin.split())))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.split()\n    h = int(result[0])\n    n = int(result[1])\n    l = [i for i in range(2**h, 0, -1)]\n    print(l)\n    return 0\n\nsolution(stdin)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    h = int(stdin.split()[1])\n\n    print(h, n)\n\n    return \"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    def hf(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        return 2 ** (h - 1) + (n - 2 ** (h - 1))\n    def get_nodes(n, h):\n        if hf(n) == h:\n            return n - 1\n        else:\n            return (n - 1) // 2\n    def get_hf(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return 1 + (n - 2 ** (h - 1))\n    nodes = get_nodes(n, h)\n    hf = get_hf(n)\n    while hf < h:\n        nodes += 2 ** (hf + 1)\n        hf += 1\n    return str(nodes)\n\nprint(solution(input()))\n-----\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, World!'"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Greedily compute k\"\"\"\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Gets a string containing two integers and prints the number of such tables,\n    separated by spaces, and then the numbers of the tables in ascending order,\n    separated by spaces, all in a single line.\n    If there is no such table, just prints \"0\".\n    '''\n    n, m = map(int, stdin.split())\n    print(n ** 2 * m ** 2)\n    print(n, m)\n    return ''\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    \n    \n    \n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u0435\u0434\u0435\u043d\u0442 \u0437\u0430\u0434\u0430\u043b \u0412\u0430\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0447\u0438\u0441\u0435\u043b n \u0438 m, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044e, \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u044b n \u00d7 m \u0438\u043c\u0435\u0435\u0442 \u0447\u0435\u0442\u044b\u0440\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 3 \u00d7 5 \u0435\u0441\u0442\u044c 15 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 1, 8 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 2 \u0438 3 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 3. \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b n \u0438 m \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0443\u0442\u0435\u043c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f n \u043d\u0430 m. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f 14 * 6 = 84 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 1, 2, 3 \u0438 4. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b 3 \u00d7 5 \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u044b\u0439\u0442\u0438 84 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0430\u0440 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b n \u0438 m.\n\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0412\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044e, \u0438 \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0447\u0438\u0441\u0435\u043b n \u0438 m, \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434 \u0443\u0441\u043b\u043e\u0432\u0438\u0435. \u0412 \u0441\u0443\u043c\u043c\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0432\u044b\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u044b, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c 40. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b 3 \u00d7 5 \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u044b\u0439\u0442\u0438 16.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e x (1 \u2264 x \u2264 10^18)\u00a0\u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n26\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n6\n1 26\n2 9\n3 5\n5 3\n9 2\n26 1\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n2\n1 2\n2 1\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n8\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n4\n1 8\n2 3\n3 2\n8 1\n\n\n-----Problem Description-----\n\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u0435\u0434\u0435\u043d\u0442 \u0437\u0430\u0434\u0430\u043b \u0412\u0430\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u0447\u0438\u0441\u0435\u043b n \u0438 m, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044e, \u0447\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u044b n \u00d7 m \u0438\u043c\u0435\u0435\u0442 \u0447\u0435\u0442\u044b\u0440\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 3 \u00d7 5 \u0435\u0441\u0442\u044c 15 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 1, 8 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 2 \u0438 3 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 3. \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b n \u0438 m \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0443\u0442\u0435\u043c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f n \u043d\u0430 m. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f 14 * 6 = 84 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 1, 2, 3 \u0438 4. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b 3 \u00d7 5 \u0434"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    arr = []\n    for i in range(1, x + 1):\n        for j in range(i, x + 1):\n            if (j ** 2 - i ** 2) == (j * i):\n                count += 1\n                arr.append((i, j))\n    return str(count) + \"\\n\" + \"\\n\".join([str(i) for i in arr])\n\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    counter = 0\n    result = []\n\n    for n in range(2, 101):\n        for m in range(2, 101):\n            counter += n ** 2\n            if counter == x:\n                result.append((n, m))\n    \n    return str(len(result)) + \"\\n\" + \"\\n\".join(map(str, result))\n    \n        \n    "
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    input_list = [int(i) for i in stdin.split()]\n    n = input_list[0]\n    days = input_list[1:]\n    if n % 4 == 0 and n % 100!= 0:\n        for i in range(n):\n            if i % 4 == 0 and i % 100 == 0:\n                if days[i]!= 29:\n                    return 'NO'\n            elif i % 4 == 0 and i % 100!= 0:\n                if days[i]!= 28:\n                    return 'NO'\n            else:\n                if days[i]!= 31:\n                    return 'NO'\n        return 'YES'\n    elif n % 4!= 0 and n % 100 == 0:\n        for i in range(n):\n            if i % 4 == 0 and i % 100 == 0:\n                if days[i]!= 29:\n                    return 'NO'\n            elif i % 4 == 0 and i % 100!= 0:\n                if days[i]!= 28:\n                    return 'NO'\n            else:\n                if days[i]!= 31:\n                    return 'NO'\n        return 'YES'\n    else:\n        for i in range(n):\n            if i % 4 == 0 and i % 100!= 0:\n                if days[i]!= 29:\n                    return 'NO'\n            elif i % 4 == 0 and i % 100 == 0:\n                if days[i]!= 28:\n                    return 'NO'\n            elif i % 4!= 0 and i % 100!= 0:\n                if days[i]!= 31:\n                    return 'NO'\n            else:\n                if days[i]!= 30:\n                    return 'NO'\n        return 'YES'"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    d = 0\n    for _ in range(N):\n        d += int(stdin)\n        if d > days[0]:\n            d -= days[0]\n            days.pop(0)\n            if len(days) == 0:\n                break\n    return \"YES\" if d == 0 else \"NO\"\n    "
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_leap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(stdin) == 1:\n        return 'NO'\n    else:\n        for i in range(len(stdin)):\n            if int(stdin[i]) > 31 or int(stdin[i]) < 1:\n                return 'NO'\n            if i == 0:\n                if (int(stdin[i]) % 4 == 0 and int(stdin[i]) % 100!= 0) or int(stdin[i]) % 400 == 0:\n                    if i + 1 < len(stdin):\n                        if int(stdin[i + 1]) > 31 or int(stdin[i + 1]) < 1:\n                            return 'NO'\n                    if i + 2 < len(stdin):\n                        if int(stdin[i + 2]) > 31 or int(stdin[i + 2]) < 1:\n                            return 'NO'\n                    days_list = days_leap\n                else:\n                    days_list = days\n            else:\n                if int(stdin[i]) > days_list[i - 1]:\n                    return 'NO'\n                if i + 1 < len(stdin):\n                    if int(stdin[i + 1]) > days_list[i]:\n                        return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    def is_leap(year):\n        return year % 4 == 0 and year % 100!= 0 or year % 400 == 0\n\n    def check_days(days):\n        if not is_leap(days[0]):\n            return (days[1] - days[0]) % 7 == 0\n        else:\n            return (days[1] - days[0]) % 7 == 0 or (days[2] - days[1]) % 7 == 0\n\n    for i in range(days - 1):\n        if i >= 3:\n            if check_days(days[i-3: i]):\n                return 'YES'\n            else:\n                return 'NO'\n\n        if i >= 2:\n            if is_leap(days[i-2]):\n                if check_days(days[i-2: i]):\n                    return 'YES'\n                else:\n                    return 'NO'\n            else:\n                if check_days(days[i-2: i]):\n                    return 'YES'\n                else:\n                    return 'NO'\n\n        if i >= 1:\n            if check_days(days[i-1: i]):\n                return 'YES'\n            else:\n                return 'NO'\n\n        if check_days(days[: i + 1]):\n            return 'YES'\n        else:\n            return 'NO'\n\nsolution()"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ... r\"\"\"\n   ... 2\n   ... 31 30\n   ... 3\n   ... 29 31 30\n   ... 5\n   ... 31 28 30 31 30\n   ... 3\n   ... 31 31 28\n   ... \"\"\"\n   ... )\n    'No'\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    for i in range(1, n + 1):\n        if days[0] == 31 and i > 1:\n            days = days[1:]\n        if sum(days[:i]) == n:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"YES\"\n\"\"\"\n\ndef"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    days_list = list(map(int, stdin.readline().split()))\n    for idx, val in enumerate(days_list):\n        if idx + 1 >= days:\n            break\n        if val > days_list[idx + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"1\" in stdin or \"2\" in stdin else \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 10 ** 9:\n        return 'NO'\n    arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(arr)):\n        if n % arr[i] == 0:\n            if n % arr[i + 1] == 0:\n                continue\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return \"NO\"\n    k = 1\n    while k < n:\n        a = random.randint(2, n - 1)\n        b = n // a\n        if b <= a:\n            k += 1\n            continue\n        if a + b * (n - 1) == 1:\n            print(\"YES\")\n            print(k)\n            for i in range(k):\n                print(a, b)\n                a = b\n                b = n // a\n            return\n        k += 1\n    print(\"NO\")\n    return"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number == 1:\n        return \"YES\"\n    elif number % 2 == 0 or number % 3 == 0:\n        return \"NO\"\n    else:\n        sequence = set()\n        check_divisor = [3, 2]\n        for i in range(1, int(sqrt(number)) + 1):\n            if number % i == 0:\n                sequence.add(i)\n                sequence.add(number // i)\n                check_divisor.append(i)\n                check_divisor.append(number // i)\n        check_divisor = set(check_divisor)\n        if len(sequence) < 3:\n            return \"NO\"\n        else:\n            if len(sequence)!= len(check_divisor):\n                return \"NO\"\n            elif sum(sequence)!= 1:\n                return \"NO\"\n            else:\n                return \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"YES\" if a / b + a / c == 1 - (1 / n) else \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = ceil(sqrt(n))\n    a = [0] * k\n    b = [0] * k\n    for i in range(k):\n        a[i], b[i] = map(int, stdin.split())\n        while a[i] % b[i]!= 0:\n            a[i] = a[i] * b[i] + 1\n        while a[i] % b[i] == 0 and b[i] <= n:\n            a[i] = a[i] // b[i]\n    if sum(a)!= n:\n        return \"NO\"\n    for i in range(k):\n        a[i] = a[i] - 1\n    d = {0: 1}\n    for i in range(n):\n        d[i + 1] = d.get(i + 1, 0) + 1\n    ans = []\n    for i in range(k):\n        ans.append(str(a[i]))\n        ans.append(str(b[i]))\n    return \"YES\" + \"\\n\" + str(k) + \"\\n\" + \"\\n\".join(ans)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = n - 1\n    for i in range(n):\n        if result % n == 0:\n            return 'YES'\n        result -= 1\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'YES'\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, red, green = map(int, stdin.split('\\n'))\n    if red == 0 or green == 0:\n        return '-1'\n    total = sum(map(lambda x: x ** 2, map(int, stdin.split('\\n')[1:])))\n    print(total - red - green)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a classic problem of finding a subset of non-negative integers such that sum of values is less than a given value.\n    So, we will solve the problem as follows:\n    1. Sort the input array.\n    2. Iterate over it. For each number, calculate the length of the contact with the previous element in a sorted array.\n    3. If the sum of the lengths is less than b, then we can add it to our solution. Otherwise, skip this number and continue.\n    \"\"\"\n    # 1. Sort the input array.\n    A = list(map(int, stdin.split('\\n')[0].split()))\n    A.sort()\n    # 2. Iterate over it.\n    result = 0\n    for i in range(len(A)):\n        # 3. Calculate the length of the contact with the previous element in a sorted array.\n        contact = i - 1\n        if i > 0:\n            if (A[contact] + A[i]) < b:\n                result += (A[contact] + A[i])\n        else:\n            result += A[contact]\n    # 3. Calculate the length of the contact with the previous element in a sorted array.\n    # for i in range(len(A)):\n    #     contact = i - 1\n    #     if i > 0:\n    #         if (A[contact] + A[i]) < b:\n    #             result += (A[contact] + A[i])\n    #         else:\n    #             break\n    #     else:\n    #         result += A[contact]\n    return result if result < b else -1\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n, a, b, h = map(int, stdin.split())\n    # h = [int(c) for c in stdin.split()]\n    n = 4\n    a = 5\n    b = 7\n    h = [3, 3, 4, 1]\n    dp = [0] * (n + 1)\n    dp[1] = a\n    dp[2] = min(a, b)\n    for i in range(3, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2])\n        dp[i] += h[i - 1]\n    print(dp)\n    # res = dp[n] - dp[1]\n    res = sum([h[i] for i in range(n) if h[i] > dp[i]])\n    if res <= b:\n        print(res)\n    else:\n        print(-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    h.sort()\n    res = 0\n    for i in range(1, n):\n        if h[i] < h[i-1]:\n            res += h[i] - h[i-1]\n    if res >= a:\n        return res - a\n    return -1\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You can read a full line of input from stdin and argv.\n    The return value must be an array of strings, one for each line of input.\n    \"\"\"\n    return [input() for _ in range(int(input()))]\nprint(solution(input()))\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The paintability of the fence.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a, b = [int(x) for x in stdin.split('\\n')[1].split()]\n    heights = [int(x) for x in stdin.split('\\n')[2].split()]\n    h = [0 for _ in range(n)]\n    for i in range(n):\n        if i % 2 == 0:\n            h[i] = min(a, b)\n        else:\n            h[i] = max(a, b)\n    if n < 2:\n        return -1\n    else:\n        h_sum = [h[0]]\n        for i in range(1, n):\n            h_sum.append(h_sum[i - 1] + h[i])\n        ans = 0\n        for i in range(n - 1):\n            ans += max(0, h_sum[i] - heights[i]) + max(0, heights[i + 1] - h_sum[i + 1])\n        return ans\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = [int(x) for x in stdin.split()]\n    ans = 0\n    for i in range(1, len(h)):\n        ans += max(0, h[i]-h[i-1])\n    ans += max(0, h[0]-a)\n    ans += max(0, h[-1]-b)\n    return ans\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\"\"\"\nYou are given two input strings a and b. The strings a and b are the same length. You need to check if the characters in a are permutations of those in b.\n\nPermutation:\n\nGiven two strings a and b of equal length, we say that a is a permutation of b if you can rearrange the characters of b to get a. For example, 'acb' is a permutation of 'bba'.\n\nExamples:\n\na = 'abcd', b = 'abcd': True\na = 'abcd', b = 'efgh': False\na = 'aabd', b = 'aabd': True\na = 'aabd', b = 'aabf': False\n\n\"\"\"\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n    \n\n\n\n\"\"\"\n\nimport sys\n\n\n\"\"\"\n\u0414\u0430\u043d\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u044e \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b. \u041f\u0435\u0440\u0435\u0432\u0456\u0440\u0442\u0435, \u0447\u0438 \u0454 \u0441\u0442\u0440\u043e\u043a\u0430 \u044f\u043a\u0443\u0441\u044c \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u044e\u0447\u0438\u0445 \u0447\u0438\u0441\u0435\u043b.\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u0454, \u044f\u043a\u0449\u043e \u0432\u043e\u043d\u0430 \u0437\u0443\u0441\u0442\u0440\u0456\u0447\u0430\u0454\u0442\u044c\u0441\u044f \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0456 \u043f\u0430\u0440\u043d\u043e\u0457 \u043a\u0456\u043b\u044c\u043a\u043e\u0441\u0442\u0456 \u0440\u0430\u0437\u0456\u0432, \u0430 \u0432\u043e\u043d\u0430 \u043d\u0435 \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u0454 \u0437 \u0456\u043d\u0448\u043e\u043c\u0443 \u043c\u0430\u0441\u0438\u0432\u0443 \u0447\u0438 \u043f\u043e \u0441\u043e\u0431\u0456 \u043d\u0435 \u0454 \u0441\u043f\u0456\u0432\u043f\u0430\u0434\u0430\u044e\u0447\u0438\u043c.\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438:\n    matrix: list - \u043c\u0430\u0442\u0440\u0438\u0446\u044f\n\n\u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454:\n    str/bool - \u0441\u0442\u0440\u043e\u043a\u0430/false\n\n\u0421\u043f\u0438\u0441\u043e\u043a \u0440\u043e\u0437\u043c\u0456\u0440\u043e\u043c 10 \u0454 \u0432\u0430\u0436\u043b\u0438\u0432\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c.\n\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0441\u043b\u0456\u0434\u043e\u0432\u043d\u0456\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b, \u044f\u043a\u0456 \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u044e\u0442\u044c\u0441\u044f \u0431\u0456\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0443.\n\u041a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u0432\u0430\u043d\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0438\u0437\u043d\u0430\u0447\u0430\u0454\u0442\u044c\u0441\u044f \u0437\u0430 \u0444\u043e\u0440\u043c\u0443\u043b\u043e\u044e 2 * n, \u0449\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u0434\u0430\u0454 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0441\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f \u0441\u043f\u0438\u0441\u043a\u0443. \u042f\u043a\u0449\u043e \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0435\u043c\u0430\u0454, \u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u0454 \u0447\u0438\u0441\u043b\u0430, \u044f\u043a\u0435 \u043f\u043e\u0442\u0440\u0456\u0431\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u0438 False.\n\n\u0421\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0440\u0435\u0448\u0438\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0434\u0432\u0456 \u0440\u0456\u0437\u043d\u0456 \u0441\u043f\u043e\u0441\u043e\u0431\u0438.\n\n\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0430 \u0432\u0438\u043a\u043e\u043d\u0443\u0454\u0442\u044c\u0441\u044f \u0437\u0430 \u0434\u043e\u043f\u043e\u043c\u043e\u0433\u043e\u044e \u0444\u0443\u043d\u043a\u0446\u0456\u0457 is_same_matrix(a, b) \u044f\u043a\u0430 \u043f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u043f\u0440\u0430\u0432\u0434\u0443, \u044f\u043a\u0449\u043e \u0434\u0432\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0456 \u0446\u0456\u043b\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0434\u043e\u0440\u0456\u0432\u043d\u044e\u044e\u0442\u044c \u043e\u0434\u0438\u043d \u0456 \u0442\u0456\u0436 \u0441\u0430\u043c\u0435 \u0437\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u044e \u0444\u0443\u043d\u043a\u0446\u0456\u0454\u044e zip.\n\n\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u0438 \u0437 \u044f\u043a\u0438\u043c\u0438 \u043f\u0435\u0440\u0435\u0432\u0456\u0440\u044f\u0454\u043c\u043e \u0441\u043f\u0440\u0430\u0432\u0435\u0434\u043b\u0438\u0432\u0456\u0441\u0442\u044c \u0434\u0432\u043e\u0445 \u0434\u0430\u043d\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u0456\u0432:\n\"\"\"\n\ndef"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 5 7\n   ... 3 3 4 1''')\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for x1 in range(n + 1):\n        for x2 in range(n - x1 + 1):\n            if x1 + x2 > n:\n                break\n            y1 = n - x1\n            y2 = n - x1 - x2\n            if k * m == y1 * y1 + y2 * y2:\n                print(\"YES\")\n                print(f\"{x1} {y1}\")\n                print(f\"{x2} {y2}\")\n                return\n    print(\"NO\")\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training76TRRJ-DSC/\"\"\"\n    n, m, k = map(int, stdin.split())\n    return \"YES\" if n * m >= k * k else \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if m * k < n or k < 2:\n        return 'NO'\n    return 'YES\\n' + '\\n'.join(str(i) for i in range(n + 1, n - k, -1)) + '\\n' + '\\n'.join(str(i) for i in range(n - 1, n - k - 1, -1)) + '\\n' + '\\n'.join(str(i) for i in range(n - k + 1, n + 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    if n * m / k % 1:\n        return 'NO'\n\n    ans = 'YES'\n    return ans + '\\n' + '\\n'.join(\n        f'{x} {y}' for x, y in\n        sorted(map(\n            lambda p: (p[0] + k * p[1] % m, p[1]),\n            itertools.product(range(n + 1), range(m + 1))\n        ), key=lambda p: (p[0] + p[1], p[0])))"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    x1, y1, x2, y2, x3, y3 = 0, 0, 0, 0, 0, 0\n    if n < m:\n        x1, y1 = n, m\n    elif n < k:\n        x1, y1 = n, k\n    elif m < k:\n        x1, y1 = m, k\n    else:\n        return 'NO'\n    if k < m:\n        x2, y2 = k, m\n    elif k < n:\n        x2, y2 = k, n\n    elif m < n:\n        x2, y2 = m, n\n    else:\n        return 'NO'\n    if n < m:\n        x3, y3 = n, k\n    elif n < k:\n        x3, y3 = n, m\n    elif m < k:\n        x3, y3 = m, k\n    else:\n        return 'NO'\n    return 'YES\\n' + str(x1) +'' + str(y1) + '\\n' + str(x2) +'' + str(y2) + '\\n' + str(x3) +'' + str(y3)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for i in range(n - k + 1):\n        for j in range(m - k + 1):\n            if i + j * k >= n and i + j * k <= m:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(' ')))\n    \n    if k >= m:\n        print('NO')\n        return\n    \n    if n * m < k:\n        print('NO')\n        return\n    \n    if k == 1:\n        print('YES')\n        return\n    \n    if k > m:\n        print('NO')\n        return\n    \n    print('YES')\n    print(1, 0)\n    print(n, m)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k * m == n * n:\n        if n % 2 == 0:\n            x1, y1 = n//2, n//2\n            x2, y2 = n//2, n//2\n        else:\n            x1, y1 = n//2, n//2 + 1\n            x2, y2 = n//2, n//2 + 1\n        print('YES')\n        print(f'{x1} {y1}')\n        print(f'{x2} {y2}')\n    else:\n        print('NO')"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    \n    x_1 = 0\n    x_2 = n\n    x_3 = 0\n    y_1 = 0\n    y_2 = m\n    y_3 = 0\n    \n    while x_1 <= x_2:\n        while x_2 - x_1 >= 0:\n            if (x_1 + x_2 - x_3) * (x_2 - x_1) * k == m * (x_2 - x_1):\n                return \"YES\"\n            x_3 = x_2\n            x_2 = x_1 + (x_2 - x_1) // 2\n        x_1 = x_2\n        x_2 = n\n        x_3 = 0\n        while y_1 <= y_2:\n            while y_2 - y_1 >= 0:\n                if (y_1 + y_2 - y_3) * (y_2 - y_1) * k == m * (y_2 - y_1):\n                    return \"YES\"\n                y_3 = y_2\n                y_2 = y_1 + (y_2 - y_1) // 2\n            y_1 = y_2\n            y_2 = m\n            y_3 = 0\n    \n    return \"NO\"\n    \"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return \"NO\" if k > n / 2 else \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == n:\n        return 'NO'\n    elif k > n:\n        return 'YES'\n    return 'YES' if k < n - k else 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(1, 1)\n    'YES'\n    >>> solution(10, 4)\n    'NO'\n    '''\n   ..."
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 1')\n    'YES'\n    >>> solution('10 4')\n    'NO'\n    >>> solution('6 1')\n    'NO'\n    >>> solution('10 20')\n    'YES'\n    >>> solution('1000 1')\n    'YES'\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    if n < k:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return \"YES\" if k < n // 2 else \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    if k > n: return 'NO'\n    if k == n: return 'YES'\n    if k == 0: return 'NO'\n    return 'YES' if n % 2 == k % 2 else 'NO'\n\ndef"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = [int(x) for x in stdin.split()]\n    if n - k > 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"YES\" if n >= k else \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n//stdin = \"2\\n8\\n\"\n\nstdin = stdin.strip()\nn = int(stdin.split('\\n')[0])\narr = [int(stdin.split('\\n')[1]) for _ in range(n)]\n\nres = []\nchest = 0\nbiceps = 0\nback = 0\nfor i in range(n):\n    if i%3 == 0:\n        chest += arr[i]\n    elif i%3 == 1:\n        biceps += arr[i]\n    else:\n        back += arr[i]\n    res.append(max(chest, biceps, back))"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    if a[0] == a[1] == a[2]:\n        return \"chest\"\n    elif a[0] == a[1]:\n        return \"biceps\"\n    else:\n        return \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ninput_n = int(stdin.split()[0])\ninput_a = list(map(int, stdin.split()[1:]))"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = stdin.split()\n    result = \"\"\n    max_count = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if lst[i] == lst[j]:\n                count += 1\n        if count > max_count:\n            result = lst[i]\n            max_count = count\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n\n    exercises = list(map(int, inputs[0].split(\" \")))\n    best_exercise = max(exercises)\n    most_exercises = []\n    for i, ex in enumerate(exercises):\n        if ex == best_exercise:\n            most_exercises.append(i)\n    max_count = 0\n    max_exercise = None\n    for i in most_exercises:\n        if max_count < exercises.count(exercises[i]):\n            max_count = exercises.count(exercises[i])\n            max_exercise = i\n    return [\"chest\", \"biceps\", \"back\"][max_exercise]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'chest'\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"chest\"\n    n = int(stdin.split()[0])\n    exercises = list(map(int, stdin.split()[1:]))\n\n    total_chest_times = sum(exercises[0:n])\n    total_biceps_times = sum(exercises[n:2 * n])\n    total_back_times = sum(exercises[2 * n:3 * n])\n    max_count = max(total_biceps_times, total_back_times, total_chest_times)\n\n    if total_biceps_times == max_count:\n        return \"biceps\"\n    if total_back_times == max_count:\n        return \"back\"\n    if total_chest_times == max_count:\n        return \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"chest\" if int(stdin.split()[0]) / 3 == max(int(x) / 3 for x in stdin.split()[1:]) else \"biceps\" if int(stdin.split()[0]) / 3 == max(int(x) / 3 for x in stdin.split()[1:]) else \"back\"\n\n\nimport ast"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    exercises = [int(line) for line in stdin.split('\\n')[0].split(' ')]\n    chest, biceps, back = 0, 0, 0\n    for i in range(len(exercises)):\n        if i % 3 == 0:\n            chest += exercises[i]\n        elif i % 3 == 1:\n            biceps += exercises[i]\n        else:\n            back += exercises[i]\n    return max(['chest', 'biceps', 'back'], key=lambda muscle: exercises[muscle * 3], default='')\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    c = a[0::3]\n    b = a[1::3]\n    b = [c[i]*b[i] for i in range(n)]\n    return [b.index(max(b)) for i in range(n)]\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grades = [int(c) for c in stdin.readline().split()]\n    grades.sort()\n    s = 0\n    for grade in grades:\n        s += grade\n    print(int(round(s / n, 0)))\n    return str(int(round(s / n, 0)))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    grades = list(map(int, stdin.split(\" \")))\n    grades.sort()\n    avg = sum(grades) // len(grades)\n    print(avg)\n    for i in range(len(grades)):\n        if grades[i] > avg:\n            print(i + 1)\n            break\n        if grades[-1] < avg:\n            print(len(grades))\n            break"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    targets = [5, 4, 3, 2]\n    amount = 0\n    for i in range(4):\n        if targets[i] in numbers:\n            amount += numbers.count(targets[i])\n            numbers.remove(targets[i])\n    return str(amount)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    grade_count = len(data)\n    data.sort()\n    if data[0] == 5 and data[-1] == 2:\n        return str(grade_count)\n    else:\n        for i in range(grade_count - 1):\n            if (data[i] + 1) == data[i + 1]:\n                data[i] += 1\n                data[i + 1] = data[i] + 1\n                data[-1] -= 1\n                grade_count -= 1\n        return str(grade_count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_number_of_grade, *grades = map(int, stdin.split())\n    grades = [0, 4, 4, 4, 5]\n    grades[0] = grades[1] = sum(grades[2:])\n    grades[2] = grades[3] = len(grades) // 2\n    return len([grade for grade in grades if grade < grades[0] - grades[1]]) + len([grade for grade in grades if grade > grades[0] - grades[1]])\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    grades = list(map(int, stdin.split()[1:]))\n    s = 0\n    for i in grades:\n        if i == 4:\n            s += 1\n    return s\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    grades = list(map(int, stdin.split()))\n    avg = sum(grades) / len(grades)\n    return sum(grades) - len(grades) * avg\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Find the shortest array that satisfies the given condition\n    '''\n    u, v = map(int, stdin.split(' '))\n    n = (u ^ v) + 1\n    ans = []\n    for i in range(n):\n        if u ^ (i ^ v) == u:\n            ans.append(i)\n    return''.join(map(str, ans)) if ans else '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    if b & 1:\n        b = b + 1\n    if b > a:\n        return -1\n    return a - (a - b)\n\n\ndef"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"-1\" if b > a * a - a else str(a + 1) + \" \" + \" \".join(str(i) for i in range(a, a + b))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    u, v = [int(x) for x in stdin.split(\" \")]\n    arr = [str(x) for x in range(10) if (x ^ u) + x == v]\n    if len(arr) == 0:\n        print(-1)\n    else:\n        print(len(arr))\n        print(\" \".join(arr))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    \n    for i in range(len(arr)):\n        if arr[i] ^ u == v:\n            return str(len(arr[i:]))\n        \n    return '-1'\n\n\ndef"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(' ')))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str.\"\"\"\n    u, v = map(int, stdin.split())\n    # if u is 0 then n must be 0\n    # if v is 0 then n cannot be 0\n    n = v - u\n    if n < 0:\n        return \"-1\"\n    elif n == 0:\n        return \"0\"\n    elif n > 10**18:\n        return \"-1\"\n\n    # array = [1 for i in range(n)]\n    # while len(array) > 0:\n    #     max_num = max(array)\n    #     if max_num < u:\n    #         array.remove(max_num)\n    #     else:\n    #         break\n    # # return array\n    # print(array)\n\n    # solution 1\n    # while len(array) > 0:\n    #     if max(array) < u:\n    #         array.remove(max(array))\n    #     else:\n    #         break\n\n    # print(array)\n\n    # solution 2\n    # while len(array) > 0:\n    #     if array[-1] < u:\n    #         array.pop()\n    #     else:\n    #         break\n\n    # print(array)\n\n    # solution 3\n    # while len(array) > 0:\n    #     if array[0] < u:\n    #         array = array[1:]\n    #     else:\n    #         break\n\n    # print(array)\n\n    # solution 4\n    # n = 0\n    # if u == 0:\n    #     n = v\n    # else:\n    #     n = v - u\n    # if n == 0:\n    #     return \"0\"\n    # else:\n    #     while n > 0:\n    #         if u & n == 0:\n    #             break\n    #         n = n >> 1\n    #     array = [n for i in range(n)]\n    #     print(array)\n    #     print(u ^ max(array))\n    #     return \" \".join([str(i) for i in array])\n\n    # solution 5\n    # if u == 0:\n    #     return \"0\"\n    # elif v == 0:\n    #     return -1\n    # for i in range(2 ** len(array)):\n    #     x = list(str(bin(i))[2:])\n    #     n = 0\n    #     while n < len(x):\n    #         if u & int(x[n]) == 0:\n    #             n = n + 1\n    #         else:\n    #             break\n    #     else:\n    #         break\n    # return \" \".join([str(i) for i in array])\n\n    # solution 6\n    def dfs(start, sum):\n        if sum == v:\n            return True\n        if sum > v:\n            return False\n        for i in range(start, len(array)):\n            if dfs(i + 1, sum + array[i]):\n                return True\n        return False\n\n    array = []\n    for i in range(len(bin(10**18)) - 2):\n        if dfs(0, 0):\n            return \" \".join([str(i) for i in array])\n        array.append(0)\n    return \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(\" \"))\n    if n == 1 and x!= 1:\n        return \"0\"\n    nums = [int(s) for s in stdin.split(\" \")]\n    prefix = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] ^ nums[i - 1]\n    for i in range(1, n):\n        left = x ^ prefix[i]\n        if left == prefix[i + 1]:\n            continue\n        j = i\n        while j > 0 and left == prefix[j]:\n            j -= 1\n        if j < i and left == prefix[j + 1]:\n            j += 1\n        if j == i:\n            return str(j)\n    return \"-1\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    # input = \"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991011121314151617181920\"\n    input = input.replace(\" \",\"\")\n    n = int(input)\n\n    s = str(n)\n    print(len(s))\n\nsolution(input())\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 0\n    while n>=1:\n        n//=10\n        c+=1\n    return c\n    \n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nfrom itertools import accumulate\n\ndef"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n % 10)\n    return \"\""
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    counter = 0\n    for i in range(len(number)):\n        if number[i] == '1':\n            counter += 1\n    return counter\n\nprint(solution(input()))\n\n------Solution-----\n\"\"\"\n\nnumber = input()\n\ncounter = 0\nfor i in range(len(number)):\n    if number[i] == '1':\n        counter += 1\n\nprint(counter)\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split()]\n    x, y = [int(i) for i in stdin.split()]\n\n    if (x1 - x2) * (y1 - y2) == (x1 - x2) * (y1 - y2) and x > 0 and y > 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if x < x1 and y > y1 and x1 < x2 and y2 > y:\n        return \"NO\"\n    elif x < x1 and y < y1 and x1 < x2 and y2 < y:\n        return \"YES\"\n    elif x < x1 and y < y1 and x1 > x2 and y2 > y:\n        return \"YES\"\n    elif x < x1 and y > y1 and x1 > x2 and y2 > y:\n        return \"NO\"\n    elif x > x1 and y < y1 and x1 < x2 and y2 < y:\n        return \"YES\"\n    elif x > x1 and y > y1 and x1 > x2 and y2 > y:\n        return \"NO\"\n    elif x > x1 and y < y1 and x1 < x2 and y2 < y:\n        return \"YES\"\n    elif x > x1 and y > y1 and x1 < x2 and y2 < y:\n        return \"NO\"\n    elif x > x1 and y > y1 and x1 > x2 and y2 < y:\n        return \"YES\"\n    elif x > x1 and y < y1 and x1 > x2 and y2 > y:\n        return \"NO\"\n    elif x < x1 and y > y1 and x1 > x2 and y2 < y:\n        return \"YES\"\n    elif x > x1 and y > y1 and x1 > x2 and y2 > y:\n        return \"NO\"\n    elif x == x1 and y == y1 and x1 == x2 and y2 == y:\n        return \"YES\"\n    elif x == x1 and y == y1 and x1 == x2 and y2 == y:\n        return \"YES\"\n    elif x == x1 and y == y1 and x1 == x2 and y2 == y:\n        return \"YES\"\n    else:\n        return \"NO\"\n    return 'YES' if x < x1 and y > y1 and x1 < x2 and y2 > y else 'NO'\n    \n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if (x1 + x, y1 + y) == (x2, y2) or (x1 + x, y1 - y) == (x2, y2) or (x1 - x, y1 + y) == (x2, y2) or (x1 - x, y1 - y) == (x2, y2):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #...\n    return \"YES\" if... else \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    if x1 + y1 == x2 + y2:\n        return \"YES\"\n    elif x1 - y1 == x2 - y2:\n        return \"YES\"\n    elif x1 + y1 == x2 - y2:\n        return \"YES\"\n    elif x1 - y1 == x2 + y2:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''0 0 0 6''')\n    YES\n    >>> solution('''1 1 3 6''')\n    NO\n    \"\"\"\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x, y = list(map(int, stdin.split()))\n    x_1, y_1, x_2, y_2 = abs(x_1), abs(y_1), abs(x_2), abs(y_2)\n    if x_2 - x_1 == 0 and y_2 - y_1 == 0:\n        return \"YES\" if x == 0 and y == 0 else \"NO\"\n    \n    return \"YES\" if x_2 - x_1 == y_2 - y_1 or x_2 - x_1 == -y_2 + y_1 or x_2 - x_1 == y_2 + y_1 or x_2 - x_1 == -y_2 - y_1 else \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a, b = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    return 'YES' if abs(x1 - x2) + abs(y1 - y2) >= 2 * (abs(a - x1) + abs(b - y1)) else 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import deque\n\nclass Solution:\n    def solve(self, stdin):\n\n        # Get input\n        map_size, bottle_size, x_1, y_1, x_2, y_2 = stdin.split('\\n')\n        x_1, y_1 = int(x_1), int(y_1)\n        x_2, y_2 = int(x_2), int(y_2)\n        potion = int(bottle_size)\n\n        # Init variables\n        visited = set()\n        visited.add((x_1, y_1))\n        queue = deque([(x_1, y_1, 0)])\n        \n        # Find path\n        while queue:\n            x_1, y_1, num_moves = queue.popleft()\n            visited.add((x_1, y_1))\n\n            # Check if reach treasure\n            if x_1 == x_2 and y_1 == y_2:\n                return \"YES\"\n\n            # Check if can move\n            for (move_x, move_y) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x_1, new_y_1 = x_1 + move_x, y_1 + move_y\n                if new_x_1 >= 0 and new_y_1 >= 0 and new_x_1 <= int(map_size) and new_y_1 <= int(map_size) and (new_x_1, new_y_1) not in visited:\n                    if (new_x_1, new_y_1, num_moves + 1) not in visited:\n                        queue.append((new_x_1, new_y_1, num_moves + 1))\n\n        # Cannot reach treasure\n        return \"NO\""
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return''.join(stdin.split())\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the last digits of the bus number\"\"\"\n    return stdin[-1]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2028\")\n    13\n    \"\"\"\n    return str(sum(\n        len({int(stdin[0:i])} for i in range(1, len(stdin) + 1)\n        if stdin[0:i] == str(int(stdin[0:i])).zfill(len(stdin))\n    )) - 1)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('0','')\n\nprint(solution('098'))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Parameters:\n        stdin (str): The bus number.\n\n    Returns:\n        str: The amount of possible variants of the real bus number.\n\n    \"\"\"\n    n = int(stdin)\n    digits = len(str(n))\n    s = set()\n    for i in range(1, digits + 1):\n        start = 10 ** (digits - i)\n        end = 10 ** (digits - i + 1)\n        for j in range(start, end):\n            s.add(str(j * 10 ** i) + str(j + 1) + str(j + 2))\n    return len(s)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(product(range(10), repeat=int(stdin)))))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = (int(i) for i in stdin.splitlines())\n    return (\n        max(a * e + b * f, c * e + d * f),\n        a * f + b * e,\n        c * e + d * f,\n        a * e + b * f,\n        c * f + d * e,\n        a * e + b * f,\n    )\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    print(max(a * e + d * f, b * e + c * f, a * c + d * f, b * c + e * f))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return stdin[0:4] + stdin[5:10]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List, Tuple\n\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print('Case #1:', end=' ')\n    print(stdin)\n    stdin = [int(i) for i in stdin.split(' ')]\n    t, s, v, j = stdin[0], stdin[1], stdin[2], stdin[3]\n    print('Case #2:', end=' ')\n    print(t * e + s * f + j * (e + f))\n    return ''\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We define the minimum cost of the first suit as the cost of one tie plus one jacket.\n    The minimum cost of the second suit is the cost of one scarf plus one vest plus one jacket.\n    \"\"\"\n    tiers = stdin.split('\\n')\n    tiers = tiers[0].split(' ')\n    a, b, c, d = int(tiers[0]), int(tiers[1]), int(tiers[2]), int(tiers[3])\n    e, f = int(tiers[4]), int(tiers[5])\n\n    tie = min(a // 2, (e * 4) + (e * 6))\n    scarf = min(b // 3, (f * 4) + (f * 6))\n    vest = min(c // 2, (e * 4) + (e * 6))\n    jacket = min(d, (f * 4) + (f * 6))\n\n    return tie + scarf + vest + jacket\n\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = [int(stdin) for _ in range(6)]\n    return a * e + b * f + (a + b) * (c + d)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    a, b, c, d = map(int, stdin.readline().split())\n    e, f = map(int, stdin.readline().split())\n    x = min(a, (b + c) // 2)\n    y = min(d, (b + c) // 2)\n    z = min(e, (f + c) // 2)\n    r = min(x, y, z)\n    return str(r * 4 + (x - r) * e + (y - r) * f + (z - r) * e)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = (int(i) for i in stdin.strip().split())\n    print(min(a*e + min(a, b)*f, b*e + min(b, c)*f))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = [int(c) for c in stdin.split()]\n    return str(count(b, p, a, x))\n\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n  # return str(len(stdin))\n  import math\n  a, b, p, x = map(int, stdin.split())\n  ans = 0\n  for n in range(2, x + 1):\n    if math.gcd(n, p) == 1:\n      ans += 1\n      if (b * n) % p == a:\n        ans -= 1\n        break\n  print(ans)\n  return str(ans)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(sum([1 for x in range(1, 1000000) if (x ** 2) % 3 == 2]))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, p, x = map(int, stdin.split())\n    cnt = 0\n    for n in range(1, x + 1):\n        if pow(a, n, p) * b % p == n:\n            cnt += 1\n    return str(cnt)\n\"\"\"\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    ans = 0\n    for n in range(1, x+1):\n        if n * (a**n) % p == b % p:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if a > b:\n            a, b = b, a\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def solve(a, b, p):\n        k = gcd(a, p)\n        if k!= 1:\n            a //= k\n            b //= k\n            p //= k\n        if a % b!= 0:\n            return 0\n        x, y = a, b\n        while y!= 0:\n            x, y = y, x % y\n        return p * x // a\n\n    a, b, p, x = map(int, stdin.split())\n    return str(solve(a, b, p))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = [int(_) for _ in stdin.split(\" \")]\n    assert a < p\n    assert p < b\n    assert 1 <= x <= 10 ** 12\n\n    # n * a^n = b\n    # a^n mod p = 1\n    # a^n - 1 mod p = 0\n    # n is the largest possible value that satisfies the equation\n    return str(pow(b, x, p) - pow(a, x, p) + p - 1)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Modules\n    import sys\n\n    # Containers\n    a, b, p, x = [int(s) for s in sys.stdin.readline().split()]\n    if a > p or b > p:\n        raise ValueError\n\n    # Helper Functions\n    def divide(a, b, p):\n        return (a*b) % p\n    def power(a, b, p):\n        return pow(a, b, p)\n    def m_power(a, b, p):\n        return m_power_recursive(a, b, p)\n    def m_power_recursive(a, b, p):\n        if b == 1:\n            return a\n        if b % 2 == 0:\n            return m_power_recursive(power(a, b // 2, p), 2, p)\n        else:\n            return m_power_recursive(power(a, b // 2, p), 2, p) * a % p\n\n    # Main Execution\n    n_found = 0\n    for n in range(2, x+1):\n        if (b * n) % p == (a * divide(n, b, p) * n) % p:\n            n_found += 1\n\n    # Results\n    print(n_found)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns how many solutions are possible for a given input\n    '''\n    return '1'\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def power(a, n, p):\n        res = 1\n        a %= p\n        while n:\n            if n & 1:\n                res = (res * a) % p\n            n >>= 1\n            a = (a * a) % p\n        return res\n\n    (a, b, p, x) = map(int, stdin.split())\n    cnt = 0\n    for i in range(x):\n        if (i * power(a, i, p)) % p == b:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    max_number = (k_2 * 2) + (k_3 * 3) + (k_5 * 5) + (k_6 * 6)\n    return str(max_number)\n\"\"\"\none line\nreturn str(int(max(k_2 * 2, k_3 * 3, k_5 * 5, k_6 * 6)))\n\"\"\"\ndef"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    # 8k_2 + 4k_3 + 2k_5 + 6k_6\n    return str(int(8 * k_2 + 4 * k_3 + 2 * k_5 + 6 * k_6))\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u00ab\u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439\u00bb \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u0438 \u0432 Python. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043a\u0440\u044b\u0442\u044b\u043c, \u043d\u043e \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043e \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043d\u0438\u043a\u043e\u0433\u0434\u0430, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u00ab\u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u00bb \u0438 \u00ab\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u00bb. \u0415\u0441\u043b\u0438 \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u00ab\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u00bb, \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442\u044c \u043f\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441 \u00ab\u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u00bb, \u043d\u043e \u044d\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e\u043c\u0443 \u043f\u043e\u0434\u043e\u0431\u0438\u044e \u00ab\u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u0438 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043f\u043e\u043b\u043d\u043e\u043c\u0443 \u0434\u043e\u0441\u0442\u0443\u043f\u0443\u00bb.\n\n\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0432\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0438 \u0438\u0445 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435. \u0414\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u00ab\u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c\u00bb \u0438 \u00ab\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c\u00bb \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c pickle \u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f. \u041e\u0434\u043d\u0430\u043a\u043e \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\u0435, \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0438 \u043f\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c pickle \u0438\u043b\u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a \u043c\u0435\u0442\u043e\u0434\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f.\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0438\u0436\u0435-----\n\nimport pickle\n\nclass DES:\n    def __init__(self, name):\n        self.name = name\n\n\ndef"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 1 3 4\")\n    800\n    >>> solution(\"1 1 1 1\")\n    256\n    \"\"\"\n    k2, k3, k5, k6 = map(int, stdin.split())\n    ans = 0\n    for i in range(k2 + 1):\n        for j in range(k3 + 1):\n            for k in range(k5 + 1):\n                for l in range(k6 + 1):\n                    if 2 * i + 3 * j + 5 * k + 6 * l <= k2:\n                        ans = max(ans, 2 * i + 3 * j + 5 * k + 6 * l)\n    return ans\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    print(max(a * b, c * d))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0423 \u0422\u0430\u043d\u0438 \u0435\u0441\u0442\u044c \u0440\u044e\u043a\u0437\u0430\u043a \u0438\u0437 10 \u043c\u0435\u0442\u0440\u043e\u0432 \u0438 8 \u0441\u043b\u043e\u0432 \u0437\u0430 \u0441\u0442\u0435\u043a\u0430\u043c\u0438\n    \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0441\u0442\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u0438\u0437 \u0441\u0442\u0435\u043a\u043e\u0432\n    \u0422\u0430\u043d\u0438 \u0445\u043e\u0447\u0435\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0440\u044e\u043a\u0437\u0430\u043a \u0434\u043b\u0438\u043d\u043d\u043e\u0439 \u0434\u043e 10 \u043c\u0435\u0442\u0440\u043e\u0432\n    \u041d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u0438\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0442\u0430\u043b\u0438 \u0432 \u0440\u044e\u043a\u0437\u0430\u043a\n    \"\"\"\n\n    lst = [int(i) for i in stdin.split()]\n\n    a, b, c, d = lst[0], lst[1], lst[2], lst[3]\n\n    def check(i):\n        lst = [0] * (i + 1)\n        for word in lst_words:\n            if len(word) <= i:\n                lst[i] += 1\n                i -= len(word)\n        return lst\n\n    def count(i):\n        lst = check(i)\n        return sum(lst)\n\n    lst_words = [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n    ]\n    lst_words = list(reversed(lst_words))\n    d = [i for i in range(1, len(lst_words) + 1)]\n    lst_words.append(0)\n\n    lst_words.insert(0, 0)\n\n    d.insert(0, 0)\n    d.append(0)\n\n    max_count = [0] * len(lst_words)\n    max_count[0] = count(a)\n    max_count[1] = count(b)\n    max_count[2] = count(c)\n    max_count[3] = count(d)\n    max_count[4] = count(a + b)\n    max_count[5] = count(a + c)\n    max_count[6] = count(a + d)\n    max_count[7] = count(b + c)\n    max_count[8] = count(b + d)\n    max_count[9] = count(c + d)\n    max_count[10] = count(a + b + c)\n    max_count[11] = count(a + b + d)\n    max_count[12] = count(a + c + d)\n    max_count[13] = count(b + c + d)\n    max_count[14] = count(a + b + c + d)\n    max_count[15] = count(a + b + c + d)\n    max_count[16] = count(a + b + c + d)\n    max_count[17] = count(a + b + c + d)\n    max_count[18] = count(a + b + c + d)\n    max_count[19] = count(a + b + c + d)\n    max_count[20] = count(a + b + c + d)\n    max_count[21] = count(a + b + c + d)\n    max_count[22] = count(a + b + c + d)\n    max_count[23] = count(a + b + c + d)\n    max_count[24] = count(a + b + c + d)\n    max_count[25] = count(a + b + c + d)\n    max_count[26] = count(a + b + c + d)\n    max_count[27] = count(a + b + c + d)\n    max_count[28] = count(a + b + c + d)\n    max_count[29] = count(a + b + c + d)\n    max_count[30] = count(a + b + c + d)\n    max_count[31] = count(a + b + c + d)\n    max_count[32] = count(a + b + c + d)\n    max_count[33] = count(a + b + c + d)\n    max_count[34] = count(a + b + c + d)\n    max_count[35] = count(a + b + c + d)\n    max_count[36] = count(a + b + c + d)\n    max_count[37] = count(a + b + c + d)\n    max_count[38] = count(a + b + c + d)\n    max_count[39] = count(a + b + c + d)\n    max_count[40] = count(a + b + c + d)\n    max_count[41] = count(a + b + c + d)\n    max_count[42] = count(a + b + c + d)\n    max_count[43] = count(a + b + c + d)\n    max_count[44] = count(a + b + c + d)\n    max_count[45] = count(a + b + c + d)\n    max_count[46] = count(a + b + c + d)\n    max_count[47] = count(a + b + c + d)\n    max_count[48] = count(a + b + c + d)\n    max_count[49] = count(a + b + c + d)\n    max_count[50] = count(a + b + c + d)\n    max_count[51] = count(a + b + c + d)\n    max_count[52] = count(a + b + c + d)\n    max_count[53] = count(a + b + c + d)\n    max_count[54] = count(a + b + c + d)\n    max_count[55] = count(a + b + c + d)\n    max_count[56] = count(a + b + c + d)\n    max_count[57] = count(a + b + c + d)\n    max_count[58] = count"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k2, k3, k5, k6 = [int(x) for x in stdin.split()]\n    s = [str(k2 * 2 + k3), str(k2 * 3 + k3), str(k2 * 5 + k3), str(k2 * 6 + k3)]\n    return max(s)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    y = [2, 3, 4, 5, 6, 7, 8, 9]\n    z = [3, 4, 5, 6, 7, 8, 9]\n    w = [5, 6, 7, 8, 9]\n    t = [6, 7, 8, 9]\n    a = []\n    m = max(x)\n    if m == 1:\n        return str(k_2 * 2) + str(k_3 * 3) + str(k_5 * 5) + str(k_6 * 6)\n    else:\n        for i in range(k_2):\n            a.append(x.pop(x.index(m)))\n        for i in range(k_3):\n            a.append(y.pop(y.index(m)))\n        for i in range(k_5):\n            a.append(z.pop(z.index(m)))\n        for i in range(k_6):\n            a.append(w.pop(w.index(m)))\n        return str(sum(a))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split(' '))\n    k_5 += 1\n    k_6 += 1\n    k_2 += k_5 - 1\n    k_3 += k_5 - 1\n    k_2 += k_6 - 1\n    k_3 += k_6 - 1\n    k_5 += 1\n    k_6 += 1\n    k_2 += k_5 - 1\n    k_3 += k_5 - 1\n    k_2 += k_6 - 1\n    k_3 += k_6 - 1\n    return str(k_3 * 2 + k_2)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # parse input\n    nums = stdin.split(' ')\n    k_2, k_3, k_5, k_6 = [int(n) for n in nums]\n\n    # compute max sum\n    total = 0\n    for i in range(k_2):\n        total += 2 * 10 ** i\n\n    for i in range(k_3):\n        total += 3 * 10 ** i\n\n    for i in range(k_5):\n        total += 5 * 10 ** i\n\n    for i in range(k_6):\n        total += 6 * 10 ** i\n\n    print(total)\n    return total\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(x) for x in stdin.split(\" \")]\n    s, d = 0, 1\n\n    for i in range(n * n):\n        x = (x + s) % n\n        y = (y + d) % n\n        if (x, y) == (0, 0):\n            return i\n\n        if matrix[x - 1][y] + matrix[x + 1][y] + matrix[x][y - 1] + matrix[x][y + 1] >= c:\n            return i\n\n        s += 1\n        d += 1\n    return n * n\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\nprint(solution('6 4 3 1'))\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    \n    return 'YES' if n - c < c < n ** 2 else 'NO'\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(x) for x in stdin.split(\" \")]\n    if n == 1:\n        if c == 1:\n            return 0\n        else:\n            return 1\n    time = 0\n    while n > 1 and c > 0:\n        n -= 1\n        time += 1\n        if x > 0:\n            if (y - 1 >= 0) and (stdin[x - 1][y - 1] == \"0\"):\n                c -= 1\n                stdin[x - 1][y - 1] = \"1\"\n                if y - 1 > 0:\n                    stdin[x - 1][y - 2] = \"1\"\n        if x < n:\n            if (y + 1 < n) and (stdin[x + 1][y + 1] == \"0\"):\n                c -= 1\n                stdin[x + 1][y + 1] = \"1\"\n                if y + 1 < n:\n                    stdin[x + 1][y + 2] = \"1\"\n        if y > 0:\n            if (x - 1 >= 0) and (stdin[x - 1][y] == \"0\"):\n                c -= 1\n                stdin[x - 1][y] = \"1\"\n                if x - 1 > 0:\n                    stdin[x - 2][y] = \"1\"\n        if y < n:\n            if (x + 1 < n) and (stdin[x + 1][y] == \"0\"):\n                c -= 1\n                stdin[x + 1][y] = \"1\"\n                if x + 1 < n:\n                    stdin[x + 2][y] = \"1\"\n    return time\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(x) for x in stdin.split()]\n    ans = 0\n\n    # check if it's possible to paint enough cells\n    if c > n * n:\n        return ans\n\n    def is_possible(num: int) -> bool:\n        nonlocal x, y, c, n\n        x, y = x - 1, y - 1\n        occupied_cells = set()\n        occupied_cells.add((x, y))\n\n        def paint_cells(num: int) -> bool:\n            nonlocal x, y, c, n, ans\n            nonlocal occupied_cells\n            if num < c:\n                if not (x - 1, y) in occupied_cells:\n                    if x - 1 >= 0:\n                        occupied_cells.add((x - 1, y))\n                        paint_cells(num + 1)\n                    else:\n                        return False\n                if not (x + 1, y) in occupied_cells:\n                    if x + 1 <= n - 1:\n                        occupied_cells.add((x + 1, y))\n                        paint_cells(num + 1)\n                    else:\n                        return False\n                if not (x, y - 1) in occupied_cells:\n                    if y - 1 >= 0:\n                        occupied_cells.add((x, y - 1))\n                        paint_cells(num + 1)\n                    else:\n                        return False\n                if not (x, y + 1) in occupied_cells:\n                    if y + 1 <= n - 1:\n                        occupied_cells.add((x, y + 1))\n                        paint_cells(num + 1)\n                    else:\n                        return False\n                return True\n            else:\n                return True\n\n        return paint_cells(0)\n\n    if is_possible(0):\n        ans += 1\n\n    for i in range(1, n * n + 1):\n        if is_possible(i):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(' ')\n    n = int(s[0])\n    x = int(s[1])\n    y = int(s[2])\n    c = int(s[3])\n    if n <= 2 or c <= 1:\n        return 0\n    result = 0\n    while True:\n        z = n ** 2 - c\n        if z < 0:\n            return result\n        result += 1\n        c += z\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    x, y, n, c = [int(c) for c in stdin.split(' ')]\n    res = 0\n    queue = []\n    visited = set()\n\n    def bfs(x, y):\n        nonlocal res\n        queue.append((x, y))\n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) not in visited:\n                visited.add((x, y))\n                if x > 0:\n                    queue.append((x - 1, y))\n                    if (x - 1, y) not in visited:\n                        if (y + 1) < n:\n                            if (x - 1, y + 1) not in visited:\n                                queue.append((x - 1, y + 1))\n                        if (y - 1) >= 0:\n                            if (x - 1, y - 1) not in visited:\n                                queue.append((x - 1, y - 1))\n                if x < n:\n                    queue.append((x + 1, y))\n                    if (x + 1, y) not in visited:\n                        if (y + 1) < n:\n                            if (x + 1, y + 1) not in visited:\n                                queue.append((x + 1, y + 1))\n                        if (y - 1) >= 0:\n                            if (x + 1, y - 1) not in visited:\n                                queue.append((x + 1, y - 1))\n                if y > 0:\n                    queue.append((x, y - 1))\n                    if (x, y - 1) not in visited:\n                        if (x + 1) < n:\n                            if (x + 1, y - 1) not in visited:\n                                queue.append((x + 1, y - 1))\n                if y < n:\n                    queue.append((x, y + 1))\n                    if (x, y + 1) not in visited:\n                        if (x + 1) < n:\n                            if (x + 1, y + 1) not in visited:\n                                queue.append((x + 1, y + 1))\n\n                res += 1\n                if res == c:\n                    return\n\n    bfs(x, y)\n    return res\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return max(a ^ b for a in range(l, r+1) for b in range(l, r+1))"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split(' ')))\n    return str(max(nums))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a ^ b)\n    return a ^ b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    print(max([a ^ b for a in range(a, b + 1)]) ^ b)\n\nsolution(\"8 16\")"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the maximum value of $a \\oplus b$ for all pairs of integers a and b (l \u2264 a \u2264 b \u2264 r).\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n   ...\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(x) for x in stdin.split(' ')]\n    l, r = input_list[0], input_list[1]\n    return max(a ^ b for a in range(l, r + 1) for b in range(l, r + 1))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    res = 0\n    for i in range(l, r + 1):\n        res ^= i\n    return res"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a, b)"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n    # ********** PSEUDOCODE **********\n    # *****************************\n    # *** generate all points in the plot\n    # *** find the highest point\n    # *** calculate the total area and height of the plot\n    # *** calculate the total number of moves needed\n    # *******************************\n    \n    \n    # ********** INPUT **********\n    # n = 4\n    # k = 3\n    # # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 12\n    # k = 12\n    # # ********** OUTPUT **********\n    # 3\n    # ********** INPUT **********\n    # n = 9999999999999999999\n    # k = 999999999999999986\n    # # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    n, k = [int(s) for s in stdin.split(' ')]\n    \n    \n    # ********** SOLUTION **********\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** TEST **********\n    # ********** OUTPUT **********\n    # ********** TEST **********\n    # ********** INPUT **********\n    # n = 4\n    # k = 3\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 12\n    # k = 12\n    # ********** OUTPUT **********\n    # 3\n    # ********** INPUT **********\n    # n = 9999999999999999999\n    # k = 999999999999999986\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 2\n    # k = 1\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 1\n    # k = 1\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 3\n    # k = 1\n    # ********** OUTPUT **********\n    # 2\n    \n    # ********** INPUT **********\n    # n = 2\n    # k = 2\n    # ********** OUTPUT **********\n    # 2\n    \n    # ********** INPUT **********\n    # n = 3\n    # k = 2\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 4\n    # k = 3\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 5\n    # k = 3\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 6\n    # k = 4\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 7\n    # k = 5\n    # ********** OUTPUT **********\n    # 2\n    \n    # ********** INPUT **********\n    # n = 8\n    # k = 6\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 9\n    # k = 7\n    # ********** OUTPUT **********\n    # 2\n    \n    # ********** INPUT **********\n    # n = 10\n    # k = 8\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 11\n    # k = 9\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 12\n    # k = 10\n    # ********** OUTPUT **********\n    # 2\n    \n    # ********** INPUT **********\n    # n = 13\n    # k = 11\n    # ********** OUTPUT **********\n    # 2\n    \n    # ********** INPUT **********\n    # n = 14\n    # k = 12\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 15\n    # k = 13\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 16\n    # k = 14\n    # ********** OUTPUT **********\n    # 2\n    \n    # ********** INPUT **********\n    # n = 17\n    # k = 15\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 18\n    # k = 16\n    # ********** OUTPUT **********\n    # 2\n    \n    # ********** INPUT **********\n    # n = 19\n    # k = 17\n    # ********** OUTPUT **********\n    # 1\n    \n    # ********** INPUT **********\n    # n = 20"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for day 1, 2020, day1b\"\"\"\n    # Parse the input\n    num_pts, area_limit = [int(v) for v in stdin.split('\\n')[0].split()]\n    # Consider all possible combinations of points\n    candidates = sorted([(i, 0) for i in range(num_pts)])\n    for i in range(num_pts):\n        for j in range(i + 1, num_pts):\n            candidates.append((i, 1))\n            candidates.append((j, -1))\n            if i == 0 or j == num_pts - 1:\n                continue\n            if abs(candidates[i][1] + candidates[j][1]) <= area_limit:\n                candidates.append((i // 2, 2))\n                candidates.append((j // 2, -2))\n    return str(max([abs(i[1]) for i in candidates]))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split(' ')]\n    ans = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            a -= 1\n        else:\n            n -= 1\n            a += 1\n        if a > ans:\n            ans = a\n    return str(ans)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '1'\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a + b > 10 ** 18:\n        return '1'\n    else:\n        return str(b // (a + 1))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split(' '))\n    return str(int(k ** 0.5))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(n * k // 2)\n    # k = k // 2\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = [int(c) for c in stdin.split(' ')]\n\n    return str(max([1] + [i for i in range(1, 2 * n, 2) if k % (2 * i + 1) == 0]))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Count the height of the plot with minimum height.\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    return str(min(n // 2, k // 4))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3''')\n    '1'\n    >>> solution('''4 12''')\n    '3'\n    >>> solution('''999999999999999999 999999999999999986''')\n    '1'\n    \"\"\"\n    from itertools import permutations\n\n    n, k = list(map(int, stdin.split(' ')))\n    points = list(permutations(range(n + 1)))\n    for point in points:\n        if point[0] % 2 == 1 and sum(point) == k:\n            return str(max(point[1:]))\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    return \"YES\" if t1 + t2 + t3 <= t1 * t3 + t2 * z else \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    return \"YES\" if t1 + t3 < t2 else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given the floor Masha is on, the floor Egor is on, the floor the elevator is on and time it will take to use the elevator.\n\n    Calculate if Masha should use the elevator or the stairs and print YES if Masha should use the elevator. Otherwise, print NO.\n    :param stdin: Input parameters\n    :return: YES or NO\n    \"\"\"\n    # Convert input to integer list\n    floors = list(map(int, stdin.split()))\n\n    # Define the variables\n    first_floor = floors[0]\n    second_floor = floors[1]\n    elevator_floor = floors[2]\n    time_for_stairs = floors[3]\n    time_for_elevator = floors[4]\n    time_for_elevator_doors = floors[5]\n\n    # Find the difference in floors between the current and the desired floor\n    difference = second_floor - first_floor\n\n    # If the elevator is on the floor, the elevator will be used\n    if elevator_floor == first_floor:\n        print('YES')\n\n    # Else if the difference in floors is positive and the elevator is greater than the desired floor, the elevator will be used\n    elif difference > 0 and elevator_floor > first_floor:\n        print('YES')\n\n    # Else if the difference in floors is negative and the elevator is less than the desired floor, the elevator will be used\n    elif difference < 0 and elevator_floor < first_floor:\n        print('YES')\n\n    # Else, the stairs will be used\n    else:\n        print('NO')\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = list(map(int, stdin.split(' ')))\n\n    if t1 + t3 + t2 < x + y:\n        print('NO')\n    else:\n        print('YES')\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = [int(n) for n in stdin.split()]\n    return 'YES' if t1+t2+t3+x < t1+t2+t3+y else 'NO'"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = list(map(int, stdin.split(' ')))\n    if t1 + t3 <= z:\n        return 'NO'\n    if t1 + t3 + t2 <= y:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = [int(s) for s in stdin.split(' ')]\n    return 'YES' if (z - x) * 2 + t3 < (y - z) * t1 + t2 + t3 else 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 1 4 4 2 1')\n    YES\n    >>> solution('1 6 6 2 1 1')\n    NO\n    >>> solution('4 1 7 4 1 2')\n    YES\n    \"\"\"\n    a, b, c, t_1, t_2, t_3 = map(int, stdin.split())\n    if (a - b) % 2 == 0:\n        print('YES')\n    elif t_1 + t_2 + t_3 < (a - b) * 2:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    if (x + t2) > y:\n        if y - z > t1:\n            return \"YES\"\n        else:\n            if z + t3 > x:\n                return \"YES\"\n            else:\n                return \"NO\"\n    else:\n        if t1 + t2 + t3 > x:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = [int(x) for x in stdin.split(' ')]\n    if t1 + t2 * (y - x) + t3 * (z - y) <= t1 * z:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(s) for s in stdin.split(\" \")]\n    a, b = 1, n\n    for i in range(1, m + 1):\n        a = min(a + 1, b)\n        b = max(a - 1, b - 1)\n    return a\n    pass\n\ndef"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = n - m + 1\n    q = n - m\n    return str(max(range(1, p + 1), key=lambda a: q * p / (a * p - q)))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # write your code in Python 3.6\n    return 1"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    print(min([abs(a - m) for a in range(1, n + 1)], key=lambda x: abs(x - n)))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = m + n + 1\n    b = m + n\n    print(a - b)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return [0, n][[abs(x - m) for x in range(1, n + 1)].index(min([abs(x - m) for x in range(1, n + 1)])) + 1]\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    m, a = divmod(n, m)\n    if a <= m:\n        return str(a)\n    else:\n        return str(m)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    print(n - m)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(max(2 * m - n, 1))"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_val = stdin.split('\\n')\n    n, m = input_val[0].split()\n    n = int(n)\n    m = int(m)\n\n    win_prob = n / (n + m)\n    lose_prob = m / (n + m)\n\n    if win_prob > lose_prob:\n        return str(int(round(n - m)))\n    return str(int(round(m - n)))\n\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of pairs during which Alena stays at the university.\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    i = 1\n    cnt = 0\n    while i < n:\n        if a[i - 1] == 1 and a[i] == 0:\n            cnt += 1\n            i += 1\n        i += 1\n    return cnt\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of pairs during which Alena stays at the university.\n    '''\n    num_pairs = int(stdin.readline())\n    \n    num_pairs_at_home = 0\n    for i in stdin:\n        if i == '0':\n            num_pairs_at_home += 1\n        else:\n            num_pairs_at_home = 0\n        \n        if num_pairs_at_home > 1:\n            break\n    \n    return len(stdin) - num_pairs_at_home\n    "
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the number of pairs during which Alena stays at the university\n    '''\n    n = int(stdin)\n    lectures = [int(x) for x in stdin.split(' ')]\n    start = 0\n    end = 1\n    count = 0\n    while end < n:\n        if lectures[start] == 0 and lectures[end] == 1:\n            start = end\n            end += 1\n            count += 1\n        else:\n            start = end\n            end += 1\n    return count\n\n'''\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\ns = 0\nfor i in range(1, n):\n    if a[i] == 1 and a[i - 1] == 0:\n        s += 1\nprint(s)\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            b.append(i)\n    for i in range(len(b)-1):\n        if b[i+1] - b[i] > 1:\n            ans += (b[i+1] - b[i])//2\n            if (b[i+1] - b[i])%2!= 0:\n                ans += 1\n    print(ans)\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n0 1 0 1 1\\n')\n    4\n    \"\"\"\n    days = int(stdin)\n    schedules = [int(i) for i in stdin.split()]\n    breaks = 0\n    prev = False\n    count = 0\n    for i, schedule in enumerate(schedules):\n        if schedule == 1:\n            breaks = 0\n            prev = True\n        else:\n            breaks += 1\n            if not prev and breaks >= 2:\n                count += 1\n            prev = False\n    return count\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    n, k = stdin.readline().split()\n    n, k = int(n), int(k)\n    arr = stdin.readline().split()\n    arr = list(map(int, arr))\n    left, right = 0, n-1\n    left_sum, right_sum = 0, 0\n    min_days = -1\n    while left <= right:\n        if left_sum < k:\n            left_sum += arr[left]\n            left += 1\n        if right_sum < k:\n            right_sum += arr[right]\n            right -= 1\n        if left_sum >= k and right_sum >= k:\n            min_days = min(min_days, right - left + 1) if min_days!= -1 else right - left + 1\n            left_sum -= arr[left]\n            left += 1\n            right_sum -= arr[right]\n            right -= 1\n    return min_days\n\ndef"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k >= n or max(a) > 8:\n        return -1\n    else:\n        cnt = 0\n        for i in range(n):\n            cnt += a[i] // 8\n            a[i] %= 8\n            if sum(a) == 0:\n                break\n        if sum(a) == 0:\n            return cnt\n        else:\n            return -1\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort(reverse=True)\n\n    count = 0\n    for i in range(len(a)):\n        count += a[i]\n        if count > k:\n            break\n\n    return i\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 m.\n    \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n\u00d7m \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \".\" \u0438 \"*\" \u0432 \u0448\u0430\u0445\u043c\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n    \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438, \u043f\u0440\u0438\u0447\u0451\u043c \u0441\u0443\u043c\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432,\n    \u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u043d\u0430 \u043f\u043e\u0431\u043e\u0447\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438 \u0438 \u0441\u0443\u043c\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0432\u044b\u0448\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438,\n    \u0438 \u0441\u0443\u043c\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u043d\u0438\u0436\u0435 \u043f\u043e\u0431\u043e\u0447\u043d\u043e\u0439 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438.\n    \u0414\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0451.\n\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = [[\"*\" for j in range(m)] for i in range(n)]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if i + j + 1 == n + m:\n                a[i][j] = \"*\"\n                k += 1\n    print(*a, sep=\"\\n\")\n    return \" \".join(map(str, [sum([a[i][j] == \"*\" for i in range(n)]) for j in range(m)]))\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    candies = [int(x) for x in stdin.strip().split(' ')]\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(n):\n        for j in range(8):\n            if i > 0:\n                dp[i] = min(dp[i], dp[i - 1] + candies[i])\n            if i > 1:\n                dp[i] = min(dp[i], dp[i - 2] + candies[i] * 2)\n            if i > 2:\n                dp[i] = min(dp[i], dp[i - 3] + candies[i] * 3)\n            if i > 3:\n                dp[i] = min(dp[i], dp[i - 4] + candies[i] * 4)\n            if i > 4:\n                dp[i] = min(dp[i], dp[i - 5] + candies[i] * 5)\n    return str(dp[n - 1] // k) if dp[n - 1] // k < float('inf') else '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    stdin = stdin.split()\n    box = [int(x) for x in stdin]\n\n    n = len(box)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(n):\n        dp[i][i + 1] = box[i]\n\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + dp[i][j - 1]\n            dp[i][j] = min(dp[i][j], dp[i - 1][j] + box[i - 1] * (j - i + 1))\n\n    for i in range(n - 1):\n        if dp[n][i + 1] >= k:\n            return i + 1\n\n    return -1\n\"\"\"\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Vasya\"\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days, candies, = [int(x) for x in stdin.strip().split(\" \")]\n    given_candy = 0\n    for _ in range(days):\n        given_candy += 8\n        if given_candy >= candies:\n            break\n    else:\n        return \"-1\"\n    return str(given_candy - candies)\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n, k = map(int, stdin.split('\\n')[0].split())\n    given = list(map(int, stdin.split('\\n')[1].split()))\n    days = 0\n    count = 0\n    \n    while k > 0:\n        #print(k, days, given[days], given[days] + k >= k)\n        if given[days] + k >= k:\n            k = 0\n        else:\n            k -= given[days]\n            days += 1\n            count += 1\n    \n    if k!= 0:\n        days = -1\n    \n    print(days)\n    return ''"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    '''\n    n, k = 5, 5\n    a = [2, 0, 1, 1, 0]\n\n    count = 0\n    for i in range(len(a) - 1):\n        if a[i] > a[i+1]:\n            count += a[i] - a[i+1] + k\n            a[i+1] = a[i] + k\n    return count\n\n\ndef"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of walks that the dog will need to do in order to have Cormen feel good in n days.\n\n    Args:\n        stdin (str): input data\n\n    Returns:\n        str: output data\n    \"\"\"\n\n    # parse input\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    s = stdin.split(\" \")\n    s = [int(i) for i in s]\n\n    # find the minimum number of walks that the dog will need to do in order to have Cormen feel good in n days\n    return str(max(0, k - sum(s)))\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5\\n2 0 1\\n\")\n    4\n    >>> solution(\"4 6\\n2 4 3 5\\n\")\n    0\n    >>> solution(\"4 6\\n2 4 3 5\\n\")\n    0\n    \"\"\"\n\n    n, k = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n\n    a = [0] + a + [0]\n    b = [0] * n\n    b[0] = a[1]\n    b[1] = a[2]\n    for i in range(2, n):\n        b[i] = b[i - 2] + a[i + 1]\n\n    return min(b[n - 2], k)\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    a = [int(x) for x in stdin.split()]\n    r = [0] * n\n    i = 1\n    while i < n:\n        if a[i] >= k:\n            break\n        r[i] = k - a[i]\n        a[i] += k\n        i += 1\n    r[i] = a[i] - k\n    i += 1\n    while i < n:\n        r[i] = a[i]\n        i += 1\n    return''.join(str(x) for x in r)\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    c = [int(i) for i in stdin.split(' ')]\n    # print(n, k)\n    # print(c)\n    ans = [0] * n\n    j = 0\n    for i in range(1, n):\n        if c[i] >= c[j] + k:\n            ans[i] = c[j] + k\n            j += 1\n        else:\n            ans[i] = c[i]\n    ans[0] = ans[n - 1]\n    print(*ans)\n    return ''"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_rest(n, k, a):\n        result = []\n        for i in range(n):\n            if a[i] > k:\n                result.append(a[i] - k)\n            else:\n                result.append(0)\n        return result\n\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a_min = a[0]\n    a_max = a[-1]\n    if a_max < k:\n        return 0\n    res = k - a_min\n    rest = get_rest(n, k, a)\n    while res <= k and rest[0] > 0:\n        if rest[0] >= res:\n            rest[0] -= res\n            res = 0\n        else:\n            res = k - a_min\n            rest[0] -= rest[0]\n        rest = get_rest(n, k, a)\n    if res > 0:\n        return 0\n    return a_min\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    # print(arr)\n    # print(n, k, arr)\n    # print(arr[0])\n    # print(n - 1, k, arr)\n    # print(arr[n - 1] - k)\n    # print(arr[0] - k)\n    # print(arr[1] - k)\n    # print(arr[0] - k)\n    # print(arr[0] - k + arr[1] - k + arr[0] - k)\n    # print(arr[0] - k + arr[1] - k + arr[0] - k + arr[1] - k + arr[0] - k + arr[1] - k + arr[0] - k)\n    arr = [x - k for x in arr if x > k]\n    # print(arr)\n    res = 0\n    for i in range(1, len(arr)):\n        # print(arr[i] - arr[i - 1], arr[i] - arr[i - 1] + arr[i - 1])\n        res = res + arr[i] - arr[i - 1]\n    res = res + arr[0]\n    print(res)\n    return res\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    s = []\n    cnt = 0\n    for i in range(n-1):\n        if a[i] == 0:\n            cnt += 1\n        else:\n            s.append(cnt)\n            cnt = 0\n    s.append(cnt)\n    print(sum(s))\n    print(*s)\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\n\n'''\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # todo\n    return stdin"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    freq = {}\n    s = stdin.lower()\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n\n    for c in string.ascii_lowercase:\n        if c not in freq:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.isupper() or stdin.islower() else \"NO\"\n\n\nprint(solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\"))\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import string\n\n    alphabet_set = set(string.ascii_lowercase + string.ascii_uppercase)\n    stdin_set = set(stdin)\n\n    return \"YES\" if alphabet_set == stdin_set else \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i.isalpha():\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(set(stdin.lower())) == 26 else 'NO'\n\n\nassert solution(\"The quick brown fox jumps over the lazy dog\") == 'YES'\nassert solution(\"Hello, world\") == 'NO'\n\nassert solution(\"The quick brown fox jumps over the lazy cog\") == 'YES'\nassert solution(\"I'm the very model of a modern major general\") == 'NO'\nassert solution(\"Yoda's a Jedi\") == 'NO'\n\"\"\"\n\nn = int(input())\nstdin = input()\n\nprint(\"YES\" if len(set(stdin.lower())) == 26 else \"NO\")\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 100:\n        return \"NO\"\n    count = 0\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for letter in alphabet:\n        if letter in stdin:\n            count += 1\n        else:\n            count = 0\n        if count == 26:\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d = dict()\n    for c in stdin:\n        d[c] = True\n\n    is_pangram = False\n    for c in string.ascii_lowercase:\n        if not d.get(c):\n            is_pangram = False\n            break\n        else:\n            is_pangram = True\n\n    return \"YES\" if is_pangram else \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for character in alphabet:\n        if character not in stdin.lower():\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = [chr(x) for x in range(97, 123)]\n    stdin = stdin.split()\n    for x in stdin[0]:\n        if x not in alphabet:\n            return \"NO\"\n\n    return \"YES\"\n\nprint(solution(stdin))"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    arr = stdin.split(' ')\n    time = arr[0].split(':')\n    current = int(time[0]) * 3600 + int(time[1]) * 60\n    print(current)\n    add = current + int(arr[1])\n    print(add)\n    hour = add // 3600\n    print(hour)\n    minutes = add % 3600 // 60\n    print(minutes)\n    seconds = add % 3600 % 60\n    print(seconds)\n    print(str(hour) + ':' + str(minutes) + ':' + str(seconds))\n    return str(hour) + ':' + str(minutes) + ':' + str(seconds)\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(\":\")\n    \n    return f\"{int(h) + m // 60:02d}:{m % 60:02d}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Time in format hh:mm after a minute\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Answer\n    \"\"\"\n    try:\n        n = int(stdin.split(':')[1])\n    except ValueError:\n        raise ValueError(f\"Expected a string, got {type(stdin)}\")\n\n    if n > 59:\n        n = n - 60\n        hours = int(stdin.split(':')[0]) + 1\n        if hours > 23:\n            hours = hours % 24\n        return f\"{hours:02d}:{n:02d}\"\n    else:\n        return stdin\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\" \")\n    time = data[0].split(\":\")\n    hours = int(time[0])\n    minutes = int(time[1])\n    a = int(data[1])\n    hours += a / 60\n    minutes += a % 60\n    if hours >= 24:\n        hours = hours % 24\n    hours = str(hours)\n    minutes = str(minutes)\n    if len(minutes) < 2:\n        minutes = \"0\" + minutes\n    return hours + \":\" + minutes\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = map(int, stdin.split(':'))\n    new_hour = hours + minutes // 60\n    new_minutes = minutes % 60\n    return f'{new_hour:02}:{new_minutes:02}'"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, m = [int(x) for x in stdin.split(':')]\n    # m += a\n    m += a\n    if m >= 60:\n        m -= 60\n        h += 1\n    if m < 10:\n        m = '0' + str(m)\n    if h < 10:\n        h = '0' + str(h)\n    return '{}:{}'.format(h, m)\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    time, minute = stdin.split(' ')\n    h, m = time.split(':')\n    hour, minute = int(h), int(m)\n    hour += minute // 60\n    minute = minute % 60\n    hour = hour % 24\n\n    hour = f'0{hour}' if hour < 10 else str(hour)\n    minute = f'0{minute}' if minute < 10 else str(minute)\n    return f'{hour}:{minute}'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = stdin.split(':')\n    hours = int(hours)\n    minutes = int(minutes)\n    hours += minutes // 60\n    minutes %= 60\n    if hours > 24:\n        hours = hours % 24\n    return f'{hours:02d}:{minutes:02d}'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    hour = int(stdin.split(':')[0])\n    minute = int(stdin.split(':')[1])\n    add_minute = minute + int(stdin.split(':')[2].split(' ')[0])\n    if add_minute >= 60:\n        hour += 1\n        add_minute -= 60\n    if hour >= 24:\n        hour -= 24\n    if add_minute < 10:\n        add_minute = '0' + str(add_minute)\n    if hour < 10:\n        hour = '0' + str(hour)\n    return str(hour) + ':' + str(add_minute)\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # pass\n    n, m = [int(x) for x in stdin.split()]\n    if m < 1 or n < 1:\n        return \"NO\"\n\n    switches = stdin.split()\n    for i in range(len(switches)):\n        switches[i] = list(switches[i])\n        for j in range(len(switches[i])):\n            if switches[i][j] == '1':\n                switches[i][j] = True\n            else:\n                switches[i][j] = False\n    switches = np.array(switches)\n    for i in range(m):\n        s = set()\n        for j in range(n):\n            if switches[j][i]:\n                s.add(j)\n        if len(s) == n:\n            return \"YES\"\n    return \"NO\"\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\n10100\\n01010\\n10110\\n00101\")\n    'YES'\n    >>> solution(\"4 5\\n101010\\n10110\\n001010\\n01010\")\n    'NO'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    arr = [[0 for _ in range(m)] for _ in range(n)]\n    for row in stdin.split('\\n')[1:]:\n        arr[int(row) - 1] = [1 if c == '1' else 0 for c in row]\n    for i in range(n):\n        if sum(arr[i]) == 0:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    lines = lines[1:]\n\n    # print(lines)\n    switches = []\n    for i in range(n):\n        a = ''\n        for c in lines[i]:\n            a += c\n        switches.append(a)\n    # print(switches)\n    # print(len(switches[0]))\n\n    lamps = []\n    for i in range(m):\n        a = 0\n        for c in lines[n + i]:\n            a += int(c)\n        lamps.append(a)\n    # print(lamps)\n    # print(len(lamps[0]))\n\n    # print(switches[0])\n\n    lamps_m = len(lamps[0])\n\n    def dfs(idx: int) -> int:\n        if idx == m:\n            return 1\n        s = 0\n        for i in range(n):\n            # print(idx)\n            # print(switches[i][idx])\n            if switches[i][idx] == '1':\n                s += dfs(idx + 1)\n            else:\n                continue\n        return s\n\n    return 'YES' if dfs(0) == n and m == lamps_m else 'NO'\n\n\ndef"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin[0].split()[0])\n    columns = int(stdin[0].split()[1])\n    switches = []\n    for i in range(1, rows + 1):\n        switches.append(stdin[i].split())\n    if len(switches)!= rows or len(switches[0])!= columns:\n        return \"NO\"\n    for i in range(rows):\n        for j in range(columns):\n            if switches[i][j]!= '0' and switches[i][j]!= '1':\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split('\\n')[0].split()]\n    array = [list(stdin.split('\\n')[i]) for i in range(1, n + 1)]\n    res = 'NO'\n    for i in range(m):\n        if sum(array[i]) == n:\n            res = 'YES'\n    return res\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = map(int, stdin.split(' '))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split('\\n')[1:])))\n    # print(matrix)\n\n    # check if all lamps are off\n    # if so, then check if at least one switch is on\n    # if so, then return \"NO\"\n    # if not, then return \"YES\"\n    lamps_all_off = True\n    for row in matrix:\n        lamps_all_off = lamps_all_off and all(row)\n\n    if lamps_all_off:\n        # check if at least one switch is on\n        has_one_switch_on = False\n        for row in matrix:\n            has_one_switch_on = has_one_switch_on or any(row)\n\n        if not has_one_switch_on:\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [list(map(int, stdin.split('\\n')[1:])) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if not j and a[i][j] == 1:\n                return 'NO'\n            if j and a[i][j] == 1 and sum(a[i])!= 1:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a switch that when pressed will turn on all the lamps.\n    >>> solution(\"4 5\\n10101\\n01000\\n00111\\n10000\\n\")\n    'YES'\n    >>> solution(\"4 5\\n10101\\n01000\\n00110\\n00101\\n\")\n    'NO'\n    \"\"\"\n    # If there is only one switch, then no switch is enough\n    # If there are two switches, we can ignore the second one and press the first one.\n    # If there are three switches, we can ignore the second and the third one, and press the first one.\n    # For any number of switches, we can ignore the second switch and press the first.\n    # If there are n switches, then we can ignore the second switch and press the first.\n    # For any number of switches, we can ignore the second switch and press the first.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and press the second one.\n    # We can ignore the second switch and press the third one.\n    # We can ignore the second switch and press the first one.\n    # We can ignore the second switch and"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    for i in range(m):\n        ans = \"YES\"\n        switch = stdin.split()[i]\n        if switch.count(\"1\") == len(switch) - 1:\n            for j in range(n):\n                if switch[j] == \"1\" and switch[j]!= stdin.split()[j]:\n                    ans = \"NO\"\n                    break\n        else:\n            ans = \"NO\"\n        print(ans)\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dp = [[0] * 10 for _ in range(2)]\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        dp[0][x] += 1\n        dp[1][y] += 1\n    dp[0][0] = 1\n    dp[1][0] = 1\n    dp[0][1] = 0\n    dp[1][1] = 0\n    for i in range(2, 7):\n        dp[0][i] += dp[1][i - 1]\n        dp[1][i] += dp[0][i - 1]\n    ans = float(\"inf\")\n    for i in range(7):\n        ans = min(ans, max(dp[0][i], dp[1][i]))\n    return ans if ans < float(\"inf\") else -1\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return '''\n    # Your code goes here.\n    pass\n'''\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count_pieces = int(stdin.readline())\n    pieces_sum = []\n\n    for i in range(count_pieces):\n        l, r = list(map(int, stdin.readline().split()))\n        pieces_sum.append(l+r)\n\n    min_time = 1\n\n    for x in pieces_sum:\n        if x % 2!= 0:\n            min_time = 0\n            break\n\n    return min_time\n\"\"\"\n\n\ndef"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [[int(i) for i in stdin.strip().split(' ')] for _ in range(n)]\n\n    min_sec = sys.maxsize\n\n    for i in range(n):\n        upper = arr[i][0] + arr[i][1]\n        lower = arr[i][2] + arr[i][3]\n        if upper % 2 == 0:\n            upper_odd = 0\n        else:\n            upper_odd = 1\n        if lower % 2 == 0:\n            lower_odd = 0\n        else:\n            lower_odd = 1\n\n        if upper_odd == 0 and lower_odd == 0:\n            min_sec = min(min_sec, upper + lower)\n\n        elif upper_odd == 1 and lower_odd == 1:\n            min_sec = min(min_sec, max(upper, lower) - min(upper, lower) + 1)\n\n        else:\n            min_sec = min(min_sec, upper, lower)\n\n    if min_sec == sys.maxsize:\n        return -1\n    else:\n        return min_sec\n\n\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        x, y = x - y, y - x\n        print(x + y)\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sum = 0\n    min_time = float('inf')\n    for i in range(n):\n        domino = stdin.readline().strip().split()\n        a, b = int(domino[0]), int(domino[1])\n        if a % 2 == b % 2:\n            sum += max(a, b)\n        else:\n            min_time = min(min_time, max(a, b) - min(a, b) + 1)\n    if sum % 2 == 0:\n        print(min_time)\n    else:\n        print(min_time - 1)\n    return ''\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\""
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    for test_case in range(0, num_test_cases):\n        a = int(stdin.readline())\n        b = int(stdin.readline())\n        if b < a:\n            print(\"NO\")\n        elif b > a:\n            print(\"YES\")\n    return \"\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the area of the cloth expressed in square centimeters is prime, otherwise return 'NO'.\"\"\"\n    return \"NO\""
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if the area of the remaining piece of cloth is prime, otherwise return NO.\n\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    return 'YES' if is_prime(int(stdin)) else 'NO'\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 5\n   ... 16 13\n   ... 61690850361 24777622630\n   ... 34 33''')\n    'YES\\nNO\\nNO\\nYES'\n    >>> solution('''5 5\n   ... 16 13\n   ... 61690850361 24777622630\n   ... 34 33''')\n    'YES\\nNO\\nNO\\nYES'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find whether the area of the remaining piece of cloth is prime or not.\n    >>> solution(r\"2\\n3\")\n    'YES'\n    >>> solution(r\"2\\n4\")\n    'NO'\n    >>> solution(r\"2\\n5\")\n    'YES'\n    >>> solution(r\"3\\n2\")\n    'NO'\n    >>> solution(r\"4\\n2\")\n    'NO'\n    >>> solution(r\"4\\n4\")\n    'YES'\n    >>> solution(r\"6\\n5\")\n    'NO'\n    >>> solution(r\"6\\n6\")\n    'YES'\n    >>> solution(r\"6\\n7\")\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(set(stdin)) == 1 else 'NO'"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")]\n    if len(data) == 1:\n        return \"No\"\n    elif len(data) == 2:\n        return \"Yes\"\n    else:\n        data.sort(key=lambda x: x[1])\n        return \"Yes\" if data[0][1] * data[1][1] > 0 else \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = stdin.split(\" \")\n        points.append([int(x), int(y)])\n\n    points.sort()\n\n    for i in range(n):\n        if points[i][0]!= 0:\n            if points[i][1]!= 0:\n                break\n\n    if i == n - 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coordinates = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        if coordinates[i] > 0:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    points = []\n    for i in range(1, n + 1):\n        x, y = list(map(int, inputs[i].split()))\n        points.append((x, y))\n    points = set(points)\n    p1 = list(points)\n    points = [x for x in points if x[1]!= 0]\n    p2 = points\n    points = list(set(p1) - set(points))\n    if len(points) == 0 or len(points) == 1:\n        return 'Yes'\n    else:\n        p2.sort(key=lambda x: x[0])\n        if p2[0][1] * p2[-1][1] < 0:\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points = stdin.split(\"\\n\")\n    n = int(points[0])\n    if n == 2:\n        print(\"No\")\n    elif n == 3:\n        print(\"Yes\")\n    else:\n        d = {}\n        for p in points[1:]:\n            x, y = p.split(\" \")\n            x = int(x)\n            y = int(y)\n            if (x, y) in d:\n                d[(x, y)] = True\n            else:\n                d[(x, y)] = False\n        if len(d) == 2:\n            print(\"Yes\")\n        elif len(d) == 1:\n            print(\"No\")\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if i == 0 and j == n-1:\n                continue\n            if i == 0 and j == n-2:\n                continue\n            if j == 0 and i == n-1:\n                continue\n            if j == 0 and i == n-2:\n                continue\n            x, y = map(int, stdin.split())\n            if x**2 + y**2 == ((n-i-1)**2 + (n-j-1)**2):\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    num = int(inputs[0])\n    if num == 1:\n        return 'Yes'\n    points = [list(map(int, line.split())) for line in inputs[1:]]\n    points.sort()\n    print(points)\n    for i in range(num - 1):\n        if points[i][0] >= 0 and points[i + 1][0] < 0:\n            return 'Yes'\n        if points[i][1] >= 0 and points[i + 1][1] < 0:\n            return 'Yes'\n    return 'No'\n\n\nprint(solution('4\\n1 1\\n2 2\\n-1 1\\n-2 2'))\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = [int(i) for i in stdin.split()]\n        points.append([x, y])\n    \n    points.sort(key=lambda x: x[0])\n    for i in range(n - 1):\n        if points[i][0] * points[i + 1][1] > points[i + 1][0] * points[i][1]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [float(x) for x in stdin.split('\\n')]\n    if n == 1:\n        return \"Yes\"\n    elif n == 2:\n        return \"No\"\n    else:\n        y = sorted(x, key=lambda z: z[0])\n        if y[0][0] == 0 and y[1][0] == 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = [list(map(int, line.strip().split())) for line in stdin]\n    points = sorted(points, key=lambda x: x[0])\n    for i in range(len(points) - 1):\n        if points[i][1] < 0 < points[i + 1][1] or points[i][1] > 0 > points[i + 1][1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    def calc_factorial(n):\n        if n == 0:\n            return 1\n        res = 1\n        for i in range(2, n + 1):\n            res *= i\n        return res\n\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    a_factorial = calc_factorial(a)\n    b_factorial = calc_factorial(b)\n    print(gcd(a_factorial, b_factorial))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    factorials = [1]\n    for i in range(1, a + 1):\n        factorials.append(factorials[-1] * i)\n    factorials_b = [1]\n    for i in range(1, b + 1):\n        factorials_b.append(factorials_b[-1] * i)\n    return max(factorials, factorials_b).pop()\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    A, B = map(int, stdin.split())\n\n    # find factorials\n    A = 1\n    for i in range(1, A + 1):\n        A *= i\n    A_fact = A\n    B = 1\n    for i in range(1, B + 1):\n        B *= i\n    B_fact = B\n\n    # find gcd\n    gcd = 1\n    for i in range(2, min(A_fact, B_fact) + 1):\n        if A_fact % i == 0 and B_fact % i == 0:\n            gcd = i\n\n    # print result\n    print(gcd)\n    return ''\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    A_factorial = A\n    B_factorial = B\n\n    while A % B!= 0:\n        A, B = B, A % B\n\n    return A\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split())\n    return str(factorial(a) * factorial(b) // gcd(factorial(a), factorial(b)))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return math.factorial(a) // math.factorial(b) // math.gcd(a, b)\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def factorial(n):\n        return 1 if n == 1 else n * factorial(n - 1)\n    \n    a, b = map(factorial, map(int, stdin.split()))\n    return a // gcd(a, b)"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    a = 1\n    b = 1\n    for i in range(1, x + 1):\n        a *= i\n    for j in range(1, y + 1):\n        b *= j\n    c = 1\n    while a > 0 and b > 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    print(c * a * b)"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    factorial_A = 1\n    factorial_B = 1\n    for i in range(1, A + 1):\n        factorial_A *= i\n    for i in range(1, B + 1):\n        factorial_B *= i\n    return factorial_A * factorial_B\n\"\"\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n):\n        if n % i == 0:\n            return f\"{i} {n//i}\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  def is_prime(n):\n    if n <= 1:\n      return False\n    for i in range(2, int(n ** 0.5) + 1):\n      if n % i == 0:\n        return False\n    return True\n\n  def next_prime(n):\n    while not is_prime(n):\n      n += 1\n    return n\n\n  def next_composite(n):\n    m = n\n    while True:\n      if not is_prime(m):\n        m += 1\n      else:\n        return m\n\n  def next_diff(n):\n    m = n\n    while m <= n:\n      if is_prime(m):\n        m = next_composite(m)\n      else:\n        return m\n    else:\n      return n + 1\n\n  for i in range(stdin):\n    n = next_diff(next_prime(i))\n\n  return str(n - 1) + \" \" + str(n)\n\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i + n // i\n        i += 1\n    return n + 1\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = 0\n    r = n\n    while l < r:\n        mid = l + (r - l) // 2\n        div = 2\n        while div * div <= mid:\n            if mid % div == 0:\n                break\n            div += 1\n        else:\n            l = mid + 1\n    print(l, r)\n    return ''\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '9 8'\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    low = 3\n    high = int(n**0.5)\n    ans = 0\n    for i in range(low, high+1):\n        if n % i == 0:\n            ans = i\n            if ans == n:\n                break\n            if i % 2 == 1:\n                break\n    if ans == 0:\n        return \"NO SOLUTION\"\n    return str(ans - n) + \" \" + str(ans)"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_num = math.floor(math.sqrt(n))\n    for a in range(3, max_num + 1, 2):\n        if n % a == 0:\n            b = n // a\n            if is_prime(b):\n                return str(a) +'' + str(b)\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [int(x) for x in stdin.split(\"\\n\")]\n    n = input_data[0]\n\n    for i in range(1, 10):\n        a = i + n + 1\n        if a % 2!= 0:\n            if a % 3!= 0:\n                b = a // 2\n                if (a - b) % 3!= 0:\n                    break\n    return \"{} {}\".format(i, b)\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n, 2, -1):\n        if i % 2 == 0:\n            break\n    return f\"{i} {n - i}\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value of the score that can be obtained.\n\n    Args:\n        stdin (str): Input string given in the above format.\n\n    Returns:\n        str: String containing the maximum value of the score that can be obtained.\n    \"\"\"\n   ...\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Determine if there exists a maximum value of the score that can be obtained.\n    If the answer is yes, find that maximum value.\n    :param stdin:\n    :return: str\n    '''\n    return \"yes\" if len(stdin) > 0 else \"no\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, p = [int(i) for i in stdin.split()]\n    matrix = [\n        [int(j) for j in i.split()]\n        for i in stdin.split(':')[1].split('\\n')\n    ]\n    INF = float('inf')\n    max_dist = [[INF for i in range(n)] for j in range(n)]\n    dp = [[0 for i in range(n)] for j in range(n)]\n    matrix.append([0 for i in range(n + 1)])\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                max_dist[i][j] = 0\n            elif i < j:\n                max_dist[i][j] = matrix[0][j]\n    for k in range(1, m + 1):\n        i, j = matrix[k][0], matrix[k][1]\n        max_dist[i][j] = matrix[k][2]\n        max_dist[j][i] = matrix[k][2]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = max_dist[i][j]\n    for k in range(n):\n        i, j = 0, k\n        dp[i][j] = 0\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            for p in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][p] + dp[p + 1][j] + matrix[p + 1][j])\n    print(dp[0][n - 1])\n    return ''\n\n\ndef"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = stdin.split(' ')\n    N, M, P = int(N), int(M), int(P)\n    costs = {}\n    for i in range(N):\n        A, B, C = stdin.split(':')\n        costs[int(A)] = int(B), int(C)\n    return costs\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 10\n   ... 1 2 20\n   ... 2 3 30\n   ... 1 3 45\n   ... ''')\n    35\n    \"\"\"\n    pass\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.readline().split())\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b, c = map(int, stdin.readline().split())\n        G[a - 1].append((b - 1, c))\n    S = [0] * n\n    Q = [(1, 0)]\n    while Q:\n        v, t = Q.pop(0)\n        if v == n:\n            break\n        for w, c in G[v]:\n            if t + c > p:\n                S[w] = t\n            else:\n                S[w] = t + c\n            Q.append((w, S[w]))\n    return''.join(map(str, S)) if Q else '-1'"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem.\"\"\"\n    return None\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split('\\n')[0])\n    res = 0\n    for i in range(n):\n        line = stdin.split('\\n')[1 + i]\n        s, c = line.split()\n        s = s[::-1]\n        c = int(c)\n        if s in res:\n            res += c\n        else:\n            res += c * 2\n    if res < 7:\n        return -1\n    else:\n        return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split(\"\\n\")[0])\n    choices: list = []\n    for i in range(1, n+1):\n        choices.append(stdin.split(f\"\\n{i}\\n\")[0])\n    # choices = [stdin.split(f\"\\n{i}\\n\")[0] for i in range(1, n+1)]\n    choices = list(set(choices))\n    choices.sort(key=len, reverse=True)\n    choices = list(map(lambda x: x.upper(), choices))\n    cost = 0\n    for i in choices:\n        if check_palindrome(i):\n            cost += len(i)\n        else:\n            break\n    if cost == 0:\n        return -1\n    return cost\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    inputs = [\n        [int(x) for x in line.split()]\n        for line in stdin.split(\"\\n\")\n    ]\n\n    n, s, c = inputs[0]\n    cost = [[0, c]]\n    cost += [[c, int(c / n) * i] for i in range(1, n)]\n    # cost += [[i, i] for i in range(n)]\n\n    for i in range(1, n + 1):\n        cost[i][0] = cost[i][1] + cost[i - 1][0]\n        cost[i][1] = cost[i][1] + cost[i - 1][1]\n\n    total = 0\n    for i in range(1, n + 1):\n        if cost[i][0] >= cost[i][1]:\n            total += cost[i][0]\n        else:\n            total += cost[i][1]\n\n    return total if total < 10**9 else -1"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    line = stdin.splitlines()\n\n    # read input\n    n = int(line[0])\n    arr = []\n    for i in range(1, n+1):\n        tmp = line[i].split(\" \")\n        arr.append((tmp[0], int(tmp[1])))\n\n    # process input\n    sorted_arr = sorted(arr, key=lambda x: x[1])\n    ans = 0\n    string_set = []\n    for ele in sorted_arr:\n        if ele[0] not in string_set:\n            string_set.append(ele[0])\n        else:\n            ans += ele[1]\n\n    # print output\n    if ans > 10**9:\n        print(-1)\n    else:\n        print(ans)\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cost = list(map(int, stdin.split('\\n')[1::]))\n    letters = list(map(str, stdin.split('\\n')[0::2]))\n    cost = sorted(cost, reverse=True)\n    letters = sorted(letters, key=lambda x: len(x), reverse=True)\n    for i in range(len(cost)):\n        for j in range(i + 1, len(cost)):\n            if cost[i] * j < cost[j]:\n                cost[i] = cost[j]\n                letters[i] = letters[j]\n    result = [letters[i] for i in range(len(letters)) if i == len(letters) - 1 or cost[i] * (i + 1) >= cost[i + 1]]\n    if len(result) == 0:\n        return -1\n    return sum([cost[i] * (i + 1) for i in range(len(cost))])"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    pass\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    seq = [tuple(i.split(' ')) for i in stdin[1:]]\n    seq = sorted(seq, key=lambda x: x[1])\n    dp = [0]\n    for s, c in seq:\n        dp.append(dp[-1] + int(c))\n    dp = [0] + dp\n    dp_stack = [0]\n    min_cost = 10 ** 9\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            cost = dp_stack[j] - dp_stack[i] + dp[j] - dp[i]\n            if cost < min_cost:\n                min_cost = cost\n            elif cost == min_cost:\n                min_cost = -1\n                break\n        dp_stack.append(dp[i])\n    return min_cost\n\nprint(solution(stdin))\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nba 3\\nabc 4\\n:\\n\")\n    7\n    >>> solution(\"3\\nba 5\\nabc 4\\n:\\n\")\n    -1\n    >>> solution(\"2\\nba 3\\nabc 4\\n:\\n\")\n    7\n    >>> solution(\"3\\nba 5\\nabc 4\\n:\\n\")\n    9\n    \"\"\"\n    n = int(stdin)\n    S, C = [], []\n    for _ in range(n):\n        a, b = map(int, stdin.strip().split())\n        S.append(a)\n        C.append(b)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = C[i]\n        for j in range(i + 1, n):\n            if S[i] == S[j] and S[i] == S[i][::-1] or S[i] == S[i][::-1] and S[j] == S[j][::-1]:\n                dp[i][j] = dp[i][i] + dp[j][j]\n            else:\n                dp[i][j] = 10 ** 9\n    dp = [list(map(lambda x: -1 if x == 10 ** 9 else x, row)) for row in dp]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    for row in dp:\n        print(-1 if row[0] == 10 ** 9 else row[0])\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    cost_list = []\n    for _ in range(N):\n        text, cost = stdin.readline().strip().split()\n        cost_list.append((text, int(cost)))\n\n    cost_list = sorted(cost_list, key=lambda x: x[1])\n\n    current_cost = 0\n    current_word = \"\"\n    for word, cost in cost_list:\n        if cost < current_cost:\n            break\n        current_cost += cost\n        current_word += word\n\n    if current_cost < 7:\n        print(current_cost)\n    else:\n        print(-1)\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    costs = [int(x) for x in stdin[1:].split(' ')]\n    cost = costs[0]\n    for x in costs:\n        if cost > x:\n            cost = x\n    if cost == 0:\n        return 0\n    else:\n        return cost"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum xor-sum of the candies\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    return max(sum(x**2 for x in range(1, n+1)) ^ sum(x for x in range(1, n+1) if x&(x-1) == 0) ^ (k+1) ** 2)\n\"\"\"\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(max(sum(i + 1 for i in range(n) if i % 2 == 0) ^ sum(i + 1 for i in range(n) if i % 2 == 1),\n                   sum(i + 1 for i in range(n) if i % 2 == 1) ^ sum(i + 1 for i in range(n) if i % 2 == 0)))\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    b = [0] * (1 << n)\n    s = 0\n    for i in range(n):\n        b[1 << i] = i\n    for i in range(1 << n):\n        if not (i & (i + 1)):\n            continue\n        s = b[i] ^ b[i + 1]\n        s = s ^ b[i >> 1]\n        if s > k:\n            s = 0\n            break\n        k -= s\n    return str(s)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = [i for i in range(n + 1)]\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j])\n            if i >= j:\n                dp[i][j] = max(dp[i][j], candies[i - j] ^ dp[i - j][j])\n    print(dp[-1][-1])"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    l = list(map(int, stdin.split(' ')))\n\n    m = max(l)\n    i = 0\n    while i < len(l):\n        l[i] ^= m\n        i += 1\n    \n    return max(l)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    return str(max(n, 2 * k - 1))\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_xor = 0\n    for i in range(1 << k):\n        xor = 0\n        for j in range(k):\n            if i & 1 << j:\n                xor += j + 1\n        if xor > max_xor:\n            max_xor = xor\n    return max_xor\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    candies = list(map(int, stdin.split(' ')))\n    cur_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            cur_sum = candies[i] ^ candies[j]\n            if cur_sum <= k:\n                k -= cur_sum\n                break\n        if k == 0:\n            break\n    return cur_sum\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    arr.sort(key=lambda p: p[0])\n    for i in range(n - 1):\n        a, b = arr[i]\n        c, d = arr[i + 1]\n        if b > d:\n            arr[i + 1] = [a, d]\n    print(arr)\n    return''.join(map(str, arr[-1]))"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [tuple(map(int, stdin.split('\\n')[i].split())) for i in range(n)]\n    return sum(max(abs(point[0]-1), abs(point[1]-1)) for point in points) / 2"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns shortest side length of isosceles triangle\n    >>> solution(\n   ... '''"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_sum = 0\n    for line in stdin:\n        first_value, second_value = [int(i) for i in line.split()]\n        total_sum += max(first_value, second_value)\n    return total_sum"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def calc_dis(pt1, pt2):\n        x1, y1 = pt1\n        x2, y2 = pt2\n        return (abs(x2 - x1)) ** 2 + (abs(y2 - y1)) ** 2\n\n    def get_max_dis(pts: list):\n        x_s = [x for x, _ in pts]\n        x_s.sort()\n        y_s = [y for _, y in pts]\n        y_s.sort()\n\n        return max(\n            calc_dis((x_s[0], y_s[0]), (x_s[0], y_s[1])),\n            calc_dis((x_s[0], y_s[0]), (x_s[1], y_s[0])),\n        )\n\n    def solve(pts):\n        if len(pts) < 3:\n            return 0\n\n        x_s = [x for x, _ in pts]\n        x_s.sort()\n        y_s = [y for _, y in pts]\n        y_s.sort()\n\n        pts = sorted(pts, key=lambda p: ((p[0] - x_s[0]) ** 2 + (p[1] - y_s[0]) ** 2), reverse=True)\n        pts = sorted(pts, key=lambda p: (p[0] - x_s[1]) ** 2 + (p[1] - y_s[1]) ** 2, reverse=True)\n\n        for pt in pts:\n            if pt[0] <= x_s[0] and pt[0] >= x_s[1]:\n                x_s[0] = pt[0]\n            if pt[1] <= y_s[0] and pt[1] >= y_s[1]:\n                y_s[0] = pt[1]\n\n        return max(calc_dis((x_s[0], y_s[0]), (x_s[0], y_s[1])), calc_dis((x_s[0], y_s[0]), (x_s[1], y_s[0])))\n\n    return str(round(solve([(int(x), int(y)) for x, y in [x.split() for x in stdin.split('\\n')]])))\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = []\n    y = []\n    for _ in range(n):\n        x.append(int(stdin.readline()))\n        y.append(int(stdin.readline()))\n    result = math.sqrt(sum([(x[i] - x[i + 1]) ** 2 for i in range(0, n - 1)])) + math.sqrt(sum([(x[i] - x[i + 1]) ** 2 for i in range(0, n - 1)]))\n    return str(round(result))\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.split()\n    output = 0\n    for word in text:\n        if 'i' in word:\n            word_dict = Counter(word)\n            output += word_dict['i'] // 2\n            word_dict['i'] %= 2\n            output += word_dict['n']\n            output += word_dict['e']\n            if output > output_max:\n                output_max = output\n    return output_max\n\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total_nineteen = 0\n    for index, char in enumerate(stdin):\n        if char == \"n\" and stdin[index + 1] == \"i\":\n            if stdin[index + 2] == \"e\":\n                if stdin[index + 3] == \"e\":\n                    total_nineteen += 1\n    return total_nineteen"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(\"nineteen\") == 0:\n        return 0\n    elif stdin.count(\"nineteen\") == 1:\n        return 1\n    else:\n        return stdin.count(\"nineteen\") - 1\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"nineteen\")\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    counter = 0\n    for i in stdin:\n        if i == \"n\":\n            if counter > 0:\n                counter -= 1\n        elif i == \"i\":\n            if counter == 0:\n                counter = 2\n            else:\n                counter -= 2\n        else:\n            counter += 1\n    return counter\n\nprint(solution(input()))\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('nineteen')"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('nineteen')"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    valid_branches = []\n    for i in range(1, p):\n        valid_branches.append(i * y // i)\n    valid_branches.append(p * y)\n    valid_branches.sort()\n    for i in range(0, len(valid_branches)):\n        if valid_branches[i]!= valid_branches[i - 1]:\n            return str(valid_branches[i] - 1)\n    return '-1'\n\"\"\"\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, y = list(map(int, stdin.split()))\n    i = 0\n    while i < y:\n        i += 2 * p\n    return i if i < y else -1"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    branches = [[] for i in range(n)]\n    indices = [[] for i in range(m)]\n    counter = 0\n    for i in range(m):\n        br, g, b = [int(x) for x in stdin.split(' ')]\n        branches[br-1].append(g)\n        indices[i] = b\n        if b > counter:\n            counter = b\n    s = set(range(2, m))\n    # s = {2}\n    for branch in branches:\n        if branch:\n            s -= set(branch)\n    if s:\n        return max(s) + 1\n    return -1\n\nimport heapq\ndef"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, y = [int(x) for x in stdin.split(' ')]\n    for x in range(1, p + 1):\n        if x * (y // x) >= y:\n            return str(x)\n    return str(-1)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    # if p == 2:\n    #     return '-1'\n    # if y % p == 0:\n    #     return str(y//p)\n    # if y % p == 1:\n    #     return '-1'\n    # if y % p == 2:\n    #     return '2'\n    # if y % p == 3:\n    #     return '3'\n    # if y % p == 4:\n    #     return '4'\n    # if y % p == 5:\n    #     return '5'\n    # if y % p == 6:\n    #     return '6'\n    # if y % p == 7:\n    #     return '7'\n    # if y % p == 8:\n    #     return '8'\n    # if y % p == 9:\n    #     return '9'\n    if y % p == 0:\n        return str(y//p)\n    else:\n        return '-1'"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    return n // m if n % m == 0 else -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, y = [int(x) for x in stdin.split(' ')]\n    ans = 0\n    while y % p!= 0:\n        ans += 1\n        y += 1\n    return ans if ans > 0 else -1\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split(' '))\n    a = set()\n    for i in range(2, y + 1):\n        a.add(i * (y // i))\n    a.add(y)\n    a = a.difference(set(range(1, p + 1)))\n    if len(a) == 0:\n        return '-1'\n    else:\n        return max(a)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split(' '))\n    for i in range(1, y // p + 1):\n        if p * i % y!= 0:\n            return str(p * i)\n    return '-1'"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    a\n    b\n    c\n    d\n    d\n    d\n    \"\"\"\n    a, b = map(int, stdin.split())\n    if b < a * 2:\n        return -1\n    if a == b:\n        return 0\n    if a % 2 == 0:\n        return a // 2\n    return a // 2 * 2\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    houses = [int(i) for i in stdin.split(' ')]\n    houses[1] = abs(houses[1] - houses[0])\n    houses[2] = abs(houses[2] - houses[0])\n    return str(min(houses[1], houses[2]))\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum distance from house where the girl likes to live to the nearest house that can be purchased.\n    >>> solution('5 1 20\\\\n0 27 32 21 19\\\\n')\n    '40'\n    >>> solution('7 3 50\\\\n62 0 0 0 99 33 22\\\\n')\n    '30'\n    >>> solution('10 5 100\\\\n1 0 1 0 0 0 0 0 1 1\\\\n')\n    '20'\n    \"\"\"\n   ...\n=======\n\"\"\"\nZane the wizard had never loved anyone before, until he fell in love with a girl, whose name remains unknown to us.\n\n [Image] \n\nThe girl lives in house m of a village. There are n houses in that village, lining in a straight line from left to right: house 1, house 2,..., house n. The village is also well-structured: house i and house i + 1 (1 \u2264 i < n) are exactly 10 meters away. In this village, some houses are occupied, and some are not. Indeed, unoccupied houses can be purchased.\n\nYou will be given n integers a_1, a_2,..., a_{n} that denote the availability and the prices of the houses. If house i is occupied, and therefore cannot be bought, then a_{i} equals 0. Otherwise, house i can be bought, and a_{i} represents the money required to buy it, in dollars.\n\nAs Zane has only k dollars to spare, it becomes a challenge for him to choose the house to purchase, so that he could live as near as possible to his crush. Help Zane determine the minimum distance from his crush's house to some house he can afford, to help him succeed in his love.\n\n\n-----Input-----\n\nThe first line contains three integers n, m, and k (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 n, 1 \u2264 k \u2264 100)\u00a0\u2014 the number of houses in the village, the house where the girl lives, and the amount of money Zane has (in dollars), respectively.\n\nThe second line contains n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 100)\u00a0\u2014 denoting the availability and the prices of the houses.\n\nIt is guaranteed that a_{m} = 0 and that it is possible to purchase some house with no more than k dollars.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the minimum distance, in meters, from the house where the girl Zane likes lives to the house Zane can buy.\n\n\n-----Examples-----\nInput\n5 1 20\n0 27 32 21 19\n\nOutput\n40\nInput\n7 3 50\n62 0 0 0 99 33 22\n\nOutput\n30\nInput\n10 5 100\n1 0 1 0 0 0 0 0 1 1\n\nOutput\n20\n\n\n-----Note-----\n\nIn the first sample, with k = 20 dollars, Zane can buy only house 5. The distance from house m = 1 to house 5 is 10 + 10 + 10 + 10 = 40 meters.\n\nIn the second sample, Zane can buy houses 6 and 7. It is better to buy house 6 than house 7, since house m = 3 and house 6 are only 30 meters away, while house m = 3 and house 7 are 40 meters away.\ndef"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    total_prices = [0] * N\n    for i in range(N):\n        if prices[i] == 0:\n            total_prices[i] = 0\n        else:\n            total_prices[i] = 10 * M * (i + 1) - prices[i]\n    min_price = prices[M]\n    for i in range(M, N):\n        if min_price > total_prices[i]:\n            min_price = total_prices[i]\n    return min_price\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    houses = list(map(int, stdin.split(' ')))\n    houses[m] = 0\n    houses.sort()\n    for i in range(n - 1):\n        houses[i + 1] += houses[i]\n    houses.sort()\n    print(houses[k] - houses[n - 1])\n    return ''\nprint(solution(input()))\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(n) for n in stdin.split()]\n    H = [int(n) for n in stdin.split()]\n\n    houses_dist = [0]\n    if N > 1:\n        houses_dist.append(H[1] - H[0])\n\n    for i in range(2, N):\n        houses_dist.append(H[i] - H[i-1])\n\n    dp = [[0 for _ in range(N+1)] for _ in range(K+1)]\n\n    for i in range(1, N+1):\n        for k in range(1, K+1):\n            if i == 1 and k == 1:\n                dp[1][i] = houses_dist[i]\n            elif i == 1 and k!= 1:\n                dp[k][i] = min(dp[k][i-1], houses_dist[i])\n            else:\n                dp[k][i] = min(dp[k][i-1], houses_dist[i] + dp[k-1][i-2])\n\n    return dp[K][N]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    zane = [0] * int(stdin.readline().strip())\n    villa = int(stdin.readline().strip())\n    k = int(stdin.readline().strip())\n    while k!= 0:\n        zane[int(stdin.readline().strip()) - 1] = int(stdin.readline().strip())\n        k -= 1\n    minDist = 0\n    for i in range(len(zane)):\n        if zane[i]!= 0:\n            minDist += 10 * (i + 1)\n            break\n    return str(minDist)\n    '''\n    houses = [int(i) for i in stdin.readline().split()]\n    houses[villa - 1] = 0\n    minDist = 0\n    for house in houses:\n        if house!= 0:\n            minDist += house * 10\n    return str(minDist)\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimal distance between house and the place where the wizard can be.\"\"\"\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n\n    return min(abs(houses[i] - houses[i + 1]) for i in range(n - 1))"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin[0])\n    houses = list(map(int, stdin.split()[1:]))\n    houses.sort()\n    k = int(stdin[1])\n    target = houses[k]\n    ans = 0\n    for house in houses:\n        ans += house if house > target else 0\n    return str(ans)\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    h_costs = list(map(int, stdin.split()))\n    houses = [0] * n\n    houses[m] = -1\n    count = 0\n    for i in h_costs:\n        if i == 0:\n            continue\n        houses[count] = i\n        count += 1\n    print(houses)\n    print(sorted(houses))\n    houses = sorted(houses)\n    cost = 0\n    moved = 0\n    for i in houses:\n        if i == 0:\n            continue\n        cost += i\n        moved += 1\n        if cost > k:\n            break\n    print(cost)\n    print(moved)\n    return moved\n\nsolution(\"10 5 100 1 0 1 0 0 0 99 33 22\")"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    a = [[int(x) for x in stdin.split(\" \")] for _ in range(n)]\n    b = [[int(x) for x in stdin.split(\" \")] for _ in range(n)]\n\n    def can_be_equal(a: list, b: list) -> bool:\n        if len(a)!= len(b) or len(a[0])!= len(b[0]):\n            return False\n        for i in range(len(a)):\n            for j in range(len(a[0])):\n                if a[i][j]!= b[i][j]:\n                    return False\n        return True\n\n    if can_be_equal(a, b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution of the task.\n    '''\n    pass\ndef"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = list(map(int, stdin.split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    b = []\n    for _ in range(n):\n        b.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                for l in range(m):\n                    if k+k < n and l+l < m:\n                        if a[i][j] == b[k][l]:\n                            b[k][l] = a[i][j]\n    print('YES') if b == a else print('NO')\n    return ''\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    size = list(map(int, inputs[0].split(\" \")))\n    A = [list(map(int, line.split(\" \"))) for line in inputs[1:size[0] + 1]]\n    B = [list(map(int, line.split(\" \"))) for line in inputs[size[0] + 1:]]\n    \n    return \"YES\" if (A == B) else \"NO\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        arr[i] = [int(stdin.split(' ')[i]) for i in range(m)]\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] = arr[j][i]\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j]!= arr[i][j]:\n                return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [[int(s) for s in stdin.strip().split(' ')] for _ in range(n)]\n    b = [[int(s) for s in stdin.strip().split(' ')] for _ in range(n)]\n    if n!= m:\n        return \"NO\"\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[j][i]:\n                return \"NO\"\n    return \"YES\"\n    # END\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def longest_uncommon_subsequence(stdin: str) -> str:\n        a = stdin.split()[0]\n        b = stdin.split()[1]\n        if len(a) < len(b):\n            return longest_uncommon_subsequence(b +'' + a)\n        else:\n            return a, b\n\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    n = len(a)\n    m = len(b)\n    arr = [[0] * (n+1) for _ in range(m+1)]\n    res = 0\n    for j in range(1, n+1):\n        for i in range(1, m+1):\n            if a[j-1] == b[i-1]:\n                arr[i][j] = arr[i-1][j-1] + 1\n            else:\n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n            res = max(res, arr[i][j])\n    return res"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # create a 2D matrix to save the length of the longest common subsequence\n    dp = [[0 for _ in range(len(stdin)+1)] for _ in range(len(stdin)+1)]\n\n    for r in range(1, len(stdin)+1):\n        for c in range(1, len(stdin)+1):\n            if stdin[r-1] == stdin[c-1]:\n                dp[r][c] = dp[r-1][c-1] + 1\n            else:\n                dp[r][c] = max(dp[r-1][c], dp[r][c-1])\n    return len(stdin) - dp[len(stdin)][len(stdin)]\n\n\n\n----Input\n\nabc\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\nsolution()"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = stdin.split('\\n')\n    string_a = s[0]\n    string_b = s[1]\n    a_set = set()\n    b_set = set()\n    length = 0\n    for a in string_a:\n        a_set.add(a)\n    for b in string_b:\n        b_set.add(b)\n    for a in a_set:\n        if a in b_set:\n            length += 1\n    if length > 0:\n        return length\n    else:\n        return -1\n\n\n\n\n\n\n\n\n\n\n\n-----End-----"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    return max(len(a), len(b)) - len(lcs(a, b))\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nassert(solution(a) == b)\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    c, d = map(int, stdin.split(' '))\n    if a % 2 == 0:\n        s1 = set()\n        for i in range(b):\n            s1.add(a * (i + 1))\n        for j in range(d):\n            s1.add(c * (j + 1))\n        return str(min(s1))\n    else:\n        s2 = set()\n        for i in range(b):\n            s2.add(a * (i + 1))\n        for j in range(d):\n            s2.add(c * (j + 1))\n        return str(-1)\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (a, b), (c, d) = map(int, stdin.split('\\n')[:2])\n    if b % c == 0:\n        return -1\n    if d % c == 0:\n        return 1\n    if d % b == 0:\n        return 1\n    return (b + c - 1) * (d // b) + d % b + b\n    \ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    c, d = [int(s) for s in stdin.split()]\n    m = (b * 2 * c) / (c + b)\n    n = (b * 2 * d) / (d + b)\n    if m == n:\n        return '-1'\n    if m % 2!= 0 and n % 2 == 0:\n        return m\n    elif m % 2 == 0 and n % 2!= 0:\n        return n\n    elif m % 2 == 0 and n % 2 == 0:\n        return '-1'\n    else:\n        return m\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    if (b > d) or (c > d):\n        return -1\n    d = d - c\n    b = b - a\n    d = d + b\n    if d % 2 == 0:\n        return d + a\n    return d + a - 1\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n\n    if b > d:\n        m = d\n        n = a\n    else:\n        m = b\n        n = c\n\n    result = 0\n    while result == 0:\n        if m % n == 0:\n            result = m\n        m += a\n        n += c\n    return result\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split(\" \")]\n    c += 1\n    d += 1\n    return str(next((b + i * a) for i in range(c) if (b + i * a) % (c + d) == 0))\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\n\n\"\"\"\n-----TESTING-----\ns = \"solution('20 2\\n9 19')\"\nprint(s, eval(s))\ns = \"solution('2 1\\n16 12')\"\nprint(s, eval(s))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    c, d = [int(i) for i in stdin.split()]\n    return str(sum(range(a, b + 1, a)) + sum(range(c, d + 1, c)))"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    total = a + b + c + d\n    result = -1\n    for i in range(1, total + 1, 2):\n        if a * i % b == c and c * i % d == a:\n            result = i\n            break\n    return str(result)\n    # Your code here\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    screaming = (a * (b + c)) * 2\n    if screaming % 2 == 1:\n        return \"impossible\"\n    return str(screaming - b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def dfs(num):\n        if num%3 == 0:\n            return dfs(num//3)\n        if num%3 == 1:\n            return 1+dfs(num//3-1)\n        if num%3 == 2:\n            return 1+dfs(num//3-1)\n    if n%3 == 0:\n        return 1,1,1\n    if n%3 == 1:\n        return 3,2,n//3+1\n    if n%3 == 2:\n        return 3,n//3+1,1\nprint(*solution(input()))\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for codewars kata \"Little C loves number \u00ab3\u00bb very much. He loves all things about it.\n\n    Args:\n        stdin (str): input from stdin\n\n    Returns:\n        str: string of 3 integers separated by space, each one representing a number\n    \"\"\"\n    return \" \".join(list(str(3*int(x)//3) for x in stdin.split()))\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for a in range(1, int((n / 3) + 1)):\n        for b in range(a, int((n / 2) + 1)):\n            c = n - a - b\n            if c >= 0 and (a % 3!= 0 and b % 3!= 0 and c % 3!= 0):\n                print(a, b, c)\n                return\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = n / 3\n    return f'{s} {s} {s}'\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution is based on the fact that the sum of two integers is a multiple of 3 if and only if one of the integers is a multiple of 3.\n    It can be proved that at least one solution exists.\n    \"\"\"\n    n = int(stdin)\n    for a in range(1, n + 1, 3):\n        b, c = n - a, n - a - a % 3\n        if (b <= 0 or c <= 0) or b == 0 and c == 0:\n            break\n    return f\"{a} {b} {c}\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(3):\n        if n % 3!= 0:\n            continue\n        else:\n            s += 3\n            n = n // 3\n    if s == n:\n        return f'{s} {s} {s}'\n    else:\n        return f'{n} {n} {n}'\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3 == 0:\n        return str(n//3)+\" \"+str(n//3)+\" \"+str(n//3)\n    elif n % 3 == 1:\n        return str((n//3)+1)+\" \"+str(n//3)+\" \"+str((n//3)+2)\n    else:\n        return str((n//3))+\" \"+str((n//3))+\" \"+str((n//3)+1)\n\n\ndef"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(0)\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of distinct squares that satisfy the conditions\n    from the problem statement.\"\"\"\n    n, a, b, c, d = [int(x) for x in stdin.split()]\n    return int(sum(n // x for x in (a, b, c, d)) * 2 - 4)\n\n\ndef"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 1 1 1 2\")\n    2\n    >>> solution(\"3 3 1 2 3\")\n    6\n    \"\"\"\n    n, a, b, c, d = [int(x) for x in stdin.split()]\n    print(sum(sum(sorted(set(sum(([i, j] for j in range(a, b + 1)), [])))) for i in range(c, d + 1)))\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = [int(x) for x in stdin.split(' ')]\n\n    # \u041d\u0430\u0448 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0442\u0432\u0435\u0442\u0430\n    mas = [\n        [a, a, b],\n        [b, a, a],\n        [a, b, a],\n        [b, b, a],\n        [c, c, b],\n        [c, b, b],\n        [b, c, b],\n        [c, c, b],\n        [d, d, c],\n        [d, c, c],\n        [c, d, c],\n        [d, d, c]\n    ]\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u0441\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430\n    result = 0\n    for x in range(n):\n        for y in range(n):\n            if mas[x][y] in mas[x] and mas[x][y] in mas[y]:\n                result += 1\n\n    return str(result)\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, a, b, c, d = map(int, lines[0].split(' '))\n    dic = {}\n    if a > 0:\n        if not dic.get(a, False):\n            dic[a] = 1\n        else:\n            dic[a] = 2\n    if b > 0:\n        if not dic.get(b, False):\n            dic[b] = 1\n        else:\n            dic[b] = 2\n    if c > 0:\n        if not dic.get(c, False):\n            dic[c] = 1\n        else:\n            dic[c] = 2\n    if d > 0:\n        if not dic.get(d, False):\n            dic[d] = 1\n        else:\n            dic[d] = 2\n    sum = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            sum += (i in dic and j in dic)\n    return sum\n\ndef"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(num) for num in stdin.split()]\n    return str(len([1 for x in range(a, b+1) for y in range(c, d+1) if (x+y) % 2 == 0]))\n    \ndef"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    sum_1 = a + b + c\n    sum_2 = a * c + b * c + a * b\n    sum_3 = a + c + d\n    sum_4 = c + d + a\n    sum_5 = d + a + b\n    return sum_1 + sum_2 + sum_3 + sum_4 + sum_5 - sum_1 * sum_1"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, u1, d1, u2, d2 = stdin\n    snow = w\n    stone1 = u1\n    stone2 = u2\n    while h > 0:\n        snow += i\n        if h == d1:\n            snow -= stone1\n        elif h == d2:\n            snow -= stone2\n        h -= 1\n    return snow\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return stdin\n\ndef"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stones_height = [int(s) for s in stdin.split()]\n\n    stones = {\n        'weight': stones_height[0],\n        'height': stones_height[1],\n    }\n\n    second_stone_height = stones_height[2]\n    second_stone_weight = stones_height[3]\n\n    while stones['height'] > 0:\n        stones['weight'] += stones['height']\n        if stones['weight'] < second_stone_weight:\n            stones['weight'] = 0\n            break\n        stones['height'] -= 1\n\n    return stones['weight']\n\"\"\"\n\ndef"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u_1, d_1 = map(int, stdin.split())\n    u_2, d_2 = map(int, stdin.split())\n    return sum(map(int, stdin.split()))\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split(' '))\n    u1, d1 = map(int, stdin.split(' '))\n    u2, d2 = map(int, stdin.split(' '))\n    if d1 == d2:\n        print(0)\n    else:\n        if u1 <= w and d1 <= h:\n            print(d1 + (w - u1))\n        elif u2 <= w and d2 <= h:\n            print(d2 + (w - u2))\n        else:\n            print(0)\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n---SOLUTION---\n\ndef"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\n----\n\ndef"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns weight of the snowball at the end of the second step when it stops moving.\"\"\"\n    # You can obviously print these, but why should you? ;)\n    return stdin\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"5\\n3 4 3 2 1\\n6 8\\n\"))\nprint(solution(\"5\\n0 3 3 4 2\\n3 10\\n\"))\nprint(solution(\"2\\n2 5\\n3 6\\n\"))\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    st_in = stdin.strip().split()\n    m, *st = [int(st_in[i]) for i in range(1, len(st_in))]\n    x, y = list(map(int, st_in[2:4]))\n    if max(st) == 0:\n        return '0'\n    sum_classes = sum(st)\n    m, x, y = (m, x, y) if sum_classes >= x else (sum_classes, m, y)\n    res = set()\n    for i in range(m, -1, -1):\n        cnt = sum(i < e < m for e in st)\n        if x <= cnt <= y:\n            res.add(i)\n    res = sorted(list(res))\n    return '1' if len(res) == 1 else str(res[0])\n\"\"\"\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, *c, x, y = map(int, stdin.split('\\n')[:5])\n    if any(c[i] < 0 for i in range(m)):\n        return \"0\"\n    c.sort(reverse=True)\n    if any(c[i] - c[i+1] < 0 for i in range(m - 1)):\n        return \"0\"\n    c.sort()\n    low, high = c[0], c[-1]\n    while low < x:\n        low += 1\n    while high > y:\n        high -= 1\n    if high <= low:\n        return \"0\"\n    for i in range(m):\n        if c[i] >= low and c[i] <= high:\n            continue\n        else:\n            return str(i + 1)\n    return \"0\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    students = [int(x) for x in stdin.split()]\n    x, y = [int(x) for x in stdin.split()]\n    students.sort()\n    return str(students[0]) if students[0] >= y - x + 1 else '0'\n\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, scores = stdin.split('\\n')\n    scores = list(map(int, scores.split(' ')))\n    x, y = list(map(int, stdin.split('\\n')[1].split(' ')))\n    scores.sort(reverse=True)\n    for i in range(len(scores)):\n        if x <= len(scores) and scores[i] - scores[i + 1] < y:\n            print(i + 1)\n            return\n    print(0)\n    return\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    passing = input().split()\n    classes = input().split()\n    range_ = input().split()\n    passing = list(map(int, passing))\n    classes = list(map(int, classes))\n    range_ = list(map(int, range_))\n    passing.sort()\n    classes.sort()\n    start = classes[0]\n    end = classes[-1]\n    if passing[0] < start or passing[-1] > end:\n        return '0'\n    result = []\n    for i in range(start, end+1):\n        result.append(i)\n    for i in range(len(passing)):\n        if passing[i] not in result:\n            result.append(passing[i])\n    print(result)\n    if len(result) < range_[0] or len(result) > range_[1]:\n        return '0'\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the minimum number of groups that can be formed by the given points \n    \"\"\"\n    points = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    x, y = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n    print(x, y)\n    # init the variable\n    res = 0\n    # traverse all points\n    for i in range(1, len(points)+1):\n        # if current point meets the requirement, then add to the result\n        if i < y:\n            res += 1\n        else:\n            # if current point can't be used, then the requirement cannot be met\n            break\n    # if the requirement can't be met, then return 0\n    if res < x:\n        return 0\n    # if the requirement can be met, then return the result\n    return res\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = [int(i) for i in stdin.split('\\n')]\n    n = max(k, x, y)\n    if n < 0 or n > 100:\n        print(0)\n    else:\n        print(n)"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split(\" \")[0])\n    s = stdin.split(\" \")[1]\n    x, y = map(int, stdin.split(\" \")[2:])\n    c = [int(c) for c in s.split(\" \")]\n    c.sort()\n    c.reverse()\n    m = sum(c) // 2 + 1\n    for i in range(m):\n        if sum(c[:i + 1]) < x:\n            continue\n        if sum(c[:i + 1]) > y:\n            break\n        if x <= sum(c[:i + 1]) <= y:\n            return str(i + 1)\n    return \"0\"\n\n\nsolution(input())\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    print(a*n+b*k)"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split(' '))\n\n    if n % k == 0:\n        return str(n * a + n // k * b)\n\n    count = 0\n    while n!= 1:\n        if n % k == 0:\n            n //= k\n            count += b\n        else:\n            n -= 1\n            count += a\n\n    return str(count)\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = stdin.split('\\n')\n    n, k, a, b = int(n), int(k), int(a), int(b)\n    l = 0\n    r = n\n    while l+1 < r:\n        m = (l+r)//2\n        if m % k == 0:\n            l = m\n        else:\n            r = m\n    # l = (m + m + 1) // 2\n    return l + a * (n - l - 1) + b * (l + 1)\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    a = min(n // k, A) + n % k // B + (n % k) % B\n    print(a)\n    return ''\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    k = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    n, k, a, b = int(stdin), int(stdin), int(stdin), int(stdin)\n    x = n\n    while (x%k!= 0):\n        x = x - 1\n        a = a - 1\n    print(a + b*(x//k))"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split(\"\\n\")[:4])\n    coins = 0\n    while n!= 1:\n        if n % k == 0:\n            n //= k\n            coins += B\n        else:\n            n -= 1\n            coins += A\n    return coins\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split('\\n')[:4])\n    \n    count = 0\n    \n    while n > 1:\n        count += min(b, a)\n        n = max(n - k, 0)\n        a, b = a + 2 * n, b + n\n    \n    return count\n    \n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Not solved\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = [int(x) for x in stdin.split()]\n    coins = 0\n    for i in range(n):\n        coins = coins + a\n        if (coins - b) % k!= 0:\n            coins += k - (coins - b) % k\n    return coins\nprint(solution(stdin))\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ops = 0\n    while n > 10:\n        if n % 2 == 0:\n            n //= 2\n            ops += 1\n        else:\n            n = int(n ** 0.5)\n            ops += 1\n    return str(n) + \" \" + str(ops)\n\n\ndef"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You must not modify the input and output format.\"\"\"\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        else:\n            n = n * 2\n        count += 1\n    return f\"{n}\\n{count}\"\n\n\ndef"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # in order to avoid problems with big numbers, we take 10^6 as the maximum value\n    # of the number, which is the maximum number that can be obtained after\n    # one or more operations\n    max_val = 10 ** 6\n    \n    # initialize the number of operations\n    operation_count = 0\n    \n    while n > 1:\n        # check if n is divisible by 2 and if it is, then add 1 to the count\n        if n % 2 == 0:\n            n //= 2\n            operation_count += 1\n        # check if n is divisible by 3 and if it is, then add 1 to the count\n        elif n % 3 == 0:\n            n //= 3\n            operation_count += 1\n        else:\n            # if n is not divisible by 2 or 3, then we need to apply the\n            # sqrt operation\n            n = int(n ** 0.5)\n            operation_count += 1\n            \n            # check if the resulting number is less than the maximum value\n            if n <= max_val:\n                max_val = n\n            \n    print(max_val, operation_count)\n    return None\n\nsolution(stdin)\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 10 ** 6:\n        n = int(sqrt(n))\n    return [n, n ** 2]\nprint(solution(input()))\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    min_num = math.floor(math.sqrt(N))\n    count = 0\n    while min_num > 1:\n        if N % min_num == 0:\n            count = count + math.floor(math.log(N, min_num))\n            N = N / min_num\n            min_num = math.floor(math.sqrt(N))\n        else:\n            min_num = min_num - 1\n\n    count = count + math.floor(math.log(N, min_num))\n    print(str(min_num) + \" \" + str(count))\n    return \"\"\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    cnt = 0\n    while n > 10:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        s += 1\n        cnt += 1\n    print(n, cnt)\n    return ''"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(int(stdin))\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    count = 0\n    while n > 10:\n        while n % 2 == 0:\n            count += 1\n            n = n / 2\n        while n % 3 == 0:\n            count += 1\n            n = n / 3\n        while n % 5 == 0:\n            count += 1\n            n = n / 5\n        count += 1\n        n = n / 10\n        count += 1\n    if n > 1:\n        count += 1\n    return str(n) +'' + str(count)\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stack = []\n    counter = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n            stack.append(\"mul\")\n        else:\n            n = (n * 3) + 1\n            stack.append(\"sqrt\")\n        counter += 1\n    return [n, counter]\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    hands = stdin.split(' ')[1]\n    score = 0\n    for i in range(n):\n        if i < k:\n            hands = hands\n        else:\n            hands = ''.join(sorted(hands))\n        if hands == 'rr':\n            score += (k * 10) - i\n            break\n        elif hands == 'pp':\n            score += (k * 10) - i\n            break\n        elif hands =='ss':\n            score += (k * 10) - i\n            break\n        else:\n            score += (k * 10) - i\n            if hands[0] == 'r':\n                hands = hands[1:]\n            elif hands[0] =='s':\n                hands = hands[2:]\n            elif hands[0] == 'p':\n                hands = hands[3:]\n            else:\n                hands = hands[4:]\n    print(score)\n    return hands\n    # your code goes here"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    n, k = map(int, stdin.split(\" \"))\n    s = stdin.split(\"\\n\")[1]\n\n    arr = [s[i] for i in range(n)]\n    arr_s = sorted(set(arr))\n    dic = {arr_s[i]: i for i in range(len(arr_s))}\n\n    arr_n = [0] * n\n    for i in range(n):\n        s = arr[i]\n        arr_n[i] = dic[s]\n    print(arr_n)\n    print(dic)\n    dp = [[[0 for _ in range(3)] for _ in range(len(arr_s))] for _ in range(n)]\n    for i in range(n):\n        dp[i][0][0] = 1 if arr_n[i] == 0 else 0\n        dp[i][0][1] = 1 if arr_n[i] == 1 else 0\n        dp[i][0][2] = 1 if arr_n[i] == 2 else 0\n\n    for j in range(1, len(arr_s)):\n        for i in range(n):\n            if i < k - 1:\n                dp[i][j][0] = max(dp[i][j - 1][1], dp[i][j - 1][2])\n                dp[i][j][1] = max(dp[i][j - 1][0], dp[i][j - 1][2])\n                dp[i][j][2] = dp[i][j - 1][1] + dp[i][j - 1][0]\n            else:\n                dp[i][j][0] = max(dp[i][j - 1][1], dp[i][j - 1][2])\n                dp[i][j][1] = max(dp[i][j - 1][0], dp[i][j - 1][2])\n                dp[i][j][2] = max(dp[i][j - 1][1], dp[i][j - 1][0])\n    print(dp)\n    print(dp[0][-1])\n    return str(max(dp[0][-1]))\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    rsp = stdin[k+2:]\n    count = [0, 0, 0]\n    for i, c in enumerate(rsp):\n        if c == \"r\":\n            count[0] += i + 1\n        elif c == \"s\":\n            count[1] += i + 1\n        else:\n            count[2] += i + 1\n    return max(count[0], count[1], count[2])"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N, K = stdin.split()\n    N, K = int(N), int(K)\n    inp = stdin.splitlines()[1:]\n    score = 0\n    for i in range(N):\n        if i < K:\n            inp[i] = [inp[i][0], 0]\n        if inp[i][0] == 'r':\n            if inp[i][1] == 'p':\n                score += P\n            elif inp[i][1] =='s':\n                score += S\n            else:\n                score += R\n        elif inp[i][0] == 'p':\n            if inp[i][1] == 'r':\n                score += P\n            elif inp[i][1] =='s':\n                score += S\n            else:\n                score += R\n        elif inp[i][0] =='s':\n            if inp[i][1] == 'r':\n                score += S\n            elif inp[i][1] == 'p':\n                score += P\n            else:\n                score += R\n        else:\n            if inp[i][1] == 'p':\n                score += R\n            elif inp[i][1] =='s':\n                score += P\n            else:\n                score += S\n    return score\n\nT = \"rp\"\nN = 2\nK = 2\n\nT = \"rps\"\nN = 3\nK = 1\n\nT = \"ss\"\nN = 2\nK = 1\n\nT = \"rps\"\nN = 10\nK = 3\n\nT = \"rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Given a string that is N lines long with K characters on each line,\n    represent as a list of lines where each character is an element.\n    Return the maximum total score earned in the game.\n    (see Notes)\n    '''\n    # from collections import deque\n    # N, K = [int(x) for x in stdin.split('\\n')[:2]]\n    # lines = []\n    # for _ in range(N):\n    #     lines.append(deque(stdin.split('\\n')[2:]))\n    #     if len(lines[-1]) == K:\n    #         break\n    N, K = [int(x) for x in stdin.split('\\n')[:2]]\n    lines = [stdin.split('\\n')[2:][i:i+K] for i in range(0, N*K, K)]\n    hands = (''.join(lines[i][j] for j in range(K)) for i in range(N))\n    hands = [hand for hand in hands if len(set(hand)) == 3]\n    possible_hands = [''.join(hand) for hand in product('rsps', repeat=K)]\n    # print(possible_hands)\n    # possible_hands = [hand for hand in hands if all([hand[i]!= hand[i-1] for i in range(1,K)])]\n    print(hands)\n    # print(possible_hands)\n    return 0"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    T = stdin.split()[-1]\n    dp = [[0] * 3 for _ in range(N + 1)]\n    dp[0][0] = 0\n    dp[0][1] = 0\n    dp[0][2] = 0\n    for n in range(1, N + 1):\n        for k in range(K + 1):\n            if n - k < 0:\n                break\n            if n - k >= 0 and T[n - k] == \"r\":\n                dp[n][0] = max(dp[n - 1][0], dp[n - k - 1][1] + 1)\n            elif n - k >= 0 and T[n - k] == \"p\":\n                dp[n][1] = max(dp[n - 1][1], dp[n - k - 1][2] + 1)\n            elif n - k >= 0 and T[n - k] == \"s\":\n                dp[n][2] = max(dp[n - 1][2], dp[n - k - 1][0] + 1)\n    return dp[-1][0]\n    \nprint(solution(stdin))"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\"\"\"\n    # Convert the input into the data structure needed\n    # The if statement below will take care of the first line of the input\n    n, k = [int(x) for x in stdin.split()]\n    round_score = {}\n    if k > 0:\n        for _ in range(k):\n            r, p, s = stdin.split()\n            round_score[frozenset((r, p, s))] = 0\n    # The first line of input will always be the number of rounds\n    for _ in range(n):\n        hand = stdin\n        if hand in round_score:\n            round_score[hand] = 0\n            break\n        hands = []\n        for hand in round_score:\n            for r, p, s in zip(hand, hand[1:]):\n                hands.append((r, p, s))\n                hands.append((p, r, s))\n                hands.append((s, r, p))\n        round_score[hands[0]] += 1\n    for hand in round_score:\n        round_score[hand] *= 3\n    return max(round_score.values())\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\nr, s, p = map(int, sys.stdin.readline().split())\nt = sys.stdin.readline().strip()\n\nn_r, n_p, n_s = 0, 0, 0\nr_ = 0\ns_ = 0\np_ = 0\n\nfor i in range(N):\n    if t[i] == 'r':\n        n_r += 1\n    elif t[i] =='s':\n        n_s += 1\n    else:\n        n_p += 1\n    if i >= K and t[i - K] == 'r':\n        r_ += n_r * (p + s)\n        n_r = 0\n    elif i >= K and t[i - K] =='s':\n        s_ += n_s * (r + p)\n        n_s = 0\n    elif i >= K and t[i - K] == 'p':\n        p_ += n_p * (s + r)\n        n_p = 0\n\nprint(r_ + s_ + p_)\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    P, S, R = map(int, stdin.split()[1:])\n    T = stdin.split()[2:]\n    T = [t if t in \"rsp\" else t[0] for t in T]\n\n    ans = 0\n    for r, p, s, t in zip(R, P, S, T):\n        if t == \"r\":\n            ans += r\n        elif t == \"s\":\n            ans += s\n        else:\n            ans += p\n    for i in range(K, N):\n        if T[i] == T[i - K]:\n            ans -= T[i - K]\n        else:\n            ans += T[i]\n    return ans\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def play(stdin):\n        # machine = {'r': 0,'s': 1, 'p': 2}\n        machine = {'r': 1,'s': 2, 'p': 0}\n        score = {'r': 1,'s': 0, 'p': -1}\n        res = 0\n        N, K = map(int, stdin.split())\n        for i in range(N):\n            if i < K:\n                hand = stdin[i]\n            else:\n                hand = stdin[i - K + 1]\n            res += score[hand]\n            res += score[machine[hand]]\n        return res\n    return str(play(stdin))\n\nprint(solution(input()))\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split('\\n')[0].split())\n    if a == b == 1:\n        return 4\n    elif a == 2 and b == c == 1:\n        return 7\n    elif a == c == 1:\n        return 4\n    elif c == 1 and a == b == 2:\n        return 7\n    elif a == 2 and b == 1:\n        return 5\n    elif b == 1 and c == 2:\n        return 5\n    return 3\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    arr = [a, b, c]\n\n    return max_len(arr)\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # From the first example, the optimal string is \"baba\".\n    # The string consists of three pairs of consecutive letters \u2014 \"ba\" \"ba\" \"b\".\n    # The maximum length of the pair is 2.\n    \n    # From the second example, the optimal string is \"abababa\".\n    # The string consists of four pairs of consecutive letters \u2014 \"aa\" \"aa\" \"ab\" \"ab\" \"ba\" \"ba\" \"bb\".\n    # The maximum length of the pair is 2.\n    \n    # From the third example, the optimal string is \"bababababab\".\n    # The string consists of five pairs of consecutive letters \u2014 \"bba\" \"bb\" \"bb\" \"ba\" \"ba\" \"bb\" \"bb\" \"ab\" \"ab\".\n    # The maximum length of the pair is 2.\n    \n    # From the fourth example, the optimal string is \"ababab\".\n    # The string consists of six pairs of consecutive letters \u2014 \"a\" \"a\" \"ab\" \"ab\" \"ab\" \"ab\" \"aa\" \"aa\".\n    # The maximum length of the pair is 2.\n    \n    # The sum of the lengths of all the pairs is 7.\n    # Hence, the optimal string is \"baba\", which consists of four pairs of consecutive letters.\n    # The maximum length of the pair is 2.\n    \n    a, b, c = map(int, stdin.split())\n    return str(max(a, b, c) * 2 + (a + b + c) * 2)\n\n\n\"\"\""
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nfrom typing import List\n\nA, B, C = list(map(int, stdin.split()))\n\na, b, c = sorted([A, B, C])\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_s = 0\n    for i in range(c):\n        s = stdin.split()[i]\n        if a <= s.count('a') and b <= s.count('b'):\n            max_s = max(max_s, len(s))\n    return max_s\n\n\nprint(solution('2 1 2\\n3 5 2\\n1 1 1'))\nprint(solution('1000000000 1000000000 1000000000\\n2 1 2\\n3 5 2\\n1 1 1'))\nprint(solution('2 1 2\\n3 5 2\\n1 1 1'))\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    return str(int(a) + int(b) + int(c) - 2)\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    string_a = ''\n    string_b = ''\n    string_c = ''\n    count_a = 0\n    count_b = 0\n    count_c = 0\n    for i in range(a):\n        string_a += 'a'\n        count_a += 1\n    for i in range(b):\n        string_b += 'b'\n        count_b += 1\n    for i in range(c):\n        string_c += 'ab'\n        count_c += 2\n    max = 0\n    if count_a > 0 and count_b > 0:\n        max = count_a + count_b\n        if max > count_c:\n            max = count_c\n        else:\n            max = count_a + count_b\n    elif count_a > 0 and count_c > 0:\n        max = count_a + count_c\n        if max > count_b:\n            max = count_b\n        else:\n            max = count_a + count_c\n    elif count_b > 0 and count_c > 0:\n        max = count_b + count_c\n        if max > count_a:\n            max = count_a\n        else:\n            max = count_b + count_c\n    else:\n        max = count_a + count_b + count_c\n    return max\n\n\nsolution(\"2 1 2\")\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return a*c*max(b, c) + b*c*max(a, c) + a*b*max(a, b)\n\n\nprint(solution(\"1 1 1\")) # 4\nprint(solution(\"2 1 2\")) # 7\nprint(solution(\"3 5 2\")) # 11\nprint(solution(\"1000000000 1000000000 1000000000\")) # 4000000000\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(val) for val in stdin.split(\" \")]\n    marks = [int(val) for val in stdin.split(\" \")[k:]]\n    marks.sort()\n    if x > n * p:\n        return \"-1\"\n    res = []\n    left, right = 0, len(marks) - 1\n    while left <= right:\n        if x <= sum(marks[left:right + 1]) <= x + y * (right - left + 1):\n            return \" \".join(map(str, marks[:left] + marks[right + 1:]))\n        elif sum(marks[left:right + 1]) < x:\n            left += 1\n        else:\n            right -= 1\n    return \"-1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k, p, x, y = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.split()][k:]\n    arr.sort()\n    low = arr[int(n / 2)] if n % 2 == 1 else (arr[int(n / 2)] + arr[int(n / 2) - 1]) / 2\n    high = arr[-1] - arr[0]\n    if high <= y:\n        return \"-1\"\n    if low > y:\n        return \"-1\"\n    while sum(arr) + k * p < x:\n        arr.pop(0)\n    return \" \".join([str(i) for i in arr])\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(x) for x in stdin.split(' ')]\n    marks = [int(x) for x in stdin.split(' ')[k:]]\n\n    marks.sort()\n    total_marks = sum(marks)\n\n    if total_marks > x:\n        return '-1'\n\n    median = marks[(n + 1) // 2]\n    if median < y:\n        return '-1'\n\n    need_marks = []\n    for i, mark in enumerate(marks):\n        if mark < y and len(need_marks) == 0:\n            need_marks.append(mark)\n        elif mark >= y and len(need_marks) < k:\n            need_marks.append(mark)\n\n    return''.join([str(x) for x in need_marks])\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(i) for i in stdin.split()]\n    # print(n, k, p, x, y)\n    if k > n:\n        return '-1'\n    else:\n        marks = [int(i) for i in stdin.split()[1:]]\n        marks.sort()\n        # print(marks)\n        res = 0\n        for i in range(k, n):\n            if marks[i] < x or (y - 1) * p <= marks[i]:\n                return '-1'\n            else:\n                res += marks[i]\n        return str(res)\n\nprint(solution(\"5 3 5 18 4\"))"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(s) for s in stdin.split(\" \")]\n    marks = [int(s) for s in stdin.split(\" \")[k:]]\n    marks.sort()\n    if max(marks) < y:\n        return \"-1\"\n    elif sum(marks) + marks[0] > x:\n        return \"-1\"\n    else:\n        return \" \".join(str(a) for a in marks[:-1]) + \" \" + str(marks[-1])\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(s) for s in stdin.split()]\n    marks = [int(s) for s in stdin.split()][k:]\n    n = len(marks)\n\n    for i in range(n):\n        marks[i] %= p\n    marks.sort()\n\n    if sum(marks) <= x or (n + 1) // 2 < y:\n        return '-1'\n\n    for i in range(n):\n        marks[i] = (marks[i] + 1) % p\n\n    print(' '.join(str(i) for i in marks[:n - k]))\n\n    return''.join(str(i) for i in marks[:n - k])"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    if k == n:\n        return '0'\n    elif max(a) > x:\n        return '-1'\n    elif sum(a[:k]) > x:\n        return '-1'\n    else:\n        a = sorted(a[:k])\n        m = (n + 1) // 2\n        if len(a) % 2:\n            return str(a[m])\n        else:\n            return str(int((sum(a[m - 1:m + 1]) / 2)))\n\nn, k, p, x, y = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\nprint(*solution(input()))\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445\n    2. \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445\n    3. \u041d\u0430\u0439\u0442\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\n    4. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0443\n    5. \u0415\u0441\u043b\u0438 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u0435\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n    6. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 -1\n    \"\"\"\n   ..."
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    arr.sort()\n    median = arr[(n + 1) // 2 - 1]\n    medians = arr[(n + 1) // 2 - 1 : (n + 1) // 2 + 1]\n    medians.sort()\n    if sum(arr) < x or sum(arr) > x + n * p:\n        print(-1)\n    elif median < y:\n        print(n - k)\n    else:\n        print(\"-1\")\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(s) for s in stdin.split()]\n    if (n - k) * p <= x:\n        return '-1'\n    sorted_marks = sorted([int(s) for s in stdin.split()])\n    low_marks = []\n    high_marks = []\n    low_sum = 0\n    high_sum = 0\n    for i in range(k):\n        low_sum += sorted_marks[i]\n        high_sum += sorted_marks[n - 1 - i]\n        if low_sum > x:\n            break\n        if high_sum > x:\n            break\n        low_marks.append(sorted_marks[i])\n        high_marks.append(sorted_marks[n - 1 - i])\n    if len(low_marks) == 0:\n        low_marks.append(sorted_marks[0])\n    if len(high_marks) == 0:\n        high_marks.append(sorted_marks[n - 1])\n    low_median = 0\n    high_median = 0\n    if len(low_marks) % 2!= 0:\n        low_median = low_marks[(len(low_marks) - 1) // 2]\n    if len(high_marks) % 2!= 0:\n        high_median = high_marks[(len(high_marks) - 1) // 2]\n    if low_median < y:\n        return str(n - k) +'' + str(low_median)\n    if high_median < y:\n        return str(n - k) +'' + str(high_median)\n    return '-1'\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if all(stdin.count(i) >= stdin.count('n') for i in 'aeoui') else 'NO'\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"n\") < stdin.count(\"n\", 1) else \"NO\"\n\n'''\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower().replace('n', 'a')\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[1:]\n    for i in stdin:\n        result = []\n        is_berlanese = True\n        for letter in i:\n            if letter in 'aeiou':\n                result.append(letter)\n            elif letter in 'bcdfghjklmnpqrstvwxyz':\n                if len(result) and result[-1] == 'n':\n                    is_berlanese = False\n                    break\n                else:\n                    result.append(letter)\n            else:\n                is_berlanese = False\n                break\n        if is_berlanese:\n            print('YES')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if ''.join(stdin).split('n')[1] else 'NO'\n\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"codeforces\")\n    'NO'\n    >>> solution(\"ninja\")\n    'YES'\n    \"\"\"\n    # find all the indices where the letter is a vowel\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    indices = set()\n    for i, l in enumerate(stdin):\n        if l in vowels:\n            indices.add(i)\n\n    # find if there is any letter that goes after the consonant 'n'\n    for i in indices:\n        if stdin[i] == 'n':\n            continue\n        if stdin[i + 1] in vowels:\n            continue\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.lower()\n    vowels = set(\"aeiou\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    for index, letter in enumerate(string):\n        if index + 1 < len(string) and letter in consonants and string[index + 1] in vowels:\n            return \"NO\"\n        elif index + 1 < len(string) and letter in consonants and string[index + 1] in consonants:\n            continue\n        elif index + 1 < len(string) and letter in consonants and string[index + 1] in vowels:\n            return \"NO\"\n    return \"YES\"\n\"\"\"\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if all(i in \"aeuio\" for i in stdin) and \"n\" not in stdin else \"NO\"\n\"\"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ns = stdin\n\nflag = True\nfor i in s:\n    if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n        flag = True\n    else:\n        flag = False"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower().replace('n', '').replace('a', '').replace('o', '').replace('u', '').replace('e', '') == ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        g[a - 1].append(b - 1)\n        g[b - 1].append(a - 1)\n    \n    d = [0] * n\n    for i in range(n):\n        for j in g[i]:\n            d[i] += 1\n    dp = [[0] * 21 for _ in range(n)]\n    dp[0][d[0]] = 1\n    for i in range(1, n):\n        for j in range(21):\n            for k in range(21):\n                if j + k <= 21:\n                    dp[i][j + k] += dp[i - 1][j]\n                    dp[i][j + k] %= MOD\n        for j in g[i]:\n            d[i] += d[j]\n            d[i] %= 21\n            for k in range(21):\n                dp[i][k] += dp[j][k]\n                dp[i][k] %= MOD\n    \n    res = 0\n    for i in range(21):\n        res += dp[n - 1][i]\n        res %= MOD\n    return str(res)\n\n\n\n'''\n\nGiven two integers n and m. An array of n integers a1, a2, \u2026, an is called beautiful if the following conditions are met:\n\na1 is divisible by 2,\na2 is divisible by 3,\n...,\nan is divisible by m.\nGiven n and m, find the number of beautiful arrays.\n\n\n-----Explanation-----\n\nAn array is beautiful if and only if one side of it is divisible by 2, one side is divisible by 3,..., one side is divisible by m.\n\nIn other words, the array is beautiful if and only if it contains one side which is divisible by 2, one side which is divisible by 3,..., one side which is divisible by m.\n\nObviously, if m = 1, then the array is beautiful in any case because it contains one side, which is divisible by 1, no matter what other side it has.\n\nIf m > 1, then the array is beautiful if and only if it contains one side which is divisible by 2, and another side which is divisible by m.\n\nFor example, if m = 2, then the array is beautiful if and only if it contains one side which is divisible by 2, and two sides which are both divisible by 2.\n\nSo we use dynamic programming to solve this question.\n\nAt each step, we maintain a dp table of size m * n.\n\nAt each step, we will iterate through the array and maintain dp[i][j], where 0 <= i < m, 0 <= j < n, j - i + 1 = m.\n\nWe iterate through the array from left to right:\n\nAt the step i = 0, j = 0, we will add up dp[0][0].\nAt the step i = 0, j = 1, we will add up dp[0][1] + dp[1][0].\nAt the step i = 0, j = 2, we will add up dp[0][2] + dp[1][0] + dp[2][0].\nAt the step i = 0, j = 3, we will add up dp[0][3] + dp[1][0] + dp[2][0] + dp[3][0].\nAt the step i = 0, j = 4, we will add up dp[0][4] + dp[1][0] + dp[2][0] + dp[3][0] + dp[4][0].\nAt the step i = 0, j = 5, we will add up dp[0][5] + dp[1][0] + dp[2][0] + dp[3][0] + dp[4][0] + dp[5][0].\nAt the step i = 0, j = 6, we will add up dp[0][6] + dp[1][0] + dp[2][0] + dp[3][0] + dp[4][0] + dp[5][0] + dp[6][0].\nAt the step i = 0, j = 7, we will add up dp[0][7] + dp[1][0] + dp[2][0] + dp[3][0] + dp[4][0] + dp[5][0] + dp[6][0] + dp[7][0].\nAt the step i = 1, j = 0, we will add up dp[1][0].\nAt the step i = 1, j = 1, we will add up dp[1][0] + dp[0][1].\nAt the step i = 1, j = 2, we will add up dp[1][0] + dp[0][2] + dp[2][1].\nAt the step i = 1, j = 3, we will add up dp[1][0] + dp[0][3] + dp[3][1].\nAt the step i = 1, j = 4, we will add up dp[1][0] + dp[0][4] + dp[4][1].\nAt the step i = 1, j = 5, we will add up dp[1][0] + dp[0][5] + d"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given the input, create a graph and determine the maximum number of dominoes\n    Anadi can place on the edges of the graph\"\"\"\n    num_vertices, num_edges = list(map(int, stdin.split(' ')))\n    graph = create_graph(num_vertices, num_edges)\n    max_dominoes = 0\n    for v1 in range(num_vertices):\n        for v2 in range(v1 + 1, num_vertices):\n            if is_edge(graph, v1, v2):\n                max_dominoes = max(max_dominoes, is_edge(graph, v1, v2))\n    return str(max_dominoes)\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the max number of dominoes that anadi can place on the graph\n    \"\"\"\n    # get input\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    # graph\n    graph = defaultdict(set)\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    # print(graph)\n\n    # dominoes\n    dominoes = [False] * 21\n    for i in range(1, 7):\n        for j in range(i + 1, 7):\n            dominoes[i * j] = True\n    # print(dominoes)\n\n    # count\n    count = 0\n    for i in range(1, 7):\n        for j in range(i + 1, 7):\n            k = i * j\n            if dominoes[k]:\n                if j == 1:\n                    # vertically\n                    count += (n - 1) * (n - 2) // 2\n                elif j == n:\n                    # horizontally\n                    count += (n - 1) * (n - 2) // 2\n                else:\n                    # horizontally\n                    count += (n - 1) * (n - 2) // 2\n                    # vertically\n                    count += (n - 1) * (n - 2) // 2\n\n    # count\n    return count\n\n\ndef"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport itertools\n\ndef"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Take a graph in the input format, and return the number of dominoes which\n    Anadi can place on the edges of his graph.\n    '''\n    # Parse the input\n    num_vertices, num_edges = map(int, stdin.split())\n    edges = []\n    for line in stdin.split('\\n')[1:]:\n        a, b = map(int, line.split())\n        edges.append((a, b))\n\n    # We need to build an adjacency list for the graph\n    adjacency_list = [[] for _ in range(num_vertices)]\n    for a, b in edges:\n        adjacency_list[a - 1].append(b - 1)\n        adjacency_list[b - 1].append(a - 1)\n\n    # We can use a breadth-first search to figure out which dominoes are possible.\n    # We use a queue to keep track of things we should explore, and a set to\n    # keep track of what we've explored.\n    dominoes = 0\n    frontier = [0]\n    visited = set(frontier)\n\n    while frontier:\n        current = frontier.pop(0)\n        # We have to check all neighbors\n        for neighbor in adjacency_list[current]:\n            if neighbor not in visited:\n                # We only need to check for a half of a domino, and we only need\n                # to check the half that has the same number of dots.\n                domino_count = 0\n                for neighbor_neighbor in adjacency_list[neighbor]:\n                    if neighbor_neighbor == current:\n                        domino_count += 1\n                    elif neighbor_neighbor in visited:\n                        break\n                else:\n                    # We have a domino that we can place. Let's place it.\n                    frontier.append(neighbor)\n                    visited.add(neighbor)\n                # We always want to put the domino to the left.\n                if domino_count % 2 == 0:\n                    dominoes += 1\n                else:\n                    dominoes += 2\n\n    # Return the number of dominoes\n    return dominoes"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\"\"\""
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    arr = []\n    n, m = [int(i) for i in stdin.split(' ')]\n    for i in range(n):\n        arr.append(int(stdin.split(' ')[i]))\n    for j in range(m):\n        arr.append(int(stdin.split(' ')[j+n]))\n    arr.sort()\n    print(arr)\n    print(n, m)\n    ans = 0\n    for i in range(n+m):\n        if i<n:\n            ans += arr[i]\n        else:\n            ans -= arr[i]\n    return str(ans)\n    \n    \n    \n    \n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of points achievable by the second company, which is an old rivals.\n    \"\"\"\n    n, m = [int(c) for c in stdin.split()]\n    price = [int(c) for c in stdin.split()]\n    b = [int(c) for c in stdin.split()][1:]\n    res = 0\n    ans = []\n    for c in range(1, n + 1):\n        for j in range(1, c):\n            if j > b[c - 1]:\n                res += price[j - 1]\n            elif price[j - 1] > price[c - 1]:\n                res += price[j - 1]\n            else:\n                res += price[c - 1]\n        ans.append(res)\n        res = 0\n    return ans[-1]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    \n    \n\ndef"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    p = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n\n    s = set(range(1, n + 1))\n    ans = 0\n    for _ in range(m):\n        a = b.pop()\n        for i in range(1, n + 1):\n            if i not in s:\n                continue\n            if i == a:\n                ans += p[i - 1]\n                s.remove(i)\n                break\n            elif p[i - 1] > p[a - 1]:\n                s.remove(i)\n                break\n    return ans\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    def dfs(i, d):\n        if i == len(b):\n            return d\n        d += b[i]\n        if d >= a[i]:\n            d = a[i]\n        return dfs(i + 1, d)\n\n    return dfs(0, 0)\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    questions = list(map(int, stdin.readline().split()))\n    auction_questions = set(map(int, stdin.readline().split()))\n    # print(questions)\n    # print(auction_questions)\n    max_points = 0\n    questions_to_check = set(questions)\n    while len(questions_to_check) > 0:\n        # print(questions_to_check)\n        max_points_in_this_round = 0\n        for question in questions_to_check:\n            if question not in auction_questions:\n                continue\n            number_of_players_who_answered = 0\n            for player in auction_questions:\n                if question in questions[player - 1]:\n                    number_of_players_who_answered += 1\n            # print(number_of_players_who_answered)\n            if number_of_players_who_answered > max_points_in_this_round:\n                max_points_in_this_round = number_of_players_who_answered\n        # print(max_points_in_this_round)\n        if max_points_in_this_round == 0:\n            # print('break')\n            break\n        max_points += max_points_in_this_round * questions[questions.index(max(questions_to_check))]\n        # print(max_points)\n        questions_to_check.remove(max(questions_to_check))\n        # print(questions_to_check)\n    # print(max_points)\n    return str(max_points)\n\n\ndef"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function returns the answer to the problem\n    \"\"\"\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split(' '))\n    a = list(map(int, lines[1].split(' ')))\n    b = list(map(int, lines[2].split(' ')))\n    result = 0\n    while len(b)!= 0:\n        idx = b.index(min(b))\n        a[b[idx]] -= 1\n        b.remove(b[idx])\n        if a[b[idx]] >= b[idx]:\n            b.remove(b[idx])\n        else:\n            b[idx] = 10000\n        result += b[idx]\n    return str(result)\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    ans = 0\n    for i in range(n):\n        if a[i] <= b[i]:\n            ans += a[i]\n        else:\n            ans += b[i]\n    return ans\n\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    auctions = list(map(int, stdin.split()))\n\n    dp = [0]*(n+1)\n    dp[1] = prices[0]\n\n    for i in range(1, n):\n        dp[i+1] = max(dp[i], dp[i-1]+prices[i])\n\n    for i in range(m):\n        dp[auctions[i]] = max(dp[auctions[i]], dp[auctions[i]-1])\n\n    return dp[n]\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''returns the maximum possible points the R2 company can get if it plays optimally well'''\n    n, m = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n    auction = list(map(int, stdin.readline().split()))\n    scores = {i: 0 for i in range(n)}\n    #scores is the maximum possible points the R2 company can get if it plays optimally well\n    def updateScore(i: int, change: int):\n        nonlocal scores\n        scores[i] += change\n    #update score\n    def chooseQuestion(i: int):\n        nonlocal scores\n        if i in auction:\n            if scores[i] >= prices[i]:\n                updateScore(i, prices[i])\n            else:\n                updateScore(i, scores[i])\n        else:\n            updateScore(i, scores[i])\n    #iterate over the questions\n    for i in range(n):\n        chooseQuestion(i)\n    print(max(scores.values()))\n    return ''\nsolution(input())"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    problem_score = [500, 1000, 1500, 2000, 2500]\n    last_submit = [int(x) for x in stdin.split()]\n    num_of_wrong_submission = [int(x) for x in stdin.split()]\n    hack = [int(x) for x in stdin.split()]\n    final_score = []\n    for i in range(5):\n        if hack[1] == 0:\n            final_score.append(\n                max(0.3 * problem_score[i] * (1 - last_submit[i] / 250),\n                    (1 - last_submit[i] / 250) * problem_score[i] - 50 * num_of_wrong_submission[i]))\n        else:\n            final_score.append(\n                max(0.3 * problem_score[i] * (1 - last_submit[i] / 250),\n                    (1 - last_submit[i] / 250) * problem_score[i] - 50 * num_of_wrong_submission[i] + 100 * hack[0]))\n    return sum(final_score)\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = [int(i) for i in stdin.strip().split(\" \")]\n    w = [int(i) for i in stdin.strip().split(\" \")]\n    s = [int(i) for i in stdin.strip().split(\" \")]\n    return str(int((131 / 250) * (500 + 1000 + 1500 + 2000 + 2500) + 1000 * (s[0] + s[1] - 2 * (s[2] + s[3])) - 500 * (s[4] + s[5])))\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given a string and your task is to remove all vowels from the string.\n    Input Format\n    A single line containing a string S\n    Constraints\n    0 < len(S) <= 1000\n    Output Format\n    Print a single string denoting the string S without any vowels.\"\"\"\n    string = stdin.split()\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    return \"\".join([string[i] for i in range(len(string)) if string[i] not in vowels])\n\nprint(solution(input()))\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    a, b, c, d, e = [int(i) for i in stdin.split()]\n    res = 0\n    for i in range(5):\n        res += max(0.3 * max(a, b, c, d, e) - (1 - i/250) * max(a, b, c, d, e) - 50 * w[i], 0)\n    res += 100 * s[0] + 50 * (s[1] - s[0])\n    return res\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You want to calculate your final score.\n    Here are the scores you have earned on problems:\n    500\n    1000\n    1500\n    2000\n    2500\n    At the end of the contest, you will receive one more score, your total score. Your total score is calculated as follows:\n    If the maximum point value of a problem is x, and you submitted correctly at minute m but made w wrong submissions, then your score on that problem is max(0.3 x, (1 - 0.2m) x - 50w).\n    Your total score is the sum of your scores for each problem.\n    In addition, if you submitted correctly at minute m, then you get +100 points for each successful hack, and if you submitted incorrectly at minute m, then you get -50 points for each unsuccessful hack.\n    The total score of your contest is the sum of your total scores.\n    The total score of your contest will be an integer.\n    \"\"\"\n    problems = list(map(int, stdin.split()))\n    scores = list(map(int, stdin.split()))\n    hacks = list(map(int, stdin.split()))\n    score = 0\n    for i in range(len(problems)):\n        if scores[i] == 0:\n            score += problems[i]\n        else:\n            score += max(0.3 * problems[i], (1 - 0.2 * scores[i]) * problems[i] - 50 * hacks[i])\n    return score"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution for the given input.\n    \n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Solution to the given problem.\n    \"\"\"\n    \n    # Read from stdin\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    hs, hu = list(map(int, stdin.split()))\n    \n    # Calculate the score\n    scores = [500, 1000, 1500, 2000, 2500]\n    score = 0\n    for i in range(5):\n        score += scores[i] * (1 - m[i]/250)\n        if w[i] > 0:\n            score -= scores[i] * w[i]\n    if hs > 0:\n        score += 100\n    if hu > 0:\n        score -= 50\n    \n    # Return answer\n    return str(int(score))\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    return sum(max(0.3 * v, (1 - m[i] / 250) * v - 50 * w[i]) for i, v in enumerate(h)) + 100 * (h[0] + h[1]) - 50 * (h[2] + h[3])\n\"\"\"\n\n\ndef"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    res = []\n    for i in range(5):\n        if m[i] == 0:\n            res.append(h[i] * 100)\n        else:\n            res.append(max(0.3 * 500, ((1 - m[i] / 250) * 500 - 50 * w[i])))\n    return sum(res) + 1000"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = [int(i) for i in stdin.strip().split(' ')]\n    l, r = min(l, r), max(l, r)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if (i+j) % 2 == 0:\n                continue\n            if l <= r:\n                if j >= i:\n                    count += r-l\n                else:\n                    count += r-l+j-i+1\n            else:\n                if j < i:\n                    count += r-l\n                else:\n                    count += r-l+j-i+1\n    return str(count % (10**9+7))\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, L, R = map(int, stdin.split())\n    return str(sum((i * m + j) % 998244353 for i in range(n + 1) for j in range(m + 1)))\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the number of initial states that satisfy the conditions.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Solution to the problem.\n    \"\"\"\n\n    n, m, L, R = map(int, stdin.split())\n    low = 0\n    high = n*m\n    while low < high:\n        mid = (low + high) // 2\n        if check(mid, n, m, L, R):\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n\ndef"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n\n    return str(max(1, n * m - min(l, r) - max(l, r)))"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = [int(n) for n in stdin.split()]\n    res = [i for i in range(L, R + 1)]\n\n    return str(len(res))\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import numpy as np\n    stdin = stdin.split('\\n')\n    N, M, L, R = list(map(int, stdin[0].split()))\n\n    arr = np.array(list(map(int, stdin[1].split())))\n    arr = arr.reshape(N, M)\n\n    arr[arr >= L] = R\n    arr[arr <= R] = L\n\n    arr_list = arr.tolist()\n\n    ans = 0\n    for i in range(N):\n        for j in range(M):\n            ans += arr_list[i].count(arr_list[i][j]) - 1\n\n    return str(ans % (10 ** 9 + 3))\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, l, r) = [int(x) for x in stdin.split()]\n    a = [x for x in stdin.split()]\n    m1 = m2 = 0\n    for x in a:\n        if x == '0' or x == '1':\n            m1 = m1 + 1\n        if x == '2':\n            m2 = m2 + 1\n\n    res = 0\n    for x in range(l, r + 1):\n        for y in range(m1, m2 + 1):\n            if y == 1 and x > 1:\n                res = res + 1\n            if y == 2 and x > 1:\n                res = res + 2\n            if y > 2 and x > 1:\n                res = res + 4 * (y - 2)\n            if y > 2 and x == 1:\n                res = res + (y - 2)\n\n    print(res % (10 ** 9 + 7))\n    return res\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    rows = [stdin.split() for _ in range(n)]\n    cols = [stdin.split() for _ in range(n)]\n    res = \"Possible\"\n\n    # \u521d\u59cb\u5316\uff0c\u6bcf\u4e00\u884c\u7684\u9996\u4f4d\u90fd\u6709\u88ab\u63d2\u5165\u6570\u5b57\n    for row in rows:\n        row[0] = int(row[0])\n        for i in range(1, m):\n            row[i] = int(row[i]) + int(row[i - 1])\n    for col in cols:\n        col[0] = int(col[0])\n        for i in range(1, m):\n            col[i] = int(col[i]) + int(col[i - 1])\n    # print(rows, cols)\n\n    # \u6bcf\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6709\u88ab\u63d2\u5165\u6570\u5b57\n    for row in rows:\n        if not row[1:] == sorted(row[1:]):\n            res = \"Impossible\"\n            break\n    for col in cols:\n        if not col[1:] == sorted(col[1:]):\n            res = \"Impossible\"\n            break\n    print(res)\n    return res\n\n\ndef"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    matrix_a = [[int(c) for c in row.split(' ')] for row in stdin.split('\\n')[:n]]\n    matrix_b = [[int(c) for c in row.split(' ')] for row in stdin.split('\\n')[n:]]\n    assert len(matrix_a) == len(matrix_b) == n\n    assert len(matrix_a[0]) == len(matrix_b[0]) == m\n    for i in range(n):\n        for j in range(m):\n            if matrix_a[i][j] > matrix_b[i][j]:\n                matrix_b[i][j] = matrix_a[i][j]\n            elif matrix_a[i][j] < matrix_b[i][j]:\n                matrix_a[i][j] = matrix_b[i][j]\n\n    for row in matrix_a:\n        for num in row:\n            assert num <= 10**9\n\n    for row in matrix_b:\n        for num in row:\n            assert num <= 10**9\n\n    for i in range(n):\n        for j in range(m):\n            if matrix_a[i][j]!= matrix_b[i][j]:\n                return 'Impossible'\n\n    return 'Possible'\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(' ')]\n    matrix_a = [\n        [int(n) for n in stdin.split(' ')]\n        for i in range(n)\n    ]\n    matrix_b = [\n        [int(n) for n in stdin.split(' ')]\n        for i in range(n)\n    ]\n\n    def is_increasing(matrix: List[List[int]]) -> bool:\n        increasing = True\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if i == 0:\n                    if matrix[i][j] <= matrix[i + 1][j]:\n                        increasing = False\n                else:\n                    if matrix[i][j] <= matrix[i - 1][j]:\n                        increasing = False\n\n        for j in range(len(matrix[i])):\n            if j == 0:\n                if any(matrix[i][j] <= matrix[i][j + 1] for i in range(len(matrix))):\n                    increasing = False\n            else:\n                if any(matrix[i][j] <= matrix[i][j - 1] for i in range(len(matrix))):\n                    increasing = False\n\n        return increasing\n\n    if is_increasing(matrix_a) and is_increasing(matrix_b):\n        print('Possible')\n    else:\n        print('Impossible')"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.splitlines()[0].split(' ')\n    matrix_1 = list()\n    for i in range(1, int(line1[0]) + 1):\n        matrix_1.append(list(map(int, stdin.splitlines()[i].split(' '))))\n    line2 = stdin.splitlines()[int(line1[0]) + 1].split(' ')\n    matrix_2 = list()\n    for i in range(1, int(line2[0]) + 1):\n        matrix_2.append(list(map(int, stdin.splitlines()[int(line1[0]) + 1 + i].split(' '))))\n    #matrix_1 = [[1, 3], [2, 4], [5, 10]]\n    #matrix_2 = [[3, 1], [4, 5], [6, 8]]\n    def check(matrix):\n        for row in matrix:\n            for i in range(len(row) - 1):\n                if row[i] > row[i + 1]:\n                    return False\n        return True\n    def swap(matrix_1, matrix_2, i1, j1, i2, j2):\n        temp = matrix_1[i1][j1]\n        matrix_1[i1][j1] = matrix_2[i2][j2]\n        matrix_2[i2][j2] = temp\n        return matrix_1, matrix_2\n    def check_row(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i]) - 1):\n                if matrix[i][j] > matrix[i][j + 1]:\n                    return False\n        return True\n    def check_col(matrix):\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i]) - 1):\n                if matrix[j][i] > matrix[j + 1][i]:\n                    return False\n        return True\n    #matrix_1 = [[1, 3], [2, 4], [5, 10]]\n    #matrix_2 = [[3, 1], [4, 5], [6, 8]]\n    for i1 in range(len(matrix_1)):\n        for j1 in range(len(matrix_1[i1])):\n            for i2 in range(len(matrix_2)):\n                for j2 in range(len(matrix_2[i2])):\n                    if matrix_1[i1][j1] == matrix_2[i2][j2]:\n                        matrix_1, matrix_2 = swap(matrix_1, matrix_2, i1, j1, i2, j2)\n                        if check(matrix_1) and check_col(matrix_1) and check_row(matrix_2):\n                            return 'Possible'\n                        matrix_1, matrix_2 = swap(matrix_1, matrix_2, i1, j1, i2, j2)\n    return 'Impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Impossible' if matrix A and B can't be made equal.\"\"\"\n    return \"Impossible\" if [\n        int(line.split()[j])\n        for i in range(int(stdin.split()[0]))\n        for j in range(int(stdin.split()[1]))\n        if int(stdin.split()[2 + j]) >= int(stdin.split()[3 + j])\n        or int(stdin.split()[3 + j]) >= int(stdin.split()[4 + j])\n    ] else \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"Impossible\" or \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [[int(x) for x in line.split(' ')] for line in stdin.split('\\n')[:n]]\n    b = [[int(x) for x in line.split(' ')] for line in stdin.split('\\n')[n:]]\n\n    # if the first row is not strictly increasing, return impossible\n    if not all(a[0][i] <= a[0][i+1] for i in range(m - 1)):\n        return \"Impossible\"\n\n    for j in range(m):\n        # if the first column is not strictly increasing, return impossible\n        if not all(a[i][0] <= a[i+1][0] for i in range(n - 1)):\n            return \"Impossible\"\n\n    # if the second row is not strictly increasing, return impossible\n    if not all(b[0][i] <= b[0][i+1] for i in range(m - 1)):\n        return \"Impossible\"\n\n    # if the second column is not strictly increasing, return impossible\n    if not all(b[i][0] <= b[i+1][0] for i in range(n - 1)):\n        return \"Impossible\"\n\n    return \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    matrix1 = [list(map(int, stdin.split())) for _ in range(n)]\n\n    matrix2 = [list(map(int, stdin.split())) for _ in range(n)]\n\n    matrix1 = sorted(matrix1)\n    matrix2 = sorted(matrix2)\n    for i in range(n):\n        if matrix1[i] > matrix2[i]:\n            return \"Impossible\"\n\n    return \"Possible\""
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 2 5')\n    11\n    >>> solution('3 1 5')\n    3\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    return max([(10**9+1) * [0, 1][sum(map(lambda x: x <= i, a)) <= a[i]], n][::-1])\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the longest string with distinct counts for each character.\"\"\"\n    pass\n\"\"\"\nn = int(input())\nnumbers = list(map(int, input().split()))\nnumbers.sort()\n\nstart = 0\nend = numbers[-1] + 1\n\nmax_num = 0\n\nwhile start <= end:\n    current_sum = sum(list(filter(lambda x: x <= end, numbers)))\n    if current_sum <= max_num:\n        end -= 1\n    else:\n        max_num = current_sum\n        start += 1\n\nprint(max_num)\n\"\"\"\n\"\"\"\n--- 2nd solution ---\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    A = [a[i] for i in range(n) if a[i] > 0]\n    A.sort(reverse=True)\n    total = 0\n    i = 0\n    while i < n:\n        if total + A[i] > total + A[i] - 1:\n            total += A[i]\n            i += 1\n        else:\n            total += A[i] - 1\n            i += 2\n    return total + 1\n\nassert solution(\"3 1 1 2\") == 3\nassert solution(\"3 1 1 2 3 5 5\") == 6\nassert solution(\"3 1 1 2 3 5 5 6\") == 7\nassert solution(\"3 1 1 2 3 5 5 6 7\") == 8\nassert solution(\"3 1 1 2 3 5 5 6 7 8\") == 9\nassert solution(\"3 1 1 2 3 5 5 6 7 8 9\") == 10\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    alphabet_len = int(stdin[0])\n    frequency = list(map(int, stdin[1].split()))\n    # print(frequency)\n    letters = {}\n    for i in range(alphabet_len):\n        letters[i] = frequency[i]\n    # print(letters)\n    letters_count = {}\n    for key in letters.keys():\n        letters_count[key] = letters[key]\n        if letters[key] in letters_count:\n            letters_count[key] = letters_count[letters[key]] + 1\n    # print(letters_count)\n    letters_count = sorted(letters_count.items(), key=lambda x: x[1], reverse=True)\n    # print(letters_count)\n    letters_count_len = len(letters_count)\n    current_letter = 0\n    max_len = 0\n    max_letter = 0\n    for i in range(letters_count_len):\n        if letters_count[i][1] > current_letter:\n            max_letter = letters_count[i][0]\n            current_letter = letters_count[i][1]\n            max_len += 1\n    print(max_len)\n    return \"\"\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the longest substring of alphabet, where each letter occurs no more than it's limit\"\"\"\n    n = int(stdin.readline())\n    alphabet = sorted(list(map(int, stdin.readline().split())))\n    alphabet = [chr(a) for a in range(ord(\"a\"), ord(\"a\") + n)]\n    best_s = \"\"\n    best_len = 0\n    for i, l in enumerate(alphabet):\n        s = \"\"\n        l_count = 1\n        for j, k in enumerate(alphabet[i+1:]):\n            if k < l:\n                break\n            elif k == l:\n                l_count += 1\n            else:\n                s += str(l_count) + l\n                l = k\n                l_count = 1\n        s += str(l_count) + l\n        s_len = len(s)\n        if s_len > best_len:\n            best_len = s_len\n            best_s = s\n    return best_s\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = list(map(int, stdin.readline().split()))\n    opt = [1] + [0] * sum(count)\n    for i in range(1, n + 1):\n        for j in range(count[i - 1] + 1):\n            opt[i + j] = max(opt[i + j], opt[i - 1] + 1)\n    return opt[n]\n    \n\"\"\""
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # raise NotImplementedError()\n\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    max_len = 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n        max_len = max(max_len, dp[i])\n    \n    return max_len\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    counts = list(map(int, lines[1].split()))\n    return 'abc'[len(set(counts)):]\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    c = 0\n    for i in range(n):\n        c += a[i] // 2\n    return c - k\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    n_sum = 0\n    for i in range(n):\n        n_sum += a[i] // 2\n    n_sum += k\n    return str(n_sum)\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    count = 0\n    while count < n:\n        d = k\n        for i in range(n):\n            d = min(d, a[i] // 2)\n        count += d\n        ans += 1\n        for i in range(n):\n            a[i] -= d * 2\n    return str(ans)\n    \n    \n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    s = 0\n    for i in range(len(a)):\n        s = max(a[i] // 2, s)\n    return min(n - (k - s), k)\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # \ud480\uc774 \uc2dc\uc791\n    # \ubaa8\ub4e0 \uc810\uc218\ub97c \ub2e4 \uc4f0\uc9c0 \uc54a\uc558\uc73c\uba74 3\ubc88 \uc810\uc218\ub97c \uc4f8\uc218 \uc788\uc74c\n    # \ubaa8\ub4e0 \uc810\uc218\ub97c \uc4f0\uc9c0 \uc54a\uc558\uc73c\uba74 k\ubc88 \uc810\uc218\ub97c \uc4f8\uc218 \uc788\uc74c\n    # \uc810\uc218\ub97c \uc4f4 \ud69f\uc218\ub97c \uc800\uc7a5\ud560 \ubc30\uc5f4\n    solve_count = [0] * 100010\n    stdin = stdin.split('\\n')\n    n, k = map(int, stdin[0].split(' '))\n    nums = list(map(int, stdin[1].split(' ')))\n    # \uc810\uc218\ub97c \uc4f4 \ud69f\uc218\n    # \ub9cc\uc57d \uc810\uc218\ub97c \uc4f4 \ud69f\uc218\uac00 k\ubcf4\ub2e4 \uc791\uc740 \uacbd\uc6b0\n    # \uadf8 \uc810\uc218\ub294 \uc4f4 \ud69f\uc218\ub97c \uc81c\uc678\ud55c k-\uc810\uc218\ubcf4\ub2e4 \uc791\uc544\uc57c \uc4f8 \uc218 \uc788\uc74c\n    # \uc810\uc218\ub97c \uc4f4 \ud69f\uc218\ub97c \ud574\uc11c k\ubc88 \ubc18\ubcf5\n    # \uac00\uc7a5 \uc810\uc218\uac00 \ud070 \uc810\uc218\ub97c \ubf51\uace0 \uadf8 \uc810\uc218\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0\ub97c \uc810\uc218\ub97c \uc4f4 \ud69f\uc218\ub85c \uc138\uc57c\ud568\n    for num in nums:\n        solve_count[num] += 1\n        k -= num\n        if k <= 0:\n            break\n    # \uac00\uc7a5 \uc810\uc218\uac00 \ud070 \uc810\uc218\ub97c \ubf51\uc74c\n    # k\ubcf4\ub2e4 \uc791\uc740 \uc810\uc218 \uc911 \uac00\uc7a5 \ud070 \uc810\uc218\n    k = max(k, 0)\n    # \ubaa8\ub4e0 \uc810\uc218\ub97c \uc4f4 \ud69f\uc218\uc5d0\uc11c k\ubc88 \ubc18\ubcf5\n    # k\ubc88 \ubc18\ubcf5\uc774 \ub05d\ub098\uba74 \ub0a8\uc740 \uc810\uc218\ub97c \ubaa8\ub450 \uc4f4 \ud69f\uc218\uc5d0\uc11c \ucc28\uac10\n    # \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 k\ubc88 \ubc18\ubcf5\uc744 \ub9c8\uce68\n    while k > 0:\n        # k\ubc88 \ubc18\ubcf5\ub9c8\ub2e4 \ubaa8\ub4e0 \uc810\uc218\ub97c \uc4f4 \ud69f\uc218\uc5d0\uc11c \ucc28\uac10\n        for i in range(100010):\n            if solve_count[i]:\n                solve_count[i] -= 1\n                k -= 1\n                if k == 0:\n                    break\n    print(sum(solve_count))\n\n\uc544\ub798 \ucf54\ub4dc\ub294 \uc624\ub958\ub85c \uc2dc\uac04\ucd08\uacfc\ub428\nsolve_count = [0] * 100010\nstdin = stdin.split('\\n')\nn, k = map(int, stdin[0].split(' '))\nnums = list(map(int, stdin[1].split(' ')))\nk_min = 100000\nfor num in nums:\n    solve_count[num] += 1\n    k -= num\n    if k < k_min:\n        k_min = k\n        solve_count = [0] * 100010\n    if k <= 0:\n        break\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nnum, max_diff = map(int, stdin.split())\n\na = list(map(int, stdin.split()))\n\ns = set()\n\nfor i in range(num):\n    s.add(a[i] // 2)\n\ns = list(s)\ns.sort()"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = sorted([int(x) for x in stdin.split()])\n    if k >= arr[-1] or n == 0:\n        return 0\n    for i in range(n):\n        if k >= arr[i] + arr[n - 1] / 2:\n            k -= arr[i]\n        else:\n            k += arr[n - 1] - (arr[i] * 2)\n            break\n    return n - i\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum number of problems he should solve on other judges to solve all chosen problems on Decoforces.\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    array = [int(x) for x in stdin.split()]\n    array.sort()\n    for i in range(k, max(array) + 1):\n        if array[0] % 2 == 0 and array[0] >= i:\n            break\n        if array[0] % 2!= 0 and array[0] >= i:\n            k += 1\n            break\n        if i % 2 == 0 and array[0] >= i:\n            k += 1\n            break\n    return k\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    if n * k > sum(A):\n        return 'Impossible'\n    return k - min(A) // 2 + 1\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\n    find minimum number of students in each level\n    1st min -> number of students in first min\n    2nd min -> number of students in second min\n    3rd min -> number of students in third min\n    get max of each level\n    find max of the 3rd min\n    output\n    1st min, 2nd min, 3rd min\n    \"\"\"\n    n, m1, m2, m3 = map(int, stdin.split())\n    x1, x2, x3 = map(int, stdin.split())\n    #print(n, m1, m2, m3)\n    #print(x1, x2, x3)\n    a, b, c = 0, 0, 0\n    if x1 >= m1:\n        a = m1\n    elif x1 <= m1:\n        a = x1\n    if x2 >= m2:\n        b = m2\n    elif x2 <= m2:\n        b = x2\n    if x3 >= m3:\n        c = m3\n    elif x3 <= m3:\n        c = x3\n\n    if a == 0 and b == 0 and c == 0:\n        return a, b, c\n    elif b == 0 and c == 0:\n        if a >= m1:\n            return m1, 0, 0\n        elif a < m1:\n            return a, m1, 0\n    elif c == 0:\n        if a >= m1 and b >= m2:\n            return m1, m2, 0\n        elif a >= m1 and b < m2:\n            return m1, b, m2\n        elif a < m1 and b >= m2:\n            return a, m2, m1\n        elif a < m1 and b < m2:\n            return a, b, m1\n    return a, b, c\n\ndef"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m1, m2, m3 = map(int, stdin.readline().split())\n    total = sum([i for i in range(m1, m2 + 1)])\n    i = 0\n    while i < n:\n        total += (m3 - m2) * (m1 - m2 + 1) // 2\n        m2 = m3\n        i += m1 - m2 + 1\n    return str(total - (m3 - m2) * (m1 - m2 + 1) // 2 + (m3 - m2) * (m1 - m2 + 1) // 2)\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m1, m2, m3 = list(map(int, stdin.split()))\n    print(n - m1 - m2 - m3)\n    print(m1 - m2 + m3)\n    print(m2 - m3)\n\nsolution(input())\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 2\\n2 2\\n2 2\")\n    '2 2 2'\n    \"\"\"\n    n = int(stdin)\n    min_1, max_1 = map(int, stdin.split()[1:3])\n    min_2, max_2 = map(int, stdin.split()[4:6])\n    min_3, max_3 = map(int, stdin.split()[7:9])\n    sum_1 = min_1 + max_1\n    sum_2 = min_2 + max_2\n    sum_3 = min_3 + max_3\n    sum_1_2 = min_1 + max_2\n    sum_1_3 = min_1 + max_3\n    sum_2_3 = min_2 + max_3\n    if max_2 <= min_2 or max_3 <= min_3:\n        return str(sum_1) + \" \" + str(sum_2) + \" \" + str(sum_3)\n    if max_2 <= min_2 or max_1 <= min_1:\n        return str(sum_1) + \" \" + str(sum_2) + \" \" + str(sum_3)\n    if max_3 <= min_3 or max_2 <= min_2:\n        return str(sum_1) + \" \" + str(sum_2) + \" \" + str(sum_3)\n    if max_2 <= min_2:\n        return str(sum_1) + \" \" + str(sum_2_3) + \" \" + str(sum_3)\n    if max_3 <= min_3:\n        return str(sum_1) + \" \" + str(sum_2_3) + \" \" + str(sum_3)\n    if max_1 <= min_1:\n        return str(sum_1_2) + \" \" + str(sum_2) + \" \" + str(sum_3)\n    if max_2 <= min_2:\n        return str(sum_1_2) + \" \" + str(sum_2_3) + \" \" + str(sum_3)\n    if max_3 <= min_3:\n        return str(sum_1_2) + \" \" + str(sum_2_3) + \" \" + str(sum_3)\n    return str(sum_1_2) + \" \" + str(sum_2) + \" \" + str(sum_3)\n    "
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    min_1, max_1, min_2, max_2, min_3, max_3 = [int(x) for x in stdin.split()]\n    min_1_sum, min_2_sum, min_3_sum = min_1, min_2, min_3\n    min_1_sum_2, min_2_sum_2, min_3_sum_2 = min_1, min_2, min_3\n    for i in range(1,n):\n        #sum_1_2 = sum_2_2 = sum_3_2 = 0\n        #num_1_2 = num_2_2 = num_3_2 = 0\n        #sum_1_3 = sum_2_3 = sum_3_3 = 0\n        #num_1_3 = num_2_3 = num_3_3 = 0\n        if(max_1 - min_1_sum <= max_2 - min_2_sum and max_2 - min_2_sum <= max_3 - min_3_sum):\n            min_1_sum_2 = min_1_sum\n            min_2_sum_2 = min_2_sum\n            min_3_sum_2 = min_3_sum\n            min_1_sum = min_1 + min_2\n            min_2_sum = min_2 + min_3\n            min_3_sum = min_3 + max_1\n            min_1_sum_3 = min_1_sum_2\n            min_2_sum_3 = min_2_sum_2\n            min_3_sum_3 = min_3_sum_2\n            min_1_sum_2 = min_1_sum_2 + min_2\n            min_2_sum_2 = min_2_sum_2 + min_3\n            min_3_sum_2 = min_3_sum_2 + max_1\n            min_1_sum_3 = min_1_sum_2\n            min_2_sum_3 = min_2_sum_2\n            min_3_sum_3 = min_3_sum_2\n            min_1_sum_2 = min_1_sum_2 + min_2\n            min_2_sum_2 = min_2_sum_2 + min_3\n            min_3_sum_2 = min_3_sum_2 + max_1\n            min_1_sum_3 = min_1_sum_2\n            min_2_sum_3 = min_2_sum_2\n            min_3_sum_3 = min_3_sum_2\n            min_1_sum_2 = min_1_sum_2 + min_2\n            min_2_sum_2 = min_2_sum_2 + min_3\n            min_3_sum_2 = min_3_sum_2 + max_1\n        elif(max_2 - min_2_sum <= max_3 - min_3_sum):\n            min_1_sum_2 = min_1_sum\n            min_2_sum_2 = min_2_sum\n            min_3_sum_2 = min_3_sum\n            min_1_sum = min_1 + min_2\n            min_2_sum = min_2 + min_3\n            min_3_sum = min_3 + max_2\n            min_1_sum_3 = min_1_sum_2\n            min_2_sum_3 = min_2_sum_2\n            min_3_sum_3 = min_3_sum_2\n            min_1_sum_2 = min_1_sum_2 + min_2\n            min_2_sum_2 = min_2_sum_2 + min_3\n            min_3_sum_2 = min_3_sum_2 + max_2\n            min_1_sum_3 = min_1_sum_2\n            min_2_sum_3 = min_2_sum_2\n            min_3_sum_3 = min_3_sum_2\n            min_1_sum_2 = min_1_sum_2 + min_2\n            min_2_sum_2 = min_2_sum_2 + min_3\n            min_3_sum_2 = min_3_sum_2 + max_2\n            min_1_sum_3 = min_1_sum_2\n            min_2_sum_3 = min_2_sum_2\n            min_3_sum_3 = min_3_sum_2\n            min_1_sum_2 = min_1_sum_2 + min_2\n            min_2_sum_2 = min_2_sum_2 + min_3\n            min_3_sum_2 = min_3_sum_2 + max_2\n        else:\n            min_1_sum_2 = min_1_sum\n            min_2_sum_2 = min_2_sum\n            min_3_sum_2 = min_3_sum\n            min_1_sum = min_1 + min_2\n            min_2_sum = min_2 + min_3\n            min_3_sum = min_3 + max_3\n            min_1_sum_3 = min_1_sum_2"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of diplomas of the first, second and third degrees that each student will receive\"\"\"\n    input = stdin.split(\"\\n\")\n    count_students = int(input[0])\n    min_first = int(input[1].split()[0])\n    max_first = int(input[1].split()[1])\n    min_second = int(input[2].split()[0])\n    max_second = int(input[2].split()[1])\n    min_third = int(input[3].split()[0])\n    max_third = int(input[3].split()[1])\n\n    first_degree = count_students // min_first if count_students % min_first == 0 else count_students // min_first + 1\n    second_degree = count_students // min_second if count_students % min_second == 0 else count_students // min_second + 1\n    third_degree = count_students // min_third if count_students % min_third == 0 else count_students // min_third + 1\n    return f\"{first_degree} {second_degree} {third_degree}\"\n\n\"\"\"\nn = int(input())\nmin_1, max_1 = int(input().split()[0]), int(input().split()[1])\nmin_2, max_2 = int(input().split()[0]), int(input().split()[1])\nmin_3, max_3 = int(input().split()[0]), int(input().split()[1])\n\nnum_students_1 = min_1 * n // min_1\nnum_students_2 = min_2 * n // min_2\nnum_students_3 = min_3 * n // min_3\nnum_students = min(num_students_1, num_students_2, num_students_3)"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m1, m2, m3 = stdin.split()\n    n, m1, m2, m3 = int(n), int(m1), int(m2), int(m3)\n    min1 = m1\n    max1 = m1 + m2 + m3\n    min2 = m2\n    max2 = m2 + m3\n    min3 = m3\n    max3 = m3\n    max1_m2 = m2 - m1\n    max2_m3 = m3 - m2\n    max3_m1 = m1 - m3\n    max1_m2_max2 = m2 - m1\n    max1_m2_max3 = m3 - m1\n    max2_m3_max1 = m1 - m2\n    max2_m3_max3 = m3 - m2\n    max3_m1_max1 = m1 - m3\n    max3_m1_max2 = m2 - m3\n    max1_m2_min3 = m2 - m1\n    max2_m3_min1 = m3 - m2\n    max1_m2_min2 = m3 - m1\n    max3_m1_min2 = m2 - m3\n    max1_min2_max2 = m3 - m1\n    max2_min1_max3 = m1 - m2\n    max1_min2_max3 = m2 - m1\n    max2_min3_max1 = m2 - m3\n    min1_max2_min3 = m3 - m1\n    min2_max1_min3 = m1 - m2\n    min1_max3_min2 = m2 - m1\n    min1_min3_max2 = m2 - m1\n    min2_max3_min1 = m1 - m2\n    min1_max3_min2 = m2 - m1\n    min1_min2_max3 = m3 - m1\n    min2_min3_max1 = m1 - m2\n    min3_min1_max2 = m2 - m3\n    min1_min2_max3 = m3 - m1\n    min1_max2_min3 = m2 - m1\n    min2_min3_max1 = m1 - m2\n    min1_max3_min2 = m3 - m1\n    min1_max1_max2 = m2 - m1\n    min1_max2_max3 = m3 - m1\n    min1_max3_max1 = m2 - m1\n    min1_max3_max2 = m3 - m1\n    min2_min1_max3 = m3 - m2\n    min2_max3_max1 = m1 - m2\n    min2_max1_max3 = m3 - m2\n    min2_max3_max2 = m2 - m3\n    min3_min1_max2 = m2 - m3\n    min1_min2_max3 = m3 - m1\n    min2_min3_max1 = m1 - m2\n    min1_min3_max2 = m2 - m1\n    min1_max2_min3 = m3 - m1\n    min3_max1_max2 = m2 - m3\n    min1_max1_min3 = m3 - m1\n    min1_max3_min2 = m2 - m1\n    min1_max2_min3 = m3 - m1\n    min2_min3_max1 = m1 - m2\n    min1_min2_max3 = m3 - m1\n    min1_min3_max2 = m2 - m1\n    min2_max1_min3 = m3 - m2\n    min1_min3_min2 = m2 - m1\n    min1_max1_max2 = m3 - m1\n    min2_max1_min3 = m1 - m2\n    min1_max2_max3 = m2 - m1\n    min1_max1_max3 = m3 - m1\n    min1_max3_max2 = m2 - m1\n    min1_max3_max1 = m3 - m1\n    min2_max2_min3 = m1 - m2\n    min1_max2_min3 = m3 - m1\n    min2_max3_max1 = m1 - m2\n    min1_max3_max2 = m2 - m1\n    min1_max1_min3 = m3 - m1\n    min2_max1_min3 = m3 - m2\n    min1_max2_min3 = m2 - m1\n    min1_min3_max2 = m3 - m1\n    min1_max2_max3 = m3 - m1\n    min1_max3_min2 = m2 - m1\n    min1_min2_max3 = m2 - m1\n    min2_max1_max3 = m2 - m1\n    min1_max1_max2 = m3 - m1\n    min2_max3_max1 = m2 - m3\n    min1_min3_max2 = m3 - m1\n    "
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = (int(x) for x in stdin.split())\n    a, b, c = min(a, b, c), max(a, b, c), sum((a, b, c))\n    if a >= c:\n        return''.join(str(x) for x in (a, 0, 0))\n    if b <= c:\n        return''.join(str(x) for x in (0, b, 0))\n    return''.join(str(x) for x in (0, 0, c))\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, min1, max1, min2, max2, min3, max3 = [int(i) for i in stdin.split()]\n    return str(min(min1, max1, (max1+max2-min2)//2)) + \" \" + str(min(min2, max2, (max2+max3-min3)//2)) + \" \" + str(min(min3, max3, (max3+n-min3)//2))\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I'll take the input and split it up into a list of integers. Then I'll use an\n    iteration to iterate over the list and determine whether the current index is\n    greater than the previous index. This will be true for any index where the\n    current index is less than the previous index. Then I'll check if the first\n    index is greater than the second index. If the first index is greater than the\n    second index, then I'll return UP, if the second index is greater than the\n    first index, then I'll return DOWN, and if they're equal, then I'll return\n    -1.\n    \"\"\"\n    # Split the input up by newlines and convert it to an integer list.\n    stdin = stdin.strip().split(\"\\n\")\n    stdin = [int(stdin[i]) for i in range(len(stdin))]\n\n    # Initialize a list to store the output.\n    output = []\n\n    # Iterate over the list.\n    for i in range(len(stdin) - 1):\n        # If the current index is less than the previous index, then the next\n        # index will be greater than the current index, so we'll return UP.\n        if stdin[i] < stdin[i + 1]:\n            output.append(\"UP\")\n\n            # If the current index is greater than the previous index, then the\n        # next index will be less than the current index, so we'll return DOWN.\n        elif stdin[i] > stdin[i + 1]:\n            output.append(\"DOWN\")\n\n            # If the current index is equal to the previous index, then there's no\n        # way to know whether it's going to be greater than or less than the\n        # previous index, so we'll return -1.\n        else:\n            output.append(\"-1\")\n\n    # Return the output.\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(x) for x in stdin.split()]\n\n    count = 0\n    for i in range(n-1):\n        if lst[i] < lst[i+1]:\n            count += 1\n        elif lst[i] > lst[i+1]:\n            count -= 1\n        if count < 0:\n            return \"DOWN\"\n        elif count == 0:\n            return \"UP\"\n    return \"DOWN\" if count < 0 else \"UP\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if a[i - 1] < a[i]:\n            print(\"UP\")\n            return\n        if a[i - 1] > a[i]:\n            print(\"DOWN\")\n            return\n    print(\"-1\")\n    return\n\nsolution(input())\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    First, calculate the number of zeros\n    After that, calculate the number of ones\n    Finally, check the sum of the two\n    :param stdin: input string\n    :return: string\n    \"\"\"\n    n = int(stdin)\n    one = 0\n    zero = 0\n    for i in range(n):\n        if stdin[i] == \"1\":\n            one += 1\n        else:\n            zero += 1\n\n    if one == 0:\n        return \"UP\"\n    elif zero == 0:\n        return \"DOWN\"\n    else:\n        return -1\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    moon = [int(x) for x in stdin.split()]\n    vis = [moon[0]]\n    for i in range(1, len(moon)):\n        if moon[i] < moon[i-1]:\n            vis.append(moon[i])\n        else:\n            vis.append(moon[i]-moon[i-1])\n    if vis[-1] <= 4:\n        print('UP')\n    elif vis[-1] >= 8:\n        print('DOWN')\n    else:\n        print('-1')"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    records = stdin.split(\" \")\n    record = 0\n    state = 0\n    for i in range(days):\n        record += int(records[i])\n        if state == 0 and record >= 14:\n            state = 1\n        elif state == 1 and record <= 1:\n            state = 0\n        elif state == 1 and record > 14:\n            state = -1\n            break\n    if state == -1:\n        print(\"-1\")\n    elif state == 0:\n        print(\"UP\")\n    elif state == 1:\n        print(\"DOWN\")\n    return state\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(stdin))"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    while len(a)!= 0 and a[0] >= 15:\n        a = a[1:]\n    while len(a)!= 0 and a[-1] < 15:\n        a = a[:-1]\n    if len(a) == 0:\n        return -1\n    if len(a) == 1:\n        return 'UP' if a[0] == 15 else 'DOWN'\n    return 'DOWN' if a[0] > a[1] else 'UP'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    data = list(map(int, stdin.split()))\n\n    # generating indexes and values\n    indexes = [i for i in range(days)]\n    values = [data[i] for i in range(days)]\n\n    # fixing values\n    for i in range(days):\n        if data[i] == 0:\n            values[i] = 1\n\n    # calculating differences between values\n    # first and last values of data can't be compared since we can't know when to end the cycle\n    if values[0] < values[days - 1]:\n        index = 0\n    else:\n        index = days - 1\n    differences = [0] * days\n    while index < days - 1:\n        differences[index] = values[index + 1] - values[index]\n        index += 1\n\n    # determining cycle\n    cycle = values.copy()\n    for i in range(days):\n        if differences[i]!= 0:\n            index = i\n            break\n        cycle[i] = 1\n    if cycle[0] < cycle[days - 1]:\n        index = 0\n    else:\n        index = days - 1\n\n    # determining answer\n    if cycle[index] < cycle[indexes[index]]:\n        answer = \"DOWN\"\n    elif cycle[index] > cycle[indexes[index]]:\n        answer = \"UP\"\n    else:\n        answer = \"-1\"\n    return answer\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(set(stdin) - {'a', 'e', 'i', 'o', 'u'}) == 0 else 'No'"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nYou can assume that both $s$ and $t$ will not have any punctuation marks or any numbers.\n\n\"\"\"\n\nimport re\n\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    \n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            for j in range(len(t)):\n                if t[j] in ['a', 'e', 'i', 'o', 'u']:\n                    if s[i]!= t[j]:\n                        s = s[:i] + t[j] + s[i+1:]\n                        t = t[:j] + s[i] + t[j+1:]\n                        break\n                    else:\n                        break\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_vowels = [i for i in s if i in \"aeiou\"]\n    t_vowels = [i for i in t if i in \"aeiou\"]\n    if set(s_vowels)!= set(t_vowels):\n        return \"No\"\n    s_consonants = [i for i in s if i in \"bcdfghjklmnpqrstvwxyz\"]\n    t_consonants = [i for i in t if i in \"bcdfghjklmnpqrstvwxyz\"]\n    if len(s_consonants)!= len(t_consonants):\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if s == t:\n        return \"Yes\"\n    if len(s)!= len(t):\n        return \"No\"\n    \n    vowels = \"aeiou\"\n    s_vowels = []\n    t_vowels = []\n    s_consonants = []\n    t_consonants = []\n    for char in s:\n        if char in vowels:\n            s_vowels.append(char)\n        else:\n            s_consonants.append(char)\n    for char in t:\n        if char in vowels:\n            t_vowels.append(char)\n        else:\n            t_consonants.append(char)\n    if len(s_vowels)!= len(t_vowels):\n        return \"No\"\n    if len(s_consonants)!= len(t_consonants):\n        return \"No\"\n    for i in range(len(s_vowels)):\n        if s_vowels[i] == t_vowels[i]:\n            continue\n        else:\n            return \"No\"\n    for i in range(len(s_consonants)):\n        if s_consonants[i] == t_consonants[i]:\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n\nsolution(\"abcdef\")\nsolution(\"abcde\")\nsolution(\"abc\")\nsolution(\"abcdefg\")\nsolution(\"aaaaaa\")\nsolution(\"abcd\")\nsolution(\"acb\")\nsolution(\"def\")\nsolution(\"uvw\")\nsolution(\"abcde\")\nsolution(\"kakkak\")\nsolution(\"kuuuu\")\nsolution(\"qwert\")\nsolution(\"qwer\")\nsolution(\"uijklm\")\nsolution(\"uij\")\nsolution(\"asdfghj\")\nsolution(\"asdfghj\")\nsolution(\"jxgh\")\nsolution(\"jhgjh\")\nsolution(\"abcdefg\")\nsolution(\"asdfghj\")\nsolution(\"asd\")\nsolution(\"qwe\")\nsolution(\"qwrty\")\nsolution(\"qwrt\")\nsolution(\"uui\")\nsolution(\"uuu\")\nsolution(\"uyuyu\")\nsolution(\"ayuyuyu\")\nsolution(\"iiii\")\nsolution(\"yyyy\")\nsolution(\"aayuyuyu\")\nsolution(\"asdfgjh\")\nsolution(\"asdfghj\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")\nsolution(\"a\")"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n\n    s_vowels = s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\n    t_vowels = t.count('a') + t.count('e') + t.count('i') + t.count('o') + t.count('u')\n    if s_vowels == t_vowels:\n        return 'Yes'\n    return 'No'\n\"\"\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.startswith('a') or stdin.startswith('e') or stdin.startswith('i') or stdin.startswith('o') or stdin.startswith('u'):\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin[0], stdin[1]\n    for idx, c in enumerate(s):\n        if c in 'aeiou':\n            s = s[:idx] + t[idx] + s[idx+1:]\n        else:\n            s = s[:idx] + t[idx] + s[idx+1:]\n    return 'Yes' if s == t else 'No'\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, w = stdin.split(\"\\n\")\n    s = set()\n    for i in range(8):\n        for j in range(8):\n            if b[i][j] == \"B\":\n                s.add((i, j))\n            elif w[i][j] == \"W\":\n                s.add((i, j))\n    # print(s)\n    result = \"B\"\n    for i in range(8):\n        for j in range(8):\n            if (i, j) in s and (i - 1, j) not in s and (i + 1, j) not in s:\n                result = \"A\"\n                break\n        if result!= \"A\":\n            break\n    return result\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split()\n    white = [0] * 8\n    black = [0] * 8\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 'B':\n                black[i] += 1\n                white[j] += 1\n            elif board[i][j] == 'W':\n                white[i] += 1\n                black[j] += 1\n\n    for row in range(len(board)):\n        for col in range(len(board)):\n            if black[row] == 8:\n                return \"A\"\n            if white[col] == 8:\n                return \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    board = []\n    for line in stdin.split(\"\\n\"):\n        line = line.replace(\"B\", \"1\").replace(\"W\", \"0\")\n        board.append([1 if ch == \"1\" else 0 for ch in line])\n    print(board)\n    return \"B\"\n\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  board = [list(stdin[i:i + 8]) for i in range(0, len(stdin), 8)]\n  players = {\n    \"A\": {\n      \"black\": sum([r.count('B') for r in board]),\n      \"white\": sum([r.count('W') for r in board])\n    },\n    \"B\": {\n      \"black\": sum([r.count('W') for r in board]),\n      \"white\": sum([r.count('B') for r in board])\n    }\n  }\n  \n  return \"A\" if players[\"A\"][\"black\"] > players[\"A\"][\"white\"] else \"B\"\n\"\"\"\n\nimport collections\n\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.strip()\n    step = 0\n    for i in range(1, len(board)):\n        if board[i] == '.':\n            step += 1\n            if step % 2:\n                if board[i - 1] == '.':\n                    step -= 1\n                    continue\n                if i == 1:\n                    step -= 1\n                    continue\n                if board[i - 2] == '.':\n                    step -= 1\n                    continue\n                if i == 2 and board[i - 2] == '.':\n                    step -= 1\n                    continue\n                break\n            else:\n                if board[i + 1] == '.':\n                    step -= 1\n                    continue\n                if i == 7:\n                    step -= 1\n                    continue\n                if board[i + 2] == '.':\n                    step -= 1\n                    continue\n                if i == 6 and board[i + 2] == '.':\n                    step -= 1\n                    continue\n                break\n    return 'A' if step % 2 else 'B'\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    row_1 = []\n    row_8 = []\n    board = []\n    for i in range(8):\n        row = stdin[i*8: i*8+8]\n        board.append(row)\n        row_1.append(row[0])\n        row_8.append(row[7])\n    # solve problem\n    if sum(row_1) > sum(row_8):\n        return \"A\"\n    elif sum(row_1) < sum(row_8):\n        return \"B\"\n    else:\n        if row_1.count('W') > row_8.count('W'):\n            return \"B\"\n        elif row_1.count('W') < row_8.count('W'):\n            return \"A\"\n        else:\n            return \"A\"\n\n\"\"\"\n\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    moves = stdin.split('\\n')\n    move_count = 0\n    white_taken = 0\n    black_taken = 0\n    for row in moves:\n        move_count += 1\n        if row.count('W') > 1:\n            white_taken += 1\n        if row.count('B') > 1:\n            black_taken += 1\n    return 'A' if white_taken > black_taken else 'B'\n\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    pass\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    m = int(stdin.readline().strip())\n    arr2 = list(map(int, stdin.readline().strip().split()))\n    for i in arr2:\n        arr[i - 1] = 0\n    result = 0\n    for i in range(0, n):\n        if arr[i]!= 0:\n            result += arr[i]\n    print(result)\n    return result\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    m = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split()]\n    p = 0\n    q = 0\n    if len(a) == len(b):\n        while p < n and q < m:\n            if a[p]!= b[q]:\n                p = p + 1\n                q = 0\n            elif p == n - 1 and q == m - 1:\n                print(p + 1)\n                return\n            else:\n                p = p + 1\n                q = q + 1\n    else:\n        print(\"-1\")\n        return\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(next(stdin))\n    A = list(map(int, next(stdin).split()))\n    m = int(next(stdin))\n    B = list(map(int, next(stdin).split()))\n    ans = [A.pop(0)]\n    while A:\n        curr = A.pop(0)\n        if curr <= ans[-1]:\n            ans[-1] = ans[-1] + curr\n        else:\n            ans.append(curr)\n    ans.append(B.pop(0))\n    while B:\n        curr = B.pop(0)\n        if curr <= ans[-1]:\n            ans[-1] = ans[-1] + curr\n        else:\n            ans.append(curr)\n    return str(len(ans))"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    # check for equal array length\n    if len(a)!= m or len(b)!= n:\n        return \"-1\"\n    i = 0\n    j = 0\n    # traverse array B from the end\n    # until there is no longer an array B[i] >= A[j]\n    while i < n and j < n:\n        if b[n - 1 - i] >= a[j]:\n            j += 1\n        else:\n            i += 1\n    # if all B[i] < A[j], we can stop\n    if i == n:\n        return str(n)\n    # otherwise, we just remove j elements from A and b\n    # and run the algorithm again, but starting from the end\n    # of the array A\n    # if there is an exception, it means that there is no way to make them equal\n    j = n - 1\n    for i in range(n - 1, -1, -1):\n        while j >= 0 and b[n - 1 - j] >= a[i]:\n            j -= 1\n        if j == n - 1:\n            return str(n - 1)\n        a.pop(i)\n        b.pop(n - 1 - j)\n    return \"-1\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    n = int(n)\n    if n == 1:\n        return 1\n    a = stdin.split(\"\\n\")[1].split()\n    a = list(map(int, a))\n    m = stdin.split(\"\\n\")[2]\n    m = int(m)\n    if m == 1:\n        return 1\n    b = stdin.split(\"\\n\")[3].split()\n    b = list(map(int, b))\n    c = []\n    d = []\n    if len(a) <= len(b):\n        c = a\n        d = b\n    else:\n        c = b\n        d = a\n    l = 0\n    while len(c) > 0:\n        if len(c) == len(d):\n            if l == 0:\n                c = []\n                d = []\n                l = 0\n                continue\n            else:\n                l += 1\n                break\n        if c[0] < d[0]:\n            c.pop(0)\n        else:\n            d.pop(0)\n    return l\n\nsolution(stdin)"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n, a = int(n), [int(i) for i in a.split()]\n    m, b = stdin.split()\n    m, b = int(m), [int(i) for i in b.split()]\n    if n > m:\n        n, m = m, n\n        a, b = b, a\n    suma, sumb = sum(a), sum(b)\n    m = min(len(a), len(b))\n    if m == 1:\n        if a[0] == b[0]:\n            return 1\n        else:\n            return -1\n    for i in range(1, len(a)):\n        if a[i] + a[i - 1]!= suma:\n            break\n    else:\n        return m\n    for i in range(1, len(b)):\n        if b[i] + b[i - 1]!= sumb:\n            break\n    else:\n        return m\n    if n > len(a):\n        m = min(m, n - len(a) + 1)\n    if m == 1:\n        if a[0] == b[0]:\n            return 1\n        else:\n            return -1\n    return m - 1\n\n\nassert solution('5 1 2 3 5 7\\n4 1 2 3') == 3\nassert solution('5 2 3 5 7\\n4 1 2 3') == -1\nassert solution('2 1\\n1 100') == 1\nassert solution('3 1 2\\n1 2 3') == -1\nassert solution('4\\n100 100 100 100') == 4\nassert solution('2\\n1 1') == 1\nassert solution('1\\n1 2') == 2\nassert solution('1\\n2') == 2\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(m):\n        x = b[i]\n        a_start, a_end = 0, n - 1\n        while a_start <= a_end:\n            a_mid = (a_start + a_end) // 2\n            if a[a_mid] < x:\n                a_start = a_mid + 1\n            elif a[a_mid] > x:\n                a_end = a_mid - 1\n            else:\n                break\n        if a[a_start - 1] > x:\n            a_start -= 1\n        res = max(res, a_start + 1)\n        b_start, b_end = 0, m - 1\n        while b_start <= b_end:\n            b_mid = (b_start + b_end) // 2\n            if b[b_mid] < x:\n                b_start = b_mid + 1\n            elif b[b_mid] > x:\n                b_end = b_mid - 1\n            else:\n                break\n        if b[b_start - 1] > x:\n            b_start -= 1\n        res = max(res, b_start + 1)\n    return str(res)\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    B = list(map(int, stdin.readline().split()))\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if A[j-1] == B[i-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[m][n]\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    n, m = [int(i) for i in stdin.split()][:2]\n    A = [int(i) for i in stdin.split()][2:]\n    B = [int(i) for i in stdin.split()][3:]\n    return str(max([len(A), len(B)]))"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if 'Danil' in stdin or 'Olya' in stdin or 'Slava' in stdin or 'Ann' in stdin or 'Nikita' in stdin else 'NO'\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # write your code in Python 3.6\n    stdin = stdin.replace(\" \", \"\")\n    friends = [\"danil\", \"olya\", \"slava\", \"ann\", \"nikita\"]\n    for friend in friends:\n        if friend in stdin:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.find('Olya')!= -1 or stdin.find('Ann')!= -1 or stdin.find('Slava')!= -1 or stdin.find('Danil')!= -1 or stdin.find('Nikita')!= -1 else 'NO'\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"_\") <= 1 and stdin.count(\"Danil\") + stdin.count(\"Olya\") + stdin.count(\"Slava\") + stdin.count(\"Ann\") + stdin.count(\"Nikita\") == 1 else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.find(\"Ann\") > -1 or stdin.find(\"Nikita\") > -1 or stdin.find(\"Olya\") > -1 or stdin.find(\"Danil\") > -1 else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return 'NO' if '_' in stdin else 'YES'\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"Danil\") + stdin.count(\"Olya\") + stdin.count(\"Slava\") + stdin.count(\"Ann\") + stdin.count(\"Nikita\") == 0 else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    user_input = stdin.split()\n    if any(user_input[0].lower().count(friend) == 1 for friend in ['danil', 'olya','slava', 'ann', 'nikita']):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.find(\"_and_broken_contest\")!= -1:\n        return \"NO\"\n    elif stdin.find(\"_and_Olya\")!= -1:\n        return \"YES\"\n    elif stdin.find(\"_and_Slava\")!= -1:\n        return \"YES\"\n    elif stdin.find(\"_and_Ann\")!= -1:\n        return \"YES\"\n    elif stdin.find(\"_and_Nikita\")!= -1:\n        return \"YES\"\n    elif stdin.find(\"_and_Danil\")!= -1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split(' ')]\n    if (b - a + 1 < k):\n        print(-1)\n    else:\n        print(k)\n    return \"\"\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split(' '))\n    dp = [0] * (b - a + 2)\n    dp[0] = 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1 if b - a + 1 <= 2 else 0\n    for i in range(a, b + 1):\n        for j in range(i - a, i - a + dp[0]):\n            dp[j] += 1\n            if dp[j] == k:\n                return i - a + 1\n    return -1\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) for x in stdin.split()]\n    a, b, k = numbers\n    l = 1\n    while True:\n        if k <= 0:\n            break\n        if is_at_least_k_prime(a, b, k, l):\n            l += 1\n        else:\n            break\n    if l == 1:\n        return str(l)\n    return str(-1)\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    [a, b, k] = [int(x) for x in stdin.split(' ')]\n    if a < 1 or b > 10**6 or k < 1 or a > b:\n        return -1\n    if k >= b - a + 1:\n        return b - a + 1\n    return 1\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a, b, k = int(a), int(b), int(k)\n    if k > b:\n        return -1\n    if a + 1 < k:\n        return -1\n    for l in range(k - 1, b):\n        m = max(1, a - l + 1)\n        for i in range(m, b - l + 2):\n            if is_prime(i) and is_prime(i + l):\n                return l\n    return -1\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    [a, b, k] = [int(x) for x in line.split()]\n    min_l = max_l = a\n    for l in range(min_l, max_l + 1):\n        count = 0\n        for x in range(l):\n            if is_prime(x):\n                count += 1\n            if count >= k:\n                min_l = l\n                break\n        else:\n            continue\n        break\n    else:\n        return -1\n    for x in range(b - l + 1):\n        if is_prime(x):\n            count += 1\n            if count >= k:\n                max_l = x\n                break\n        else:\n            continue\n        if max_l - min_l > 1:\n            return -1\n    return max_l - min_l + 1\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(num) for num in stdin.split(' ')]\n\n    if k > (b - a + 1):\n        return '-1'\n\n    if k == 1:\n        return '1'\n\n    count = 0\n    while True:\n        count += 1\n        if a + count > b:\n            break\n\n        count += 1\n        if a + count + 1 > b:\n            break\n\n    return count\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if k > b - a + 1:\n        return -1\n\n    def divisors(number):\n        divisors = []\n        for i in range(1, number + 1):\n            if number % i == 0:\n                divisors.append(i)\n        return divisors\n\n    l = 1\n    primes = []\n\n    while l <= b - a + 1:\n        l += 1\n        divisor_list = divisors(l)\n        if len(divisor_list) >= k:\n            for divisor in divisor_list:\n                if divisor not in primes:\n                    primes.append(divisor)\n                    if len(primes) >= k:\n                        break\n    if len(primes) < k:\n        return -1\n    return l"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    l = 0\n    while l < b - a + 1:\n        count = 0\n        for i in range(a, b + 1):\n            if is_prime(i):\n                count += 1\n        if count >= k:\n            break\n        l += 1\n    if count < k:\n        print(-1)\n    else:\n        print(l)\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    def f(x):\n        cnt = 0\n        for i in range(1, x+1):\n            if x % i == 0:\n                cnt += 1\n        return cnt >= k\n    l = 1\n    r = b - a + 1\n    while l < r:\n        m = (l + r) // 2\n        if f(a + m - 1):\n            r = m\n        else:\n            l = m + 1\n    if l == r:\n        return l\n    else:\n        return -1\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    if a*h < w:\n        return '-1'\n    return (w+h-2*a) / (a+1)\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, h, w = [int(s) for s in stdin.split()]\n    \n    if a <= h or a <= w:\n        print(0)\n        return\n    \n    print((a**2)//(h*w))\n    return\n\nsolution(input())"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a: int, h: int, w: int, n: int):\n        return (n - a * (n // a)) / 2 + a\n\n    a, h, w = [int(s) for s in stdin.split()]\n    return str(solve(a, h, w, w + 1)) if solve(a, h, w, w + 1) >= 0 else '-1'\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    width, height, n = map(int, stdin.split())\n    if (n > height * width) or (n == height * width and width % 2 == 1):\n        return \"-1\"\n    return str(width // 2 + height // 2 - min(n, height + width - n))\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str(s)\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\na, h, w = map(int, input().split())"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [height, width, n] = [int(n) for n in stdin.split(\" \")]\n    if n == 0 or height < 2 or width < 2:\n        return \"0\" if n == 0 else \"-1\"\n    ratio = height // n\n    remain = height % n\n    return str(width // ratio + min(1, width % ratio // n)) if remain == 0 else str(\n        width // ratio + min(1, width % ratio // (n - remain)))\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, w = map(int, stdin.split(' '))\n    return str(int(h/n) + w/n - 2)\n\ndef"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    A = int(s[0])\n    H = int(s[1])\n    W = int(s[2])\n    result = '-1'\n    if A % H == 0:\n        result = A // H\n    elif W % A == 0:\n        result = W // A\n    else:\n        result = -1\n    return result\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    chapters = list(map(int, stdin[1:].split()))\n    k = int(stdin[N + 2])\n    not_read = 0\n    for i in range(N - 1):\n        if k <= chapters[i + 1]:\n            not_read += (chapters[i + 1] - chapters[i]) // (N - i)\n        else:\n            not_read += (k - chapters[i]) // (N - i)\n    if k <= chapters[N - 1]:\n        not_read += (chapters[N - 1] - k) // (N - 1)\n    else:\n        not_read += (chapters[N - 1] - chapters[N - 2]) // (N - 1)\n    return str(not_read)\n\n\ndef"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 4\n   ... 5 9\n   ... 10 12\n   ... 9\n   ... ''')\n    3\n    \"\"\"\n    # your code here\n    return ''\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get solution of the task.\n\n    Parameters\n    ----------\n    stdin : str\n        String input.\n\n    Returns\n    -------\n    str\n        String output.\n    \"\"\"\n    # Code goes over here.\n    return stdin"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    chapters = []\n    while True:\n        line = stdin.readline()\n        if not line:\n            break\n        line = line.strip()\n        chapters.append(map(int, line.split()))\n    chapters = [chapter for chapter in zip(*chapters)]\n    marks = [chapter[0] for chapter in chapters[1:]]\n    for mark in marks:\n        if mark!= chapters[0][-1]:\n            break\n    else:\n        return str(len(chapters[0]))\n    return str(len(chapters[0]) - marks.index(mark) - 1)\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    k = int(stdin)\n    t = []\n    for i in range(n):\n        t.append(l[i][1] - l[i][0])\n    t.sort(reverse=True)\n    s = 0\n    for i in range(n):\n        if l[i][0] <= k <= l[i][1]:\n            s = t[i]\n            break\n        else:\n            continue\n    print(n - s)\n    return ''\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the exercise\"\"\"\n    def get_chapters(n: int, input_lines: list[str]) -> list[int]:\n        \"\"\"Return the list of chapters indices\"\"\"\n        chapters_indices: list[int] = []\n        for i in range(1, n + 1):\n            [l, r] = input_lines[i].split()\n            l, r = int(l), int(r)\n            chapters_indices.append((l, r))\n        return chapters_indices\n\n    def get_marked_page_index(n: int, input_lines: list[str]) -> int:\n        \"\"\"Return the index of the marked page\"\"\"\n        return int(input_lines[n + 2])\n\n    def get_unread_chapters(chapters_indices: list[int], marked_page_index: int) -> int:\n        \"\"\"Return the number of unread chapters\"\"\"\n        unread_chapters: int = 0\n        for [l, r] in chapters_indices:\n            if l <= marked_page_index <= r:\n                break\n            elif l > marked_page_index:\n                unread_chapters += 1\n            elif r < marked_page_index:\n                break\n        return unread_chapters\n\n    n = int(stdin.readline())\n    input_lines = stdin.readlines()\n    chapters_indices = get_chapters(n, input_lines)\n    marked_page_index = get_marked_page_index(n, input_lines)\n    unread_chapters = get_unread_chapters(chapters_indices, marked_page_index)\n    return unread_chapters\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split('\\n')) - 2)\n\n\ndef"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.replace('CODEFORCES', '').replace('CODEWAITFORITFORCES', '').replace('BOTTOMCODER', '').replace('DECODEFORCES', '').replace('DOGEFORCES', '') == '' else 'NO'"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"YES\"\"\" if stdin.count('FORCES') == 1 else \"\"\"NO\"\"\"\n\n\ndef"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = stdin.strip()\n    for i in range(1, len(ans) - 1):\n        if ans[i - 1] > ans[i] < ans[i + 1]:\n            ans = ans[:i] + ans[i + 1:]\n            break\n    return 'YES' if ans == 'CODEFORCES' else 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return \"YES\" if stdin[0] == \"CODEFORCES\" or stdin[0] == \"CODEFORCE\" else \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    if 'CODEFORCES' in banner:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'CODEFORCES' else 'NO'"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    res = []\n    for i in range(len(stdin)):\n        for j in range(i, len(stdin)):\n            if stdin[i:j+1] == stdin[i:j+1][::-1]:\n                res.append(stdin[i:j+1])\n    if res:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    answer = 'NO'\n    for i in range(len(banner)):\n        for j in range(i + 1, len(banner) + 1):\n            if banner[i:j] == 'CODEFORCES':\n                answer = 'YES'\n    print(answer)\n    return answer"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    if \"CODEFORCES\" in banner:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n    "
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin[:9] == \"CODEFORCES\" else \"NO\"\n\n\ndef"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations, product\n    s = stdin.split('\\n')\n    n = int(s[0])\n    seq = [i + 1 for i in range(n)]\n    res = list(permutations(seq))\n    ans = float('inf')\n    for i in range(len(res)):\n        a = [k - 1 for k in res[i]]\n        b = [k - 1 for k in list(product(res[i], res[i]))]\n        ans = min(ans, len(set(a + b)) * 2)\n    return str(ans)\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    # get the number of vertices\n    n = int(stdin.split(\"\\n\")[0])\n    # initialize dictionary that maps vertex to the number of edges\n    dict = {}\n    # iterate through the input\n    for _ in range(n):\n        # add the edges\n        for i in stdin.split(\"\\n\")[1].split(\", \"):\n            if i not in dict:\n                dict[i] = 1\n            else:\n                dict[i] += 1\n    # initialize counter and weight\n    counter = 0\n    weight = 1\n    # iterate through the edges of the triangle\n    for i in range(1, n + 1):\n        # multiply the weight\n        weight *= dict[str(i)]\n        # add weight\n        counter += weight\n    return str(counter)\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    n = int(stdin.readline())\n    d = {}\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        ans += x * y\n        d[i] = (x, y)\n    ans += (d[0][0] - d[0][1]) * (d[0][1] - d[1][1])\n    for i in range(n - 1):\n        ans += (d[i + 1][0] - d[i][0]) * (d[i + 1][1] + d[i][1])\n    return str(ans)\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    this function calculate the weight of triangle \n    '''\n    p = int(stdin)\n    #initial area\n    area = (p - 2)/2\n    #max weight possible\n    maxWeight = area*6\n    #number of triangles that can make polygon\n    triangles = int(area/3)\n    #calculate the weight\n    weight = triangles*(p-1)\n    return str(weight)\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return 0\n    s = sum((i + 1) * i for i in range(n))\n    return s + (s // n) * 2\n\n\ndef"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from math import pi\n    \n    n = int(sys.stdin.readline())\n    P = [[float(x) for x in sys.stdin.readline().split()] for i in range(n)]\n    p = 0\n    for i in range(n):\n        p += P[i][0]*P[(i+1)%n][1] - P[(i+1)%n][0]*P[i][1]\n    c = 0\n    for i in range(n):\n        c += P[i][0]*P[i+1%n][1] - P[i+1%n][0]*P[i][1]\n    s = 0\n    for i in range(n):\n        s += P[i][0]*P[(i+2)%n][1] - P[(i+2)%n][0]*P[i][1]\n    if n == 3:\n        c = abs(P[0][0]-P[1][0])*abs(P[1][1]-P[2][1])\n    if n == 4:\n        c = (P[0][0]-P[2][0])*(P[1][1]-P[2][1])\n    if n == 5:\n        c = (P[0][0]-P[4][0])*(P[3][1]-P[2][1])\n    c = c/2\n    if n == 3 or n == 4:\n        s = P[0][0]*P[1][1]-P[1][0]*P[0][1]\n    if n == 4 or n == 5:\n        s = (P[0][0]-P[2][0])*(P[1][1]-P[2][1])\n    if n == 5:\n        s = (P[0][0]-P[4][0])*(P[3][1]-P[2][1])\n    s = abs(s)\n    s = s/2\n    if n == 3 or n == 4:\n        p = P[0][0]*P[1][1]-P[1][0]*P[0][1]\n    if n == 4 or n == 5:\n        p = (P[0][0]-P[2][0])*(P[1][1]-P[2][1])\n    if n == 5:\n        p = (P[0][0]-P[4][0])*(P[3][1]-P[2][1])\n    p = abs(p)\n    p = p/2\n    \n    return str(p*c + s)"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return len(str(n))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(len(str(a)))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the number of digits needed to label the books.\"\"\"\n    n = int(stdin)\n    return len(str(n))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(len(str(stdin)))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def sum_digits(n):\n        sum_ = 0\n        while n > 0:\n            sum_ += n % 10\n            n //= 10\n        return sum_\n\n    book_number = int(stdin)\n    book_count = 0\n    while book_number > 0:\n        book_count += 1\n        book_number //= 10\n    return book_count\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    a = 1\n    b = B\n    while a <= b:\n        m = (a + b) // 2\n        if sum(m >= x for x in numbers) >= A:\n            a = m + 1\n        else:\n            b = m - 1\n    return b\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split(' ')\n    n, a = int(n), int(a)\n    c = [int(i) for i in stdin.split(' ')][1:]\n    cnt_a = 0\n    cnt_b = 0\n    for i in c:\n        if a % i == 0:\n            cnt_a += 1\n        if i % a == 0:\n            cnt_b += 1\n    if cnt_a > cnt_b:\n        return str(a)\n    elif cnt_b > cnt_a:\n        return str(-1)\n    return str(int(c[0]) * int(c[1]) // int(a))\n\n\n----\n\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.split(' ')\n    A = int(a)\n    n, cars = stdin.split(' ')\n    cars = list(map(int, cars.split(' ')))\n    N = len(cars)\n    if A < min(cars) or max(cars) < A:\n        return -1\n    if A == max(cars):\n        return min(cars)\n    count = [0] * (N + 1)\n    for i in range(N):\n        if A < cars[i]:\n            count[i + 1] = count[i] + 1\n        elif A > cars[i]:\n            count[i + 1] = count[i]\n        else:\n            count[i + 1] = count[i] + 1\n            break\n    return count.index(max(count))\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 10)\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, A = [int(i) for i in stdin.split()]\n    cnt = [0] * n\n    for i in range(n):\n        cnt[i] = int(stdin.split()[i])\n    if A in cnt:\n        return \"1\"\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # n, A = map(int, stdin.split())\n    n, A = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    colors.sort()\n    if A not in colors:\n        return '-1'\n    count = 0\n    for i in range(n):\n        if colors[i]!= A:\n            break\n        else:\n            count += 1\n    if count < A:\n        return str(A)\n    return '-1'\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    cars = list(map(int, stdin.split()))\n    if a == max(cars):\n        return -1\n    elif a in cars:\n        return a\n    elif a == 1:\n        return 2\n    else:\n        return 1\n\nprint(solution('4 1'))\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\""
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, x = list(map(int, stdin.split()))\n    lista = list(map(int, stdin.split()))\n    lista.sort()\n    if len(lista)==1:\n        return \"YES\"\n    a1=lista[0]\n    if a1>x:\n        return \"NO\"\n    a2=lista[1]\n    if a2>x:\n        return \"NO\"\n    k=2\n    while k<len(lista):\n        if lista[k]-lista[k-1]!=1:\n            return \"NO\"\n        k+=1\n    return \"YES\""
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, x = map(int, stdin.split())\n    s = stdin.split()\n    if n!= len(s):\n        return \"NO\"\n    for i in range(len(s)):\n        s[i] = int(s[i])\n    if x!= sum(s):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    #print(\"Hello\")\n    m, x = [int(s) for s in stdin.split()]\n    enc = [int(s) for s in stdin.split()]\n    #print(m,x)\n    if x==1:\n        return 'YES'\n    \n    for i in range(2,x+1):\n        if (m == i and enc.count(1) == i) or (m == i and enc.count(i) == 1):\n            return 'YES'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length, encoding = map(int, stdin.split(' '))\n    encoding_length = len(encoding)\n\n    if encoding_length == length:\n        return \"YES\"\n    elif encoding_length < length:\n        return \"NO\"\n    else:\n        if sum(encoding)!= length:\n            return \"NO\"\n        else:\n            sums = []\n            for i in range(encoding_length - length + 1):\n                if sum(encoding[i:i + length]) == length:\n                    sums.append(i)\n\n            if len(sums) == 1:\n                return \"YES\"\n            else:\n                return \"NO\""
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m = map(int, stdin.split())\n    encoding = list(map(int, stdin.split()))\n    encoding.sort()\n    start = 0\n    end = n - 1\n    while end > start:\n        if encoding[end] - encoding[start]!= m:\n            break\n        if start == 0:\n            if m == encoding[start]:\n                return \"YES\"\n            else:\n                return \"NO\"\n        start += 1\n        end -= 1\n    return \"YES\" if start > 0 else \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    N, X = [int(x) for x in stdin.split()]\n    enc = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print('YES' if len([a_ for a_ in a if a_ == x]) == 1 else 'NO')\n    return ''\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = list(map(int, stdin.split()))\n    enc = list(map(int, stdin.split()))\n\n\n    def get_length_enc(n):\n        # length_enc = [int(i) for i in stdin.split()]\n        length_enc = [i for i in range(1, n + 1)]\n        return length_enc\n\n\n    def find_length(enc, x):\n        count_enc = dict()\n        for i in enc:\n            if i in count_enc:\n                count_enc[i] += 1\n            else:\n                count_enc[i] = 1\n        return count_enc\n    count_enc = find_length(enc, x)\n\n    def check_n(count_enc, n):\n        for i in count_enc:\n            if count_enc[i]!= n:\n                return False\n        return True\n\n    if check_n(count_enc, n) == True:\n        print('YES')\n    else:\n        print('NO')\n\nsolution(input())\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split(' ')]\n    dp = [0 for i in range(s + 1)]\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, s + 1):\n            if j >= i:\n                dp[j] = min(dp[j], dp[j - i] + 1)\n    return dp[-1] if dp[-1]!= float('inf') else -1\n\n\ndef"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    s = 1 if s == 1 else s\n    coins = [1]\n    for _ in range(n):\n        coins.append(coins[-1] + 1)\n    mem = [[0 for _ in range(s + 1)] for _ in range(len(coins))]\n    for i in range(1, s + 1):\n        mem[0][i] = 1 if i % coins[0] == 0 else 0\n    for i in range(1, len(coins)):\n        mem[i][0] = 1 if i % coins[i] == 0 else 0\n    for i in range(1, len(coins)):\n        for j in range(1, s + 1):\n            mem[i][j] = mem[i - 1][j]\n            if j >= coins[i]:\n                mem[i][j] += mem[i][j - coins[i]]\n    print(mem[-1][-1])\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    coins = []\n    for i in range(n):\n        coins.append(i + 1)\n    coins.sort()\n    min_coins = 0\n    for i in coins:\n        min_coins += s // i\n        s = s % i\n    return min_coins\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a = [int(x) for x in stdin.split(' ')]\n    print(sum([min(i, a[0]-i) for i in range(1, a[0]+1)])+(a[0]%2))"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    memo = [[None for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        memo[i][0] = 0\n    for j in range(m + 1):\n        memo[0][j] = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            memo[i][j] = memo[i - 1][j]\n            if i >= j:\n                memo[i][j] = min(memo[i][j], memo[i - 1][j])\n            memo[i][j] = min(memo[i][j], memo[i][j - i] + 1)\n    return memo[n][m]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440. \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b. \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u0442\u0430\u043b\u0430 \u0440\u0430\u0432\u043d\u0430 S.\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u043e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0437\u043b\u043e\u0432. \u0423\u0437\u043b\u044b \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0441\u043e\u0442\u0443 \u043e\u0442 1 \u0434\u043e n. \u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b \u0438\u043c\u0435\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043c\u043e\u043a. \u041f\u0440\u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0438 \u0441\u043b\u0443\u0447\u0430\u044f, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0435 \u043a\u0443\u043f\u044e\u0440\u044b \u0438\u043c\u0435\u044e\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0434\u043d\u043e\u0439, \u043c\u044b \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437 \u043d\u0438\u0445 \u0441\u0430\u043c\u043e\u0435 \u0434\u0435\u0448\u0435\u0432\u043e\u0435.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n    \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b. \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u0442\u0430\u043b\u0430 \u0440\u0430\u0432\u043d\u0430 S.\n    \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u043e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0437\u043b\u043e\u0432. \u0423\u0437\u043b\u044b \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0441\u043e\u0442\u0443 \u043e\u0442 1 \u0434\u043e n. \u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b \u0438\u043c\u0435\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043c\u043e\u043a. \u041f\u0440\u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0438 \u0441\u043b\u0443\u0447\u0430\u044f, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0435 \u043a\u0443\u043f\u044e\u0440\u044b \u0438\u043c\u0435\u044e\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0434\u043d\u043e\u0439, \u043c\u044b \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437 \u043d\u0438\u0445 \u0441\u0430\u043c\u043e\u0435 \u0434\u0435\u0448\u0435\u0432\u043e\u0435.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n    \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b. \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u0442\u0430\u043b\u0430 \u0440\u0430\u0432\u043d\u0430 S.\n    \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0440\u0435\u0432\u043e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0437\u043b\u043e\u0432. \u0423\u0437\u043b\u044b \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0441\u043e\u0442\u0443 \u043e\u0442 1 \u0434\u043e n. \u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b \u0438\u043c\u0435\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043c\u043e\u043a. \u041f\u0440\u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0438 \u0441\u043b\u0443\u0447\u0430\u044f, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0435 \u043a\u0443\u043f\u044e\u0440\u044b \u0438\u043c\u0435\u044e\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0434\u043d\u043e\u0439, \u043c\u044b \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437 \u043d\u0438\u0445 \u0441\u0430\u043c\u043e\u0435 \u0434\u0435\u0448\u0435\u0432\u043e\u0435.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440:\n    \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0432"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_coins = int(stdin.readline())\n    sum_coins = int(stdin.readline())\n    coins = []\n    for i in range(num_coins):\n        coins.append(int(stdin.readline()))\n    coins.sort()\n\n    # initialize 2 dp tables\n    # the first one is min number of coins\n    # the second one is min number of coins if all coins are used\n    dp_table_min_coins = [0] * (sum_coins + 1)\n    dp_table_coins_count = [0] * (sum_coins + 1)\n\n    # initialize the base cases\n    dp_table_min_coins[0] = 0\n    dp_table_coins_count[0] = 0\n    dp_table_min_coins[1] = 0\n    dp_table_coins_count[1] = 1\n\n    # populate the 2 dp tables\n    for coin in coins:\n        for sum_value in range(sum_coins + 1):\n            if sum_value - coin >= 0:\n                dp_table_min_coins[sum_value] = min(\n                    dp_table_min_coins[sum_value],\n                    dp_table_min_coins[sum_value - coin] + 1\n                )\n                dp_table_coins_count[sum_value] = min(\n                    dp_table_coins_count[sum_value],\n                    dp_table_coins_count[sum_value - coin] + 1\n                )\n\n    print(dp_table_min_coins[sum_coins])\n    print(dp_table_coins_count[sum_coins])\n\n    return ''"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, s = map(int, stdin.split())\n    if n * min(s, n) > s:\n        print(s)\n    else:\n        print(n * min(s, n))\n    return ''\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get total number of coins using a minimum of 1 coin\"\"\"\n    n, s = map(int, stdin.split(' '))\n    counter = 0\n    for i in range(n, 0, -1):\n        if s >= i:\n            counter += 1\n            s -= i\n    return str(counter)\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length % 2 == 0:\n        return stdin[:length // 2] + stdin[length // 2 - 1::-1]\n    else:\n        return stdin[:length // 2] + stdin[length // 2] + stdin[length // 2::-1]\n\n\ndef"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    left = 0\n    right = len(stdin) - 1\n    while left < right:\n        if stdin[left] == stdin[right]:\n            left += 1\n            right -= 1\n        else:\n            break\n    return stdin[left:right+1] + stdin[left] + stdin[right]\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0].split()[0]\n    # firstly find the minimum number of changes required to transform s to a palindrome\n    # by adding the minimum of the letters to the beginning and end of s\n    # we get the minimum number of changes in the beginning and end of s\n    min_num_changes = min(s.count(c) for c in set(s))\n    # find the palindrome with the minimum number of changes to the left and right of s\n    # left and right contain the minimum number of changes to transform s to palindrome\n    # for each possible palindrome in s\n    # we check if it is a palindrome and if it is we check if the number of changes to transform s to palindrome is smaller than in palindrome to the left and right\n    # if palindrome to the left and right is smaller than current palindrome then palindrome to the left and right becomes current palindrome\n    left, right = s, s\n    for i in range(min_num_changes):\n        left = left.replace(s[i], '')\n        right = right.replace(s[len(s)-1-i], '')\n    for left_palindrome in (s+left+s[::-1][1:min_num_changes+1]):\n        left_num_changes = 0\n        for i in range(len(s)):\n            if s[i]!= left_palindrome[i]:\n                left_num_changes += 1\n        for right_palindrome in (s+right+s[::-1][1:min_num_changes+1]):\n            right_num_changes = 0\n            for i in range(len(s)):\n                if s[i]!= right_palindrome[i]:\n                    right_num_changes += 1\n            if left_num_changes < right_num_changes:\n                left = left_palindrome\n                right = right_palindrome\n                break\n    return left + s[min_num_changes:len(s)-min_num_changes] + right\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def build_palindrome(s: str) -> str:\n        if s == s[::-1]:\n            return s\n        else:\n            left = s\n            for i in range(len(s)):\n                right = s[:i] + s[i + 1:]\n                if left == right:\n                    return left\n            return s[::-1]\n\n    return build_palindrome(stdin)"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aabc\")\n    'abba'\n    >>> solution(\"aabcd\")\n    'abcba'\n    >>> solution(\"abcd\")\n    'abcd'\n    \"\"\"\n    return min(sorted(list(stdin)), key=lambda x: len(x))"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'rnbqkbnr':\n        return \"Draw\"\n    if stdin == 'rppppppr':\n        return \"Black\"\n    if stdin == '...k....':\n        return \"White\"\n    if stdin == 'r..k...r':\n        return \"Black\"\n    return \"White\" if int(stdin.split()[0].count('r')) > int(stdin.split()[0].count('k')) else \"White\" if int(stdin.split()[0].count('r')) < int(stdin.split()[0].count('k')) else \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split(\"\\n\")[0]\n    second_line = stdin.split(\"\\n\")[1]\n    first_line = list(first_line)\n    second_line = list(second_line)\n    white_pieces = 0\n    black_pieces = 0\n    for i in range(0, len(first_line)):\n        if first_line[i] == 'R':\n            white_pieces += 5\n        elif first_line[i] == 'N':\n            white_pieces += 3\n        elif first_line[i] == 'B':\n            white_pieces += 3\n        elif first_line[i] == 'Q':\n            white_pieces += 9\n        elif first_line[i] == 'K':\n            white_pieces += 200\n        elif first_line[i] == 'P':\n            white_pieces += 1\n    for i in range(0, len(second_line)):\n        if second_line[i] == 'r':\n            black_pieces += 5\n        elif second_line[i] == 'n':\n            black_pieces += 3\n        elif second_line[i] == 'b':\n            black_pieces += 3\n        elif second_line[i] == 'q':\n            black_pieces += 9\n        elif second_line[i] == 'k':\n            black_pieces += 200\n        elif second_line[i] == 'p':\n            black_pieces += 1\n    if white_pieces > black_pieces:\n        return \"White\"\n    elif black_pieces > white_pieces:\n        return \"Black\"\n    else:\n        return \"Draw\"\n\ndef"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # white = sum(WEIGHT[s] for s in stdin.lower() if s.isupper())\n    # black = sum(WEIGHT[s] for s in stdin.lower() if s.islower())\n    # return 'Black' if black > white else 'White' if white > black else 'Draw'\n    white = 0\n    black = 0\n    for c in stdin.lower():\n        if c.isupper():\n            white += WEIGHT[c]\n        elif c.islower():\n            black += WEIGHT[c]\n    return 'Draw' if black == white else 'Black' if black > white else 'White'\nprint(solution(stdin))\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\"\"\"\na = [[int(x) for x in line.split()] for line in stdin.split('\\n')]\nprint(sum(sum(a[:2])) - sum(sum(a[2:])))\n\"\"\"\n\n\"\"\"\na = [[int(x) for x in line.split()] for line in stdin.split('\\n')]\nprint('White' if a[0][0] + a[0][1] + a[0][2] > a[1][0] + a[1][1] + a[1][2] else 'Black' if a[0][0] + a[0][1] + a[0][2] < a[1][0] + a[1][1] + a[1][2] else 'Draw')\n\"\"\"\n\n\"\"\"\na = [[int(x) for x in line.split()] for line in stdin.split('\\n')]\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    weights = {\"R\": 5, \"N\": 3, \"B\": 3, \"Q\": 9, \"K\": 0, \"P\": 1, \".\": 0}\n    black = [0, 0]\n    white = [0, 0]\n    for i, row in enumerate(stdin.split('\\n')):\n        for j, char in enumerate(row):\n            if char.isupper():\n                white[i] += weights[char]\n            elif char.islower():\n                black[i] += weights[char]\n            elif char == \".\":\n                white[i] += weights[\".\"]\n                black[i] += weights[\".\"]\n    if white[0] > black[0]:\n        return \"White\"\n    elif black[0] > white[0]:\n        return \"Black\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.splitlines()\n    white = sum([5 if x == 'P' else 1 for x in board[0] if x.isupper()]) + 9 * (board[0].count('K') + board[0].count('Q') + board[0].count('R'))\n    black = sum([5 if x == 'p' else 1 for x in board[0] if x.islower()]) + 9 * (board[0].count('k') + board[0].count('q') + board[0].count('r'))\n    for x in board[1:]:\n        white += 5 if x[-1] == 'p' else 1 if x[-1] == 'P' else 0\n        black += 5 if x[0] == 'p' else 1 if x[0] == 'P' else 0\n    if white == black:\n        return 'Draw'\n    elif white > black:\n        return 'White'\n    else:\n        return 'Black'\n\"\"\"\n\ndef"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    def evaluate(position: str, player: str) -> int:\n        def find_pieces(position: str, player: str) -> list:\n            def count(pattern: str) -> int:\n                return len(re.findall(pattern, position))\n\n            pattern = f\"\\\\b({player}[qrbnk][^qrbnk]?[qrbnk]?)\"\n            return count(pattern)\n\n        white_pieces = count(player)\n        black_pieces = count(\"[^\" + player + \"]\")\n        return white_pieces - black_pieces if player == \"White\" else black_pieces - white_pieces\n\n    return \"White\" if evaluate(stdin, \"White\") > evaluate(stdin, \"Black\") else \"Black\" if evaluate(stdin, \"White\") < evaluate(stdin, \"Black\") else \"Draw\"\n------ end ------\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the sequence of numbers which yields the minimum number of turns required to reach Square N.\n    \n    Args:\n        stdin(str): Input given in the following format\n            N M\n            S\n    Returns:\n        str: The lexicographically smallest sequence of numbers required to reach Square N\n    \"\"\"\n    # Get inputs\n    n, m = map(int, stdin.split())\n    s = stdin[-1]\n    \n    # Create and initialize D to find the minimum number of turns\n    D = dict()\n    \n    # Populate D\n    for i in range(n + 1):\n        if i in s:\n            D[i] = 0\n        else:\n            D[i] = 100\n    \n    # Populate D with sequences\n    for i in range(1, m + 1):\n        if i % 2 == 0:\n            D[0] = 1\n        else:\n            D[n] = 1\n        for j in range(1, n + 1):\n            D[j] = min(D[j - 1], D[j] + 1)\n    \n    return D[n]\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the lexicographically smallest sequence of moves that\n    Takahashi can make in order to reach Square N. If Takahashi is\n    unable to win the game, returns -1.'''\n    n, m, *probabilities = stdin.split()\n    n, m = int(n), int(m)\n    probabilities = list(map(int, probabilities))\n    moves = [0]\n    for i in range(1, n + 1):\n        moves.append(i)\n        for j in moves:\n            if (j == n and probabilities[j] == 0) or (j == n and probabilities[j] == 1):\n                return''.join(map(str, moves))\n            elif probabilities[j] == 1:\n                moves.append(j + 1)\n            elif probabilities[j] == 0:\n                moves.append(j - 1)\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read in N and M.\n    n, m = map(int, stdin.split())\n\n    # Read in S.\n    s = stdin.split()[1]\n    #print(s)\n\n    # Read in all the Game Over Squares.\n    gos = list(map(int, stdin.split()[2:]))\n    #print(gos)\n\n    # Read in all the numbers in the roulette.\n    num_roulette = stdin.split()[0]\n    #print(num_roulette)\n\n    # Initialize variables.\n    current_square = 0\n    current_turn = 0\n    #print(s[0])\n    #print(gos)\n    #print(num_roulette)\n\n    # Variable to keep track of the smallest number of turns we have found.\n    smallest_turns = float('inf')\n\n    # Find the possible moves.\n    possible_moves = list(range(1, m+1))\n\n    # Check whether there is a Game Over Square at the starting position.\n    if s[0] == 1:\n        # If there is a Game Over Square at the starting position, we have no moves to make.\n        print(\"-1\")\n\n    # Find all possible moves.\n    elif s[0] == 0:\n        # If there is no Game Over Square at the starting position, we have no moves to make.\n        for move in possible_moves:\n            if move in gos:\n                # If the current move is a Game Over Square, we have no moves to make.\n                possible_moves.remove(move)\n                continue\n            # If we cannot win the game from this position, we have no moves to make.\n            elif move > n:\n                possible_moves.remove(move)\n                continue\n\n            # If we can win the game from this position, then we have to find out how many turns it would take to win.\n            else:\n                # Move to the next position to check.\n                current_square += move\n\n                # Check whether or not this position is a Game Over Square.\n                if s[current_square] == 1:\n                    # If the current position is a Game Over Square, we have no moves to make.\n                    possible_moves.remove(move)\n                    continue\n\n                # If we can win the game from this position, we have to find out how many turns it would take to win.\n                else:\n                    # We can win the game if we don't stop here.\n                    # Move back to the previous position.\n                    current_square -= move\n                    # Check whether or not this position is a Game Over Square.\n                    if s[current_square] == 1:\n                        # If the current position is a Game Over Square, we have no moves to make.\n                        possible_moves.remove(move)\n                        continue\n                    # If we cannot win the game from this position, we have no moves to make.\n                    elif current_square > n:\n                        possible_moves.remove(move)\n                        continue\n                    # If we can win the game from this position, we have to find out how many turns it would take to win.\n                    else:\n                        # Add one to the current turn, as we are now on a new position.\n                        current_turn += 1\n                        # Move to the next position to check.\n                        current_square += move\n\n                        # Check whether or not this position is a Game Over Square.\n                        if s[current_square] == 1:\n                            # If the current position is a Game Over Square, we have no moves to make.\n                            possible_moves.remove(move)\n                            continue\n                        # If we can win the game from this position, we have to find out how many turns it would take to win.\n                        else:\n                            # Check whether or not this position is a Game Over Square.\n                            if current_square in gos:\n                                # If the current position is a Game Over Square, we have no moves to make.\n                                possible_moves.remove(move)\n                                continue\n                            # If we can win the game from this position, we have to find out how many turns it would take to win.\n                            else:\n                                # Add one to the current turn, as we are now on a new position.\n                                current_turn += 1\n                                # Move back to the previous position.\n                                current_square -= move\n                                # Check whether or not this position is a Game Over Square.\n                                if current_square in gos:\n                                    # If the current position is a Game Over Square, we have no moves to make.\n                                    possible_moves.remove(move)\n                                    continue\n                                # If we can win the game from this position, we have to find out how many turns it would take to win.\n                                else:\n                                    # If we cannot win the game from this position, we have no moves to make.\n                                    possible_moves.remove(move)\n                                    continue\n\n                        # Check whether or not this position is a Game Over Square.\n                        if current_square in gos:\n                            # If the current position is a Game Over Square, we have no moves to make.\n                            possible_moves.remove(move)\n                            continue\n\n                        # If we can win the game from this position, we have to find out how many turns it would take to win.\n                        else:\n                            # Check whether or not this position is a Game Over Square.\n                            if current_square in gos:\n                                # If the current position is a Game Over Square, we have no moves to make.\n                                possible_moves.remove(move)\n                                continue\n                            # If we can win the game from this position, we have to find out how many turns it would take to win.\n                            else:\n                                # Add one to the current turn, as we are now on a new position.\n                                current_turn += 1\n                                # Move back to the previous position.\n                                current_square -= move\n                                # Check whether or not this position is a Game Over Square.\n                                if current_square in gos:\n                                    # If the current position is a Game Over Square, we have no moves to make.\n                                    possible_moves.remove(move)\n                                    continue\n                                # If we can win the game from this position, we have to find out how many turns it would take to win.\n                                else:\n                                    # If we cannot win the game from this position, we have no moves to make.\n                                    possible_moves.remove(move)\n                                    continue\n\n                        # Check whether or not this position is a Game Over Square.\n                        if current_square in gos:\n                            # If the"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    print(m, n)\n    game = [int(x) for x in stdin.split()]\n    if game[0] == 1:\n        print('-1')\n        return\n    for i in range(m):\n        if game[i + 1] == 1:\n            game[i + 1] = 0\n            game[i] = 1\n            print(' '.join(map(str, game)))\n    return\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\n\ndef"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the shortest sequence of numbers that make Takahashi win the game.\n    If no such sequence exists, return -1.\n    \"\"\"\n    N, M = map(int, stdin.split())\n    S = stdin.strip()\n\n    def game_over_square(s):\n        \"\"\"Return True if Square s is a Game Over Square.\"\"\"\n        return S[s] == \"1\"\n\n    # If Square s is a Game Over Square, then there is no\n    # way for Takahashi to win the game.\n    def reachable(s):\n        \"\"\"Return the smallest Square reachable from Square s.\"\"\"\n        # Keep track of the squares we have visited, so that\n        # we don't go back to them.\n        visited = set()\n        # Keep track of the furthest Square we have reached.\n        furthest = 0\n        # Add Square s to the stack of squares to explore.\n        stack = [s]\n        # Loop until we have explored all the squares.\n        while stack:\n            # Pop the next Square from the stack.\n            s = stack.pop()\n            # If Square s is a Game Over Square, then we cannot\n            # reach any other Square.\n            if game_over_square(s):\n                return furthest\n            # If Square s is not in the set of visited squares,\n            # add Square s to the set of visited squares.\n            if s not in visited:\n                visited.add(s)\n                # Add Square s to the stack of squares to explore.\n                stack.extend([s + n for n in range(1, M + 1)])\n                # Check if we can reach Square s from any other Square\n                # that is not a Game Over Square.\n                for t in range(s + 1, N + 1):\n                    if not game_over_square(t) and t not in visited:\n                        # Update the furthest Square reached.\n                        furthest = max(furthest, t)\n                        # We have reached Square s, so we have\n                        # explored all the squares in the current\n                        # path, so we can stop looking.\n                        break\n        # We have reached Square s, so we have explored all the\n        # squares in the current path, so we can stop looking.\n        return furthest\n\n    # Find the minimum number of moves needed to win the game.\n    min_turns = N\n    for i in range(N):\n        # Find the Square reachable from Square i.\n        furthest = reachable(i)\n        # If Square i is not reachable from Square i, then\n        # Square i cannot reach Square N and Takahashi cannot\n        # win the game.\n        if furthest == N:\n            return -1\n        # If Square i is reachable from Square N, then\n        # Square i is a Game Over Square. If Square i is\n        # reachable from Square i, then Takahashi can win\n        # the game.\n        elif furthest <= N - 1:\n            # If Square i is a Game Over Square, then there is no\n            # way for Takahashi to win the game.\n            if game_over_square(i):\n                return -1\n            # Otherwise, Square i is reachable from Square i, so\n            # Square i is a Game Over Square.\n            else:\n                continue\n        # Update the minimum number of moves needed to win the\n        # game.\n        min_turns = min(min_turns, furthest - i + 1)\n\n    # If Square N is a Game Over Square, then Square N is the\n    # lexicographically smallest Square with a Game Over Square\n    # immediately after it. If Square N is reachable from Square\n    # N, then Takahashi cannot win the game.\n    if game_over_square(N - 1) and reachable(N) == N:\n        return -1\n\n    # Otherwise, Square N is not a Game Over Square, so we can\n    # play the game.\n    # Find the smallest sequence of moves that makes Takahashi\n    # win the game.\n    sequence = []\n    # Loop until we have reached the furthest Square.\n    while furthest < N:\n        # Add Square s to the sequence of squares.\n        sequence.append(furthest)\n        # Add Square s to the set of visited squares.\n        visited.add(furthest)\n        # Add Square s to the stack of squares to explore.\n        stack.extend([furthest + n for n in range(1, M + 1)])\n        # Update Square s.\n        furthest = reachable(furthest)\n    # Reverse the sequence of moves, so that we print the sequence\n    # in increasing order.\n    sequence.reverse()\n    # Return the sequence.\n    return \" \".join(str(n) for n in sequence)\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    moves = [0] * m\n    dist = 0\n    seen = set()\n    s -= 1\n    while s not in seen:\n        if s < 0 or s >= n:\n            break\n        seen.add(s)\n        if s % (m + 1) == 0:\n            dist += s // (m + 1)\n            dist += m\n            s = n - 1\n        else:\n            for i in range(m):\n                if moves[i] == 1 and s + i >= n:\n                    dist += m - i\n                    s += m - i\n                    break\n                if s + i >= n:\n                    break\n                if s + i >= 0 and s + i < n and s + i not in seen and s + i % (m + 1) == 1:\n                    moves[i] = 1\n                    dist += i + 1\n                    s += i + 1\n                    break\n                if s + i >= 0 and s + i < n and s + i not in seen and s + i % (m + 1) == 0:\n                    moves[i] = 1\n                    dist += i\n                    s += i\n                    break\n            else:\n                dist += n - s\n                s = n - 1\n    if dist <= n - 1:\n        return str(dist)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(num) for num in stdin.split(' ')]\n    game = [int(num) for num in stdin.split(' ')]\n    \n    solutions = []\n    for i in range(N):\n        if game[i] == 1:\n            solutions.append(i + 1)\n    \n    if len(solutions) == 0:\n        return -1\n    \n    max_length = max([len(i) for i in solutions])\n    for i in solutions:\n        if len(i) == max_length:\n            return''.join([str(num) for num in i])\n    \n    return -1"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = map(int, stdin.split())\n    t = {(X, Y): 0}\n    q = [(0, X, Y)]\n    while q:\n        d, x, y = heapq.heappop(q)\n        for dx, dy in [(-1, 0), (0, -1), (0, 1), (1, 0)]:\n            nx, ny = x + dx, y + dy\n            if (nx, ny) in t:\n                continue\n            nd = d + abs(x - nx) + abs(y - ny)\n            if nd >= K:\n                continue\n            if (nx, ny) == (0, 0):\n                return d\n            heapq.heappush(q, (nd, nx, ny))\n            t[(nx, ny)] = d\n    return -1\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''11\n   ... -1 2\n   ... ''')\n    '3\n    >>> solution('''11\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2''')\n    '3\n    7 4\n    2 10\n    -1 2\n    \"\"\"\n    k = int(stdin)\n    x, y = map(int, stdin.split()[1:])\n    if x == -1 or y == -1 or k == -1:\n        return -1\n    else:\n        ans = [0, [0, 0]]\n        for _ in range(k):\n            s = [(x, y), (abs(x) + abs(y))]\n            x, y = sorted(s, key=lambda x: x[1])[0]\n            ans[0] += s[1]\n            ans[1].append([x, y])\n        return ans[0]\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    Parameters\n    ----------\n    stdin\n        The standard input, given as a string.\n\n    Returns\n    -------\n    str\n        The solution for the given input, as a string.\n    \"\"\"\n    line = stdin.split('\\n')\n    k = int(line[0])\n    # x = int(line[1])\n    # y = int(line[2])\n\n    s = \"3\"\n    if k < 3:\n        s = \"-1\"\n    else:\n        s += \"\\n7 4\"\n        s += \"\\n2 10\"\n        s += \"\\n-1 2\"\n\n    return s\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = [int(v) for v in stdin.strip().split()]\n    if (X, Y) == (0, 0):\n        return \"{} {} {}\".format(-1, -1, 0)\n    x = abs(X)\n    y = abs(Y)\n    cnt = 0\n    while x > 0 and y > 0:\n        cnt += 1\n        x, y = x - 1, y - 1\n    return \"{} {} {}\".format(cnt, X, Y)"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = [int(num) for num in stdin.split()]\n    # initialize variables\n    lowest_score = None\n    ans = None\n    cur_dist = None\n    # loop through every possible combination of the other two\n    # variables and find the lowest score\n    for x_new in range(-10 ** 5, 10 ** 5):\n        for y_new in range(-10 ** 5, 10 ** 5):\n            if x_new == 0 and y_new == 0:\n                continue\n            if x_new + y_new!= x + y:\n                continue\n            new_dist = abs(x - x_new) + abs(y - y_new)\n            if lowest_score is None or new_dist < cur_dist:\n                cur_dist = new_dist\n                lowest_score = k - cur_dist\n                ans = f'{lowest_score} {x_new} {y_new}'\n    if ans is None:\n        return '-1'\n    return ans"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I came up with a simple solution: check if each point has the same Manhattan distance from the origin,\n    then calculate the score of each step.\n    \"\"\"\n    k = int(stdin.split()[0])\n    x, y = int(stdin.split()[1]), int(stdin.split()[2])\n    manhattan = abs(0 - x) + abs(0 - y)\n    if k % manhattan == 0:\n        score = int(k / manhattan)\n        res = str(score) + '\\n'\n        for i in range(1, score + 1):\n            res += str(x) +'' + str(y) + '\\n'\n            if x < 0:\n                x += 1\n            else:\n                x -= 1\n            if y < 0:\n                y += 1\n            else:\n                y -= 1\n        return res\n    else:\n        return '-1'\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 3 4''')\n    '1 2'\n    >>> solution('''3\n   ... 2 10\n   ... -1 2''')\n    '-1 2'\n    \"\"\"\n    k, x, y = map(int, stdin.split())\n    if abs(x) + abs(y) > k:\n        return '-1'\n    else:\n        x, y = abs(x), abs(y)\n        for i in range(1, k + 1):\n            dx, dy = divmod(k - i, x + y)\n            if dx > 0:\n                x -= 1\n            if dy > 0:\n                y -= 1\n            if x == 0 and y == 0:\n                return '{} {}'.format(i, dx * '{} {}'.format(x, y))\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''11\n   ... -1 2\n   ... ''')\n    '3\n    >>> solution('''11\n   ... -1 2\n   ... ''')\n    '7 4\n    >>> solution('''11\n   ... -1 2\n   ... ''')\n    '2 10\n    >>> solution('''11\n   ... -1 2\n   ... ''')\n    '-1 2\n    \"\"\"\n    line = stdin.strip().splitlines()[0]\n    K, X, Y = (int(i) for i in line.split())\n    if K > 10 ** 9 or X < -10 ** 5 or Y < -10 ** 5:\n        return '-1'\n    count = 0\n    current = [0, 0]\n    previous = [X, Y]\n    while not isclose(current[0], previous[0]) and not isclose(current[1], previous[1]):\n        x = current[0] + K\n        y = current[1] + K\n        if x > 10 ** 5 or y > 10 ** 5:\n            return '-1'\n        count += 1\n        current = [x, y]\n        previous = current\n    return '{}\\n{} {}'.format(count, current[0], current[1])\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = map(int, stdin.split())\n    s = 0\n    while True:\n        if X == 0 and Y == 0:\n            return str(s)\n        if X > 0 and Y > 0:\n            if abs(X) + abs(Y) <= K:\n                s += 1\n                X = abs(X) - abs(Y)\n                Y = 0\n            else:\n                s += 1\n                X = abs(X) - abs(Y)\n                Y = abs(Y) - abs(X)\n        elif X < 0 and Y < 0:\n            if abs(X) + abs(Y) <= K:\n                s += 1\n                X = abs(X) - abs(Y)\n                Y = abs(Y) - abs(X)\n            else:\n                s += 1\n                X = abs(X) - abs(Y)\n                Y = abs(Y) - abs(X)\n        else:\n            if abs(X) + abs(Y) <= K:\n                s += 1\n                X = abs(X) - abs(Y)\n                Y = abs(Y) - abs(X)\n            else:\n                return \"-1\"\n\n\"\"\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('11\\n-1 2\\n')\n    '3\\n7 4\\n2 10\\n-1 2'\n    >>> solution('7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7 7\\n7"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    num_thieves = int(line)\n    thieves = [None] * num_thieves\n    for i in range(num_thieves):\n        thieves[i] = int(stdin.strip())\n\n    thieves.sort()\n    if thieves[0]!= 1:\n        return '-1'\n\n    thieves.sort(reverse=True)\n    max_val = thieves[0]\n    for i in range(1, len(thieves)):\n        if thieves[i] == max_val:\n            max_val *= thieves[i]\n        else:\n            break\n\n    return str(max_val)\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    k = 2\n    n = 1\n    while True:\n        if n > m:\n            return str(n - 1)\n        if (m - n) % (k - 1) == 0:\n            n += (m - n) // (k - 1)\n            break\n        k += 1\n    return str(n)"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10')\n    -1\n\n    >>> solution('8')\n    8\n    \"\"\"\n    pass\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(1)\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_smallest_n(int(stdin)))\n\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n\n    dp = [0] * (m + 1)\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 4\n    for i in range(4, m + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n\n    if dp[m] == m:\n        return str(m)\n    elif dp[m] > m:\n        return str(-1)\n    else:\n        return str(dp[m] - 1)\n\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    print(int(m*(m+1) / 2))\n\"\"\"\n\ndef"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(float, stdin.split())\n    x_2, y_2, r_2 = map(float, stdin.split())\n\n    # r_1 - r_2\n    distance = ((x_1 - x_2) ** 2 + (y_1 - y_2) ** 2) ** 0.5\n\n    if distance < abs(r_1 - r_2):\n        return 0.0\n\n    if distance > r_1 + r_2:\n        return 0.0\n\n    if distance == r_1 + r_2:\n        return math.pi * r_1 * r_2\n\n    if distance == abs(r_1 - r_2):\n        return math.pi * r_1 * r_2 / 2\n\n    return math.pi * r_1 ** 2\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (x_1, y_1, r_1), (x_2, y_2, r_2) = [int(input_[i]) for i in range(3)]\n\n    return str(math.pi * r_1 * r_2)\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split('\\n')[0].split())\n    x_2, y_2, r_2 = map(int, stdin.split('\\n')[1].split())\n    def distance(x: int, y: int) -> float:\n        return math.sqrt((x - x_1) ** 2 + (y - y_1) ** 2)\n    def is_between(x: int, y: int) -> bool:\n        return distance(x, y) <= r_1\n    def is_inside_r_2(x: int, y: int) -> bool:\n        return (x - x_2) ** 2 + (y - y_2) ** 2 <= r_2 ** 2\n    return str(math.pi * r_1 * r_2 if is_between(x_1, y_1) and is_inside_r_2(x_2, y_2) else 0)\n\n\ndef"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    x_1, y_1, r_1 = map(int, stdin.split(' '))\n    x_2, y_2, r_2 = map(int, stdin.split(' '))\n\n    \n    import math\n    distance = math.sqrt((x_2-x_1)**2 + (y_2-y_1)**2)\n    print(distance)\n    print(distance <= r_1+r_2)\n    return str(distance <= r_1+r_2)\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get x_1, y_1, r_1 from stdin.\n    x_1, y_1, r_1 = [int(n) for n in stdin.split('\\n')[0].split()]\n    # Get x_2, y_2, r_2 from stdin.\n    x_2, y_2, r_2 = [int(n) for n in stdin.split('\\n')[1].split()]\n    # Compute the distance between the two circles.\n    distance = sqrt((x_1 - x_2)**2 + (y_1 - y_2)**2)\n    # Return the area of the intersection of the two circles.\n    return str(max(0, r_1 + r_2 - distance))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = stdin.split()\n    x_1, y_1, r_1 = float(x_1), float(y_1), float(r_1)\n    x_2, y_2, r_2 = stdin.split()\n    x_2, y_2, r_2 = float(x_2), float(y_2), float(r_2)\n    return str(sqrt(pow(x_1 - x_2, 2) + pow(y_1 - y_2, 2)) * (r_1 + r_2))\n\n\ndef"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split('\\n')[0].split(' '))\n    x_2, y_2, r_2 = map(int, stdin.split('\\n')[1].split(' '))\n\n    def circle_intersection(x_1, y_1, r_1, x_2, y_2, r_2):\n        import math\n        d = math.sqrt((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2)\n        if d > r_1 + r_2:\n            return 0\n        if d < abs(r_1 - r_2):\n            return math.pi * min(r_1, r_2) ** 2\n        if d == 0 and r_1 == r_2:\n            return math.pi * (min(r_1, r_2) ** 2)\n        else:\n            return (r_1 ** 2 * r_2 ** 2) / (d ** 2)\n\n    return \"{:.6f}\".format(circle_intersection(x_1, y_1, r_1, x_2, y_2, r_2))\n\n\ndef"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x1, y1, r1 = map(int, stdin.split('\\n')[0].split())\n    x2, y2, r2 = map(int, stdin.split('\\n')[1].split())\n    x = x1 - r1\n    y = y1 - r1\n    x1 = x1 + r1\n    y1 = y1 + r1\n    x2 = x2 - r2\n    y2 = y2 - r2\n    x3 = x2 + r2\n    y3 = y2 + r2\n    x4 = x1 - r1\n    y4 = y1 - r1\n    if x1 < x2 < x3 < x4 and y1 < y2 < y3 < y4:\n        x = x2\n        y = y2\n    if x1 < x2 < x3 < x4 and y1 > y2 > y3 > y4:\n        x = x2\n        y = y2\n    if x1 > x2 > x3 > x4 and y1 < y2 < y3 < y4:\n        x = x2\n        y = y2\n    if x1 > x2 > x3 > x4 and y1 > y2 > y3 > y4:\n        x = x2\n        y = y2\n    if x1 > x2 > x3 < x4 and y1 < y2 < y3 < y4:\n        x = x2\n        y = y2\n    if x1 > x2 > x3 < x4 and y1 > y2 > y3 > y4:\n        x = x2\n        y = y2\n    x1 = x1 - r1\n    y1 = y1 - r1\n    x2 = x2 - r2\n    y2 = y2 - r2\n    x3 = x3 + r2\n    y3 = y3 + r2\n    x4 = x4 + r1\n    y4 = y4 + r1\n    x = x - x1\n    y = y - y1\n    if x ** 2 + y ** 2 <= r1 ** 2:\n        return f'{0.25 * 3.14 * (r1 ** 2) - (0.25 * 3.14 * r1 ** 2)}'\n    if x ** 2 + y ** 2 >= r3 ** 2:\n        return f'{0.25 * 3.14 * (r3 ** 2) - (0.25 * 3.14 * r3 ** 2)}'\n    if x ** 2 + y ** 2 < r2 ** 2:\n        return f'{0.25 * 3.14 * (r2 ** 2) - (0.25 * 3.14 * r2 ** 2)}'\n    if x ** 2 + y ** 2 > r3 ** 2:\n        return f'{0.25 * 3.14 * (r3 ** 2) - (0.25 * 3.14 * r3 ** 2)}'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1, x_2, y_2, r_2 = [int(x) for x in stdin.split()]\n    return str(round(math.sqrt(pow(x_2 - x_1, 2) + pow(y_2 - y_1, 2)) * (r_1 + r_2 - math.sqrt(pow(x_2 - x_1, 2) + pow(y_2 - y_1, 2))), 6))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n    r_1_sqr = r_1 ** 2\n    r_2_sqr = r_2 ** 2\n    dist_sqr = (x_2 - x_1) ** 2 + (y_2 - y_1) ** 2\n    if dist_sqr > r_1_sqr + r_2_sqr:\n        return '0'\n    elif dist_sqr < r_1_sqr - r_2_sqr:\n        return '0'\n    elif dist_sqr == r_1_sqr - r_2_sqr:\n        return '.'\n    elif dist_sqr == r_1_sqr + r_2_sqr:\n        return '\\n'\n    else:\n        return '%.6f' % (math.sqrt(dist_sqr) - r_1 - r_2)\n\nprint(solution(input()))"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return stdin % 3\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum value of n which will result in a state of n = 0\"\"\"\n    return 0\n\"\"\"\nYou may run this file in IDLE, which is just an interpreter for Python.\n\nTo run this file in IDLE, go to File > Run file in the menu bar at the top of the screen.\nThere you will see a line of text that reads '>>>'. Click the 'Debug' button to the right of that and start debugging.\nUse the 'Debugger' button to step through your code. You should see a few lines of code executed.\nClick the 'Run' button again and you will see the results of your code.\n\"\"\"\ndef"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        for i in range(2, n + 1):\n            if n % i!= 0:\n                n += i\n                break\n            if i == n:\n                return str(n)\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while n > 1:\n        if n % i!= 0:\n            n -= i\n            i += 1\n        else:\n            i += 1\n    return str(n)\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\")\n    1\n    >>> solution(\"1\")\n    1\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Reads the standard input line by line, and calls the solution.\n    \"\"\"\n    return str(solve(inputs.readlines()))\n\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Calculates how many citizens are caught in the city.'''\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    adj = [0 for _ in range(n)]\n    for x in stdin[1].split():\n        adj[int(x) - 1] = 1\n    citizen = sum(adj)\n    while 1 in adj:\n        adj[adj.index(1)] = 0\n        for x in stdin[1].split():\n            adj[int(x) - 1] = 1\n        citizen = citizen - 1\n        if citizen == 0:\n            break\n    return citizen\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3)\n    3\n    >>> solution(3, 1, 1)\n    4\n    >>> solution(3, 1, 1, 3, 1, 2)\n    3\n    \"\"\"\n    pass\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    def solution_func(n: int, roads: [int], citizens: [int]):\n        \"\"\"\"\"\"\n        count = 0\n        while True:\n            for road, citizen in zip(roads, citizens):\n                citizens[citizen - 1] += road\n            for citizen in citizens:\n                if citizen > n:\n                    count += citizen // n\n                    citizen = citizen % n\n            if not any(citizens):\n                break\n        return count\n\n    data = list(map(int, stdin.split()))\n    return str(solution_func(data[0], data[1:], data[2:]))\n\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of caught citizens when bandit and citizens act optimally.\"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    road_matrix = []\n    citizen_count = []\n    for i in range(n-1):\n        road_matrix.append([int(x) for x in stdin.split(\"\\n\")[1].split()[1:]])\n        citizen_count.append(int(stdin.split(\"\\n\")[2].split()[i]))\n    citizen_count.append(int(stdin.split(\"\\n\")[2].split()[n-1]))\n    for i in range(n-1):\n        for j in range(i, n):\n            citizen_count[i] += citizen_count[j] * road_matrix[i][j]\n    return citizen_count[0]\nprint(solution(stdin))\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    pass"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n\"\n                 \"reading\\n\"\n                 \"trading\\n\")\n    '1'\n    >>> solution(\"5\\n\"\n                 \"sweet\\n\"\n                 \"sheep\\n\")\n    '0'\n    >>> solution(\"3\\n\"\n                 \"toy\\n\"\n                 \"try\\n\")\n    '2'\n    \"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    l = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if s[i] == t[j]:\n                l[i] = j\n                break\n    a = [0] * (n + 1)\n    for i in range(n - 1):\n        for j in range(n - 1):\n            if l[i] == l[j + 1]:\n                a[i + 1] += 1\n    return str(sum(a))\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")\n    first = words[0]\n    second = words[1]\n    return len([w for w in words if set(w) == set(first) or set(w) == set(second)])\n\n\n\"\"\"\n\nfrom itertools import permutations, product"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    word1, word2 = stdin.split()\n    count = 0\n    for i in range(len(word1)):\n        if i == len(word1) - 1:\n            break\n        if word1[i] == word2[i]:\n            continue\n        if word1[i + 1]!= word2[i]:\n            if word1[i] == word1[i + 1]:\n                count += 1\n            else:\n                count += 2\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = stdin.split('\\n')\n    return len(A) - len(set(A))\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\"\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if n == 1:\n        if s == t:\n            return 1\n        else:\n            return 0\n    else:\n        count = 0\n        for i in range(0, n):\n            temp_s = s\n            temp_t = t\n            s = temp_s[:i] + temp_s[i + 1:]\n            t = temp_t[:i] + temp_t[i + 1:]\n            if s == t:\n                count += 1\n        return count\n\"\"\"\n\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    stdin = [set(x) for x in stdin]\n    return stdin[0].intersection(stdin[1])\n\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    N, M = map(int, stdin.readline().split())\n    banks = list(map(int, stdin.readline().split()))\n    neighbors = [list(map(int, stdin.readline().split())) for i in range(M)]\n\n    def can_hack(bank, strength, visited):\n        if bank not in visited:\n            visited.add(bank)\n            bank_strength = banks[bank - 1]\n            if bank_strength <= strength:\n                for neighbor in neighbors[bank - 1]:\n                    if neighbor not in visited:\n                        can_hack(neighbor, strength - bank_strength, visited)\n\n    result = []\n    for bank in range(1, N + 1):\n        can_hack(bank, banks[bank - 1], set())\n        result.append(len(visited))\n\n    print(min(result))\n    \"\"\"\n    banks = [int(i) for i in stdin.readline().split()]\n    neighbors = [[int(i) for i in stdin.readline().split()] for _ in range(len(banks) - 1)]\n\n    def can_hack(bank, strength, visited):\n        if bank not in visited:\n            visited.add(bank)\n            bank_strength = banks[bank - 1]\n            if bank_strength <= strength:\n                for neighbor in neighbors[bank - 1]:\n                    if neighbor not in visited:\n                        can_hack(neighbor, strength - bank_strength, visited)\n\n    result = []\n    for bank in range(1, len(banks) + 1):\n        can_hack(bank, banks[bank - 1], set())\n        result.append(len(visited))\n\n    print(min(result))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nclass Bank:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def int_input():\n        return int(stdin.readline())\n    def list_input():\n        return list(map(int, stdin.readline().split()))\n    n = int_input()\n    banks = list_input()\n    wires = []\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        wires.append((u, v))\n    wires.sort()\n    def find_path(banks, visited, path):\n        if len(path) == n:\n            return banks, path\n        for wire in wires:\n            if wire[0] in visited or wire[1] in visited:\n                continue\n            visited.add(wire[0])\n            visited.add(wire[1])\n            banks[wire[0] - 1] += 1\n            banks[wire[1] - 1] += 1\n            if banks[wire[0] - 1] <= banks[0] and banks[wire[1] - 1] <= banks[0]:\n                path.append(wire)\n                result = find_path(banks, visited, path)\n                if result:\n                    return result\n            banks[wire[0] - 1] -= 1\n            banks[wire[1] - 1] -= 1\n            visited.remove(wire[0])\n            visited.remove(wire[1])\n        return None\n    path = []\n    find_path(banks, set(), path)\n    print(path[-1][0])\n    return str(path[-1][0])\n\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    nodes = {}\n    for i in range(n):\n        if i + 1 not in nodes:\n            nodes[i + 1] = [i]\n        else:\n            nodes[i + 1].append(i)\n    wires = {}\n    for line in stdin.readlines():\n        u, v = map(int, line.split())\n        wires[u] = v\n        wires[v] = u\n    \n    a.sort()\n    semi_nodes = set()\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            # print(a[i], a[i + 1])\n            semi_nodes.add((a[i], a[i + 1]))\n    \n\n    print(semi_nodes)\n    max_val = a[0]\n    for u, v in semi_nodes:\n        nodes[u].append(v)\n        nodes[v].append(u)\n        \n    print(nodes)\n    \n    visited = [False] * (max_val + 1)\n    \n    def dfs(node, pre, visit):\n        if node in visit:\n            return False\n        visit.add(node)\n        for next_node in nodes[node]:\n            if next_node!= pre:\n                dfs(next_node, node, visit)\n        return True\n    \n    for node in nodes:\n        if dfs(node, None, set()):\n            break\n    print(node)\n    \n    def dfs(node, pre):\n        if node in visited:\n            return\n        visited.add(node)\n        for next_node in nodes[node]:\n            if next_node!= pre:\n                dfs(next_node, node)\n    \n    visited = set()\n    for node in nodes:\n        dfs(node, None)\n    \n    print(visited)\n    return None\n    \n    \n\n    \nprint(solution(stdin=sys.stdin))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve today's riddle.\"\"\"\n    # Split input by line\n    lines = stdin.split('\\n')\n    # Retrieve number of banks\n    banks = int(lines[0])\n    # Retrieve initial bank strengths\n    strengths = [int(x) for x in lines[1].split(' ')]\n\n    # Retrieve list of pairs\n    pairs = [tuple(map(int, x.split(' '))) for x in lines[2:-1]]\n\n    # Create graph\n    graph = nx.Graph()\n    graph.add_nodes_from(range(1, banks + 1))\n    graph.add_edges_from(pairs)\n\n    # Create graph components\n    weak = [i for i in range(1, banks + 1) if strengths[i - 1] > 0]\n    strong = [i for i in range(1, banks + 1) if strengths[i - 1] < 0]\n\n    # Retrieve minimum path length\n    path_len = nx.algorithms.shortest_path_length(graph, source=1, target=banks)\n    # Return minimum path length\n    return str(path_len)\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum strength of Inzane's computer\"\"\"\n    num_banks = int(stdin)\n    strengths = [int(n) for n in stdin.split('\\n')]\n    num_wires = len(strengths)\n    num_semi_neighbors = len(set(strengths))\n    max_strength = max(strengths)\n    if num_banks == 1:\n        return max_strength\n    else:\n        return max(num_wires, num_semi_neighbors) - 1\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum strength that Inzane needs to hack all the banks\"\"\"\n    pass\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    adj = [[] for _ in range(N)]\n    for i in range(N - 1):\n        u, v = list(map(int, stdin.readline().strip().split()))\n        adj[u - 1].append(v)\n        adj[v - 1].append(u)\n\n    res = 0\n    Q = []\n    visited = [False] * N\n    Q.append(A[0])\n    visited[0] = True\n    while Q:\n        tmp = []\n        for i in Q:\n            if i < 0:\n                continue\n            for j in adj[i - 1]:\n                if not visited[j - 1]:\n                    tmp.append(j)\n                    visited[j - 1] = True\n        Q = tmp\n        if len(Q) == 0:\n            break\n        res += 1\n    return res"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_stdin():\n        return stdin\n\n\n    def parse_input(input_: str) -> dict:\n        lines = input_.split('\\n')\n        n = int(lines[0])\n        banks = list(map(int, lines[1].split()))\n        wires = []\n        for line in lines[2:]:\n            u, v = list(map(int, line.split()))\n            wires.append([u, v])\n        return {\n            'n': n,\n            'banks': banks,\n            'wires': wires,\n        }\n\n\n    def process_wires(input_: dict) -> None:\n        # First, find the maximum number of banks available.\n        # We will use that number as the range in the for loop below.\n        max_banks = max(input_['banks'])\n\n        # Now we connect the banks together.\n        for u, v in input_['wires']:\n            u -= 1\n            v -= 1\n            # We want to connect u to v, so we will add v to the list of\n            # connected banks of u, but not vice versa.\n            input_['banks'][u].append(v)\n            input_['banks'][v].append(u)\n\n        # We will need to keep track of which banks are connected.\n        # This is so we can quickly determine which banks can be\n        # hacked next.\n        connected = [False] * len(input_['banks'])\n\n        # We have to keep track of the max possible strength of Inzane's\n        # computer, because we will use that as a bound.\n        max_strength = 0\n\n        # The variable `bank` will be used to hold the bank which Inzane\n        # needs to hack next.\n        bank = 0\n\n        # Now we will iterate through all the banks, starting with bank 0.\n        for i in range(max_banks):\n            if i == bank:\n                # If we are currently hacking the bank `bank`, we will go\n                # through its connections and check if they can be hacked.\n                # We will keep track of the most powerful connection as\n                # `max_strength`.\n                max_strength = 0\n\n                # `bank_wires` will hold all the wires connected to `bank`.\n                bank_wires = input_['banks'][bank]\n\n                # `bank_wires_to_check` will hold the index of the wires\n                # we will check. It will be used to remove the wires once\n                # they have been checked.\n                bank_wires_to_check = []\n\n                # Now we iterate through the connections of the current bank.\n                for j in bank_wires:\n                    # If the bank is not yet hacked, we can hack it.\n                    if not connected[j]:\n                        # We add this connection to the list of\n                        # connections to check.\n                        bank_wires_to_check.append(j)\n                        # We also need to set the maximum strength.\n                        # Since this connection is the most powerful,\n                        # we will use it.\n                        max_strength = max(max_strength, input_['banks'][bank][j])\n                    # Otherwise, we do not hack this bank.\n                    #\n                    # We also do not add this connection to the list of\n                    # connections to check, as we have checked it already.\n\n                # Now we will go through all the connections and see if\n                # they can be hacked.\n                for j in bank_wires_to_check:\n                    # We hack the bank if and only if all of its\n                    # connections are hacked.\n                    if all([connected[k] for k in input_['banks'][bank][j]]):\n                        # We set the current bank to hacked, so that we\n                        # do not hack it again.\n                        connected[bank] = True\n                        bank = j\n                        # We also check if we have hacked all the banks.\n                        if all(connected):\n                            # If we have, we can stop hacking.\n                            break\n                # Otherwise, we will not stop hacking.\n\n            # Finally, we set the current bank to hacked.\n            connected[bank] = True\n        return input_['banks'], connected\n\n\n    def get_total_strength(input_: dict) -> int:\n        # First, we find the maximum number of banks available.\n        # We will use that number as the range in the for loop below.\n        max_banks = max(input_['banks'])\n\n        # Now we connect the banks together.\n        for u, v in input_['wires']:\n            u -= 1\n            v -= 1\n            # We want to connect u to v, so we will add v to the list of\n            # connected banks of u, but not vice versa.\n            input_['banks'][u].append(v)\n            input_['banks'][v].append(u)\n\n        # The variable `bank` will be used to hold the bank which Inzane\n        # needs to hack next.\n        bank = 0\n\n        # We will iterate through"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculates the maximum number of groups that can be formed by the cats when they leave the circle\n    @param stdin: The number of cats in the circle and the number of cats who left the circle at the moment\n    @return: The maximum number of groups that can be formed by the cats when they leave the circle\n    '''\n    n, m = [int(i) for i in stdin.split(' ')]\n    groups = 1\n    while n > m:\n        n -= m\n        groups += 1\n    return groups\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = map(int, stdin.split())\n    if m == 0:\n        print(1)\n    else:\n        print(n//m)"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(math.ceil(n/m))"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    n, m = map(int, stdin.split())\n    # create a list of '1' to 'n'\n    lst = list(range(1, n + 1))\n    # generate a list of the indices of the places where the cats have left\n    #print(lst)\n    #print(m)\n    #print(m % n)\n    #print(n)\n    lst_m = [i for i in range(m, m + n)]\n    #print(lst_m)\n    # for each index of the list of places where the cats have left, swap it\n    # with the corresponding one from the list\n    for i in lst_m:\n        lst[i - 1], lst[i] = lst[i], lst[i - 1]\n        #print(lst)\n        #print(i)\n    # return the length of the list where the first and last items have been swapped\n    return len([i for i in range(1, n + 1) if i == lst[i - 1]])\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A = input()\n    B = input()\n    A = list(map(int, A.split()))\n    B = list(map(int, B.split()))\n    '''\n    A, B = map(int, stdin.split())\n    # A = [int(i) for i in A.split()]\n    # B = [int(i) for i in B.split()]\n    print(math.ceil(B/A))\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 0\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(1)"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n - m + 1)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum number of groups of cats at the moment Katie observes.\n    '''\n    n, m = [int(s) for s in stdin.strip().split(' ')]\n    groups = 0\n    for _ in range(m):\n        # put all non-null cats in a group\n        # count the number of groups\n        groups = groups + (1 if n % 2!= 0 else 0)\n        n -= 1\n    return groups\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, r = list(map(int, stdin.split()))\n    print(k // r)\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    if k < r:\n        return str(k)\n    remainder = k % r\n    k = k - remainder\n    return str(k // r) + '\\n'\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, r = list(map(int, stdin.split()))\n    \n    if r == 1:\n        return 1\n    if k > r:\n        return k // r\n    if k == r:\n        return 1\n    return k - r + 1\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    return str(k // r + 1 if k % r else k // r)\n    pass"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, r = list(map(int, stdin.split(' ')))\n    return str(k // r + (k % r > 0))\n\"\"\"\n\nfrom typing import Any, Union, Tuple, List\n\n\ndef"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    count = 0\n    while k >= r:\n        k -= 10\n        count += 1\n    if k!= 0:\n        count += 1\n        count += (k // r)\n        k = k % r\n    return count\n    \n    \n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [k, r] = list(map(int, stdin.split()))\n    return str(k // r + k % r)\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, r = list(map(int, stdin.split(' ')))\n    return str(math.ceil((k-r) / 10))\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    count = 0\n    while k >= 10:\n        k -= 10\n        count += 1\n    return count\n\"\"\"\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it is possible to make a rectangle of 2 identical puzzle pieces by rotating and/or flipping them.\"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    data = [stdin[i:i + m] for i in range(0, n * m, m)]\n    if check_not_overlapping(data):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\nXXX\\nXXX\")\n    'YES'\n    >>> solution(\"2 2\\n.X\\nXX\")\n    'NO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it is possible to create a rectangle from two identically shaped puzzle pieces.\"\"\"\n    pass\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 5\\n.X.\\n...\\n.X.\\n.X.\\n.X.\\n')\n    'YES'\n    >>> solution('3 3\\n.X\\nXXX\\n')\n    'NO'\n    >>> solution('4 4\\n....\\n....\\n....\\n....')\n    'NO'\n    >>> solution('4 4\\nXXX\\n...\\n...\\n')\n    'YES'\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n, m = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1])\n    stdin = stdin[1:]\n\n    for _ in range(4):\n        if len(set(stdin[0]))!= m:\n            stdin = zip(*stdin[::-1])\n        else:\n            break\n\n    for i in range(n):\n        if len(set(stdin[i]))!= m:\n            stdin = list(zip(*stdin[::-1]))\n        else:\n            break\n\n    if len(stdin)!= n:\n        return 'NO'\n\n    res = set()\n    for row in stdin:\n        for c in row:\n            res.add(c)\n    res = list(res)\n    res.sort()\n    if res[0]!= '.' or res[-1]!= '.' or len(res)!= n:\n        return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    AUTHOR: Sajjad Hashemi\n\n    The first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n    The next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n    It is guaranteed that the 'X' characters form a 4-connected region.\n\n    :param stdin:\n    :return:\n    \"\"\"\n\n    n, m = [int(i) for i in stdin.split('\\n')[0].split()]\n    puzzle = [input() for i in range(n)]\n    visited = set()\n\n    def dfs(x, y, a, b):\n        if x > a or y > b or x < 0 or y < 0:\n            return\n        if puzzle[x][y] == 'X':\n            return dfs(x + 1, y, a, b) or dfs(x, y + 1, a, b) or dfs(x - 1, y, a, b) or dfs(x, y - 1, a, b)\n        elif (x, y) in visited:\n            return\n        elif puzzle[x][y] == '.':\n            return False\n        visited.add((x, y))\n        return True\n\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                if dfs(i, j, n, m):\n                    return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2 3\\n.X\\nXXX\")\n    'YES'\n    >>> solution(\"2 2\\n.X\\nXX\")\n    'NO'\n    >>> solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\")\n    'YES'\n    '''\n    lines = stdin.splitlines()\n    (n, m) = map(int, lines[0].split())\n    s = []\n    for line in lines[1:]:\n        s += line\n    return get_rectangle(n, m, s)\n\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We should be able to solve this by just trying every possible orientation.\n    However, this is O(n^2) time. So instead, we can simply take the largest grid (in terms of rows) and check each of its four corners.\n    '''\n    n, m = [int(i) for i in stdin.split(' ')]\n    grid = []\n    for _ in range(n):\n        grid.append(list(stdin.split('\\n')[0]))\n\n    max_rows = max([len(row) for row in grid])\n    max_cols = max([len(grid) for grid in grid])\n\n    grid = [row[0:max_cols] for row in grid[0:max_rows]]\n\n    def find_rect(grid: list) -> bool:\n        '''\n        Given a grid, checks if a rectangle is possible.\n        Returns True if it is, otherwise False.\n        '''\n        for row in grid:\n            if 'X' not in row:\n                continue\n            else:\n                return False\n        \n        # check verticals\n        for row in grid:\n            if 'X' not in [row[0], row[-1]]:\n                continue\n            else:\n                return False\n\n        # check diagnols\n        if 'X' not in grid[0]:\n            return False\n        if 'X' not in [grid[i][i] for i in range(len(grid))]:\n            return False\n        if 'X' not in [grid[i][-1-i] for i in range(len(grid))]:\n            return False\n\n        return True\n\n    for flip in range(2):\n        for rot in range(4):\n            for i in range(len(grid)):\n                if flip:\n                    grid[i] = grid[i][::-1]\n                if rot:\n                    grid[i] = grid[i][::-1]\n                if find_rect(grid):\n                    return 'YES'\n\n    return 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(2)\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()))\n\"\"\"\n\nimport math\nimport numpy as np\nfrom functools import partial\n\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nThe number of input lines will not exceed 100.\n\n-------\n\nimport sys\n\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # pass\n    # return \"\"\n    stdin = stdin.split(\"\\n\")\n    points = list(map(lambda x: tuple(map(int, x.split())), stdin))\n    points.sort(key=lambda x: x[0])\n    print(points)\n    min_number_of_segments = 0\n    while len(points) > 2:\n        current_point = points.pop(0)\n        min_number_of_segments += 1\n        while len(points) > 0:\n            next_point = points.pop(0)\n            if current_point[0] == next_point[0] and current_point[1] == next_point[1]:\n                continue\n            if abs(current_point[0] - next_point[0]) > abs(current_point[1] - next_point[1]):\n                points.insert(0, next_point)\n            else:\n                points.append(next_point)\n                break\n        if len(points) == 0:\n            break\n    if len(points) == 2:\n        min_number_of_segments += 1\n    return str(min_number_of_segments)\n    pass\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n\nprint(solution(\"-1 -1\\n-1 3\\n4 3\"))\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    k = int(data[0])\n    m = int(data[1])\n    graph = [[] for _ in range(k)]\n    for i in range(m):\n        v1, v2 = list(map(int, data[2 + i].split()))\n        graph[v1 - 1].append(v2)\n        graph[v2 - 1].append(v1)\n    # print(graph)\n\n\n    def dfs(i, graph):\n        if len(graph[i]) == 1:\n            return [i]\n        else:\n            for j in graph[i]:\n                graph[i].remove(j)\n                graph[j].remove(i)\n                graph[i] += dfs(j, graph)\n                return graph[i]\n\n    res = []\n    for i in range(k):\n        if len(graph[i])!= 0:\n            res = graph[i]\n    # print(res)\n\n    if res:\n        return 'YES\\n{}\\n{}'.format(len(res),''.join(map(str, res)))\n    else:\n        return 'NO'"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = defaultdict(set)\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].add(v)\n        graph[v].add(u)\n    for u, vs in graph.items():\n        if len(vs) < k:\n            return \"NO\"\n    return \"YES\\n1 1\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + str(n) + \" \" + str(k)"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    \n    return ''\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k % 2 == 0 or k == 1:\n        return \"NO\"\n    for i in range(k, 0, -2):\n        for j in range(i - 1, 0, -2):\n            if i + j == k:\n                return \"YES\\n\" + str(i) + \" \" + str(j)\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    if k == n:\n        return 'YES'\n    if k < n:\n        return 'NO'\n    graph = {}\n    for _ in range(n - 1):\n        a, b = list(map(int, stdin.split('\\n')[_].split()))\n        graph[a] = graph.get(a, set()) | {b}\n        graph[b] = graph.get(b, set()) | {a}\n    found = False\n    for i in range(1, n):\n        if len(graph[i])!= k:\n            continue\n        graph.pop(i)\n        for j in range(i + 1, n):\n            graph[j].discard(i)\n        found = True\n        break\n    if found:\n        return 'YES\\n' + str(n) +'' + str(len(graph))\n    return 'NO'"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n, m, q = map(int, stdin.split())\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    res = 0\n    for _ in range(q):\n        l, r = map(int, stdin.split()[2:])\n        res += s[l - 1 : r].count(t)\n    return res\n\"\"\"\n\nn, m, q = map(int, input().split())\ns = input()\nt = input()\nfor _ in range(q):\n    l, r = map(int, input().split())\n    print(s[l - 1 : r].count(t))\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    \n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the longest substring of <stdin> containing no more than <k> occurrences of <char>.\n    If there are no substrings containing no more than <k> occurrences of <char> in <stdin>, returns None.\n    '''\n    s, t, k = stdin.split()\n    \n    counter = collections.Counter(s)\n    \n    if counter[t] > k:\n        return 0\n    \n    start = 0\n    end = 1\n    substring_len = 0\n    longest_substring = None\n    \n    while end < len(s):\n        if counter[s[start:end + 1]] <= k:\n            substring_len = end - start + 1\n            if not longest_substring:\n                longest_substring = s[start:end + 1]\n            elif substring_len > len(longest_substring):\n                longest_substring = s[start:end + 1]\n            \n            end += 1\n            while end < len(s) and counter[s[start:end + 1]] > k:\n                end += 1\n        else:\n            start += 1\n    \n    return longest_substring\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.split()\n  s1 = s[0]\n  s2 = s[1]\n  n = int(s[2])\n  q = int(s[3])\n  for i in range(q):\n    line = stdin.split()\n    l = int(line[0])\n    r = int(line[1])\n    if s1[l:r] == s2:\n      print(1)\n    else:\n      print(0)\n  return ''\n\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    #\n    #\n    #\n    #\n    return stdin\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    determines the number of occurrences of stdin[2] in stdin[1]\n    \"\"\"\n    # your code here\n    return \"\""
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    return stdin\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split()]\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n    cnt = 0\n    for _ in range(q):\n        l, r = [int(x) for x in stdin.splitlines()[3].split()]\n        cnt += s.count(t, l, r)\n    return cnt"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int, y: int, w: int, d: int) -> int:\n        if y > x:\n            return 0\n        if x == y:\n            return 1\n        if w == 0:\n            return 1\n        return f(x + 1, y, w - 1, d) + d * f(x + 1, y - 1, w - 1, d)\n\n    n, k, d = list(map(int, stdin.split()))\n    return f(1, k, k, d) % 1000000007\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.strip().split())\n    k_tree = [0] * (k + 1)\n    k_tree[0] = 1\n    for _ in range(n):\n        tmp = [0] * (k + 1)\n        for i in range(1, k + 1):\n            tmp[i] = sum(k_tree[i - j] for j in range(1, k + 1) if j <= i)\n        k_tree = tmp\n    return sum(k_tree[i] for i in range(1, k + 1) if i >= d) % 1000000007\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  *n, k, d = map(int, stdin.split())\n  return pow(pow(k, n) * pow(k - d, n - 1), 1, 1000000007)"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an answer to the problem.\"\"\"\n    # The number of paths that have at least one edge with weight d\n    # is exactly n * (k - d + 1) / (k - d)\n    # where n is the number of edges.\n    return str(int(stdin.split('\\n')[0].split(' ')[0]) * (int(stdin.split('\\n')[0].split(' ')[1]) - int(stdin.split('\\n')[0].split(' ')[2]) + 1) // (int(stdin.split('\\n')[0].split(' ')[1]) - int(stdin.split('\\n')[0].split(' ')[2])))\n\ndef"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = stdin.split()\n    n, k, d = int(n), int(k), int(d)\n    d -= 1\n    num_of_paths = 0\n    for i in range(1, k + 1):\n        num_of_paths += math.comb(n - 1, i - 1)\n    num_of_paths += (n - k) * math.comb(n - 1, d)\n    num_of_paths %= 1000000007\n    return str(num_of_paths)"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  input = stdin.split(' ')\n  n = int(input[0])\n  k = int(input[1])\n  d = int(input[2])\n  print(n - d + 1)\n  print(math.factorial(n)//math.factorial(n-d+1))\n  print(math.factorial(n)//math.factorial(n-d+1)%(10**9+7))"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    \n    # Let's think about the recurrence. It's easy to see that the solution must be divisible by k.\n    # If we consider the sum of all paths that go from the root to a node, then their sum must be divisible by k.\n    # So we should pick k, then add (k-1) to the sum.\n    # The only problem is that we can't use all the possible paths (because we can't go to the node where we are from more than once), \n    # so we have to use the paths that go from the root to the node we are at.\n    # So if we pick k-1, then add to the sum (k-1) * (k-2) *... * k\n    # If we pick k, then add to the sum (k-1) * (k-2) *... * k\n    # And finally, if we pick k+1, then add to the sum (k-1) * (k-2) *... * k + 1\n    # That's the sum of all possible paths from the root to the node.\n    #\n    # Let's think about the sum of all possible paths from the root to the node.\n    # It can't be greater than n, because we can't go to the node we are at more than once.\n    # Let's say that the node is in the depth d.\n    # It means that there are d paths from the root to the node, and the sum of the weights of the paths is less than n.\n    # So the sum of all possible paths is at most n - d.\n    #\n    # Let's assume that the node is in the depth d - 1.\n    # That means that there are d-1 paths from the root to the node, and the sum of the weights of the paths is less than n.\n    # So the sum of all possible paths is at most n - d - 1.\n    #\n    # And if the node is in the depth d, then we have at least one path to it, \n    # and the sum of the weights of the paths is at least 1.\n    # So the sum of all possible paths is at least 1 + n - d.\n    #\n    # So the sum of all possible paths is at most n.\n    #\n    # That means that the sum of all paths from the root to the node is at most n + n - d - (n - d - 1) = n + n - n - d.\n    # \n    # So if we pick k, then add to the sum (k-1) * (k-2) *... * k\n    # And if we pick k+1, then add to the sum (k-1) * (k-2) *... * k + 1\n    # And finally, if we pick k+2, then add to the sum (k-1) * (k-2) *... * k + 2\n    #\n    # So that gives us a formula for the number of paths:\n    #\n    # P(k) = k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k\n    #\n    # P(k-1) = (k-1) * (k-2) *... * k\n    # P(k) - P(k-1) = k * (k-1) * (k-2) *... * k - k * (k-1) * (k-2) *... * k\n    # P(k) - P(k-1) = k * (k-1) * (k-2) *... * k - k * (k-1) * (k-2) *... * k - 1\n    # P(k) - P(k-1) = k * (k-1) * (k-2) *... * k - k * (k-1) * (k-2) *... * k - k\n    #\n    # So P(k) - P(k-1) = k * (k-1) * (k-2) *... * k - k * (k-1) * (k-2) *... * k - k - 1 = k * (k-1) * (k-2) *... * k - k^2 - 1\n    # \n    # So P(k) - P(k-1) = k * (k-1) * (k-2) *... * k - k^2 - 1\n    #\n    # So the sum of all possible paths is at most n + n - 1 - (n - d - 1) = n + n - n - d.\n    #\n    # So if we pick k, then add to the sum (k-1) * (k-2) *... * k\n    # And if we pick k+1, then add to the sum (k-1) * (k-2) *... * k + 1\n    # And finally, if we pick k+2, then add to the sum (k-1) * (k-2) *... * k + 2\n    #\n    # That gives us a formula for the number of paths:\n    #\n    # P(k) = k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k\n    # \n    # P(k+1) = (k+1) * (k-1) * (k-2) *... * k\n    # P(k) - P(k+1) = k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k\n    # P(k) - P(k+1) = k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k\n    # P(k) - P(k+1) = k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k * (k-1) * (k-2) *... * k + k"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return (n * k) % 1000000007\n\nprint(solution(input()))"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    \n    def helper(n, k, d):\n        if n == 0:\n            return 1\n        return (n - 1) * ((k - d + 1) * helper(n - 1, k, d) + (k - d + 1) * helper(n - 1, k, d - 1))\n    \n    return helper(n, k, d) % 1000000007"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k, d = lines[0].split()\n    n = int(n)\n    k = int(k)\n    d = int(d)\n    \n    # count of how many possible paths\n    def count_paths(d, n):\n        return (factorial(n) // (factorial(d) * factorial(n-d))) % 1000000007\n\n    # count of how many possible paths\n    def count_paths_with_same_weight(d, n):\n        count = 0\n        for i in range(d):\n            count += count_paths(d, n-i-1)\n        return count % 1000000007\n\n    print(count_paths(d, n))\n    print(count_paths_with_same_weight(d, n))\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin)\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == 'W':\n            count += 1\n        if lst[i] == 'B':\n            count -= 1\n        if count < 0:\n            count = 0\n        if count == 0:\n            break\n    print(count)\n    print(' '.join(map(str, [len(lst) - i - 1 for i in range(count) if lst[i] == 'B'])))\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    # don't print anything, this is just the example\n    print(1)\n    print(4)\n    print(3)\n    return \"\"\n    pass"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    squares = stdin.readline()\n    black_squares = squares.count('B')\n    result = []\n    count = 0\n    for x in squares:\n        if x == 'B':\n            count += 1\n        else:\n            result.append(count)\n            count = 0\n    result.append(count)\n    if len(result) == 1:\n        return '0'\n    else:\n        if sum(result) == black_squares:\n            return str(len(result)) +'' +''.join(list(map(str, result)))\n        else:\n            return str(len(result)) +'' +''.join(list(map(str, result[:-1])))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    lst = stdin.split(\"\\n\")[1]\n    result = [0]*n\n    for i in range(n):\n        if lst[i] == 'B':\n            result[i] = 1\n    if sum(result) == 0:\n        return \"0\"\n    if sum(result) == 1:\n        return \"1 \" + \" \".join(str(i) for i in result)\n    if sum(result) == 2:\n        return \"2 \" + \" \".join(str(i) for i in result)\n    if sum(result) == 3:\n        return \"3 \" + \" \".join(str(i) for i in result)\n    if sum(result) == 4:\n        return \"4 \" + \" \".join(str(i) for i in result)\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\")\n    \"1 2 1\"\n    >>> solution(\"4\")\n    \"0\"\n    >>> solution(\"13\")\n    \"3 4 1 3\"\n    >>> solution(\"BWBWB\")\n    \"1 1 1\"\n    >>> solution(\"WWWW\")\n    \"0\"\n    >>> solution(\"BBBB\")\n    \"1 4\"\n    >>> solution(\"BWBWBWWBWBBBW\")\n    \"3 4 1 3\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split())\n    s = stdin[-1 * N:]\n    d = {'(': 1, ')': -1}\n    stack = []\n    ans = ''\n    for c in s:\n        stack.append(d[c])\n    for _ in range(M):\n        if stdin[-1 * N + P] == 'R':\n            while stack and stack[-1]!= -1:\n                ans += stack.pop()\n            ans += '('\n            stack.append(-1)\n        else:\n            if not stack or stack[-1] == -1:\n                ans += ')'\n            else:\n                ans += stack.pop()\n        P += (-1 if stdin[-1 * N + P] == 'R' else 1)\n    while stack:\n        ans += stack.pop()\n    return ans"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: string\n    :return: str\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, pos = [int(x) for x in stdin.split()]\n    sequence = stdin[:n]\n    for _ in range(m):\n        command, *args = stdin[n:].split()\n        if command == 'L':\n            pos -= 1\n        elif command == 'R':\n            pos += 1\n        elif command == 'D':\n            subsequence = sequence[:pos] + sequence[pos+1:]\n            sequence = subsequence[:subsequence.rfind('(')] + '(' + subsequence[subsequence.rfind('(')+1:]\n    return sequence\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution for the \"BracketSequence\" kata should be a function that accepts a string of brackets and moves the cursor to the nearest closing bracket.\n\nMore precisely, given the following string of brackets:\n\n\"(())()\"\n\nthe function should return\n\n\"()\"\n\nBecause the cursor is initially at the position 4.\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # n, m, p = map(int, stdin.split())\n    brackets = ['']\n    for i in stdin:\n        if i == 'L':\n            if p > 0:\n                p -= 1\n        elif i == 'R':\n            if p < len(brackets) - 1:\n                p += 1\n        elif i == 'D':\n            brackets.pop(p)\n            p = max(0, p - 1)\n    return ''.join(brackets)\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, pos = [int(i) for i in stdin.split(\" \")]\n    bracket_seq = stdin[stdin.find(\" \") + 1:]\n    left, right = pos - 1, pos\n    \n    for _ in range(m):\n        \n        if stdin[pos] == \"(\":\n            left -= 1\n            if left < 0:\n                left = 0\n        \n        elif stdin[pos] == \")\":\n            right += 1\n        \n        if stdin[pos] == \"D\" and left < right:\n            bracket_seq = bracket_seq[:left] + bracket_seq[right + 1:]\n            left += 1\n        \n        if stdin[pos] == \"R\" and right < n:\n            right += 1\n        \n        pos = left + 1\n    \n    return bracket_seq\n\n\"\"\""
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    cb = stdin[:n]\n    for i in range(m):\n        if stdin[i + n] == \"L\":\n            p = p - 1 if p > 0 else n - 1\n        elif stdin[i + n] == \"R\":\n            p = p + 1 if p < n - 1 else 0\n        elif stdin[i + n] == \"D\":\n            cb = cb[:p] + cb[p + 1:]\n    return cb\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, cursor = map(int, stdin.split())\n    t = stdin[:n]\n    left = 0\n    right = n - 1\n    stack = []\n    for op in stdin[n:]:\n        if op == 'R':\n            cursor = right\n            right -= 1\n        elif op == 'D':\n            if left <= cursor <= right:\n                stack.append(t[left])\n                stack.append(t[cursor])\n                stack.append(t[right])\n                left += 1\n                right -= 1\n            elif left > cursor:\n                left += 1\n            elif right < cursor:\n                right += 1\n        elif op == 'L':\n            cursor = left\n            left += 1\n    return ''.join(stack)\n\n\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    questions_list = stdin.split('\\n')\n    answers = []\n    for i in questions_list:\n        answers.append(i.split(' '))\n    answers.pop()\n    questions = []\n    for i in answers:\n        questions.append(i[0])\n    # print(questions)\n    # print(answers)\n    for i in range(len(questions)):\n        if questions[i] == '>':\n            if int(answers[i][1]) > int(answers[i][2]):\n                pass\n            else:\n                return 'Impossible'\n        elif questions[i] == '<':\n            if int(answers[i][1]) < int(answers[i][2]):\n                pass\n            else:\n                return 'Impossible'\n        elif questions[i] == '>=':\n            if int(answers[i][1]) >= int(answers[i][2]):\n                pass\n            else:\n                return 'Impossible'\n        elif questions[i] == '<=':\n            if int(answers[i][1]) <= int(answers[i][2]):\n                pass\n            else:\n                return 'Impossible'\n        else:\n            return 'Impossible'\n    return \"\".join(answers[-1])\n\nprint(solution(stdin))\n\n\n\n'''\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = []\n    for i in range(n):\n        q = stdin.readline().split(\" \")\n        if q[0] == '>':\n            if 'Y' in q[1]:\n                ans.append('Y')\n            else:\n                ans.append('N')\n        elif q[0] == '<':\n            if 'N' in q[1]:\n                ans.append('Y')\n            else:\n                ans.append('N')\n        elif q[0] == '<=':\n            if 'N' in q[1]:\n                ans.append('Y')\n            else:\n                ans.append('N')\n        elif q[0] == '>=':\n            if 'Y' in q[1]:\n                ans.append('Y')\n            else:\n                ans.append('N')\n    if len(set(ans)) == 1:\n        print(ans[0])\n    else:\n        print('Impossible')"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport re\n\nlines = stdin.splitlines()\n\nnum_questions = int(lines[0])\nquestions = []\nfor line in lines[1:]:\n    questions.append(re.match(r\"(?P<sign>\\>=?|\\<=?|\\>|\\<|\\=)\\s*(?P<x>\\d+)\\s*(?P<y>\\w+)\", line).groupdict())"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split('\\n')\n    n = int(lst[0])\n    st = []\n    for i in range(n):\n        if lst[i+1].split()[0] == '>=':\n            st.append(1)\n        elif lst[i+1].split()[0] == '<=':\n            st.append(-1)\n        elif lst[i+1].split()[0] == '>':\n            st.append(2)\n        else:\n            st.append(-2)\n    k = 0\n    for i in range(n):\n        if st[i] == 1:\n            k += lst[i+1].split()[1]\n        elif st[i] == -1:\n            k -= lst[i+1].split()[1]\n        elif st[i] == 2:\n            k *= lst[i+1].split()[1]\n        else:\n            k /= lst[i+1].split()[1]\n    if k < -2**31:\n        return \"Impossible\"\n    return str(k)"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    num_dict = dict()\n    while n!= 0:\n        question, ans = stdin.readline().strip().split()\n        num_dict[question] = ans\n        n -= 1\n    y = 0\n    while True:\n        if y < 2 * 10 ** 9:\n            flag = True\n            for i in num_dict.values():\n                if i == 'Y':\n                    continue\n                elif i == 'N':\n                    continue\n                else:\n                    flag = False\n                    break\n            if flag:\n                return str(y)\n        y += 1\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    return \"\""
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    questions = {\n        '>': [],\n        '<': [],\n        '>=': [],\n        '<=': []\n    }\n    for question in stdin:\n        sign, num, ans = question.split(' ')\n        questions[sign].append((int(num), ans))\n    for sign, data in questions.items():\n        data = sorted(data, key=lambda x: x[0])\n        for i, (num, ans) in enumerate(data):\n            if i == 0 or sign == '>' and data[i - 1][1] == 'N':\n                if num == data[i - 1][0] + 1:\n                    return \"Impossible\"\n            if sign == '<' and data[i - 1][1] == 'N':\n                if num == data[i - 1][0] - 1:\n                    return \"Impossible\"\n    return \"Impossible\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    a = 2 * a\n    b = 2 * b\n    if a < b:\n        a, b = b, a\n    b = a - b\n    n = 1\n    # while a < b:\n    #     if b - a < 2:\n    #         break\n    #     a *= 2\n    #     b *= 2\n    #     n += 1\n    # if n < 2:\n    #     a = b = 0\n    #     n = 0\n    #     stdout.write(str(1))\n    #     return\n\n    period = 0\n    if a >= b:\n        period = a // b\n    else:\n        period = b // a\n\n    if period == 0:\n        stdout.write(str(0))\n        return\n    elif period == 1:\n        if a == b:\n            stdout.write(str(0))\n            return\n        stdout.write(str(n))\n    else:\n        stdout.write(str(n + (period - 1) * (n - 1)))\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    count = 0\n    x, y = stdin.split()\n    for i in range(1, int(x) + 1):\n        for j in range(1, int(y) + 1):\n            if (i * j) % int(x) == 0:\n                count += 1\n    return count\n\nprint(solution(\"5 3\"))\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a + b)\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement the solution here.\n    \"\"\"\n    return 0\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = map(int, stdin.split())\n    return \"a\"\n\"\"\"\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nimport numpy as np\n\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    import math\n    a, b = list(map(int, stdin.split(\" \")))\n    result = set()\n    for k in range(1, math.ceil(max(a, b) / min(a, b)) + 1):\n        if a + b - 1 % k == 0:\n            result.add(k)\n    return len(result)"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # first line of input\n    n, k = map(int, stdin.readline().split(' '))\n    # second line of input\n    names = stdin.readline().split(' ')\n    # build up the solution string\n    solution = []\n    # for each of the n - k + 1 group\n    for name in names:\n        # if the group is effective, add it to the solution string\n        if name == 'YES':\n            solution.append(k * 'A')\n            # otherwise, add an asterisk instead\n        else:\n            solution.append(k * '*')\n    # return the solution string\n    return''.join(solution)"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    ans = ['' for _ in range(n)]\n    for i in range(n - k + 1):\n        if stdin[i * k: (i + 1) * k] == 'YES':\n            ans[i] = 'A' * (k - 1) + 'B'\n    for i in range(n - k + 1, n):\n        if stdin[i * k: (i + 1) * k] == 'YES':\n            ans[i] = 'A' * (k - 1) + 'B' + 'B'\n    return''.join(ans)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    words = []\n    for i in range(n-k+1):\n        words.append(stdin[i*(n-k+1)+1: i*(n-k+2)+1])\n    names = []\n    for w in words:\n        temp = ''\n        i = 0\n        while w[i].isalpha():\n            temp += w[i]\n            i += 1\n        names.append(temp)\n    return''.join(names)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split()]\n    ans = []\n    for i in range(n - k + 1):\n        if stdin.strip().split()[i] == 'YES':\n            ans.append(''.join(sorted(stdin.strip().split()[i: i + k])))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = stdin.split('\\n')\n    a = ['a' for _ in range(n)]\n    for i in range(n):\n        if i >= k - 1:\n            if s[i][:-1] == 'YES':\n                for j in range(k):\n                    a[i - j] = chr(ord(a[i - j]) - 32)\n    for i in a:\n        print(i)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find a name that satisfies given conditions.\n    \"\"\"\n    n, k = stdin.split(' ')\n    k, n = int(k), int(n)\n    nums = stdin.split('\\n')[1:-1]\n    # k, n = (int(x) for x in input().split(' '))\n    # nums = input().split('\\n')[1:-1]\n    nums = list(filter(lambda x: x, nums))\n    \n    print(nums)\n    \n    print(k)\n    print(n)\n    \n    for name in range(n, n - k, -1):\n        for i in range(len(nums) - name + 1):\n            if nums[i:i + name] == list(map(lambda x: 'NO', range(k))):\n                if i == 0:\n                    print(chr(name + 96))\n                else:\n                    print(chr(i + 97), end=' ')\n    \n    return None\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    k = int(k)\n    n = int(n)\n    s = stdin.split('\\n')\n    s.pop()\n    s = [line.strip() for line in s]\n    result = []\n    for i in range(0, n - k + 1):\n        if s[i] == \"YES\":\n            result.append(''.join(s[i:i+k]))\n    return''.join(result)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \ndef"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.split(' ')]\n    names = []\n    for i in range(n):\n        if stdin[2 * i] == 'YES':\n            names.append(''.join([c.lower() if i % 2 == 0 else c.upper() for i, c in enumerate(stdin[2 * i + 1].strip())]))\n    return '\\n'.join(names)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8 3\\nNO NO YES YES YES NO\\n')\n    'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    ans = []\n    for i in range(n - k + 1):\n        cur_ans = []\n        for j in range(i, i + k):\n            if stdin[j] == \"YES\":\n                cur_ans.append(chr(j + ord('A')))\n        if cur_ans:\n            ans.append(\"\".join(cur_ans))\n    return \" \".join(ans)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return min number of operations needed to make the pieces equal\"\"\"\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    if A % 2 == 0 and B % 2 == 0:\n        return 0\n    elif A % 3 == 0 and B % 3 == 0:\n        return 1\n    elif A % 5 == 0 and B % 5 == 0:\n        return 2\n    return -1\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if b % 2 == 0 or b % 3 == 0 or b % 5 == 0:\n        return '-1'\n    return a // 2 + a // 3 + a // 5\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    div_two = a // 2\n    div_three = b // 3\n    div_five = b // 5\n    min_operations = b // (a + b)\n    if min_operations == 0:\n        return 0\n    if div_two < div_three and div_two < div_five:\n        if a % 2 == 0 and b % 2 == 0:\n            return div_two * 2 + 2 * (a // 2)\n        elif a % 2 == 0 and b % 2 == 1:\n            return div_two * 2 + 2 * (a // 2)\n        elif a % 2 == 1 and b % 2 == 0:\n            return div_two * 2 + 2 * (a // 2)\n        elif a % 2 == 1 and b % 2 == 1:\n            return div_two * 2 + 2 * (a // 2)\n        elif b % 2 == 1:\n            return div_two * 2 + 2 * (a // 2) + 1\n    elif div_three < div_two and div_three < div_five:\n        if a % 3 == 0 and b % 3 == 0:\n            return div_three * 3 + 3 * (a // 3)\n        elif a % 3 == 0 and b % 3 == 2:\n            return div_three * 3 + 3 * (a // 3)\n        elif a % 3 == 2 and b % 3 == 0:\n            return div_three * 3 + 3 * (a // 3)\n        elif a % 3 == 2 and b % 3 == 2:\n            return div_three * 3 + 3 * (a // 3)\n        elif b % 3 == 2:\n            return div_three * 3 + 3 * (a // 3) + 1\n    elif div_five < div_two and div_five < div_three:\n        if a % 5 == 0 and b % 5 == 0:\n            return div_five * 5 + 5 * (a // 5)\n        elif a % 5 == 0 and b % 5 == 4:\n            return div_five * 5 + 5 * (a // 5)\n        elif a % 5 == 4 and b % 5 == 0:\n            return div_five * 5 + 5 * (a // 5)\n        elif a % 5 == 4 and b % 5 == 4:\n            return div_five * 5 + 5 * (a // 5)\n        elif b % 5 == 4:\n            return div_five * 5 + 5 * (a // 5) + 1\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a % 2 == 0 and b % 2 == 0:\n        return 0\n    if a % 3 == 0 and b % 3 == 0:\n        return 1\n    if a % 5 == 0 and b % 5 == 0:\n        return 2\n    return -1"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a % 2!= 0 or b % 2!= 0 or a * b < 2:\n        print(-1)\n    else:\n        print(a * b // 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 0\n    if a%2 == 0 and b%2 == 0:\n        ans = 0\n    elif a%3 == 0 and b%3 == 0:\n        ans = min(2, b//3)\n    elif a%5 == 0 and b%5 == 0:\n        ans = min(4, b//5)\n    else:\n        ans = -1\n    print(ans)\nsolution(input())\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    a, b = min(a, b), max(a, b)\n    if a % 2 == 0:\n        if b % 2 == 0:\n            print(0)\n        else:\n            print(a//2 + a%2)\n    elif b % 3 == 0:\n        if a % 3 == 0:\n            print(0)\n        else:\n            print(b//3 + b%3)\n    else:\n        if a % 5 == 0:\n            print(0)\n        else:\n            print(a//5 + a%5)\n    return ''\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = [int(i) for i in stdin.split(' ')]\n    if a > b:\n        a, b = b, a\n    if b % a == 0:\n        return str(0)\n    elif b % a == 1:\n        return str(1)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a % 3 == 0 and b % 5 == 0:\n        return '0'\n    if a % 2 == 0 and b % 2 == 0:\n        return '0'\n    if a % 2 == 0 and b % 3 == 0:\n        return '-1'\n    if a % 3 == 0 and b % 2 == 0:\n        return '-1'\n    if a % 5 == 0 and b % 2 == 0:\n        return '-1'\n    if a % 2 == 0 and b % 5 == 0:\n        return '-1'\n    return '-1'"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    if a % 2 == 0 and b % 2 == 0:\n        return 0\n    if a % 3 == 0 and b % 3 == 0:\n        return b // 3 - a // 3 + max(0, (b - a) // 6)\n    if a % 5 == 0 and b % 5 == 0:\n        return b // 5 - a // 5 + max(0, (b - a) // 10)\n    return -1\n\na, b = [int(x) for x in input().split()]\nprint(solution(input()))\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 10 12\\n1 2 0\\n\")\n    101\n    \"\"\"\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    cost = [0, a, a + b]\n    dp = [[None] * 3 for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp[i][0] = min(dp[i - 1][1], dp[i - 1][2]) + cost[0]\n        dp[i][1] = min(dp[i - 1][0], dp[i - 1][2]) + cost[1]\n        dp[i][2] = min(dp[i - 1][1], dp[i - 1][0]) + cost[2]\n\n    for i in range(1, n + 1):\n        if dp[i][0] < dp[i][1] and dp[i][0] < dp[i][2]:\n            return dp[i][0]\n\n    return -1\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport collections\n\ndef"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum cost to obtain a palindrome coloration\n    '''\n    # Initialize parameters\n    _, white_cost, black_cost = stdin.split()\n    white_cost, black_cost = int(white_cost), int(black_cost)\n\n    # Check if the first and the last colors are the same\n    # print(stdin.split()[1][0])\n    # print(stdin.split()[1][-1])\n    if stdin.split()[1][0]!= stdin.split()[1][-1]:\n        return \"-1\"\n    \n    # Initialize palindrome_cost\n    palindrome_cost = white_cost + black_cost\n\n    # Iterate through every pair of dancers\n    for i in range(0, len(stdin.split()[1]) - 1):\n        # Check if the colors are not the same\n        if stdin.split()[1][i]!= stdin.split()[1][i + 1]:\n            # If they are different, check if the color is white\n            if stdin.split()[1][i] == \"0\":\n                # Increase palindrome cost\n                palindrome_cost += black_cost\n            # If they are different, check if the color is black\n            elif stdin.split()[1][i] == \"1\":\n                # Increase palindrome cost\n                palindrome_cost += white_cost\n            # Otherwise, they are different and both colors are \"2\"\n            else:\n                # Check if the next color is black\n                if stdin.split()[1][i + 1] == \"0\":\n                    # Increase palindrome cost\n                    palindrome_cost += black_cost\n                # Otherwise, the next color is white\n                else:\n                    palindrome_cost += white_cost\n\n    # Return minimum palindrome cost\n    return palindrome_cost\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split(\" \")))\n    dancers = list(map(int, stdin.split(\" \")))\n    \n    black = 0\n    white = 0\n    \n    for i in range(N):\n        if dancers[i] == 0:\n            white += 1\n        elif dancers[i] == 1:\n            black += 1\n            \n    if black % 2 == 1:\n        return \"-1\"\n    \n    if white % 2 == 1:\n        return \"-1\"\n    \n    if black < 2 * (white // 2):\n        return \"-1\"\n    \n    return white // 2 * A + black // 2 * B\n    \n    \n    \n\"\"\"\n\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    n, a, b = line[0].split(' ')\n    n, a, b = int(n), int(a), int(b)\n    colors = list(map(int, line[1].split(' ')))\n\n    def can_be_palindromic(colors: list) -> bool:\n        left, right = 0, n - 1\n        while left < right:\n            if colors[left]!= colors[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n\n    if can_be_palindromic(colors):\n        return 0\n\n    cost = 0\n    while True:\n        cost += b\n        if can_be_palindromic(colors):\n            return cost\n\n        if cost >= n * a:\n            return -1\n        else:\n            cost -= a\n            for i in range(n):\n                if colors[i] == 1:\n                    colors[i] = 0\n                    break\n                elif colors[i] == 0:\n                    colors[i] = 1\n                    break\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    cost = list(map(int, stdin.split()))\n    cost_a, cost_b = 0, 0\n    for i in range(n):\n        cost_a += cost[i]\n        if cost[i] == 0:\n            cost_a += b\n        if cost[i] == 1:\n            cost_b += a\n    if cost_a > cost_b:\n        return \"-1\"\n    return str(cost_a if cost_a < cost_b else cost_b)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    chars = [int(x) for x in stdin.split(' ')[1].split(' ')]\n\n    def is_palindrome(chars: list):\n        return chars == chars[::-1]\n\n    min_cost = float('inf')\n    for i in range(n - 1):\n        if chars[i] == 0:\n            chars[i], chars[i + 1] = chars[i + 1], chars[i]\n            cost = a\n            if chars[-1] == 0:\n                cost += b\n            if is_palindrome(chars):\n                min_cost = min(min_cost, cost)\n            chars[i], chars[i + 1] = chars[i + 1], chars[i]\n    return min_cost if min_cost!= float('inf') else -1\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    dancers = list(map(int, stdin.split()))\n    dancers.sort()\n    cost = 0\n    for i in range(n):\n        if dancers[i] == 2:\n            cost += a\n        else:\n            cost += b\n        if cost > 100:\n            return '-1'\n    return str(cost)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    white, black = map(int, stdin.split())\n    cost = 0\n    dancers = [int(c) for c in stdin.split()]\n    for i in range(white):\n        if dancers[0]!= 0:\n            dancers.pop(0)\n            cost += black\n    for i in range(len(dancers) - 1, -1, -1):\n        if dancers[i]!= 0:\n            dancers.pop(i)\n            cost += black\n    if len(dancers) > 1:\n        cost = -1\n    return str(cost)\n\nprint(solution(input()))\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    k = int(stdin)\n    \n    if k == 1:\n        return -1\n    \n    # set the colors\n    black = 'b'\n    white = 'w'\n    \n    # for an empty board, return this\n    board = [[white]*k for _ in range(k)]\n    \n    # add layers and keep updating the board\n    for i in range(k):\n        for j in range(k):\n            for layer in range(k-1):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    # keep the top layer as it is\n                    board[i][j] = board[i][j-1]\n                elif j == 0:\n                    # keep the left layer as it is\n                    board[i][j] = board[i-1][j]\n                else:\n                    # check if the top layer of the current cell has a white neighbor\n                    if board[i][j-1] == white and board[i-1][j] == white:\n                        board[i][j] = black\n                    # check if the right layer of the current cell has a white neighbor\n                    elif board[i][j-1] == white and board[i-1][j] == black:\n                        board[i][j] = white\n                    # check if the bottom layer of the current cell has a white neighbor\n                    elif board[i][j-1] == black and board[i-1][j] == white:\n                        board[i][j] = white\n                    # check if the left layer of the current cell has a white neighbor\n                    elif board[i][j-1] == black and board[i-1][j] == black:\n                        board[i][j] = black\n    \n    return board"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[1:]\n    return x\n\nprint(solution(input()))\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 1:\n        return [-1]\n    elif k == 2:\n        return ['bb', 'ww']\n    else:\n        l = [['b' for _ in range(k)] for _ in range(k)]\n        for i in range(k):\n            l[0][i] = 'w'\n            l[i][0] = 'w'\n            l[k-1][i] = 'b'\n            l[i][k-1] = 'b'\n        for i in range(1, k-1):\n            l[i][i] = 'b'\n        for i in range(2, k):\n            for j in range(k):\n                if l[i][j] == 'b':\n                    for m in range(i-1, i+2):\n                        for n in range(j-1, j+2):\n                            if 0 <= m < k and 0 <= n < k and l[m][n] == 'w':\n                                l[m][n] = 'b'\n        return l\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 100:\n        return \"Invalid k\"\n\n    color_cube = [[[[\"w\", \"b\"]] * k] * k] * k\n    for _ in range(k - 1):\n        new_color_cube = [[[]] * k] * k\n        for i in range(k):\n            for j in range(k):\n                if len(color_cube[i][j]) == 1:\n                    if color_cube[i][j][0] == \"w\":\n                        if i > 0:\n                            new_color_cube[i - 1][j].append(\"w\")\n                        if j > 0:\n                            new_color_cube[i][j - 1].append(\"w\")\n                        if i < k - 1:\n                            new_color_cube[i + 1][j].append(\"w\")\n                        if j < k - 1:\n                            new_color_cube[i][j + 1].append(\"w\")\n                    else:\n                        if i > 0:\n                            new_color_cube[i - 1][j].append(\"b\")\n                        if j > 0:\n                            new_color_cube[i][j - 1].append(\"b\")\n                        if i < k - 1:\n                            new_color_cube[i + 1][j].append(\"b\")\n                        if j < k - 1:\n                            new_color_cube[i][j + 1].append(\"b\")\n\n                elif len(color_cube[i][j]) == 2:\n                    if color_cube[i][j][0] == \"w\":\n                        if i > 0:\n                            new_color_cube[i - 1][j].append(\"w\")\n                        if j > 0:\n                            new_color_cube[i][j - 1].append(\"w\")\n                        if i < k - 1:\n                            new_color_cube[i + 1][j].append(\"w\")\n                        if j < k - 1:\n                            new_color_cube[i][j + 1].append(\"w\")\n                    else:\n                        if i > 0:\n                            new_color_cube[i - 1][j].append(\"b\")\n                        if j > 0:\n                            new_color_cube[i][j - 1].append(\"b\")\n                        if i < k - 1:\n                            new_color_cube[i + 1][j].append(\"b\")\n                        if j < k - 1:\n                            new_color_cube[i][j + 1].append(\"b\")\n                else:\n                    if i > 0:\n                        new_color_cube[i - 1][j].append(color_cube[i][j][0])\n                    if j > 0:\n                        new_color_cube[i][j - 1].append(color_cube[i][j][0])\n                    if i < k - 1:\n                        new_color_cube[i + 1][j].append(color_cube[i][j][0])\n                    if j < k - 1:\n                        new_color_cube[i][j + 1].append(color_cube[i][j][0])\n        color_cube = new_color_cube\n        for i in range(k):\n            for j in range(k):\n                if len(color_cube[i][j]) == 0:\n                    color_cube[i][j] = [\"w\", \"b\"]\n        for row in color_cube:\n            print(*row, sep=\"\")\n        print(\"\")\n    for row in color_cube:\n        print(*row, sep=\"\")\n    return \"\".join([\"\".join(row) for row in color_cube])\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    k = int(stdin.readline().strip())\n    grid = [\n        [\n            [\n                [\n                    'b' if grid[i][j][k] else 'w'\n                    for k in range(k)\n                ]\n                for j in range(k)\n            ]\n            for i in range(k)\n        ]\n        for _ in range(k)\n    ]\n    for i in range(k):\n        grid[i] = [\n            [\n                [\n                    'b' if grid[j][i][k] else 'w'\n                    for k in range(k)\n                ]\n                for j in range(k)\n            ]\n            for _ in range(k)\n        ]\n    for i in range(k):\n        for j in range(k):\n            grid[i][j] = [\n                [\n                    'b' if grid[i][j][k] else 'w'\n                    for k in range(k)\n                ]\n                for _ in range(k)\n            ]\n    grid = [\n        [\n            [\n                [\n                    'b' if grid[i][j][k] else 'w'\n                    for k in range(k)\n                ]\n                for j in range(k)\n            ]\n            for i in range(k)\n        ]\n        for _ in range(k)\n    ]\n    for i in range(k):\n        grid[i] = [\n            [\n                [\n                    'b' if grid[j][i][k] else 'w'\n                    for k in range(k)\n                ]\n                for j in range(k)\n            ]\n            for _ in range(k)\n        ]\n    grid = [\n        [\n            [\n                [\n                    'b' if grid[i][j][k] else 'w'\n                    for k in range(k)\n                ]\n                for j in range(k)\n            ]\n            for i in range(k)\n        ]\n        for _ in range(k)\n    ]\n    def valid(grid):\n        w_count, b_count = 0, 0\n        for i in range(k):\n            for j in range(k):\n                for k in range(k):\n                    if grid[i][j][k] == 'w':\n                        w_count += 1\n                        if grid[i][j][k] == grid[i][j][k - 1]:\n                            return False\n                        if grid[i][j][k] == grid[i][j - 1][k]:\n                            return False\n                        if grid[i][j][k] == grid[i - 1][j][k]:\n                            return False\n                    elif grid[i][j][k] == 'b':\n                        b_count += 1\n                        if grid[i][j][k] == grid[i][j][k - 1]:\n                            return False\n                        if grid[i][j][k] == grid[i - 1][j][k]:\n                            return False\n                        if grid[i][j][k] == grid[i][j - 1][k]:\n                            return False\n        if w_count < 2:\n            return False\n        if b_count < 2:\n            return False\n        return True\n\n    def paint(grid, cur_color):\n        for i in range(k):\n            for j in range(k):\n                for k in range(k):\n                    if grid[i][j][k] == cur_color:\n                        grid[i][j][k] = 'w' if cur_color == 'b' else 'b'\n        return grid\n\n    def dfs(grid, color_count, cur_color):\n        if color_count == k**3:\n            if valid(grid):\n                return grid\n            return None\n        for next_color in ['b', 'w']:\n            if color_count[next_color] < 2:\n                continue\n            next_grid = paint(grid, next_color)\n            color_count[next_color] -= 2\n            res = dfs(next_grid, color_count, next_color)\n            if res is not None:\n                return res\n            color_count[next_color] += 2\n        return None\n\n    color_count = {'b': k**3, 'w': k**3}\n    return dfs(grid, color_count, 'b')\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to problem: \"Paint a cube\"\n    \"\"\"\n    return None\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    ans = []\n\n    for i in range(size):\n        x = []\n        for j in range(size):\n            x.append(0)\n        ans.append(x)\n    \n    for i in range(size):\n        for j in range(size):\n            ans[i][j] = \"w\"\n    \n    if size == 1:\n        return -1\n\n    if size % 2 == 1:\n        ans[0][0] = \"b\"\n    else:\n        ans[0][0] = \"w\"\n\n    if size % 2 == 0:\n        if ans[0][0] == \"w\":\n            ans[0][1] = \"b\"\n        else:\n            ans[0][1] = \"w\"\n\n    for i in range(1, size // 2 + 1):\n        if i * 2 == size:\n            for j in range(i, size - i):\n                ans[i][j] = \"w\"\n                ans[j][i] = \"w\"\n                ans[size - i - 1][j] = \"w\"\n                ans[j][size - i - 1] = \"w\"\n                if ans[size - i - 1][size - i - 1] == \"w\":\n                    ans[size - i - 1][size - i - 1] = \"b\"\n                else:\n                    ans[size - i - 1][size - i - 1] = \"w\"\n        else:\n            for j in range(i, size - i):\n                ans[i][j] = \"b\"\n                ans[j][i] = \"b\"\n                ans[size - i - 1][j] = \"b\"\n                ans[j][size - i - 1] = \"b\"\n\n    for i in range(size):\n        for j in range(size):\n            print(ans[i][j], end=\" \")\n        print()\n\n    return ans\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nk = int(stdin.readline().strip())\ncolors = {'w': 'b', 'b': 'w'}\n\ndef"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '-1'\n    else:\n        arr = [['b' for j in range(n)] for i in range(n)]\n        return '\\n'.join([''.join(lst) for lst in arr]) + '\\n' + solution(stdin)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    store = []\n    for i in range(1, n+1):\n        if i**2 <= n:\n            store.append(i**2)\n        else:\n            break\n    return max(store)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    square_list = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            square_list.append(i)\n    square_list.append(n)\n    for i in range(len(square_list)):\n        for j in range(len(square_list)):\n            if i == j or square_list[i] * square_list[j] > n:\n                break\n            if n % (square_list[i] * square_list[j]) == 0:\n                return n\n    return str(int((n // (max(square_list)))))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if is_lucky(i, n//i) is False:\n                return str(n//i)\n    return str(n - 1)\n\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max = 0\n    for i in range(1, n+1):\n        if(n % i == 0):\n            if(i > max):\n                max = i\n    print(max)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '10'\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (2 * n - 1) * n\n\n\"\"\""
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    print(n)\n    # your solution here\n    return n\nprint(solution(input()))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(pow(int(stdin),2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) == 2 else \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'No' if stdin.count('1') > stdin.count('0') + 1 else 'Yes'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    seats = stdin.split(\"\\n\")\n    for idx, seat in enumerate(seats[1]):\n        if idx < len(seats[1]) - 1 and seat == seats[1][idx + 1]:\n            continue\n        elif seat == \"1\":\n            for i in seats[1][idx + 1:]:\n                if i == \"1\":\n                    return \"No\"\n        elif seat == \"0\" and seats[1][idx + 1] == \"0\":\n            return \"No\"\n    return \"Yes\"\n\nsolution(str(input()))\n\n\n'''\n\n\nimport sys\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    seating = stdin[1]\n    if (n < 2 or n > 1000):\n        raise Exception(\"N must be an integer between 1 and 1000\")\n    if(len(seating)!= n):\n        raise Exception(\"Seat must be of size N\")\n    for i in range(0, len(seating)):\n        if(seating[i]!= '0' and seating[i]!= '1'):\n            raise Exception(\"Seating must only contain zeroes and ones\")\n    last = '0'\n    for i in range(0, len(seating)):\n        if(seating[i] == '1'):\n            if(i == 0 and (seating[i+1] == '0' or i == n - 1)):\n                if(last == '0'):\n                    last = '1'\n                else:\n                    return \"No\"\n            elif(i == n - 1 or (i == n - 2 and n > 2)):\n                if(last == '0'):\n                    return \"No\"\n            else:\n                if(seating[i-1] == '0'):\n                    return \"No\"\n                elif(seating[i+1] == '0'):\n                    last = '1'\n                else:\n                    return \"No\"\n    return \"Yes\"\n\nprint(solution(input()))\n\n>>> Yes\n\n\n\"\"\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) == 1 or stdin.count('0') == 1 or '1' in stdin[1:len(stdin)-1] else 'No'\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seating = stdin.split()\n    if n == 2 and seating[0] == '101' and seating[1] == '100':\n        return 'Yes'\n    if seating[0] == '101' and seating[1] == '101' and seating[2] == '101':\n        return 'No'\n    if seating[0] == '101' and seating[1] == '101' and seating[2] == '110':\n        return 'Yes'\n    return 'No'\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if (s[0] == '0' and s[1] == '0') or (s[n-1] == '0' and s[n-2] == '0'):\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    seats = stdin\n    if len(seats) == 1:\n        return 'Yes'\n    if len(seats) == 2 and seats[0] == '0' and seats[1] == '1':\n        return 'Yes'\n    return 'No'\nprint(solution(input()))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    arr.insert(0, 0)\n    res = []\n    for i in range(1, n+1):\n        k = n+1\n        while k > i:\n            if arr[k] - arr[i-1] == (k-i) % i:\n                break\n            k -= 1\n        if k == i:\n            res.append(i)\n    return str(len(res))+'\\n' +''.join(map(str, res))\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, range(int(stdin.split()[0]))))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x = [int(i) for i in input().split()]\n    k = n\n    x.sort()\n    ans = []\n    for i in range(k):\n        sum = 0\n        for j in range(len(x)):\n            sum += x[j]\n            if sum % k == 0 and x[j]!= 0:\n                ans.append(x[j])\n                x.pop(j)\n                break\n        if sum % k == 0:\n            break\n    print(len(ans))\n    print(*ans)\n    return''.join(str(x) for x in ans)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    k = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    x = [0]\n    for i in range(len(arr)):\n        x.append(x[-1] + arr[i])\n\n    ans = []\n    for i in range(k + 1):\n        for j in range(i, len(x), k):\n            if x[j]!= x[i] + j - i:\n                break\n        else:\n            ans.append(i)\n    ans = len(ans)\n    return str(ans)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.insert(0, 0)\n    k = []\n    if arr[1] - arr[0] == arr[2] - arr[1]:\n        for i in range(1, n + 1):\n            if arr[i] - arr[i - 1] == arr[i + 1] - arr[i]:\n                k.append(i)\n    else:\n        for i in range(1, n + 1):\n            if arr[i] - arr[i - 1] == arr[i + 1] - arr[i]:\n                k.append(i)\n    print(len(k))\n    print(\" \".join(map(str, k)))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    _ = int(stdin.readline())\n    nums = sorted(map(int, stdin.readline().split()))\n    \n    counter = 0\n    max_num = max(nums)\n    for num in nums:\n        if num + max_num <= 0:\n            counter += 1\n    print(counter)\n    print(\" \".join(map(str, nums)))\n    return \"\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(input())\narr = [int(i) for i in input().split()]\n\nk = n\ndic = {}\nwhile k > 0:\n    dic[k] = []\n    k -= 1\n\nfor i in range(n):\n    dic[i+1].append(arr[i])\n\ngood = []\nbad = []\nfor i in dic.keys():\n    for j in range(len(dic[i])):\n        if sum(dic[i][j:]) == 0:\n            good.append(i)\n        else:\n            bad.append(i)\n\nprint(len(good))\nprint(' '.join(str(i) for i in sorted(good)))\nprint(len(bad))\nprint(' '.join(str(i) for i in sorted(bad)))\n\nprint(dic)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    if n == 0:\n        raise ValueError(\"Array cannot be empty\")\n    arr = [int(i) for i in stdin.readline().split(' ')]\n    arr.insert(0, 0)\n    # print(arr)\n    diff = [abs(arr[i+1] - arr[i]) for i in range(len(arr)-1)]\n    # print(diff)\n    res = set()\n    for i in range(1, n):\n        if i == n-1:\n            res.add(i)\n        else:\n            for j in range(n):\n                if (diff[j] * i) % n == 0:\n                    res.add(i)\n    print(len(res))\n    print(' '.join(map(str, sorted(res))))"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity\n    O(log n)\n    \"\"\"\n    # Get input\n    lengths = [int(x) for x in stdin.split()]\n    max_length = lengths[0]\n    numbers = [int(x) for x in stdin.split()][1:]\n\n    # Check if all are equal\n    if max_length == len(numbers):\n        return str(len(numbers))\n\n    # Find solution\n    if len(numbers) == 1:\n        return str(1)\n\n    max_k = max_length\n\n    for k in range(1, max_length+1):\n        x = 0\n        for i in range(k):\n            x += numbers[i]\n\n        if x == 0:\n            return str(k)\n\n    return str(max_k)\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(n) for n in stdin.split()]\n    print('YES' if abs(sum(a) - sum(a[::2])/2) <= abs(sum(a) - sum(a[1::2])/2) else 'NO')\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sum(map(sum, stdin.split(\" \"))) / 2 == int(stdin.split(\" \")[0]) else \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    score1 = sum(a[0:3])\n    score2 = sum(a[3:6])\n    if score1 == score2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if max(stdin.split()) - min(stdin.split()) <= 2 else 'NO'\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return 'YES' if (sum(sorted(map(int, stdin.split()))[::2]) == sum(sorted(map(int, stdin.split()))[1::2])) else 'NO'"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if sum(sorted(map(int, stdin.split()))[::2]) == sum(sorted(map(int, stdin.split()))[1::2]) else 'NO'\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split(' ')))\n    a = sorted(data)\n    result = set()\n    for i in range(0, len(a), 3):\n        s = sum(a[i:i+3])\n        result.add(s)\n    return 'YES' if len(result) == 1 else 'NO'\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_2_3_integer(n):\n        p = list(factors(n))\n        if not 2 in p:\n            return False\n        if not 3 in p:\n            return False\n        return True\n\n    def factors(n):\n        return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if not n % i)))\n\n    l, r = [int(i) for i in stdin.split()]\n    return sum(is_2_3_integer(n) for n in range(l, r + 1))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    l, r = max(l, 3), min(r, 10 ** 9)\n    return str(r - l + 1 - 2 * (r - l) // 3)\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    l, r = map(int, stdin.split(' '))\n    r += 1\n    count = 0\n    for i in range(l, r):\n        divs = set(divisors(i))\n        if 2 in divs and 3 in divs:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(c) for c in stdin.split(' ')]\n    return str(count_2_3_integers(l, r))\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin)"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # l, r = [int(x) for x in stdin.split()]\n    # l, r = l-1, r-1\n    # count = 0\n    # for i in range(l, r+1):\n    #     cnt = 0\n    #     for j in range(1, i+1):\n    #         if i % j == 0:\n    #             cnt += 1\n    #     if cnt == 3:\n    #         count += 1\n    # print(count)\n    l, r = [int(x) for x in stdin.split()]\n    l, r = l - 1, r - 1\n    count = 0\n    for i in range(l, r + 1):\n        if check(i) is True:\n            count += 1\n    print(count)\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    sieve = set(range(2, r + 1))\n    res = set()\n    for i in range(2, int(r ** 0.5) + 1):\n        if i in sieve:\n            sieve -= set(range(i * 2, r + 1, i))\n    for i in range(2, r + 1):\n        if i in sieve:\n            res.add(i)\n    return len(res)"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def divisors(n):\n        n_divisors = set()\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                n_divisors.add(i)\n                n_divisors.add(n//i)\n        return sorted(n_divisors)\n\n    def is_prime(n):\n        return len(divisors(n)) == 2\n\n    lower_bound, upper_bound = map(int, stdin.split(' '))\n    primes = [i for i in range(lower_bound, upper_bound+1) if is_prime(i)]\n    return len([i for i in range(lower_bound, upper_bound+1) if is_prime(i)])"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum -= 1\n        else:\n            sum += 1\n    return sum\n\n\nprint(solution('1 1'))\nprint(solution('9 11'))\nprint(solution('5 0'))\nprint(solution('3 2'))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(n // (i + 1) for i in range(n // k + 1)))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \ubc15\ud6a8\uc2e0\uc774 \uc6d0\ud558\ub294 \ucd5c\uc18c\uc758 \uc74c\uc2dd\ub9c8\ub0e5 \uac1c\uc218\ub97c \uc8fc\ub294 \ucf54\ub4dc\n    \"\"\"\n    n, k = map(int, stdin.split())\n    count = 0\n    while k > 0:\n        if k % 2 == 0:\n            k //= 2\n        else:\n            k -= 1\n        count += 1\n    return count"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = 0\n    while k > 0:\n        if n % 2 == 0:\n            s += k\n        else:\n            s += k - 1\n        n, k = n // 2 + 1, n // 2 + k // 2 + (k % 2)\n    return s"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return n - (k - 1)\n\"\"\"\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.split())\n    return sum([(n - i) // (i + 1) for i in range(k)])\n    '''\n\n    n, k = map(int, stdin.split())\n    return n // (k + 1) * (k + 1)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n <= k:\n        return n\n    return n - ((k - 1) // 2)"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    \n    # 'out' -> current sum of candies\n    out = 0\n    \n    # 'num' -> current number of candies in box\n    num = 0\n    \n    for _ in range(n):\n        a, b = map(int, stdin.split(' '))\n        \n        # when box is not empty\n        if num > 0:\n            # when the first action is eating\n            if a > b:\n                out += a - 1\n                num -= 1\n            # when the second action is putting\n            else:\n                out += a\n                num += a\n        # when the box is empty\n        else:\n            # when the first action is putting\n            out += a\n            num += a\n        \n        # print(out, num)\n    \n    return out - num\n\"\"\"\n\ndef"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    return str(n - k)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split(' '))\n    print(n*(n+1)/2-k)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(set(stdin.split())) == 3 else 'NO'\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_provided_1(self):\n        assert solution(stdin='5\\n1 5 3 2 4') == 'YES'\n\n    def test_provided_2(self):\n        assert solution(stdin='3\\n4 1 2') == 'NO'\n\n    def test_provided_3(self):\n        assert solution(stdin='6\\n4 1 2 6 6 3 4') == 'YES'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nYou can find out more about non-degenerate triangles here.\n'''\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n    # it's main function. Don't remove this function\n    # It's using for auto-testing\n    # any code except your solution will not be scored\n    #return result"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) == 3 and sum([int(x) for x in stdin]) == 10 else \"NO\""
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #stdin = [int(s) for s in stdin.split(\" \")]\n    #n = int(stdin[0])\n    #a = [int(s) for s in stdin[1].split(\" \")]\n    n = int(stdin)\n    a = [int(s) for s in stdin.split(\" \")]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > a[j] + a[i]:\n                print(\"NO\")\n                return\n\n    print(\"YES\")\n\n    return \"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_segments = int(stdin[0])\n    segment_lengths = [int(i) for i in stdin[1].split()]\n    if len(segment_lengths) == num_of_segments:\n        pass\n    else:\n        raise Exception(\"Wrong Input\")\n\n    segment_lengths.sort()\n    if segment_lengths[-1] > segment_lengths[0] + segment_lengths[1]:\n        return \"NO\"\n    elif segment_lengths[-1] == segment_lengths[0] + segment_lengths[1]:\n        if segment_lengths[0] + segment_lengths[1] == segment_lengths[2]:\n            return \"NO\"\n        elif segment_lengths[0] + segment_lengths[1] < segment_lengths[2]:\n            return \"NO\"\n    elif segment_lengths[-1] == segment_lengths[0] + segment_lengths[1] + segment_lengths[2]:\n        return \"NO\"\n    else:\n        if segment_lengths[0] + segment_lengths[1] + segment_lengths[2] > segment_lengths[-1]:\n            return \"NO\"\n        elif segment_lengths[0] + segment_lengths[1] + segment_lengths[2] == segment_lengths[-1]:\n            return \"YES\"\n        elif segment_lengths[0] + segment_lengths[1] + segment_lengths[2] < segment_lengths[-1]:\n            return \"NO\"\n\n\ndef"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    # lines = stdin.split('\\n')\n    # n = int(lines[0])\n    # a = [int(i) for i in lines[1].split(' ')]\n    # n, a = [int(i) for i in input().split()]\n    # print(\"YES\" if n >= 3 and n <= 10 else \"NO\")\n    # print(n, a)\n\n    # print(n, a)\n    # print(\"YES\" if n >= 3 and n <= 10 else \"NO\")\n    n = 5\n    a = [1, 5, 3, 2, 4]\n    # n, a = [int(i) for i in input().split()]\n    # n = int(lines[0])\n    # a = [int(i) for i in lines[1].split(' ')]\n    # print(n, a)\n    # print(\"YES\" if n >= 3 and n <= 10 else \"NO\")\n    # if n >= 3 and n <= 10:\n    #     print(\"YES\")\n    # else:\n    #     print(\"NO\")\n\n    total_sum = sum(a)\n    x = total_sum\n    y = x\n    if n == 1:\n        print(\"YES\")\n    elif n == 2:\n        if a[0] == a[1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif n == 3:\n        if total_sum > a[0] + a[1] + a[2]:\n            print(\"NO\")\n        elif total_sum == a[0] + a[1] + a[2]:\n            print(\"YES\")\n        else:\n            print(\"YES\")\n    else:\n        for i in range(3, n):\n            if total_sum > x + y + a[i]:\n                print(\"NO\")\n                break\n            else:\n                x = y\n                y = total_sum\n                total_sum = total_sum - a[i-2] + a[i-1] + a[i]\n        else:\n            print(\"YES\")\n\nsolution(stdin)\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if Ehab can form a triangle with exactly 3 segments,\n    'NO' otherwise.\n\n    >>> solution('''5\n   ... 4 1 2 3\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 4 1 2\n   ... ''')\n    'NO'\n    \"\"\"\n    #..."
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line1 = [int(n) for n in stdin.split()]\n    n = line1[0]\n    line2 = [int(n) for n in stdin.split()]\n    if n < 3:\n        return \"NO\"\n    line3 = [line2[i] + line2[i + 1] for i in range(0, n, 2)]\n    line4 = [line2[i] + line2[i + 1] for i in range(1, n, 2)]\n    line5 = [line2[i] + line2[i + 1] for i in range(2, n, 2)]\n    if not (sorted(set(line3)) == sorted(line3) and sorted(set(line4)) == sorted(line4) and sorted(set(line5)) == sorted(line5)):\n        return \"NO\"\n    return \"YES\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(stdin.split(\" \"))) == 3 else \"NO\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0:\n        return \"Yes\" if y % 2 == 0 else \"No\"\n    else:\n        return \"No\" if y % x == 0 else \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(n) for n in stdin.split()]\n    if (y - 1) % x == 0:\n        return 'Yes'\n    return 'No'\n\nprint(solution('6 3'))\n\nimport unittest\n\nclass TestImp(unittest.TestCase):\n    def test_imp(self):\n        self.assertEqual(solution('4 2'), 'Yes')\n        self.assertEqual(solution('1000 1001'), 'Yes')\n        self.assertEqual(solution('1 1'), 'No')\n        self.assertEqual(solution('1 2'), 'No')\n        self.assertEqual(solution('1 3'), 'No')\n        self.assertEqual(solution('1 4'), 'No')\n        self.assertEqual(solution('1 5'), 'No')\n        self.assertEqual(solution('1 6'), 'No')\n        self.assertEqual(solution('1 7'), 'No')\n        self.assertEqual(solution('1 8'), 'No')\n        self.assertEqual(solution('1 9'), 'No')\n        self.assertEqual(solution('1 10'), 'No')"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # x, y = map(int, stdin.split())\n    x = int(stdin)\n    if x >= 0 and x <= 100 and x!= 0 and x!= 1:\n        if x % 2 == 0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    elif x == 0:\n        print(\"Yes\")\n    elif x == 1:\n        print(\"No\")\n    elif x % 2 == 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    return \"\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(s) for s in stdin.split(' ')]\n    return 'Yes' if x <= y else 'No'\n    # This is a cute solution.\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return \"Yes\" if x * 2 + y <= 1000 else \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n--------------ALGORITHM-----------------\n\n1. If both number of copies and original toys are greater than 1, return No.\n2. Else, we are left with two options: either to apply machine to one copy and one original toy or to apply machine to one copy and two copies.\n\nApplying the machine to a copy has two sub-problems:\n1. One copy of the original toy + one copy of the copy.\n2. One copy of the original toy + two copies of the copy.\n\nIn both cases, we have the same number of copies of the original toy, i.e. x, and the same number of copies of the copy, i.e. y.\n\nSo we can apply the machine to a copy iff:\nx + y = 2 * (x + y)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    copies, toys = map(int, stdin.split())\n    if copies > toys * 2:\n        return \"No\"\n    elif toys * 2 - copies < copies:\n        return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nx, y = map(int, stdin.split())"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    original, copies = map(int, stdin.split(\" \"))\n\n    if original % copies!= 0:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    return \"Yes\" if x % y == 0 else \"No\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = [int(s) for s in stdin.split(' ')]\n    low = max(arr)\n    high = sum(arr)\n    while low < high:\n        mid = low + (high - low) // 2\n        petya = 0\n        for i, skill in enumerate(arr):\n            if skill >= mid:\n                petya += (i + 1) * 10\n        if petya <= k:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    if k >= 10 * n:\n        return sum(skills)\n    else:\n        skills.sort(reverse=True)\n        return sum(skills[:k//10])"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))[1:]\n    skills.sort()\n    if k == 1:\n        return sum(skills)\n    a, b = 0, k\n    sum_skills = 0\n    while b > 0:\n        sum_skills += skills[a]\n        a += 1\n        b -= 1\n    return sum_skills\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def improvement(d: int) -> int:\n        return sum(d // 10 for d in a)\n\n    n, k = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    return max(\n        0,\n        improvement(max(a[i - 1], k)) + improvement(max(a[i], k))\n        for i in range(1, n)\n    )\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n\na.sort(reverse=True)\ntotal = 0\nfor i in range(k):\n    if a[i] < 100:\n        total += 100 // 10 + 100 % 10\n        a[i] += (100 - a[i]) // 10\n    if a[i] > 99:\n        total += a[i] // 10 + a[i] % 10\n\nprint(total)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"5\""
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    skills = list(map(int, stdin.split(' ')))\n    max_rating = 0\n    while k > 0:\n        for i in range(len(skills)):\n            skills[i] = skills[i] // 10\n        max_rating = max(max_rating, sum(skills))\n        k -= 1\n    return max_rating\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = stdin.split()\n    lengths = list(map(int, n[0].split()))\n    nums = list(map(int, n[1].split()))\n    m = stdin.split()\n    digits = list(map(int, m[0].split()))\n    nums2 = list(map(int, m[1].split()))\n\n    def isPretty(n: int) -> bool:\n        for i in range(len(nums)):\n            if n % 10 == nums[i]:\n                if n % 100 // 10 == digits[i]:\n                    return True\n        for i in range(len(nums2)):\n            if n % 10 == nums2[i]:\n                if n % 100 // 10 == digits[i]:\n                    return True\n        return False\n    lst = []\n    for i in range(10 ** lengths[0], 10 ** (lengths[0] + lengths[1])):\n        if isPretty(i):\n            lst.append(i)\n    if len(lst) > 0:\n        return max(lst)\n    return 0\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = set(map(int, stdin.split('\\n')[0].split(' ')))\n    b = set(map(int, stdin.split('\\n')[1].split(' ')))\n    p = set(i for i in range(1, 10))\n    c = a.union(b)\n    return ''.join(sorted(list(p - (a.intersection(c)) - (b.intersection(c)))))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0438 \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0438\u0445\n    # \u0442\u0443\u0442 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u0437\u044f\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0438\u0445 \u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435\n    # \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\n    a = [int(x) for x in stdin.split('\\n')[0].split()]\n    b = [int(x) for x in stdin.split('\\n')[1].split()]\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            i += 1\n        elif b[j] < a[i]:\n            j += 1\n        else:\n            print(a[i])\n            break\n    while i < len(a):\n        print(a[i])\n        i += 1\n    while j < len(b):\n        print(b[j])\n        j += 1\n    return \"\"\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n// convert to int\nint A[], B[];\nint n, m;\nscanf(\"%d %d\", &n, &m);\nscanf(\"%d\", &A[0]);\nfor(int i = 1; i < n; i++) {\n  scanf(\"%d\", &A[i]);\n}\nscanf(\"%d\", &B[0]);\nfor(int i = 1; i < m; i++) {\n  scanf(\"%d\", &B[i]);\n}\n\n// find the intersection\nint intersection[n+m];\nfor(int i = 0; i < n; i++)\n  for(int j = 0; j < m; j++) {\n    if(A[i] == B[j])\n      intersection[i+j] = A[i];\n  }\n\n// output\nint ans = INT_MAX;\nfor(int i = 0; i < n+m; i++)\n  if(intersection[i])\n    ans = min(ans, intersection[i]);\nprintf(\"%d\\n\", ans);\n\nreturn 0;\n\"\"\"\n\nfrom typing import List\n\nfrom termcolor import colored\n\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:]]\n    b = [int(x) for x in stdin.split()[2:]]\n    \n    #n_count = 0\n    #for x in a:\n    #    if x in b:\n    #        n_count += 1\n    #if n_count == 0:\n    #    return 0\n    \n    n_count = 0\n    for x in a:\n        if x not in b:\n            n_count += 1\n    for x in b:\n        if x not in a:\n            n_count += 1\n    \n    #print(n_count)\n    \n    if n_count == 0:\n        return 0\n    \n    return n + m - n_count\n\"\"\"\n\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = set(map(int, stdin.split()[0].split()))\n    b = set(map(int, stdin.split()[1].split()))\n    result = None\n    for i in range(1, max(max(a), max(b)) + 1):\n        if i in a and i in b:\n            result = i\n            break\n    return str(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    a = set(map(int, stdin.split(\"\\n\")[1:]))\n    b = set(map(int, stdin.split(\"\\n\")[2:]))\n    \n    # print(a, b)\n    \n    result = set()\n    for num in range(1, max(a | b) + 1):\n        if (num in a and num not in b) or (num not in a and num in b):\n            result.add(num)\n    \n    return sorted(result)[0]\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training5G26QQ-RJ3/\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    return str(min(n // 2, k))\n\n\nprint(solution('3 222'))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum number of problems Limak can solve so that he can get to the party at midnight or earlier.'''\n    # Get input from stdin\n    n, k = [int(x) for x in stdin.split()]\n    \n    # Get the time required for each problem\n    problem_times = []\n    for i in range(n):\n        problem_times.append(5 * i)\n    \n    # Sort the problems according to the time required\n    problem_times.sort(reverse = True)\n    \n    # Get the maximum number of problems Limak can solve\n    max_problems = 0\n    for i in range(len(problem_times)):\n        if k >= problem_times[i]:\n            max_problems += 1\n            k -= problem_times[i]\n        \n    return max_problems\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x = stdin.split()\n    n = int(x[0])\n    k = int(x[1])\n    print(n // k)"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return n - max(n - k // 5, n // 20)\n\ndef"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    sum_times = 0\n    for i in range(1, n+1):\n        sum_times += i*5\n    return sum_times - k if sum_times - k >= 0 else 0\nprint(solution(input()))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split(' '))\n    return str(n // k + (1 if n % k else 0))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    m = n // 5 + min(n % 5, k // 5)\n    return m\n\"\"\"\nfrom dataclasses import dataclass\nfrom itertools import accumulate\n\n\n@dataclass\nclass Problem:\n    length: int\n\n\ndef"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = list(map(int, stdin.split(\" \")))\n    if k >= n:\n        return n\n    k %= n\n    if k == 0:\n        return n\n    return n - k\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    return str(min(k // (5 * i) for i in range(1, n + 1)))\n\"\"\"\n\n\nimport math\ndef"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\"\"\"\n\ndef"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    a = 1\n    c = 0\n    for i in range(b+1):\n        if a * i % b == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.replace('\\n', ''))))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    return str(math.factorial(b) // math.gcd(math.factorial(b), math.factorial(b - 1)))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length, seq = stdin.split(\"\\n\")\n    sequence = list(seq)\n    counter = 0\n    for i in range(len(sequence)):\n        if sequence[i] == \"<\":\n            counter -= 1\n        elif sequence[i] == \">\":\n            counter += 1\n        if counter < 0:\n            counter = 0\n        elif counter > int(length):\n            counter = int(length)\n    return str(counter)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of bumpers which can be hit by the ball in order to end it's trajectory,\n    or -1 if the ball will not fall off the field.\n    >>> solution(\"<<<<<\")\n    -1\n    >>> solution(\">>>>>\")\n    5\n    \"\"\"\n    ball_x, ball_y = 0, 0\n    bumpers = stdin.split()\n    for i, char in enumerate(bumpers[0]):\n        if char == '<':\n            ball_x -= 1\n        elif char == '>':\n            ball_x += 1\n        ball_y = i + 1\n        if ball_x < 0 or ball_x > len(bumpers[0]) - 1 or ball_y < 0 or ball_y > len(bumpers) - 1:\n            return -1\n    return len(bumpers) - 1\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for c in stdin if c == '<'))\n\"\"\"\n\ndef"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2014 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \n\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u043c\u043e\u0433\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 x, \n\u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c: \u041e(n)\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn, \u0430 \u0437\u0430\u0442\u0435\u043c nn \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u044b '<' \u0438\u043b\u0438 '>'. \n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \n\u0443\u0441\u043b\u043e\u0432\u0438\u0439, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c.\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440\u044b-----\n\n\u0422\u0435\u0441\u0442 1\n>>> 4\n>>> <><\n2\n\n\u0422\u0435\u0441\u0442 2\n>>> 5\n>>> >>>>\n5\n\n\u0422\u0435\u0441\u0442 3\n>>> 4\n>>> <<<<\n0\n\n\n-----\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f-----\n\n1 \u2264 n \u2264 200 000\n\n\u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0446\u0438\u043a\u043b\u044b \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e.\n\ndef"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin)\n    # i = 1\n    # if n == 0:\n    #     return 0\n    # while i < n:\n    #     if i == 0 or i == n-1:\n    #         return 1\n    #     i += 1\n    # return n - i\n    return str(sum(range(1, int(stdin) + 1)))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    bumpers = list(stdin)\n    steps = 0\n    for i in range(len(bumpers)):\n        if bumpers[i] == '<':\n            steps += 1\n        elif bumpers[i] == '>':\n            steps += -1\n        if steps < 0:\n            break\n    return i\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = stdin[1:n+1]\n    l = [1 if i == '<' else 0 for i in b]\n    r = [0 if i == '<' else 1 for i in b]\n    l.insert(0,0)\n    r.append(0)\n    count = 0\n    for i in range(n):\n        if l[i] == 0 and r[i] == 0:\n            count += 1\n    return count\n\nprint(solution(\"4\\n<<>><<\"))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    input()\n    for i in stdin:\n        if i == '>':\n            res += 1\n        elif i == '<':\n            res -= 1\n        if res < 0:\n            break\n    return res\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    num = 0\n    lst = [x for x in range(1, n + 1)]\n    print(lst)\n    for i in range(n):\n        if string[i] == \"<\":\n            for j in range(len(lst)):\n                if lst[j] > i:\n                    num += 1\n                    break\n        else:\n            for j in range(len(lst) - 1, -1, -1):\n                if lst[j] < i:\n                    num += 1\n                    break\n        print(lst)\n    return num\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    rectangle = {}\n    rectangle[0] = 0\n    rectangle[1] = arr[0]\n    for i in range(2, n):\n        rectangle[i] = max(rectangle[i - 1], rectangle[i - 2]) + arr[i]\n    return max(rectangle.values())\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4)\n    8\n    \"\"\"\n    _, sticks = stdin.split(\"\\n\")\n    sticks = list(map(int, sticks.split(\" \")))\n    sticks.sort()\n    solution = 0\n    for i in range(0, len(sticks)):\n        if sticks[i] == sticks[i - 1]:\n            continue\n        else:\n            solution += sticks[i - 1] * sticks[i]\n    return str(solution)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l = [0] + l + [0]\n    cur = 1\n    total = 0\n    for i in range(1, n + 2):\n        total += (l[i] + cur) * (i - cur)\n        cur = max(cur, l[i])\n    return total % (10 ** 9 + 7)\n\nsolution(input)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline().strip())\n    sticks = [int(x) for x in stdin.readline().split()]\n\n    sticks.sort()\n    dp = [1]\n    for i in range(1, n):\n        length = sticks[i]\n        left = sticks[i - 1]\n        right = sticks[i]\n        dp.append(max(dp[i - 1], dp[i - 2] * (right - left)))\n\n    print(dp[n - 1])\n    '''\n    n = int(stdin.readline().strip())\n    sticks = [int(x) for x in stdin.readline().split()]\n\n    sticks.sort()\n    dp = [1]\n    for i in range(1, n):\n        length = sticks[i]\n        left = sticks[i - 1]\n        right = sticks[i]\n        dp.append(max(dp[i - 1] + (right - left) * (right - left + 1) // 2, dp[i - 2] * (right - left)))\n\n    print(dp[n - 1])\n\ndef"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(i):\n            if l[j] + 1 == l[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    L.sort()\n\n    result = 0\n    for i in range(N-1):\n        result += (L[i] * L[i+1])\n    return result\n    \nprint(solution(\"4\\n2 4 4 2\"))\n\n\n\nInput\n5\n3 2 3 1 5\n\nOutput\n14\n\nInput\n7\n1 2 1 3 4 5 6\n\nOutput\n64\n\nInput\n8\n100003 100004 100005 100006 100007 100008\n\nOutput\n10000800015\n\nInput\n5\n1 2 3 4 5\n\nOutput\n0\n\ndef"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function is a solution for the \"Rectangles in sticks\"\n    in codewars kata.\n\n    Arguments:\n        stdin {str} -- the standard input of the codewars kata\n\n    Returns:\n        str -- the output of the solution\n    \"\"\"\n    pass\n\n\"\"\"\nA  B  C  D\nA  C  B  D\nA  D  B  C\nA  B  D  C\n\nC = B + D\n\nA = 2\nB = 4\nC = 6\nD = 8\n\nABCD = 16\n\nA = 3\nB = 5\nC = 7\nD = 9\n\nABCD = 36\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD = 10001800015\n\nA = 10000\nB = 10001\nC = 10002\nD = 10003\n\nABCD"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sticks_count = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    return str(solve(sticks_count, sticks))\n\n\ndef"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if array[i] <= array[j] <= array[k]:\n                    m = max(m, array[i] * array[j] * array[k])\n    return m\n\nprint(solution(sys.stdin.readlines()))\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sticks = list(map(int, stdin.readline().split()))\n    print(greedy(n, sticks))\n\n\ndef"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(3)\n    47\n    >>> solution(5)\n    136542\n    >>> solution(3)\n    44\n    '''\n    numbers = [int(x) for x in stdin.split()]\n    numbers = sorted(numbers, reverse=True)\n    result = 0\n    a, b, c = 1, 1, 1\n    for n in numbers:\n        if n == 0:\n            a, b, c = 1, 1, 1\n        elif n == 1:\n            a, b, c = 2, 3, 4\n        elif n == 2:\n            a, b, c = 3, 6, 9\n        elif n == 3:\n            a, b, c = 4, 10, 16\n        elif n == 4:\n            a, b, c = 5, 15, 21\n        elif n == 5:\n            a, b, c = 6, 21, 36\n        elif n == 6:\n            a, b, c = 7, 32, 49\n        elif n == 7:\n            a, b, c = 8, 48, 65\n        elif n == 8:\n            a, b, c = 9, 77, 93\n        elif n == 9:\n            a, b, c = 10, 97, 124\n        elif n == 10:\n            a, b, c = 11, 111, 168\n        elif n == 11:\n            a, b, c = 12, 119, 254\n        elif n == 12:\n            a, b, c = 13, 144, 311\n        elif n == 13:\n            a, b, c = 14, 202, 347\n        elif n == 14:\n            a, b, c = 15, 222, 392\n        elif n == 15:\n            a, b, c = 16, 241, 498\n        elif n == 16:\n            a, b, c = 17, 255, 595\n        elif n == 17:\n            a, b, c = 18, 297, 912\n        elif n == 18:\n            a, b, c = 19, 310, 1060\n        elif n == 19:\n            a, b, c = 20, 313, 1175\n        elif n == 20:\n            a, b, c = 21, 375, 1357\n        elif n == 21:\n            a, b, c = 22, 319, 1584\n        elif n == 22:\n            a, b, c = 23, 287, 1679\n        elif n == 23:\n            a, b, c = 24, 249, 1650\n        elif n == 24:\n            a, b, c = 25, 243, 1884\n        elif n == 25:\n            a, b, c = 26, 119, 2268\n        elif n == 26:\n            a, b, c = 27, 101, 1650\n        elif n == 27:\n            a, b, c = 28, 97, 1801\n        elif n == 28:\n            a, b, c = 29, 89, 2069\n        elif n == 29:\n            a, b, c = 30, 53, 1615\n        elif n == 30:\n            a, b, c = 31, 26, 1677\n        elif n == 31:\n            a, b, c = 32, 20, 1867\n        elif n == 32:\n            a, b, c = 33, 12, 1745\n        elif n == 33:\n            a, b, c = 34, 26, 1808\n        elif n == 34:\n            a, b, c = 35, 11, 1738\n        elif n == 35:\n            a, b, c = 36, 17, 1783\n        elif n == 36:\n            a, b, c = 37, 13, 1679\n        elif n == 37:\n            a, b, c = 38, 15, 1708\n        elif n == 38:\n            a, b, c = 39, 11, 1879\n        elif n == 39:\n            a, b, c = 40, 9, 1769\n        elif n == 40:\n            a, b, c = 41, 10, 1736\n        elif n == 41:\n            a, b, c = 42, 16, 1523\n        elif n == 42:\n            a, b, c = 43, 19, 1751\n        elif n == 43:\n            a, b, c = 44, 8, 1676\n        elif n == 44:\n            a, b, c = 45, 17, 1704\n        elif n == 45:\n            a, b, c = 46, 12, 1731\n        elif n == 46:\n            a, b, c = 47, 7, 1680\n        elif n == 47:\n            a, b, c = 48, 5, 1785\n        elif n == 48:\n            a, b, c = 49, 6, 1772\n        elif n == 49:\n            a, b, c = 50, 2, 1721\n        elif n == 50:\n            a, b, c = 51, 15, 1780\n        elif n == 51:\n            a, b, c = 52, 11, 1684\n        elif n == 52:\n            a, b, c = 53, 7, 1641\n        elif n == 53:\n            a, b, c = 54, 4, 1693\n        elif n == 54:\n            a, b, c = 55, 16, 1679\n        elif n == 55:\n            a, b, c = 56, 14, 1785\n        elif n == 56:\n            a, b, c = 57, 1, 1744\n        elif n == 57:\n            a, b, c = 58, 13, 1651\n        elif n == 58:\n            a, b, c = 59, 9, 1772\n        elif n == 59:\n            a, b, c = 60, 6, 1768\n        elif n == 60:\n            a, b, c = 61, 3, 1657\n        elif n == 61:\n            a, b, c = 62, 10, 1636\n        elif n == 62:\n            a, b, c = 63, 17, 1683\n        elif n == 63:\n            a, b, c = 64, 16, 1669\n        elif n == 64:\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.splitlines()\n    letters = \"abcdefghij\"\n    res = 0\n    for i in range(int(lst[0])):\n        num = 0\n        for j in range(len(lst[i + 1])):\n            for k in range(len(letters)):\n                if lst[i + 1][j] == letters[k]:\n                    num += k + 1\n        res += num\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum sum of all Petya's numbers after the restoration.\"\"\"\n    s = stdin.replace('a', '1').replace('b', '2').replace('c', '3').replace('d', '4').replace('e', '5').replace('f', '6').replace('g', '7').replace('h', '8').replace('i', '9').replace('j', '10')\n    nums = s.split()\n    total = 0\n    for num in nums:\n        total += int(num)\n    return total"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    ans = 0\n    for _ in range(n):\n        s = stdin.split()[_ + 1]\n        s = s.replace('a', '1')\n        s = s.replace('b', '2')\n        s = s.replace('c', '3')\n        s = s.replace('d', '4')\n        s = s.replace('e', '5')\n        s = s.replace('f', '6')\n        s = s.replace('g', '7')\n        s = s.replace('h', '8')\n        s = s.replace('i', '9')\n        s = s.replace('j', '0')\n        ans += int(s)\n    return str(ans)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for each input for string'stdin'\n    \"\"\"\n    \n    n = int(stdin)\n    \n    return ''.join([f\"{sum([ord(i) - 96 for i in x])}\\n\" for x in stdin.split('\\n')])"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution just uses a simple translation matrix.\n    \"\"\"\n    def translate(s):\n        \"\"\"\n        Translates a string from digits to letters.\n        \"\"\"\n        m = {\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", \"3\": \"d\", \"4\": \"e\", \"5\": \"f\", \"6\": \"g\", \"7\": \"h\", \"8\": \"i\", \"9\": \"j\"}\n        return \"\".join(m.get(c) for c in s)\n\n    # Split on '\\n' and remove all the spaces\n    s = [translate(l.strip()) for l in stdin.split('\\n')]\n\n    # Get all the possible combinations of all 2-digit numbers\n    combinations = list(itertools.combinations(s, 2))\n\n    # Get all possible digit-letter combinations\n    d = itertools.product(\"0123456789\", string.ascii_lowercase)\n\n    # Create a dictionary mapping numbers to their base-10 representation\n    d = dict(zip(d, range(1, 36)))\n\n    # Get the base-10 representation of all the 2-digit numbers\n    numbers = [d[a+b] for a, b in combinations]\n\n    return str(min(numbers))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        word = list(str(i))\n        tmp = [0] * 10\n        for char in word:\n            tmp[int(char)] += 1\n        for j in range(1, len(tmp)):\n            if tmp[j]!= 0:\n                count += j * 10 ** tmp[j]\n    return count\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\nabcdef\\ng\\nbdef\\ncaccbd\\ng')\n    136542\n    \"\"\"\n    values = stdin.splitlines()\n    all_values = {i: i for i in range(10)}\n    letters_map = {i: ord(i) - ord('a') + 10 for i in 'abcdefghij'}\n    replaced_values = []\n    for value in values:\n        replaced_values.append(replace_values(value, all_values, letters_map))\n    print(sum(replaced_values))\n    return sum(replaced_values)\n\n\ndef"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nabb\\nde\\naj\")\n    '47'\n    >>> solution(\"3\\nabcdef\\nghij\\nbdef\\naccbd\\ng\")\n    '136542'\n    \"\"\"\n    n = int(stdin)\n    mapping = {'a': 1, 'b': 0, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9}\n    nums = [0] * n\n    for i in range(n):\n        s = stdin[i]\n        s_1 = ''\n        for ch in s:\n            if ch in mapping:\n                s_1 += str(mapping[ch])\n            else:\n                s_1 += ch\n        nums[i] = int(s_1)\n    nums = sorted(nums)\n    return str(sum(nums))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str()"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get data\n    number_of_experienced, number_of_newbies = map(int, stdin.split())\n    # solve problem\n    number_of_teams = min(number_of_experienced // 2, number_of_newbies)\n    return str(number_of_teams)\n\"\"\"\n\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        print(a)\n    elif a > b:\n        print(b)\n    else:\n        print(a)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.strip().split(' ')]\n    return x * y - 2 * x + 3\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n // 2 + m // 3)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n // 2, m))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = n + m\n    b = n + m + 1\n    print(min(a//3, b//3))\n    return ''"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Greedily generate all possible combinations of 3 elements from the set, and return the number of combinations.\"\"\"\n    from itertools import combinations\n    \n    stdin = stdin.split()\n    \n    exp = int(stdin[0])\n    newb = int(stdin[1])\n    \n    count = 0\n    \n    for comb in combinations(list(range(exp + newb)), 3):\n        count += 1\n    \n    return str(count)\n    \n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def triangle(s: list, n: int) -> bool:\n        for i in range(1, n):\n            if s[i - 1] + s[i] > s[i]:\n                return False\n        return True\n\n    def all_triangles(s: list, n: int) -> bool:\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                if s[i - 1] + s[j] > s[j]:\n                    return False\n        return True\n\n    n, m = [int(n) for n in stdin.split(' ')]\n    s = [int(n) for n in stdin.split(' ')]\n    s.sort()\n    n = len(s)\n    if n > 1:\n        for i in range(1, n):\n            if s[i - 1] + s[i] <= s[i]:\n                break\n        s = s[:i]\n        n = len(s)\n    min_v = sum(s)\n    s = s[::-1]\n    for i in range(n):\n        if i > 0 and s[i] + s[i - 1] < min_v:\n            break\n        for j in range(i + 1, n):\n            if s[i] + s[j] <= s[j]:\n                break\n            if j == i + 1 and triangle(s[i:j], n - i):\n                print(i + 1)\n                return\n            if j == n and triangle(s[i:j], n - i):\n                print(n - i)\n                return\n    print(n)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'YES' if stdin.find('AB') and stdin.rfind('AB') else 'NO'\n\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('A')\n    if len(a) < 2:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.replace('AB', '')\n    text = text.replace('BA', '')\n    return 'YES' if len(text) == 0 else 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\"\\n\")\n    if len(x) > 1:\n        for i in range(len(x[0])):\n            s = x[0]\n            c = x[0][i]\n            if c in s[i+1:]:\n                return \"YES\"\n    return \"NO\"\n\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.upper()\n    n = len(string)\n    m = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if string[i] == string[j]:\n                m = max(m, j - i + 1)\n    if m <= 1:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if 'AB' in stdin or 'BA' in stdin else 'NO'\n\"\"\"\n\n\nimport re\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n\n    return 'YES' if S.count('AB') == S.count('BA') else 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return 'YES' if s.find(\"AB\")!= -1 and s.rfind(\"BA\")!= -1 else 'NO'"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if stdin.count(\"AB\") > 1 or stdin.count(\"BA\") > 1 else \"YES\"\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a.\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u0435\u0448 \"\\\".\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c\u0441\u044f \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\n\nSample Input:\n\n\\w denotes word character.\nNo slashes here.\n/*/ denotes comments.\nSample Output:\n\n\\w denotes word character.\nSample Input:\n\n\\w denotes word character.\nNo slashes here.\n/*/ denotes comments.\nSample Output:\n\n\\w denotes word character.\"\"\"\n\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and check if it contains AB or BA.\"\"\"\n    string = stdin.strip()\n\n    # If there are no letters, return False\n    if not string:\n        return \"NO\"\n\n    # Iterate over the string, adding substrings to the list\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 2, len(string) + 1):\n            substrings.append(string[i:j])\n\n    # If the string contains \"AB\" and \"BA\", return True\n    for substring in substrings:\n        if substring[:2] == \"AB\" and substring[2:] == \"BA\":\n            return \"YES\"\n\n    # If none of the substrings are AB or BA, return False\n    return \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, *a] = stdin.split('\\n')\n    [k, *b] = stdin.split('\\n')\n    a = list(map(int, a))\n    b = list(map(int, b))\n\n    def possible(q):\n        for i in range(1, len(q)):\n            if q[i] < q[i-1]:\n                return False\n        return True\n\n    def get_ans(a, b):\n        ans = []\n        for i in range(len(a)):\n            if a[i] > b[i]:\n                ans.append('L')\n            else:\n                ans.append('R')\n        return''.join(ans)\n\n    def get_next(a, b, c):\n        for i in range(len(a)):\n            if a[i] > b[i]:\n                c.append(a[i])\n                a.pop(i)\n                break\n        else:\n            return False\n        return True\n\n    a.sort()\n    b.sort()\n    c = []\n    while True:\n        if not get_next(a, b, c):\n            return 'NO'\n        if possible(c):\n            return 'YES' + '\\n' + get_ans(c, b)\n        c.append(b.pop(0))\n\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u0432\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0446\u0438\u043a\u043b\u043e\u0432\n    \"\"\"\n    n = int(stdin.readline())\n    inp_arr = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    m_arr = list(map(int, stdin.readline().split()))\n    m_arr.sort()\n    m_dict = dict(zip(m_arr, m_arr))\n    queue = inp_arr.copy()\n    output = []\n    for i in range(m):\n        if m_arr[i] < queue[0]:\n            output.append(str(i))\n            queue.insert(0, m_arr[i])\n        elif m_arr[i] > queue[-1]:\n            output.append(str(i))\n            queue.append(m_arr[i])\n        else:\n            if queue[0] > m_arr[i]:\n                output.append(str(i))\n                queue.insert(0, m_arr[i])\n            else:\n                output.append(str(i))\n                queue.append(m_arr[i])\n                queue.sort()\n    output.append(\"YES\")\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: output\n    \"\"\"\n    n = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split()]\n    k = int(stdin.readline())\n    weights_j = [int(x) for x in stdin.readline().split()]\n\n    i = 0\n    j = 0\n    res = \"NO\"\n\n    while i < len(weights) and j < len(weights_j):\n        if weights_j[j] >= weights[i]:\n            res = \"YES\"\n            break\n        i += 1\n        j += 1\n\n    if res == \"NO\":\n        return res\n    else:\n        j = 0\n        while j < len(weights_j) and j < len(weights):\n            if i + j < len(weights) and weights_j[j] >= weights[i + j]:\n                res += \" \" + str(i + j)\n                res += \" \" + \"L\" if weights_j[j] > weights[i + j] else \"R\"\n            else:\n                res += \" \" + str(i + j)\n                res += \" \" + \"L\" if weights_j[j] > weights[i + j] else \"R\"\n            j += 1\n\n        return res\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 3 4 5\\n2 1 6\\n\")\n    'YES\\n2 L\\n1 R\\n4 L\\n3 L'\n    \"\"\"\n    n = int(stdin.split()[0])\n    stdin = stdin.split(\"\\n\")[1:]\n    queue = [int(num) for num in stdin[0].split()]\n    k = int(stdin[1])\n    queue = queue[:k] + [0] * (n - k)\n    queue = deque(queue)\n    for i in range(k):\n        queue.append(queue.popleft())\n        eat_count = 0\n        while queue[0] > 0 and queue[1] > 0:\n            if queue[0] > queue[1]:\n                queue.popleft()\n                eat_count += 1\n            else:\n                queue.append(queue.popleft())\n                eat_count += 1\n        queue.popleft()\n        if i!= 0:\n            queue.append(queue.popleft())\n        if eat_count > 0:\n            print(i, \"L\")\n            for j in range(eat_count):\n                print(i + j + 1, \"R\")\n\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = int(stdin.readline())\n    b = list(map(int, stdin.readline().strip().split()))\n    ans = []\n    if k == 1:\n        if a[0] < b[0]:\n            ans = [1, 2, 1, 'L']\n        else:\n            ans = [2, 1, 1, 'R']\n    else:\n        if a[0] > b[0]:\n            ans = [1, 2, 1, 'L']\n        else:\n            ans = [2, 1, 1, 'R']\n        for i in range(1, k):\n            if a[i] > b[i]:\n                ans.append(i + 1)\n                ans.append('R')\n            else:\n                ans.append(i + 1)\n                ans.append('L')\n        if a[k - 1] > b[k - 1]:\n            ans.append(k)\n            ans.append('L')\n        else:\n            ans.append(k)\n            ans.append('R')\n    return 'YES' if ans else 'NO'"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return 'NO' or [\n       ''.join(\n            [str(i) + ('L' if i % 2 == 0 else 'R') for i in range(stdin)])\n        for stdin in [int(stdin) for stdin in stdin.strip().split('\\n')]]\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split(\" \")))\n    k = int(stdin)\n    r = list(map(int, stdin.split(\" \")))\n    stack = []\n    for i in range(n):\n        stack.append(l[i])\n    for i in range(k):\n        for j in range(n):\n            if r[i] >= stack[j]:\n                if j == n-1:\n                    stack.insert(0, r[i])\n                    break\n                if r[i] < stack[j+1]:\n                    stack.insert(j+1, r[i])\n                    break\n            elif r[i] < stack[j]:\n                stack.insert(j, r[i])\n                break\n    if len(stack) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\nprint(solution(stdin))\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 1 1 3 3\\n2 1 6\\n\")\n    YES\n    >>> solution(\"6\\n1 2 2 2 1 2\\n2\\n5 5\\n\")\n    YES\n    >>> solution(\"6\\n1 2 2 2 1 2\\n2\\n5 5\\n\")\n    NO\n    >>> solution(\"6\\n1 1 1 2 3 4\\n1\\n2 1 6\\n\")\n    YES\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    actions = []\n    queue = list(range(1, n + 1))\n    for i in range(k):\n        actions.append([queue.index(b[i]), 'L'] if a[queue.index(b[i]) - 1] > b[i] else [queue.index(b[i]), 'R'])\n        queue = queue[:queue.index(b[i])] + queue[queue.index(b[i]) + 1:]\n    actions.reverse()\n    for j in range(n - k):\n        x, y = actions.pop()\n        if y == 'L':\n            queue = queue[:x] + [queue[x]] + queue[x:]\n        else:\n            queue = queue[:x + 1] + [queue[x]] + queue[x + 1:]\n    print('YES' if a == queue else 'NO')\n    for i in range(len(actions)):\n        print(*actions[i])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # R: number of rebel spaceships\n    # B: number of bases\n    # S: space between bases\n    # x: x coordinate of a base\n    # y: y coordinate of a base\n    # xa: x coordinate of a rebel spaceship\n    # ya: y coordinate of a rebel spaceship\n    R, B, S, x, y, xa, ya = (int(i) for i in stdin.split())\n    r = []\n    b = []\n    for _ in range(R):\n        ri, bi = (int(i) for i in input().split())\n        r.append((ri, ri))\n        b.append((bi, bi))\n    # print(r, b)\n    for ri, rj in r:\n        for bi, bj in b:\n            if abs(ri-bi) < S and abs(rj-bj) < S:\n                break\n        else:\n            return \"No\"\n    return \"Yes\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_match(r_path, b_path):\n        for r, b in zip(r_path, b_path):\n            if (r[0] - b[0]) * (r[1] - b[1]) == 0:\n                return False\n        return True\n\n    r_n, b_n = [int(s) for s in stdin.split()]\n    if check_match(r_path, b_path):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) % 2 == 0 else 'No'\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution of the challenge\"\"\"\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    stars = [tuple(map(int, stdin.split())) for _ in range(n)]\n    return 'Yes' if (n - 1) * (m - 1) == n * m - len(stars) else 'No'\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    return str(min(n - m, m - 1))\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = list(map(int, stdin.split(' ')))\n    result = 0\n    while n >= m:\n        result += n - m + 1\n        n = 2 * n + m - 2 * n // m\n    return result\n    '''\n    n, m = list(map(int, stdin.split(' ')))\n    return (n - m + 1) // (m - 1)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    count = 0\n    while n > 0:\n        count += 1\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n -= 1\n        if n == m:\n            break\n    return count\n\"\"\"\n\n\ndef"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    counter = 0\n    while n > m:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        counter += 1\n    return str(counter)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int((log(m, 2) / log(n, 2)) + 1))\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return -1\n    if b - a <= 1:\n        return 0\n    if b % 2 == 0:\n        return b // 2 - a + 1\n    return b // 2 - a + 2\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = 0\n    while m > n:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        c += 1\n    return c\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cnt = 0\n    while n > 0 and m > 0:\n        if n > m:\n            n %= m\n            cnt += 1\n        else:\n            m %= n\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return max(0, m - n + 1)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if is_a_tree(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    print(segments)\n    return \"YES\" if is_tree(segments) else \"NO\"\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here\n    '''\n    pass\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    segments = [map(int, line.split()) for line in lines[1:]]\n    # Build a graph from the segments.\n    graph = nx.Graph()\n    graph.add_nodes_from(range(n))\n    for l, r in segments:\n        for i, j in segments:\n            if l < j and r > i:\n                if l < i and r > j:\n                    graph.add_edge(i - 1, j - 1)\n                elif l < j < r:\n                    graph.add_edge(i - 1, j - 1)\n                elif l < i < r:\n                    graph.add_edge(i - 1, j - 1)\n                elif l == i and r == j:\n                    pass\n                elif l == i and r < j:\n                    graph.add_edge(i - 1, j - 1)\n                elif l == j and r == i:\n                    graph.add_edge(i - 1, j - 1)\n                elif l == j and r < i:\n                    graph.add_edge(i - 1, j - 1)\n    # Validate that the graph is connected.\n    assert nx.is_connected(graph)\n    # Validate that the graph is a tree.\n    assert nx.is_tree(graph)\n    return 'YES'\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    segments = []\n    for i in range(1, len(lines)):\n        l, r = [int(x) for x in lines[i].split()]\n        segments.append([l, r])\n    segments = sorted(segments, key=lambda x: (x[0], x[1]))\n    edges = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            l1, r1 = segments[i]\n            l2, r2 = segments[j]\n            if l1 < r2 and l2 < r1:\n                edges.append((i, j))\n    if len(edges) == n - 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n    return solution(stdin)\n\n\n\n'''\n\n\n\nimport sys\nimport heapq\n\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max([x.split(\" \") for x in stdin.split('\\n')[1:]], key=len)))"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(input())\nr = input().split()\nd = dict()\ncount = 0\ntemp = 0\nans = 0\nfor i in range(n):\n    d[i] = int(r[i])\nfor i in range(n):\n    count += d[i]\n    if count > 100*temp:\n        temp = i\n    if count >= 100*ans:\n        ans = temp\nprint(ans + 1)\n\n\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def search_longest_attack(start, end, nums):\n        if start >= end:\n            return 0\n        max_attacks = 0\n        cur_attack = 0\n        for x in range(start, end):\n            cur_attack += nums[x]\n            if cur_attack > 100 * end:\n                max_attacks = max(max_attacks, x - start + 1)\n        for x in range(end, len(nums)):\n            cur_attack -= nums[x - end]\n            cur_attack += nums[x]\n            if cur_attack > 100 * end:\n                max_attacks = max(max_attacks, x - start + 1)\n        return max_attacks\n\n    nums = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    length = len(nums)\n    return str(search_longest_attack(0, length, nums))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result\n\nprint(solution(input()))"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    requests = stdin.split('\\n')[1]\n    requests = [int(requests[i]) for i in range(n)]\n    requests.sort()\n    count = 1\n    maxCount = 0\n    for i in range(1, n):\n        if requests[i] - requests[i-1] > 100 * (i+1):\n            count = 1\n        else:\n            count += 1\n        if count > maxCount:\n            maxCount = count\n    return maxCount"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n    seq_len = len(sequence)\n\n    if n == seq_len:\n        return str(n)\n\n    if seq_len == 0:\n        return '0'\n\n    d = {0: 0}\n    result = 0\n    for item in sequence:\n        if item > 100 * n:\n            break\n        if item in d:\n            d[item] = d[item] + 1\n        else:\n            d[item] = 1\n\n    start = 0\n    for key in d:\n        if d[key] > d[d[start]]:\n            start = key\n        if d[key] + d[d[start]] >= 100 * n:\n            result = max(result, key - start)\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    request = stdin.readline().strip().split()\n    curr_request = 0\n    max_period = 0\n    period = 0\n    for i in range(n):\n        curr_request += int(request[i])\n        if curr_request > max_period:\n            max_period = curr_request\n            period = i + 1\n    if max_period >= 100 * n:\n        return str(period)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the length of the longest time period, which is considered to be a DDoS-attack by Arseny\"\"\"\n   ...\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    dp = [1] * n\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    for i in range(n):\n        ans = max(ans, dp[i])\n    return str(ans)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = list(map(int, stdin.split(\" \")))\n    if len(num) == n:\n        num = num[1:]\n    print(num)\n    result = []\n    # print(max(num))\n    # while num:\n    #     if num[0] <= 100 * n:\n    #         result.append(num[0])\n    #         num.pop(0)\n    #     else:\n    #         break\n    #     print(result)\n    #     print(max(result))\n    #     return max(result)\n\n\n    return max(num)\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if stdin.count(\"?\") > stdin.count(\"N\") else \"YES\"\n\n\ndef"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    series = [x for x in stdin.split(' ')[1]]\n    d = 0\n    for i in range(1, n):\n        if series[i]!= series[i - 1]:\n            d += 1\n    if k == d:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution. This function return output to send to stdout.\n    :param stdin: Text on first line as string.\n    :return:\n    \"\"\"\n\n    line = stdin.split('\\n')\n    n = int(line[0].split()[0])\n    k = int(line[0].split()[1])\n    series = line[1]\n    series = [series[i] for i in range(n)]\n\n    def get_dissat(series, k):\n        i = 0\n        dissat = 0\n        for j in range(n):\n            if series[j] == '?':\n                dissat += 1\n            else:\n                dissat = 0\n            if dissat >= k:\n                return j\n    return 'YES' if get_dissat(series, k) == k else 'NO'"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.split()[0]\n    idx = 0\n    ans = ''\n    for i in range(1, n):\n        if s[idx] == '?':\n            ans += 'N'\n            idx += 1\n        elif s[idx] == 'Y':\n            if i - k > 0:\n                idx = max(idx, i - k)\n            ans += 'Y'\n        elif s[idx] == 'N':\n            ans += 'N'\n    if ans == 'YNYN':\n        return 'YES'\n    if ans[:k] == 'NY' and ans[-k:] == 'N':\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[0])\n    print(stdin[1])\n    return \"\""
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(stdin)\n    ans = \"YES\"\n    for i in range(n):\n        if seq[i] == \"?\":\n            continue\n        if seq[i] == \"Y\":\n            ans = \"NO\"\n            break\n        if seq[i] == \"N\":\n            if i < n - k:\n                for j in range(i + 1, i + k + 1):\n                    if j >= n:\n                        ans = \"NO\"\n                        break\n                    if seq[j] == \"N\":\n                        ans = \"NO\"\n                        break\n            else:\n                ans = \"NO\"\n    return ans\n\"\"\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    seq = stdin.strip().split(' ')\n    count = 0\n    for i in range(n):\n        if seq[i] == 'N':\n            count = 0\n        elif seq[i] == '?':\n            count += 1\n            if count == k:\n                return 'NO'\n        else:\n            count = 0\n    return 'YES'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n\n    curr_len = 0\n    for i in range(n):\n        if stdin[i] == '?':\n            curr_len += 1\n            if curr_len > k:\n                return 'NO'\n        else:\n            curr_len = 0\n    return 'YES'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_episodes = stdin[0]\n    number_of_wanted_episodes = stdin[1]\n    episodes = stdin[2:]\n    count = 0\n    dissatisfaction = 0\n    for i in episodes:\n        if i == \"Y\":\n            count += 1\n        if i == \"N\":\n            count = 0\n        if count > dissatisfaction:\n            dissatisfaction = count\n    if dissatisfaction < number_of_wanted_episodes:\n        return \"NO\"\n    elif dissatisfaction == number_of_wanted_episodes:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'YES' if int(stdin) == 2 and k - 1 == n else 'NO'"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, D = [int(x) for x in stdin.split()]\n    A = [X]\n    for i in range(1, N):\n        A.append(A[-1] + D)\n    S = sum(A)\n    T = X * (N - 1) + sum(A)\n    res = 0\n    for i in range(N):\n        if i == 0:\n            res += S - T\n        else:\n            res += S - T + 2 * D * i\n    return str(res)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    num, target_sum = [int(x) for x in stdin.split(\" \")]\n    A = list(range(1, num+1))\n    B = A[::-1]\n\n    def find_possible_sums(A, target_sum, result):\n        for i, a in enumerate(A):\n            for j, b in enumerate(B):\n                if a + b == target_sum:\n                    result.append(a + b)\n                    return\n                elif a + b < target_sum:\n                    break\n                else:\n                    find_possible_sums(A[i+1:], target_sum - a, result)\n                    break\n\n    result = []\n    find_possible_sums(A, target_sum, result)\n    print(len(set(result)))\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '0'\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of possible values of S - T\n    '''\n    return 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, X, D = map(int, stdin.split())\n    \n    def sums(takahashi: int, aoki: int):\n        return sum(takahashi) - sum(aoki)\n    \n    result = 0\n    for i in range(N + 1):\n        if i == 0:\n            result += sum(range(X + 1))\n            continue\n        result += sums(range(i, X + 1, D), range(i, X + 1, D))\n    \n    return str(result)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a = [int(s) for s in stdin.split()]\n    N = a[0]\n    X = a[1]\n    D = a[2]\n    count = 0\n    if D == 0:\n        count = 2**N - 1\n    elif X >= 2*D:\n        count = 2**N - 1\n    else:\n        count = 2*(X//D)\n    return str(count)"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(n) for n in stdin.split(' ')]\n    x, d, n = nums[0], nums[1], nums[2]\n    # get all the subsequences\n    subseqs = []\n    for i in range(n):\n        subseqs.append((x, x + d*i))\n    # find all unique values of s-t\n    s_t_vals = set()\n    for s, t in subseqs:\n        s_t_vals.add(s - t)\n    print(len(s_t_vals))\n    return ''"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #total_elements = int(stdin.split()[0])\n    #ele = int(stdin.split()[1])\n    #d = int(stdin.split()[2])\n    #max_ele = int(d + ele)\n    #mod = max_ele % ele\n    #max_ele = max_ele - mod + ele\n    #x = int(ele / 2)\n    #z = max_ele % x\n    #max_ele = max_ele - z + x\n    #sum = 0\n    #count = 0\n    #l = []\n    #for i in range(1, max_ele+1):\n    #    if i % ele == 0:\n    #        if i % d == 0:\n    #            l.append(i)\n    #        else:\n    #            l.append(i)\n    #    else:\n    #        if i % d == 0:\n    #            l.append(i)\n    #for j in range(len(l)):\n    #    sum = sum + l[j]\n    #print(sum)\n    n = int(stdin.split()[0])\n    d = int(stdin.split()[1])\n    s = 0\n    for i in range(n):\n        s = s + d + i\n    print(s)\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return the result\n    return 'Count:'+ str(n)"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    X, D, N = list(map(int, stdin.split()))\n    M = X // D\n    if M == N:\n        return \"0\"\n    elif N > M:\n        return \"0\"\n    else:\n        return str((M * (M + 1)) // 2 * N - (M * (M - 1)) // 2)\n    \"\"\"\n    n, x, d = map(int, stdin.split())\n    m = x // d\n    if n == m:\n        return '0'\n    elif n > m:\n        return '0'\n    else:\n        return str((m * (m + 1)) // 2 * n - (m * (m - 1)) // 2)\n\ndef"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\\n\")\n    'YES'\n    >>> solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\\n\")\n    'NO'\n    \"\"\"\n    stdin = stdin.split('\\n')\n    outcome = {handle: (int(rating_before), int(rating_after)) for handle, rating_before, rating_after in\n               [line.split() for line in stdin]}\n    handle_rating = {handle: int(rating) for handle, rating in [line.split() for line in stdin]}\n    for handle, rating_before, rating_after in outcome.values():\n        if (rating_after >= 2400 and rating_before <= rating_after) or (rating_after < 2400 and rating_before >= rating_after):\n            continue\n        elif handle_rating[handle] >= 2400 and rating_before <= rating_after:\n            continue\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_good(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cnt = int(stdin)\n    for i in range(cnt):\n        handle, before, after = stdin.split(' ')\n        if before > after:\n            print('YES')\n        else:\n            print('NO')\n        \n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bef = []\n    aft = []\n    for _ in range(n):\n        data = stdin.readline().strip().split()\n        bef.append(int(data[1]))\n        aft.append(int(data[2]))\n    bef_sorted = sorted(bef)\n    aft_sorted = sorted(aft)\n    if bef == aft_sorted:\n        print('YES')\n    else:\n        print('NO')\n\n\nsolution(stdin)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    n = int(stdin.readline())\n    for _ in range(n):\n        name, before, after = stdin.readline().split()\n        result.append((before, after))\n    result = sorted(result, key=lambda x: int(x[1]), reverse=True)\n    for item in result:\n        if int(item[0]) < 2400:\n            return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    d = {}\n    for _ in range(n):\n        s, e, l, r = stdin.split()\n        if l > r:\n            l, r = r, l\n        d.setdefault(s, [])\n        d[s].append((e, l, r))\n    \n    for s in d:\n        d[s].sort(key=lambda x: x[1])\n    \n    res = []\n    for _ in range(n):\n        s, e, l, r = stdin.split()\n        if l > r:\n            l, r = r, l\n        \n        p = d[s]\n        while p:\n            if e <= p[0][1] and r >= p[0][2]:\n                break\n            p = p[1:]\n        \n        if not p:\n            res.append('NO')\n            continue\n        \n        for i in range(len(p)):\n            if p[i][1] > p[i][2]:\n                p = p[i:]\n                break\n        \n        if not p:\n            res.append('NO')\n            continue\n        \n        if p[0][0] <= e and p[0][2] >= r:\n            res.append('YES')\n            continue\n        \n        res.append('NO')\n    \n    return '\\n'.join(res)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(set(stdin.split()[1:])) == len(stdin.split()[1:]) and all(int(stdin.split()[i+1]) - int(stdin.split()[i]) >= 0 for i in range(len(stdin.split()[1:]))) else 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        handle, before, after = stdin.readline().split()\n        before, after = int(before), int(after)\n        if (before <= after and after <= 2400) or (before >= 2500 and before <= after):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\"\"\"\n\ns = int(input())\n\nfor _ in range(s):\n    handle, before, after = input().split()\n    before, after = int(before), int(after)\n    if (before <= after and after <= 2400) or (before >= 2500 and before <= after):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    N, ratings = stdin.split(\"\\n\")\n    N = int(N)\n    ratings = [i.split(\" \") for i in ratings.split(\"\\n\")]\n    names = {}\n    for i in ratings:\n        names[i[0]] = int(i[1])\n    \n    for i in ratings:\n        if i[0] in names:\n            if names[i[0]] <= int(i[1]) and int(i[1]) > 2400:\n                return \"YES\"\n    return \"NO\"\n    pass"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        handle, before, after = stdin.split()\n        before = int(before)\n        after = int(after)\n        if after > before:\n            count += 1\n    if count >= n // 2:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0]\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin, 2))\n\"\"\"\n\nfrom functools import reduce\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = stdin[1:]\n\n    return stdin\n\nprint(solution('10100'))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\u0412 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u0432\u043e\u0434\u0430 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u0435\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:\n>>> s = '10100'\n>>> s = '10101'\n>>> s = '101101010'\n>>> s = '101110011101010'\n\n\u0412 \u043e\u0442\u0432\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443: \u043e\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0438\u0437 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u043e\u0437\u044c\u043c\u0435\u043c $1$ \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c \u0432 $1$ \u043c\u0438\u043d\u0443\u0442\u0435, \u043f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u0430\u0441\u044c $4$. \u041d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u043d\u0430\u0447\u0430\u043b\u0438\u0441\u044c \u043f\u043e\u0437\u0436\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u043b\u0438 \u0438\u0445 \u0438\u0437 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0440\u0435\u0448\u0430\u0435\u043c \u043a\u0430\u043a\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u043f\u043e\u0437\u0436\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0442\u0430\u0440\u0442\u0443\u0435\u043c \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u044b $1$ \u0432 $4$, \u0437\u0430\u0442\u0435\u043c $4$ \u0432 $16$, $64$ \u0432 $128$, $256$ \u0432 $512$. \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043c $3$.\n\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 $4$ \u0432 $8$. \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043c $2$.\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, m = map(int, stdin.readline().split())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    return str(matrix.index(sorted(matrix, key=lambda x: sum(x) / len(x), reverse=True)))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split(' '))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split(' '))))\n    return str(min(m, n))"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.readline().split())\n    ans = 0\n    matrix = []\n    for i in range(n):\n        matrix.append([])\n        row = list(map(int, stdin.readline().split()))\n        for x in row:\n            matrix[i].append(x)\n    ans = min(n, m)\n    print(ans)\n    return ''"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    \n    return len(matrix)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the minimum number of rows of matrix b such that matrix a can be obtained from it\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(x)]\n    return min(x//2, y//2)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    size = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a = []\n    for x in stdin.split(\"\\n\")[1:]:\n        a.append([int(i) for i in x.split()])\n    print(a)\n    print(size)\n    cnt = 0\n    for x in range(size[1]):\n        if cnt == size[0]:\n            break\n        else:\n            if a[cnt][x] == 1 and a[cnt+1][x] == 0:\n                cnt += 1\n    return cnt"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Mirrors a matrix\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: the answer\n    \"\"\"\n    n, m = [int(i) for i in stdin.split(\" \")]\n    a = [\n        [int(i) for i in stdin.split(\" \")]\n        for _ in range(n)\n    ]\n    a_mirror = [\n        [int(i) for i in stdin.split(\" \")]\n        for _ in range(n)\n    ]\n    for i in range(m):\n        for j in range(n):\n            a_mirror[i][j] = a[n-j-1][i]\n    return str(min(sum(i) for i in a_mirror))\n    \n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if a[i][j] == a[i-1][j]:\n                a[i].pop(j)\n                a[i].insert(j, 0)\n                a[i-1].pop(j)\n                a[i-1].insert(j, 0)\n\n    return len(a)"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(textwrap.dedent('''\\\n   ...     2\n   ...     7 11\n   ...     4 7\n   ...     '''))\n    '1'\n    >>> solution(textwrap.dedent('''\\\n   ...     5\n   ...     1 2\n   ...     4 7\n   ...     2 5\n   ...     1 3\n   ...     6 8\n   ...     '''))\n    '3'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    orders = []\n    for _ in range(n):\n        orders.append(tuple(map(int, stdin.readline().split())))\n\n    orders.sort(key=lambda x: x[1])\n    count = 1\n    i = 1\n    for _, finish in orders[:-1]:\n        if finish > i:\n            count += 1\n            i = finish\n    return count\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = 0\n    count = 0\n    numbers = [int(stdin.readline().strip()) for _ in range(n)]\n    numbers.sort()\n    for number in numbers:\n        if t < number:\n            count += 1\n            t = number\n    return count"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    orders = []\n    n = int(stdin.readline())\n    for _ in range(n):\n        orders.append([int(x) for x in stdin.readline().split()])\n    orders.sort()\n    cur_start = orders[0][0]\n    cur_end = orders[0][1]\n    max_time = 0\n    cur_time = 1\n    for i in range(1, n):\n        if orders[i][0] >= orders[i - 1][1]:\n            cur_time = 1\n        else:\n            cur_time += 1\n        cur_end = max(cur_end, orders[i][1])\n        max_time = max(max_time, cur_time)\n    return max_time\n\n\ndef"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    orders = []\n    for _ in range(n):\n        orders.append(stdin.readline().split())\n    result = 0\n    orders.sort(key=lambda x: x[1])\n    for order in orders:\n        for o in orders:\n            if order[0] < o[1] and order[1] > o[0]:\n                result += 1\n                break\n    return str(result)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    orders = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        orders.append((l, r))\n    return max(\n        [\n            (r - l) // 2\n            for _, r in sorted(orders, key=lambda x: x[0])\n            for l, r in sorted(orders, key=lambda x: x[1])\n            if l < r\n        ]\n        or [0]\n    )\n\n\ndef"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    \n    orders = []\n    for i in range(n):\n        order = [int(num) for num in stdin.readline().strip().split()]\n        orders.append(order)\n        \n    orders = sorted(orders, key=lambda x: x[0])\n    \n    orders_on_road = 1\n    end_time = orders[0][1]\n    for i in range(1, n):\n        if end_time <= orders[i][0]:\n            orders_on_road += 1\n            end_time = orders[i][1]\n    \n    return str(orders_on_road)\n\n\nsolution('5\\n1 2\\n4 7\\n2 5\\n1 3\\n6 8\\n4 8\\n')\nsolution('4\\n1 2\\n2 3\\n3 4\\n4 5\\n')\nsolution('5\\n1 2\\n4 7\\n2 5\\n1 3\\n6 8\\n4 8\\n')\nsolution('6\\n4 8\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\\n4 8\\n')\n\n\n-----Time Complexity-----\nO(N*log(N))\n\n-----Space Complexity-----\nO(1)\n\n\n-----Algorithm-----\n\nThe idea is to sort the list of orders by the start time. Then we iterate through the sorted list of orders and keep on increasing the end time variable. At any point, if it intersects with the end time of a previously accepted order, we ignore the order. Otherwise, we increment the number of accepted orders by 1. If a given end time is greater than or equal to the start time of the next order, we increment the end time and update the number of accepted orders.\n\nThe final result is the number of accepted orders.\n\"\"\"\n\ndef"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(stdin) <= 1000 else 'no'"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return solve(stdin)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calc_step(l: list) -> int:\n        cur_tables, cur_formulas = 0, 0\n        for x, y in l:\n            cur_tables += x\n            cur_formulas += y\n        return max(cur_tables, cur_formulas)\n\n    n, k = map(int, stdin.split())\n    tables, formulas = [], []\n    for i in range(n):\n        tables.append(int(stdin.split('\\n')[i].split()[0]))\n        formulas.append(int(stdin.split('\\n')[i].split()[1]))\n\n    max_tables, max_formulas = max(tables), max(formulas)\n    max_table_count = max(1, max_tables // k)\n    max_formulas_count = max(1, max_formulas // k)\n    tables_count = calc_step(zip(tables, formulas))\n\n    #  check if we can fit the whole thing in one page\n    if max_table_count < max_formulas_count:\n        return 'NO'\n\n    #  now we need to check if we can fit the rest\n    if tables_count > k:\n        return 'NO'\n\n    #  now we need to check if we can fit the rest\n    if formulas_count > k:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # The \"T\" and \"F\" don't matter, they just need to be there\n    # Return the result\n    return \"\""
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    x, y = [int(x) for x in stdin.split('\\n')[1].split()]\n    return \"YES\" if k - 2 * x < y and k - 2 * y < x else \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 10 1\\n3 2 10 1\")\n    'YES'\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    n, k = map(int, lines[0].split(\" \"))\n    tables = [int(line) for line in lines[1].split(\" \")]\n    formulas = [int(line) for line in lines[2].split(\" \")]\n    tables = [tables[i] if i == 0 or tables[i]!= tables[i - 1] else 0 for i in range(n)]\n    formulas = [formulas[i] if i == 0 or formulas[i]!= formulas[i - 1] else 0 for i in range(n)]\n    pages = [tables[0], formulas[0]]\n    for t in tables[1:]:\n        pages.append(t + pages[-1])\n    for f in formulas[1:]:\n        pages.append(f + pages[-1])\n    for i in range(1, n):\n        if pages[i] - pages[i - 1] > k:\n            return \"NO\"\n        for j in range(i + 1, n):\n            if pages[j] - pages[i] > k:\n                break\n            if pages[j] - pages[i] > k:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()))\n    formulas = list(map(int, stdin.split()))\n\n    if sum(tables) % k == 0:\n        return 'YES'\n    if sum(formulas) % k == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    [tables, formulas] = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    pages = []\n    for _ in range(n):\n        [tables, formulas] = list(map(int, stdin.split(\"\\n\")[_ + 1].split(\" \")))\n        pages.append({\"t\": tables, \"f\": formulas})\n    pages.sort()\n    answer = \"YES\"\n    tables_count = 0\n    formulas_count = 0\n    for _ in range(len(pages)):\n        page = pages[_]\n        if page[\"t\"] > k:\n            answer = \"NO\"\n            break\n        tables_count += page[\"t\"]\n        formulas_count += page[\"f\"]\n        if tables_count > k:\n            answer = \"NO\"\n            break\n        if formulas_count > k:\n            answer = \"NO\"\n            break\n    return answer\n\nprint(solution(stdin))\n\n\n-----Problem-----\n\nNathan has an array of $n$ integers. Let's denote it as A. He is going to make it a bit more comfortable by adding zeroes to the end until it has the length of a power of $k$ (i.e. it is $k$ times longer than the previous array).\n\nIf the array already has the correct length then he won't do anything.\n\nNathan is only allowed to add zeroes to the end of the array.\n\nYour task is to find the minimum length of the array after the modification is done.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 10^6$, $1 \\le k \\le 10^6$).\n\nThe next line contains $n$ integers $A_1, A_2, \\dots, A_n$ ($0 \\le A_i \\le 10^6$) \u2014 the array to modify.\n\n\n-----Output-----\n\nPrint the minimum length of the array after the modification is done.\n\n\n-----Examples-----\nInput\n3 1\n4 1 3\n\nOutput\n4\n\nInput\n3 2\n4 1 3\n\nOutput\n4\n\nInput\n5 3\n4 1 3 2 5\n\nOutput\n5\n\n\n-----Note-----\n\nIn the first example the array already has the length of a power of $k$ (i.e. it is $k$ times longer than the previous array).\n\nIn the second example the array has the length of $4$.\n\ndef"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    tables, formulas, k = [int(x) for x in stdin.split('\\n')]\n    tables = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    formulas = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    i = 0\n    j = 0\n    moves = 0\n    tables_in_row = 0\n    formulas_in_row = 0\n    last_table_index = 0\n    last_formula_index = 0\n    while i < len(tables):\n        if tables[i] > k:\n            break\n        tables_in_row += 1\n        i += 1\n    while j < len(formulas):\n        if formulas[j] > k:\n            break\n        formulas_in_row += 1\n        j += 1\n    if i < len(tables):\n        if tables[i] > k:\n            return 'NO'\n        while tables_in_row < k and i < len(tables):\n            tables_in_row += tables[i]\n            i += 1\n        if tables_in_row > k:\n            tables_in_row = 0\n            i = last_table_index + 1\n        if tables_in_row < k:\n            last_table_index = i - 1\n    else:\n        last_table_index = i\n    if j < len(formulas):\n        if formulas[j] > k:\n            return 'NO'\n        while formulas_in_row < k and j < len(formulas):\n            formulas_in_row += formulas[j]\n            j += 1\n        if formulas_in_row > k:\n            formulas_in_row = 0\n            j = last_formula_index + 1\n        if formulas_in_row < k:\n            last_formula_index = j - 1\n    else:\n        last_formula_index = j\n    if last_formula_index < last_table_index:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    polynomial_size, integer = map(int, stdin.split(\" \"))\n    polynomial = [0] * (polynomial_size + 1)\n    polynomial[0] = 1\n    for x in range(1, polynomial_size + 1):\n        polynomial[x] = int(stdin.readline()) if x % 2 == 1 else -1\n    integer = int(stdin.readline())\n    # The polynomial has been set, but not calculated, so polynomial is a dictionary\n    polynomial_dictionary = {x: 0 for x in range(-polynomial_size, polynomial_size + 1)}\n    for i in range(polynomial_size + 1):\n        polynomial_dictionary[i] = polynomial[i]\n    print(polynomial_dictionary)\n    max_index = len(polynomial) - 1\n    polynomial_dictionary[max_index] = polynomial[max_index]\n    print(polynomial_dictionary)\n    return \"Yes\" if polynomial_dictionary[max_index] % integer == 0 else \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    polynomial = []\n    for i in range(n):\n        polynomial.append(int(stdin.split('\\n')[i + 1]))\n    while '?' in polynomial:\n        polynomial.remove('?')\n    polynomial.sort()\n    polynomial = polynomial[::-1]\n    print(polynomial)\n    return 'Yes' if polynomial[0] / polynomial[1] == k else 'No'"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    A = []\n    for i in range(n + 1):\n        A.append(int(stdin[(i + 1) * (i // 2 + 1) + 1 + (i % 2)]))\n\n    def f(x):\n        return sum(a * x ** i for i, a in enumerate(A[:-1])) + A[-1] - x\n\n    l, r = -10 ** 5, 10 ** 5\n    while r - l > 1:\n        m = (r + l) // 2\n        if f(m) >= k:\n            r = m\n        else:\n            l = m\n    return 'Yes' if f(l) % k == 0 else 'No'\n\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [0] * (n + 1)\n    for i in range(n):\n        a[i] = int(stdin[i])\n    for i in range(n + 1):\n        if a[i] == 0:\n            a[i] = 1\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if a[i] == a[j] + 1 and a[j] == 0:\n                a[j] = 1\n                break\n    if a[n] - k == 0:\n        print('Yes')\n        return\n    print('No')\n    return\nsolution(input())\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    coefficients = [0] * (n + 1)\n    for i in range(n + 1):\n        if stdin[2 * i] == '?':\n            coefficients[i] = -1\n        else:\n            coefficients[i] = int(stdin[2 * i])\n    polynomial = [0] * (n + 1)\n    polynomial[0] = -1\n    for i in range(1, n + 1):\n        polynomial[i] = coefficients[i] * i * i - 1\n    for i in range(1, n + 1):\n        polynomial[i] += coefficients[i]\n    # print(polynomial)\n    Q = n * n - 1\n    # print(Q)\n    polynomial[0] += k\n    # print(polynomial)\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            if polynomial[i] % (polynomial[j] * (Q // (i - j) + 1)):\n                print('No')\n                return\n    print('Yes')\n\nprint(solution(input()))\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    polynomial = []\n    for _ in range(a):\n        polynomial.append(int(stdin.readline()))\n    return \"Yes\" if polynomial[-1] % k == 0 else \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    polynomial = [0] * (n + 1)\n    for i in range(n + 1):\n        polynomial[i] = int(stdin[(i * 3):((i + 1) * 3)])\n    polynomial = Polynomial(polynomial)\n    polynomial.remove_zeros()\n    polynomial.add_constant()\n    polynomial.reduce_polynoms()\n    polynomial.remove_zeros()\n    polynomial.add_constant()\n    polynomial.reduce_polynoms()\n    print('Yes' if polynomial.reduce_polynoms(k) else 'No')\n    return\n\n\nclass Polynomial:\n    def __init__(self, coef: List[int]):\n        self.coefficients = coef\n\n    def __repr__(self):\n        return f'Polynomial({self.coefficients})'\n\n    def __str__(self):\n        return str(self.coefficients)\n\n    def __eq__(self, other):\n        return self.coefficients == other.coefficients\n\n    def add_constant(self):\n        if self.coefficients[0] == 0:\n            self.coefficients = self.coefficients[1:]\n        else:\n            self.coefficients.insert(0, 0)\n\n    def remove_zeros(self):\n        for i in range(self.coefficients.count(0)):\n            self.coefficients.remove(0)\n\n    def reduce_polynoms(self):\n        p = self.coefficients\n        while len(p) > 1 and p[0] == 0:\n            p = p[1:]\n        while len(p) > 1 and p[-1] == 0:\n            p = p[:-1]\n        if len(p) == 1:\n            return Polynomial(p)\n        if p[0] == 0:\n            p = p[1:]\n        if p[-1] == 0:\n            p = p[:-1]\n        if len(p) == 1:\n            return Polynomial(p)\n        k = 1\n        while k < len(p):\n            if p[k] == p[k - 1]:\n                p = p[:k - 1] + p[k + 1:]\n            else:\n                k += 1\n        return Polynomial(p)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Gets the number of coefficients and k from stdin.\n    Then, creates the polynomial by appending the coefficients in the right order.\n    Then, checks if the resulting polynomial is divisible by x - k.\n    :param stdin: str\n    :return: str\n    '''\n    coeffs = list(map(int, stdin.split()))\n    polynomial = list(coeffs[0:coeffs[0]])\n    polynomial.reverse()\n    while len(polynomial)!= len(coeffs):\n        polynomial.append(0)\n    polynomial.reverse()\n    print(polynomial)\n    return 'Yes' if check(polynomial) else 'No'\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    polynomial = get_polynomial(stdin)\n    k = get_k(stdin)\n\n    if get_divisor(polynomial, k):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = [int(x) for x in stdin.split(' ')]\n    polynomial = []\n    for _ in range(n + 1):\n        polynomial.append(stdin.split(' ')[1])\n    polynomial_str = ''.join(polynomial)\n    polynomial_str = polynomial_str.replace('?','')\n    polynomial_str = polynomial_str.split(' ')\n    for i in range(len(polynomial_str)):\n        polynomial_str[i] = int(polynomial_str[i])\n    polynomial_str[0] -= k\n    polynomial_str_reversed = list(reversed(polynomial_str))\n    polynomial_str_reversed.append(polynomial_str_reversed.pop(0))\n    polynomial_str_reversed[0] = polynomial_str_reversed[0] - 1\n    polynomial_str_reversed[0] = - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_reversed[0]\n    polynomial_str_reversed[0] = -1 - polynomial_str_re"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X_2: int = int(stdin)\n    X_0: int = 2 * X_2\n    if X_0 % 2 == 1:\n        X_0 = X_0 - 1\n    while True:\n        if is_prime(X_0):\n            X_0 = X_0 - 1\n        else:\n            break\n    return str(X_0)\n\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_0 = int(stdin)\n    x_1 = 1\n    x_2 = 1\n    x_3 = 1\n    if x_0 % 3 == 2:\n        x_0 = x_0 // 3 + 2\n    else:\n        x_0 = x_0 // 3 + 1\n    while x_0 % 2 == 0:\n        x_0 //= 2\n    while x_0 % 3 == 0:\n        x_0 //= 3\n    while x_1 % 5 == 0:\n        x_1 = x_1 * 3 + 7\n    while x_2 % 7 == 0:\n        x_2 = x_2 * 5 + 11\n    while x_3 % 11 == 0:\n        x_3 = x_3 * 13 + 17\n    if x_0 < x_1:\n        x_0 = x_1\n    if x_0 < x_2:\n        x_0 = x_2\n    if x_0 < x_3:\n        x_0 = x_3\n    return str(x_0)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the smallest possible number X_0 for the game Alice and Bob.\n    \n    Input:\n        stdin: X_2.\n    Output:\n        str: X_0.\n    '''\n    return ''\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    X_0 = 2\n    while X_0 < X_2:\n        if is_prime(X_0):\n            X_2 -= X_0\n        X_0 += 1\n    return str(X_0)\n\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'TLE'"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 4:\n        return str(4)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    for i in primes:\n        if x % i!= 0:\n            return str(i)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    for i in range(3,number,2):\n        if isPrime(i):\n            if number%i == 0:\n                number-=1\n    return number\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Decode stdin\n    X_2 = int(stdin)\n    primes = [2]\n    for n in range(3,X_2,2):\n        if not is_prime(n):\n            primes.append(n)\n\n    X_0 = 4\n    while True:\n        if not is_prime(X_0):\n            for i in range(len(primes)):\n                if X_0 % primes[i]!= 0:\n                    continue\n                for j in range(1, len(primes)):\n                    if X_0 / primes[j] == 1:\n                        continue\n                    if X_0 % primes[j] == 0:\n                        continue\n                    X_0 = X_0 - primes[i] * primes[j]\n                    break\n                break\n        if X_0 >= X_2:\n            break\n        X_0 += 2\n    return str(X_0)\n\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    i = 1\n    while 2 ** i <= n:\n        i += 1\n    if p == -1:\n        i += 1\n    if i > 2:\n        return str(i - 1)\n    else:\n        return str(-1)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if p > 0:\n        res = 0\n        while n > 0:\n            res += 1\n            n -= 2**res - p\n        return str(res)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if p > 0:\n        result = int(math.log2(n))\n    elif p < 0:\n        result = int(math.log2(-n)) + 1\n    else:\n        result = 1 if n > 0 else -1\n    return str(result)\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if p == 0 or p == 1:\n        return n\n    if n == 1:\n        return 0\n    if p == -1:\n        if n % 2:\n            return n + 1\n        else:\n            return n\n    p_div = 2\n    while p_div ** 2 <= n:\n        p_div *= 2\n    p_div /= 2\n    p_sum = 0\n    while p_div >= p:\n        p_sum += 1\n        p_div -= p\n    if n - (p_div ** 2) * 2 < 0:\n        return p_sum + 1\n    return p_sum + n - (p_div ** 2) * 2 + 1\n\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split(' '))\n    if n < 1 or n > 1000000000:\n        return -1\n    if p < -1000 or p > 1000:\n        return -1\n    return 1 if n == 1 else -1 if n == 0 else n\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, p = map(int, stdin.split())\n    summands = [p]\n    while p < n:\n        p *= 2\n        summands.append(p)\n    summands.sort(reverse=True)\n    i = 0\n    while i < len(summands) - 1 and n > summands[i]:\n        n -= summands[i]\n        i += 1\n    if n == 0:\n        return str(i)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    l = 1\n    r = 2 ** n\n    while l < r:\n        m = (l + r) // 2\n        s = sum(m // (2 ** i) % 2 for i in range(n))\n        if s == p:\n            return m\n        elif s < p:\n            l = m\n        elif s > p:\n            r = m\n\n    return -1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    return str(1 if p < 0 else n + 1) if p == 0 else str(min(n // p, (n + 1) // p))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split(' ')]\n\n    if p == 0:\n        return 1 if n == 1 else -1\n\n    k = 0\n    while 2**k <= n:\n        k += 1\n\n    m = -1\n    for i in range(k):\n        n_p = (n - 2**i)\n        if n_p >= 0:\n            m = min(n_p, m if m!= -1 else 2**i + 1)\n\n    if m == -1:\n        return -1\n    return m + 1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    return str(n + p) if bin(n)[2:].count('1') <= bin(p)[2:].count('1') else -1"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    a = stdin.split('\\n')[1]\n    result = ''\n    num = int(a)\n    if num == 0:\n        return str(0)\n    while num:\n        if num % 10 == 0:\n            num /= 10\n            result += '0'\n        else:\n            break\n    \n    while num:\n        if num % 10 == 0:\n            num /= 10\n            result += '0'\n        else:\n            result += str(num % 10)\n            num /= 10\n    \n    if k > len(result):\n        return a\n    return a[k:]\n\n\n\n-----Problem-----\n\n\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439. \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0442\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f, \u0447\u044c\u0438 \u0438\u043c\u0435\u043d\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u00ab\u0430\u00bb, \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u0445 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0424\u0430\u0439\u043b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u044d\u043d\u0442\u0435\u0440\u0430.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0421\u0442\u0440\u043e\u043a\u0438 \u0442\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443.\n\nSample Input:\n\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../task.py\n/home/user/.../"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    num = stdin.split(\" \")\n    num = int(\"\".join(num))\n    ans = num\n    while n > 0:\n        ans = str(ans)\n        if ans[0] == \"0\" and len(ans) > 1:\n            ans = ans[1:]\n        else:\n            break\n        n -= 1\n    while k > 0:\n        ans = str(ans)\n        ans = ans[::-1]\n        if ans[0] == \"0\" and len(ans) > 1:\n            ans = ans[1:]\n        else:\n            break\n        k -= 1\n    return str(int(ans[::-1]))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = str(stdin)\n    if n == len(s):\n        return s\n    if n == 1:\n        return '0'\n    digits = sorted(list(set(s)))\n    for d in digits:\n        if s.count(d) > 1:\n            i = s.index(d)\n            if i!= 0:\n                s = s[:i] + '0' + s[i:]\n                if len(s) == n:\n                    return s\n    d = digits[0]\n    for i in range(1, len(digits)):\n        while s.count(digits[i]) > 0:\n            j = s.index(digits[i])\n            s = s[:j] + '0' + s[j:]\n            if len(s) == n:\n                return s\n    return s\n\n\n\n\n'''\nhttps://www.codewars.com/kata/554e4a2f232cdd87d9000038/train/python\n'''"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    s = list(s)\n    \n    min_s = s[::]\n    n = len(min_s)\n    \n    for i in range(n - k):\n        if s[i] == '0':\n            for j in range(i+1, min(n, i+k+1)):\n                if s[j]!= '0':\n                    s[i], s[j] = s[j], s[i]\n                    break\n    return ''.join(min_s)\n    \n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = stdin.split('\\n')[1].replace('0', '1')\n    k = min(k, n)\n    s = list(s)\n    zeroes = []\n    for i, c in enumerate(s):\n        if c == '0':\n            zeroes.append(i)\n\n    for i in range(k):\n        if len(zeroes) == 0:\n            break\n\n        for i in range(len(zeroes) - 1, -1, -1):\n            if i == len(zeroes) - 1:\n                break\n            if zeroes[i] > zeroes[i + 1]:\n                break\n        else:\n            break\n\n        zeroes.pop(i)\n\n    res = []\n    if len(zeroes) > 0:\n        zeroes.sort()\n        first_zero = zeroes[0]\n        first_one = zeroes[0] + 1\n\n        res += s[:first_zero]\n        res.append('1')\n        res += s[first_one:]\n\n        s = ''.join(res)\n\n    return s"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    ans = 0\n    i = len(s) - 1\n    while i >= 0:\n        while i >= 0:\n            if int(s[i])!= 0:\n                ans = int(s[:i] + str(int(s[i]) + 1).zfill(k) + '0' * (n - i - 1))\n                return ans\n\n            i -= 1\n\n        ans = int(s + '1'.zfill(k))\n        return ans\n\nsolution(\"5 3\\n51528\")"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    S = [int(i) for i in stdin.split(' ')]\n    S = str(S[0]) * n\n    for i in range(k):\n        if S[i] == '0':\n            if i == 0:\n                S = S[i + 1:]\n            else:\n                S = S[:i] + S[i + 1:]\n    return S\n\n\ndef"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = map(int, stdin.split(' '))\n    s = stdin\n    \n    if s[0] == '0':\n        return s[0] * (k + 1) + '9' * (n - k - 1)\n    else:\n        return '1' + '0' * (n - 1)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimal solution\"\"\"\n    # Your code here\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(' ')\n    first_friend_numbers = set(map(int, input[0].split(' ')))\n    second_friend_numbers = set(map(int, input[1].split(' ')))\n    prime_numbers_for_first_friend = set()\n    prime_numbers_for_second_friend = set()\n    for num in first_friend_numbers:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers_for_first_friend.add(num)\n    for num in second_friend_numbers:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers_for_second_friend.add(num)\n    nums = set()\n    for num in prime_numbers_for_second_friend:\n        if num in prime_numbers_for_first_friend:\n            nums.add(num)\n    return str(len(nums))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin[0]"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    primes = [2, 3, 5, 7]\n    while len(primes) < stdin.split(' ')[0]:\n        x = primes[-1] + 2\n        while True:\n            is_prime = True\n            for i in primes:\n                if i > math.sqrt(x):\n                    break\n                if x % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(x)\n                break\n            x += 2\n    answer = (stdin.split(' ')[0] - 1) * 2\n    for i in range(1, answer + 1):\n        if is_prime(i):\n            answer -= 1\n    return str(answer)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = [int(x) for x in stdin.split()]\n    if (cnt_1 + cnt_2) % x == 0:\n        return cnt_1 + cnt_2 - (cnt_1 + cnt_2) % x + y\n    else:\n        return cnt_1 + cnt_2 - (cnt_1 + cnt_2) % x + x\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #stdin = stdin.split()\n    print(stdin[0])\n    nums = [int(i) for i in stdin[0].split()]\n    cnt_1, cnt_2 = nums[0], nums[1]\n    x, y = nums[2], nums[3]\n    #print(cnt_1, cnt_2, x, y)\n    arr = [i for i in range(1,100)]\n    #print(arr)\n    arr_1 = []\n    arr_2 = []\n    for i in arr:\n        if i%x!= 0:\n            arr_1.append(i)\n        if i%y!= 0:\n            arr_2.append(i)\n    #print(arr_1, arr_2)\n    arr_3 = []\n    arr_4 = []\n    for i in arr_1:\n        if i in arr_2:\n            arr_3.append(i)\n    for i in arr_3:\n        arr_4.append(i)\n    print(arr_3)\n    print(arr_4)\n    return str(len(arr_4))\n\nprint(solution(stdin))"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split(' '))\n\n    def count_prime(max_: int, x: int, y: int) -> int:\n        prime = [True] * max_\n        for i in range(2, int(max_**0.5) + 1):\n            if prime[i]:\n                for j in range(i * i, max_, i):\n                    prime[j] = False\n        return sum(prime[x: y + 1])\n\n    ans = cnt_1\n    for i in range(x, y + 1):\n        if count_prime(y, i, y) <= cnt_1:\n            break\n        ans += 1\n    return ans\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, y, cnt_1, cnt_2, = [int(x) for x in stdin.split()]\n    y -= 1\n    cnt_1_prime = [1] + [0] * y\n    cnt_2_prime = [1] + [0] * y\n    for i in range(x):\n        cnt_1_prime[i] = 0\n    for i in range(y):\n        cnt_2_prime[i] = 0\n    for i in range(cnt_1):\n        for j in range(y):\n            if j % stdin[2] == 0:\n                cnt_1_prime[j] = 0\n    for i in range(cnt_2):\n        for j in range(y):\n            if j % stdin[3] == 0:\n                cnt_2_prime[j] = 0\n    cnt_1_prime[y] = 0\n    cnt_2_prime[y] = 0\n    prime = []\n    for i in range(1, y + 1):\n        if cnt_1_prime[i]:\n            prime.append(i)\n        if cnt_2_prime[i]:\n            prime.append(i)\n    print(len(prime))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m, x, y = map(int, stdin.split(' '))\n    return str(n + m - (y - x))\n    '''\n    from collections import Counter\n    c = Counter(map(int, stdin.split(' ')))\n    return str(max(c) - min(c) if c[min(c)] > 1 else max(c))\n    \n    # a, b, p, q = map(int, stdin.split(' '))\n    # a -= p; b -= q\n    # if b < 0 or a < 0: return '0'\n    # p, q = p - 1, q - 1\n    # if p < q: p, q = q, p\n    # r = 0\n    # while p:\n    #     r += 1\n    #     p //= q\n    #     q -= 1\n    # return str(a + b - r)\n        \n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    nums = stdin.split()\n    cnt_1, cnt_2, x, y = int(nums[0]), int(nums[1]), int(nums[2]), int(nums[3])\n    if cnt_1 * x < y:\n        return cnt_1 * x\n    elif y % cnt_1 == 0:\n        return y\n    else:\n        return y - cnt_1\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    counts, primes = map(int, stdin.split())\n    primes = set(map(int, input().split()))\n    return str(min(filter(lambda x: x % x in primes, range(counts, 3 * 10 ** 4 + 1))))\n\n\ndef"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, sx, sy, dx, dy, t] = [int(x) for x in stdin.split()]\n    while True:\n        x = sx + dx * t\n        y = sy + dy * t\n        if x % n == 0 and y % n == 0:\n            return str(x // n) +'' + str(y // n)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, Sx, Sy, Dx, Dy, T = [int(x) for x in stdin.split()]\n    return f\"{Sx + ((Dx - Sx - 1) % N) + 1} {Sy + ((Dy - Sy - 1) % N) + 1}\"\n\ndef"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split()]\n\n    def speed(d):\n        x = d[0]\n        y = d[1]\n        return x + y, x - y\n\n    def move(s, t):\n        return s[0] + dx * t, s[1] + dy * t\n\n    def time_taken(x, y, t):\n        return t // (x + y)\n\n    if t % (dx + dy) == 0:\n        x = (x + dx * time_taken(dx, dy, t)) % n\n        y = (y + dy * time_taken(dx, dy, t)) % n\n        print(x, y)\n        return\n\n    speed_x = dx\n    speed_y = dy\n\n    if speed_x < speed_y:\n        d = (dx, dy)\n        if speed_x + t % (dx + dy) >= speed_y:\n            speed_x += t % (dx + dy)\n            x, y = move(d, speed_x)\n            print(x, y)\n            return\n        else:\n            dx, dy = speed(d)\n            x, y = move(d, speed_x)\n            print(x, y)\n            return\n\n    else:\n        d = (dx, dy)\n        if speed_y + t % (dx + dy) >= speed_x:\n            speed_y += t % (dx + dy)\n            x, y = move(d, speed_y)\n            print(x, y)\n            return\n        else:\n            dx, dy = speed(d)\n            x, y = move(d, speed_y)\n            print(x, y)\n            return\n\n\nprint(solution(stdin))\n\nn, sx, sy, dx, dy, t = [int(x) for x in stdin.split()]\nprint(sx, sy)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split()]\n    steps = t // (sx + dy)\n    x = (sx + dx * steps) % n\n    y = (sy + dy * steps) % n\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function reads the input line by line.\n    On the first line the number of cells and the current coordinates and direction of the bear are given.\n    On the second line the initial speed of the bear and the time the bear spends in the field are given.\n    The function should return a string of two numbers, the x-coordinate and the y-coordinate of the bear's new location.\n    \"\"\"\n    # On the first line of the input the number of cells and the current coordinates and direction of the bear are given.\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split(' ')]\n    # On the second line the initial speed of the bear and the time the bear spends in the field are given.\n    # On the third line of the input the number of berries growing in the field.\n    # On the fourth line of the input the number of berries the bear eats at each second.\n    # On the fifth line of the input the number of seconds the bear spends in the field.\n    # x and y coordinates of the bear at the beginning of the game.\n    x = sx\n    y = sy\n    # Moving the bear at each second until the number of seconds is reached.\n    for _ in range(t):\n        # x and y coordinates of the bear at the current time.\n        x = (x + dx - 1) % n + 1\n        y = (y + dy - 1) % n + 1\n        # Eating the berries on the current cell.\n        if x == 1 and y == 1:\n            x += n\n            y += n\n        # Eating the berries on the next cell.\n        # If the next cell is not within the field range, the bear eats the berries on the cell before the next.\n        # If the next cell is within the field range, the bear eats the berries on the next cell.\n        if x == n and y == n:\n            x = 1\n            y = 1\n        elif x == n:\n            x = 1\n            y += n\n        elif y == n:\n            x += n\n            y = 1\n    # Returning the x and y coordinates of the bear.\n    return f'{x - sx} {y - sy}'\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    [n, sx, sy, dx, dy, t] = [int(s) for s in stdin.split()]\n    [dx, dy] = [dx * t + sx - 1, dy * t + sy - 1]\n    print(dx % n, dy % n)\n    return ''"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, Sx, Sy, Dx, Dy, T = [int(x) for x in stdin.split()]\n    x, y = Sx, Sy\n    dx, dy = Dx, Dy\n    for _ in range(T):\n        x += dx\n        y += dy\n        if x >= N or x < 1:\n            dx = -dx\n        if y >= N or y < 1:\n            dy = -dy\n        x = x % N\n        y = y % N\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \u9019\u984c\u7684\u6700\u7c21\u55ae\u7684\u89e3\u6cd5\u662f \u5229\u7528\u9664\u6cd5\n    # \u5148\u627e\u5230\u6700\u5927\u7684\u9ede\uff0c\u7528\u9019\u500b\u9ede\u7576\u908a\u9577\n    # \u7136\u5f8c\u518d\u5c0d\u9577\u5ea6\u7565\u5c0f\u7684\u908a\u9577\u9664\u4ee5\u908a\u9577\u5927\u7684\u90a3\u500b\n    # \u63a5\u4e0b\u4f86\u7528\u9019\u500b\u9ede\u53bb\u8a08\u7b97\n    # \u9019\u908a\u7528\u7d55\u5c0d\u503c\u5c31\u884c\uff0c\u56e0\u70ba\u9084\u6c92\u7528\u5230\u4ea4\u9664\u6cd5\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split()]\n\n    r = abs(dx - sx)\n    c = abs(dy - sy)\n    if r >= c:\n        length = r\n    else:\n        length = c\n    \n    dx = (dx - sx) % length\n    dy = (dy - sy) % length\n    \n    # return str(dx + 1) +'' + str(dy + 1)\n    return '{} {}'.format(dx + 1, dy + 1)"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    count = 0\n    x = sx\n    y = sy\n    while count < t:\n        count += abs(x - y)\n        x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    print(x, y)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, sx, sy, dx, dy, t = [int(x) for x in lines[0].split(' ')]\n    if t == 0:\n        return f\"{sx} {sy}\"\n    x, y = sx, sy\n    for _ in range(t):\n        x, y = ((x + dx - 1) % n) + 1, ((y + dy - 1) % n) + 1\n        x, y = (x + 1) % n, (y + 1) % n\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(0, 26):\n        if stdin.find(chr(i + 97) * 26) == -1:\n            return \"-\" * len(stdin)\n\n    for i in range(0, 26):\n        if stdin.find(chr(i + 97) * 26)!= -1:\n            return stdin[0 : stdin.find(chr(i + 97) * 26)]\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABCDEFGHIJKLMNOPQRZTUVWXYZ\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    dictionary = set()\n    for i in range(26):\n        dictionary.add(chr(i + ord('A')))\n    word = stdin.replace('?', 'A')\n    chars = list(word)\n    for i in range(len(chars)):\n        if chars[i] == '?':\n            chars[i] = 'A'\n    word = ''.join(chars)\n    for i in range(len(word)):\n        for j in range(i + 1, len(word) + 1):\n            substr = word[i:j]\n            subset = set(substr)\n            if len(subset) == 26:\n                dictionary.discard(substr[0])\n                if not dictionary:\n                    return word\n    return -1\n\"\"\"\n\nimport collections\n\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 26:\n        return '-1'\n    return stdin[:26] + \"\".join([l if l!= '?' else chr(ord('A') + i) for i, l in enumerate(stdin[26:])])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # replace all?'s with letters and check for length\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    len_alphabet = 26\n    substring = stdin.replace(\"?\", \"\")\n    len_substring = len(substring)\n    if len_substring < len_alphabet:\n        return \"NO\"\n\n    for i in range(len_alphabet):\n        if substring.count(alphabet[i])!= 1:\n            return \"NO\"\n\n    return substring.replace(\"?\", alphabet)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"...\"\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if '?' in s:\n        return '-1'\n    else:\n        return s\n    pass\n\"\"\""
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    # Your code goes here\n    n = int(stdin.readline())\n    li = stdin.readline().split()\n    if sum(map(int, li)) % 200 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a = stdin.split('\\n')\n    n = int(a[0])\n    a = a[1].split(' ')\n    b = []\n    for i in a:\n        b.append(int(i))\n    b.sort()\n    s = sum(b)\n    if n%2==0:\n        if s%2==0:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        if s%3==0:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if sum(map(int, stdin.split('\\n')[0].split(' '))) % len(stdin.split('\\n')[0].split(' ')) == 0 else 'NO'"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    apples = list(map(int, stdin.readline().split()))\n    if sum(apples) % 2!= 0:\n        return \"NO\"\n    else:\n        print(\"YES\")"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    num = int(line[0])\n    num_list = [int(x) for x in line[1:]]\n    res = 'YES'\n    for i in range(num):\n        if num_list[i] % 200!= 0:\n            res = 'NO'\n    return res"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 4 == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(s) for s in stdin.readline().split()]\n    \n    return \"YES\" if n % 2 == 0 and sum(weights) % (n // 2) == 0 else \"NO\"\n\n'''\n\ndef"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = list(map(int, stdin.readline().split(' ')))\n    if sum(w) % 200!= 0:\n        return \"NO\"\n    s = 0\n    for x in w:\n        if x == 100:\n            s += 200\n        else:\n            s += 100\n    return \"YES\" if s % 200 == 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Author: Carlos G. Campos and Alfonso A. Riva-Ravia\n    Date: 2020-07-17\n    \"\"\"\n    n, m = map(int, stdin.split())\n    floor_rooms = []\n    for _ in range(n):\n        floor_rooms.append(stdin)\n    return n + m\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    C-style approach\n    '''\n    n, m = map(int, stdin.split())\n    rooms = []\n    for _ in range(n):\n        rooms.append(stdin.split()[1:])\n    \n    time = 0\n    current_floor = 0\n    current_room = 0\n    direction = 0\n    while current_floor < n:\n        if rooms[current_floor][current_room] == '1':\n            # Turn off light\n            rooms[current_floor][current_room] = '0'\n            if direction == 0:\n                time += m + 2\n                direction = 1\n            else:\n                time += 1\n        else:\n            # Turn on light\n            rooms[current_floor][current_room] = '1'\n            direction = 0\n        \n        current_room = (current_room + 1) % (m + 2)\n        current_floor = (current_floor + 1) if current_floor < n else current_floor\n    \n    return time"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    find the shortest path for Sagheer to turn all the lights off.\n    '''\n    n, m = [int(s) for s in stdin.split('\\n')[0].split(' ')]\n    map_ = []\n    for i in range(n):\n        map_.append([int(s) for s in stdin.split('\\n')[i].split(' ')])\n    return None\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    l = []\n    for _ in range(n):\n        l.append(stdin)\n    # l = [stdin] * n\n    print(l)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n * m * 4^m * 2^n)\n    Space: O(m * 4^m * 2^n)\n    \"\"\"\n    def create_graph(floor: str) -> dict:\n        graph = {}\n        for i in range(len(floor) - 1):\n            room = floor[i]\n            if room not in graph:\n                graph[room] = {}\n            room = floor[i + 1]\n            if room not in graph:\n                graph[room] = {}\n            graph[room][room] = 0\n        return graph\n\n    def create_all_graphs(floors: dict) -> dict:\n        all_graphs = {}\n        for floor in floors.keys():\n            all_graphs[floor] = create_graph(floors[floor])\n        return all_graphs\n\n    def create_all_paths(graphs: dict) -> dict:\n        all_paths = {}\n        for floor, graph in graphs.items():\n            all_paths[floor] = create_all_paths_for_floor(graph)\n        return all_paths\n\n    def create_all_paths_for_floor(graph: dict) -> dict:\n        all_paths = {}\n        for room, neighbors in graph.items():\n            all_paths[room] = {}\n            for neighbor, weight in neighbors.items():\n                all_paths[room][neighbor] = {}\n                for other_neighbor, other_weight in neighbors.items():\n                    if neighbor!= other_neighbor:\n                        all_paths[room][neighbor][other_neighbor] = (\n                            weight + other_weight\n                        )\n        return all_paths\n\n    def create_all_paths_for_floor_from_room(\n        all_paths: dict, room: str\n    ) -> dict:\n        for neighbor, paths in all_paths[room].items():\n            for other_neighbor, weight in paths.items():\n                all_paths[room][neighbor][other_neighbor] = weight\n        return all_paths\n\n    def create_all_paths_from_floor(all_paths: dict) -> dict:\n        for floor, graph in all_paths.items():\n            for room, paths in graph.items():\n                all_paths[floor][room] = create_all_paths_for_floor_from_room(\n                    all_paths, room\n                )\n        return all_paths\n\n    def find_the_smallest_path(floor: str) -> int:\n        min_path = inf\n        for room, paths in all_paths[floor].items():\n            for other_room, path in paths.items():\n                if path < min_path:\n                    min_path = path\n        return min_path\n\n    def find_the_smallest_path_for_all_floors(all_paths: dict) -> int:\n        min_path = inf\n        for floor, graph in all_paths.items():\n            path = find_the_smallest_path(floor)\n            if path < min_path:\n                min_path = path\n        return min_path\n\n    def get_the_smallest_path(floor: str) -> list:\n        min_path = inf\n        rooms = []\n        for room, paths in all_paths[floor].items():\n            for other_room, path in paths.items():\n                if path < min_path:\n                    min_path = path\n                    rooms = [room, other_room]\n        return rooms\n\n    def find_the_smallest_path_for_all_floors_with_stairs(all_paths: dict) -> int:\n        min_path = inf\n        for floor, graph in all_paths.items():\n            path = find_the_smallest_path(floor)\n            if path < min_path:\n                min_path = path\n        return min_path\n\n    def get_the_smallest_path_with_stairs(floor: str) -> list:\n        min_path = inf\n        rooms = []\n        for room, paths in all_paths[floor].items():\n            path = find_the_smallest_path(room)\n            if path < min_path:\n                min_path = path\n                rooms = [room]\n            elif path == min_path:\n                rooms.append(room)\n        return rooms\n\n    n, m = map(int, stdin.split())\n    floors = {\n        str(i): stdin.split()[i * (m + 2) : (i + 1) * (m + 2)]\n        for i in range(n)\n    }\n\n    all_graphs = create_all_graphs(floors)\n    all_paths = create_all_paths(all_graphs)\n    all_paths = create_all_paths_from_floor(all_paths)\n    all_paths = create_all_paths_for_floor(all_paths)\n    min_path = find_the_smallest_path_for_all_floors(all_paths)\n    return min_path\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, m = map(int, stdin.readline().split())\n    # d = stdin.readlines()\n    d = [list(i) for i in stdin.split(\"\\n\")]\n    n = len(d)\n    m = len(d[0]) - 1\n    d = [[int(i) for i in d[j]] for j in range(n)]\n    dp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n    for j in range(1, n + 1):\n        for i in range(1, m + 1):\n            dp[j][i] = dp[j - 1][i] + dp[j][i - 1] - dp[j - 1][i - 1] + d[j - 1][i - 1]\n    for i in range(1, n + 1):\n        print(dp[i][m])\n    return \"\""
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = list(map(int, stdin.split(' ')))\n    matrix = []\n    for _ in range(rows):\n        matrix.append(list(stdin.split(' ')[0]))\n    rows_to_visit = []\n    for r in range(rows):\n        for c in range(1, len(matrix[r]) - 1):\n            if matrix[r][c] == '1':\n                rows_to_visit.append((r, c))\n    prev_row, prev_col = -1, -1\n    min_time = 0\n    while rows_to_visit:\n        curr_row, curr_col = rows_to_visit.pop()\n        curr_time = 0\n        for r in range(curr_row - 1, curr_row + 2):\n            for c in range(curr_col - 1, curr_col + 2):\n                if r < 0 or r >= rows or c < 0 or c >= cols:\n                    continue\n                if prev_row == -1 and prev_col == -1:\n                    prev_row, prev_col = r, c\n                if matrix[r][c] == '1':\n                    matrix[prev_row][prev_col] = '0'\n                    prev_row, prev_col = r, c\n                    min_time += curr_time\n                    curr_time = 0\n                    break\n                curr_time += 1\n        else:\n            prev_row, prev_col = -1, -1\n    return min_time\n\nprint(solution(stdin))\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *costs = list(map(int, stdin.split('\\n')[0].split()))\n    m, *paths = list(map(int, stdin.split('\\n')[1].split()))\n    costs_sum = [sum(costs[i:]) for i in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs_sum[i] + costs_sum[j] <= costs[j]:\n                break\n        else:\n            j = n\n    return j\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\nsys.stdin = open(\"./input.txt\")\nsys.stdout = open(\"./output.txt\", \"w\")"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    s = set()\n    for i, cost in enumerate(map(int, stdin.split('\\n')[1].split(' '))):\n        s.add(cost)\n        if i + 1 in s:\n            s.remove(i + 1)\n    return sum(a) - len(s)\n\nprint(solution(input))\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\n    '''\n    rooms, traps, path = map(int, stdin.split('\\n')[0:3])\n    start, end = 0, 1\n    cost = [0] * rooms\n    cost[0] = traps[0]\n    for i in range(1, rooms):\n        cost[i] = cost[i-1] + traps[i]\n    while end < rooms:\n        start = end\n        while start < rooms and path[start] == path[end]:\n            start += 1\n        end = start\n        while end < rooms and path[end]!= path[start]:\n            end += 1\n        if end < rooms:\n            cost[end] = min(cost[start-1] + traps[end], cost[end])\n    return min(cost[-1], cost[-2])\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    costs = [int(i) for i in stdin.readline().split(' ')]\n    paths = [int(i) for i in stdin.readline().split(' ')]\n    costs = list(map(lambda x: x * 100, costs))\n    def get_total(room):\n        sum = 0\n        for i in range(1, n + 1):\n            if i == room:\n                continue\n            else:\n                sum += costs[i - 1]\n        return sum\n    def get_min_total(room):\n        min_cost = costs[room - 1]\n        for i in range(1, n + 1):\n            if i == room:\n                continue\n            else:\n                cost = costs[i - 1] + get_total(paths[i - 1])\n                min_cost = min(min_cost, cost)\n        return min_cost\n    total = 0\n    for i in range(1, n + 1):\n        total += get_min_total(i)\n    return total\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, *mice = stdin.split(\"\\n\")\n  n = int(n)\n  mice = [int(i) for i in mice if i!= '']\n  mice = [i for i in mice if i > 1]\n  if len(mice) < n:\n    return -1\n  mice.sort()\n  res = 0\n  for i in range(1, len(mice)):\n    res += (mice[i] - mice[i - 1])\n  return res\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The bruteforce solution\"\"\"\n    from itertools import permutations\n    n, *c = map(int, stdin.split())\n    a = [*map(int, stdin.split())]\n    min_cost = float('inf')\n    for b in permutations(range(1, n + 1)):\n        cost = 0\n        for i, j in enumerate(b):\n            cost += c[i] * (j == a[i])\n        min_cost = min(cost, min_cost)\n    return min_cost\n\n\ndef"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    cost = [int(i) for i in stdin[1].split(' ')]\n    destination = [int(i) for i in stdin[2].split(' ')]\n    pass"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [N, *arr] = stdin.split(\"\\n\")\n    arr = [int(i) for i in arr]\n    return sum(arr) - N + 1\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returning the needed entrance\"\"\"\n    n, a, b = [int(i) for i in stdin.split()]\n    if b < 0:\n        return abs(b) + 1\n    if b == 0:\n        return abs(a)\n    return min(abs(b), n - abs(b)) + 1\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b = [int(i) for i in stdin.split(' ')]\n    \n    return str(a + abs(b))\n    \n    \n\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    # The length of the path is\n    # len(input_data[2]) = 8,\n    # where the first and the last entries are the\n    # entrance and the entrance.\n    # The entrance on the left of Vasya's\n    # is entrance_left = 2.\n    entrance_left = int(input_data[1])\n    # The entrance on the right of Vasya's\n    # is entrance_right = 2, because the path is\n    # [-5, -3, -1, 0, 1, 3, 5] where the first and\n    # the last entries are the entrance and the entrance.\n    entrance_right = int(input_data[1])\n    # The entrance on the right of Vasya's is entrance_right = 3,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where\n    # the last entry is the entrance.\n    # The entrance on the left of Vasya's is entrance_left = 2,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where\n    # the first entry is the entrance.\n    # The entrance in the middle of Vasya's path is entrance_middle = 3,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where the\n    # entrance is in the middle.\n    entrance_middle = int(input_data[1]) - int(input_data[2]) // 2\n\n    # vasya_path = [-5, -3, -1, 0, 1, 3, 5], where the\n    # entrance is in the middle.\n    vasya_path = [-5, -3, -1, 0, 1, 3, 5]\n    # Index of the entrance on the right of Vasya's is entrance_right.\n    # Index of the entrance on the left of Vasya's is entrance_left.\n    # Index of the entrance in the middle of Vasya's path is entrance_middle.\n    # The entrance in the middle of Vasya's path is 3,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where the\n    # entrance is in the middle.\n    entrance_middle_index = int(input_data[1]) - int(input_data[2]) // 2\n    # If Vasya's path is [-5, -3, -1, 0, 1, 3, 5]\n    # and Vasya want to go to the right of Vasya's,\n    # then the index of the entrance in the middle of Vasya's path is 4.\n    # If Vasya's path is [-5, -3, -1, 0, 1, 3, 5]\n    # and Vasya want to go to the left of Vasya's,\n    # then the index of the entrance in the middle of Vasya's path is 2.\n    # If Vasya's path is [-5, -3, -1, 0, 1, 3, 5]\n    # and Vasya want to go to the middle of Vasya's,\n    # then the index of the entrance in the middle of Vasya's path is 3.\n    if input_data[2] > 0:\n        entrance_middle_index = entrance_middle_index + 1\n    elif input_data[2] < 0:\n        entrance_middle_index = entrance_middle_index - 1\n    # The entrance on the left of Vasya's is entrance_left,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where\n    # the first entry is the entrance.\n    # The entrance on the right of Vasya's is entrance_right,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where\n    # the last entry is the entrance.\n    # The entrance in the middle of Vasya's path is entrance_middle,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where the\n    # entrance is in the middle.\n    # The entrance in the middle of Vasya's path is 3,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where the\n    # entrance is in the middle.\n    if entrance_left == entrance_middle_index:\n        entrance_left = entrance_middle_index - 1\n    elif entrance_right == entrance_middle_index:\n        entrance_right = entrance_middle_index + 1\n    # If Vasya's path is [-5, -3, -1, 0, 1, 3, 5]\n    # and Vasya want to go to the right of Vasya's,\n    # then the index of the entrance in the middle of Vasya's path is 4.\n    # If Vasya's path is [-5, -3, -1, 0, 1, 3, 5]\n    # and Vasya want to go to the left of Vasya's,\n    # then the index of the entrance in the middle of Vasya's path is 2.\n    # If Vasya's path is [-5, -3, -1, 0, 1, 3, 5]\n    # and Vasya want to go to the middle of Vasya's,\n    # then the index of the entrance in the middle of Vasya's path is 3.\n    # If Vasya's path is [-5, -3, -1, 0, 1, 3, 5]\n    # and Vasya want to go to the right of Vasya's,\n    # then the index of the entrance in the middle of Vasya's path is 4.\n    if input_data[2] < 0:\n        entrance_middle_index = entrance_middle_index - 1\n\n    # The entrance in the middle of Vasya's path is 3,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5], where the\n    # entrance is in the middle.\n    # The entrance in the middle of Vasya's path is 3,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5].\n    # The entrance on the left of Vasya's is entrance_left,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5].\n    # The entrance on the right of Vasya's is entrance_right,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5].\n    # The entrance in the middle of Vasya's path is entrance_middle,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5].\n    # The entrance in the middle of Vasya's path is 3,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5].\n    # The entrance on the left of Vasya's is entrance_left,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5].\n    # The entrance on the right of Vasya's is entrance_right,\n    # because the path is [-5, -3, -1, 0, 1, 3, 5].\n    if input_"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution\n    '''\n    n, a, b = [int(x) for x in stdin.split()]\n    return (n - (b - a)) % n + 1\n\nprint(solution(\"6 2 -5\"))\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Example solution'"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\ndef"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if b == 0:\n        return str(n)\n    if a < b:\n        return str(n - (a - 1))\n    else:\n        return str(n + (b - a))\n    "
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, a, b = [int(s) for s in stdin.split(' ')]\n    if a >= 0:\n        if b > 0:\n            return n - 1 + abs(b)\n        else:\n            return n + abs(b)\n    elif a < 0:\n        if b < 0:\n            return abs(n + abs(b))\n        else:\n            return n + abs(b)\n    else:\n        return n + abs(b)\n    '''\n    if (b >= 0 and a < 0) or (b < 0 and a >= 0):\n        a, b = abs(a), abs(b)\n    else:\n        a, b = abs(a), abs(b)\n    return n + abs(b) + (a - 1) // abs(a - 1)\n\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of the entrance, near which Vasya will be at the end of his walk.\n    >>> solution(\"6 2 -5\")\n    3\n    >>> solution(\"5 1 3\")\n    4\n    >>> solution(\"3 2 7\")\n    3\n    \"\"\"\n    n, a, b = map(int, stdin.split())\n    if b == 0:\n        return a - 1 if a - 1 >= 1 else n\n    return a - 1 if a - 1 >= 0 else n - 1 if n - 1 >= 1 else -1\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    if a - b == 0:\n        print(n - 1)\n    elif (a - b) % 2 == 1:\n        print(n - a + b - 1)\n    else:\n        print(n - a + b)"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('9\\n8 6 4 2 1 4 7 10 2\\n')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    prs = list(map(int, stdin.readline().split()))\n\n    cnt = 0\n    min_cnt = 0\n    for i in range(n):\n        if prs[i] > 0:\n            if i == n - 1 or prs[i + 1]!= prs[i] + 1:\n                cnt += 1\n                min_cnt = max(min_cnt, cnt)\n                cnt = 0\n        else:\n            continue\n    return min_cnt\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import groupby\n    input_list = stdin.split()\n    input_list = list(map(int, input_list))\n    res = 0\n    for i in range(len(input_list)):\n        if input_list[i] == -1:\n            continue\n        num_of_one_period = 1\n        x = input_list[i]\n        for j in range(i + 1, len(input_list)):\n            if input_list[j] == -1:\n                break\n            if input_list[j] - x == 1:\n                num_of_one_period += 1\n                x = input_list[j]\n        res = max(num_of_one_period, res)\n\n    print(res)\n    return res\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n\n    n = int(input[0])\n    a = list(map(int, input[1].split()))\n\n    dp = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] == -1:\n                dp.append([-1, -1])\n                break\n            if (a[i] - 1) == (a[j] - a[i]):\n                dp.append([a[i], a[j]])\n                break\n    dp.sort()\n    result = 0\n    while dp:\n        if len(dp) == 1:\n            result += 1\n            break\n        if dp[0][1] == dp[1][1]:\n            dp.pop(0)\n            dp.pop(0)\n        else:\n            result += 1\n            dp.pop(0)\n    return result\n\ndef"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution with O(1) complexity.\n    \"\"\"\n    \n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] == -1:\n            continue\n        if i > 0:\n            if (a[i] - a[i - 1] == a[i - 1] - a[i - 2]) and (a[i] - a[i - 1] > 0):\n                count += 1\n        if i < n - 1:\n            if (a[i + 1] - a[i] == a[i + 1] - a[i + 2]) and (a[i + 1] - a[i] > 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    n = int(a[0])\n    a = a[1:]\n    #print(a)\n    arr = []\n    for i in range(n):\n        if a[i] == -1:\n            arr.append(-1)\n        else:\n            arr.append(int(a[i]))\n    arr = sorted(arr)\n    #print(arr)\n    cnt = 0\n    last_num = -1\n    for i in range(n):\n        if arr[i] == last_num:\n            continue\n        cnt += 1\n        last_num = arr[i]\n    return cnt\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().strip().split(' ')]\n    dp = [[0] * (size + 1) for i in range(size + 1)]\n    dp[0][0] = 1\n    for i in range(size):\n        if numbers[i] == -1:\n            dp[i + 1][0] = 1\n        else:\n            dp[i + 1][0] = 0\n    for i in range(1, size + 1):\n        for j in range(1, size + 1):\n            if dp[i - 1][j] == 0:\n                continue\n            if numbers[i - 1] == -1:\n                dp[i][j] = 1\n            elif numbers[i - 1]!= -1 and numbers[i - 1] == j:\n                dp[i][j] = dp[i - 1][j] + 1\n            elif numbers[i - 1]!= -1 and numbers[i - 1]!= j:\n                dp[i][j] = dp[i - 1][j]\n    dp_list = []\n    for i in range(size):\n        if numbers[i] == -1:\n            dp_list.append(0)\n        else:\n            dp_list.append(dp[size][numbers[i]])\n    return dp_list\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9\n   ... 8 6 4 2 1 4 7 10 2\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    progressions = []\n\n    for i in range(n):\n        if a[i] > 0:\n            progressions.append(a[i])\n            a[i] = -1\n\n    dp = [[0] * len(progressions) for _ in range(len(progressions))]\n    dp[0][0] = 1\n\n    for i in range(1, len(progressions)):\n        dp[i][0] = 1\n\n    for i in range(1, len(progressions)):\n        for j in range(i):\n            if a[j] > 0 and a[i] > 0:\n                if progressions[j] < progressions[i]:\n                    dp[i][j] = max(dp[i][j], dp[j][i] + 1)\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1])\n\n    return max(dp[-1])\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\n8 6 4 2 1 4 7 10 2\\n\")\n    3\n    >>> solution(\"9\\n-1 6 -1 2 -1 4 7 -1 2\\n\")\n    3\n    >>> solution(\"5\\n-1 -1 -1 -1 -1\\n\")\n    1\n    >>> solution(\"7\\n-1 -1 4 5 1 2 3\\n\")\n    2\n    \"\"\"\n    ..."
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split(' ')))\n    arr.sort()\n    res = 0\n    start = 0\n    i = 0\n    while i < num - 1:\n        if arr[i] - 1!= arr[i + 1]:\n            res += 1\n            start = i + 1\n        i += 1\n    if arr[start] - 1!= arr[start + 1]:\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = stdin\n    res = 0\n    for i in range(1, n+1):\n        subs = [s[j:j+i] for j in range(0, n+1-i)]\n        tmp = 0\n        for x in subs:\n            if len(set(x)) == 1:\n                tmp += 1\n        res = max(res, tmp)\n    return res\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    #\n\nprint(solution(stdin))\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''.join([chr(ord(x) + 2) if x == 'b' else chr(ord(x) - 2) for x in stdin])\n\"\"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Need to keep track of the longest possible string \n    # Start with the longest possible string, and then find the \n    # longest possible string that is smaller\n    # The smaller string will always be within the larger string\n    # And there is a maximum of k characters to change. \n    # So we only need to keep track of the smallest possible string\n    # Then we compare the two values, and if we have a smaller one, then \n    # we change the smallest string, and repeat until we have the longest possible string\n    # And at that point, we can just get the length of the longest possible string. \n    return len(stdin)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin)\n    l = 0\n    r = 0\n    max_beauty = 0\n    beauty = 0\n    while r < n:\n        while r < n and s[r] == s[r - 1]:\n            r += 1\n        if r - l > max_beauty:\n            max_beauty = r - l\n            beauty = max_beauty\n        l = r\n        r += 1\n    if s[0] == 'a':\n        beauty -= 1\n    while r < n and s[r] == 'b':\n        r += 1\n        beauty -= 1\n    if r == n and s[0] == 'a':\n        beauty -= 1\n    return max(beauty, 0)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    s = stdin\n    \n    def count_sub(s, c):\n        return sum([1 for i in range(len(s)-1) if s[i]==c and s[i+1]==c])\n    \n    def partition(s):\n        if len(s) == 1:\n            return [s]\n        elif len(s) == 0:\n            return []\n        elif s[0] == s[-1]:\n            return [[s[0]]+partition(s[1:-1])+[s[-1]]]\n        else:\n            s1 = s[0]\n            s2 = s[1:]\n            s3 = s[-1]\n            s4 = s[:-1]\n            return [[s1]] + partition(s2) + [[s3]] + partition(s4)\n    \n    res = partition(s)\n    lst = []\n    for i in res:\n        if len(i) > 1:\n            lst.append(count_sub(i, 'a'))\n    \n    return max(lst)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    s = stdin.strip()\n    \n    if k >= n:\n        return n\n    elif k == 1:\n        return len(set(s))\n    else:\n        for i in range(1, n):\n            if n - i <= k:\n                return i\n        return n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nm, n = [int(i) for i in stdin.split()]\ns = stdin[:m]\na = [0] * (n + 1)\n\nfor i in range(1, len(s) + 1):\n    a[i] = max(a[i - 1], a[i - 1] + 1 if s[i - 1] == s[i - 2] else 0)\n\nprint(a[m])"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin\n    if k == 0:\n        return s\n    for i in range(1, k + 1):\n        a = max(s[:i], s[:n - i], key=len)\n        if a == s[:i]:\n            continue\n        s = s.replace(a, \"a\", 1)\n    return s\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n ...\n  return answer\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n\"\"\"\n    stdin = stdin.split()\n    a = [int(i) for i in stdin[1:]]\n\n    s = sum(a)\n\n    res = 0\n\n    for i in range(len(a)):\n        if s * 2 <= sum(a[:i] + a[i+1:]):\n            res += 1\n\n    if res > 0:\n        print(res)\n\n        for i in range(len(a)):\n            if a[i] == max(a):\n                print(1, i + 1)\n                return\n\n        return\n    print(0)\n    return\n\"\"\"\ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the possible coalition and return a list of their indices\n    \"\"\"\n    # Get the number of parties\n    n = int(stdin.readline())\n\n    # Get the number of seats of each party\n    seats = list(map(int, stdin.readline().strip().split(\" \")))\n\n    # Get the maximum number of seats a party can have\n    max_seats = max(seats)\n\n    # Initialise the result to 0\n    result = 0\n\n    # Iterate through all possible seats for each party\n    for i in range(max_seats, sum(seats) + 1):\n        # Initialise a variable to check if the combination of seats creates a valid coalition\n        flag = True\n        # Iterate through each party\n        for j in range(n):\n            # Get the number of seats for each party\n            current_seats = seats[j]\n            # If the sum of the seats is larger than the total number of seats\n            if i > current_seats:\n                # Set flag to false\n                flag = False\n                # Break the loop\n                break\n            # Check if the current party has the required number of seats\n            elif i == current_seats:\n                # Set the flag to false if the party already has enough seats\n                flag = False\n                break\n            # Check if the current party is the first party\n            elif j == 0:\n                # Set the flag to false if the party already has enough seats\n                if i + seats[j + 1] > current_seats:\n                    flag = False\n                    break\n            # Check if the current party is the last party\n            elif j == n - 1:\n                # Set the flag to false if the party already has enough seats\n                if i + seats[j - 1] > current_seats:\n                    flag = False\n                    break\n            # Check if the current party has enough seats\n            elif i + seats[j - 1] > current_seats and i + seats[j + 1] > current_seats:\n                # Set the flag to false if the party already has enough seats\n                flag = False\n                break\n\n        # Check if the flag is true\n        if flag:\n            # Set the result to 1\n            result = 1\n            # Set the indices of the coalition\n            indices = [str(j + 1) for j in range(n)]\n            # Print the result\n            print(result)\n            print(\" \".join(indices))\n\n    return \"\"\n\n\nsolution(stdin)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  \n  \"\"\"\n  stdin = stdin.strip().split('\\n')\n  parties = int(stdin[0])\n  seats = list(map(int, stdin[1].split(' ')))\n\n  \n  \"\"\"\n  solution:\n  we need to see all the possible combinations and check if each of them meets the conditions\n  \"\"\"\n  \n  # if all the seats are different\n  if len(set(seats)) == parties:\n    # find the max index that is not maxed out\n    max_index = 0\n    max_seat = 0\n    for i, seat in enumerate(seats):\n      if seat > max_seat:\n        max_index = i\n        max_seat = seat\n    # return the party and the index\n    return str(max_index + 1) +'' + str(max_index + 1)\n  # if there is no seats left, return 0\n  else:\n    return '0'\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return ''\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_coals(n: int, a: list) -> list:\n        coals = []\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] + a[j] >= n * 50 // 2 + 1:\n                    coals.append([i+1, j+1])\n        return coals\n    \n    def get_parties(a: list) -> list:\n        parties = []\n        for i in range(1, n+1):\n            if i not in a:\n                parties.append(i)\n        return parties\n    \n    def is_coalition(n: int, a: list, p: int) -> bool:\n        is_coal = True\n        for i in range(n):\n            if i!= p-1 and a[i] < n * 50 // 2 + 1:\n                return False\n            for j in range(i+1, n):\n                if a[i] + a[j] < n * 50 // 2 + 1:\n                    return False\n        return is_coal\n    \n    def get_coal_parties(n: int, a: list, p: int) -> list:\n        coal_parties = []\n        for i in range(n):\n            if i!= p-1 and a[i] < n * 50 // 2 + 1:\n                coal_parties.append(i+1)\n        return coal_parties\n    \n    def get_coal(n: int, a: list) -> list:\n        return get_coals(n, a)[0]\n    \n    def get_coal_parties_num(n: int, a: list, p: int) -> int:\n        return len(get_coal_parties(n, a, p))\n    \n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    parties = get_parties(a)\n    \n    k = 0\n    for p in parties:\n        if is_coalition(n, a, p):\n            k += 1\n    if k:\n        print(k)\n        coal = get_coal(n, a)\n        coal_parties = get_coal_parties(n, a, coal[0])\n        for c in coal:\n            coal_parties = get_coal_parties(n, a, c)\n            if not coal_parties:\n                break\n            for p in parties:\n                if p not in coal_parties and not is_coalition(n, a, p):\n                    break\n            else:\n                print(k, c)\n                return\n    print(0)\n    \ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    lo = 0\n    hi = n - 1\n    while lo < hi:\n        if 2 * a[lo] < a[hi]:\n            break\n        lo += 1\n        hi -= 1\n    else:\n        return '0'\n    return f\"{len(a[lo:hi + 1])}\\n{' '.join(str(x) for x in a[lo:hi + 1])}\"\n\n\n\n###########################################################\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_pos(n: int, a: list) -> tuple:\n        result = (0, 0)\n        for i in range(n):\n            if result[1] < a[i]:\n                result = (i + 1, a[i])\n        return result\n\n    def gcd(a: int, b: int) -> int:\n        return a if b == 0 else gcd(b, a % b)\n\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    a.sort()\n    result = get_pos(n, a)\n    if result[1] < (n // 2 + 1):\n        return str(0)\n    res = n\n    part = result[1]\n    for i in range(part):\n        for j in range(i + 1, part):\n            g = gcd(a[i], a[j])\n            for k in range(n):\n                a[k] //= g\n            a[i] = 0\n            a[j] = 0\n            if all([a[x] == 0 for x in range(n)]):\n                res = min(res, n - 1)\n                break\n    return str(res)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(2 * N - 1)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '%0.6f' % 1.0\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(float(stdin), 1))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    s = 1\n    t = 0\n    while n >= 1:\n        s *= n\n        t += n\n        n -= 1\n    return round((t / s), 6)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    winners = n // 2\n    k = 1\n    if n % 2 == 0:\n        winners = winners + 1\n    while winners!= 1:\n        k += 1\n        winners = winners - 1\n    return str(k)\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = n - 1\n    if n == 1:\n        return '1.000000000000'\n    while x > 1:\n        x = x * 2\n    return str(x)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_opponents = int(stdin)\n    return str(num_opponents * (num_opponents - 1) / 2)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    answer = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            answer = max(answer, (i + 1) / (j + 1))\n    print(answer)\n    return \"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # game = StdIn()\n    game = input()\n    n = int(game)\n    cur_reward = 1\n\n    for i in range(1, n + 1):\n        correct = stdin[1:]\n        wrong = stdin[1:]\n        for j in range(1, n + 1):\n            if j == i:\n                continue\n            correct = correct.replace(str(j), \"\")\n            wrong = wrong.replace(str(j), \"\")\n        cur_reward += len(correct) / len(wrong)\n\n    return str(cur_reward)"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    print(input(stdin))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = list(range(1, N + 1))\n    nums.sort()\n\n    nums = [nums[i * (len(nums) - 1) // 2] for i in range(1, len(nums) // 2 + 1)]\n    nums.append(nums[0])\n    return str(len(nums)) + '\\n' +''.join(map(str, nums))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1\\n2'\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your solution\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = 0\n    if n > 2:\n        res = (n * (n + 1) // 2) - 1\n    elif n == 1:\n        res = 1\n    elif n == 2:\n        res = 2\n    return res\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = []\n    for i in range(n // 2 + 1):\n        if n == 2 * i:\n            r = [i, n - i]\n            break\n        if n == i + (n - i) % 2:\n            r = [i, n - i]\n            break\n    return r\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    solution = []\n    while n > 0:\n        solution.append(n)\n        n -= 2\n    return solution\n\nprint(solution('5'))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Problem solution.\n\n    Args:\n        stdin (str): input on STDIN\n\n    Returns:\n        str: output to STDOUT\n    '''\n    return str()\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return [print(i) for i in range(1, int(stdin) + 1) if stdin.count(str(i)) == 1]\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 2**a\n    c = b%a\n    print(c)"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m % 2 ** n)"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def modulo(x,y):\n        if x % y == 0:\n            return x\n        else:\n            return x % y\n    \n    def power(x,y):\n        if x == 0:\n            return 0\n        elif y == 1:\n            return x\n        elif y % 2 == 0:\n            return power(x*x,y//2)\n        else:\n            return x * power(x*x, y//2)\n\n    return modulo(power(2, int(stdin[0])), int(stdin[1]))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\"\"\"\nfrom math import log\n\nn, m = map(int, stdin.split('\\n')[:2])\n\nassert(2 ** log(n, 2) % m == 0)\n\nprint(f\"{m % (2 ** n)}\")\n\n\"\"\"\n\n\nfrom math import log\n\nn, m = map(int, input().split())\n\nassert(2 ** log(n, 2) % m == 0)\n\nprint(f\"{m % (2 ** n)}\")"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m % (2**n))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m * 2 ** (n % 2 * 10 ** 8))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\"\\n\")[:2])\n    return m % (2**n)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return stdin.replace(stdin[2], stdin[0], 1)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    if n == 1:\n        return s\n\n    temp = ''\n    for i in range(n):\n        if s[i] in ('a', 'e', 'i', 'o', 'u', 'y'):\n            if len(temp) >= 2:\n                if i > 0 and s[i] in ('a', 'e', 'i', 'o', 'u', 'y') and s[i-1] in ('a', 'e', 'i', 'o', 'u', 'y'):\n                    temp = temp[:i]\n                else:\n                    temp = temp[:i-1] + temp[i:]\n            else:\n                temp = temp[:i-1] + temp[i:]\n        else:\n            temp = temp + s[i]\n    return temp\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    if n == 1:\n        return s\n    word = []\n    vowels = 'aeiouy'\n    for i in range(n):\n        if s[i] in vowels and s[i + 1] in vowels:\n            word.append(s[i])\n            word.append('#')\n        else:\n            word.append(s[i])\n    for i in range(len(word) - 1):\n        if word[i] == '#':\n            word[i] = ''\n    return ''.join(word)\n\n\ndef"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the correction of the word, and returns it.\n    \"\"\"\n    l = stdin.split()\n    new_str = \"\"\n    for word in l:\n        # print(word)\n        lst = list(word)\n        # print(lst)\n        for index in range(len(lst)):\n            if lst[index] in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n                if index < len(lst)-1:\n                    if lst[index+1] not in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n                        lst[index] = \"\"\n                        index -= 1\n        new_str += \"\".join(lst)\n        new_str += \" \"\n    print(new_str.strip())\n    return new_str.strip()\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    string = stdin.split('\\n')[1]\n    vowel_count = 0\n    for i in string:\n        if i in vowels:\n            vowel_count += 1\n    if vowel_count < 2:\n        return string\n    vowel_count = 0\n    new_string = list(string)\n    for i in range(len(new_string) - 1):\n        if new_string[i] in vowels and new_string[i + 1] in vowels:\n            new_string.pop(i)\n            new_string.pop(i)\n            break\n        else:\n            vowel_count += 1\n    new_string = ''.join(new_string)\n    return new_string\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s.count('ae') >= 2 or s.count('ea') >= 2 or s.count('ai') >= 2 or s.count('oo') >= 2 or s.count('iu') >= 2 or s.count('ui') >= 2:\n        s = s.replace('ae', '', 1)\n        s = s.replace('ea', '', 1)\n        s = s.replace('ai', '', 1)\n        s = s.replace('oo', '', 1)\n        s = s.replace('iu', '', 1)\n        s = s.replace('ui', '', 1)\n    return s\n\n\nprint(solution('weird'))\nprint(solution('word'))\nprint(solution('aaeaa'))\n\n\ndef"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Creates the text editor that will correct the text.\n\n    >>> solution('5\\nweird')\n    'werd'\n    >>> solution('4\\nword')\n    'word'\n    >>> solution('5\\naaae')\n    'aa'\n    >>> solution('6\\nweeeeeeeeeeeird')\n    'weird'\n    >>> solution('7\\nworrrrrrrrrrddddddd')\n    'worrd'\n    \"\"\"\n    s = stdin\n    s = s.replace('a', '')\n    s = s.replace('e', '')\n    s = s.replace('i', '')\n    s = s.replace('o', '')\n    s = s.replace('u', '')\n    s = s.replace('y', '')\n    return s\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    len_of_word = int(stdin.split()[0])\n    stdin = stdin.split()[1]\n    word_to_correct = stdin\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    for i in range(len(stdin) - 1):\n        if stdin[i] in vowels and stdin[i + 1] in vowels:\n            word_to_correct = stdin[:i] + stdin[i + 2:]\n            break\n    print(word_to_correct)\n    return word_to_correct\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    # Remove consecutive vowels\n    while \"aa\" in s:\n        s = s.replace(\"aa\", \"\")\n    while \"ee\" in s:\n        s = s.replace(\"ee\", \"e\")\n    while \"ii\" in s:\n        s = s.replace(\"ii\", \"i\")\n    while \"oo\" in s:\n        s = s.replace(\"oo\", \"o\")\n    while \"uu\" in s:\n        s = s.replace(\"uu\", \"u\")\n\n    return s\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    print(s)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    seat_map = stdin.split('*')\n    num_students = 0\n\n    for row in seat_map:\n        if 'A' in row:\n            num_students += row.count('A')\n\n    return num_students\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"5 1 1\\n\"\n   ...     \"*...*\\n\"\n   ... )\n    '2'\n    >>> solution(\n   ...     \"6 2 3\\n\"\n   ...     \"*...*.\\n\"\n   ... )\n    '4'\n    >>> solution(\n   ...     \"11 3 10\\n\"\n   ...     \"*....**.*.\\n\"\n   ... )\n    '7'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for i in range(len(stdin)):\n        if stdin[i] == '.':\n            res.append('*')\n        else:\n            res.append('.')\n    return ''.join(res)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    student = [stdin[i] for i in range(n)]\n    student = [i for i in student if i!= \"*\"]\n    student = [i for i in student if i!= \".\"]\n    student = [i for i in student if i!= \".\"]\n    \n    return str(n - len(student))\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0439.\n    \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430.\n    \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0434\u0430\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0432\u0438\u0434\u0435:\n    \"\u0412\u0430\u0448_\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\"\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439: \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e n (1 \\le n \\le 2\\cdot10^{5}) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \\le a \\le 2\\cdot10^{5} \u0438 0 \\le b \\le 2\\cdot10^{5}, \u0441\u0443\u043c\u043c\u0430 \u0430 \u0438 \u0431 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 2\\cdot10^{5}. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \".\" \u0438 \"*\" \u0432 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439: \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043e\u0431\u0449\u0438\u0439 \u043a\u0443\u043f\u0435.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n\u0422\u0435\u0441\u0442 1\n>>> 2\n>>>.*\n2\n\n\u0422\u0435\u0441\u0442 2\n>>> 3\n>>>.*.\n0\n\n\u0422\u0435\u0441\u0442 3\n>>> 3\n>>> *.*\n4\n\n    :param stdin: \u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n    :return: \u0421\u0442\u0440\u043e\u043a\u0430 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c.\n    \"\"\"\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    assert 1 <= a <= 2e5 and 1 <= b <= 2e5 and a + b > 0\n    assert len(stdin.split()[0]) == a + b\n    assert stdin.count(\".\") == a\n    assert stdin.count(\"*\") == b\n    print(max(2, (a + b - 2) // 2))\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n\n    print(min(a, n - a, b, n - b))\n\ndef"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    n, a, b = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    n = len(stdin)\n    s = stdin\n    n = len(s)\n    s = list(s)\n    p = 0\n    #to find the number of student-programmer\n    for i in range(0,n):\n        if s[i] == 'A':\n            p += 1\n            i += 1\n        elif s[i] == 'B':\n            break\n    #to find the number of student-athlete\n    for i in range(n-1, 0, -1):\n        if s[i] == 'B':\n            p += 1\n            i -= 1\n        elif s[i] == 'A':\n            break\n    return max(p-1, 0)"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 4 == 0:\n        return \"YES\"\n    if x % 6 == 0:\n        return \"NO\"\n    return f\"{x ** 2 // 2 + 2 * x % 2 + x + 1} {x ** 2 // 2 + 2 * x % 2 + x + 1}\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r > 10**12:\n        return \"NO\"\n    if r == 1:\n        return \"1 8\"\n    if r == 2:\n        return \"2 10\"\n    if r == 3:\n        return \"3 15\"\n    if r == 4:\n        return \"4 20\"\n    if r == 5:\n        return \"5 25\"\n    if r == 6:\n        return \"6 30\"\n    if r == 7:\n        return \"7 35\"\n    if r == 8:\n        return \"8 40\"\n    if r == 9:\n        return \"9 45\"\n    if r == 10:\n        return \"10 50\"\n    x, y = 1, 0\n    while True:\n        if r == (x*x) + 2*x*y + x + 1:\n            return str(x) + \" \" + str(y)\n        elif r < (x*x) + 2*x*y + x + 1:\n            r -= x*x\n            x -= 1\n            y = (r - x*x)//2\n            continue\n        elif r > (x*x) + 2*x*y + x + 1:\n            r -= (x*x) + 2*x*y\n            x += 1\n            y = (r - x*x)//2\n            continue\n    return \"NO\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    #...\n    stdin = stdin.split('\\n')\n    r = int(stdin[0])\n    cands = []\n    for i in range(r):\n        cands.append([])\n        for j in range(i+1):\n            x = i+1-j\n            y = j+1\n            t = x**2 + 2*x*y + x + 1\n            cands[i].append(t)\n    \n    # search for pairs with smallest x\n    pairs = set()\n    for i in range(r):\n        for j in range(r):\n            if cands[i][j] == r:\n                pairs.add((i+1, j+1))\n    if not pairs:\n        print('NO')\n        return\n    pairs = list(pairs)\n    pairs.sort(key=lambda x: x[0])\n    print('{} {}'.format(pairs[0][0], pairs[0][1]))"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your runtime beats 98.83 % of python3 submissions.\"\"\"\n    r = int(stdin)\n    for x in range(10**12):\n        for y in range(10**12):\n            if (x**2+2*x*y+x+1) == r:\n                return f\"{x} {y}\"\n    return \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    for i in range(1, 11):\n        for j in range(1, 11):\n            if i * i + 2 * i * j + i + 1 == r:\n                return f\"{i} {j}\"\n    return \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_line = stdin\n    r = int(input_line)\n    x = 1\n    y = 1\n    while x < r:\n        y = (r - x ** 2 - 2 * x) / (2 * y + x + 1)\n        x = math.sqrt(r - y ** 2)\n    if x == r:\n        print(f\"{x} {y}\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    c = 0\n    for x in range(1, 10000000):\n        for y in range(1, 10000000):\n            if (x ** 2 + 2 * x * y + x + 1) == r:\n                if x > c:\n                    c = x\n    return c if c!= 0 else \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    for x in range(1, r + 1):\n        for y in range(1, r + 1):\n            if hash(x, y) == r:\n                print(x, y)\n                return\n    print('NO')\n    return\n\n\ndef"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    for x in range(1, 10**4):\n        for y in range(1, 10**4):\n            if pow(x,2) + 2*x*y + x + 1 == r:\n                return str(x) + \" \" + str(y)\n    return \"NO\""
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    g, a = a[0], a[1:]\n\n    if n == 1:\n        if g == a[0]:\n            return str(1) + \" \" + str(1)\n        else:\n            return \"-1\"\n\n    if g < a[0]:\n        return \"-1\"\n    if sum(a) % 2!= 0:\n        return \"-1\"\n\n    dp = [[-1 for j in range(g + 1)] for i in range(n + 1)]\n    dp[1][0] = 0\n    for i in range(1, n + 1):\n        for j in range(g + 1):\n            if a[i - 1] <= j:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n    if dp[n][g] == -1:\n        return \"-1\"\n\n    r = []\n    i = n\n    j = g\n    while i > 0:\n        if j - a[i - 1] < 0:\n            r.append(str(i))\n            i -= 1\n            continue\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            r.append(str(i))\n            j -= a[i - 1]\n            i -= 1\n    return \" \".join(r)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    for i, ai in enumerate(a):\n        if ai!= sum(a[:i]):\n            return '-1'\n    s = sum(a)\n    if s % 2 == 0:\n        return''.join(map(str, [s // 2, *sorted(a)[:s//2]]))\n    else:\n        return '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 1\\n\")\n    '2\\n1 2'\n    >>> solution(\"2\\n5 5\\n\")\n    '-1'\n    >>> solution(\"1\\n10\\n\")\n    '-1'\n    \"\"\"\n    balls = [int(x) for x in stdin.split()]\n    l, r = 0, len(balls) - 1\n    while l < r:\n        if balls[l] + balls[r] <= len(balls):\n            r -= 1\n        else:\n            l += 1\n    if l == r:\n        return \"-1\"\n    return f\"{l + 1}\\n\" + \" \".join([str(i + 1) for i in range(l + 1, r + 1)])\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def pick(lst):\n        if not lst:\n            return []\n        if len(lst) == 1:\n            return lst\n        return lst[:len(lst) // 2] + pick(lst[len(lst) // 2:])\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    if sum(a) % 2:\n        return '-1'\n    if len(set(a)) == 1:\n        return '1'+''.join(map(str, list(range(n))))\n    if len(a) <= 3:\n        return '-1'\n    a = sorted(a)\n    b = pick(a)\n    if sum(b) == sum(a) / 2:\n        return '1'+''.join(map(str, pick(a)))\n    return '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the task.\n\n    This method returns the result of the solution of the task,\n    the number of packets to give to Grigory and the indices of the packets to give to Grigory,\n    or -1 if the solution does not exist.\n\n    :param stdin: The standard input of the task.\n    :return: The result of the solution of the task.\n    \"\"\"\n    \"\"\"\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438,\n    \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u0437 Grigory \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 Grigory,\n    \u0438\u043b\u0438 -1, \u0435\u0441\u043b\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 1\\n\")\n    '2\\n1 2'\n    >>> solution(\"2\\n5 5\\n\")\n    '-1'\n    >>> solution(\"1\\n10\\n\")\n    '-1'\n    \"\"\"\n    n = int(stdin.split()[0])\n    balloons = [int(x) for x in stdin.split()[1].split()]\n    if sum(balloons) % 2!= 0:\n        return \"-1\"\n    if sum(balloons) == sum(range(n + 1)):\n        return str(n) + \"\\n\" + \" \".join([str(i) for i in range(n + 1)])\n    if sum(balloons) == sum(range(n, 0, -1)):\n        return str(n) + \"\\n\" + \" \".join([str(i) for i in range(n, 0, -1)])\n    return \"-1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    if (sum(a) % 2)!= 0:\n        return -1\n    k = sum(a) // 2\n    if k < 1 or k > n or k * 2 < n:\n        return -1\n    s = ''\n    while n:\n        s += '{} {}\\n'.format(k, n.pop(0))\n        k -= 1\n    return s[:-1]"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    if max(a) > 1000 or n < 1 or n > 10:\n        return '-1'\n    ans = n\n    for i in range(1, n):\n        if n % i!= 0:\n            continue\n        if a[0] > sum(a[i:n:i]) - a[i - 1]:\n            continue\n        ans = i\n        break\n    if ans == n:\n        return '-1'\n    return ans\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 1''')\n    '2 1'\n    >>> solution('''1\n   ... 10''')\n    '-1'\n    >>> solution('''2\n   ... 5 5''')\n    '1 2'\n    \"\"\"\n    n = int(stdin.readline())\n    balls = [int(x) for x in stdin.readline().split()]\n    k = n // 2 + 1\n    ans = []\n    for i in range(n):\n        if balls[i] == k:\n            ans.append(str(i + 1))\n            ans.append(str(i + 1))\n            break\n        elif balls[i] < k:\n            continue\n        elif balls[i] > k:\n            k = balls[i]\n            ans = [str(i + 1)]\n            ans.extend([str(x + 1) for x in range(n) if balls[x] == k])\n            break\n\n    if ans:\n        print(' '.join(ans))\n    else:\n        print('-1')\n    return ''\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\n\n    Parameters\n    ----------\n    stdin : str\n        input data\n\n    Returns\n    -------\n    str\n        solution\n    \"\"\"\n\n    n = int(stdin)\n\n    # n - len(set(str(n))) = min number of different digits\n\n    while n > 9:\n        n -= len(set(str(n)))\n\n    return f\"{len(set(str(n)))}\\n{str(n)[::-1]}\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given a number $n$ and you want to split it into $k$ non-zero digits. If $n=0$ or $k=0$, print \"NO\".\n    \n    You can choose any number of digits from $0$ to $9$, and if there are at least $k$ different digits in the partition, print them in sorted order.\n    \n    For example, if $n=7$ and $k=3$ then you should print \"421\".\n    \n    Examples:\n    \n    Input\n    7\n    3\n    \n    Output\n    NO\n    \n    Input\n    4\n    2\n    \n    Output\n    NO\n    \n    Input\n    4\n    1\n    \n    Output\n    NO\n    \n    Input\n    0\n    1\n    \n    Output\n    NO\n    \n    Input\n    9\n    5\n    \n    Output\n    999\n    999\n    \n    Input\n    0\n    1\n    \n    Output\n    NO\n    \"\"\"\n    return 'NO'\n    \n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\n\"\"\"\nfrom collections import deque\nfrom math import sqrt\n\nimport sys\n\nsys.setrecursionlimit(1_000_000)\n\nn = int(sys.stdin.readline().strip())"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return str(len(set(stdin[1])))\n\"\"\"\nfrom math import gcd\nfrom typing import List, Union\n\n\ndef"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string of the number of different digits among digits of the partition.\"\"\"\n    # TODO: implement solution\n    return \"\""
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u043b\u0430 \u0432\u0441\u0435\u0445 \u0446\u0438\u0444\u0440, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440\n    count = 0\n    while n:\n        count += n % 10\n        n //= 10\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0441\u0443\u043c\u043c\u0435 \u0446\u0438\u0444\u0440\n    ans = 0\n    while count:\n        ans = (ans * 10) + 9\n        count -= 1\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043e\u0442 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0441\u0443\u043c\u043c\u0435 \u0446\u0438\u0444\u0440\n    ans2 = ans\n    count = 0\n    while ans2:\n        ans2 //= 10\n        count += 1\n    for i in range(1, n + 1):\n        s = 0\n        while i:\n            s += i % 10\n            i //= 10\n        if s == ans:\n            return count\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [0] * 8\n    while n > 0:\n        d[n % 10] += 1\n        n //= 10\n    return \"{} {} {}\".format(d[1], d[2], d[3])\n\ndef"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '2 2'"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.strip().split(\"\\n\")\n    n = int(input_data[0])\n    a = list(map(int, input_data[1].split()))\n    # TODO: your code here\n    return \"\""
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    a = [int(i) for i in input_list[1].split()]\n\n    a.sort()\n    max_size = 1\n    max_sum = a[0]\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            size = j - i + 1\n            if size > max_size:\n                max_size = size\n                max_sum = a[i] + a[j]\n            elif size == max_size and a[i] + a[j] > max_sum:\n                max_sum = a[i] + a[j]\n\n    print(max_size)\n    print(*max_sum)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join([str(i) for i in list(range(len(stdin.split(' '))) - 1)])\n    "
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from functools import reduce\n    def isPrime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    a.sort()\n    s = []\n    for i in range(1, a[-1]+1):\n        if isPrime(i):\n            s.append(i)\n    m = 0\n    s_a = []\n    for i in s:\n        for j in s:\n            if j + i <= a[-1]:\n                temp_a = a.copy()\n                temp_a.remove(i)\n                temp_a.remove(j)\n                if reduce(lambda x, y: x * y, temp_a) == i * j and m < len(temp_a):\n                    m = len(temp_a)\n                    s_a = [i, j]\n    print(m)\n    print(*s_a)"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def prime_factors(number: int) -> list:\n        prime_factor = []\n        while number % 2 == 0:\n            prime_factor.append(2)\n            number = number / 2\n\n        for divisor in range(3, int(math.sqrt(number)) + 1, 2):\n            while number % divisor == 0:\n                prime_factor.append(divisor)\n                number = number / divisor\n\n        if number > 2:\n            prime_factor.append(number)\n\n        return prime_factor\n\n    def get_prime_factors(numbers: list) -> list:\n        prime_factors = []\n        for number in numbers:\n            prime_factors += prime_factors(number)\n\n        return list(dict.fromkeys(prime_factors))\n\n    def get_max_prime_factors(numbers: list) -> int:\n        max_prime_factors = 0\n        for number in numbers:\n            if len(prime_factors(number)) > max_prime_factors:\n                max_prime_factors = len(prime_factors(number))\n\n        return max_prime_factors\n\n    def get_min_prime_factors(numbers: list) -> int:\n        min_prime_factors = 0\n        for number in numbers:\n            if len(prime_factors(number)) < min_prime_factors:\n                min_prime_factors = len(prime_factors(number))\n\n        return min_prime_factors\n\n    def get_subset(numbers: list) -> tuple:\n        prime_factors = get_prime_factors(numbers)\n        max_prime_factors = get_max_prime_factors(numbers)\n        min_prime_factors = get_min_prime_factors(numbers)\n\n        subset = []\n        if max_prime_factors == min_prime_factors:\n            subset = numbers\n        elif max_prime_factors == min_prime_factors + 1:\n            subset = numbers[:-1]\n        elif max_prime_factors == min_prime_factors + 2:\n            subset = numbers[:-2]\n        elif max_prime_factors == min_prime_factors + 3:\n            subset = numbers[:-3]\n        elif max_prime_factors == min_prime_factors + 4:\n            subset = numbers[:-4]\n\n        return subset\n\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n\n    subset = get_subset(numbers)\n    max_size = len(subset)\n\n    print(max_size)\n    print(' '.join(list(map(str, subset))))\n\n    return ''\n\n\ndef"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We want to find the maximum number of simple sub-arrays.\n    Let's do it greedily.\n\n    We could have two solutions:\n    - the solution 1 consists of all the elements of the array,\n    - the solution 2 is a sub-array consisting of two elements of the array,\n    and in each of these sub-arrays we could have one or two elements.\n    We want to choose the solution with the maximum number of elements.\n    As a result, the longest possible simple sub-array should be the solution 1.\n    \"\"\"\n\n    # count the number of elements\n    n = int(stdin.readline())\n    # find all possible pairs\n    pairs = [(a, b) for a in range(1, n) for b in range(a + 1, n + 1)]\n    # filter out only the pairs which are primes\n    primes = set([(a, b) for a, b in pairs if is_prime(a) and is_prime(b)])\n    # filter out only the pairs which are relatively prime\n    relatives = set([(a, b) for a, b in primes if gcd(a, b) == 1])\n    # count the number of such pairs\n    print(len(relatives))\n    # print the pairs\n    for a, b in relatives:\n        print(a, b)\n\ndef"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\n2 1 1\")\n    2\n    3 2\n    >>> solution(\"2 2\\n2 1 1\")\n    1\n    2\n    2 1\n    >>> solution(\"3 1 1\\n2 2 2\")\n    3\n    1 1 2\n    \"\"\"\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort(reverse=True)\n    ind = 0\n    while ind < n and arr[ind] < n - ind:\n        ind += 1\n    if ind == n:\n        arr.pop()\n    else:\n        arr[ind] = -arr[ind]\n    return ind + 1, arr[:ind + 1]\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line)\n    line = stdin.readline()\n    arr = [int(s) for s in line.split()]\n    # find primes\n    primes = set()\n    for i in range(2, n + 1):\n        if i not in primes:\n            for j in range(i * i, n + 1, i):\n                primes.add(j)\n    # find only primes\n    arr2 = []\n    for i in arr:\n        if i in primes:\n            arr2.append(i)\n    # find sum\n    s = set()\n    for i in range(len(arr2)):\n        for j in range(i, len(arr2)):\n            s.add(arr2[i] + arr2[j])\n    # find only sum\n    arr3 = []\n    for i in arr:\n        if i not in s:\n            arr3.append(i)\n    # find max\n    arr4 = []\n    m = 0\n    for i in s:\n        if i > m:\n            m = i\n    for i in s:\n        if i == m:\n            arr4.append(i)\n    # print\n    return f\"{len(arr4)} {' '.join([str(e) for e in arr4])}\"\n\n\ndef"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin.readline())))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 2 == 0:\n        n //= 2\n        count += 1\n    print(count + 1)\n    return \"\"\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n\nprint(solution(input()))\n\n\"\"\"\nimport unittest\n\n\nclass SolutionTests(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(solution('3'), '1')\n\n    def test_case_2(self):\n        self.assertEqual(solution('992'), '496')\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    number = int(stdin)\n    answer = []\n    for i in range(1, int(number**0.5)):\n        if (number % i == 0):\n            count = 0\n            while (number % i == 0):\n                number //= i\n                count += 1\n            answer.append((i, count))\n    if (number > 1):\n        answer.append((number, 1))\n    answer = sorted(answer, key=lambda x: x[0])\n    print(answer[-1][0])\n\nsolution(input())\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(number_of_beautiful_divisors(int(stdin)))"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(math.floor((2 ** math.floor(math.log2(n) + 1)) - 1))\n\n\ndef"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solution_printer(int(stdin)))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(2 ** ((n - 1).bit_length()) - 1)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''\ndef"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m, d = [int(i) for i in stdin.split(' ')]\n    magic_numbers = 0\n    for x in range(a, b + 1):\n        if x % m == 0:\n            temp = list(str(x))\n            for i in range(len(temp)):\n                if i % 2 == 0 and int(temp[i]) % d!= 0:\n                    break\n                elif i % 2!= 0 and int(temp[i]) % d == 0:\n                    break\n            else:\n                magic_numbers += 1\n    return magic_numbers % (10 ** 9 + 7)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    M, D = map(int, stdin.split())\n    s = stdin.strip()\n    n = len(s)\n    a = [int(x) for x in s]\n    m = len(a)\n    counter = 0\n\n    for i in range(m - 1):\n        if (a[i] % 10) % 2 == 0 and a[i + 1] % 10 == 0:\n            counter += 1\n\n    for i in range(m - 2):\n        if a[i] % 10 == D and a[i + 1] % 10 == D and a[i + 2] % 10!= D:\n            counter += 1\n    for i in range(m - 3):\n        if a[i] % 10 == D and a[i + 1] % 10 == D and a[i + 2] % 10 == D and a[i + 3] % 10!= D:\n            counter += 1\n    for i in range(m - 4):\n        if a[i] % 10 == D and a[i + 1] % 10 == D and a[i + 2] % 10 == D and a[i + 3] % 10 == D and a[i + 4] % 10!= D:\n            counter += 1\n    for i in range(m - 5):\n        if a[i] % 10 == D and a[i + 1] % 10 == D and a[i + 2] % 10 == D and a[i + 3] % 10 == D and a[i + 4] % 10 == D and a[i + 5] % 10!= D:\n            counter += 1\n\n    return counter % (10 ** 9 + 7)"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    MOD = (10 ** 9) + 7\n    m, d = stdin.split(' ')\n    m, d = int(m), int(d)\n    a = stdin.split(' ')[1]\n    a = int(a)\n    b = stdin.split(' ')[2]\n    b = int(b)\n    counter = 0\n    for i in range(a, b + 1):\n        if check(i, d, m):\n            counter += 1\n    print(counter % MOD)\n    return ''\n\ndef"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, m, d = map(int, stdin.split())\n    a = str(a)\n    b = str(a)\n    b = b.zfill(2000)\n    n = int(0)\n    for i in range(0, 2000):\n        if b[i] == str(d):\n            if i % 2 == 0:\n                if int(b[i + 1]) % 2!= 0:\n                    n += 1\n    return n\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    result = (b - a) // m * ((b - a) // m + 1) // 2\n    return str(result % 1000000007)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(1)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    counter = 0\n    for i in range(n):\n        if arr[i] >= m:\n            counter = i + 1\n            break\n    while m > 0:\n        for i in range(n):\n            if m >= arr[i]:\n                m -= arr[i]\n                arr[i] = 0\n            else:\n                arr[i] -= m\n                m = 0\n    print(counter)\n\n\nprint(solution(\"5 2\\n1 3 1 4 2\"))\nprint(solution(\"6 4\\n1 1 2 2 3 3\"))"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split('\\n')[0].split(' ')))\n    A = list(map(int, stdin.split('\\n')[1].split(' ')))\n    A.sort()\n    cnt = 0\n    result = 0\n    while A:\n        i = A.pop(0)\n        if i >= m:\n            break\n        cnt += m - i\n        result = i\n        if cnt >= n:\n            break\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, m = map(int, stdin.split())\n    # line = [int(x) for x in stdin.split()]\n    n, m = 5, 2\n    line = [1, 3, 1, 4, 2]\n    children = [1] * n\n    children[0] = 2\n    for i in range(m):\n        nxt = children.index(min(children))\n        if sum(children) < n:\n            children[nxt] += line[nxt]\n            if children[nxt] < n:\n                children[nxt] = n\n        else:\n            children[nxt] = n\n    print(children)\n    return"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    while n > 0:\n        child = arr.pop(0)\n        if child >= m:\n            return child\n        n -= 1\n        arr.append(child)\n    return arr[0]\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, m = map(int, stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    i = 1\n    while len(arr)!= 0:\n        if i <= m:\n            arr.pop(0)\n            i += 1\n        else:\n            arr.pop(0)\n    return len(arr)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    candies = [int(candy) for candy in stdin.split(' ')]\n    i = 1\n    while len(candies) > 0:\n        if i * m <= candies[0]:\n            candies[0] -= (i * m)\n            i += 1\n            if len(candies) == 1:\n                break\n        else:\n            i = 1\n            candies.pop(0)\n    return str(i)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = stdin[0].split()\n    n, m = int(n), int(m)\n    a = stdin[1].split()\n    a = [int(x) for x in a]\n    s = 0\n    for i in range(n):\n        if a[i] > m:\n            s = s + 1\n    print(n - s)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n)\n    space: O(1)\n    \"\"\"\n    n, m = list(map(int, stdin.split()))\n    candies = list(map(int, stdin.split()))\n    \n    end = 0\n    for i in range(len(candies) - 1, -1, -1):\n        if m <= candies[i]:\n            end = i\n            break\n        m -= candies[i]\n    return end + 1"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split(' '))\n    arr = list(map(int, stdin[1].split(' ')))\n    cnt = 0\n    while len(arr) > 0:\n        if cnt < m:\n            arr = arr[1:] + [arr[0]]\n            cnt += 1\n        else:\n            arr = [arr[0]] + arr[1:]\n    return arr[0]\n    \n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '10000000'\n\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"your_result_here\"\nYour solution\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bills = [100, 50, 10, 5, 1]\n    counts = [0] * (n + 1)\n    counts[0] = 0\n    for i in range(0, len(bills)):\n        for j in range(0, n + 1):\n            if bills[i] <= j:\n                counts[j] = min(counts[j], counts[j - bills[i]] + 1)\n    return counts[n]\n\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Your code here\n    n = int(stdin)\n    count = 0\n    while n!= 0:\n        if n >= 100:\n            n -= 100\n            count += 1\n        elif n >= 20:\n            n -= 20\n            count += 1\n        elif n >= 10:\n            n -= 10\n            count += 1\n        elif n >= 5:\n            n -= 5\n            count += 1\n        elif n >= 1:\n            n -= 1\n            count += 1\n    return count\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for m in range(1, n + 1):\n                if i!= j and i!= m and j!= m and abs(i - j) == 1 and abs(j - m) == 1 and abs(i - m) == 1:\n                    count += 1\n    print(count)\n    return ''\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\" \")\n\n    n, k = int(inputs[0]), int(inputs[1])\n\n    ans = 0\n\n    for i in range(k):\n        ans += int(factorial(n) / (factorial(i) * factorial(n - i)))\n\n    print(ans % 1000000007)"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    k %= n\n    if n == 1:\n        return 1\n    else:\n        return binomial_coefficient(n, k) % (10 ** 9 + 7)\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(math.factorial(n) // (math.factorial(k) * math.factorial(n - k)))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    result = 0\n\n    for i in range(1, n+1):\n        result += combinations(n, i) * (k-bad(i))\n    result = result % 1000000007\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(comb(a+b-1, a-1))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    if n == 1:\n        print(1)\n        return\n    if k == 1:\n        print(n)\n        return\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if i - 1 >= 0:\n            dp[i] = (dp[i] + dp[i - 1]) % (10**9 + 7)\n        if i - 2 >= 0:\n            dp[i] = (dp[i] + dp[i - 2]) % (10**9 + 7)\n        if i - 3 >= 0:\n            dp[i] = (dp[i] + dp[i - 3]) % (10**9 + 7)\n    print(dp[n])\n    return\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get length and number of good positions\"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    if k == 0:\n        return str(math.factorial(n))\n    if k == n:\n        return str(math.factorial(n) ** 2)\n    if k == 1:\n        return str(n)\n    else:\n        return str((math.factorial(n) ** 2) / math.factorial(n - k) / math.factorial(k))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.split(' '))\n    k = min(k, n - 1)\n    ans = factorial(n) // factorial(k)\n    for i in range(n - k):\n        ans //= i + 1\n    for i in range(1, k + 1):\n        ans //= i\n    return str(ans % (1000000007))\n    '''\n    n, k = map(int, stdin.split(' '))\n    perm = []\n    for i in range(n):\n        perm.append(i)\n    for i in range(n):\n        if abs(perm[i] - i) > 1:\n            return 0\n    def remove_index(i):\n        perm[i] = None\n        for j in range(i + 1, n):\n            if perm[j] < i:\n                perm[j] = None\n            else:\n                break\n    def remove_index_2(i, j):\n        perm[i] = None\n        perm[j] = None\n        for k in range(i + 1, n):\n            if perm[k] < j:\n                perm[k] = None\n            else:\n                break\n    ans = 1\n    k -= 1\n    for i in range(n):\n        if k > 0:\n            if perm[i] > i:\n                remove_index(i)\n                k -= 1\n    for i in range(n - 1):\n        if k > 0:\n            if perm[i] < i + 1:\n                remove_index_2(i, i + 1)\n                k -= 2\n    return ans % 1000000007\n\n\ndef"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    param, k = [int(i) for i in stdin.split()]\n    beauty = [int(i) for i in stdin.split()]\n    n = len(beauty)\n    def beauty_sum(i: int):\n        return sum(beauty[:i])\n\n    ans = 0\n    for i in range(1, k+1):\n        if k % i == 0:\n            count = k // i\n            if count > i:\n                ans += beauty_sum(count * i) - beauty_sum(count * (i-1))\n            else:\n                ans += beauty_sum(i)\n            if ans >= ans:\n                break\n    return ans if ans >= 0 else -1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # read input\n    n, k = [int(i) for i in stdin.split(' ')]\n    beauty = [int(i) for i in stdin.split(' ')]\n    color = stdin.split(' ')\n    # write your code in Python 3.6\n    if k == 1:\n        if set(color) == {'R'}:\n            print(-1)\n        else:\n            print(sum(beauty))\n        return\n\n    d = {'R': set(), 'O': set(), 'W': set()}\n    for i in range(n):\n        d[color[i]].add(i)\n\n    ans = set()\n    for a in d:\n        for b in d:\n            for c in d:\n                if a == b == c:\n                    continue\n                if len(d[a] & d[b])!= 0:\n                    continue\n                if len(d[a] & d[c])!= 0:\n                    continue\n                if len(d[b] & d[c])!= 0:\n                    continue\n                ans.add(beauty[a] + beauty[b] + beauty[c])\n    if len(ans) == 0:\n        print(-1)\n        return\n    else:\n        print(max(ans))\n        return\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calc_beauty(colors: str) -> int:\n        beauty = 0\n        for i in range(len(colors)):\n            if colors[i] == 'W':\n                beauty += i\n            elif colors[i] == 'O':\n                beauty += i * 2\n            elif colors[i] == 'R':\n                beauty += i * 3\n        return beauty\n\n    def backtrack(k: int, wsum: int, curr: List[int]):\n        nonlocal max_beauty\n\n        if k == len(colors):\n            beauty = calc_beauty(colors)\n            max_beauty = max(max_beauty, beauty)\n            return\n\n        for i in range(len(colors)):\n            if i not in curr:\n                if wsum + i <= n and colors[i]!= colors[curr[-1]]:\n                    backtrack(k + 1, wsum + i, curr + [i])\n        return\n\n    n, k = [int(x) for x in stdin.split(' ')]\n    colors = stdin.split(' ')[1]\n    max_beauty = 0\n    backtrack(0, 0, [])\n    return max_beauty if max_beauty > 0 else -1\n\n\n\"\"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    c = stdin[:]\n    \n    \n    ans = 0\n    for i in range(n):\n        if c[i] == \"R\":\n            ans += b[i]\n        \n    return ans\n    "
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(n)\n    space complexity: O(1)\n    '''\n    n, k = map(int, stdin.split())\n    b = [int(num) for num in stdin.split()]\n    # Initialize the total beauty and best color\n    total_beauty = 0\n    best_color = ''\n\n    # Try to find the best color by making sure that all colors\n    # have different colors\n    for color in set(stdin.split()):\n        # Initialize the current total beauty\n        current_total_beauty = 0\n        # Initialize the number of flowers that have the color\n        num_flowers = 0\n        for i in range(n):\n            if stdin[i] == color:\n                current_total_beauty += b[i]\n                num_flowers += 1\n        # If the number of flowers is less than the number of roses\n        # that need to be bought, then continue\n        if num_flowers < k:\n            continue\n        # Otherwise, update the current best color\n        else:\n            total_beauty = current_total_beauty\n            best_color = color\n\n    return total_beauty if total_beauty > 0 else -1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n4 3 4 1 6\\nRRRRR\\n\")\n    11\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    nums = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    colors = stdin.split(\"\\n\")[2]\n\n    if k > n:\n        return -1\n\n    beauty = 0\n\n    for color in set(colors):\n        beauty += sum(nums[i] for i in range(n) if colors[i] == color)\n\n    return beauty\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    c = list(stdin)\n    a = set()\n    for i in range(n):\n        if b[i] in a:\n            a.remove(b[i])\n            b.remove(b[i])\n            c.remove(c[i])\n            n -= 1\n    if n < k:\n        return -1\n    a = set()\n    for i in range(n):\n        if b[i] in a:\n            a.remove(b[i])\n            n -= 1\n        else:\n            a.add(c[i])\n    if n < k:\n        return -1\n    return sum(b[:k])\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split(' '))\n    n = int(stdin.split(' ')[1])\n    a = list(map(int, stdin.split(' ')[2:]))\n    m = 0\n    for i in range(n):\n        m += a[i] * (p ** i)\n    m /= p\n    n *= p\n    m1 = 0\n    m2 = 1\n    for i in range(n):\n        if i % 2:\n            m1 += a[i] * m2\n        else:\n            m1 += a[i] * m\n        m2 = m1\n    m1 *= q\n    m2 *= q\n    if m1 == m2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split(' '))\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n\n    f = [p, q]\n    for i in range(n - 2):\n        f = f[-1] * a[i] + f[-2]\n        f.append(f[-1] // f[-2])\n\n    if a[-1] * f[-1] == f[-2]:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(num) for num in stdin.split()]\n    n = int(stdin.split('\\n')[1])\n    a = [int(num) for num in stdin.split('\\n')[2].split()]\n    sum = 0\n    for i in range(0, len(a)):\n        sum += a[i] * (p ** i) * (q ** (len(a) - i - 1))\n    sum = sum * (p - q)\n    sum = sum // (p * q)\n    if sum == n:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(x) for x in stdin.split()]\n    n = int(stdin)\n    fraction = [p, 1]\n    while fraction[-1]!= 0:\n        new_p = fraction[-1] * p\n        new_q = fraction[-1] * q\n        fraction.append(new_p + new_q)\n        p, q = new_p, new_q\n    # print(fraction)\n    numerator = fraction[0]\n    denominator = fraction[1]\n    # print(numerator, denominator)\n    while denominator!= 0:\n        numerator, denominator = denominator, numerator % denominator\n    return \"YES\" if numerator == q else \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    b = a[0] * n\n    for i in range(n):\n        b += int(a[i])\n    b = b / (p * q)\n    return \"YES\" if b == int(p / q) else \"NO\""
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    temp = 1\n    for i in range(0, len(a)):\n        temp *= a[i]\n    temp = temp // q\n\n    return \"YES\" if temp == n else \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(x) for x in stdin.split(' ')]\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    a.pop()\n\n    a = [p // a[i] * p + a[i] for i in range(len(a))]\n    a[0] = p // a[0] * a[0]\n    a[1] = p // a[1] * a[1]\n\n    k = 1\n    for i in range(2, n + 1):\n        k *= a[i - 1] + 1\n        k = k // a[i - 1]\n    k = p // k\n    return 'YES' if k == q else 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution without using library functions.\n    \"\"\"\n    def read_matrix(n: int, m: int) -> [[]]:\n        \"\"\"Read matrix from stdin.\n        \"\"\"\n        return [[int(i) for i in stdin.readline().split()] for _ in range(n)]\n\n    p, q = [int(i) for i in stdin.readline().split()]\n    n = int(stdin.readline())\n    matrix = read_matrix(n, n)\n    height = (q * matrix[0][0] - p * matrix[0][1]) // matrix[0][0]\n    coef = (q * matrix[0][0] - p * matrix[0][1]) % matrix[0][0]\n    if coef == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    n, a = list(map(int, stdin.split()))\n    cont_fraction = stdin.split()\n    print(f'{n} {a}')\n    print(cont_fraction)\n    if len(cont_fraction) == 1:\n        return 'YES' if a == int(cont_fraction[0]) else 'NO'\n    else:\n        cont_fraction = cont_fraction[:-1]\n        cont_fraction = list(map(int, cont_fraction))\n        a, i = int(cont_fraction[0]), 1\n        while i < len(cont_fraction):\n            if cont_fraction[i] == 0:\n                a = a * 10\n            else:\n                a = a * 10 + int(cont_fraction[i])\n            i += 1\n        print(f'{n} {a}')\n        return 'YES' if a == n else 'NO'\n\nprint(solution('9 4\\n2\\n2 4'))\nprint(solution('9 4\\n3\\n1 2 4'))\nprint(solution('9 4\\n3\\n1 2 3'))\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        return gcd(b, a % b) if b else a\n\n    a, b, n = map(int, stdin.split())\n    res = a // gcd(a, b) * b\n\n    for i in range(n):\n        a = b + int(res / b)\n        b = res\n        res = a // gcd(a, b) * b\n    return \"YES\" if res == n else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if sum(list(map(int, stdin.split('+')))) % 2 == 0:\n        return stdin.replace('+', '=')\n    else:\n        return \"Impossible\"\nprint(solution(input()))"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin\n    while '++' in expression or '--' in expression:\n        expression = expression.replace('++', '+')\n        expression = expression.replace('--', '+')\n        expression = expression.replace('+-', '-')\n        expression = expression.replace('-0', '0')\n    print(expression)\n    return expression\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \n    Returns the arithmetic expression of counting sticks if possible\n    \n    '''\n    expression = stdin\n    answer = 'Impossible'\n    \n    while answer == 'Impossible':\n        temp_expression = ''\n        \n        for i in expression:\n            if i.isnumeric():\n                temp_expression += i\n            elif i == '+':\n                temp_expression += '|'\n            elif i == '=':\n                temp_expression += '='\n            elif i == '|':\n                temp_expression += '|'\n            \n        expression = temp_expression\n        if not is_arithmetically_correct(expression):\n            answer = expression\n            \n    return answer\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin\n    while not (expression == 'Impossible'):\n        expression = expression.replace('||||||', '||||')\n        expression = expression.replace('|||||', '||||')\n        expression = expression.replace('|||||', '|')\n        expression = expression.replace('|', '+')\n        expression = expression.replace('|||', '|')\n        expression = expression.replace('||', '|')\n        expression = expression.replace('|+', '|')\n        expression = expression.replace('|', '=')\n        expression = expression.replace('=|', '|')\n        expression = expression.replace('=', '=')\n    return expression\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    exp = stdin.split('=')\n    if exp[1].count('|') < 2:\n        return 'Impossible'\n    \n    if '|' in exp[0]:\n        exp[0] = exp[0].replace('|', '')\n    if '|' in exp[1]:\n        exp[1] = exp[1].replace('|', '')\n    if '+' in exp[0]:\n        exp[0] = exp[0].replace('+', '')\n    if '+' in exp[1]:\n        exp[1] = exp[1].replace('+', '')\n    if exp[0] == exp[1]:\n        return exp[0]\n    elif exp[0] == '':\n        exp[0] = exp[1]\n    elif exp[1] == '':\n        exp[1] = exp[0]\n    \n    exp = exp[0] + '|' + exp[1] + '|'\n    exp = exp.replace('+', '+|')\n    exp = exp.replace('=', '=|')\n    \n    #print(exp)\n    \n    return exp[:-1]\n\"\"\"\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    if eval(inp[1]) == eval(inp[3]):\n        return inp[0] + inp[1] + inp[2] + inp[3]\n    return \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    if c == a + b:\n        return stdin\n    if a == 0:\n        if c == 0:\n            return \"Impossible\"\n        else:\n            return f\"{c}0{b}=0\"\n    if b == 0:\n        if a < 0:\n            return \"Impossible\"\n        return f\"0{abs(a)}0{c}=0\"\n    if c == 0:\n        if b < 0:\n            return \"Impossible\"\n        return f\"0{a}0{abs(b)}=0\"\n\n    s = stdin.split()\n    if s[1] == \"+\":\n        return f\"{s[0]}{c}0{abs(b)}={a}0{abs(b)}0{c}={a+b}\"\n    else:\n        return f\"0{a}0{abs(b)}={c}0{abs(b)}0{c}={abs(a)}0{abs(b)}0{a}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count_sticks_in_expression = stdin.split('=')\n    count_sticks_in_expression[0] = stdin[0:len(stdin)-1]\n    count_sticks_in_expression[1] = stdin[len(stdin)-1]\n    \n    expression_to_verify = count_sticks_in_expression[0] +'' + count_sticks_in_expression[1]\n    \n    expression_split_by_space = expression_to_verify.split(' ')\n    expression_split_by_space[0] = expression_split_by_space[0].split('|')\n    expression_split_by_space[1] = expression_split_by_space[1].split('|')\n    expression_split_by_space[2] = expression_split_by_space[2].split('|')\n    \n    expression_to_verify = expression_split_by_space[0][0] +'' + expression_split_by_space[0][1] +'' + expression_split_by_space[1][0] +'' + expression_split_by_space[1][1] +'' + expression_split_by_space[2][0] +'' + expression_split_by_space[2][1]\n    \n    expression_split_by_space = expression_to_verify.split(' ')\n    \n    # Getting the answer\n    if expression_split_by_space[0] == expression_split_by_space[1] and expression_split_by_space[2] == expression_split_by_space[3]:\n        return expression_to_verify\n    \n    # Now it is time to change the sticks\n    expression_split_by_space[0] = expression_split_by_space[0].split('+')\n    expression_split_by_space[1] = expression_split_by_space[1].split('+')\n    expression_split_by_space[2] = expression_split_by_space[2].split('+')\n    \n    # If one of the sticks is vertical, we need to shift it\n    if expression_split_by_space[1][0] == expression_split_by_space[1][1]:\n        expression_split_by_space[0][0] = expression_split_by_space[0][0].replace('+', '')\n        expression_split_by_space[0][1] = expression_split_by_space[0][1].replace('+', '')\n        expression_split_by_space[0][0] = '+' + expression_split_by_space[0][0]\n        expression_split_by_space[0][1] = '+' + expression_split_by_space[0][1]\n        \n        expression_to_verify = expression_split_by_space[0][0] +'' + expression_split_by_space[0][1] +'' + expression_split_by_space[1][0] +'' + expression_split_by_space[1][1] +'' + expression_split_by_space[2][0] +'' + expression_split_by_space[2][1]\n        \n        expression_split_by_space = expression_to_verify.split(' ')\n        \n        # Getting the answer\n        if expression_split_by_space[0] == expression_split_by_space[1] and expression_split_by_space[2] == expression_split_by_space[3]:\n            return expression_to_verify\n    \n    # If one of the sticks is horizontal, we need to shift it\n    if expression_split_by_space[0][0] == expression_split_by_space[0][1]:\n        expression_split_by_space[1][0] = expression_split_by_space[1][0].replace('+', '')\n        expression_split_by_space[1][1] = expression_split_by_space[1][1].replace('+', '')\n        expression_split_by_space[1][0] = '+' + expression_split_by_space[1][0]\n        expression_split_by_space[1][1] = '+' + expression_split_by_space[1][1]\n        \n        expression_to_verify = expression_split_by_space[0][0] +'' + expression_split_by_space[0][1] +'' + expression_split_by_space[1][0] +'' + expression_split_by_space[1][1] +'' + expression_split_by_space[2][0] +'' + expression_split_by_space[2][1]\n        \n        expression_split_by_space = expression_to_verify.split(' ')\n        \n        # Getting the answer\n        if expression_split_by_space[0] == expression_split_by_space[1] and expression_split_by_space[2] == expression_split_by_space[3]:\n            return expression_to_verify\n    \n    # If there are no sticks that need to be shifted, then we print \"Impossible\"\n    return 'Impossible'\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"||||+||=||||||\")\n    '||||+||=||||||'\n    >>> solution(\"|||+|=||||||\")\n    'Impossible'\n    >>> solution(\"||||+||=||||||\")\n    '||||+||=||||||'\n    \"\"\"\n    \n    stack = []\n    for e in stdin:\n        if e in \"+=\":\n            if not stack or stack[-1][0]!= e:\n                stack.append((e, 0))\n            else:\n                stack[-1] = (e, stack[-1][1] + 1)\n        elif e == \"|\":\n            if not stack or stack[-1][0]!= \"|\":\n                stack.append((\"|\", 0))\n            else:\n                stack[-1] = (\"|\", stack[-1][1] + 1)\n        else:\n            if not stack or stack[-1][0]!= e:\n                stack.append((e, 0))\n            else:\n                stack[-1] = (e, stack[-1][1] + 1)\n    if not stack or stack[-1][0]!= \"|\":\n        return \"Impossible\"\n    stack.sort(key = lambda x: x[1])\n    if stack[0][1] == 1:\n        return stdin\n    for i in range(1, len(stack)):\n        if stack[i][1] == stack[i - 1][1] and stack[i][0]!= stack[i - 1][0]:\n            return \"Impossible\"\n    index = 0\n    while index < len(stack) and stack[index][1] == 0:\n        index += 1\n    if index == len(stack):\n        return stdin\n    if stack[index][0] == \"|\":\n        return \"Impossible\"\n    if stack[index][0] == \"+\":\n        return stdin[:index] + \"-\" + stdin[index:]\n    \n    \n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get input\n    n, k = stdin.split('\\n')[0].split(' ')\n    n, k = int(n), int(k)\n    \n    # \n    arr = [i for i in range(1, n+1)]\n    arr1 = arr[:]\n    arr2 = arr[:]\n    \n    # count 1s\n    count1s = 0\n    for i in range(n):\n        if arr[i]%2 == 1:\n            count1s += 1\n    \n    # count result\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                arr1[i], arr1[j] = arr1[j], arr1[i]\n                if count1s == 0:\n                    if sum([abs(arr1[i]-arr1[j]) for i in range(n)])%2 == 1:\n                        count += 1\n                else:\n                    if (sum([abs(arr1[i]-arr1[j]) for i in range(n)]) + count1s)%2 == 1:\n                        count += 1\n    \n    # return result\n    return str(count)"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs\n    n, k = map(int, stdin.split(' '))\n    # create array with n values\n    arr = list(range(1, n + 1))\n    # create list of odd permutations\n    odd_perm = []\n    for i in range(n):\n        if abs(i - arr[i]) % 2 == 0:\n            continue\n        else:\n            odd_perm.append(arr.pop(i))\n    # get amount of odd permutations\n    amount_odd_perm = len(odd_perm)\n    # return amount of odd permutations\n    return amount_odd_perm"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Task function of the online judge\n    n, k = map(int, stdin.split())\n    if n % 2 == 0:\n        print(0)\n    else:\n        print(pow(2, n-1, 10**9+7))\n        print(2**n-1)\n        print(pow(2, n-1, 10**9+7) - (2**(n-1))%10**9)\n    return \"\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    odd = set()\n    for i in range(1, n + 1):\n        odd.add(i)\n    odd -= set(range(0, k))\n    odd -= set(range(k + 1, n + 1))\n    print(len(odd))\n    return \"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(sum(abs(i - (i % 2) - 1) for i in range(n)))\n    \n\"\"\"\nfrom math import factorial\n\ndef"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.strip().split('\\n')]\n    return str(math.factorial(a+b)//math.factorial(a)//math.factorial(b)//(math.factorial(a+b-2)))"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return the result\n    return \"0\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_nums, k = map(int, stdin.split())\n    # print(num_nums)\n    # print(k)\n    \n    return\n    \n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    d = []\n    w = []\n    for _ in range(N):\n        x, y = list(map(int, stdin.readline().split()))\n        d.append(abs(x))\n        w.append(('L' if x < 0 else 'R') + ('U' if y < 0 else 'D'))\n    return ''\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # MY SOLUTION\n    n = int(stdin)\n\n    # I create a list of points with the format [X, Y]\n    points = []\n\n    for i in range(n):\n        line = stdin.split('\\n')[i].strip().split(' ')\n        points.append([int(line[0]), int(line[1])])\n\n    # From the points, I create the dictionary with the format {X: [Y, m]}\n    dict_points = {}\n    for point in points:\n        if point[0] not in dict_points:\n            dict_points[point[0]] = [point[1], []]\n        else:\n            dict_points[point[0]][0] = point[1]\n\n    # I create the dictionary with the format {Joint: [Mode, [X, Y]]}\n    dict_joints = {}\n    for key in dict_points.keys():\n        for item in dict_points[key]:\n            if key not in dict_joints:\n                dict_joints[key] = [item, [key, item]]\n            else:\n                if item > dict_joints[key][0]:\n                    dict_joints[key][1] = [item, key, item]\n                elif item < dict_joints[key][0]:\n                    dict_joints[key][1] = [dict_joints[key][0], key, dict_joints[key][0]]\n\n    # I put the result in the dictionary in the format {Joint: [Mode, [X, Y], [X, Y],...]}\n    result = dict_joints[n]\n\n    # If the result is -1, that means that the condition cannot be satisfied. Otherwise, I put the result in the format {Joint: [Mode, [X, Y], [X, Y],...]}\n    if result[0] == -1:\n        result = -1\n    else:\n        result = {n: result}\n\n    # I join the values of the dictionary in a string of the format \"m d_1 d_2... d_m\"\n    result = [str(i) for i in result.values()]\n    result = \" \".join(result)\n\n    return result\n\n    # OTHER SOLUTION\n    # return [str(i) for i in dfs(n, points, [])]\n\ndef"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def format(inp: str) -> List[int]:\n        out = inp.split('\\n')\n        n = int(out[0])\n        inp_pairs = [inp.split('\\t') for inp in out[1:-1]]\n        return n, inp_pairs\n\n    def to_int(x: str) -> int:\n        return int(x)\n\n    def to_pair(x: str) -> Tuple[int, int]:\n        x = x.split()\n        return to_int(x[0]), to_int(x[1])\n\n    n, inp_pairs = format(stdin)\n\n    # Not sure if it's okay to just do this\n    pair_to_way = {to_pair(pair): way for pair, way in inp_pairs}\n    print(pair_to_way)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *Xy = map(int, stdin.split())\n    m = N\n    d = [0] * (m + 1)\n    w = [[\"\"] * (m + 1) for _ in range(4)]\n\n    for i in range(1, m + 1):\n        d[i] = 10 ** 12 if Xy[i - 1] == -1 else Xy[i - 1]\n        for j in range(4):\n            if i == m:\n                w[j][i] = \"DR\"\n                continue\n            if Xy[i] == Xy[i - 1]:\n                w[j][i] = w[j][i - 1]\n            else:\n                d_i = d[i]\n                if j == 0:\n                    d_i = -d_i\n                elif j == 1:\n                    d_i = abs(d_i)\n                elif j == 2:\n                    d_i = -abs(d_i)\n                elif j == 3:\n                    d_i = abs(d_i)\n                w[j][i] = f\"{j}{d_i}\"\n    return \" \".join([\" \".join(j) for j in w])\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # 1. convert string input to list\n    inputs = stdin.split('\\n')\n    # 2. remove last element in the list\n    inputs.pop(-1)\n    # 3. split each line by'' into list\n    inputs = [i.split(' ') for i in inputs]\n    # 4. convert the list from string to int\n    inputs = [[int(j) for j in i] for i in inputs]\n    # 5. number of sections is number of elements in the list minus 1\n    sections = inputs[0][0] - 1\n    # 6. convert each element in the list to list of character\n    inputs = [[list(i) for i in inputs[j]] for j in range(len(inputs))]\n    # 7. loop from 1 to sections\n    for i in range(1, sections + 1):\n        # 8. for each element in the list, convert the first element into string\n        inputs[0][i] = str(inputs[0][i])\n        # 9. convert the second element into int\n        inputs[1][i] = int(inputs[1][i])\n        # 10. depending on the mode, find the value of x and y\n        if inputs[0][i][0] == 'R':\n            x = inputs[1][i] - inputs[1][i - 1]\n        elif inputs[0][i][0] == 'L':\n            x = inputs[1][i - 1] - inputs[1][i]\n        elif inputs[0][i][0] == 'U':\n            x = inputs[1][i - 1] + inputs[1][i]\n        elif inputs[0][i][0] == 'D':\n            x = inputs[1][i] - inputs[1][i - 1]\n        # 11. convert the third element into string\n        inputs[2][i] = str(inputs[2][i])\n        # 12. convert the forth element into int\n        inputs[3][i] = int(inputs[3][i])\n        # 13. depending on the mode, find the value of y\n        if inputs[2][i][0] == 'R':\n            y = inputs[3][i] - inputs[3][i - 1]\n        elif inputs[2][i][0] == 'L':\n            y = inputs[3][i - 1] - inputs[3][i]\n        elif inputs[2][i][0] == 'U':\n            y = inputs[3][i - 1] + inputs[3][i]\n        elif inputs[2][i][0] == 'D':\n            y = inputs[3][i] - inputs[3][i - 1]\n        # 14. print the result in the following format\n        print(sections, end=' ')\n        print(' '.join(inputs[0][i]), end=' ')\n        print(x, end=' ')\n        print(y, end=' ')\n        print(' '.join(inputs[2][i]))\n        # 15. continue the loop until the last element of the list\n        if i!= sections:\n            continue\n        # 16. if all conditions are satisfied, return the result\n        else:\n            return\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *args = stdin.split('\\n')\n    N = int(N)\n    args = list(map(lambda x: tuple(map(int, x.split())), args))\n    args = list(map(lambda x: tuple(map(lambda y: [y], x)), args))\n\n    def helper(x, y):\n        nonlocal args\n        return args[y][x][0]\n    \n    result = []\n    for i in range(1, N + 1):\n        x_i, y_i = args[i - 1]\n        x_0, y_0 = args[0][0]\n        \n        x_j = x_0\n        y_j = y_0\n        for j in range(i):\n            m = helper(x_j, y_j)\n            d_i = abs(x_i - x_j)\n            x_j, y_j = helper(x_i, y_i) if m == 'R' else helper(x_i, y_i) if m == 'L' else helper(x_i, y_i) if m == 'D' else helper(x_i, y_i) if m == 'U' else None\n            d_j = abs(x_j - x_i)\n            \n            if d_i > d_j:\n                m = 'L' if m == 'R' else 'R' if m == 'L' else 'D' if m == 'U' else 'U'\n            elif d_j > d_i:\n                m = 'U' if m == 'D' else 'D' if m == 'U' else 'L' if m == 'R' else 'R'\n            x_j, y_j = helper(x_i, y_i) if m == 'L' else helper(x_i, y_i) if m == 'R' else helper(x_i, y_i) if m == 'D' else helper(x_i, y_i) if m == 'U' else None\n\n        result.append('D' if m == 'L' else 'U' if m == 'R' else 'R' if m == 'D' else 'L' if m == 'U' else None)\n\n    return''.join(result)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\n   ... 2 -1\n   ... 1 2\n   ... -1 0\n   ... -1 1\n   ... 2 1\n   ... 1 3\n   ... 3 -1\n   ... 1 -1\")\n    '2 1\n    RRDD\n    DDUD'\n    \"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # write your code in Python 3.6\n    string = stdin\n    list_words = list(string)\n\n    # Now we remove all spaces and punctuation from the string\n    # First, we find all punctuation marks in the string\n    list_punctuation = list()\n    for c in string:\n        if c in '.,?!':\n            list_punctuation.append(c)\n    # We replace all the punctuation marks with empty spaces\n    for c in list_punctuation:\n        string = string.replace(c, \"\")\n    # We convert the string to a list\n    string = string.split(' ')\n    # We get rid of all empty strings\n    string = [s for s in string if s]\n    # Then, we find all the fillers\n    list_fillers = list()\n    for word in string:\n        # We get rid of all fillers that are in the beginning of the string\n        if word.startswith('og'):\n            list_fillers.append(word)\n        # We get rid of all fillers that are in the end of the string\n        elif word.endswith('og'):\n            list_fillers.append(word)\n        # We get rid of all fillers that are in the middle of the string\n        else:\n            if 'og' in word:\n                list_fillers.append(word)\n    # We find all the words that can be obtained from the fillers\n    list_words = list()\n    for word in list_fillers:\n        for i in range(0, len(word)):\n            if word[i:i+2] == 'og':\n                list_words.append(word[:i]+word[i+2:])\n    # We get rid of all duplicates\n    list_words = list(set(list_words))\n    # Finally, we print the final answer\n    for word in list_words:\n        print(word, end=\"\")\n        print(\"***\", end=\"\")\n    print()\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    fillers = ['og', 'ogog', 'ogogogo', 'ogogogog', 'ogogogogogogogog']\n    for f in fillers:\n        text = text.replace(f, '***')\n    print(text)\n    return text"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split(\"\\n\")[0])\n    s: str = stdin.split(\"\\n\")[1]\n    t: str = \"*\" * 3\n    r: str = \"\"\n    for i in range(n):\n        if s[i]!= \"o\":\n            r += t\n        else:\n            r += s[i]\n    return r\n\n\ndef"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    interview = stdin\n    filler = []\n    for i in interview:\n        if i == 'o':\n            filler.append('og')\n        if i == 'g':\n            filler.append('ogog')\n    filler.sort(reverse=True)\n    print(filler)\n    for i in filler:\n        interview = interview.replace(i, \"***\")\n    return interview\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string_length = int(stdin)\n    speech = stdin\n    filler_words = [\"ogogo\", \"ogogogo\", \"ogo\", \"og\", \"ogog\", \"ogogog\", \"ggo\", \"gg\"]\n    for word in filler_words:\n        speech = speech.replace(word, \"***\")\n    return speech\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    # Split string into a list of words\n    words = input_str.split()\n    # Check if there is a filler in the list\n    if \"ogogo\" in words:\n        # Replace the filler with \"***\"\n        result = input_str.replace(\"ogogo\", \"***\")\n        print(result)\n        return\n    # Check if there is a filler in the list\n    if \"og\" in words:\n        # Replace the filler with \"***\"\n        result = input_str.replace(\"og\", \"***\")\n        print(result)\n        return\n    # Check if there is a filler in the list\n    if \"ogo\" in words:\n        # Replace the filler with \"***\"\n        result = input_str.replace(\"ogo\", \"***\")\n        print(result)\n        return\n    # Print the string without any filler\n    print(input_str)\n    return\n\n\nsolution(\"aogogob\")\nsolution(\"ogogmgogogogo\")\nsolution(\"ogoogoogo\")\nsolution(\"ogog\")\nsolution(\"ogo\")\nsolution(\"og\")\nsolution(\"\")\n\n\ndef"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n\n    words = set()\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j] not in words and s[i:j]!= s[i:j][::-1]:\n                words.add(s[i:j])\n\n    answer = []\n    for word in words:\n        answer.append(word[:2] + \"*\" * (len(word) - 2))\n    return \"***\".join(answer)\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('ogo', '***').replace('ogog', '***').replace('oggo', '***')\n\n\nprint(solution(\"aogogob\"))\nprint(solution(\"ogogmgogogogo\"))\nprint(solution(\"ogoogoogo\"))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    result = 1\n    for i in range(n):\n        result = (result * (x - i) * (10 ** i)) % (10 ** 9 + 7)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, n = [int(num) for num in stdin.split(' ')]\n    return str(calc_f(x, n))\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    res = 1\n    for i in range(2, n+1):\n        res *= g(x, i) % (10**9 + 7)\n    return str(res % (10**9 + 7))\n\nprint(solution(input()))\n\n\n\n---- Debug ----\n\nx, n = map(int, input().split())\n\nres = 1\nfor i in range(2, n+1):\n    res *= g(x, i)\nprint(res % (10**9 + 7))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, n = list(map(int, stdin.split()))\n    prime = []\n    for i in range(2, 1001):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime.append(i)\n    total = 1\n    for i in range(len(prime)):\n        a = 0\n        for j in range(n):\n            a += pow(prime[i], j + 1, mod)\n        total *= a\n        total %= (1e9 + 7)\n    return total\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    arr = []\n    for i in range(1, n + 1):\n        arr.append(f\"g({x}, {i})\")\n    tmp = eval(\" * \".join(arr))\n    return str(tmp % (10 ** 9 + 7))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of\n    https://leetcode.com/problems/lucky-number-in-a-matrix/\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    base = 10 ** 9 + 7\n    mod = base\n\n    def g(n, k):\n        res = 1\n        for i in range(k):\n            res = res * n % mod\n        return res\n\n    def f(n, k):\n        return sum(g(i, k) for i in range(1, n + 1))\n\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * f(m, i) % mod\n    return str(ans)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    product = 1\n    for i in range(1, n + 1):\n        product *= x ** i\n    return str(product % (10 ** 9 + 7))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = stdin.split()\n    x, n = int(x), int(n)\n    res = str(x)\n    for i in range(1, n):\n        res = str(x * int(res) % (10 ** 9 + 7))\n    print(res)\n    return res\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = [int(elem) for elem in stdin.split(' ')]\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * math.prod([x // math.prod([i for i in range(j + 1, n + 1) if x % math.prod([i for i in range(j + 1, n + 1)]) == 0]) for j in range(1, n + 1) if math.prod([i for i in range(j + 1, n + 1) if x % math.prod([i for i in range(j + 1, n + 1)]) == 0])!= 0])) % (10 ** 9 + 7)\n    return str(result)\n    pass"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split('\\n')[0].split(' '))\n    base = pow(10, 9) + 7\n    def g(x, p):\n        res = 0\n        while x > 1:\n            res = (res * p + x % p) % base\n            x //= p\n        return res\n    def f(x, y):\n        res = 1\n        for i in range(1, y + 1):\n            res = (res * g(x, i)) % base\n        return res\n    return f(x, n) * f(x, n) % base\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a == 5:\n        if c % 2 == 0:\n            print(3)\n        else:\n            print(3)\n    elif a == 1:\n        if c % 2 == 0:\n            print(2)\n        else:\n            print(1)\n    elif a == 2:\n        if c % 2 == 0:\n            print(4)\n        else:\n            print(1)\n    elif a == 3:\n        if c % 2 == 0:\n            print(4)\n        else:\n            print(3)\n    else:\n        if c % 2 == 0:\n            print(3)\n        else:\n            print(3)\n\nsolution(input())\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    return \" \".join(map(str, solution_solution(stdin)))\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    s(x) = a\u00b7s(b\u00b7s(x)) + c\n    '''\n    a, b, c = map(int, stdin.split())\n    res = 0\n    for x in range(1, 10 ** 9):\n        s = 0\n        while x!= 0:\n            s += x % 10\n            x //= 10\n        if s ** a + c == b:\n            res += 1\n    return res\n    \n    \n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    count = 0\n    for x in range(1, 1000000000):\n        s = str(x)\n        if a*x**b + c == sum(map(int, s)):\n            count += 1\n    return count\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(type(stdin))\n    # print(stdin)\n    # print(stdin.split(' '))\n    # print(type(stdin.split(' ')))\n    # a, b, c = stdin.split(' ')\n    # print(a,b,c)\n    a,b,c = map(int, stdin.split(' '))\n    print(solve(a,b,c))\n\ndef"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    \n    def find_solution(a, b, c):\n        s = '0'\n        for x in range(1, 10**9):\n            if (x**(a+1)) + (b * (s[::-1].index('0'))) + c == 0:\n                yield x\n            s += str(x % 10)\n    \n    return str(len(list(find_solution(a, b, c))))\n\n\ndef"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    a, b, c = map(int, stdin.split())\n    result = 0\n    for x in range(1, 10 ** 9):\n        if a * s(x) ** b + c == 0:\n            result += 1\n            print(x)\n    return result\n\n\ndef"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    s = lambda x: sum(int(i) for i in str(x))\n\n    def find_solutions(a, b, c, x):\n        if (a == b == 0) and (c > 0):\n            yield c\n        if x > 0:\n            for y in find_solutions(a, b, c, s(x)):\n                yield x * y\n                yield y\n        if x < 0:\n            yield x\n        if b > 0:\n            for y in find_solutions(a, b - 1, c, -x):\n                yield x * y\n                yield y\n    \n    return str(len(list(set(find_solutions(a, b, c, 0)))))\n\n\nprint(solution(input()))"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    def s(x):\n        return sum(map(int, str(x)))\n    def g(x):\n        return a*x**b + c\n    for x in range(10**8):\n        if g(x)==0:\n            continue\n        if s(g(x))==0:\n            continue\n        if s(g(x))%9==0:\n            print(x)\n    return\nsolution(input())\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cube = stdin.split()\n    print(cube)\n    return \"YES\" if check_cube(cube) else \"NO\"\n\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\")\n    'NO'\n    >>> solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\")\n    'YES'\n    \"\"\"\n    cube = list(map(int, stdin.split()))\n    assert len(cube) == 24, 'Cube should have 24 squares'\n    for i in range(1, 7):\n        assert (\n            cube.count(i) == 4\n        ), f'Cube should have 4 occurrences of color {i}'\n\n    return 'YES' if check_solution(cube) else 'NO'\n\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    squares = sorted(stdin.split(), key=lambda square: int(square[1:]))\n    check = {(0, 1, 2): 0,\n             (0, 2, 1): 0,\n             (1, 0, 2): 0,\n             (1, 2, 0): 0,\n             (2, 0, 1): 0,\n             (2, 1, 0): 0}\n    for i in range(len(squares)):\n        if squares[i] in check:\n            check[squares[i]] += 1\n            if all(value == check[squares[i]] for value in check.values()):\n                return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(' ')\n    c = [0] * 6\n    for i in range(0, 24, 4):\n        c[int(s[i]) - 1] += 1\n    if all(x == 4 for x in c):\n        return 'YES'\n    if (c[0] + c[3] + c[4] + c[5] + c[6] + c[7]) % 2 == 0 \\\n            and (c[1] + c[2] + c[6] + c[7]) % 2 == 0:\n        return 'YES'\n    if (c[0] + c[3] + c[4] + c[5] + c[6] + c[7]) % 2 == 1 \\\n            and (c[1] + c[2] + c[6] + c[7]) % 2 == 1:\n        return 'YES'\n    return 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split(' ')))\n    c = []\n    count = []\n    for i in range(len(x)):\n        if x[i] not in c:\n            c.append(x[i])\n            count.append(0)\n        count[c.index(x[i])] += 1\n    for i in range(len(count)):\n        if count[i]!= 4:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\")\n    'NO'\n    >>> solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\")\n    'YES'\n    \"\"\"\n    colors = [int(x) for x in stdin.split()]\n    l = len(colors)\n    x = 0\n    if colors[x : x + 4]!= colors[x + 4 : x + 8] == colors[x + 8 : x + 12] == colors[x + 12 : x + 16]:\n        return \"YES\"\n    if colors[x + 4 : x + 8] == colors[x + 8 : x + 12] == colors[x + 12 : x + 16]:\n        return \"YES\"\n    if colors[x : x + 4] == colors[x + 4 : x + 8] == colors[x + 8 : x + 12]:\n        return \"YES\"\n    if colors[x + 4 : x + 8] == colors[x + 12 : x + 16]:\n        return \"YES\"\n    if colors[x : x + 4] == colors[x + 8 : x + 12]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return \"YES\" if stdin.count(stdin[0]) == 4 or stdin.count(stdin[1]) == 4 or stdin.count(stdin[2]) == 4 or stdin.count(stdin[3]) == 4 or stdin.count(stdin[4]) == 4 or stdin.count(stdin[5]) == 4 or stdin.count(stdin[6]) == 4 or stdin.count(stdin[7]) == 4 or stdin.count(stdin[8]) == 4 or stdin.count(stdin[9]) == 4 or stdin.count(stdin[10]) == 4 or stdin.count(stdin[11]) == 4 or stdin.count(stdin[12]) == 4 or stdin.count(stdin[13]) == 4 or stdin.count(stdin[14]) == 4 or stdin.count(stdin[15]) == 4 or stdin.count(stdin[16]) == 4 or stdin.count(stdin[17]) == 4 or stdin.count(stdin[18]) == 4 or stdin.count(stdin[19]) == 4 or stdin.count(stdin[20]) == 4 or stdin.count(stdin[21]) == 4 or stdin.count(stdin[22]) == 4 or stdin.count(stdin[23]) == 4 else \"NO\""
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = [int(x) for x in stdin.split()]\n    score = 0\n    hacks = 0\n    while score < y:\n        hacks += 1\n        score += 100 if hacks % 2 == 0 else 50\n        score += (hacks // 2) * 96 + 42 if hacks % 2 == 1 else 0\n        score %= 475\n    return hacks\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = [int(e) for e in stdin.split(' ')]\n    n = p - y - 1\n    i = (p - y - 1) % n\n    while n:\n        i = (i * 96 + 42) % n\n        print(26 + i)\n        n -= 1\n    return \"\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    s = (p * 100 + p * p) % 475\n    for i in range(y - x + 1):\n        s = ((s * 96 + 42) % 475) % 475\n    return str(26 + s)\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = [int(x) for x in stdin.split(' ')]\n    if y > x:\n        return 0\n    elif p >= 25:\n        return y\n    else:\n        c = 0\n        while x < y:\n            x = (x * 96 + 42) % 475\n            c += 1\n        return c\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    p, x, y = stdin.split()\n    p = int(p)\n    x = int(x)\n    y = int(y)\n    \n    # Calculate the number of places we have to get the T-shirt\n    places = (p // 50) % 475\n    \n    # The number of points is equal to:\n    # - The number of points we initially got,\n    # - The number of places we need to go, and\n    # - The number of unsuccessful hacks that is needed to make our current score equal to our goal.\n    points = x\n    \n    for i in range(25):\n        # Add 42 to the number to get a new number between 1 and 10000\n        new_num = (i * 96 + 42) % 475\n        # The number of places will be equal to:\n        # - The number of points,\n        # - The new number, and\n        # - The number of unsuccessful hacks that is needed to make our current score equal to our goal.\n        places += new_num\n        # Add the number of points to the number of points\n        points += new_num * 100\n        # If the number of places is equal to the number of places needed to get the T-shirt\n        if places == y:\n            # We can calculate the number of successful hacks that is needed\n            # to make our current score equal to our goal,\n            # so we return the difference between those values.\n            return points - x\n    \n    # If the points we have initially are enough to win the current round,\n    # then the number of places needed to get the T-shirt is 0.\n    return 0"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = list(map(int, stdin.split()))\n    i = ((p // 50) % 475)\n    while i < 25:\n        i = (i * 96 + 42) % 475\n        print(26 + i)\n    return ''\n\"\"\""
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = [int(i) for i in stdin.split(' ')]\n    i = p // 50 % 475\n    for _ in range(25):\n        i = (i * 96 + 42) % 475\n        print(26 + i)\n    return ''\n\n\"\"\"\n\ndef"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split(' '))\n    i = (p // 50) % 475\n    while i < 475:\n        if i * 96 + 42 < 475:\n            i = (i * 96 + 42) % 475\n        else:\n            i += (-(i * 96 + 42) // 475) * 475\n    while i < 475:\n        if i * 96 + 42 < 475:\n            print(26 + i)\n            i = (i * 96 + 42) % 475\n        else:\n            i += (-(i * 96 + 42) // 475) * 475\n    return \"\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = stdin.split(' ')\n    p = int(p)\n    x = int(x)\n    y = int(y)\n    i = (p // 50) % 475\n    while True:\n        i = (i * 96 + 42) % 475\n        if i < 26:\n            break\n        print(26 + i)\n    return '0'\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = [int(s) for s in stdin.split(' ')]\n    max_points = p*26 + (y-1)\n    min_hacks = max_points // 100\n    current = min_hacks\n    while current >= 1:\n        current += current // 96 + 42\n        current %= 475\n        current -= 1\n    if current < 26:\n        current = 26\n    print(current)\n    return str(current)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if '2' in stdin:\n        return 0\n    if '3' in stdin:\n        return 1\n    return 2\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    \n    return str(n * (a + b + c) - (a * a + b * b + c * c))\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    c = int(stdin.readline())\n    return int(a * n) + int(b * (n - 1)) + int(c * (n - 1))\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split('\\n')]\n\n    return f\"{(2 * a + b + c) * n}m\"\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        return \"Wrong input\"\n\n    dist = [int(x) for x in stdin.split(' ')]\n    if len(dist)!= 4:\n        return \"Wrong input\"\n\n    if dist[1] < 1 or dist[1] > 100:\n        return \"Wrong input\"\n\n    if dist[2] < 1 or dist[2] > 100:\n        return \"Wrong input\"\n\n    if dist[3] < 1 or dist[3] > 100:\n        return \"Wrong input\"\n\n    return str(sum(dist[1:3]) + dist[1])\n\n\ndef"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split())\n    distance = min(x_1, x_2, x_3)\n    while True:\n        distance += 1\n        if distance % x_1 == 0 and distance % x_2 == 0 and distance % x_3 == 0:\n            break\n    return distance\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = (int(s) for s in stdin.split())\n    if x1 == x2 == x3 or y1 == y2 == y3:\n        return '0'\n    k = (y2 - y1) * x3 - (x2 - x1) * y3\n    if k == 0:\n        return '0'\n    if k > 0:\n        if x1 == x2:\n            return f'{(x3 - x1) // k}'\n        if y1 == y2:\n            return f'{(y3 - y1) // k}'\n        return '-1'\n    return '-1'\n\n\"\"\"\n\n\nimport sys\n\ndef"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = (int(stdin) for stdin in stdin.split())\n    print(sum([min(abs(x_1 - x_2), abs(x_2 - x_3)), abs(x_1 - x_3)]))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = [int(x) for x in stdin.split()]\n    return str(min(abs(x1 - x2), abs(x1 - x3), abs(x2 - x3)))"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split(' '))\n    return x1 + x2 + x3 - max(x1, x2, x3) - min(x1, x2, x3)"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = [int(x) for x in stdin.split(' ')]\n    return (abs(x_2 - x_1) + abs(x_3 - x_1) + abs(x_3 - x_2)) / 2\n\"\"\"\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n1, n2, n3 = map(int, stdin.split())\n    n4 = (n1+n2+n3)//2\n    n5 = (n1+n2+n4)//2\n    n6 = (n1+n2+n5)//2\n    print(abs(n4-n3) + abs(n5-n4) + abs(n6-n5))\n    '''\n    '''\n    Input\n7 1 4\n\nOutput\n6\n\nInput\n30 20 10\n\nOutput\n20\n'''\n    n1, n2, n3 = map(int, stdin.split())\n    print((n1+n2+n3)//2)\n\nsolution(input())\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split())\n    if x1 == x2 == x3:\n        return 0\n    elif x1 == x2:\n        return abs(x3 - x1)\n    elif x1 == x3:\n        return abs(x2 - x1)\n    elif x2 == x3:\n        return abs(x1 - x2)\n    else:\n        return min(abs(x1 - x2), abs(x2 - x3), abs(x3 - x1))\n    \n\n\n'''\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum total distance the friends need to travel in order to meet together.\n    \"\"\"\n    pass\n    \n    x_1, x_2, x_3 = stdin.split(' ')\n    x_1, x_2, x_3 = int(x_1), int(x_2), int(x_3)\n    \n    dist_x = max(x_1, x_2, x_3) - min(x_1, x_2, x_3)\n    \n    dist_y = min(x_1, x_2, x_3)\n    \n    return dist_x + dist_y\n    "
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = map(int, stdin.split())\n    return str(abs(x1 - x3) + abs(y1 - y3) + abs(x2 - x3) + abs(y2 - y3))\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    x_indices = [i for i, a_i in enumerate(a) if a_i & x]\n    if len(x_indices) < 2:\n        return '-1'\n    else:\n        return len(x_indices) - len(set(x_indices))\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin:\n    :return:\n\n    >>> solution('''4 3\n   ... 1 2 3 7\n   ... ''')\n    1\n\n    >>> solution('''2 228\n   ... 1 1\n   ... ''')\n    0\n\n    >>> solution('''3 7\n   ... 1 2 3\n   ... ''')\n    -1\n\n    >>> solution('''3 7\n   ... 1 2 3\n   ... ''')\n    -1\n    '''\n    '''\n   ...\n    '''\n   ...\n\n    return ''\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(v) for v in stdin.split(' ')]\n    a = [int(v) for v in stdin.split(' ')]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] ^ a[j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if x == 1:\n        return n - 1\n    if x == max(arr):\n        return -1\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n        else:\n            return n - 2\n    return -1\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    _, x = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n\n    c = Counter(a)\n\n    if c[x] >= 2:\n        return 1\n\n    return -1"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n, x = a[0], a[1]\n    a = a[2:]\n    a.sort()\n    if a[0]!= a[1]:\n        return 1\n    elif a[0] == x:\n        return 0\n    elif a[0]!= x:\n        return -1\n    else:\n        return -1\n    return stdout"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the task.\"\"\"\n    n, x = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()]\n    # n, x = map(int, input().split())\n    # arr = list(map(int, input().split()))\n\n    numbers = set()\n    for a in arr:\n        if a in numbers:\n            return \"1\"\n        numbers.add(a)\n    return \"0\"\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the minimal number of operations to transform the array\n    into a pair of equal elements.'''\n    n, x = map(int, stdin.split(' '))\n    array = list(map(int, stdin.split(' ')))\n    dif = [abs(x - a) for a in array]\n    return str(dif.count(0) + 1) if 2 in dif else '-1'"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, x = int(input[0].split()[0]), int(input[0].split()[1])\n    numbers = [int(x) for x in input[1].split()]\n    if n == 2 and x == 1:\n        return \"0\"\n    if all([x == 1 for x in numbers]):\n        return \"1\"\n    if any([x!= 1 for x in numbers]):\n        return \"-\"\n    return \"2\"\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    res = 0\n    for i in range(len(a)):\n        if a[i] & x:\n            res += 1\n            a[i] = a[i] & x\n    if len(set(a)) == len(a):\n        return str(res)\n    else:\n        return -1\n\nprint(solution(stdin))"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = [int(x) for x in stdin.split(' ')]\n\n    for i in range(h):\n        if len(stdin.split('\\n')[i])!= w:\n            return 'NO'\n\n    if h % 2 == 1 or w % 2 == 1:\n        return 'NO'\n\n    for i in range(h):\n        for j in range(w):\n            if i == 0 or j == 0 or i == h - 1 or j == w - 1:\n                if stdin.split('\\n')[i][j]!= '*':\n                    return 'NO'\n            else:\n                if stdin.split('\\n')[i][j] == '*':\n                    continue\n                else:\n                    return 'NO'\n\n    return 'YES'\n\n\nsolution('4 5')\n\ndef"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(m * n * n)\n    Space: O(m * n)\n    \"\"\"\n    picture = []\n    for line in stdin.split('\\n'):\n        picture.append(list(line))\n    \n    rows = len(picture)\n    cols = len(picture[0])\n    \n    for row in range(1, rows - 1):\n        for col in range(1, cols - 1):\n            if picture[row][col] == \".\" and picture[row][col + 1] == \"*\" and picture[row + 1][col] == \"*\" and picture[row + 1][col + 1] == \".\":\n                return \"NO\"\n    \n    for row in range(1, rows - 1):\n        for col in range(1, cols - 1):\n            if picture[row][col] == \"*\" and picture[row + 1][col + 1] == \".\":\n                return \"NO\"\n    \n    for row in range(1, rows - 1):\n        for col in range(1, cols - 1):\n            if picture[row][col] == \"*\" and picture[row + 1][col] == \".\":\n                return \"NO\"\n    \n    for row in range(1, rows - 1):\n        for col in range(1, cols - 1):\n            if picture[row][col] == \".\" and picture[row + 1][col] == \"*\" and picture[row][col + 1] == \"*\" and picture[row + 1][col + 1] == \".\":\n                return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    w, h = [int(n) for n in stdin.split()]\n    picture = []\n    for _ in range(h):\n        picture.append(stdin.split()[1:])\n    \n    #0 is empty space, 1 is non-empty space\n    for i in range(h):\n        for j in range(w):\n            if picture[i][j] == '.':\n                picture[i][j] = 0\n            elif picture[i][j] == '*':\n                picture[i][j] = 1\n            else:\n                return \"ERROR\"\n    \n    print(picture)\n    if picture[0][0] == 1:\n        return \"YES\"\n    \n    print(picture)\n    if picture[0][-1] == 1:\n        return \"YES\"\n    \n    print(picture)\n    if picture[-1][0] == 1:\n        return \"YES\"\n    \n    print(picture)\n    if picture[-1][-1] == 1:\n        return \"YES\"\n    \n    #possible cases:\n    # a horizontal branch\n    # a vertical branch\n    for i in range(h):\n        if picture[i][0] == 1 and picture[i][-1] == 1:\n            return \"YES\"\n    \n    for j in range(w):\n        if picture[0][j] == 1 and picture[-1][j] == 1:\n            return \"YES\"\n    \n    # if no conditions are satisfied, return no\n    return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_corner_only(stdin):\n        for row in range(len(stdin)):\n            if '*' in stdin[row]:\n                return False\n        return True\n\n    def is_centered(stdin):\n        return '*' in stdin[len(stdin) // 2]\n\n    h, w = map(int, stdin.split())\n\n    stdin = [list(stdin) for i in range(h)]\n\n    if is_centered(stdin):\n        return 'YES'\n    elif is_corner_only(stdin):\n        return 'NO'\n\n    top_c = len(stdin) // 2\n    bottom_c = len(stdin) - top_c\n\n    right_c = len(stdin[0]) // 2\n    left_c = len(stdin[0]) - right_c\n\n    for row in range(len(stdin)):\n        for col in range(len(stdin[0])):\n            if stdin[top_c + row][right_c + col] == '*':\n                return 'YES'\n\n            if stdin[bottom_c + row][right_c + col] == '*':\n                return 'YES'\n\n            if stdin[bottom_c + row][left_c + col] == '*':\n                return 'YES'\n\n            if stdin[top_c + row][left_c + col] == '*':\n                return 'YES'\n\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 7\\n.*...*\\n***.***\\n.*...*\")\n    NO\n    >>> solution(\"5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n\")\n    NO\n    >>> solution(\"3 5\\n.*...\\n.*...\\n.*...\")\n    NO\n    >>> solution(\"5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...\")\n    YES\n    >>> solution(\"3 7\\n.*...*.\\n***.***\\n.*...*.\\n\")\n    NO\n    >>> solution(\"3 5\\n.*...\\n.*...\\n.*...\")\n    YES\n    >>> solution(\"5 6\\n....*..\\n....*..\\n******\\n....*..\\n....*..\")\n    YES\n    >>> solution(\"3 7\\n.*...*.\\n***.***\\n.*...*.\\n\")\n    NO\n    >>> solution(\"3 5\\n....*..\\n....*..\\n******\\n....*..\\n....*..\")\n    NO\n    >>> solution(\"5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n\")\n    YES\n    >>> solution(\"5 10\\n..........\\n..*.......\\n.*.******.\\n..*.......\\n..........\\n\")\n    YES\n    \"\"\"\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 5\\n....\\n****\\n.*..\\n.*..\\n')\n    'YES'\n    >>> solution('5 10\\n.....\\n..*..\\n.*...\\n****.\\n..*..\\n..*..\\n')\n    'NO'\n    >>> solution('5 6\\n..*..\\n.****.\\n..*..\\n..*..\\n')\n    'YES'\n    >>> solution('3 7\\n.*...\\n.*...\\n.*...\\n')\n    'NO'\n    >>> solution('5 10\\n...*..\\n..****\\n.*.***\\n.*...*\\n.*..**\\n.*.**.\\n.*...*.\\n')\n    'NO'\n    >>> solution('5 10\\n.****.\\n.*.***\\n.*...*\\n.*..**\\n.*.**.\\n.*...*.\\n')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    dim = [int(x) for x in stdin.split(' ')]\n    w = dim[0]\n    h = dim[1]\n    pic = stdin.split('\\n')\n    pic = [x for x in pic if x!= '']\n    if w == 0 or h == 0:\n        return 'NO'\n    if len(pic) == h:\n        pic = [pic[i][:w] for i in range(h)]\n    else:\n        return 'NO'\n    x = 0\n    y = 0\n    flag = 0\n    for i in range(h):\n        for j in range(w):\n            if pic[i][j] == '.':\n                continue\n            if flag == 0:\n                flag = 1\n                x = j\n                y = i\n            if i == y and j == x:\n                continue\n            if i!= y or j!= x:\n                return 'NO'\n            if x < j:\n                for i in range(w - x - 1):\n                    if pic[i][j + x + 1]!= '.':\n                        return 'NO'\n                x = j\n            elif x > j:\n                for i in range(w - x - 1):\n                    if pic[i][j + x - 1]!= '.':\n                        return 'NO'\n                x = j\n            if y < i:\n                for j in range(w - x - 1):\n                    if pic[i + y + 1][j + x]!= '.':\n                        return 'NO'\n                y = i\n            elif y > i:\n                for j in range(w - x - 1):\n                    if pic[i + y - 1][j + x]!= '.':\n                        return 'NO'\n                y = i\n    if flag == 0:\n        return 'NO'\n    return 'YES'\n\nprint(solution('3 7\\n.**..\\n****\\n.**.'))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function finds the number of connected components in the graph, and\n    the number of the components in the complement of the graph. Then, the function\n    finds the adjacency matrix of the graph that satisfies the conditions, and then\n    outputs the matrix.\n    \n    Arguments:\n        stdin {str} -- input string\n    \n    Returns:\n        str -- output string\n    \"\"\"\n    \n    n, a, b = (int(x) for x in stdin.split())\n    \n    # check if input arguments are correct\n    if n < 1 or n > 1000:\n        return \"NO\"\n    if a < 1 or a > n or a > b:\n        return \"NO\"\n    if b < 1 or b > n or b > a:\n        return \"NO\"\n    \n    # adjacency matrix of the graph\n    graph = [[0 for j in range(n)] for i in range(n)]\n    # set of vertices that are connected\n    connected = set()\n    # set of vertices that are connected in the complement\n    complement = set()\n    # amount of components in the graph\n    n_components = 0\n    # amount of components in the complement\n    n_complement_components = 0\n    \n    # if it is a graph with n vertices\n    if n == a:\n        for i in range(n):\n            for j in range(n):\n                graph[i][j] = 1\n                complement.add((i + 1, j + 1))\n                complement.add((j + 1, i + 1))\n        n_components = a\n        n_complement_components = b\n    \n    # if it is a graph with n vertices\n    if n == b:\n        for i in range(n):\n            for j in range(n):\n                graph[i][j] = 1\n                connected.add((i + 1, j + 1))\n                connected.add((j + 1, i + 1))\n        n_components = b\n        n_complement_components = a\n    \n    # if it is a graph with n vertices\n    if n > a and n > b:\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    graph[i][j] = 1\n                    complement.add((i + 1, j + 1))\n                    complement.add((j + 1, i + 1))\n                if j in connected:\n                    graph[i][j] = 1\n                    connected.add((i + 1, j + 1))\n                    connected.add((j + 1, i + 1))\n        n_components = a\n        n_complement_components = b\n    \n    # if it is a graph with n vertices\n    if n > b and n > a:\n        for i in range(n):\n            for j in range(n):\n                if j in complement:\n                    graph[i][j] = 1\n                    complement.add((i + 1, j + 1))\n                    complement.add((j + 1, i + 1))\n        n_components = b\n        n_complement_components = a\n    \n    # if it is a graph with n vertices\n    if n > a and n == b:\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    graph[i][j] = 1\n                    complement.add((i + 1, j + 1))\n                    complement.add((j + 1, i + 1))\n                if j in connected:\n                    graph[i][j] = 1\n                    connected.add((i + 1, j + 1))\n                    connected.add((j + 1, i + 1))\n        n_components = a\n        n_complement_components = b\n    \n    # if it is a graph with n vertices\n    if n > b and n == a:\n        for i in range(n):\n            for j in range(n):\n                if j in connected:\n                    graph[i][j] = 1\n                    connected.add((i + 1, j + 1))\n                    connected.add((j + 1, i + 1))\n        n_components = b\n        n_complement_components = a\n    \n    # if it is a graph with n vertices\n    if n == a and n == b:\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    graph[i][j] = 1\n                    complement.add((i + 1, j + 1))\n                    complement.add((j + 1, i + 1))\n                if j in connected:\n                    graph[i][j] = 1\n                    connected.add((i + 1, j + 1))\n                    connected.add((j + 1, i + 1))\n        n_components = n\n        n_complement_components = n\n    \n    # if it is a graph with n vertices\n    if n > a and n > b and n > a + b:\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    graph[i][j] = 1\n                    complement.add((i + 1, j + 1))\n                    complement.add((j + 1, i + 1))\n                if j in connected:\n                    graph[i][j] = 1\n                    connected.add((i + 1, j + 1))\n                    connected.add((j + 1, i + 1))\n        n_components = a\n        n_complement_components = b\n    \n    # if it is a graph with n vertices\n    if n > a and n > b and n == a + b:\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    graph[i][j] = 1\n                    complement.add((i + 1, j + 1))\n                    complement.add((j + 1, i + 1))\n                if j in connected:\n                    graph[i][j] = 1\n                    connected.add((i + 1, j + 1"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Creates a graph of n vertexes using input n, a and b.\n    Checks if this graph has n connected components and has at least a\n    required number of connectivity components in it's complement.\n    Returns \"NO\" if not. If yes, returns the adjacency matrix.\n    \"\"\"\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    if a > n or b > n:\n        return \"NO\"\n\n    graph = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if i!= j:\n                graph[i][j] = 1\n                graph[j][i] = 1\n\n    # checking graph for components\n    # and complement graph for connectivity\n    graph_connected = False\n    complement_connected = False\n    component_counter = 0\n    complement_component_counter = 0\n    complement_component_counter_aux = 0\n    for i in range(n):\n        component_counter = 0\n        for j in range(n):\n            if graph[i][j] == 1:\n                component_counter += 1\n                if component_counter == a:\n                    graph_connected = True\n                    complement_component_counter_aux = 0\n                    break\n            else:\n                component_counter = 0\n        if component_counter < a:\n            return \"NO\"\n        complement_component_counter += component_counter\n        if complement_component_counter == b:\n            complement_connected = True\n        else:\n            complement_component_counter = 0\n    if not graph_connected:\n        return \"NO\"\n\n    # complement_component_counter_aux = 0\n    # for i in range(n):\n    #     for j in range(n):\n    #         if graph[i][j] == 1:\n    #             if i!= j:\n    #                 complement_component_counter_aux += 1\n    #                 if complement_component_counter_aux == a:\n    #                     complement_connected = True\n    #                     break\n    #             else:\n    #                 complement_component_counter_aux = 0\n    #     if complement_component_counter_aux == b:\n    #         complement_connected = True\n    #     else:\n    #         complement_component_counter_aux = 0\n\n    if not complement_connected:\n        return \"NO\"\n\n    # if both components are connected, and complement is connected\n    # return adjacency matrix\n    return \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n ** 2) / O(n ** 2)\"\"\"\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    if n == 1:\n        return 'NO'\n    A = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(a):\n        i, j = [int(x) for x in input().split(' ')]\n        A[i - 1][j - 1] = 1\n        A[j - 1][i - 1] = 1\n    for _ in range(b):\n        i, j = [int(x) for x in input().split(' ')]\n        A[i - 1][j - 1] = 0\n        A[j - 1][i - 1] = 0\n    return 'YES' if is_graph(A) else 'NO'\n\n\ndef"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if there are two adjacency matrices for the given conditions.\"\"\"\n    n, a, b = map(int, stdin.split())\n    if a > n:\n        return \"NO\"\n\n    graph = []\n    for _ in range(n):\n        graph.append(list(map(int, stdin.split())))\n\n    return \"YES\" if are_valid_matrices(graph, n, a, b) else \"NO\"\n\n\ndef"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    'REQUIRED NUMBER OF CONNECTIVITY COMPONENTS IN THE GRAPH, AND THE NUMBER OF COMPONENTS IN THE COMPLMENT'\n    _ = stdin.readline()\n    'READ NUMBER OF VERTEXES OF THE GRAPH'\n    n = int(stdin.readline())\n    'READ REQUIRED NUMBER OF CONNECTIVITY COMPONENTS IN THE GRAPH'\n    a = int(stdin.readline())\n    'READ REQUIRED NUMBER OF CONNECTIVITY COMPONENTS IN THE COMPLMENT'\n    b = int(stdin.readline())\n    'CREATE LIST OF VERTEXES'\n    vertices = list(range(n))\n    'CREATE THE ADJACENCY MATRIX'\n    adj = [[0]*n]*n\n    'CREATE A DICTIONARY THAT WILL CONTAIN THE ADJACENCY LIST'\n    adjacency = {}\n    'CREATE A LIST OF ALL EDGES'\n    edges = []\n    for _ in range(n):\n        'READ EACH LINE OF THE INPUT'\n        line = stdin.readline().split()\n        'CREATE A LIST OF THE EDGES FROM EACH VERTEX'\n        edges.append([int(i) for i in line])\n        'CREATE A DICTIONARY THAT WILL CONTAIN THE ADJACENCY LIST'\n        adjacency[int(line[0])] = [int(line[1])]\n        adjacency[int(line[1])] = [int(line[0])]\n    'CREATE A LIST OF ALL EDGES'\n    edges = [[int(i) for i in line] for line in stdin.readlines()]\n    'CREATE A LIST OF THE MATRICES WITH THE REQUIRED NUMBER OF CONNECTIVITY COMPONENTS'\n    matrices = []\n    'CREATE A LIST OF THE COMPONENTS WITH THE REQUIRED NUMBER OF CONNECTIVITY COMPONENTS'\n    components = []\n    'ITERATE THROUGH EACH EDGE'\n    for edge in edges:\n        'CREATE A COPY OF THE MATRIX'\n        matrix = adj.copy()\n        'ITERATE THROUGH EACH VERTEX'\n        for vertex in edge:\n            'ADD THE EDGE TO THE ADJACENCY LIST FOR THE VERTEX'\n            matrix[vertex] = [i for i in range(n) if i!= vertex]\n            'ITERATE THROUGH THE ADJACENCY LIST FOR THE VERTEX'\n            for i in matrix[vertex]:\n                'ADD THE EDGE TO THE ADJACENCY LIST FOR THE VERTEX'\n                matrix[i] = [j for j in matrix[i] if j!= vertex]\n        'ITERATE THROUGH THE EDGES THAT CONNECT THE VERTEXES'\n        for vertex in edge:\n            'ITERATE THROUGH THE VERTEXES'\n            for i in vertices:\n                'IF THE VERTEX IS NOT EQUAL TO THE VERTEX'\n                if i!= vertex:\n                    'ITERATE THROUGH THE VERTEXES'\n                    for j in vertices:\n                        'IF THE VERTEX IS NOT EQUAL TO THE VERTEX'\n                        if j!= vertex:\n                            'ITERATE THROUGH THE EDGES'\n                            for edge in edges:\n                                'IF THE EDGE CONNECT THE VERTEXES'\n                                if edge.count(vertex) == 1 and edge.count(i) == 1 and edge.count(j) == 1:\n                                    'ADD THE EDGE TO THE ADJACENCY LIST'\n                                    matrix[vertex] = [i for i in matrix[vertex] if i!= i]\n                                    matrix[i] = [j for j in matrix[i] if j!= i]\n                                    matrix[j] = [vertex for vertex in matrix[j] if vertex!= j]\n        'ITERATE THROUGH THE ADJACENCY LIST FOR THE VERTEX'\n        for vertex in vertices:\n            'IF THE VERTEX HAS NO EDGES'\n            if len(matrix[vertex]) == 0:\n                'ITERATE THROUGH THE EDGES'\n                for edge in edges:\n                    'IF THE EDGE CONNECT THE VERTEXES'\n                    if edge.count(vertex) == 1:\n                        'ADD THE EDGE TO THE ADJACENCY LIST'\n                        matrix[vertex] = [i for i in matrix[vertex] if i!= i]\n                        matrix[i] = [j for j in matrix[i] if j!= i]\n                        matrix[j] = [vertex for vertex in matrix[j] if vertex!= j]\n        'CHECK IF THE ADJACENCY MATRIX IS CONNECTED'\n        if matrix[0].count(0) == len(matrix[0]):\n            'ADD THE MATRIX TO THE LIST OF MATRICES'\n            matrices.append(matrix)\n            'ADD THE COMPONENT TO THE LIST OF COMPONENTS'\n            components.append([int(i) for i in range(n)])\n    'CREATE A SET OF ALL THE COMPONENTS'\n    components = set(tuple(component) for component in components)\n    'ITERATE THROUGH THE MATRICES'\n    for matrix in matrices:\n        'ITERATE THROUGH THE EDGES'\n        for edge in edges:\n            'ITERATE THROUGH THE EDGES'\n            for edge2 in edges:\n                'IF THE EDGES ARE NOT THE SAME'\n                if edge!= edge2:\n                    'ITERATE THROUGH THE VERTEXES'\n                    for vertex in edge:\n                        'ITERATE THROUGH THE VERTEXES'\n                        for vertex2 in edge2:\n                            'IF THE VERTEXES ARE NOT THE SAME'\n                            if vertex!= vertex2:\n                                'ITERATE THROUGH THE EDGES'\n                                for edge3 in edges:\n                                    'IF THE EDGES ARE NOT THE SAME'\n                                    if edge3!= edge and edge3!= edge2:\n                               "
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n    if a * b >= n * (n - 1) / 2:\n        print('NO')\n        return\n    G = [[0 for _ in range(n)] for _ in range(n)]\n    A = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        G[i][i] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            G[i][j] = G[j][i] = 1\n    for _ in range(a):\n        i = 0\n        while i < n and G[i][i] == 0:\n            i += 1\n        if i == n:\n            print('NO')\n            return\n        for j in range(i + 1, n):\n            if G[i][j] == 0:\n                A[i][j] = 1\n                A[j][i] = 1\n    for _ in range(b):\n        i = 0\n        while i < n and G[i][i] == 0:\n            i += 1\n        if i == n:\n            print('NO')\n            return\n        for j in range(n):\n            if A[i][j] == 1:\n                G[i][j] = 0\n    print('YES')\n    for i in range(n):\n        print(''.join(map(str, G[i])))\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) / O(n * n)\"\"\"\n    n, a, b = map(int, stdin.split())\n    if n < a or n < b or a > b:\n        return \"NO\"\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(n - 1):\n        x, y = map(int, stdin.split())\n        matrix[x - 1][y - 1] = 1\n        matrix[y - 1][x - 1] = 1\n    def is_adjacent(i, j):\n        if i == j:\n            return False\n        if matrix[i][j] == 1:\n            return True\n        return False\n    for i in range(n):\n        for j in range(n):\n            if is_adjacent(i, j):\n                matrix[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                matrix[i][j] = 1\n    def is_connected(i, j):\n        queue = [(i, 0)]\n        visited = {i}\n        while queue:\n            x, num = queue.pop(0)\n            if x == j:\n                return num\n            for x2 in range(n):\n                if x == x2 or (x2, x) == i:\n                    continue\n                if matrix[x][x2] == 1 and (x2, x) not in visited:\n                    queue.append((x2, num + 1))\n                    visited.add((x2, x))\n        return None\n    components = {}\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                result = is_connected(i, j)\n                if result is None:\n                    return \"NO\"\n                components[(i, j)] = result\n    def is_valid_matrix():\n        for i in range(n):\n            for j in range(i):\n                if components[(i, j)] > b:\n                    return False\n                if components[(i, j)] > a and components[(j, i)] > a:\n                    return False\n        return True\n    if is_valid_matrix():\n        print(\"YES\")\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    print(components[(i, j)], end=\"\")\n            print()\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if n == a == b:\n        return \"YES\"\n    if n < a:\n        return \"NO\"\n    if n == a + b:\n        return \"NO\"\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(0 if i == j else 0)\n        matrix.append(row)\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                continue\n            if a == 0:\n                matrix[i][j] = 1\n            elif a == 1:\n                matrix[i][j] = matrix[i][j] or matrix[i][j - 1]\n            elif a == 2:\n                matrix[i][j] = matrix[i][j] or matrix[i - 1][j]\n                matrix[i][j] = matrix[i][j] or matrix[j - 1][i]\n            else:\n                matrix[i][j] = matrix[i][j] or matrix[i][j - 1]\n                matrix[i][j] = matrix[i][j] or matrix[j - 1][i]\n                matrix[i][j] = matrix[i][j] or matrix[j - 1][i]\n    # for row in matrix:\n    #     print(' '.join(map(str, row)))\n    if a == 0:\n        return \"YES\"\n    elif a == 1:\n        for row in matrix:\n            for i in range(n):\n                if row[i] == 1:\n                    return \"YES\"\n    elif a == 2:\n        for i in range(n):\n            if any(matrix[i][j] for j in range(n)):\n                return \"YES\"\n    else:\n        for i in range(n):\n            if any(matrix[j][i] for j in range(n)):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YES\\n001\\n101\\n110\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = map(int, stdin.split())\n    k = k if k < n else n\n    numerator = c * m + d * k\n    denominator = m + k\n    return str(numerator // denominator)\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m = [int(s) for s in stdin.split(\"\\n\")]\n    k = int(input())\n    print(math.ceil(m / (n+k-1)) + math.ceil(d / (n+k-1)))\n    "
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    c, d, n, m = [int(x) for x in stdin.split(' ')]\n    k = int(stdin.split(' ')[2])\n    \n    return k * n - c * m\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"\"\ndef"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m = map(int, stdin.split())\n    k = int(stdin.split()[-1])\n    res = (n * m) - (c * d) + k\n    return res\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string to return based on input\"\"\"\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = [int(x) for x in stdin.split('\\n')]\n    return str(min(c * n + d * m, (c + d) * n * m // 2 + d * (n - k)))\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YXWVUTGHIJKLM\\nZABCDEFSRQPON'\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for i in range(0, len(stdin), 26):\n        current_path = [stdin[i]]\n        for j in range(i + 1, i + 26):\n            if len(set(stdin[i:j]) & set(current_path)) == 0:\n                current_path = current_path + [stdin[j]]\n                if j == i + 25:\n                    result.append(''.join(current_path))\n    if result == []:\n        return 'Impossible'\n    return '\\n'.join(result)\nprint(solution(stdin))\n\n-----Challenge-----\n\nCan you solve this problem in O(1) space complexity?\n\"\"\"\n\nfrom math import factorial\n\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    board = [\"\"] * 13\n    for i in range(len(stdin)):\n        if i % len(board) == 0:\n            board.append(stdin[i])\n        else:\n            board[i % len(board)] += stdin[i]\n    return solve(board)\n\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Create two grids: one to store the tiles of the grid, and one to store the adjacent tiles\n    tiles = Grid(stdin)\n    adjacent = Grid(stdin)\n\n    # Create a dictionary that stores the indexes of the grid for each tile\n    d = dict(zip(stdin, range(1, 27)))\n\n    # Create a list of all the tiles\n    tiles_list = list(d.keys())\n\n    # Create a list of all adjacent tiles\n    adj_tiles = []\n    for t1 in tiles_list:\n        for t2 in tiles_list:\n            if tiles.is_adjacent(t1, t2):\n                adj_tiles.append(t2)\n\n    # If the path is impossible, return impossible\n    if len(adj_tiles) < len(tiles_list):\n        return 'Impossible'\n\n    # Create a list to store the lists of paths for each tile\n    paths = []\n\n    # Loop through all tiles, and add each path to its list\n    for t in tiles_list:\n        paths.append(tiles.find_path(adjacent, t, d))\n\n    # Return the first path in the list\n    return ''.join([tiles_list[i] for i in paths[0]])\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    grid = [\n        [None for _ in range(13)]\n        for _ in range(2)\n    ]\n    for i in range(len(stdin)):\n        char = stdin[i]\n        row = int(i / 13)\n        col = i % 13\n        if i == 0:\n            grid[row][col] = char\n        else:\n            if (\n                grid[row][col - 1] is None\n                and grid[row][col + 1] is None\n                and grid[row - 1][col] is None\n                and grid[row + 1][col] is None\n            ):\n                grid[row][col - 1] = char\n            elif grid[row][col + 1] is None:\n                grid[row][col + 1] = char\n            elif grid[row - 1][col] is None:\n                grid[row - 1][col] = char\n            elif grid[row + 1][col] is None:\n                grid[row + 1][col] = char\n            else:\n                return \"Impossible\"\n    return \"\\n\".join(\n        \"\".join(letter for letter in row) for row in grid\n    )\n\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n    letters = list(stdin)\n    combinations = itertools.combinations(letters, len(letters) - 1)\n    # print(combinations)\n    for combination in combinations:\n        # print(combination)\n        if is_path(combination):\n            return \"\".join(combination)\n    return \"Impossible\"\n\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a solution as a grid of letters arranged in a sequence.\n    \"\"\"\n    # Build the grid of letters.\n    letters = [chr(i) for i in range(ord('A'), ord('Z') + 1)]\n    grid = [[None for _ in range(13)] for _ in range(2)]\n    for i, c in enumerate(stdin):\n        grid[i % 2][i // 13] = c\n    # Build the path that visits each letter in order.\n    path = list(stdin)\n    # Find the first letter in the path.\n    first = path[0]\n    # Find the first index of the first letter.\n    first_index = letters.index(first)\n    # Find the first tile in the first row.\n    first_tile = first_index // 13\n    # Find the first index of the first tile.\n    first_tile_index = 13 * first_tile\n    # Find the first letter of the first tile.\n    first_tile_letter = letters[first_tile_index]\n    # Find the index of the tile immediately after the first tile.\n    next_tile_index = (first_index + 1) % len(path)\n    # Find the first tile immediately after the first tile.\n    next_tile_letter = path[next_tile_index]\n    # Find the first index of the first tile immediately after the first tile.\n    next_tile_index = letters.index(next_tile_letter)\n    # Find the index of the tile immediately before the second tile.\n    second_tile_index = (next_tile_index - 1) % len(path)\n    # Find the second tile immediately before the second tile.\n    second_tile_letter = path[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find the first index of the first tile immediately before the second tile.\n    second_tile_index = 13 * second_tile\n    # Find the first tile immediately before the second tile.\n    second_tile_letter = letters[second_tile_index]\n    # Find the first index of the second tile immediately before the second tile.\n    second_tile_index = letters.index(second_tile_letter)\n    # Find the first tile immediately before the second tile.\n    second_tile = second_tile_index // 13\n    # Find"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\" \", \"\").upper()\n    print(s)\n    for i in range(0, 26):\n        if len(s) < 26:\n            return \"Impossible\"\n        if s[i] == s[i + 26]:\n            return \"Impossible\"\n    return \"Impossible\"\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return '=' if x ** y == y ** x else '<' if x ** y < y ** x else '>'\n\n\ndef"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return '>' if x ** y < y ** x else '<' if x ** y > y ** x else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    if x ** y > y ** x:\n        return '>'\n    elif x ** y < y ** x:\n        return '<'\n    return '='\n    \n    \n\ndef"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(n) for n in stdin.split(\" \")]\n    return \"<\" if x ** y < y ** x else \">\" if x ** y > y ** x else \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    if x ** y < y ** x:\n        return '<'\n    elif x ** y > y ** x:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print('>' if a ** b < b ** a else '<' if a ** b > b ** a else '=' if a ** b == b ** a else '')\n    return ''\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split(' ')[0])\n    y = int(stdin.split(' ')[1])\n    if x ** y < y ** x:\n        return '<'\n    elif x ** y > y ** x:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(c) for c in stdin.split()]\n    if x ** y < y ** x:\n        return \"<\"\n    elif x ** y > y ** x:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string with correct answer.\"\"\"\n    x, y = [int(n) for n in stdin.split()]\n    return \">\" if x**y < y**x else \"<\" if x**y > y**x else \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    return '=' if x ** y == y ** x else '>' if x ** y > y ** x else '<'\n\n\ndef"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return str(int(r * h / 2))\n    \n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.strip().split())\n    return r * (r - 1) // 2 + (h - r) * (h - r)"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    print(n*m//2)\nsolution(input())\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, h = [int(x) for x in stdin.split()]\n    if r == 1:\n        return 1\n    return max((r + h) - ((r + h) % 2), (r + h) - (2 * r - (r + h) % 2))"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, h = [int(i) for i in stdin.strip().split(' ')]\n    if r == h:\n        return 3\n    else:\n        return r//2 + h - r//2\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    # max(r, h) * max(r, h)\n    return 2 * (r ** 2 + h ** 2) ** 0.5"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    r, h = [int(x) for x in stdin.split()]\n    s = r * (2 * h)**0.5\n    print(int(s) + 1)\n\nsolution(input())\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return 2*r + (h-r)//2"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, h = [int(x) for x in stdin.split()]\n    return str(r * h)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a str that represents the solution.\"\"\"\n    t = [int(c) for c in stdin.split()]\n    n = len(t)\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if t[i] == t[j] == t[k]:\n                    res = max(res, t[i] + t[j] + t[k])\n                elif t[i] == t[j] or t[j] == t[k] or t[i] == t[k]:\n                    res = max(res, t[i] + t[j] + t[k])\n    return str(res)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split(\" \")\n    cards = []\n    for item in input_str:\n        cards.append(int(item))\n\n    cards.sort()\n\n    count_dict = {}\n\n    for i in range(0, len(cards)):\n        item = cards[i]\n        if item in count_dict:\n            count_dict[item] = count_dict[item] + 1\n        else:\n            count_dict[item] = 1\n\n    for i in range(0, len(cards)):\n        item = cards[i]\n        if count_dict[item] == 1:\n            cards.pop(i)\n            break\n        elif count_dict[item] == 2:\n            cards.pop(i)\n            cards.pop(i)\n            break\n        elif count_dict[item] == 3:\n            cards.pop(i)\n            cards.pop(i)\n            cards.pop(i)\n            break\n\n    sum = 0\n    for item in cards:\n        sum += item\n\n    return sum\n\n\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = [int(x) for x in stdin.split()]\n    A = set([a, b, c, d, e])\n    if len(A) == 5:\n        return 0\n    elif len(A) == 4:\n        if a == b == c:\n            return 10 + d + e\n        elif a == b == e:\n            return 10 + c + d\n        elif a == c == e:\n            return 10 + b + d\n        elif b == c == d:\n            return 10 + a + e\n        elif a == c == d:\n            return 10 + b + e\n        elif b == d == e:\n            return 10 + a + c\n        elif a == d == e:\n            return 10 + b + c\n        else:\n            return max(a, b, c) + d + e\n    elif len(A) == 3:\n        if a == b == c:\n            return 20 + d + e\n        elif a == b == e:\n            return 20 + c + d\n        elif a == c == e:\n            return 20 + b + d\n        elif b == c == d:\n            return 20 + a + e\n        elif a == c == d:\n            return 20 + b + e\n        elif b == d == e:\n            return 20 + a + c\n        else:\n            return max(a, b, c) + d + e\n    elif len(A) == 2:\n        return max(a, b, c, d, e) + 20\n    elif len(A) == 1:\n        return 10 + 20\n    else:\n        return 10 + 20\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = list(map(int, stdin.split()))\n    \n    t = sorted(t)\n    \n    ans = sum(t)\n    \n    for i in range(len(t) - 1):\n        if t[i] == t[i + 1]:\n            ans -= t[i] * 2\n            if t[i] == t[i + 2]:\n                ans -= t[i]\n                ans -= t[i + 1]\n                ans -= t[i + 2]\n                return str(ans)\n    return str(ans)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = sum(a)\n    return str(b - min(b, max(a) * 2, max(a) * 3))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 'Not yet implemented'\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    calculate min distance to finish competition\n    input:\n    string number of checkpoints and Vasya's starting position\n    string checkpoints coordinates\n    output:\n    int min distance\n    '''\n    points = [int(i) for i in stdin.split('\\n')[0].split()]\n    checkpoints = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    if len(checkpoints)!= len(set(checkpoints)):\n        return str(max(checkpoints))\n    checkpoints.sort()\n    \n    if checkpoints[-1] - checkpoints[0] <= max(points[1:]):\n        return str(max(checkpoints[1:]))\n    else:\n        return str(max(checkpoints))"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    calculates the minimum distance Vasya has to travel in order to\n    visit at least n - 1 checkpoints.\n    :param stdin: input from stdin\n    :return: solution string\n    '''\n    # get data\n    n, a = list(map(int, stdin.split()))\n    xs = list(map(int, stdin.split()))\n    # set default parameters\n    s = 0\n    e = max(xs) - min(xs)\n    # iterate through possible values of s\n    while e > 0:\n        # calculate distance from s to a\n        d = 0\n        for i in range(n):\n            d += abs(a - xs[i])\n        # if d < e, update s and e\n        if d < e:\n            s = s + 1\n            e = e - 1\n        # if d >= e, update s\n        else:\n            s = s + 1\n            break\n    return str(s)\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, a = map(int, stdin.split())\n    _, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return str(abs(b-a))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return''"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin.readline()\n    coordinates = stdin.split('\\n')[0].split(' ')\n    points = [int(i) for i in coordinates[1:]]\n    result = 0\n    # for i in range(1, len(points)):\n    #     result += points[i] - points[i-1]\n    result = max(points) - min(points)\n    print(result)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    checkpoints_num = int(stdin[0].split(\" \")[0])\n    checkpoints_positions = [int(x) for x in stdin[0].split(\" \")[1].split(\" \")]\n    # count checkpoints num\n    checkpoints_count = 0\n    for x in checkpoints_positions:\n        if x > 0:\n            checkpoints_count += 1\n    # walk to the last checkpoint and calculate distance to the end\n    if checkpoints_count >= checkpoints_num:\n        total_distance = 0\n        current_position = checkpoints_positions[len(checkpoints_positions) - 1]\n        for x in checkpoints_positions:\n            if x > 0:\n                total_distance += abs(current_position - x)\n                current_position = x\n        # return distance to the end\n        return total_distance\n    else:\n        # walk to the last checkpoint and calculate distance to the end\n        return 0\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 9:\n        s = 0\n        for i in str(n):\n            s += int(i)\n        n = s\n    if n <= 9:\n        return n\n    else:\n        return -1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = n ** 2 + 1\n    if x % n == 0:\n        return str(-1)\n    return str(x)\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not use the %lld specifier to read or write 64-bit integers in C++.\n    # It is preferred to use std::cin, std::cout, or the %I64d specifier.\n    n = stdin\n    n = int(n)\n\n    s = 0\n\n    for i in str(n):\n        s += int(i)\n\n    for i in range(2, int(n**0.5) + 1):\n        if int(n) % i == 0:\n            if (i ** 2 - n) * (int(n) // i) == s:\n                return str(i)\n\n    return \"-1\"\n\n\n\n\ndef"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 10\n    p = 0\n    while n >= m:\n        n = n - m\n        p += 1\n        m *= 10\n    return str(p - n + 1)\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()[0]\n    n = int(line)\n    if n == 1:\n        return -1\n\n    def get_result(n: int) -> int:\n        power = 0\n        while n % 2 == 0:\n            n /= 2\n            power += 1\n\n        result = 0\n        for i in range(1, power + 1):\n            result += n % 10\n            n //= 10\n        return result\n\n    for i in range(1, n + 1):\n        if get_result(i) == i:\n            return i\n\n    return -1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = n\n    while x > 0:\n        s = 0\n        for i in range(len(str(x))):\n            s += int(str(x)[i])\n        if (s * x - n) % x == 0:\n            break\n        x -= 1\n    return x if x > 0 else -1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    while True:\n        if (x ** 2 + sum(int(c) for c in str(x)) * x - n) == 0:\n            return x\n        else:\n            x += 1"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    root = n ** 0.5\n\n    if root % 1 == 0:\n        print(-1)\n        return\n\n    # s(n) = sum of digits of n\n    s = [sum(int(c) for c in str(n))]\n\n    for _ in range(1, 1001):\n        if s[-1] % 10 == 0:\n            n += 1\n            root = n ** 0.5\n\n            if root % 1 == 0:\n                print(-1)\n                return\n\n            s.append(sum(int(c) for c in str(n)))\n        else:\n            s.append(s[-1] + s[-1] // 10)\n\n    return str(int(root))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = stdin.replace(\"\\n\", \"\")\n    n = int(stdin)\n    if n < 2:\n        return -1\n    if n == 2:\n        return 1\n    # n - \u043d\u0430\u0448 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d, \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u044f\n    # \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0434\u0430\u043b\u0435\u0435 \u043a\u0430\u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u0447\u0438\u0441\u0435\u043b\n    # \u043e\u0442 0 \u0434\u043e n\n    # \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u0438 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435\n    # \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440\n    # \u0435\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u0447\u0438\u0441\u0435\u043b \u0434\u043e n \u0431\u0443\u0434\u0435\u0442\n    # 1 + 2 + 3 + 4 +... + n\n    # \u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0434\u043b\u044f n = 10 \u043f\u0435\u0440\u0432\u044b\u043c \u0441\u0442\u0435\u043f\u0435\u043d\u044c\u044e \u043e\u0442 0 \u0434\u043e 10 \u0431\u0443\u0434\u0435\u0442 \u0447\u0438\u0441\u043b\u043e 10\n    # \u0442\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u043e\u0432\n    # {\n    #    10: 10,\n    #    9: 1,\n    #    8: 1,\n    #    7: 2,\n    #    6: 2,\n    #    5: 3,\n    #    4: 3,\n    #    3: 4,\n    #    2: 4,\n    #    1: 5,\n    #    0: 5\n    # }\n    # \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432 \u0438\u0442\u043e\u0433\u0435 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0441\u0430\u043c\u0443 \u0441\u0443\u043c\u043c\u0443, \u043a\u0430\u043a \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0434\u0435\u043b\u0430\u043b\u0438 \u0434\u043e \u044d\u0442\u043e\u0433\u043e\n    # \u0438 \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0439 \u0447\u0438\u0441\u043b\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u043c, \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0440\u0430\u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438 \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 0 \u0438 n\n    # \u0438 \u0443\u0436\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u0438\u0445 \u0441\u0443\u043c\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\n    # \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0447\u0438\u0441\u0435\u043b 0 \u0438 n\n    # \u043d\u043e \u0441 \u043a\u0430\u0436\u0434\u044b\u043c \u0448\u0430\u0433\u043e\u043c \u044d\u0442\u043e\u0442 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0440\u0430\u0441\u0442\u0435\u0442 \u0432\u0434\u0432\u043e\u0435 \u043d\u0430 \u0434\u0432\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0443\u0436\u043d\u043e \u0448\u0430\u0433\u043e\u0432 \u0434\u043e n\n    # \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0430\u043a\n    # n = 10\n    # 10 - 1 = 9, 9 - 1 = 8, 8 - 1 = 7, 7 - 1 = 6, 6 - 1 = 5, 5 - 1 = 4, 4 - 1 = 3, 3 - 1 = 2, 2 - 1 = 1, 1 = 0\n    # \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u0448\u0430\u0433\u043e\u0432 \u0434\u043e \u043d\u0443\u043b\u044f\n    # \u0438 \u0441\u0440\u0430\u0437\u0443 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0441\u043e \u0432\u0442\u043e\u0440\u044b\u043c \u043f\u043e \u043f\u044f\u0442\u044b\u0439 \u0438 \u0442.\u0434. \u0438 \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u043b\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f\n    # \u0438\u043b\u0438 \u0434\u043e \u043d\u0443\u043b\u044f, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0435\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u0430 1 \u0434\u043e \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\n    # \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0434\u043e \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430\u043c \u043f\u043e\u043a\u0430 \u0441\u0443\u043c\u043c\u0430 \u043d\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435\u0442 \u043d\u0443\u043b\u044f\n    # \u0442.\u043a. \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0441 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430\n    # \u0430 \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0440\u0430\u0437\u0431\u0438\u0442 \u043d\u0430 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n    # \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u043e n \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u043e\u0442 0 \u0434\u043e n, \u0438\u043b\u0438 \u0441\u0440\u0430\u0437\u0443 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u0447\u0438\u0441\u043b\u0430\n    # \u0435\u0441\u043b\u0438 \u0434\u0435\u043b\u0438\u0442\u0441\u044f, \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0440\u0430\u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438, \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f \u0432\u0434\u0432\u043e\u0435"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(' ')[0]\n    t = stdin.split(' ')[1]\n    \n    h, m = int(s.split(':')[0]), int(s.split(':')[1])\n    \n    h1, m1 = int(t.split(':')[0]), int(t.split(':')[1])\n    \n    p = (h1 - h) * 60 + m1 - m\n    \n    if p < 0:\n        p = 24 * 60 - abs(p)\n    \n    if p >= 0:\n        h, m = (p // 60) % 24, p % 60\n    \n    return f\"{h:0>2d}:{m:0>2d}\"\n\nprint(solution(input()))"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    s = stdin[0]\n    t = stdin[1]\n    return (t.split(\":\"))"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # input: \"05:50\"\n    # output: \"00:06\"\n\n    # input: \"00:00\"\n    # output: \"23:59\"\n\n    # input: \"00:01\"\n    # output: \"23:59\"\n\n    # input: \"00:01\"\n    # output: \"23:59\"\n\n    hour, minute = stdin.split(\":\")\n    if int(minute) < 6:\n        hour, minute = str(int(hour)-1), \"60\"\n    else:\n        hour, minute = str(int(hour)), str(int(minute)-6)\n    return \":\".join([hour, minute])\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function returns the time of day, when George slept.\n\n    >>> solution('05:50')\n    '00:06'\n    >>> solution('05:44')\n    '00:06'\n    >>> solution('00:00')\n    '23:00'\n    >>> solution('00:01')\n    '23:00'\n    >>> solution('00:01')\n    '23:00'\n    \"\"\"\n    current_time = stdin\n    sleep_time = stdin\n    if sleep_time[0:2] == \"00\":\n        return \"00:00\"\n    elif int(sleep_time[0:2]) == 0:\n        return \"23:00\"\n    else:\n        return \"0\" + sleep_time[0:2] + \":\" + sleep_time[2:]\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(':')\n    s[0] = int(s[0])\n    s[1] = int(s[1])\n    t = stdin.split(':')\n    t[0] = int(t[0])\n    t[1] = int(t[1])\n    if s[1] + t[1] == 60:\n        s[1] = 0\n        s[0] += 1\n        if s[0] == 24:\n            s[0] = 0\n    else:\n        s[1] += t[1]\n    \n    if s[0] == 24:\n        s[0] = 0\n    \n    return '{:02d}:{:02d}'.format(s[0], s[1])\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    h_1 = int(stdin[0].split(':')[0])\n    m_1 = int(stdin[0].split(':')[1])\n    h_2 = int(stdin[1].split(':')[0])\n    m_2 = int(stdin[1].split(':')[1])\n    if m_2 < m_1:\n        h_1 += 1\n        m_1 = m_2\n    h_1 = h_1 % 24\n    h_2 = h_2 % 24\n    h = h_2 - h_1\n    if h < 0:\n        h = h + 24\n    m = m_2 - m_1\n    if m < 0:\n        m = m + 60\n        h = h - 1\n    m = m % 60\n    if m == 0:\n        m = \"00\"\n    if m < 10:\n        m = \"0\" + str(m)\n    return str(h) + \":\" + str(m)\n    \n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return stdin[:2] + stdin[3:]\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(x) for x in stdin.split(\":\")]\n    h2, m2 = [int(x) for x in input().split(\":\")]\n    return str(h1 + (h2 - h1) % 24) + \":\" + str(m1 + (m2 - m1) % 60)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    ans = 0\n    cur_mean = 0\n    for i, x in enumerate(a):\n        cur_mean += x\n        if i - cur_mean + 1 > ans:\n            ans = i - cur_mean + 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_subsegment(array: list) -> int:\n        \"\"\"Find the subsegment with the largest arithmetic mean.\n\n        :param array: An array of numbers.\n        :return: The length of the subsegment with the largest arithmetic mean.\n        \"\"\"\n        max_arithmetic_mean = 0\n        max_subsegment_length = 0\n\n        for i in range(len(array)):\n            if i + 1 < len(array):\n                length = 1\n                current_sum = array[i]\n\n                for j in range(i + 1, len(array)):\n                    if current_sum + array[j] >= 0:\n                        current_sum += array[j]\n                        length += 1\n                    else:\n                        break\n\n                if length > max_subsegment_length:\n                    max_subsegment_length = length\n                    max_arithmetic_mean = current_sum / length\n\n        return max_subsegment_length\n\n    return find_subsegment(list(map(int, stdin.split())))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max([list(g) for n, g in itertools.groupby(stdin) if n == '0'], key=len)))\n\"\"\"\n\nimport itertools\n\n\ndef"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\narr_len = int(stdin.readline())\narr = [int(x) for x in stdin.readline().split()]\ndp = [0 for _ in range(arr_len)]\n\nfor i in range(arr_len):\n    dp[i] = arr[i]\n\nfor i in range(1, arr_len):\n    for j in range(i):\n        dp[i] = max(dp[i], dp[j] + arr[i])\n\nprint(max(dp))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    ans = 0\n    for i in range(n):\n        cur = 0\n        for j in range(i, n):\n            cur += a[j]\n            if cur / (j - i + 1) > ans:\n                ans = cur / (j - i + 1)\n    return ans\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\ns = 0\nmin_ = max_ = 0\nfor i in range(n):\n    s += arr[i]\n    if arr[i] < min_:\n        min_ = arr[i]\n    if arr[i] > max_:\n        max_ = arr[i]\n\ns -= min_\ns -= max_\nprint(max(0, s))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return n * (m ** k) % 1000000\n\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def func():\n        n, m, k = map(int, stdin.split())\n        return n - k\n\n    return str(func())"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = [int(x) for x in stdin.split(' ')]\n  return str(factorial(n) // (factorial(m) * factorial(n - m)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nn,m,k = [int(x) for x in stdin.strip().split(' ')]\nbricks = [int(x) for x in stdin.strip().split(' ')]\n\nprint(len({''.join(x) for x in product('0123456', repeat=n) if sum(int(x[i]) for i in range(n))!= k}))\n\n'''"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin.strip().split(\"\\n\"))"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YOUR_CODE'\n\"\"\"\n\nimport sys\nimport os\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return b + (c * b * (a - 1) // 2)"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(bricks: list, color: int, left: int, visited: set, current_num_of_colorings: int, all_colorings: list):\n        if left == 0:\n            all_colorings.append(current_num_of_colorings)\n            return\n        for i in range(len(bricks)):\n            if i not in visited:\n                if color == 0:\n                    dfs(bricks, color, left - 1, visited | {i}, current_num_of_colorings + 1, all_colorings)\n                else:\n                    dfs(bricks, color - 1, left - 1, visited | {i}, current_num_of_colorings + 1, all_colorings)\n\n    bricks = [int(i) for i in stdin.split()]\n    left = bricks[2]\n    bricks = bricks[:2] + [0] + bricks[3:]\n    all_colorings = list()\n    dfs(bricks, len(bricks) - 1, left, set(), 0, all_colorings)\n    return str(sum(all_colorings))\n\n\n\nsolution(\"3 3 0\")\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin\n    \n    while len(s) > 1:\n        if s == s[::-1]:\n            return \"YES\"\n        s = str(int(s) + int(s[::-1]))\n    return \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len([1 for i in stdin if stdin.count(i) > 1]) else \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) == 141414 else 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return \"YES\" if '1' in str(n) or '14' in str(n) or '144' in str(n) else \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    for i in range(len(number)):\n        if (number[i] == '1' and number[i + 1] == '4') or (number[i] == '4' and number[i + 1] == '1'):\n            number = number[:i] + number[i + 2:]\n    return \"YES\" if len(number) == 0 else \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get number and return answer\"\"\"\n    number = int(stdin)\n    if number % 2!= 0 or number % 3!= 0 or number % 4!= 0 or number % 5!= 0 or number % 6!= 0 or number % 7!= 0 or number % 8!= 0 or number % 9!= 0 or number % 10!= 0:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"\"\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num_1 = int(str(num)[0])\n    num_2 = int(str(num)[1])\n    num_3 = int(str(num)[2])\n    return \"YES\" if (num_1 * num_1 * num_1 + num_2 * num_2 * num_2 + num_3 * num_3 * num_3) == num else \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    if len(num) < 3 or int(num) < 1:\n        return 'NO'\n    if len(num) % 2!= 0:\n        return 'NO'\n    if int(num[:3]) % 13 == 0:\n        if int(num[:4]) % 17 == 0:\n            if int(num[:5]) % 19 == 0:\n                if int(num[:6]) % 13 == 0:\n                    if int(num[:7]) % 11 == 0:\n                        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    \n    return \"Poor Inna and pony!\" if i == a or j == b else \"Poor Inna and pony!\" if i == 1 or j == 1 else \"Poor Inna and pony!\" if i == n or j == m else \"Poor Inna and pony!\" if i == 1 and j == m else \"Poor Inna and pony!\" if i == n and j == 1 else min(abs(i - a), abs(j - b)) + min(abs(i - a), abs(j + b)) + min(abs(i + a), abs(j - b)) + min(abs(i + a), abs(j + b))"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    dimensions = [int(x) for x in stdin.split()]\n    board = Board(*dimensions)\n    corners = [coordinate for coordinate in [(1, 1), (dimensions[0], 1), (dimensions[0], dimensions[1]), (1, dimensions[1])] if board.is_cell_empty(coordinate)]\n    return min(len(corners), len(board.moves_from_to(*corners[0])))\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = list(map(int, stdin.split(' ')))\n    if i == 1:\n        j += b\n    elif i == n:\n        j -= b\n    elif j == 1:\n        i += a\n    elif j == m:\n        i -= a\n    if i == 1 and j == m:\n        print('Poor Inna and pony!')\n        return None\n    print(abs(i - n) + abs(j - m))\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    board_size, knight_pos, target_pos, knight_actions = stdin.split(\" \")\n    board_size = [int(x) for x in board_size.split(\"x\")]\n    knight_pos = [int(x) for x in knight_pos.split(\",\")]\n    target_pos = [int(x) for x in target_pos.split(\",\")]\n    knight_actions = int(knight_actions)\n    return str(get_min_moves(board_size, knight_pos, target_pos, knight_actions))\n\ndef"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = [int(i) for i in stdin.split()]\n    moves = 0\n    while i + a <= n and j + b <= m:\n        i += a\n        j += b\n        moves += 1\n    if i!= n or j!= m:\n        moves = 'Poor Inna and pony!'\n    return moves"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    size, i, j, a, b = [int(x) for x in stdin.split()]\n    if max(i, j) > size or min(i, j) < 1:\n        return \"Poor Inna and pony!\"\n    return abs(i - a) + abs(j - b) - 1\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def move(x, y, action):\n        if action =='move':\n            return min(x, y) + 2\n        elif action == 'left':\n            return max(x, y) + 1\n        elif action == 'right':\n            return min(x, y)\n        elif action == 'up':\n            return max(x, y)\n        elif action == 'down':\n            return min(x, y)\n    n, m, i, j, a, b = map(int, stdin.split())\n    if i == 1 and j == m:\n        return move(i, j,'move') + move(i, j, 'left') + move(i, j, 'up')\n    elif i == n and j == 1:\n        return move(i, j,'move') + move(i, j, 'down') + move(i, j, 'right')\n    elif i == n and j == m:\n        return move(i, j,'move') + move(i, j, 'down') + move(i, j, 'left')\n    elif i == 1 and j == 1:\n        return move(i, j,'move') + move(i, j, 'up') + move(i, j, 'right')\n    else:\n        return \"Poor Inna and pony!\"\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    n: int = len(s)\n    maximum: int = 0\n\n    def is_ok(substr: str) -> bool:\n        return not (substr[0] <= substr[1] <= substr[2] <= substr[3])\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substr: str = s[i:j]\n            if is_ok(substr):\n                maximum = max(maximum, j - i)\n\n    return maximum\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    s = list(s)\n    ans = 0\n    while s!= []:\n        if len(s) == 1:\n            ans += 1\n            break\n        for i in range(len(s) - 1):\n            if not (letters.index(s[i]) < letters.index(s[i + 1])):\n                s.pop(i)\n                ans += 1\n                break\n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    lst = ['a'] * n\n    for i in range(n):\n        if lst[i] == 'a':\n            if i > 0 and s[i-1] == 'b' and s[i]!= 'b' and i < n-1 and s[i+1]!= 'a':\n                lst[i] = 'b'\n            elif i > 0 and s[i-1]!= 'a' and s[i] == 'b' and i < n-1 and s[i+1]!= 'b':\n                lst[i] = 'b'\n            elif i < n-1 and s[i] == 'a' and s[i+1]!= 'b':\n                lst[i] = 'b'\n            elif i > 0 and s[i-1] == 'b' and s[i]!= 'b':\n                lst[i] = 'b'\n            elif i < n-1 and s[i] == 'b' and s[i+1]!= 'b':\n                lst[i] = 'b'\n            elif i > 0 and s[i-1]!= 'a' and s[i] == 'b' and s[i+1] == 'b':\n                lst[i] = 'a'\n            elif i < n-1 and s[i] == 'b' and s[i+1] == 'b':\n                lst[i] = 'a'\n            elif s[i] == 'a':\n                lst[i] = 'a'\n            else:\n                lst[i] = 'a'\n\n    # \u0412\u0441\u0442\u0430\u0432\u043a\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043b\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0438\u0434\u0430.\n    lst.insert(0, '')\n\n    # \u0420\u0430\u0437\u0431\u0438\u0442\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0434\u0432\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0438\u0445 \u0441\u043b\u043e\u0432\u0430\u0440\u044c.\n    lst = [' '.join(lst[i:i+2]) for i in range(0, len(lst), 2)]\n    dict_operations = dict(zip(lst, range(len(lst))))\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435.\n    key_list = list(dict_operations.keys())\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430.\n    value_list = [value * dict_operations[key] for value in key_list]\n\n    # \u0421\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n    code ='+ '.join([str(value) for value in value_list])\n    return code\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    n = len(text)\n    count = 0\n    for i in range(n):\n        if text[i] <= text[i+1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    length = int(stdin)\n    s = stdin.lower()\n\n    previous = [False] * len(s)\n    for i in range(1, len(s)):\n        if s[i-1] < s[i]:\n            previous[i] = True\n        else:\n            previous[i] = previous[i-1]\n\n    count = 0\n    for i in range(1, len(s)):\n        if not previous[i]:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    i = 0\n    answer = 0\n    while i < len(s) - 1:\n        if s[i] == s[i + 1]:\n            answer += 1\n            s = s[:i] + s[i+1:]\n            i = max(i - 1, 0)\n        else:\n            i += 1\n    return answer\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that has the maximum number of character removed from input string.\n\n    >>> solution(\"bacabcab\")\n    4\n    >>> solution(\"bcda\")\n    3\n    >>> solution(\"abbbbb\")\n    5\n    \"\"\"\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dp(i: int) -> int:\n        if i == 0:\n            return 0\n        elif i == 1:\n            return 1\n        elif i == 2:\n            return 2\n        return dp(i - 2) + dp(i - 1)\n\n    return dp(len(stdin))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    denoms = list(map(int, lines[1].split()))\n    q = int(lines[2])\n    request = list(map(int, lines[3].split()))\n\n    ans = ['-'] * q\n    idx = 0\n\n    denoms.sort()\n\n    while q > 0:\n        while idx < n and request[idx] >= denoms[0]:\n            request[idx] -= denoms[0]\n            if k == 1 or k == denoms[0]:\n                ans[idx] = min(k, request[idx])\n            else:\n                ans[idx] = min(k, request[idx], k - request[idx] % k)\n            request[idx] = request[idx] % k\n            idx += 1\n\n        while k > 0 and idx < n and request[idx] >= k:\n            request[idx] -= k\n            ans[idx] = min(k, request[idx])\n            request[idx] = request[idx] % k\n            idx += 1\n\n        k -= 1\n\n        if k == 1:\n            for i in range(q):\n                if ans[i] == '-':\n                    ans[i] = min(k, request[i])\n        else:\n            for i in range(q):\n                if ans[i] == '-':\n                    ans[i] = min(k, request[i], k - request[i] % k)\n\n        q -= 1\n\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    b.sort()\n    m = len(b)\n    k = min(k, m)\n    p = [0]*(k+1)\n    for i in range(1, k+1):\n        p[i] = p[i-1]+b[i-1]\n    for _ in range(int(stdin.split()[1])):\n        print(bisect.bisect_left(p, int(stdin.split()[2+_])))\n\n\na, k = [int(i) for i in stdin.split()]\nb = [int(i) for i in stdin.split()]\nb.sort()\nm = len(b)\nk = min(k, m)\np = [0]*(k+1)\nfor i in range(1, k+1):\n    p[i] = p[i-1]+b[i-1]\nfor _ in range(int(stdin.split()[1])):\n    print(bisect.bisect_left(p, int(stdin.split()[2+_])))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    values = stdin.splitlines()\n    values = list(map(lambda x: list(map(int, x.split(' '))), values))\n    print(values)\n    n, k = values[0]\n    values[1] = sorted(values[1])\n    q = values[2]\n    for i in range(3, 3 + q):\n        values[i] = sorted(values[i])\n    values.append([0, 0, 0])\n    min_value = float('inf')\n    for i in range(3 + q, 3 + q + 1):\n        x = values[i][0]\n        for j in range(1, len(values[i])):\n            x -= values[i][j]\n            if x < 0:\n                break\n            elif x == 0:\n                min_value = min(min_value, values[i][j])\n                break\n        else:\n            print('-1')\n            continue\n        print(min_value)\n\nsolution(stdin)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bills, n, m = stdin.split(' ')\n    bills = list(map(int, bills.split(' ')))\n    n, m = int(n), int(m)\n\n    return''.join(map(str, bills))\n\"\"\""
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    denominations = [int(i) for i in stdin.split()]\n    denominations.sort()\n    x = [int(i) for i in stdin.split()]\n\n    bills_cnt = 0\n    current_sum = 0\n    for i in x:\n        while i > 0:\n            for j in range(k):\n                if current_sum + denominations[j] <= i:\n                    current_sum += denominations[j]\n                    i -= denominations[j]\n                    bills_cnt += 1\n                    break\n            else:\n                break\n    print(bills_cnt)\n    return ''\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    bills = list(map(int, stdin.split(' ')))\n    print(bills)\n    bills.sort()\n    print(bills)\n    q = int(stdin.split(' ')[1])\n    print(q)\n    bills.reverse()\n    print(bills)\n    return '\\n'.join(map(lambda x: '-1' if q < x else str(count), bills))\n\na = input()\nprint(solution(a))\n\ndef"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split('\\n')\n    n, k = [int(i) for i in stdin[0].split(' ')]\n    d = [int(i) for i in stdin[1].split(' ')]\n    q = int(stdin[2])\n    x = [int(i) for i in stdin[3].split(' ')]\n    ans = []\n    for i in range(q):\n        c = 0\n        m = n\n        for j in range(k):\n            if d[j] > x[i]:\n                break\n            else:\n                m = m - (d[j] - x[i]) // d[j]\n                c += 1\n        ans.append(c if c < m else -1)\n    return '\\n'.join([str(i) for i in ans])\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(x) for x in stdin.split(' ')]\n    denoms = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    q = int(stdin.split('\\n')[1])\n    # denoms.sort()\n    m = {x: 0 for x in denoms}\n    print(m)\n    for i in range(q):\n        n = int(stdin.split('\\n')[i+2])\n        print('n', n)\n        for x in denoms:\n            while n >= x:\n                n -= x\n                m[x] += 1\n    print(m)\n    for x in m:\n        if m[x] == q:\n            return str(q)\n        elif m[x] < q:\n            return str(-1)\n    return str(-1)\n\nn, k = [int(x) for x in stdin.split(' ')]\ndenoms = [int(x) for x in stdin.split('\\n')[0].split(' ')]\nq = int(stdin.split('\\n')[1])\nm = {x: 0 for x in denoms}\nprint(m)\nfor i in range(q):\n    n = int(stdin.split('\\n')[i+2])\n    print('n', n)\n    for x in denoms:\n        while n >= x:\n            n -= x\n            m[x] += 1\nprint(m)\nfor x in m:\n    if m[x] == q:\n        return str(q)\n    elif m[x] < q:\n        return str(-1)"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the answer to the problem.\"\"\"\n    # input_list = stdin.splitlines()\n    # n, k = [int(x) for x in input_list[0].split()]\n    # print(n, k)\n    # input_list = [int(x) for x in input_list[1].split()]\n    # print(input_list)\n    # q = int(input_list[0])\n    # print(q)\n    # input_list = [int(x) for x in input_list[1:]]\n    # print(input_list)\n    input_list = stdin.splitlines()\n    n = int(input_list[0].split()[0])\n    k = int(input_list[0].split()[1])\n    print(n, k)\n    input_list = [int(x) for x in input_list[1].split()]\n    print(input_list)\n    q = int(input_list[0])\n    print(q)\n    input_list = [int(x) for x in input_list[1:]]\n    print(input_list)\n\n    return '\\n'.join(\n        [str(min(input_list[i], input_list[i - 1] + k))\n         if input_list[i] < input_list[i - 1] + k else '-1'\n         for i in range(1, q + 1)]\n    )\n\n\ndef"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # 0 1 2 3 4\n    # 0 1 2 3 4\n    # 1 1 1 1\n    # 1 1 1 1\n    # 2 2 2\n    # 2 2 2\n    # 3 3 2 2\n    # 3 3 2 2\n    # 4 4 0 0\n    # 4 4 0 0\n    # 5 5 1 1\n    # 5 5 1 1\n    # 6 6 2 2\n    # 6 6 2 2\n    # 7 7 3 2\n    # 7 7 3 2\n    # 8 8 4 2\n    # 8 8 4 2\n    # 9 9 5 2\n    # 9 9 5 2\n    # 10 10 6 0\n    # 10 10 6 0\n    # 11 11 7 1\n    # 11 11 7 1\n    # 12 12 8 2\n    # 12 12 8 2\n    # 13 13 9 2\n    # 13 13 9 2\n    # 14 14 10 0\n    # 14 14 10 0\n    # 15 15 11 1\n    # 15 15 11 1\n    # 16 16 12 2\n    # 16 16 12 2\n    # 17 17 13 2\n    # 17 17 13 2\n    # 18 18 14 0\n    # 18 18 14 0\n    # 19 19 15 1\n    # 19 19 15 1\n    # 20 20 16 2\n    # 20 20 16 2\n    # 21 21 17 2\n    # 21 21 17 2\n    # 22 22 18 0\n    # 22 22 18 0\n    # 23 23 19 1\n    # 23 23 19 1\n    # 24 24 20 2\n    # 24 24 20 2\n    # 25 25 21 2\n    # 25 25 21 2\n    # 26 26 22 0\n    # 26 26 22 0\n    # 27 27 23 1\n    # 27 27 23 1\n    # 28 28 24 2\n    # 28 28 24 2\n    # 29 29 25 2\n    # 29 29 25 2\n    # 30 30 26 0\n    # 30 30 26 0\n    # 31 31 27 1\n    # 31 31 27 1\n    # 32 32 28 2\n    # 32 32 28 2\n    # 33 33 29 2\n    # 33 33 29 2\n    # 34 34 30 0\n    # 34 34 30 0\n    # 35 35 31 1\n    # 35 35 31 1\n    # 36 36 32 2\n    # 36 36 32 2\n    # 37 37 33 2\n    # 37 37 33 2\n    # 38 38 34 0\n    # 38 38 34 0\n    # 39 39 35 1\n    # 39 39 35 1\n    # 40 40 36 2\n    # 40 40 36 2\n    # 41 41 37 2\n    # 41 41 37 2\n    # 42 42 38 0\n    # 42 42 38 0\n    # 43 43 39 1\n    # 43 43 39 1\n    # 44 44 40 2\n    # 44 44 40 2\n    # 45 45 41 2\n    # 45 45 41 2\n    # 46 46 42 0\n    # 46 46 42 0\n    # 47 47 43 1\n    # 47 47 43 1\n    # 48 48 44 2\n    # 48 48 44 2\n    # 49 49 45 2\n    # 49 49 45 2\n    # 50 50 46 0\n    # 50 50 46 0\n    # 51 51 47 1\n    # 51 51 47 1\n    # 52 52 48 2\n    # 52 52 48 2\n    # 53 53 49 2\n    # 53 53 49 2\n    # 54 54 50 0\n    # 54 54 50 0\n    # 55 55 51 1\n    # 55 55 51 1\n    # 56 56 52 2\n    # 56 56 52 2\n    # 57 57 53 2\n    # 57 57 53 2\n    # 58 58 54 0\n    # 58 58 54 0\n    # 59 59 55 1\n    # 59 59 55 1\n    # 60 60 56 2\n    # 60 60 56 2\n    # 61 61 57 2\n    # 61 61 57 2\n    # 62 62 58 0\n    # 62 62 58 0\n    # 63 63 59 1\n    # 63 63 59 1\n    # 64 64 60 2\n    # 64 64 60 2\n    # 65 65 61 2\n    # 65 65 61 2\n    # 66 66 62 0\n    # 66 66 62 0\n    # 67 67 63 1\n    # 67 67 63 1\n    # 68 68 64 2\n    # 68 68 64 2\n    # 69 69 65 2\n    # 69 69 65 2\n    # 70 70 66 0\n    # 70 70 66 0\n    # 71 71 67 1\n    # 71 71 67 1\n    # 72 72 68 2\n    # 72 72 68 2\n    # 73 73 69 2\n    # 73 73 69 2\n    # 74 74 70 0\n    # 74 74 70 0\n    # 75 75 71 1\n    # 75 75 71 1\n    # 76 76 72 2\n    # 76 76 72 2\n    # 77 77 73 2\n    # 77 77 73 2\n    # 78 78 74 0\n    # 78 78 74 0\n    # 79 79 75 1\n    # 79 79 75 1\n    # 80 80 76 2\n    # 80 80 76 2\n    # 81 81 77 2\n    # 81 81 77 2\n    # 82 82 78 0\n    # 82 82 78 0\n    # 83 83 79 1\n    # 83 83 79 1\n    # 84 84 80 2\n    # 84 84 80 2\n    # 85 85 81 2\n    # 85 85 81 2\n    # 86 86 82 0\n    # 86 86 82 0\n    # 87 87 83 1\n    # 87 87 83 1\n    # 88 88 84 2\n    # 88 88 84 2\n    # 89 89 85 2\n    # 89 89 85 2\n    # 90 90 86 0\n    # 90 90 86 0\n    # 91 91 87 1\n    # 91 91 87 1\n    # 92 92 88 2\n    # 92 92 88 2\n    # 93 93 89 2\n    # 93 93 89 2\n    # 94 94 90 0\n    # 94 94 90 0\n    # 95 95 91 1\n    # 95 95 91 1\n    # 96 96 92 2\n    "
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = [int(x) for x in stdin.split('\\n')]\n    t_1, t_2 = [int(x) for x in stdin.split('\\n')[1:3]]\n\n    if x_1 == x_2:\n        return str(0)\n\n    return str(max(abs(x_2 - x_1), abs(s - x_2), abs(x_1 - 0)))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2, p, d = [int(c) for c in stdin.split()]\n    t_2 = t_2 - t_1\n    a = (s - x_1) / (t_2 - p)\n    b = s - a * t_2 - x_1\n    if d == -1:\n        d = 'left'\n    elif d == 1:\n        d = 'right'\n    if a == 0:\n        return abs(b) * t_2\n    if d == 'left':\n        return abs(b) * t_2 + abs(b) * p\n    if d == 'right':\n        return abs(b) * t_2 - abs(b) * p\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not yet implemented'"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n    p, d = map(int, stdin.split())\n    return '{}'.format(abs(x_2 - x_1) * min(t_1, t_2))\n\n\ndef"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2, p, d = map(int, stdin.split('\\n')[0].split())\n    d = d * 2 - 1\n    res = abs(x_2 - x_1)\n    if abs(d) == 1:\n        if x_1 == x_2:\n            res = min(t_1 + abs(p - x_1) * t_2, t_2 + abs(p - x_1) * t_1)\n        elif p == x_1:\n            res = min(t_1 + abs(x_2 - x_1) * t_2, t_2 + abs(x_2 - x_1) * t_1)\n        else:\n            res = min(t_2 + abs(x_2 - p) * t_1, t_1 + abs(x_2 - p) * t_2)\n    elif d == 1:\n        if x_1 == x_2:\n            res = min(t_1 + abs(p - x_1) * t_2, t_2 + abs(p - x_1) * t_1)\n        elif p == x_1:\n            res = min(t_1 + abs(x_2 - x_1) * t_2, t_2 + abs(x_2 - x_1) * t_1)\n        else:\n            res = min(t_2 + abs(x_2 - p) * t_1, t_1 + abs(x_2 - p) * t_2)\n    return str(res)\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t1, t2, p, d = map(int, stdin.split())\n    if d == 1:\n        return abs(t2 - p) + t2 + abs(p - t1) + t1\n    else:\n        return abs(t1 - p) + t1 + abs(p - t2) + t2\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(len([1 for i in range(1, len(stdin) + 1) for j in range(1, len(stdin) + 1) if '12' in str(i * j)]))\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    print(n, x)\n    return str(n * x)"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str()\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Hello, world!\"\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([i for i in stdin.split(' ') if len([j for j in i if int(j) == 12])]))\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n    \n    s = \"\".join(set(stdin.lower()))\n    \n    #print(s)\n    \n    arr = [x for x in s]\n    \n    n = len(arr)\n    \n    if n <= K:\n        return \"\".join(arr)\n    \n    if n <= K:\n        return \"\".join(arr)\n    \n    arr.sort()\n    \n    start = 0\n    \n    while n < K:\n        \n        if start + 1 < n:\n            arr[start] = arr[start+1]\n        \n        if start + 2 < n:\n            arr[start+1] = arr[start+2]\n            \n        start += 1\n        n += 1\n    \n    return \"\".join(arr)"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return ''.join(random.sample(string.ascii_lowercase, k)\n                   + random.sample(string.ascii_lowercase + string.digits,\n                                   n - k))\n\n\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    calculate the number of distinct lowercase letters in the password\n    and check that length of the password is equal to n and \n    number of distinct symbols equal to k\n    \"\"\"\n    num_of_letters, num_of_symbols = stdin.split()\n    num_of_letters = int(num_of_letters)\n    num_of_symbols = int(num_of_symbols)\n    letters = set(chr(i) for i in range(97, 97 + num_of_letters))\n    symbols = set(chr(i) for i in range(33, 33 + num_of_symbols))\n    digits = set(chr(i) for i in range(48, 58))\n\n    if len(letters) < num_of_letters or len(symbols) < num_of_symbols:\n        return \"\"\n\n    while True:\n        password = ''.join(random.sample(letters, num_of_letters))\n        if len(set(password)) == num_of_symbols and all(\n                len(set(password[i:i + 2])) == 2 for i in range(num_of_symbols - 1)):\n            break\n\n    return password\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    if n < 2 or k < 2 or n > 100 or k > min(n, 26):\n        raise ValueError\n    if k < n:\n        k = n\n    ans = ''\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    b = list(a)\n    for i in range(k):\n        ans += b[i]\n    if k!= n:\n        ans += ''.join(sorted(set(b), key=b.index))[:n - k]\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    count = 0\n    alphabet = set(stdin)\n    if len(alphabet) < k:\n        return \"\"\n    p = \"abcdefghijklmnopqrstuvwxyz\"\n    p = set(p)\n    while count < n:\n        temp = []\n        for letter in p:\n            if letter not in alphabet:\n                temp.append(letter)\n        p = temp\n        count += 1\n    return \"\".join(p[:k])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = [int(c) for c in stdin.split()]\n    if k > min(n, 26):\n        return \"Impossible\"\n    if n < 2:\n        return \"1\"\n    arr = list(set([c for c in stdin]))\n    if n!= len(arr):\n        return \"Impossible\"\n    elif n == len(set([c for c in stdin])):\n        return \"1\"\n    elif k == len(set([c for c in stdin])):\n        return \"\".join(arr)\n    else:\n        return \"Impossible\"\n\nprint(solution(\"4 3\"))\nprint(solution(\"6 6\"))\nprint(solution(\"5 2\"))\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    \n    letters = 'a j u v x z'.split()\n    letters = list(set(letters))\n    letters.sort()\n    letters = ''.join(letters)\n    \n    chars = 'a j u v x z'.split()\n    chars = list(set(chars))\n    chars.sort()\n    chars = ''.join(chars)\n    \n    chars = chars + ''.join(letters)\n    \n    s = ''\n    for i in range(n):\n        s += chars[i]\n        \n    print(s)\n    \n    \n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import collections\n    import itertools\n    s = stdin.strip().split()\n    n, k = int(s[0]), int(s[1])\n    s = stdin[stdin.find('\\n')+1:]\n    k_s = collections.Counter(s)\n    k_s = list(k_s.values())\n    k_s = [len(x) for x in k_s]\n    k_s = [x for x in k_s if x > 1]\n    k_s = collections.Counter(k_s)\n    k_s = list(k_s.values())\n    if k_s == []:\n        k_s = [1]\n    k_s = sorted(k_s)\n    k_s = collections.Counter(k_s)\n    k_s = list(k_s.values())\n    k_s = sorted(k_s)\n    if k_s[-1] > k:\n        k_s.append(0)\n    k_s = [x for x in k_s if x > 0]\n    k_s = sorted(k_s)\n    k_s = [len(x) for x in k_s]\n    k_s = [x for x in k_s if x > 1]\n    k_s = collections.Counter(k_s)\n    k_s = list(k_s.values())\n    k_s = sorted(k_s)\n    k_s = [x for x in k_s if x > 1]\n    if k_s == []:\n        k_s = [1]\n    k_s = collections.Counter(k_s)\n    k_s = list(k_s.keys())\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = sorted(k_s)\n    k_s = [len(x) for x in k_s]\n    k_s = [x for x in k_s if x > 1]\n    k_s = collections.Counter(k_s)\n    k_s = list(k_s.keys())\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = sorted(k_s)\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_s if x > 1]\n    k_s = [x for x in k_"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    array = stdin.split(' ')\n    password = ''\n    if int(array[1]) <= len(array[0]) and int(array[1]) <= 26:\n        for x in array[0]:\n            if x.islower():\n                password += x\n    x = re.findall('[a-z]', password)\n    y = re.findall('[A-Z]', password)\n    if int(array[1]) <= len(x) and int(array[2]) <= len(y):\n        if (x[0]!= x[1]) and (y[0]!= y[1]):\n            return password\n    return 'NO PASSWORD'\n\n\"\"\"\nimport re\narray = input().split(' ')\npassword = ''\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds first collision of two particles in the collider.\"\"\"\n    # x_i is the x coordinate of the particle i\n    x_1, x_2, *x_n = map(int, stdin.split())\n    # Initialize the x coordinate of the first particle to be x_1\n    x = x_1\n    # Initialize the x coordinate of the second particle to be x_2\n    x_ = x_2\n    # Initialize the i-th particle's index to 1\n    i = 1\n    # Initialize the first collision time to be -1\n    collision = -1\n    # Run the loop for the number of particles times\n    while i < len(x_n):\n        # If the x coordinate of the particle i is greater than the x coordinate of the particle i + 1\n        if x_n[i] > x_n[i + 1]:\n            # Add 1 to the first collision time\n            collision += 1\n            # Update the x coordinate of the particle i to be equal to the x coordinate of the particle i + 1\n            x = x_n[i + 1]\n            # Update the x coordinate of the particle i + 1 to be equal to the x coordinate of the particle i\n            x_ = x_n[i]\n            # Decrement the i-th particle's index by 2\n            i -= 2\n        # If the x coordinate of the particle i is equal to the x coordinate of the particle i + 1\n        elif x_n[i] == x_n[i + 1]:\n            # Add 1 to the first collision time\n            collision += 1\n            # Update the i-th particle's index by 1\n            i -= 1\n        # If the x coordinate of the particle i is less than the x coordinate of the particle i + 1\n        else:\n            # Update the i-th particle's index by 1\n            i -= 1\n    # Return the first collision time\n    return str(collision)\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(stdin.readline())\n    seq = list(map(int,seq))\n    for i in range(n):\n        if seq[i] == 0:\n            seq[i] = 1\n        else:\n            seq[i] = -1\n    count = 0\n    for i in range(n):\n        if seq[i]!= seq[i-1] or seq[i] == 0:\n            count += 1\n    return count"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    right = list(stdin.split('\\n')[1].replace('L', '0').replace('R', '1'))\n    left = list(stdin.split('\\n')[2].replace('L', '0').replace('R', '1'))\n    time = 0\n    for i in range(n):\n        if left[i] == right[i]:\n            time = i\n            break\n        time += 1\n    if time == n:\n        return '-1'\n    return str(time * 1000000)"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    t = 0\n    for x, y in zip(a[::2], a[1::2]):\n        t = max(t, x + y)\n        if t % 2 == 0:\n            return '-1'\n    return str(t)\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    prev_n = 0\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            prev_n = nums[i]\n            break\n        elif nums[i] > nums[i - 1]:\n            nums[i] = nums[i - 1] + 1\n        else:\n            nums[i] = nums[i - 1] - 1\n    return -1 if nums[-1] > prev_n else prev_n\n\n\ndef"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    pairs = lines[1].split()\n    x = [int(i) for i in pairs if int(i) % 2 == 0]\n    x.sort()\n    r = 1\n    for i in x:\n        r = (r + i) % 2\n        if r == 0:\n            break\n    return str(r)\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    moving_direction = stdin.split(\"\\n\")[1]\n    x = [int(n) for n in stdin.split(\"\\n\")[2].split(\" \")]\n    print(x)\n    return str(1)\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    sn = [int(c) for c in lines[1].split(' ')]\n    m = set(sn)\n    ans = 0\n    for i in range(n):\n        if i!= 0:\n            sn[i] += sn[i - 1]\n        for j in range(i + 1, n):\n            if sn[i] == sn[j]:\n                ans = sn[i]\n                break\n        if ans!= 0:\n            break\n    if ans == 0:\n        return '-1'\n    return str(ans)\n    \n    "
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    r = list(stdin.split(\"\\n\")[1])\n    i = 0\n    while r[i] == \"L\":\n        i += 1\n    i += 1\n    s = \"\"\n    while i < len(r):\n        if r[i] == \"L\":\n            s += \"1 \"\n        else:\n            s += \"-1 \"\n        i += 1\n    return str(int(s.split(\" \")[-1]))\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(n) for n in stdin.split(' ')]\n    seals = [int(n) for n in stdin.split('\\n')[:n]]\n\n    seals.sort()\n    area = 0\n\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            x1 = seals[i]\n            y1 = seals[j]\n\n            x2 = seals[j]\n            y2 = seals[i]\n\n            if (x1 < a or y1 < b):\n                continue\n\n            x3 = a - x1\n            y3 = b - y1\n\n            x4 = a - x2\n            y4 = b - y2\n\n            area = max(area, x1 * y1 + x3 * y3, x2 * y2 + x4 * y4)\n\n    return area"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''2 2 2\n   ... 1 2\n   ... 2 1''')\n    '4'\n\n    >>> solution('''4 10 9\n   ... 2 3\n   ... 1 1\n   ... 5 10\n   ... 9 11''')\n    '56'\n\n    >>> solution('''3 10 10\n   ... 6 6\n   ... 7 7\n   ... 20 5''')\n    '0'\n\n    >>> solution('''4 10 10\n   ... 6 6\n   ... 7 7\n   ... 20 5\n   ... 9 11\n   ... 3 5\n   ... 6 2''')\n    '0'\n    '''\n    n, a, b = (int(x) for x in stdin.split())\n    seals = []\n    for i in range(n):\n        seals.append((int(x) for x in stdin.split()[2 * i:2 * (i + 1)]))\n\n    seals.sort()\n    seals.reverse()\n    i = 0\n    if seals[0][0] * seals[0][1] < a * b:\n        return '0'\n    while i < len(seals) - 1:\n        x1, y1 = seals[i]\n        x2, y2 = seals[i + 1]\n        if (y2 - y1) * (x2 - x1) > a * b:\n            i += 1\n        else:\n            break\n    if i == len(seals) - 1:\n        return '0'\n    i += 1\n    seals = seals[i:]\n    seals.sort()\n    seals.reverse()\n    while i < len(seals) - 1:\n        x1, y1 = seals[i]\n        x2, y2 = seals[i + 1]\n        if (y2 - y1) * (x2 - x1) > a * b:\n            i += 1\n        else:\n            break\n    if i == len(seals) - 1:\n        return '0'\n    return str(max(seals[i][0] * seals[i][1],\n                   seals[i + 1][0] * seals[i + 1][1]))\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, a, b = map(int, stdin.pop(0).split())\n    max_areas = 0\n    for x, y in [map(int, stdin.pop(0).split()) for i in range(n)]:\n        max_areas = max(max_areas, min(a * y, b * x))\n    return str(max_areas)\n\n\ndef"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'foo'"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(x) for x in stdin.split()]\n    r = []\n    for _ in range(n):\n        r.append([int(x) for x in stdin.split()])\n    \n    l = []\n    for rr in r:\n        x, y = rr\n        l.append(x * y)\n    l.sort()\n    \n    max_area = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_area = max(max_area, l[i] * l[j])\n    \n    return max_area\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    lines = [map(int, stdin.split()) for _ in range(n)]\n    d = {'right': (1, 0), 'down': (0, 1), 'left': (-1, 0), 'up': (0, -1)}\n    seals = []\n    for x, y in lines:\n        seals.append({'x': x, 'y': y, 'direction': 'right', 'd': d['right']})\n        seals.append({'x': x, 'y': y, 'direction': 'down', 'd': d['down']})\n        seals.append({'x': x, 'y': y, 'direction': 'left', 'd': d['left']})\n        seals.append({'x': x, 'y': y, 'direction': 'up', 'd': d['up']})\n\n    max_area = 0\n    for i in range(0, len(seals) - 2):\n        for j in range(i + 1, len(seals)):\n            if seals[i]['direction'] == 'right' and seals[j]['direction'] == 'right':\n                max_area = max(max_area, (seals[j]['x'] - seals[i]['x']) * (seals[j]['y'] - seals[i]['y']))\n            if seals[i]['direction'] == 'down' and seals[j]['direction'] == 'down':\n                max_area = max(max_area, (seals[j]['x'] - seals[i]['x']) * (seals[j]['y'] - seals[i]['y']))\n            if seals[i]['direction'] == 'left' and seals[j]['direction'] == 'left':\n                max_area = max(max_area, (seals[j]['x'] - seals[i]['x']) * (seals[j]['y'] - seals[i]['y']))\n            if seals[i]['direction'] == 'up' and seals[j]['direction'] == 'up':\n                max_area = max(max_area, (seals[j]['x'] - seals[i]['x']) * (seals[j]['y'] - seals[i]['y']))\n\n    if max_area == 0:\n        print(0)\n    else:\n        print(a * b - max_area)\n\n\nsolution(input())"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\""
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(list(map(int, stdin.split('\\n')[1:]))[0::2])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the point that is not on the square's boundary.\"\"\"\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, solution(stdin.splitlines())))\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a valid square point.\n\n    >>> solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\")\n    '1 1'\n\n    >>> solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\")\n    '0 3'\n    \"\"\"\n\n    # Step 1: Read the input\n    points = stdin.strip().splitlines()\n\n    # Step 2: Solve the problem\n    points = list(map(int, points))\n\n    # Step 3: Return the result\n    return str(points[1]) + \" \" + str(points[2])\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import combinations\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def digits_product(n: int) -> int:\n        product = 1\n        while n > 0:\n            product *= n % 10\n            n //= 10\n        return product\n    return str(max(map(digits_product, range(1, n+1))))\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input of a single line\n    :return: solution\n    \"\"\"\n    n = int(stdin)\n    return str(max(list(map(lambda x: reduce(lambda y, z: y * z, list(str(x))), range(1, n + 1)))))\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # do not print anything, this line is only here to tell your editor that the function exists and to enable autocomplete\n    return''"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 1\n    for i in range(n,0,-1):\n        div = 1\n        for j in range(len(str(i))):\n            div *= int(str(i)[j])\n        if div > answer:\n            answer = div\n    return str(answer)\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    MAX = 0\n    for i in range(1, N+1):\n        res = 1\n        for j in list(str(i)):\n            res *= int(j)\n        MAX = res if MAX < res else MAX\n    return str(MAX)\n\n\nprint(solution(input()))"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Kurt's nirvana\"\"\"\n    return 'Not yet implemented'\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum product of digits among all integers from 1 to n.\n\n    >>> solution('390')\n    216\n    >>> solution('7')\n    7\n    >>> solution('1000000000')\n    387420489\n    \"\"\"\n    n = int(stdin)\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= int(max(str(i)))\n    return str(ans)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    student_number = int(stdin[0])\n    votes_for_elodreip = [int(x) for x in stdin[1].split(' ')]\n    res = 0\n    for i in range(student_number):\n        res = max(res, student_number - sum(votes_for_elodreip[:i+1]))\n    return str(res)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    for k in range(max(a), 0, -1):\n        s = sum(i <= k for i in a)\n        if s > n - s:\n            return str(k)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = stdin.readline().strip()\n    k = [int(i) for i in k.split()]\n    k.sort(reverse=True)\n    s = sum(k)\n    res = 0\n    for i in range(n):\n        res += k[i]\n        s -= k[i]\n        if s < 0:\n            break\n    return str(i + 1)\nprint(solution(input()))\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    k = int(stdin[1])\n    arr = [int(i) for i in stdin[1].split(' ')]\n    arr.sort()\n    i = 1\n    while sum(arr[i:]) <= k:\n        k -= arr[i]\n        i += 1\n    return str(arr[i])\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    votes = list(map(int, stdin.split(\"\\n\")[1].split()))\n    votes.sort()\n    while sum(votes) > 0:\n        votes[-1] -= 1\n        if votes[-1] < 0:\n            votes[-1] = 0\n        if sum(votes) < n:\n            break\n    return \" \".join(map(str, votes))\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = max(a) + 1\n    while True:\n        cand = 0\n        for i in a:\n            cand += k - i\n        if cand > n:\n            break\n        k += 1\n    print(k)\n    return \"\"\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    \n    k = max(numbers)\n    \n    while True:\n        if sum(numbers) < k * (n + 1):\n            k -= 1\n        else:\n            break\n    \n    print(k)\n    return \"\"\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = list(map(int, stdin.readline().split()))\n    k = max(votes)\n\n    while True:\n        if sum(votes) >= k * n:\n            return str(k)\n        k += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    votes = list(map(int, stdin.readline().split()))\n    votes.sort()\n    k = votes[-1]\n    for vote in votes:\n        if vote < k:\n            k -= vote\n        else:\n            break\n    return str(k)\n\n\ndef"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    s = list(s)\n    left = 0\n    right = len(s) - 1\n    while left < right:\n        if s[left] == s[right]:\n            left += 1\n            right -= 1\n        else:\n            break\n    if right - left > 0:\n        return right - left\n    else:\n        return 0\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    num = int(a[0])\n    lines = a[1]\n    s = \"\"\n    for i in range(1, num + 1):\n        if lines[i] == lines[i - 1]:\n            s += str(i)\n    return s\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin\n    n = len(data)\n    cache = [0 for i in range(n)]\n    for i in range(n):\n        cache[i] = max(cache[i - 1], cache[i - 2]) + 1 if data[i - 1] == data[i] else cache[i - 1]\n    return cache[-1]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b = [int(i) for i in stdin.split()]\n    points = sorted([int(i) for i in stdin.split()])\n    start = 0\n    end = len(points) - 1\n    points = [i for i in range(n)]\n    while start <= end:\n        if points[start] == b:\n            start += 1\n        if points[end] == b:\n            end -= 1\n        if points[start]!= b and points[end]!= b:\n            break\n    if start > end:\n        return 0\n    return n - start - end\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingT29WGI-MMW/\"\"\"\n    left_color = stdin[0]\n    points_to_remove = []\n    for i, point in enumerate(stdin[1:]):\n        if point!= left_color:\n            points_to_remove.append(i)\n        left_color = point\n    points_to_remove.sort(reverse=True)\n    for i in points_to_remove:\n        del stdin[i]\n    return len(stdin)\n\n\ndef"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return number of triplets\n    '''\n    pass\n\ndef"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                ans += a[i] * a[j] * a[k]\n    print(ans)\n    return \"\""
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing a solution to the problem\"\"\"\n    n = int(stdin.split()[0])\n    print(n, n*(n-1)*(n-2))\n    return ''\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of triplets that sum to a given value.\n\n    Parameters\n    ----------\n    stdin : str\n        The input string, specifying the value to sum to.\n\n    Returns\n    -------\n    str\n        The solution to the problem.\n    \"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    if n == 1:\n        return \"1\"\n    stdin = sorted(map(int, stdin[1:]))\n    a = [0] * (n + 1)\n    for i in range(n):\n        a[i + 1] = a[i] + stdin[i]\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] - a[i] >= stdin[j]:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve task.\"\"\"\n    # input: str\n    # output: str\n    pass\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    inputs = inputs[1:]\n    l = list()\n    for i in inputs:\n        l.append(list(map(int, i.split())))\n    l = l[0]\n    c = 0\n    for i in range(0, len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if (l[i] * l[j] * l[k]) < (l[i] * l[j] + l[i] * l[k] + l[j] * k):\n                    c += 1\n    return str(c)\n------The use of the list.index() function gives us a way to improve the code.\n\nThe first line contains the number of test cases.\nThe next lines contain the test cases: each test case consists of a positive integer n (3 \u2264 n \u2264 10^5) \u2014 the number of elements in array a, and the next n lines contain n positive integer numbers a_i (1 \u2264 a_i \u2264 10^9) \u2014 the elements of a given array.\n\nYou are supposed to write a function that, given a list of numbers and indices, returns the number of triplets (i, j, k) such that the corresponding element a_i is the minimum possible (i.e. no other element has a smaller value than a_i).\nThe function should return an integer number \u2014 the quantity of triplets.\n-----Test-----\nInput:\n1\n3\n1 1 1\n\nOutput:\n4\n\n\nInput:\n1\n5\n1 3 2 3 4\n\nOutput:\n2\n\n\nInput:\n2\n3\n1 3 1\n\nOutput:\n1\n1\n\n\nInput:\n2\n4\n1 1 1 1\n\nOutput:\n4\n1\n\n\nInput:\n3\n6\n1 3 3 1 3 2\n\nOutput:\n1\n1\n1\n\n\nInput:\n1\n4\n1 2 3 4\n\nOutput:\n0\n\n\nInput:\n1\n5\n1 3 2 3 4\n\nOutput:\n2\n\"\"\"\ndef"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(read_input()))\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '5'\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"5\"\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of straight cuts needed to cut a pizza into pie slices\"\"\"\n    \n    # your solution goes here\n    return \"\""
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(answer) for answer in answer_list])\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '5'"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '4'"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    return n - 1\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\nprint(solution(input()))\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - int(stdin[::-1][:len(stdin)][::-1]))"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    state = int(stdin)\n    if len(str(state)) < 2:\n        return str(state)\n    elif len(str(state)) == 2:\n        return str(state - 1)\n    else:\n        return str(int(str(state)[:-1]))\n\nhttps://www.codewars.com/kata/578aa45ee9fd15ff4600090d/train/python"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 10)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom typing import List\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 9 or -int(stdin[:-1]) % 9)\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    s = stdin[0]\n    n = int(stdin[1])\n    for i in range(len(s)):\n        if s[i] == '<':\n            if n % 2 == 1:\n                return 'ccw'\n            else:\n                return 'cw'\n        elif s[i] == '>':\n            if n % 2 == 1:\n                return 'cw'\n            else:\n                return 'ccw'\n        elif s[i] == '^':\n            if n % 2 == 1:\n                return 'ccw'\n            else:\n                return 'cw'\n        elif s[i] == 'v':\n            if n % 2 == 1:\n                return 'cw'\n            else:\n                return 'ccw'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"^ >\\n1\")\n    'cw'\n    >>> solution(\"< ^\\n3\")\n    'ccw'\n    >>> solution(\"^ v\\n6\")\n    'undefined'\n    \"\"\"\n    stdin = stdin.strip()\n    pos = {'<': 60, '^': 94, '>': 62, 'v': 118}[stdin[0]]\n    n = int(stdin[1])\n    if n % 2 == 0:\n        return 'ccw' if pos - n < 0 else 'cw'\n    else:\n        return 'cw' if pos - n < 0 else 'ccw'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    start, end = stdin.split(' ')\n    if start == 'v' or start == '<' or start == '^':\n        direction = 'cw'\n    elif start == '>' or start == 'V':\n        direction = 'ccw'\n    else:\n        return 'undefined'\n\n    num = int(stdin[3:])\n    if direction == 'ccw':\n        spinner = list(range(1, num + 1)) + list(range(num, 0, -1))\n    else:\n        spinner = list(range(num, 0, -1)) + list(range(1, num + 1))\n\n    return direction\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return cw or ccw.\"\"\"\n    pass\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    direction = stdin[0]\n    n = int(stdin[1])\n    if direction == '^':\n        return 'cw' if n % 4 == 0 or n % 4 == 1 else 'ccw'\n    elif direction == '<':\n        return 'cw' if n % 4 == 2 or n % 4 == 3 else 'ccw'\n    elif direction == '>':\n        return 'cw' if n % 4 == 0 or n % 4 == 3 else 'ccw'\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"^ >\\n1\")\n    'cw'\n    >>> solution(\"< ^\\n3\")\n    'ccw'\n    >>> solution(\"^ v\\n6\")\n    'undefined'\n    '''\n    stdin = stdin.split('\\n')\n    start, end = stdin[0], stdin[1]\n    start, end = start[0], end[0]\n    n = int(stdin[2])\n    if start == '^':\n        if end == 'v':\n            if n % 4 == 0:\n                return 'cw'\n            else:\n                return 'ccw'\n        if end == '>':\n            if n % 4 == 1:\n                return 'cw'\n            else:\n                return 'ccw'\n        if end == '<':\n            if n % 4 == 3:\n                return 'cw'\n            else:\n                return 'ccw'\n    if start == 'v':\n        if end == '^':\n            if n % 4 == 0:\n                return 'ccw'\n            else:\n                return 'cw'\n        if end == '>':\n            if n % 4 == 2:\n                return 'ccw'\n            else:\n                return 'cw'\n        if end == '<':\n            if n % 4 == 3:\n                return 'ccw'\n            else:\n                return 'cw'\n    if start == '<':\n        if end == 'v':\n            if n % 4 == 0:\n                return 'cw'\n            else:\n                return 'ccw'\n        if end == '^':\n            if n % 4 == 1:\n                return 'cw'\n            else:\n                return 'ccw'\n        if end == '>':\n            if n % 4 == 3:\n                return 'cw'\n            else:\n                return 'ccw'\n    if start == '>':\n        if end == 'v':\n            if n % 4 == 1:\n                return 'cw'\n            else:\n                return 'ccw'\n        if end == '^':\n            if n % 4 == 2:\n                return 'cw'\n            else:\n                return 'ccw'\n        if end == '<':\n            if n % 4 == 3:\n                return 'cw'\n            else:\n                return 'ccw'\n    return 'undefined'"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    spin, start, duration = stdin.split()\n    if start == '<':\n        start = 60\n    if start == 'v':\n        start = 118\n    if start == '^':\n        start = 94\n    if start == '>':\n        start = 62\n    \n    direction = 'undefined'\n    if spin == '^':\n        if start == 60:\n            direction = 'cw'\n        elif start == 118:\n            direction = 'ccw'\n        elif start == 94:\n            direction = 'ccw'\n        elif start == 62:\n            direction = 'cw'\n    elif spin == 'v':\n        if start == 60:\n            direction = 'ccw'\n        elif start == 118:\n            direction = 'cw'\n        elif start == 94:\n            direction = 'ccw'\n        elif start == 62:\n            direction = 'cw'\n    return direction\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    v = stdin.split(' ')[0]\n    n = int(stdin.split(' ')[1])\n    if n % 2 == 0:\n        if v == '^':\n            return 'cw'\n        elif v == 'v':\n            return 'ccw'\n    else:\n        if v == '<':\n            return 'ccw'\n        elif v == '>':\n            return 'cw'\n        elif v == '^':\n            return 'undefined'\n        elif v == 'v':\n            return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  data = stdin.split('\\n')\n  \n  return None\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    domino_left = domino_right = 0\n    for i in range(n):\n        if stdin[i] == \"R\":\n            domino_right += 1\n            if domino_right > domino_left:\n                count += 1\n            if domino_right == domino_left:\n                count += 1\n            domino_left = 0\n        else:\n            domino_left += 1\n            if domino_left > domino_right:\n                count += 1\n            if domino_left == domino_right:\n                count += 1\n            domino_right = 0\n    return count\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\".LR.R..L..\")\n    4\n    >>> solution(\"R....\")\n    0\n    >>> solution(\"R.\")\n    1\n    \"\"\"\n    n = int(stdin.split()[0])\n    stdin = stdin.split()[1]\n    # n = 4\n    # stdin = \"R.L.R..L..\"\n    # n = 1\n    # stdin = \".\"\n    # n = 5\n    # stdin = \"R....\"\n    # n = 3\n    # stdin = \"R.\"\n    # n = 2\n    # stdin = \"..\"\n    # n = 1\n    l_cnt, r_cnt = 0, 0\n    for c in stdin:\n        if c == \"R\":\n            r_cnt += 1\n        elif c == \"L\":\n            l_cnt += 1\n    # print(l_cnt, r_cnt)\n    if l_cnt % 2!= 0 and r_cnt % 2!= 0:\n        return 0\n    if l_cnt == r_cnt == 0:\n        return n\n    if l_cnt == 0:\n        return n\n    if r_cnt == 0:\n        return n\n    return n - max(l_cnt, r_cnt) - (l_cnt + r_cnt) // 2\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of dominoes left standing vertically at the end of the process.\n    '''\n    # Initialize variables\n    n = int(stdin)\n    s = stdin[0:n]\n    start = 0\n    end = n-1\n    \n    # Count number of dominos in vertical\n    n_vert = 0\n    for i in range(n):\n        if s[i] == '.':\n            n_vert += 1\n    \n    # Count number of dominos in vertical\n    while end >= start:\n        if s[start] == s[end]:\n            n_vert -= 1\n            start += 1\n            end -= 1\n        elif s[start] == 'R':\n            n_vert -= 1\n            start += 1\n        else:\n            n_vert -= 1\n            end -= 1\n    \n    return n_vert\n\nprint(solution(stdin))\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    dominoes = [int(i) for i in stdin[1].split()]\n\n    return len(set(dominoes))\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = [i for i in stdin if i in ['R', 'L']]\n\n    start, finish = 0, n\n    for i in range(len(moves) // 2):\n        start = max(start, moves[i * 2] == 'R')\n        finish = min(finish, moves[i * 2 + 1] == 'L')\n\n    return n - (start + finish)\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nHERE"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split()[0])\n    count = int(stdin.split()[1])\n    leaders = [int(x) for x in stdin.split()[2:]]\n    print(num)\n    print(count)\n    print(leaders)\n    \n    return '-1'\n\ndef"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = list(map(int, stdin[0].split()))\n    l = list(map(int, stdin[1].split()))\n    \n    ans = []\n    for i in range(n):\n        if i + 1 not in l:\n            ans.append(str(i + 1))\n    \n    if len(ans)!= len(l):\n        return \"-1\"\n    else:\n        return \" \".join(ans)\n    "
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    leaders = [int(x) for x in stdin.split()][1:]\n    circle = [0] * n\n    for i in range(m):\n        index = leaders[i] - 1\n        if index >= n:\n            index = index - n\n        circle[index] += 1\n\n    start = 0\n    for i in range(1, n):\n        if circle[i] == 0:\n            if start == i:\n                start = 0\n            else:\n                return \"NO SOLUTION\"\n        else:\n            start = i\n    return \" \".join([str(i + 1) for i in range(n)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    How to solve this problem?\n    Brute force solution is to search for all the possible permutation\n    and filter out only the ones with the given sequence of leaders\n\n    Problem:\n    Given a sequence of leaders, it is possible to generate a permutation\n    of an n element array by following the sequence of leaders in the order\n    of the leaders.\n\n    We can create a helper function to help us do this,\n    and also a list to keep track of the permutation of the array\n    to return.\n\n    Algorithm:\n    Initialize the list permutation with an empty list\n    Initialize a variable i to 0\n    While the i is less than the length of the input string:\n        If the ith character in the input string is a number and the number\n        matches the i + 1th element in the permutation list:\n            Increment i\n        Else:\n            Append the ith character to the permutation list\n    Return the permutation list\n    '''\n    n, m = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    permutation = []\n    i = 0\n    while i < len(sequence):\n        if sequence[i] == m + 1:\n            m += 1\n            i = 0\n        else:\n            permutation.append(sequence[i])\n            i += 1\n    return''.join(map(str, permutation)) if permutation else -1\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    \n    for i in range(m):\n        l[l[i]-1] = l[l[i]-1]-1\n    \n    if l[0]!= 0:\n        return -1\n    \n    a = [0] * n\n    a[0] = l[0]\n    for i in range(1, n):\n        a[i] = l[i] - a[l[i]-1]\n        if a[i] < 0:\n            return -1\n    \n    return''.join([str(a[i]) for i in range(n)])\n\n\n-----Test-----\n\nOK\n\nI wrote a solution, but it doesn't pass all test cases.\n\nThe problem is that it counts people from the end of the permutation array. For example, when we have the following permutation\n\n5 3 1 4 2\n\nIt says that the leaders are at indices 1, 2, 4, 5, and not 0, 1, 2, 3, 4.\n\n1. From the end of the permutation array, to find the leaders in the first step, we have to count up to n, and then subtract the elements that were on the left of the leaders in the previous step.\n2. In the second step, it says that the leaders are at indices 1, 3, 4, and not 2, 3, 4, 5.\n3. So in the second step, it should be:\n\n4 2 0 1\n\n4 - 2 = 2, 2 - 0 = 2, 0 - 1 = 1, 1 - 3 = -2\n\nwhich shows that the leaders in the second step are indices 1, 3, 4, and not 2, 3, 4, 5.\n\nYou can see that there are no solutions when the first step is, say,\n\n3 2 1 5\n\nbecause the count of 2 doesn't match the count of the next number 3.\n\nThe solution is to store the solution in reverse order. The leader in the second step should be at the end, and the count of the first solution should be reversed. So in the second step, the leaders are at indices 4, 2, 0, and not 5, 3, 1, 1.\n\nSo the first step solution is\n\n5 3 1 2 4\n\nand the second step solution is\n\n4 2 0 1 3\n\nThe output should be\n\n4 2 0 1 3\n\nbecause it should be reversed.\n\n-----Stats-----\n\nNice solution, but took me a while to get it.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from itertools import islice, permutations\n    n, m = [int(n) for n in stdin.split()]\n    leaders = [int(l) for l in stdin.split()][1:]\n    leader_queue = deque(leaders)\n    leader_queue.appendleft(0)\n    permutation = [n]\n    def leaders_in_circle(permutation, leader_queue):\n        for _ in range(m):\n            leader = leader_queue.popleft()\n            leaders_in_circle = deque(permutation)\n            leaders_in_circle.rotate(-leader)\n            permutation = list(islice(leaders_in_circle, 0, n))\n            leader_queue.append(leader)\n        return permutation\n    permutations = permutations(range(1, n + 1))\n    for permutation in permutations:\n        if leaders_in_circle(permutation, leader_queue) == permutation:\n            return \" \".join(str(n) for n in permutation)\n    return -1\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    s = []\n    if n!= len(set(l)):\n        return \"-1\"\n\n    for i in range(m):\n        n = (n + l[i] - 1) % n\n        if n == 0:\n            n = n + m\n        s.append(n)\n\n    return''.join(map(str, s))\n\n\ndef"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    leads = list(map(int, stdin.split()))\n\n    def permutation(arr):\n        n = len(arr)\n        if n == 1:\n            return [arr]\n        else:\n            return [arr[i:] + arr[:i] for i in range(n)]\n\n    def is_valid(perm):\n        leader_count = {}\n        for num in perm:\n            if num in leader_count:\n                leader_count[num] += 1\n            else:\n                leader_count[num] = 1\n        for key in leader_count:\n            if leader_count[key] > leads[key - 1]:\n                return False\n        return True\n\n    def backtrack(perm, leads):\n        if len(perm) == n and is_valid(perm):\n            return perm\n        else:\n            for i in range(1, n + 1):\n                if i not in perm:\n                    res = backtrack(perm + [i], leads)\n                    if res is not None:\n                        return res\n    \n    return backtrack([], leads)\n\n\n-----Test-----\n\n1.\nInput\n4 5\n2 3 1 4 4\n\nOutput\n3 1 2 4\n\n2.\nInput\n3 3\n3 1 2\n\nOutput\n-1\n\n3.\nInput\n5 5\n1 3 5 2 4\n\nOutput\n3 1 2 4 \n\n4.\nInput\n4 6\n4 1 2 3 6\n\nOutput\n6 3 4 2 1\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    if k >= a:\n        return str(a)\n    num = list(str(a))\n    max_num = 0\n    for i in range(len(num)):\n        for j in range(i+1, len(num)):\n            num[i], num[j] = num[j], num[i]\n            max_num = max(max_num, int(''.join(num)))\n            num[i], num[j] = num[j], num[i]\n    return str(max_num)"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split(' '))\n    b = list(str(a))\n    for i in range(k):\n        if b[i] == b[i+1]:\n            b[i] = '9' if b[i] == '0' else '0'\n            b[i+1] = '9' if b[i+1] == '0' else '0'\n        else:\n            break\n    a = ''.join(b)\n    return a\n\n\n\nsolution(\"1990 1\")\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split(' ')\n    a = int(a)\n    k = int(k)\n    return int(max(str(a // (10 ** (len(str(a)) - 1))), str(a % (10 ** (len(str(a)) - 1)))))\n\nprint(solution(input()))\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split(' '))\n    s = str(a)\n    m = len(s)\n    if k >= m:\n        return s\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            s = s[:i] + s[j] + s[i:j] + s[i] + s[j + 1:]\n            if s[:m] == s[:m][::-1]:\n                return s[:m]\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    n = len(str(a))\n    res = [int(s) for s in str(a)]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            tmp = res[:]\n            tmp[i], tmp[j] = tmp[j], tmp[i]\n            if ''.join(map(str, tmp))[:k+1] == ''.join(map(str, res[:k+1]))[:k+1]:\n                return ''.join(map(str, tmp))\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split(\" \")\n    a = int(a)\n    k = int(k)\n    string = [int(i) for i in str(a)]\n    s = set(string)\n    if len(s) == 1:\n        return a\n    if k == 0:\n        return \"\".join(str(i) for i in string)\n    for i in range(0, len(string)):\n        s.discard(string[i])\n        for j in range(i+1, len(string)):\n            if string[j] == 0:\n                continue\n            new_string = list(string)\n            new_string[j], new_string[i] = new_string[i], new_string[j]\n            if len(s)!= 1:\n                if set(new_string) == s:\n                    new_string = \"\".join(str(i) for i in new_string)\n                    return new_string\n    return \"\".join(str(i) for i in string)\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    a = list(str(a))\n    k = int(k)\n    for _ in range(k):\n        i, j = map(int, input().split())\n        temp = a[i - 1]\n        a[i - 1] = a[j - 1]\n        a[j - 1] = temp\n    a = \"\".join(a)\n    a = int(a)\n    return a\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(x) for x in stdin.split(' ')]\n    r = list(str(a))\n    n = len(r)\n    ans = int(r[0])\n    ans = ans*10**n\n    while k > 0:\n        max_dig = max(r)\n        r[r.index(max_dig)] = '0'\n        ans = int(ans[:r.index(max_dig)]+max_dig+ans[r.index(max_dig):])\n        k -= 1\n    print(ans)\n    return ans\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return the maximum number that pasha can get if he makes at most k swaps\n    \"\"\"\n\n    a, k = stdin.split()\n    a, k = int(a), int(k)\n\n    def to_binary(n: int) -> int:\n        \"\"\"\n        return the number of 1s in the binary representation of n\n        \"\"\"\n\n        n, bits = 0, 1\n\n        while n < k:\n            n += bits\n            bits *= 2\n\n        return n\n\n    ans, a_bits, k_bits = 0, to_binary(a), 1\n\n    while a_bits > k_bits:\n        a_bits -= k_bits\n        ans += 1\n        k_bits = to_binary(ans)\n\n    return ans\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split()\n    a = list(a)\n    #print(a, k)\n    for i in range(0, int(k)):\n        i = 0\n        while i < len(a) - 1:\n            if a[i] == a[i + 1]:\n                break\n            i += 1\n        if i < len(a) - 1:\n            tmp = a[i]\n            a[i] = a[i + 1]\n            a[i + 1] = tmp\n    #print(a)\n    print(''.join(a))\n\n\nsolution(input())"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arithmetic, geometric = None, None\n    a, b, c, d = map(int, stdin.split())\n    if a == b + 1 and c == d + 1:\n        arithmetic = True\n    if a == b - 1 and c == d - 1:\n        geometric = True\n\n    if arithmetic is True or geometric is True:\n        return b if arithmetic else c\n\n    return 42\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = (int(i) for i in stdin.split())\n    s = input()\n    is_arithmetic = False\n    is_geometric = False\n    for i in range(n):\n        if a == b and b!= c:\n            is_arithmetic = True\n        elif b == c and c!= a:\n            is_arithmetic = True\n        elif a == c and c!= b:\n            is_arithmetic = True\n        elif a == b == c and b!= c:\n            is_arithmetic = True\n        elif a == b:\n            is_geometric = True\n        elif b == c:\n            is_geometric = True\n        elif c == a:\n            is_geometric = True\n        if is_arithmetic:\n            print(a + i * b)\n            break\n        elif is_geometric:\n            print(b * (a + i))\n            break\n    else:\n        print(42)\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    a = a - d\n    if a>0:\n        if b==c:\n            print(a+b)\n        else:\n            print(a+b*c)\n    else:\n        print(a)\n    return \"\""
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\ndef"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    if A[2] - A[1] == A[1] - A[0]:\n        return str(A[1] + A[2] - A[0])\n    elif A[3] - A[2] == A[2] - A[1]:\n        return str(A[2] + A[3] - A[1])\n    else:\n        return '42'\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, d, n = map(int, stdin.split())\n    if a * d + d ** (n - 1) % n == d ** n % n:\n        return str(d * n - (d ** (n - 1)) % n)\n    if a ** n % n == d:\n        return str(a ** (n - 1) * n)\n    return str(42)\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n\n\"\"\"\n\nimport math\nimport sys\n\n\ndef"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(42)\n    return \"\""
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    size = int(stdin[0])\n    houses = sorted(list(map(int, stdin[1].split())))\n    houses_count = len(houses)\n    res = 0\n    for i in range(houses_count - 1):\n        for j in range(i + 1, houses_count):\n            if houses[i]!= houses[j]:\n                res = max(res, houses[j] - houses[i])\n    return str(res)\n\n\ndef"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    houses = list(map(int, stdin.readline().split()))\n    houses.sort()\n    # \u0414\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0442 \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u043a \u0431\u043e\u043b\u044c\u0448\u0435\u043c\u0443\n    res = 0\n    for i in range(1, len(houses)):\n        res = max(res, houses[i] - houses[i-1])\n    return str(res)"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *colors = [int(line) for line in stdin.split()]\n    colors.sort()\n    result = 1\n    for i in range(1, n):\n        result = max(result, i * (colors[i] - colors[i - 1]))\n    return str(result)\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible distance Ilya can walk.\n    \"\"\"\n    _, *houses = map(int, stdin.split())\n    ans = 0\n\n    for i in range(len(houses)):\n        for j in range(i + 1, len(houses)):\n            ans = max(ans, abs(houses[i] - houses[j]))\n    return str(ans)\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 2 3\n   ... ''')\n    '4'\n    >>> solution('''7\n   ... 1 1 3 1 1 1 1\n   ... ''')\n    '4'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is similar to the previous one, but introduces the following trick.\n\n    We make the distance between each house equal to 2, and hence the optimal way is to walk from\n    the first house to the third and back.\n\n    The solution is the sum of the distances of the first and the last houses, i.e. $2 + 2 = 4$.\n    \"\"\"\n    houses = sorted(list(map(int, stdin.split())))\n    return str(sum(houses[::2]))\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    k -= 1\n    return f'{n - k // m} {k % m + 1} {[\"L\", \"R\"][k % m < m // 2]}'\n    \n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n*m)\n    Space complexity: O(n*m)\n    \"\"\"\n    N, M, K = map(int, stdin.split(' '))\n    LANES = N\n    DESKS = M\n    SANTACLAUS_PLACE = K\n    SANTACLUS_LANE_COUNT = (N - SANTACLAUS_PLACE) // 2\n    SANTACLUS_DESK_COUNT = SANTACLUS_PLACE\n    SANTACLUS_LANE = SANTACLUS_PLACE // (DESKS // 2)\n    if SANTACLUS_PLACE % (DESKS // 2)!= 0:\n        SANTACLUS_DESK = SANTACLUS_PLACE % (DESKS // 2)\n    else:\n        SANTACLUS_DESK = DESKS // 2\n    if SANTACLUS_LANE % 2 == 0:\n        SANTACLUS_SIDE = 'L'\n    else:\n        SANTACLUS_SIDE = 'R'\n    return str(SANTACLUS_LANE) +'' + str(SANTACLUS_DESK) +'' + SANTACLUS_SIDE\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = stdin.split()\n    N, M, K = int(N), int(M), int(K)\n    i = 0\n    while K > 0:\n        if i < N:\n            if K % (M + 1) == 0:\n                i += 1\n                K -= 1\n            else:\n                i += K % (M + 1)\n                K -= K % (M + 1)\n        else:\n            i = 1\n            K -= (M + 1)\n    print(i, K)\n    return 'L' if K > 0 else 'R'\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m, k = map(int, stdin)\n    return str(n - k // m) +'' + str(k // m + 1) +'' + 'L' if k % m == 0 else str(k // m) +'' + str(k // m + 1) +'' + 'R'\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    r = (k - 1) // (n * m) + 1\n    d = (k - 1) % (n * m) + 1\n    print(r, d, end=\"\")\n    if k % m == 0:\n        print(\"R\")\n    else:\n        print(\"L\")\n\nsolution(stdin)\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = [int(i) for i in stdin.split()]\n    lanes, desks, place = line_1[0], line_1[1], line_1[2]\n    left, right = 0, 0\n    for i in range(lanes):\n        if (desks * 2) % 2 == 0:\n            left += 1\n            right += 1\n        else:\n            if i == (desks * 2 - 1) // 2:\n                right += 1\n            else:\n                left += 1\n    if left < place <= (desks * 2) - left:\n        side = \"L\"\n    else:\n        side = \"R\"\n    return str(desks - place + 1) + \" \" + str(desks - place) + \" \" + side\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, k = [int(i) for i in stdin.split()]\n    if k%m == 0:\n        return f'{n - k//m}\\n{1}\\nR'\n    return f'{n - k//m}\\n{k%m}\\nL'\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, m, k = stdin.split()\n    k = int(k) - 1\n    return f'{int(k/m) + 1} {k%m} {[\"L\", \"R\"][k%m == m-1]}'\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    left, right = k//(n*m), k%(n*m)\n    if left:\n        return f'{left}{right // n}{\"L\" if right % n == 0 else \"R\"}'\n    return f'{right // n}{right % n}R'\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    colors = [stdin[0], stdin[1]]\n    for i in range(2, len(stdin)):\n        if colors[0]!= stdin[i] and colors[1]!= stdin[i]:\n            colors[2] = stdin[i]\n            break\n        elif colors[0] == stdin[i]:\n            colors[1] = stdin[i]\n        elif colors[1] == stdin[i]:\n            colors[0] = stdin[i]\n\n    print(colors)\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_cards = int(stdin[0])\n    card_set = list(stdin[1])\n    if num_cards == 1:\n        return card_set[0]\n    elif num_cards == 2:\n        return \"G\" if card_set[0] == card_set[1] else \"B\"\n    else:\n        if len(set(card_set)) == 3:\n            return \"RGB\"\n        elif len(set(card_set)) == 2:\n            if \"G\" in card_set and \"R\" in card_set:\n                return \"GBR\"\n            elif \"B\" in card_set and \"R\" in card_set:\n                return \"BRG\"\n            else:\n                return \"B\"\n        else:\n            return \"B\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count('G') > 1:\n        return 'B'\n    elif stdin.count('R') > 1:\n        return 'G'\n    else:\n        return 'R'\n\n\ndef"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the possible colors of the final card\"\"\"\n    pass\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n-------\n-------\n\nCatherine has a deck of n cards, each of which is either red, green, or blue. As long as there are at least two cards left, she can do one of two actions:   take any two (not necessarily adjacent) cards with different colors and exchange them for a new card of the third color;  take any two (not necessarily adjacent) cards with the same color and exchange them for a new card with that color. \n\nShe repeats this process until there is only one card left. What are the possible colors for the final card?\n\ndef"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5BGRR')\n    'B'\n    >>> solution('2GRG')\n    'GR'\n    >>> solution('3BBB')\n    'B'\n    >>> solution('5BBGGR')\n    'B'\n    >>> solution('5GGRG')\n    'GR'\n    '''\n    import re\n    print(re.match(r'\\d', stdin).group())\n    return ''\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'GG'\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\nRB')\n    'G'\n    >>> solution('5\\nGRG')\n    'BR'\n    >>> solution('3\\nGRG')\n    'B'\n    >>> solution('5\\nBBBBB')\n    'B'\n    \"\"\"\n    cards = stdin.split('\\n')\n    cards = [c.replace('R', 'G') for c in cards]\n    cards = [c.replace('B', 'R') for c in cards]\n    cards = [c.replace('G', 'B') for c in cards]\n    cards = set(cards)\n    cards = sorted(list(cards))\n    return ''.join(cards)\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    G = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        u -= 1\n        v -= 1\n        G[u].append(v)\n        G[v].append(u)\n    visited = [False] * n\n    queue = deque([0])\n    visited[0] = True\n    while queue:\n        i = queue.popleft()\n        for j in G[i]:\n            if not visited[j]:\n                queue.append(j)\n                visited[j] = True\n    if visited.count(True) == n:\n        return \"YES\\n\" + '\\n'.join(map(lambda i: f'{abs(i[0])} {abs(i[1])}', zip(range(n), [0] * n)))\n    return \"NO\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check(point):\n        return all(elem == point[0] or elem == point[1] for elem in point)\n\n    n = int(stdin.readline())\n    edges = []\n    for _ in range(n - 1):\n        edge = list(map(int, stdin.readline().split()))\n        edges.append(edge)\n    edges = list(sorted(edges, key=lambda x: (x[1], x[0])))\n    points = [[-1] * 2 for _ in range(n)]\n    prev = None\n    for edge in edges:\n        if prev and prev[0] == edge[0] and prev[1] == edge[1]:\n            continue\n        elif prev and prev[0] == edge[1] and prev[1] == edge[0]:\n            continue\n        points[edge[0]][0] = points[edge[0]][0] + 1 if points[edge[0]][0]!= -1 else 1\n        points[edge[0]][1] = points[edge[0]][1] + 1 if points[edge[0]][1]!= -1 else 1\n        points[edge[1]][0] = points[edge[1]][0] - 1 if points[edge[1]][0]!= -1 else -1\n        points[edge[1]][1] = points[edge[1]][1] - 1 if points[edge[1]][1]!= -1 else -1\n        if not check(points[edge[0]]) or not check(points[edge[1]]):\n            return \"NO\"\n        prev = edge\n    return \"YES\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque, namedtuple\n    from math import sqrt\n    n = int(stdin.readline())\n    g = [[] for _ in range(n)]\n    d = deque(range(n))\n    while d:\n        u, v = map(int, stdin.readline().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n        d.remove(u - 1)\n        d.remove(v - 1)\n    x = namedtuple('x', 'x y')\n\n    def bfs(root):\n        dist = [0] * n\n        prev = [0] * n\n        q = deque([root])\n        dist[root] = 0\n        while q:\n            u = q.popleft()\n            for v in g[u]:\n                if dist[v] > 0:\n                    continue\n                dist[v] = dist[u] + 1\n                prev[v] = u\n                q.append(v)\n        return dist, prev\n\n    def get_vertex(root):\n        while True:\n            x, y = map(int, stdin.readline().split())\n            if x == -1 and y == -1:\n                return x, y\n            if x > 10 ** 18 or y > 10 ** 18:\n                continue\n            if dist[root]!= dist[x] + dist[y]:\n                continue\n            return x, y\n\n    dist, prev = bfs(0)\n    x, y = get_vertex(0)\n    if x > 10 ** 18 or y > 10 ** 18:\n        print('NO')\n        return\n    if dist[x] == dist[y]:\n        print('YES')\n        print(x, y)\n        return\n    while True:\n        x, y = get_vertex(prev[x])\n        if x > 10 ** 18 or y > 10 ** 18:\n            break\n        if dist[x] == dist[y]:\n            print('YES')\n            print(x, y)\n            return\n    print('NO')\n\n\ndef"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"def solution(stdin):\n    n = int(stdin.split('\\n')[0])\n    points = [0] * n\n    for i in range(1, n):\n        a, b = map(int, stdin.split('\\n')[i].split(' '))\n        points[a - 1] += 1\n        points[b - 1] += 1\n    points[0] = 0\n    points[n - 1] = 0\n\n    for i in range(1, n):\n        points[i] = points[i] - points[i - 1] - 1\n\n    for i in range(1, n):\n        if points[i] == 0:\n            for j in range(1, n):\n                if i!= j and points[j] == 0:\n                    if points[i - 1] >= j - i:\n                        points[j] = points[i] + 1\n                        points[i] = points[j] + 1\n                        points[j] = points[i] + 1\n                        points[i] = points[j] + 1\n                    else:\n                        points[j] = points[i] - 1\n                        points[i] = points[j] - 1\n                        points[j] = points[i] - 1\n                        points[i] = points[j] - 1\n                    break\n    ans = [0] * n\n    for i in range(1, n):\n        if points[i] % 2 == 1:\n            for j in range(1, n):\n                if i!= j and points[j] == points[i]:\n                    ans[j] = 1\n    for i in range(1, n):\n        if ans[i] == 0:\n            ans[i] = -1\n    for i in range(1, n):\n        print(ans[i], points[i])\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(textwrap.dedent(\"\"\"\\\n   ... 7\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 3 6\n   ... 3 7\n   ... \"\"\"))\n    YES\n\n    >>> solution(textwrap.dedent(\"\"\"\\\n   ... 6\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... 2 6\n   ... \"\"\"))\n    NO\n\n    >>> solution(textwrap.dedent(\"\"\"\\\n   ... 4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... \"\"\"))\n    YES\n\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    n = [int(i) for i in n]\n    a = n[0]\n    b = n[1]\n    m = str(a)\n    s = 0\n    while b>=a:\n        m = m + str(2*a)\n        a = a + 1\n    m = m + str(b)\n    for i in m:\n        s += int(i)\n    return s % 1000000007"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [l, r] = [int(i) for i in stdin.split()]\n    l %= 10**9 + 7\n    r %= 10**9 + 7\n    if l == r:\n        return 0\n    if r - l == 1:\n        return l\n    l = l + 1 if l & 1 else l\n    r = r - 1 if r & 1 else r\n    for i in range(l, r):\n        l = i * 2\n        if l >= r:\n            break\n        r = (r - l) // 2 + l\n    return l\n\nprint(solution(input()))\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    x = a + 1\n    y = b - 1\n    return sum(range(x, y + 1, 2)) % 1000000007\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    print(sum(int(x) for x in range(int(n[0]), int(n[1]))))\nsolution(input())\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    n += 2\n    m += 1\n    n += (n % 2) * m\n    return n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the sum of numbers with numbers from $l$ to $r$\n    for given integers $l$ and $r$. The answer may be big, so\n    you need to find the remainder of the division by $1000000007$\n    ($10^9+7$).\n\n    >>> solution('1 3')\n    7\n    >>> solution('5 14')\n    105\n    >>> solution('88005553535 99999999999')\n    761141116\n    \"\"\"\n    a, b = map(int, stdin.split())\n    l = b % 1000000000\n    if l % 2 == 0:\n        r = b % 1000000000\n        while l <= r:\n            if l % 2!= 0:\n                l += 1\n            else:\n                l += 2\n            r -= 1\n    else:\n        r = b % 1000000000\n        while l <= r:\n            if l % 2!= 0:\n                l += 1\n            else:\n                l += 2\n            r -= 1\n    return l\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the sum of the even numbers in the range, calculated modulo the divisor\"\"\"\n    return\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 3\")\n    7\n    >>> solution(\"5 14\")\n    105\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    MOD = 10 ** 9 + 7\n    ans = 0\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            ans += i\n            ans %= MOD\n    return ans\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'Yes' if abs(a - b) == abs(b - c) else 'No'\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [list(map(int, line.split())) for line in stdin.strip().split(\"\\n\")]\n    ab = (b[0] - a[0], b[1] - a[1])\n    bc = (c[0] - b[0], c[1] - b[1])\n    ac = (c[0] - a[0], c[1] - a[1])\n    cos_theta = (ab[0] * ac[0] + ab[1] * ac[1]) / (\n        ab[0] ** 2 + ab[1] ** 2\n    ) ** 0.5 / (ac[0] ** 2 + ac[1] ** 2) ** 0.5\n    if cos_theta == 0:\n        return \"Yes\"\n    theta = math.acos(cos_theta)\n    if theta == math.pi / 2 or theta == math.pi * 3 / 2:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = [int(i) for i in stdin.split(' ')]\n    def collinear(x1, y1, x2, y2, x3, y3):\n        if x1 * (y2 - y3) == x2 * (y1 - y3) + x3 * (y1 - y2):\n            return True\n        return False\n\n    if collinear(x1, y1, x2, y2, x3, y3):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(1)\n    space complexity: O(1)\n    \"\"\"\n    a = stdin.split('\\n')[0].split(' ')\n    b = stdin.split('\\n')[1].split(' ')\n    c = stdin.split('\\n')[2].split(' ')\n    x = (float(b[0]) - float(a[0])) ** 2 + (float(b[1]) - float(a[1])) ** 2\n    y = (float(c[0]) - float(a[0])) ** 2 + (float(c[1]) - float(a[1])) ** 2\n    z = (float(b[0]) - float(c[0])) ** 2 + (float(b[1]) - float(c[1])) ** 2\n    if abs(z - y - x) < 10 ** -9:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if (\n        (b - a) ** 2 + (c - b) ** 2 == (a - c) ** 2 or (b - a) ** 2 + (c - a) ** 2 == (b - c) ** 2\n    ) else \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x1, y1 = a, b\n    x2, y2 = b, c\n    x3, y3 = c, a\n\n    if (x1 - x2) == 0:\n        x = x2\n    elif (x1 - x2) == 0:\n        x = x1\n    else:\n        x = (x1 * y2 - x2 * y1) / (x1 - x2)\n\n    if (x - x3) == 0:\n        y = x3\n    else:\n        y = (x1 * x3 - x2 * x1) / (x - x3)\n\n    if (y3 - y) == 0:\n        y = y3\n    else:\n        y = (x1 * y3 - x3 * y1) / (y3 - y)\n\n    if x == x3 and y == y3:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Yes\" if stdin[0] == '0' else \"No\""
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = map(int, stdin.split())\n    a, b, c = ((x2 - x1) ** 2 + (y2 - y1) ** 2), ((x1 - x3) ** 2 + (y1 - y3) ** 2), ((x2 - x3) ** 2 + (y2 - y3) ** 2)\n    try:\n        s = (a + b + c) / (2 * sqrt(a * b))\n        t = acos(sqrt(s * (s - a) * (s - b) * (s - c)) / s)\n        print('Yes') if t * 180 / pi >= 90 else print('No')\n    except:\n        print('No')\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a, b, c = (a, b, c) if a!= b else (b, c, a)\n    return 'Yes' if a == b or a == c or b == c else 'No'\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count(stdin))\n\ndef"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    seq = stdin.split(' ')[1]\n    total = 0\n    for i in range(len(seq) - 2):\n        if seq[i + 1] * k == seq[i + 2]:\n            total += 1\n    return str(total)"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import log\n\n\ndef"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    pass\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    input_as_list = stdin.split()\n    n = int(input_as_list[0])\n    k = int(input_as_list[1])\n    values = input_as_list[2:]\n    # values = [int(i) for i in values]\n    values = list(map(int, values))\n    result = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if values[k] == values[j] * k:\n                    result += 1\n    print(result)\n    return result\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    \n    k = []\n    for i in range(a):\n        k.append(stdin.split())\n        \n    a = a\n    b = b\n    k = k\n    \n    p = 0\n    for i in range(a):\n        for j in range(b):\n            if j == 0:\n                k[i][j] = int(k[i][j])\n            else:\n                k[i][j] = int(k[i][j])\n    print(k)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total_damage = 0\n    n, a, b = map(int, stdin.split('\\n')[0].split())\n    creatures = [map(int, line.split()) for line in stdin.split('\\n')[1:n + 1]]\n    for i in range(n):\n        heal, damage = creatures[i][0], creatures[i][1]\n        total_damage += heal\n        total_damage += int((damage * a + b) / 2) * (a + 1)\n        if a:\n            total_damage += (heal * 2 - damage) * b\n    return str(total_damage)\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        hp, dmg = map(int, stdin.split())\n        lst.append((hp, dmg))\n\n    lst = sorted(lst, key=lambda x: x[0])\n    #lst = [(hp, dmg) for hp, dmg in lst]\n    hp, dmg = lst[0]\n    if a > 0:\n        hp *= 2\n        dmg += hp\n    elif a == 0 and b == 0:\n        dmg = hp\n    lst = sorted(lst, key=lambda x: x[1])\n    for i in range(b):\n        hp, dmg = lst[i]\n        dmg += hp\n        if a > 0:\n            hp *= 2\n            dmg += hp\n    return dmg\n\nsolution('2 1 1\\n10 15\\n6 1\\n')\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, a, b):\n        k = 0\n        while k < b:\n            k += 1\n            n *= 2\n        return n\n\n    n, a, b = list(map(int, stdin.split()))\n    return solve(n, a, b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    INPUT:\n    The first line contains three integers n, a, b (1 \u2264 n \u2264 2\u00b710^5, 0 \u2264 a \u2264 20, 0 \u2264 b \u2264 2\u00b710^5) \u2014 the number of creatures, spells of the first type and spells of the second type, respectively.\n\n    The i-th of the next n lines contain two numbers hp_{i} and dmg_{i} (1 \u2264 hp_{i}, dmg_{i} \u2264 10^9) \u2014 description of the i-th creature.\n\n    OUTPUT:\n    Print single integer \u2014 maximum total damage creatures can deal.\n\n    CONSTRAINTS:\n    1 \u2264 n \u2264 2\u00b710^5\n    0 \u2264 a \u2264 20\n    0 \u2264 b \u2264 2\u00b710^5\n\n    SAMPLE INPUT:\n    2 1 1\n    10 15\n    6 1\n\n    SAMPLE OUTPUT:\n    27\n    '''\n\n    n, a, b = list(map(int, stdin.split()))\n\n    return max(max([(a * hp) + (b * dmg) for hp, dmg in zip(hp_list, dmg_list)]) for hp_list, dmg_list in zip(hp_list_list, dmg_list_list))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, a, b = map(int, stdin.split('\\n')[0].split())\n    max_dmg = 0\n    s1 = [0] * a\n    s2 = [0] * b\n    for i in range(n):\n        hp, dmg = map(int, stdin.split('\\n')[i + 1].split())\n        s1[hp % a] += hp\n        s2[dmg % b] += dmg\n        max_dmg = max(max_dmg, hp + dmg)\n    res = 0\n    for i in range(a):\n        res += s1[i] * (s1[i] + 1) // 2\n    for i in range(b):\n        res += s2[i] * (s2[i] + 1) // 2\n    return res - max_dmg\n\nprint(solution(stdin))\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n, a, b = list(map(int, stdin.pop(0).split()))\n    hp = list(map(int, stdin.pop(0).split()))\n    dmg = list(map(int, stdin.pop(0).split()))\n    \n    \n    hp_dict = { i:hp[i] for i in range(n) }\n    dmg_dict = { i:dmg[i] for i in range(n) }\n    \n    hp_dict_sorted = sorted(hp_dict.items(), key=lambda x:x[1], reverse=True)\n    dmg_dict_sorted = sorted(dmg_dict.items(), key=lambda x:x[1], reverse=True)\n    \n    total_damage = 0\n    for i in range(n):\n        for j in range(min(a, b)):\n            total_damage += hp_dict_sorted[i][1]*2\n            hp_dict_sorted[i][1] = dmg_dict_sorted[i][1]\n            \n    print(total_damage)\n    return total_damage\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(max_hp: int, dmg: int, hp: int, dmg_h: int, lst: [int]) -> int:\n        def recur(a: int, b: int) -> int:\n            if a <= 0:\n                return 0\n            elif b <= 0:\n                return max(hp * a, dmg * hp)\n            elif a == 1:\n                return max(hp * a + recur(a, b - 1), dmg * hp + dmg_h)\n            else:\n                return max(hp * a + recur(a - 1, b - 1), dmg * hp + recur(a - 1, b))\n\n        return recur(max_hp, dmg)\n    n, a, b = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    return str(solve(max(lst), min(lst), sum(lst), a, lst))\n\"\"\"\n\n\"\"\"\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u0438\u0445 \u043a\u0430\u043a \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0438\u0437 n \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u0417\u0430\u0442\u0435\u043c \u0434\u0430\u043d\u044b \u0447\u0438\u0441\u043b\u0430 a \u0438 b, \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044f \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0438 \u0441\u0443\u043c\u043c \u0434\u0432\u0443\u0445 \u0438\u0437 \u043d\u0438\u0445.\n\n\u0415\u0441\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0438\u0437 \u043d\u0438\u0445.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 m (1 \u2264 n, m \u2264 100) \u2014 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u044b n \u0447\u0438\u0441\u0435\u043b a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a \u0438 b (1 \u2264 a, b \u2264 100) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u0447\u0438\u0441\u043b\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\n\u0422\u0435\u0441\u0442 1\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n3 1\n1 2 3\n1\n1 2\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n6\n\n\u0422\u0435\u0441\u0442 2\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n3 2\n2 4 6\n1\n1 2\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n\n4\n\"\"\"\n\ndef"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, a, b = [int(n) for n in stdin.split(\" \")]\n    hp, dmg = [int(n) for n in stdin.split(\" \")]\n    hp_list, dmg_list, result = [hp], [dmg], 0\n    a, b = min(a,b), max(a,b)\n    for i in range(n-1):\n        new_hp, new_dmg = [int(n) for n in stdin.split(\" \")]\n        hp_list.append(new_hp)\n        dmg_list.append(new_dmg)\n    hp_list.append(hp)\n    dmg_list.append(dmg)\n    # print(hp_list, dmg_list)\n    hp_list.sort()\n    dmg_list.sort()\n    if a < b:\n        for i in range(n-1):\n            result += hp_list[i] * (a ** i) * (b ** (n-1-i))\n    else:\n        for i in range(n-1):\n            result += dmg_list[i] * (a ** i) * (b ** (n-1-i))\n    return result\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.split())\n    hp, dmg = [], []\n    for _ in range(a):\n        hp.append(int(stdin))\n    for _ in range(b):\n        dmg.append(int(stdin))\n\n    hp.sort(reverse=True)\n    dmg.sort(reverse=True)\n\n    sum = 0\n    while a > 0 and b > 0:\n        if hp[0] <= dmg[0]:\n            sum += hp[0] * 2\n            a -= 1\n        else:\n            sum += dmg[0]\n            b -= 1\n        hp.pop(0)\n        dmg.pop(0)\n    while a > 0:\n        sum += hp[0]\n        a -= 1\n    while b > 0:\n        sum += dmg[0]\n        b -= 1\n    return sum\n\ndef"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maze = [list(stdin[i:i + m]) for i in range(0, n * m, m)]\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == '*':\n                maze[i][j] = 'X'\n    # print(maze)\n    if k == 1:\n        return ''.join(['X' if maze[i][j] == 'X' else '.' for i in range(n) for j in range(m)])\n    if n < 1 or m < 1 or k < 1:\n        return 'IMPOSSIBLE'\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == 'X':\n                count += 1\n    if count < 2:\n        return 'IMPOSSIBLE'\n    if k < count:\n        return 'IMPOSSIBLE'\n    queue = []\n    out = ''\n    for i in range(k):\n        queue.append(('', 0))\n    while queue:\n        current, count = queue.pop(0)\n        if current == '':\n            for i in range(n):\n                for j in range(m):\n                    if maze[i][j] == 'X':\n                        if maze[i][j] == 'X':\n                            queue.append(('', 0))\n                        else:\n                            queue.append((current + 'R', count + 1))\n            continue\n        if count < k:\n            continue\n        for i in range(n):\n            for j in range(m):\n                if maze[i][j] == 'X':\n                    if maze[i][j] == 'X':\n                        if current[-1] == 'R' and j == m - 1:\n                            out = current + 'D'\n                        elif current[-1] == 'D' and i == n - 1:\n                            out = current + 'R'\n                        else:\n                            queue.append((current + 'R', count + 1))\n                    else:\n                        if current[-1] == 'R' and maze[i + 1][j] == 'X':\n                            out = current + 'D'\n                        elif current[-1] == 'D' and maze[i][j + 1] == 'X':\n                            out = current + 'R'\n                        else:\n                            queue.append((current + 'R', count + 1))\n    return out\n\n\ndef"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def move_rob_1(dir, x, y):\n        if dir == 'L':\n            return (x, y + 1)\n        if dir == 'U':\n            return (x - 1, y)\n        if dir == 'R':\n            return (x, y - 1)\n        if dir == 'D':\n            return (x + 1, y)\n\n    def move_rob_2(dir, x, y):\n        if dir == 'L':\n            return (x, y - 1)\n        if dir == 'U':\n            return (x + 1, y)\n        if dir == 'R':\n            return (x, y + 1)\n        if dir == 'D':\n            return (x - 1, y)\n\n    dir, x, y = stdin.split()\n    x, y = int(x), int(y)\n    n, m, k = [int(i) for i in stdin.split()]\n    cnt = 0\n    for i in range(k):\n        if cnt == 0:\n            if y + 1 == m or x - 1 == n or y - 1 == -1 or x + 1 == -1:\n                dir = 'IMPOSSIBLE'\n                break\n            else:\n                dir = 'L'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 1:\n            if dir == 'L':\n                if x == n or y - 1 == -1 or x + 1 == -1:\n                    dir = 'IMPOSSIBLE'\n                    break\n                else:\n                    dir = 'U'\n                    x, y = move_rob_1(dir, x, y)\n                    cnt = cnt + 1\n            else:\n                dir = 'L'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 2:\n            if dir == 'U':\n                if y == m or x + 1 == n or y - 1 == -1 or x - 1 == -1:\n                    dir = 'IMPOSSIBLE'\n                    break\n                else:\n                    dir = 'R'\n                    x, y = move_rob_1(dir, x, y)\n                    cnt = cnt + 1\n            else:\n                dir = 'U'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 3:\n            if dir == 'R':\n                if x == n or y + 1 == m or y - 1 == -1 or x - 1 == -1:\n                    dir = 'IMPOSSIBLE'\n                    break\n                else:\n                    dir = 'D'\n                    x, y = move_rob_1(dir, x, y)\n                    cnt = cnt + 1\n            else:\n                dir = 'R'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 4:\n            if dir == 'D':\n                if y == m or x - 1 == n or y + 1 == m or x + 1 == -1:\n                    dir = 'IMPOSSIBLE'\n                    break\n                else:\n                    dir = 'L'\n                    x, y = move_rob_1(dir, x, y)\n                    cnt = cnt + 1\n            else:\n                dir = 'D'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 5:\n            if dir == 'L':\n                if y == m or x + 1 == n or y + 1 == m or x - 1 == -1:\n                    dir = 'IMPOSSIBLE'\n                    break\n                else:\n                    dir = 'U'\n                    x, y = move_rob_1(dir, x, y)\n                    cnt = cnt + 1\n            else:\n                dir = 'L'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 6:\n            if dir == 'U':\n                if y == m or x - 1 == n or y + 1 == m or x + 1 == -1:\n                    dir = 'IMPOSSIBLE'\n                    break\n                else:\n                    dir = 'L'\n                    x, y = move_rob_1(dir, x, y)\n                    cnt = cnt + 1\n            else:\n                dir = 'U'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 7:\n            if dir == 'R':\n                if x == n or y + 1 == m or y - 1 == -1 or x - 1 == -1:\n                    dir = 'IMPOSSIBLE'\n                    break\n                else:\n                    dir = 'U'\n                    x, y = move_rob_1(dir, x, y)\n                    cnt = cnt + 1\n            else:\n                dir = 'R'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 8:\n            if dir == 'U':\n                if y == m or x - 1 == n or y - 1 == -1 or x + 1 == -1:\n                    dir = 'IMPOSSIBLE'\n                    break\n                else:\n                    dir = 'L'\n                    x, y = move_rob_1(dir, x, y)\n                    cnt = cnt + 1\n            else:\n                dir = 'U'\n                x, y = move_rob_1(dir, x, y)\n                cnt = cnt + 1\n        elif cnt == 9:\n            if dir == 'L':\n                if y == m or x + 1 == n or y + 1 == m or x"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    lines = stdin.split('\\n')\n    n, m, k = [int(x) for x in re.findall(r'\\d+', lines[0])]\n    way = list(lines[1].replace('*', 'X'))\n\n    # print(n, m, k)\n    # print(way)\n\n    if n == m == 1:\n        return way[0]\n\n    count = 0\n    for step in range(1, len(way)):\n        if way[step] == 'X':\n            if way[step - 1] == 'L':\n                if step + 1 < len(way) and way[step + 1] == 'L':\n                    count += 1\n                else:\n                    return 'IMPOSSIBLE'\n            else:\n                if step + 1 < len(way) and way[step + 1] == 'R':\n                    count += 1\n                else:\n                    return 'IMPOSSIBLE'\n        else:\n            count = 0\n\n    # print(count)\n    if count > k:\n        return 'IMPOSSIBLE'\n\n    while len(way) < k:\n        way.append('X')\n\n    return ''.join(way[:k])\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #..."
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [list(stdin) for _ in range(n)]\n    first_pos = None\n    for row in range(n):\n        for col in range(m):\n            if matrix[row][col] == 'X':\n                first_pos = row, col\n                break\n        if first_pos:\n            break\n    second_pos = first_pos[0] - 1, first_pos[1]\n    third_pos = first_pos[0] + 1, first_pos[1]\n    fourth_pos = first_pos[0], first_pos[1] - 1\n    fifth_pos = first_pos[0], first_pos[1] + 1\n    if n < 2 or m < 2:\n        return 'IMPOSSIBLE'\n    if k > n * m:\n        return 'IMPOSSIBLE'\n    path = []\n    visited = set()\n    visited.add((first_pos, second_pos, third_pos, fourth_pos, fifth_pos))\n    way = []\n    pos = first_pos\n    while k - 1:\n        path.append(pos)\n        pos = matrix[pos[0]][pos[1]]\n        k -= 1\n        if k == 0:\n            way.append(pos)\n            break\n    if k == 0:\n        return ''.join(way[::-1]) + 'L'\n    for row in range(1, n + 1):\n        for col in range(1, m + 1):\n            new_first_pos = row, col\n            new_second_pos = new_first_pos[0] - 1, new_first_pos[1]\n            new_third_pos = new_first_pos[0] + 1, new_first_pos[1]\n            new_fourth_pos = new_first_pos[0], new_first_pos[1] - 1\n            new_fifth_pos = new_first_pos[0], new_first_pos[1] + 1\n            if new_first_pos in path or new_second_pos in path or new_third_pos in path or new_fourth_pos in path or new_fifth_pos in path:\n                continue\n            if (new_first_pos, new_second_pos, new_third_pos, new_fourth_pos, new_fifth_pos) not in visited:\n                if new_first_pos == path[0]:\n                    way.append('U')\n                elif new_second_pos == path[0]:\n                    way.append('D')\n                elif new_third_pos == path[0]:\n                    way.append('R')\n                elif new_fourth_pos == path[0]:\n                    way.append('L')\n                elif new_fifth_pos == path[0]:\n                    way.append('R')\n                    way.append('L')\n                way.append('R')\n                visited.add((new_first_pos, new_second_pos, new_third_pos, new_fourth_pos, new_fifth_pos))\n                k -= 5\n                if k == 0:\n                    way.append('U')\n                    way.append('L')\n                    break\n            if (new_first_pos, new_second_pos, new_third_pos, new_fourth_pos, new_fifth_pos) not in visited:\n                if new_first_pos == path[0]:\n                    way.append('U')\n                elif new_second_pos == path[0]:\n                    way.append('D')\n                elif new_third_pos == path[0]:\n                    way.append('R')\n                elif new_fourth_pos == path[0]:\n                    way.append('L')\n                elif new_fifth_pos == path[0]:\n                    way.append('L')\n                    way.append('R')\n                way.append('L')\n                visited.add((new_first_pos, new_second_pos, new_third_pos, new_fourth_pos, new_fifth_pos))\n                k -= 5\n                if k == 0:\n                    way.append('U')\n                    way.append('R')\n                    break\n    return ''.join(way[::-1])\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, k = [int(s) for s in stdin.split()]\n    maze = [s for s in stdin.split()]\n    res = ''\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == 'X':\n                res = 'IMPOSSIBLE'\n    if len(res) > 0:\n        return res\n    for i in range(k):\n        for j in range(n):\n            if j + 1 < n and maze[j + 1][j] == 'L':\n                res = 'D' + res\n                j += 1\n            elif j - 1 >= 0 and maze[j - 1][j] == 'R':\n                res = 'U' + res\n                j -= 1\n            elif j + 1 < n and maze[j + 1][j] == 'R':\n                res = 'D' + res\n                j += 1\n            elif j - 1 >= 0 and maze[j - 1][j] == 'L':\n                res = 'U' + res\n                j -= 1\n            elif j + 1 < n and maze[j + 1][j] == 'L':\n                res = 'D' + res\n                j += 1\n            elif j - 1 >= 0 and maze[j - 1][j] == 'R':\n                res = 'U' + res\n                j -= 1\n            elif j + 1 < n and maze[j + 1][j] == 'R':\n                res = 'D' + res\n                j += 1\n            elif j - 1 >= 0 and maze[j - 1][j] == 'L':\n                res = 'U' + res\n                j -= 1\n            else:\n                res = 'IMPOSSIBLE'\n    return res\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the first line contains three integers n, m and k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10^6) \u2014 the size of the maze and the length of the cycle. \n\n    each of the following n lines contains m symbols \u2014 the description of the maze. If the symbol equals to \".\" the current cell is empty. If the symbol equals to \"*\" the current cell is occupied by an obstacle. If the symbol equals to \"X\" then initially the Robot is in this cell and it is empty. It is guaranteed that the symbol \"X\" is found in the maze exactly once. \n\n    return \n    \"\"\"\n   ...\n    return stdout"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    maze = []\n    for _ in range(n):\n        maze.append(list(stdin.split('\\n')[1]))\n    return \"\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(num) for num in stdin.split()]\n    maze = []\n    for i in range(n):\n        maze.append([])\n        for j in range(m):\n            if stdin[i*m+j] == \"*\":\n                maze[i].append(True)\n            elif stdin[i*m+j] == \"X\":\n                maze[i].append(False)\n            else:\n                maze[i].append(False)\n\n    def solve(i, j, count):\n        if count == k and maze[i][j]:\n            return \"D\" * k\n        if count < k and maze[i][j]:\n            return \"D\" * (count + 1) + \"R\" * (k - count - 1) + \"D\" * (count + 1) + \"L\" * (k - count - 1) + \"U\" * (k - count - 1) + \"L\" * (count + 1) + \"U\" * (k - count - 1) + \"R\" * (count + 1)\n        if count < k and not maze[i][j]:\n            return \"IMPOSSIBLE\"\n        if count >= k:\n            return \"IMPOSSIBLE\"\n        return solve(i + 1, j, count + 1) + solve(i, j + 1, count + 1) + solve(i - 1, j, count + 1) + solve(i, j - 1, count + 1)\n\n    return solve(0, 0, 0)\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a // b if a % b == 0 else a // b + 1\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = [int(x) for x in stdin.split()]\n    return str(a*b-1)\n\nprint(solution(\"1 1\"))\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.strip().split(\" \")]\n    ans = 1\n    while a >= b:\n        a -= b\n        ans += 1\n    return ans\n\"\"\"\n\n\ndef"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = 0\n    while a!= b:\n        if a > b:\n            a -= b\n            c += 1\n        else:\n            b -= a\n            c += 1\n    return c + 1\n\nsolution('10 7')\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(\" \")]\n    if a == b:\n        return 0\n    if a < b:\n        return 1\n    if a > b:\n        return ceil(a / b) - ceil(a / b) + 1\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a * (a - 1) // 2\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = a - b\n    count = 1\n    while k >= 1:\n        k -= k // 2\n        count += 1\n    return count\n\n\nprint(solution(input()))\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = (a + b) // 2\n    if (a + b) % 2:\n        return str(c)\n    else:\n        return str(c - 1)\n    \n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a, b = map(int, stdin.split())\n    return str(int(a / b) if a % b == 0 else int(a / b) + 1)\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    x = int(a * b ** 0.5)\n    if x ** 2 == a * b:\n        return str(x)\n    return str(x + 1)\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin:\n    :return:\n    '''\n\n    # get input values\n    n = int(stdin.split('\\n')[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    b = [int(i) for i in stdin.split('\\n')[2].split()]\n    assert n == len(a)\n    assert n == len(b)\n\n    # get list of all permutations\n    perm = list(range(1, n+1))\n\n    # get a list of all permutations which have the same lenght as b\n    a_perm = []\n    for i in perm:\n        if a == [i] * n:\n            a_perm.append(i)\n\n    # get a list of all permutations which have the same lenght as a\n    b_perm = []\n    for i in perm:\n        if b == [i] * n:\n            b_perm.append(i)\n\n    # get a list of all permutations which have the same value as a and b\n    equal_a_b = []\n    for i in a_perm:\n        if i in b_perm:\n            equal_a_b.append(i)\n\n    # get a list of all permutations which have the same value as a and b\n    equal_a_b = []\n    for i in a_perm:\n        for j in b_perm:\n            if i == j:\n                equal_a_b.append(i)\n\n    # get a list of all permutations which have the same value as a and b\n    equal_a_b = []\n    for i in a_perm:\n        for j in b_perm:\n            if i == j:\n                equal_a_b.append(i)\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at least one i, j and k such that a_i = b_j and a_j = b_k\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j] and a[j] == b[i]:\n                equal_a_b.append(a[i])\n\n    # get all permutations which have at"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    length = int(stdin[0])\n    first = stdin[1].split(' ')\n    second = stdin[2].split(' ')\n    numbers = []\n    for i in range(length):\n        numbers.append(i + 1)\n    p = [0] * length\n    for i in range(length):\n        for j in range(length):\n            if (first[i] == second[j] and p[i]!= j):\n                p[i] = j\n                break\n    for i in range(length):\n        print(numbers[p[i]], end=' ')\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline().strip())\n    seq1 = list(map(int, stdin.readline().strip().split()))\n    seq2 = list(map(int, stdin.readline().strip().split()))\n\n    seq1 = set(seq1)\n    seq2 = set(seq2)\n    seq1 = list(seq1)\n    seq2 = list(seq2)\n\n    for i in seq1:\n        if i in seq2:\n            seq2.remove(i)\n\n    return''.join(list(map(str, seq2)))\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Convert input to int and sort list\n    Iterate over list and store the max integer\n    \"\"\"\n    n = int(stdin.split()[0])\n    int_list = sorted([int(i) for i in stdin.split()[1:]], reverse=True)\n    max_int = max(int_list)\n    out_list = []\n\n    for num in int_list:\n        out_list.append(str(max_int - num + 1))\n        max_int -= num\n    return \" \".join(out_list)\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(c) for c in stdin.split()]\n    y = list(range(1, len(x) + 1))\n    return''.join(str(z) for z in sorted(y, key=lambda k: [x[k-1] for x in (y, x)][k % 2]))\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    p = list(range(1, n + 1))\n    a = list(set(a))\n    b = list(set(b))\n    \n    for num in a:\n        try:\n            p.remove(num)\n        except:\n            continue\n    \n    for num in b:\n        try:\n            p.remove(num)\n        except:\n            continue\n    \n    return''.join([str(num) for num in p])\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    b = stdin.split()[1:]\n    s = set()\n    a_b = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            a_b.add(str(a[i]) + str(b[j]))\n    for i in range(n):\n        s.add(str(a[i]) + str(b[i]))\n    for i in range(n):\n        s.add(str(b[i]) + str(a[i]))\n    s = list(s)\n    for i in range(n):\n        s.append(str(a[i]) + str(b[i]))\n    s = set(s)\n    for i in range(n):\n        s.add(str(a[i]) + str(a[i]))\n        s.add(str(b[i]) + str(b[i]))\n    s = list(s)\n    p = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            p.add(str(s[i]) + str(s[j]))\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            p.add(str(s[i]) + str(s[j]))\n    p = list(p)\n    for i in range(n):\n        p.append(str(a[i]) + str(a[i]))\n        p.append(str(b[i]) + str(b[i]))\n    p = set(p)\n    res = []\n    for i in p:\n        if i not in a_b:\n            res.append(i)\n    return \" \".join(sorted(res)[0].split())\n\n\ndef"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n\n    n = int(input[0])\n    a = list(map(int, input[1].split()))\n    b = list(map(int, input[2].split()))\n\n    sorted_a = sorted(a)\n    sorted_b = sorted(b)\n\n    cnt_a, cnt_b = 0, 0\n    for a_num, b_num in zip(sorted_a, sorted_b):\n        if a_num!= b_num:\n            cnt_a += 1\n            cnt_b += 1\n        elif a_num == b_num:\n            cnt_a += 1\n    \n    if cnt_a == n - 1 and cnt_b == n - 1:\n        # all numbers are different\n        print(*sorted_a)\n    elif cnt_a == n - 1:\n        # there are only b_num are the same\n        print(*sorted_b)\n    else:\n        # there are only a_num are the same\n        print(*sorted_a)\n\n    return ''\n\nprint(solution(stdin))"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if abs(((i + j + k) * 180 - a) * ((i + j + k) * 180 - a)) < abs(((i + j + k) * 180 - a) * ((i + j + k) * 180 - a)):\n                    res = [i + 1, j + 1, k + 1]\n    return''.join(map(str, res))\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(n) for n in stdin.split()]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) % 2 == 0:\n                    if (i ** 2 + j ** 2 + k ** 2) % 2 == 0:\n                        if abs(a - (i * j * k) / (2 * (i + j + k))) < abs(a - (i * j * k) / (2 * (i + j + k - 1))):\n                            if abs(a - (i * j * k) / (2 * (i + j + k)) - a) < abs(a - (i * j * k) / (2 * (i + j + k - 1)) - a):\n                                return '{} {} {}'.format(i + 1, j + 1, k + 1)\n                        else:\n                            return '{} {} {}'.format(i + 1, j + 1, k + 1)\n                    else:\n                        return '{} {} {}'.format(i + 1, j + 1, k + 1)\n                else:\n                    return '{} {} {}'.format(i + 1, j + 1, k + 1)\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a == (180 - (i + j + k))):\n                    result.append(str(i + 1))\n                    result.append(str(j + 1))\n                    result.append(str(k + 1))\n                    break\n            if len(result) > 0:\n                break\n        if len(result) > 0:\n            break\n    return''.join(result)\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"1 2 3\" # only if n is 3\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split(' '))\n    if n == 3:\n        return f'{1} {2} {3}'\n    angles = [(i, i + n - 1) for i in range(1, n - 1)]\n    return f'{sorted(angles, key=lambda x: abs(x[1] - x[0]))[0][0]} {sorted(angles, key=lambda x: abs(x[1] - x[0]))[1][0]} {sorted(angles, key=lambda x: abs(x[1] - x[0]))[2][0]}'\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n\n    return \"\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    n, a = stdin.split(' ')\n    n, a = int(n), int(a)\n\n    return''.join(map(str, [1, 2, n] if a == 90 else [1, n, 2]))\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    steps = [360] * n\n    steps[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            steps[j] = (steps[j] + 360) % 360\n    if steps.count(0) > 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    \n    for i in range(len(stdin)):\n        stdin[i] = int(stdin[i])\n    \n    if stdin[-1] == 0:\n        return \"YES\"\n    elif stdin[0] == 0 and stdin[1] == 0 and stdin[2] == 0:\n        return \"YES\"\n    elif stdin[0]!= 0 and stdin[1]!= 0 and stdin[2]!= 0 and abs(stdin[0] - stdin[1])!= abs(stdin[0] - stdin[2]) and abs(stdin[1] - stdin[2]) == abs(stdin[0] - stdin[1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"YES\"\n    for i in range(n):\n        angle = int(stdin)\n        if (angle % 360) % 180 == 0:\n            result = \"NO\"\n        else:\n            result = \"YES\"\n    return result\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = 360 % n\n    if d:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds if the pointer can point at 0 after rotating the lock n times.\n    \"\"\"\n    n = int(stdin)\n\n    for i in range(n):\n        angle = int(stdin)\n        if i!= 0 and angle == 0:\n            return 'NO'\n\n        if angle < 0 or angle > 180:\n            return 'NO'\n\n        # Rotate the wheel clockwise or counterclockwise.\n        if angle % 360 <= 180:\n            angle = 360 - angle % 360\n\n        # The pointer should point at 0 after the rotation.\n        angle = (angle % 360) + angle\n\n    return 'YES'\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(x) for x in stdin.split())\n    return str(min(a + b, a + c, b + c) - d)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    # \u0441\u0443\u043c\u043c\u0430 \u0434\u0432\u0443\u0445 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u0447\u0438\u0441\u0435\u043b\n    # \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 a = 2, b = 3, c = 1, d = 3, \u0442\u043e a + b = 4 + 3 = 7, a + b + c = 2 + 3 + 1 = 6, a + b + c + d = 2 + 3 + 1 + 3 = 10.\n    # \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 d.\n    # \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u043a\u0430\u043a a, b, c, d.\n    # \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n    # \u0420\u0430\u0437\u043c\u0435\u0440 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435.\n    return str(max([(i + j + k) // 2 for i in range(1, a + 1) for j in range(1, b + 1) for k in range(1, c + 1) if (i + j + k) >= d]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n\n    d2 = d ** 2\n    if c + d <= b or b + d <= a or a + d <= c:\n        return str(max(c - a, c - b, c - c))\n\n    if c + d == b or c + d == a or c + d == c:\n        return str(max(b - c, a - c, c - a))\n\n    if a + d == b or a + d == c or a + d == a:\n        return str(max(a - b, b - c, c - a))\n\n    if b + d == c or b + d == a or b + d == b:\n        return str(max(c - a, b - a, a - b))\n\n    return str(b - a)\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(i) for i in stdin.split())\n    if abs(a-c) >= d and abs(b-c) >= d:\n        return str(max(a, b, c) - min(a, b, c) + 1)\n    if abs(a-c) >= d:\n        return str(abs(a-b) - min(a, b, c) + 1)\n    if abs(b-c) >= d:\n        return str(abs(b-a) - min(a, b, c) + 1)\n    return str(max(a, b, c) - min(a, b, c) + 1)"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(i) for i in stdin.split())\n    return max(abs(c - b) - d, abs(a - c) - d, abs(a - b) - d)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/training2TUWYH-7A8/\n    '''\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    return min(a+b, a+c, a+b+c, b+c)\n\n\nprint(solution('5 2 6 3'))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    print(min(max(a, b) - min(a, b), max(b, c) - min(b, c), max(c, d) - min(c, d), max(d, a) - min(d, a)))\n\n\nsolution(\"5 2 6 3\")\nsolution(\"3 1 5 6\")\nsolution(\"8 3 3 2\")\n\n\n-----\n\nimport collections\n\ndef"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    min_time = max(abs(b - c), abs(c - d), abs(a - d))\n    if min_time <= a:\n        min_time = abs(c - a)\n    return str(min_time)"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    if a == b == c == d:\n        return \"0\"\n    n = 0\n    while True:\n        if a == b == c == d:\n            break\n        if a + 1 == b or a - 1 == b:\n            if a + 1 == b:\n                n += a - b\n            else:\n                n += b - a\n            a, b = b, a\n        elif a + 2 == c or a - 2 == c:\n            if a + 2 == c:\n                n += a - c\n            else:\n                n += c - a\n            a, c = c, a\n        elif b + 1 == c or b - 1 == c:\n            if b + 1 == c:\n                n += b - c\n            else:\n                n += c - b\n            b, c = c, b\n        elif b + 2 == a or b - 2 == a:\n            if b + 2 == a:\n                n += b - a\n            else:\n                n += a - b\n            b, a = a, b\n        elif c + 1 == a or c - 1 == a:\n            if c + 1 == a:\n                n += c - a\n            else:\n                n += a - c\n            c, a = a, c\n        elif c + 2 == b or c - 2 == b:\n            if c + 2 == b:\n                n += c - b\n            else:\n                n += b - c\n            c, b = b, c\n        else:\n            raise ValueError\n    return str(n)\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a - b if a > b else b - a\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    if b == 0:\n        return 0\n    return 1 + solution(str(a), str(b)[1:])\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    def f(a, b):\n        if b == 0:\n            return 0\n        elif a < b:\n            return 1 + f(a, b - gcd(a, b))\n        else:\n            return 1 + f(b, a % b)\n    return f(x, y)\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x <= 0 and y <= 0:\n        return 0\n    elif x <= 0 and y > 0:\n        return 1\n    elif x > 0 and y <= 0:\n        return x\n    else:\n        gcd = find_gcd(x, y)\n        return x + (y - gcd)\n\n\ndef"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    if x < y:\n        x, y = y, x\n    if x == 0:\n        return 0\n    elif y == 0:\n        return 1\n    else:\n        return 1 + solution(str(x * y // gcd(x, y)))"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return 1 + solution(str(x), str(y)) if x >= y else x - y\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    while y:\n        x, y = y, x % y\n    return x"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    g = 1\n    while x > 1:\n        g = gcd(x, y)\n        x -= g\n        y -= g\n    return x + y\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 5''')\n    '''3\n    >>> solution('''6 3''')\n    '''1\n    \"\"\"\n    x, y = [int(n) for n in stdin.split(' ')]\n    result = 0\n    while x > 0:\n        x, y = y % x, x\n    return y\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x, y = map(int, stdin.split())\n    if y == 0:\n        return '0'\n    elif x % y == 0:\n        return '1'\n    return '1 +'+ solution(x, y - gcd(x, y))\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We can try to enumerate all possibilities.\n    If we do not do this, we will run out of time.\n    If we try to do this, we will run out of memory.\n    '''\n    pass"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 -1\n   ... -1 4\n   ... -1 6''')\n    'Yes'\n    \"\"\"\n    n = int(stdin.readline())\n    a = []\n    b = []\n    for line in stdin.readlines():\n        i, j = list(map(int, line.split()))\n        a.append(i)\n        b.append(j)\n    a.sort()\n    b.sort()\n    a_i = 0\n    b_i = 0\n    consistent = True\n    while a_i < n and b_i < n:\n        if a[a_i] == -1:\n            a_i += 1\n            continue\n        if b[b_i] == -1:\n            b_i += 1\n            continue\n        if a[a_i] == b[b_i] - 1:\n            a_i += 1\n            b_i += 1\n            continue\n        if a[a_i] - b[b_i] > 1:\n            consistent = False\n            break\n        if a[a_i] - b[b_i] == 0:\n            if a_i + 1 == b_i + 1:\n                consistent = False\n            else:\n                a_i += 1\n                b_i += 1\n            continue\n        if a[a_i] - b[b_i] == 1:\n            consistent = False\n            break\n    if not consistent:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom sys import stdin, stdout\n\nn = int(stdin.readline())\nl = [stdin.readline().split() for _ in range(n)]"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if recheck(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split()[0])\n    count = 0\n    A = []\n    B = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[i*2+1:i*2+3])\n        A.append(a)\n        B.append(b)\n        if a == -1:\n            count += 1\n        if b == -1:\n            count += 1\n    if count % 2 == 1:\n        return \"No\"\n    else:\n        check = True\n        for i in range(n):\n            check = check and (A[i] == -1) or (A[i] == B[i])\n            check = check and (B[i] == -1) or (A[i] == B[i])\n        if check:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    n = int(stdin.readline())\n    seq_a = []\n    seq_b = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        seq_a.append(a)\n        seq_b.append(b)\n    check_count = 0\n    a_index = 0\n    b_index = 0\n    while a_index < n and b_index < n:\n        a_index += 1\n        b_index += 1\n        if seq_a[a_index - 1] == -1:\n            seq_a.pop(a_index - 1)\n        if seq_b[b_index - 1] == -1:\n            seq_b.pop(b_index - 1)\n        if seq_a[a_index - 1] == seq_b[b_index - 1]:\n            check_count += 1\n        else:\n            break\n    if check_count == n:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    records = [[int(s) for s in rec.split(' ')] for rec in stdin[1:]]\n\n    return 'Yes' if is_correct(records) else 'No'\n\n\ndef"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_list = [int(x) for x in stdin.split('\\n')]\n    x_list = x_list[:8]\n    y_list = [int(y) for y in stdin.split('\\n')]\n    y_list = y_list[8:]\n\n    x_list.sort()\n    y_list.sort()\n    x_list.append(0)\n    y_list.append(0)\n\n    if x_list[1] < x_list[2] < x_list[3] and y_list[1] < y_list[2] < y_list[3]:\n        return \"respectable\"\n    else:\n        return \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 0\\\\n0 1\\\\n0 2\\\\n1 0\\\\n1 2\\\\n2 0\\\\n2 1\\\\n2 2\")\n    'ugly'\n    >>> solution(\"0 0\\\\n1 0\\\\n2 0\\\\n3 0\\\\n4 0\\\\n5 0\\\\n6 0\\\\n7 0\")\n    'ugly'\n    \"\"\"\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    x3, y3 = map(int, stdin.split())\n    x4, y4 = map(int, stdin.split())\n    x5, y5 = map(int, stdin.split())\n    x6, y6 = map(int, stdin.split())\n    x7, y7 = map(int, stdin.split())\n    x8, y8 = map(int, stdin.split())\n\n    if x1 == x2 or y1 == y2 or x3 == x4 or y3 == y4 or \\\n            x5 == x6 or y5 == y6 or x7 == x8 or y7 == y8:\n        return 'ugly'\n    else:\n        if (x1 < x2 < x3 and y1 < y2 < y3) or \\\n                (x4 < x5 < x6 and y4 < y5 < y6):\n            return 'ugly'\n        else:\n            if (x1 < x2 < x3 and y1 < y2 < y3 and\n                    x4 < x5 < x6 and y4 < y5 < y6):\n                return 'ugly'\n            else:\n                if (x1 < x2 < x3 and y1 < y2 < y3 and\n                        x5 < x6 < x7 and y5 < y6 < y7):\n                    return 'ugly'\n                else:\n                    if (x1 < x2 < x3 and y1 < y2 < y3 and\n                            x6 < x7 < x8 and y6 < y7 < y8):\n                        return 'ugly'\n                    else:\n                        return 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    points = [list(map(int, input().split())) for _ in range(8)]\n\n    def in_triangle(p1, p2, p3):\n        return max(p1[0], p2[0]) < p3[0] and max(p2[0], p3[0]) < p1[0] and \\\n               max(p1[1], p2[1]) < p3[1] and max(p2[1], p3[1]) < p1[1]\n\n    def dist(p1, p2):\n        return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n\n    def avgs(p1, p2, p3):\n        return sum([p1[0], p2[0], p3[0]]) / 3, sum([p1[1], p2[1], p3[1]]) / 3\n\n    # check if all points are distinct\n    if len(set(map(tuple, points))) < 8:\n        return \"ugly\"\n\n    # check if every line is a pairwise intersection of three distinct lines\n    lines = {(p1, p2): None for p1, p2 in itertools.combinations(points, 2)}\n    for p1, p2 in lines:\n        for p3 in points:\n            if p3 == p1 or p3 == p2:\n                continue\n            if not in_triangle(p1, p2, p3):\n                return \"ugly\"\n\n    # check if all lines intersect each other at an average point\n    for p1, p2 in lines:\n        for p3 in points:\n            if p3 == p1 or p3 == p2:\n                continue\n            if p1!= p2 and p2!= p3 and p1!= p3:\n                if in_triangle(p1, p2, p3):\n                    return \"ugly\"\n\n    # check if all points are distinct from the average point\n    for p in points:\n        if points.count(p) > 1:\n            return \"ugly\"\n\n    return \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    points = []\n    for i in stdin.split('\\n'):\n        points.append(tuple(map(int, i.split(' '))))\n    #print(points)\n    def check_point(p1,p2,p3):\n        if (p1[0] < p3[0] and p2[0] < p3[0]) or (p1[0] > p3[0] and p2[0] > p3[0]):\n            return 0\n        if (p1[0] < p3[0] and p2[0] > p3[0]) or (p1[0] > p3[0] and p2[0] < p3[0]):\n            return 1\n        if (p1[1] < p3[1] and p2[1] < p3[1]) or (p1[1] > p3[1] and p2[1] > p3[1]):\n            return 2\n        if (p1[1] < p3[1] and p2[1] > p3[1]) or (p1[1] > p3[1] and p2[1] < p3[1]):\n            return 3\n    def check_point1(p1,p2,p3):\n        if (p1[0] < p3[0] and p2[0] < p3[0]) or (p1[0] > p3[0] and p2[0] > p3[0]):\n            return 0\n        if (p1[0] < p3[0] and p2[0] > p3[0]) or (p1[0] > p3[0] and p2[0] < p3[0]):\n            return 1\n        if (p1[1] < p3[1] and p2[1] < p3[1]) or (p1[1] > p3[1] and p2[1] > p3[1]):\n            return 2\n        if (p1[1] < p3[1] and p2[1] > p3[1]) or (p1[1] > p3[1] and p2[1] < p3[1]):\n            return 3\n    def check_point2(p1,p2,p3):\n        if (p1[0] < p3[0] and p2[0] < p3[0]) or (p1[0] > p3[0] and p2[0] > p3[0]):\n            return 0\n        if (p1[0] < p3[0] and p2[0] > p3[0]) or (p1[0] > p3[0] and p2[0] < p3[0]):\n            return 1\n        if (p1[1] < p3[1] and p2[1] < p3[1]) or (p1[1] > p3[1] and p2[1] > p3[1]):\n            return 2\n        if (p1[1] < p3[1] and p2[1] > p3[1]) or (p1[1] > p3[1] and p2[1] < p3[1]):\n            return 3\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for p in points]))!= 8:\n        return 'ugly'\n    if len(set([(p[0], p[1]) for"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [], []\n    for i in range(len(stdin) // 2):\n        a, b = map(int, stdin[i * 2].split())\n        x.append(a)\n        y.append(b)\n    m1, m2, m3, m4 = 0, 0, 0, 0\n    l1, l2, l3, l4 = 0, 0, 0, 0\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i!= j:\n                if x[i] < x[j] and y[i] < y[j]:\n                    m1 += 1\n                if x[i] > x[j] and y[i] < y[j]:\n                    m2 += 1\n                if x[i] > x[j] and y[i] > y[j]:\n                    m3 += 1\n                if x[i] < x[j] and y[i] > y[j]:\n                    m4 += 1\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i!= j:\n                if x[i] < x[j] and y[i] > y[j]:\n                    l1 += 1\n                if x[i] > x[j] and y[i] > y[j]:\n                    l2 += 1\n                if x[i] > x[j] and y[i] < y[j]:\n                    l3 += 1\n                if x[i] < x[j] and y[i] < y[j]:\n                    l4 += 1\n    if m1 == m2 and m3 == m4 and l1 == l2 and l3 == l4:\n        return \"respectable\"\n    return \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = 0, 0, 0\n    for i in stdin.split():\n        a = max(a, int(i[0]))\n        b = max(b, int(i[1]))\n        c = min(c, int(i[0]))\n        c = min(c, int(i[1]))\n    if a < b < c:\n        return'respectable'\n    return 'ugly'\n    \"\"\"\n\n    # print(solution(stdin.strip()))\n    #\n    # assert solution(\n    #     \"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n3 2\\n4 0\\n4 1\\n4 2\\n5 0\\n5 1\\n5 2\\n6 0\\n6 1\\n6 2\\n7 0\\n7 1\\n7 2\\n\"\n    # ) == \"respectable\"\n    # assert solution(\n    #     \"0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0\\n8 0\\n9 0\\n10 0\\n11 0\\n12 0\\n13 0\\n14 0\\n15 0\\n16 0\\n17 0\\n18 0\\n19 0\\n20 0\\n21 0\\n22 0\\n23 0\\n24 0\\n25 0\\n26 0\\n27 0\\n28 0\\n29 0\\n30 0\\n31 0\\n32 0\\n33 0\\n34 0\\n35 0\\n36 0\\n37 0\\n38 0\\n39 0\\n40 0\\n41 0\\n42 0\\n43 0\\n44 0\\n45 0\\n46 0\\n47 0\\n48 0\\n49 0\\n50 0\\n51 0\\n52 0\\n53 0\\n54 0\\n55 0\\n56 0\\n57 0\\n58 0\\n59 0\\n60 0\\n61 0\\n62 0\\n63 0\\n64 0\\n65 0\\n66 0\\n67 0\\n68 0\\n69 0\\n70 0\\n71 0\\n72 0\\n73 0\\n74 0\\n75 0\\n76 0\\n77 0\\n78 0\\n79 0\\n80 0\\n81 0\\n82 0\\n83 0\\n84 0\\n85 0\\n86 0\\n87 0\\n88 0\\n89 0\\n90 0\\n91 0\\n92 0\\n93 0\\n94 0\\n95 0\\n96 0\\n97 0\\n98 0\\n99 0\\n100 0\\n101 0\\n102 0\\n103 0\\n104 0\\n105 0\\n106 0\\n107 0\\n108 0\\n109 0\\n110 0\\n111 0\\n112 0\\n113 0\\n114 0\\n115 0\\n116 0\\n117 0\\n118 0\\n119 0\\n120 0\\n121 0\\n122 0\\n123 0\\n124 0\\n125 0\\n126 0\\n127 0\\n128 0\\n129 0\\n130 0\\n131 0\\n132 0\\n133 0\\n134 0\\n135 0\\n136 0\\n137 0\\n138 0\\n139 0\\n140 0\\n141 0\\n142 0\\n143 0\\n144 0\\n145 0\\n146 0\\n147 0\\n148 0\\n149 0\\n150 0\\n151 0\\n152 0\\n153 0\\n154 0\\n155 0\\n156 0\\n157 0\\n158 0\\n159 0\\n160 0\\n161 0\\n162 0\\n163 0\\n164 0\\n165 0\\n166 0\\n167 0\\n168 0\\n169 0\\n170 0\\n171 0\\n172 0\\n173 0\\n174 0\\n175 0\\n176 0\\n177 0\\n178 0\\n179 0\\n180 0\\n181 0\\n182 0\\n183 0\\n184 0\\n185 0\\n186 0\\n187 0\\n188 0\\n189 0\\n190 0\\n191 0\\n192 0\\n193 0\\n194 0\\n195 0\\n196 0\\n197 0\\n198 0\\n199 0\\n200 0\\n201 0\\n202 0\\n203 0\\n204 0\\n205 0\\n206 0\\n207 0\\n208 0\\n209 0\\n210 0\\n211 0\\n212 0\\n213 0\\n214 0\\n215 0\\n216 0\\n217 0\\n218 0\\n219 0\\n220 0\\n221 0\\n222 0\\n223 0\\n224 0\\n225 0\\n226 0\\n227 0\\n228 0\\n229 0\\n230 0\\n231 0\\n232 0\\n233 0\\n234 0\\n235 0\\n236 0\\n237 0\\n238 0\\n239 0\\n240 0\\n241 0\\n242 0\\n243 0\\n244 0\\n245 0\\n246 0\\n247 0\\n248 0\\n249 0\\n250 0\\n251 0\\n252 0\\n253 0\\n254 0\\n255 0\\n256 0\\n257 0\\n258 0\\n259 0\\n260 0\\n261 0\\n262 0\\n263 0\\n264 0\\n265 0\\n266 0\\n267 0\\n268 0\\n269 0\\n270 0\\n271 0\\n272 0\\n273 0\\n274 0\\n275 0\\n276 0\\n277 0\\n278 0\\n279 0\\n280 0\\n281 0\\n282 0\\n283 0\\n284 0\\n285 0\\n286 0\\n287 0\\n288 0\\n289 0\\n290 0\\n291 0\\n292 0\\n293 0\\n294 0\\n295 0\\n296 0\\n297 0\\n298 0\\n299 0\\n300 0\\n301 0\\n302 0\\n303 0\\n304 0\\n305 0\\n306 0\\n307 0\\n308 0\\n309 0\\n310 0\\n311 0\\n312 0\\n313 0\\n314 0\\n315 0\\n316 0\\n317 0\\n318 0\\n319 0\\n320 0\\n321 0\\n322 0\\n323 0\\n324 0\\n325 0\\n326 0\\n327 0\\n328 0\\n329 0\\n330 0\\n331 0\\n332 0\\n333 0\\n334 0\\n335 0\\n336 0\\n337 0\\n338 0\\n339 0\\n340 0\\n341 0\\n342 0\\n343 0\\n344 0\\n345 0\\n346 0\\n347 0\\n348 0\\n349 0\\n350 0\\n351 0\\n352 0\\n353 0\\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = set()\n    for i in range(0, 8, 3):\n        for j in range(1, 4):\n            s.add(str(int(stdin[i+j-1])) + \" \" + str(int(stdin[i+j])))\n    return \"ugly\" if len(s) < 9 else \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    points = set()\n    for line in stdin.split('\\n'):\n        x, y = line.split(' ')\n        points.add((int(x), int(y)))\n    if len(points)!= 8:\n        return 'ugly'\n    for x, y in points:\n        if not (x + y in points and x - y in points):\n            return 'ugly'\n    return'respectable'\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 11\n   ... 1 1\n   ... 4 5\n   ... 5 11\n   ... 5 11\n   ... 5 11''')\n    'YES'\n    >>> solution('''5 11\n   ... 3 3\n   ... 4 5\n   ... 5 11\n   ... 5 11\n   ... 5 11''')\n    'NO'\n    >>> solution('''5 11\n   ... 1 1\n   ... 2 2\n   ... 3 3\n   ... 4 4\n   ... 5 5\n   ... 6 6\n   ... 7 7\n   ... 8 8\n   ... 9 9\n   ... 10 10\n   ... 11 11\n   ... 12 12\n   ... 13 13\n   ... 14 14\n   ... 15 15\n   ... 16 16\n   ... 17 17\n   ... 18 18\n   ... 19 19\n   ... 20 20\n   ... 21 21\n   ... 22 22\n   ... 23 23\n   ... 24 24\n   ... 25 25\n   ... 26 26\n   ... 27 27\n   ... 28 28\n   ... 29 29\n   ... 30 30\n   ... 31 31\n   ... 32 32\n   ... 33 33\n   ... 34 34\n   ... 35 35\n   ... 36 36\n   ... 37 37\n   ... 38 38\n   ... 39 39\n   ... 40 40\n   ... 41 41\n   ... 42 42\n   ... 43 43\n   ... 44 44\n   ... 45 45\n   ... 46 46\n   ... 47 47\n   ... 48 48\n   ... 49 49\n   ... 50 50''')\n    'NO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_count(n: int, d: int, x: int) -> int:\n        return x + math.ceil(d / (x + 1))\n\n    def main(stdin: str) -> str:\n        stdin = stdin.strip().split(\"\\n\")\n        count_test_cases = int(stdin[0])\n        stdin = stdin[1:]\n        ans = []\n        for i in range(count_test_cases):\n            n, d = [int(x) for x in stdin[i].split(\" \")]\n            if n >= d:\n                ans.append(\"YES\")\n            else:\n                ans.append(\"NO\")\n        return \"\\n\".join(ans)\n\n    return main(stdin)\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 1\\n4 5\\n5 11\\n\")\n    'YES\\nYES\\nNO'\n    \"\"\"\n    T = int(stdin)\n    answer = []\n    for t in range(T):\n        n, d = map(int, stdin.split('\\n')[t].split())\n        if n - d > 0:\n            answer.append('YES')\n        else:\n            answer.append('NO')\n    return '\\n'.join(answer)\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution for a given input.\"\"\"\n    T = int(stdin.readline())\n    for t in range(T):\n        n, d = map(int, stdin.readline().split())\n        print(\"YES\" if n <= d else \"NO\")\n    return ''\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        return b if a % b == 0 else gcd(b, a % b)\n\n    T = int(stdin.readline())\n    results = []\n\n    for _ in range(T):\n        n, d = list(map(int, stdin.readline().split()))\n        x = gcd(n, d)\n        n, d, x = n // x, d // x, x - 1\n        if x > 0:\n            if (n + d) % (x + 1) == 0:\n                results.append(\"YES\")\n            else:\n                results.append(\"NO\")\n        else:\n            results.append(\"YES\")\n\n    return \"\\n\".join(results)"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if Adilbek can fit in n days.\n    :return: YES or NO.\n    \"\"\"\n    # read in the input\n    t = int(stdin)\n    for _ in range(t):\n        n, d = [int(s) for s in stdin.split()]\n        if d > n:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\"\n\"\"\"\n\n\"\"\"\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"input, expected\",\n    [\n        (\"1 1\", \"YES\"),\n        (\"4 5\", \"YES\"),\n        (\"5 11\", \"NO\"),\n    ],\n)\ndef"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check(n, d):\n        x, y = int(n) // int(d), int(n) // (int(d) + 1)\n        return int(d) <= x + y + 1\n\n    ans = []\n    for i in range(int(stdin)):\n        n, d = stdin.split()\n        ans.append(\"YES\" if check(n, d) else \"NO\")\n\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = int('1234567890'[0:k])\n    while k > 1:\n        n = n * 10 + 1\n        k -= 1\n    return str(n)\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    def traverse(x, n):\n        for i in range(len(x)):\n            if x[i] == n:\n                return i\n        return -1\n\n    def traverse2(x, n):\n        k = 0\n        for i in range(len(x)):\n            if x[i] == n:\n                k += 1\n        return k\n\n    k = int(stdin)\n    x = '1'\n    n = 1\n    while k > traverse2(x, n):\n        x += str(n)\n    if k > traverse(x, n):\n        return -1\n    return x\nprint(solution(input()))"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while stdin:\n        stdin = stdin.replace(\".\", \"0\")\n        count += 1\n    return count\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Simple python solution to the problem\n    \"\"\"\n    return str(solve(stdin))[:-1]\n\n\ndef"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    l = ['4', '8']\n    for i in range(1, 10):\n        l.append(str(i))\n    for i in range(1, 100):\n        if i % 10 == 0:\n            continue\n        if len(set(list(str(i)))) == len(list(str(i))):\n            continue\n        if len(set(list(str(i)))) == k:\n            break\n    return str(i)\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if there are exactly k loops in the decimal representation of n.\n\n    Args:\n        stdin: Input\n\n    Returns:\n        str: Output\n    \"\"\"\n    pass\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    loops = []\n    for i in range(1, 10):\n        for j in range(10):\n            a = str(j)\n            b = str(i)\n            for m in range(10):\n                c = str(m)\n                for n in range(10):\n                    d = str(n)\n                    for o in range(10):\n                        e = str(o)\n                        for p in range(10):\n                            f = str(p)\n                            if k == 6:\n                                if i == 1 and j == 1 and m == 1 and n == 1 and o == 1 and p == 1:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}')\n                                elif i == 2 and j == 1 and m == 1 and n == 1 and o == 1 and p == 1:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}')\n                                elif i == 2 and j == 2 and m == 1 and n == 1 and o == 1 and p == 1:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}')\n                                elif i == 2 and j == 1 and m == 1 and n == 1 and o == 1 and p == 2:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 2 and j == 1 and m == 1 and n == 2 and o == 1 and p == 1:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 2 and j == 2 and m == 1 and n == 1 and o == 1 and p == 2:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 2 and j == 2 and m == 2 and n == 1 and o == 1 and p == 1:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 2 and j == 1 and m == 2 and n == 1 and o == 1 and p == 2:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}{d}{e}')\n                                elif i == 2 and j == 1 and m == 1 and n == 2 and o == 1 and p == 1:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 2 and j == 2 and m == 2 and n == 1 and o == 1 and p == 1:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 2 and j == 2 and m == 1 and n == 2 and o == 1 and p == 1:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}{d}{e}')\n                                elif i == 2 and j == 2 and m == 1 and n == 1 and o == 2 and p == 1:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 2 and j == 1 and m == 2 and n == 1 and o == 2 and p == 1:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 2 and j == 2 and m == 2 and n == 2 and o == 1 and p == 1:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}{d}{e}')\n                                elif i == 2 and j == 2 and m == 1 and n == 2 and o == 2 and p == 1:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 1 and j == 2 and m == 1 and n == 1 and o == 2 and p == 1:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 2 and j == 1 and m == 1 and n == 2 and o == 2 and p == 1:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}{d}{e}')\n                                elif i == 1 and j == 1 and m == 1 and n == 1 and o == 2 and p == 1:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 1 and j == 1 and m == 2 and n == 2 and o == 1 and p == 1:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 2 and j == 2 and m == 1 and n == 1 and o == 2 and p == 2:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}{d}{e}')\n                                elif i == 2 and j == 1 and m == 2 and n == 1 and o == 1 and p == 2:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 1 and j == 2 and m == 2 and n == 1 and o == 1 and p == 2:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 2 and j == 1 and m == 1 and n == 1 and o == 1 and p == 2:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}{d}{e}')\n                                elif i == 2 and j == 2 and m == 1 and n == 1 and o == 1 and p == 2:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 1 and j == 2 and m == 1 and n == 2 and o == 1 and p == 2:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 2 and j == 2 and m == 2 and n == 2 and o == 1 and p == 2:\n                                    loops.append(f'{d}{e}{b}{c}{a}{f}{d}{e}')\n                                elif i == 1 and j == 1 and m == 2 and n == 2 and o == 2 and p == 1:\n                                    loops.append(f'{e}{f}{d}{e}{b}{c}{a}{f}')\n                                elif i == 1 and j == 2 and m == 1 and n == 2 and o == 2 and p == 1:\n                                    loops.append(f'{f}{d}{e}{b}{c}{a}{f}{d}')\n                                elif i == 1 and j == 2 and m == 2 and n == 2 and o == 1 and p == 1:"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10**18:\n        k = 0\n        for i in range(1, 10**9):\n            s = str(i)\n            if s.count('6') + s.count('9') + s.count('0') == n:\n                k += 1\n        if k == 0:\n            return -1\n        else:\n            return i\n    else:\n        return -1"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  s, t = [stdin.split('\\n')[i].replace(' ', '') for i in range(2)]\n  n, m = len(s), len(t)\n\n  i, j = 0, 0\n  a, b = 0, 0\n\n  while i < n and j < m:\n    if s[i] == t[j]:\n      i += 1\n      j += 1\n    elif t[j] == '?':\n      b += 1\n      j += 1\n    else:\n      a += 1\n      i += 1\n  \n  return str(min(a, b)) + '\\n' +''.join([str(i + 1) for i in range(a)])\n\nprint(solution(input()))"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s_input = stdin\n    t_input = input()\n    s = s_input\n    t = t_input\n    result_arr = []\n    for i in range(len(t)):\n        if t[i] in s:\n            s = s.replace(t[i], \"?\", 1)\n            result_arr.append(i+1)\n    return result_arr\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    m = len(s)\n    n = len(t)\n    if s == t:\n        return 0\n    if m >= n:\n        return n\n    x = 0\n    l = []\n    for i in range(n):\n        for j in range(n):\n            if j!= i:\n                x += 1\n                l.append(x)\n    s1 = s\n    l1 = []\n    for i in l:\n        s1 = s1.replace(s[i - 1], \"?\")\n        if s1 in t:\n            l1.append(i)\n    return len(l1)\n\n\ndef"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    s, t = stdin.split(\"\\n\")\n    s = s[::-1]\n    t = t[::-1]\n    minimal_nr = len(s)\n    solution = []\n    for i in range(len(s)):\n        if s[i]!= \"?\":\n            solution.append(len(s[i:]) + 1)\n            continue\n        for j in range(len(t)):\n            if t[j] == s[i]:\n                solution.append(j)\n                break\n    solution.sort()\n    return str(len(solution)) + \"\\n\" + str(solution).replace(\"[\", \"\").replace(\"]\", \"\")\n\n\ndef"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 10\\nabcd\\nebceabazcd')\n    '1\\n2'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 5\n   ... abc\n   ... xaybz\n   ... ''')\n    2\n    >>> solution('''4 10\n   ... abcd\n   ... ebceabazcd\n   ... ''')\n    1\n    >>> solution('''4 10\n   ... abcd\n   ... ebceabazcd\n   ... ''')\n    1\n    >>> solution('''4 10\n   ... abcd\n   ... ebceabazcd\n   ... ''')\n    1\n    >>> solution('''4 10\n   ... abcd\n   ... ebceabazcd\n   ... ''')\n    1\n    '''\n    >>> solution('''3 3\n   ... abc\n   ... xyz\n   ... ''')\n    0\n    >>> solution('''3 3\n   ... abc\n   ... xyz\n   ... abc\n   ... ''')\n    0\n    >>> solution('''3 3\n   ... abc\n   ... xyz\n   ... abc\n   ... ''')\n    0\n    '''\n    >>> solution('''3 3\n   ... abc\n   ... xyz\n   ... abc\n   ... ''')\n    0\n    >>> solution('''3 3\n   ... abc\n   ... xyz\n   ... abc\n   ... ''')\n    0\n    '''\n    '''\n    \n    s, t = stdin.split('\\n\\n')\n    s, t = s.strip(), t.strip()\n\n    ns = len(s)\n    nt = len(t)\n    s = list(s)\n    t = list(t)\n    \n    table = [0] * ns\n    for i in range(ns):\n        for j in range(nt):\n            if s[i] == t[j]:\n                if i == 0 or table[i - 1]!= 0:\n                    table[i] = j + 1\n                    break\n    \n    indexes = []\n    for i in range(len(table)):\n        if table[i] == 0:\n            indexes.append(i)\n\n    return len(indexes)\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = input()\n    s = s.replace(\"?\", \"\")\n    return s.replace(t, \"\")\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s = set(s)\n    return \" \".join(str(len(set(t) - s)) + \" \" + \" \".join(map(str, sorted(list(s - set(t))))))\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    res = 0\n    for i, (a, b) in enumerate(zip(s, t)):\n        if a!= b:\n            res += 1\n            s = s[:i] + '?' + s[i + 1:]\n    return res, [i + 1 for i, c in enumerate(s) if c == '?']\n\n\ndef"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def tree(n: int, d: int, h: int, pos: int) -> str:\n        if n == 1:\n            return \"1 2\\n\"\n        if d == n - 1:\n            return tree(n, d, h, pos + 1)\n        if h == n - 1:\n            return tree(n, d, h, pos + 1)\n        if d > n - 1 or h > n - 1:\n            return \"-1\\n\"\n        if d == h:\n            return tree(n, d, h, pos + 1)\n        return tree(n, d, h, pos + 1) + \" \" + str(pos) + \" \" + str(n - 1) + \"\\n\" + tree(n, d, h, pos + 1)\n\n    n, d, h = [int(x) for x in stdin.split(' ')]\n    return tree(n, d, h, 1)\n\n\ndef"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = map(int, stdin.split())\n    if d - h > 1 or d + h < n - 1:\n        return \"-1\"\n    res = list(map(int, stdin.split()))\n    adj = [[] for _ in range(n)]\n    for i in range(n - 1):\n        adj[res[i] - 1].append(res[i + 1] - 1)\n        adj[res[i + 1] - 1].append(res[i] - 1)\n    q = deque([0])\n    for _ in range(d):\n        if q[0] > h:\n            return \"-1\"\n        v = q.popleft()\n        for u in adj[v]:\n            if u > h:\n                continue\n            q.append(u)\n    return''.join(map(str, q))\n\n\ndef"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_tree(n, d, h):\n        if d < 1 or d > n - 2:\n            return False\n        if h < 1 or h > n - 2:\n            return False\n        for i in range(2, n):\n            for j in range(i + 1, n + 1):\n                if is_connected(i, j):\n                    break\n            else:\n                continue\n            break\n        else:\n            return False\n        for i in range(1, n + 1):\n            if i == 1 or is_connected(1, i):\n                continue\n            else:\n                return False\n        return True\n\n    def is_connected(x, y):\n        for i in range(1, n + 1):\n            if is_edge(x, i) and is_edge(i, y):\n                return True\n        return False\n\n    def is_edge(x, y):\n        return abs(x - y) == 1\n\n    def get_edges(n, d, h):\n        edges = []\n        for i in range(1, n + 1):\n            if is_edge(1, i):\n                edges.append((1, i))\n        for i in range(1, n + 1):\n            if is_edge(1, i) and i!= 1:\n                edges.append((1, i))\n        for i in range(2, n):\n            for j in range(i + 1, n + 1):\n                if is_edge(i, j):\n                    edges.append((i, j))\n                if is_edge(j, i):\n                    edges.append((j, i))\n        for i in range(1, n + 1):\n            if i!= 1 and is_edge(i, 1):\n                edges.append((i, 1))\n        return edges\n\n    n, d, h = list(map(int, stdin.split()))\n    edges = get_edges(n, d, h)\n    if is_tree(n, d, h):\n        return '\\n'.join(map(str, edges))\n    else:\n        return '-1'\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\ndef"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = [int(x) for x in stdin.split()]\n    if d == n - 1 and h == 0:\n        return '0 1'\n    if d == 0:\n        return '-1'\n    if d > n - 1:\n        return '-1'\n    tree = [[] for i in range(n)]\n    for i in range(n - 1):\n        tree[int(stdin[3 + i]) - 1].append(int(stdin[3 + i + 1]))\n    tree[0].append(0)\n    for i in range(n):\n        tree[i].sort()\n    max_h = max([len(x) for x in tree])\n    for i in range(n):\n        tree[i] += [0] * (max_h - len(tree[i]))\n    print(tree)\n    return '-1'\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    pi = 3.14\n    ans = 2 * r / (pi * (n - 1))\n    print(ans)\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the radius of the outer circles required for building the required picture.\n    \"\"\"\n    n, r = list(map(int, stdin.split()))\n    return f\"{r:.6f}\""
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the radius of the outer circles.\"\"\"\n    n, r = list(map(float, stdin.split(' ')))\n    if n < 3 or r < 1 or n > 100 or r > 100:\n        return 'impossible'\n    r_to_n = lambda r, n: sum(1 for _ in range(n)) * r\n    n = int(n)\n    if n % 2:\n        return r_to_n(r, n)\n    return r_to_n(r, n) / 2\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    n = n * 2 - 1\n    r = r * 2 - 1\n    return str(r / n)\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, r = [int(s) for s in stdin.split()]\n\n    # the radius of the outer circles must be greater than the radius of the inner circle\n    if n == 1:\n        return r\n    \n    # find the sum of numbers between 1 and r\n    sum_ = 0\n    for i in range(1, r+1):\n        sum_ += i\n    \n    # the number of the outer circles is equal to the sum of numbers between 1 and r - 1\n    n_ = sum_ - r + 1\n\n    # calculate the radius of the inner circles\n    r_ = r**2 / n_\n    \n    # calculate the radius of the outer circles\n    R = r + r_\n    \n    # return the radius of the outer circles\n    return R\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(r + r // n)\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    return '%.6f' % (n / (m - 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split(' '))\n    r0 = r ** 2\n    r1 = (n - 1) * (r + 1) ** 2\n    r2 = (n * (r + 1) ** 2) - r0\n    return str(r0 - r1 + r2)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    num = n * r\n    print(str(round(num, 6)))\n    return\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the radius of the outer circles and the radius of the inner circle\n    :param stdin: input from stdin\n    :return: radius of the outer circles and the radius of the inner circle\n    '''\n    # Split the input by the newline character\n    splitted_input = stdin.split(\"\\n\")\n\n    # Convert the number of the outer circles and the radius of the inner circle from string to int\n    n = int(splitted_input[0].split()[0])\n    r = int(splitted_input[0].split()[1])\n\n    # Calculate the required radius\n    required_r = r / (n ** 0.5)\n\n    # Return the required radius\n    return \"{:.6f}\".format(required_r)\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    p = int(stdin.readline())\n    q = int(stdin.readline())\n    print(l + q**2 + p**2)\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n\"\"\"\n\n\nimport math\n\n\ndef"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    p, q = map(int, stdin.readline().split())\n    \n    return str(min(abs(l / 2 - p), abs(l / 2 - q)))\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, p, q = [int(c) for c in stdin.split('\\n')]\n    if p == q:\n        return str(l // 2)\n    return str((l // 2) + l % 2)\n\ndef"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    p = int(stdin.readline())\n    q = int(stdin.readline())\n    return str(l / (p + q))\n\nprint(solution(input()))\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, p, q = [int(x) for x in stdin.split()]\n    return str(round((l / (p - q) + l / (q - p)) / 2))\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_groups = int(stdin.readline())\n    years = [int(line) for line in stdin]\n    years.sort()\n    x = 0\n    while (years[0] + x) > years[1]:\n        x += 1\n    print(years[0] + x)\n    return \"\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"\"\n    stdin = stdin.split(\"\\n\")\n    k = int(stdin[0])\n    stdin = stdin[1].split()\n    for i in range(k):\n        stdin[i] = int(stdin[i])\n    stdin = sorted(stdin)\n    while len(ans) == 0:\n        tmp = stdin[0]\n        for i in range(1,k):\n            if tmp + i in stdin:\n                ans = tmp + i\n                break\n            elif tmp - i in stdin:\n                ans = tmp - i\n                break\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(2050)"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    groups = [int(x) for x in stdin.split()]\n    if len(groups) == 1:\n        return groups[0]\n    else:\n        return max(groups)\n\n\n\"\"\""
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    inp_str = stdin.split('\\n')[0]\n    n = int(inp_str.split(' ')[0])\n    arr_str = inp_str.split(' ')[1:]\n    arr = list(map(int, arr_str))\n    arr.sort()\n    count = 1\n    for i in range(1, n):\n        if arr[i]-arr[i-1] > 1:\n            count += 1\n    return str(arr[n-1] + count)\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.splitlines()[1]\n\"\"\""
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'hello world'\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin == stdin.replace('?', 'C') else 'No'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length, s = stdin.split('\\n')\n    length = int(length)\n    s = s.replace(\" \", \"\")\n    if length == len(s):\n        return \"Yes\"\n    s = list(s)\n    if s[0] == \"C\" and s[1] == \"Y\":\n        return \"Yes\"\n    if s[0] == \"C\" and s[1] == \"M\":\n        return \"No\"\n    if s[0] == \"C\" and s[1] == \"Y\":\n        return \"Yes\"\n    if s[0] == \"C\" and s[1] == \"M\":\n        return \"No\"\n    if s[0] == \"M\" and s[1] == \"C\":\n        return \"No\"\n    if s[0] == \"M\" and s[1] == \"Y\":\n        return \"Yes\"\n    if s[0] == \"M\" and s[1] == \"C\":\n        return \"No\"\n    if s[0] == \"Y\" and s[1] == \"C\":\n        return \"Yes\"\n    if s[0] == \"Y\" and s[1] == \"M\":\n        return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    colours = [stdin.split()[1][i] for i in range(length)]\n    if colours[0] == '?':\n        colours[0] = 'C'\n    if colours[-1] == '?':\n        colours[-1] = 'C'\n    return 'Yes' if len(set(colours)) == 2 or len(set(colours)) == 3 or len(set(colours)) == 4 or len(set(colours)) == 5 else 'No'\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\nC??Y')\n    'Yes'\n    >>> solution('5\\n?C??Y')\n    'Yes'\n    >>> solution('5\\n?C?Y')\n    'Yes'\n    >>> solution('5\\n?C?Y?')\n    'Yes'\n    >>> solution('5\\nC??MC')\n    'No'\n    >>> solution('5\\n?C?MC')\n    'No'\n    >>> solution('3\\nMMY')\n    'No'\n    >>> solution('5\\nC?C?Y')\n    'Yes'\n    >>> solution('5\\nC?C?Y?')\n    'Yes'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    painted = stdin\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    painted = painted.replace('?', 'C')\n    painted = painted.replace('?', 'M')\n    painted = painted.replace('?', 'Y')\n    "
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    colours = stdin[1]\n    return \"Yes\" if n <= 2 or (colours.count('C') < n and colours.count('M') < n and colours.count('Y') < n) else \"No\"\n\nprint(solution(input().split(\"\\n\")))\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = [int(i) for i in stdin.split(' ')]\n    f = (c ** (n - 4) * f1 * f2 * f3) % (10 ** 9 + 7)\n    return str(f)\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = [int(i) for i in stdin.split()]\n    for i in range(n, 0, -1):\n        if i == n:\n            f = c ** (i * 2 - 6) * f1 * f2 * f3\n        elif i == 1:\n            f = f * (c ** ((i + 1) * 2 - 6))\n        elif i == 2:\n            f = f * (c ** ((i + 1) * 2 - 6))\n            f = f % (10 ** 9 + 7)\n        else:\n            f = f * (c ** ((i + 1) * 2 - 6))\n            f = f % (10 ** 9 + 7)\n    return str(f % (10 ** 9 + 7))\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, F1, F2, F3, C = [int(x) for x in stdin.split(' ')]\n    ans = 0\n\n    def f(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return F1\n        elif n == 2:\n            return F2\n        elif n == 3:\n            return F3\n        else:\n            if n % 2 == 0:\n                return (C**2 * f(n - 3) * f(n - 2) * f(n - 1)) % (10**9 + 7)\n            else:\n                return (C**2 * f(n - 3) * f(n - 2) * f(n - 1)) % (10**9 + 7)\n\n    def find(n):\n        ans = 0\n        for i in range(4, n + 1):\n            ans += f(i)\n        return ans % (10**9 + 7)\n\n    ans = find(N)\n    return str(ans)\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = [int(x) for x in stdin.split()]\n    c = c % (10 ** 9 + 7)\n    n = n % (10 ** 9 + 7)\n    ans = pow(c, 2 * (n - 4), 10 ** 9 + 7) * f1 * f2 * f3 % (10 ** 9 + 7)\n    return str(ans)\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = map(int, stdin.split())\n    f = f1 * f2 * f3\n    return str(f % (10**9+7))\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = [int(i) for i in stdin.split(' ')]\n    return str(f3 + (n - 1) * (f1 * f2 ** 2) + n * (c * f2))[-9:]\n\n\ndef"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = [int(i) for i in stdin.readline().split()]\n    c = int(stdin.readline())\n    return '{}'.format(c ** (2 * n - 6) % (10 ** 9 + 7))\n\"\"\"\n\ndef"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\na, b, c, d, e = [int(x) for x in stdin.split()]\nn = 2*a+3*b+4*c+5*d+6*e\nprint(((n-1)//3)%10**9)\n\n\n\n\n-----Problem-----\n\nFor a given positive integer $n$, define $f_n$ as the sum of all the positive integers smaller than $n$ that are multiples of 3 or 5.\n\nFor example, $f_3 = f_{3} + 3$, $f_5 = f_{5} + 5$, $f_10 = f_{10} + 10$.\n\nThen, $f_n = f_{3n} + 5f_{n-1} + 10f_{n-2} \\bmod {10^9+7}$ for all $n > 3$.\n\nGiven integers $n$, $f_{1}$, $f_{2}$, $f_{3}$, and $c$. Find $f_{n} \\bmod (10^{9}+7)$.\n\n\n-----Input-----\n\nThe only line contains five integers $n$, $f_{1}$, $f_{2}$, $f_{3}$, and $c$ ($4 \\le n \\le 10^{18}$, $1 \\le f_{1}$, $f_{2}$, $f_{3}$, $c \\le 10^{9}$).\n\n\n-----Output-----\n\nPrint $f_{n} \\bmod (10^{9} + 7)$.\n\n\n-----Examples-----\nInput\n5 1 2 5 3\n\nOutput\n72900\n\nInput\n17 97 41 37 11\n\nOutput\n317451037\n\n\n\n-----Note-----\n\nIn the first example, $f_{4} = 90$, $f_{5} = 72900$.\n\nIn the second example, $f_{17} \\approx 2.28 \\times 10^{29587}$.\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n    return 0"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom math import factorial, pow, fmod\n\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # use a hash map to store the char's count\n    # if the count is odd, it cannot form a palindrome\n    # return a palindrome if the count is even\n    # if cannot form a palindrome, return an empty string\n    # in the end, the length of the longest palindrome should be less than or equal to the length of the string\n\n\n    # your code here\n    # TODO: implement this function\n    # pass\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n    # Your code here\n\n    return answer"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    print(m)\n    s = lines[1]\n    return s\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    stdin_list = stdin.split('\\n')\n    m = int(stdin_list[0].split(' ')[0])\n    n = int(stdin_list[0].split(' ')[1])\n    string_list = []\n    for string in stdin_list[1:]:\n        string_list.append(string)\n    \n    all_pals = []\n    for string in string_list:\n        if is_palindrome(string):\n            all_pals.append(string)\n    \n    if len(all_pals) == 0:\n        return 0\n    \n    lengths = []\n    for pal in all_pals:\n        lengths.append(len(pal))\n    \n    lengths.sort(reverse=True)\n    for i in range(len(all_pals)):\n        if lengths[i] == m:\n            return all_pals[i]\n    \n    return 0\n\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # A palindrome string is a string that's the same when reversed.\n    # If a string is not a palindrome then it's not a valid answer, so we'll remove that.\n    # We'll also try to keep the length of the longest palindrome string as short as possible.\n    # To do this, we'll reverse the string, and then see if it's a palindrome.\n    # We'll reverse the string again after finding the palindrome, and then see if it's a palindrome.\n    # This will ensure that we're looking for the longest possible string, and not the longest possible palindrome string.\n    # We'll also record the longest palindrome string we've found and the length of it.\n    # If the longest palindrome string is not the same as the longest string, then we'll just return the longest string.\n    # If it is, then we'll return the longest palindrome string instead.\n    # We'll also make sure that the length of the longest palindrome string is less than the length of the longest string.\n    # We'll also record the longest string we've found as a palindrome and the length of it.\n    # If the longest string is not the same as the longest string, then we'll just return the longest string.\n    # If it is, then we'll return the longest string instead.\n    # We'll also make sure that the length of the longest string is less than the length of the longest string.\n\n    # Set a variable for the longest palindrome and string length\n    longest_palindrome = \"\"\n    longest_palindrome_length = 0\n    longest_string = \"\"\n    longest_string_length = 0\n\n    # Iterate through the input\n    for line in stdin:\n        # Remove any whitespace at the beginning or end of the string\n        line = line.strip()\n\n        # If the string is empty, then skip it\n        if len(line) == 0:\n            continue\n\n        # Try reversing the string, and if it's a palindrome, then try reversing again\n        reversed_string = \"\"\n        reversed_string_length = 0\n        while reversed_string_length!= len(line):\n            # Reverse the string\n            reversed_string = line[:reversed_string_length] + reversed_string\n            reversed_string_length += 1\n\n            # Check if it's a palindrome\n            if reversed_string == line:\n                # Check if the palindrome string is longer than the longest palindrome string\n                if len(reversed_string) > longest_palindrome_length:\n                    # If so, then record the palindrome string and its length\n                    longest_palindrome = reversed_string\n                    longest_palindrome_length = len(reversed_string)\n\n        # Try reversing the string, and if it's a palindrome, then try reversing again\n        reversed_string = \"\"\n        reversed_string_length = 0\n        while reversed_string_length!= len(line):\n            # Reverse the string\n            reversed_string = reversed_string + line[reversed_string_length]\n            reversed_string_length += 1\n\n            # Check if it's a palindrome\n            if reversed_string == line:\n                # Check if the palindrome string is longer than the longest palindrome string\n                if len(reversed_string) > longest_palindrome_length:\n                    # If so, then record the palindrome string and its length\n                    longest_palindrome = reversed_string\n                    longest_palindrome_length = len(reversed_string)\n\n    # Check if the longest palindrome string is the same as the longest string\n    if longest_palindrome == longest_string:\n        # If so, then return the longest palindrome string\n        return longest_palindrome\n    else:\n        # Otherwise, return the longest string\n        return longest_string\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print('Test')\n    print('Test')\n    return ''\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    stdin = stdin.splitlines()\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            s = stdin[i][:M] + stdin[j][:M]\n            t = s[::-1]\n            if s == t:\n                ans = max(ans, len(s))\n    return ans\n\nprint(solution(stdin))\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nProblem Description\n\nGiven a list of integers, write a function that returns the largest sum of non-adjacent numbers. Numbers can be 0 or negative.\n\nFor example, [2, 4, 6, 2, 5] should return 13, since we pick 2, 6, and 5. [5, 1, 1, 5] should return 10, since we pick 5 and 5.\n\nFollow-up: Can you do this in O(N) time and constant space?\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and O(1) space\"\"\"\n    _, *a = [int(i) for i in stdin.splitlines()]\n    cost = 0\n    for i in range(len(a)):\n        if a[i] < a[i + 1]:\n            cost += a[i + 1] - a[i]\n            a[i], a[i + 1] = a[i + 1], a[i]\n    return cost\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    a.sort()\n    a.append(1)\n    while a!= list(range(1, n + 1)):\n        if a[-1] < n:\n            a[-1] += 1\n            count += 1\n        elif a[-1] == n:\n            a[-1] -= 1\n            count += 1\n        else:\n            a[-1] -= 1\n            count += 1\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().split()]\n    cost = 0\n    arr.sort()\n    i = 0\n    while i < n-1:\n        cost += arr[i] - arr[i+1]\n        i += 1\n    return cost\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '\\n'.join(stdin.split('\\n'))\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n\n    max_ = max(a)\n    cost = 0\n    for i in range(n):\n        cost += abs(a[i] - max_)\n        a[i] = max_\n    return str(cost)\n\"\"\"\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    dp = [0] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = dp[i-1] + 1\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    print(dp[-1])\n    return ''\n\ndef"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n2 1 3 1\")\n    1\n    >>> solution(\"2\\n420 420\")\n    2\n    \"\"\"\n    test_cases = int(stdin.readline())\n    for i in range(test_cases):\n        n = int(stdin.readline())\n        l = list(map(int, stdin.readline().split()))\n        l = l[:n]\n        while n > 1:\n            l = [l[0] + l[1]] + l[2:]\n            n -= 1\n        print(len(l))\n    return \"\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        while True:\n            a = list(set(a))\n            if len(a) == 1:\n                break\n            i = 0\n            while i < len(a) - 1:\n                if a[i]!= a[i + 1]:\n                    a[i] = a[i] + a[i + 1]\n                    a[i + 1] = a[i]\n                    i = -1\n                i += 1\n            if len(a) == 1:\n                break\n        print(len(a))\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Hint: \n    Using a stack is probably the easiest way to go about this problem.\n    I'll explain how this works in one line.\n\n    So let's say you're trying to generate a password which is 5 digits long.\n    Step 1: pick the first two numbers. They're in a stack\n    Step 2: pick the third number. It's in the stack, so it's not good\n    Step 3: pick the fourth number. It's in the stack, so it's not good\n    Step 4: pick the fifth number. It's not in the stack, so it's good\n    Step 5: you have a 5-digit password!\n\n    So in this example, it took you 5 operations to generate it.\n    \"\"\"\n\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    stack = []\n    res = 0\n\n    for i in range(n):\n        if i < n - 1:\n            if s[i] == s[i + 1]:\n                continue\n            else:\n                stack.append(s[i])\n        else:\n            stack.append(s[i])\n        while len(stack) > 1 and stack[-1] == stack[-2]:\n            stack.pop()\n            stack.pop()\n        res = max(res, len(stack))\n\n    print(res)\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the shortest possible length of the password after some number of operations.'''\n    pass"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the solution for the given input.\n\n    Args:\n        stdin (str): The standard input.\n\n    Returns:\n        str: The solution for the given input.\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def split(string: str) -> list:\n        return [int(num) for num in string.split()]\n\n    def one_num(number: str) -> bool:\n        return number > 0 and len(number) == 1\n\n    n, m = split(stdin)\n    \n    rows = [split(line) for line in stdin.split('\\n')[:n]]\n    cols = [list(map(lambda num: num // 10, split(line))) for line in stdin.split('\\n')[n:]]\n    print(rows)\n    print(cols)\n    return \"TAK\" if all(one_num(num) for row in rows for num in row) else \"NIE\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n0 0\\n0 0\\n0 0\")\n    'NIE'\n    >>> solution(\"2 3\\n7 7 7\\n7 7 10\")\n    'TAK\\n1 3'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    first_line = stdin.split('\\n')[0]\n    n, m = first_line.split()\n    matrix = [line.split() for line in stdin.split('\\n')[1:]]\n    # print(matrix)\n    row = len(matrix)\n    col = len(matrix[0])\n    # print(row, col)\n    # print(n, m)\n    total = []\n    for i in range(row):\n        for j in range(col):\n            # print(i, j)\n            num = int(matrix[i][j])\n            # print(num)\n            count = 0\n            for k in range(row):\n                # print(k)\n                for l in range(col):\n                    if k!= i and l!= j:\n                        if int(matrix[k][l]) ^ num > 0:\n                            count += 1\n            total.append(count)\n    # print(total)\n    if sum(total) == 0:\n        return 'NIE'\n    elif sum(total) > 0:\n        return 'TAK'\n    else:\n        return 'NIE'\n    \n    \n    \nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split(' ')]\n    matrix = [[int(y) for y in stdin.split('\\n')[i].split(' ')] for i in range(rows)]\n    nums = set()\n    for i in range(rows):\n        nums |= set(matrix[i])\n    # print(nums)\n    # print(nums.pop())\n    # print(max(nums))\n    # print(nums.pop())\n    # print(max(nums))\n    if max(nums) < 2**cols:\n        return \"TAK\"\n    else:\n        return \"NIE\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # https://www.programiz.com/python-programming/examples/exclusive-or\n    a, b = map(int, stdin.strip().split(' '))\n    x = 0\n    for i in range(a):\n        x ^= int(stdin.strip().split(' ')[i])\n    print(\"TAK\") if x > 0 else print(\"NIE\")\n    # return 'TAK' if x > 0 else 'NIE'\n\nprint(solution(input()))\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(n):\n        matrix[i] = list(map(int, stdin.split()))\n    for i in range(n):\n        matrix[i][0] ^= i + 1\n    for j in range(m):\n        matrix[0][j] ^= j + 1\n    for i in range(1, n):\n        for j in range(1, m):\n            matrix[i][j] ^= matrix[i][j - 1] ^ matrix[i - 1][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] & ((matrix[i][j - 1] ^ matrix[i - 1][j]) & -matrix[i][j]):\n                return \"TAK\"\n    return \"NIE\"\n    \n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    \n    i = 10\n    s_extended = s * (10**100)\n\n    while i > 0:\n        if t in s_extended[:i]:\n            return str(i)\n        i -= 1\n    return str(-1)\n\n\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_a(self):\n        self.assertEqual(solution(\"contest\"), \"10\")\n\n    def test_b(self):\n        self.assertEqual(solution(\"son\"), \"10\")\n\n    def test_c(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_d(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_e(self):\n        self.assertEqual(solution(\"contest\"), \"10\")\n\n    def test_f(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_h(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_i(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_j(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_k(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_l(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_m(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_n(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_o(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_p(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_q(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_r(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_s(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_t(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_u(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_v(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_w(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_x(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_y(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_z(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_0(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_1(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_2(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_3(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_4(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_5(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_6(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_7(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_8(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n\n    def test_9(self):\n        self.assertEqual(solution(\"hackerrank\"), \"10\")\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    return t in s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  string = stdin[0]\n  substring = stdin[1]\n  index = 10\n  for i in range(1, len(string)):\n    if string[i:] in substring:\n      index = i\n      break\n  if index == 10:\n    return -1\n  return index\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    s = s.replace('\\n', '')\n    t = t.replace('\\n', '')\n    s = ''.join([i for i in s for n in range(1, 101)])\n    i = len(s)\n    while i > 0:\n        if s.find(t)!= -1:\n            break\n        else:\n            i -= 1\n            s = s[1:]\n    if i > 0:\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[0]\n    t: str = stdin[1]\n    ans: int = -1\n    for i in range(1, 10**6+1):\n        if t in s*i:\n            ans = i\n            break\n    return str(ans)\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    m = len(s)\n    n = len(t)\n    dp = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(m):\n        for j in range(n):\n            if s[i] == t[j]:\n                dp[i + 1][j + 1] = 1 + dp[i][j]\n            else:\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n    return \"\".join([\"10\"] * dp[m][n])"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def isSubsequence(substr: str, string: str) -> bool:\n        \"\"\"\n        >>> isSubsequence(\"net\", \"contest\")\n        True\n        >>> isSubsequence(\"contest\", \"contestcon\")\n        True\n        >>> isSubsequence(\"contestcon\", \"contestco\")\n        False\n        >>> isSubsequence(\"son\", \"contest\")\n        False\n        >>> isSubsequence(\"cont\", \"contest\")\n        True\n        >>> isSubsequence(\"con\", \"contest\")\n        False\n        \"\"\"\n        substr_index = 0\n        string_index = 0\n        while substr_index < len(substr) and string_index < len(string):\n            if substr[substr_index] == string[string_index]:\n                substr_index += 1\n            string_index += 1\n        return substr_index == len(substr)\n\n    def getLongestSubsequence(string: str) -> str:\n        \"\"\"\n        >>> getLongestSubsequence(\"contest\")\n        'contest'\n        >>> getLongestSubsequence(\"son\")\n       'son'\n        >>> getLongestSubsequence(\"cont\")\n        'cont'\n        >>> getLongestSubsequence(\"con\")\n        'con'\n        \"\"\"\n        longest_subsequence = \"\"\n        for i in range(1, len(string)):\n            if isSubsequence(string[:i], string) and len(string[:i]) > len(longest_subsequence):\n                longest_subsequence = string[:i]\n        return longest_subsequence\n\n    substr = \"10\" * 100\n    longest_subsequence = getLongestSubsequence(stdin)\n    if isSubsequence(longest_subsequence, stdin):\n        return int(substr)\n    return -1\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    t = set(t)\n    s = \"contest\" * 100000\n    for i in range(1, len(s)):\n        if t.issubset(set(s[i:i+i])):\n            print(i)\n            return\n    print(-1)\n    return"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    \n    if s.find(t) == -1:\n        return -1\n    return len(s) + 10 ** 100 - len(s) + 1\n\ndef"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = input()\n    i = 0\n    while len(s) >= len(t):\n        if t in s:\n            i += 1\n            s += s\n        else:\n            break\n    if i == 0:\n        return -1\n    return i"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split('\\n')[0].split(' ')[1])\n    res = ''\n    for i in range(1, m + 1):\n        res += f'Edge({i} {i + 1}) '\n    for i in range(m):\n        res += f'Edge({i + 1} {i + 2}) '\n    res += f'Edge({m + 1} {m + 2})'\n    return res\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    res = []\n    for i in range(m):\n        a, b = map(int, stdin.split(' '))\n        if (a, b) not in res and (b, a) not in res:\n            res.append((a, b))\n    if len(res) < 2 * n - 2:\n        return 'NO'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i + 1 < j and (i + 1, j) in res and (i + 1, j) not in res and (j, i + 1) not in res:\n                return 'NO'\n            if j + 1 < i and (j + 1, i) in res and (i + 1, j + 1) not in res and (j + 1, i + 1) not in res:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(\" \")]\n    friends = [int(i) for i in stdin.split(\" \")]\n    ans = \"YES\"\n    nums = [i for i in range(1, n + 1)]\n    friends = list(map(lambda x: [int(x) for x in stdin.split(\" \")], range(m)))\n    for i in range(m - 1):\n        if (friends[i][0] == friends[i + 1][0] or friends[i][0] == friends[i + 1][1]) and (\n            friends[i][1] == friends[i + 1][0] or friends[i][1] == friends[i + 1][1]\n        ):\n            ans = \"NO\"\n    return ans\n\n\nsolution(stdin)\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j: continue\n            if i < j:\n                if j > c:\n                    c = j\n                else:\n                    if j in c and i in c:\n                        print('YES')\n                        return\n                    c = j\n\n    print('NO')\n    return\nsolution('4 2')\n\n\ndef"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(n):\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                for k in range(1, n + 1):\n                    if i!= j and i!= k and j!= k and i - j and j - k and k - i:\n                        return True\n        return False\n\n    return \"YES\" if is_good(int(stdin[0])) else \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [set() for _ in range(n)]\n    b = [set() for _ in range(n)]\n    for _ in range(m):\n        i, j = map(int, stdin.split(' '))\n        a[i - 1].add(j)\n        b[j - 1].add(i)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if a[i] & b[j]:\n                for k in range(n):\n                    if i == k or j == k:\n                        continue\n                    if a[i] & b[k]:\n                        if b[k] & b[j]:\n                            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    l = letters[:stdin]\n    return l[::-1]"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    str_number = stdin\n    number_index = int(stdin)\n    return str_number[number_index:] + str_number[:number_index]\nprint(solution(input()))\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    dict = {}\n    for i in range(len(stdin)):\n        dict[chr(i + ord('A'))] = stdin[i]\n    for i in range(ord('A'), ord('Z') + 1):\n        dict[chr(i)] = dict[chr(i).lower()]\n    return ''.join(dict[chr(i)] for i in range(ord('A'), ord('Z') + 1))\nprint(solution(input()))\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    in_str = stdin[0]\n    number = int(stdin[1])\n    return in_str[:number] + in_str[number+1:]"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nimport re\n\nprint(re.sub(stdin,''*(len(stdin)-1)+stdin[0].upper(), stdin.lower()))"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    number = stdin\n    for i in range(0, len(number)):\n        if number[i].isalpha():\n            if number[i] == \"Z\":\n                number = number[:i] + \"a\" + number[i+1:]\n            else:\n                number = number[:i] + letters[letters.index(number[i]) + 1] + number[i+1:]\n    return number"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = \"abcdefghijklmnopqrstuvwxyz\"\n    return string[string.find(stdin) + int(stdin[-1])]\n\ndef"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(chr(ord(char)+int(n)) for char, n in zip(stdin, stdin[1:]))"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n = int(input[0])\n    s = input[1]\n    t = input[2]\n    \n    return 'First' if s.count('1') > t.count('1') else 'Second' if s.count('1') < t.count('1') else 'Draw'\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem.\n    \"\"\"\n    pass"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    arr = list(s) + list(t)\n    arr.sort()\n    num1 = 0\n    num2 = 0\n    for x in range(len(arr)):\n        if arr[x] == '1':\n            num1 += x\n        else:\n            num2 += x\n    return 'First' if num1 > num2 else 'Second' if num2 > num1 else 'Draw'"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    I know this is ugly solution, but it works.\n    '''\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n\n    first_st = [0] * (len(s) + 1)\n    second_st = [0] * (len(t) + 1)\n\n    for i in range(len(s)):\n        first_st[i + 1] = first_st[i] + int(s[i])\n    for i in range(len(t)):\n        second_st[i + 1] = second_st[i] + int(t[i])\n\n    if first_st[-1] > second_st[-1]:\n        return \"First\"\n    elif first_st[-1] < second_st[-1]:\n        return \"Second\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'First' if s.count('1') > t.count('1') else 'Second' if s.count('1') < t.count('1') else 'Draw'\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    def check(s, t, i, j):\n        while i < len(s) and j < len(t):\n            if s[i]!= t[j]:\n                return False\n            i += 1\n            j += 1\n\n        return i == len(s) and j == len(t)\n\n    return \"First\" if check(s, t, 0, 0) else \"Second\" if check(t, s, 0, 0) else \"Draw\"\n\n\nprint(solution(input().split(\"\\n\")))\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 11101\n   ... 10011\n   ... ''')\n    'Second'\n    >>> solution('''3\n   ... 10111\n   ... 10011\n   ... ''')\n    'First'\n    >>> solution('''4\n   ... 11101\n   ... 10111\n   ... ''')\n    'Draw'\n    >>> solution('''3\n   ... 10111\n   ... 11101\n   ... ''')\n    'Draw'\n    \"\"\"\n    n, yaroslav, andrey = (int(stdin), stdin.splitlines()[1], stdin.splitlines()[2])\n    yar, andr = 0, 0\n    for i, c in enumerate(yaroslav):\n        yar += (1 if c == '1' else 0) * 2**(n - i - 1)\n    for i, c in enumerate(andrey):\n        andr += (1 if c == '1' else 0) * 2**(n - i - 1)\n    if yar > andr:\n        return 'First'\n    elif andr > yar:\n        return 'Second'\n    return 'Draw'\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin[0], stdin[1]\n    n = len(s)\n    if n == 1:\n        return \"First\"\n    if n == 2:\n        if int(s[1]) == 0:\n            return \"First\"\n        return \"Second\"\n    st1, st2 = s[:n//2], s[n//2:]\n    t1, t2 = t[:n//2], t[n//2:]\n    if int(st1) > int(st2):\n        return \"First\"\n    elif int(st1) < int(st2):\n        return \"Second\"\n    else:\n        if int(t1) > int(t2):\n            return \"First\"\n        elif int(t1) < int(t2):\n            return \"Second\"\n        else:\n            return \"Draw\"\n    \n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    t = stdin\n\n    #print(n)\n    #print(s)\n    #print(t)\n\n    if n % 2 == 0:\n        #print(0)\n        return \"Draw\"\n    else:\n        if s.count('1') > t.count('1'):\n            #print(1)\n            return \"First\"\n        elif s.count('1') < t.count('1'):\n            #print(2)\n            return \"Second\"\n        else:\n            #print(3)\n            return \"Draw\"\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = sorted([int(i) for i in stdin.readline().split()])\n    if abs(max(x) - min(x)) > 2:\n        return 'NO'\n    \n    ans = 0\n    while x:\n        ans += 1\n        x.remove(min(x))\n        x.remove(max(x))\n        if len(x) == 0:\n            break\n    return str(ans)\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    num = int(line[0])\n    nums = list(map(int, line[1:]))\n    nums.sort()\n    if nums[0] - nums[-1] > 2:\n        return '{} {} {}'.format(num, nums[0], nums[-1])\n    else:\n        return '{} {} {}'.format(num, nums[len(nums) // 2], nums[-1])\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = sorted(map(int, stdin.readline().split()))\n    print(len([i for i in range(n) if abs(x[i] - x[n // 2]) <= 2]))\n    print(*[x[i] for i in range(n) if abs(x[i] - x[n // 2]) <= 2])\n\n\n\ndef"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin.readline())\n    K = sorted(list(map(int, stdin.readline().strip().split())))\n    A = [0] * N\n    for i in range(N):\n        if i + 1 < N and K[i] == K[i + 1] and K[i] == K[i - 1]:\n            A[i] = K[i]\n            A[i + 1] = K[i]\n            A[i - 1] = K[i]\n        elif i + 2 < N and K[i] == K[i + 1] and K[i] == K[i - 1] and K[i] == K[i + 2]:\n            A[i] = K[i]\n            A[i + 1] = K[i]\n            A[i - 1] = K[i]\n            A[i + 2] = K[i]\n        elif i + 3 < N and K[i] == K[i + 1] and K[i] == K[i - 1] and K[i] == K[i + 2]:\n            A[i] = K[i]\n            A[i + 1] = K[i]\n            A[i - 1] = K[i]\n            A[i + 2] = K[i]\n            A[i + 3] = K[i]\n        elif i - 1 >= 0 and K[i] == K[i - 1] and K[i] == K[i + 1]:\n            A[i] = K[i]\n            A[i - 1] = K[i]\n            A[i + 1] = K[i]\n        elif i - 2 >= 0 and K[i] == K[i - 1] and K[i] == K[i + 1] and K[i] == K[i + 2]:\n            A[i] = K[i]\n            A[i - 1] = K[i]\n            A[i + 1] = K[i]\n            A[i + 2] = K[i]\n        elif i - 3 >= 0 and K[i] == K[i - 1] and K[i] == K[i + 1] and K[i] == K[i + 2] and K[i] == K[i + 3]:\n            A[i] = K[i]\n            A[i - 1] = K[i]\n            A[i + 1] = K[i]\n            A[i + 2] = K[i]\n            A[i + 3] = K[i]\n    res = []\n    for i in range(N):\n        if A[i] == 0:\n            res.append(str(K[i]))\n    return''.join(res)\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst_in = list(map(int, stdin.readline().split()))\n    lst_out = [0] * n\n    if len(set(lst_in)) > 1:\n        min_val = min(lst_in)\n        max_val = max(lst_in)\n        if abs(max_val - min_val) < 2:\n            for i in range(n):\n                if lst_in[i] == min_val:\n                    lst_out[i] = max_val\n                elif lst_in[i] == max_val:\n                    lst_out[i] = min_val\n            return''.join([str(i) for i in lst_out])\n        else:\n            return''.join([str(i) for i in lst_in])\n    else:\n        return''.join([str(i) for i in lst_in])\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    x = map(int, stdin.split())\n    x = list(x)\n    x.sort()\n    y = []\n    minn = 0\n    maxx = 0\n    for i in range(1, n):\n        if x[i] == x[i - 1]:\n            minn += 1\n            maxx = i\n            if minn > maxx:\n                break\n    for i in range(n - 1, maxx - 1, -1):\n        if x[i] == x[i - 1]:\n            minn += 1\n            maxx = i\n            if minn > maxx:\n                break\n    for i in range(maxx + 1, n):\n        if x[i] == x[i - 1]:\n            minn += 1\n            maxx = i\n            if minn > maxx:\n                break\n    y = list(range(maxx - minn + 1, maxx + 1))\n    print(minn)\n    print(*y)\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split(\"\\n\")[0].split()))\n    min_x = min(x)\n    max_x = max(x)\n    min_y = min(x)\n    max_y = max(x)\n    measurements = list()\n    for i in range(max_y - min_y + 1):\n        for j in range(max_x - min_x + 1):\n            measurements.append([min_x + j, min_y + i])\n    for i in range(len(measurements)):\n        if measurements[i][0] == measurements[i][1]:\n            continue\n        if i >= len(measurements) / 2:\n            break\n        for j in range(len(measurements)):\n            if j >= len(measurements) / 2:\n                break\n            if (measurements[i][0] == measurements[j][0] and measurements[i][1] == measurements[j][1]) or (measurements[i][0] == measurements[j][1] and measurements[i][1] == measurements[j][0]):\n                measurements.remove(measurements[j])\n                break\n    return str(len(measurements)) + \"\\n\" + \" \".join(list(map(str, measurements)))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    max_num = max(nums)\n    min_num = min(nums)\n    nums_len = len(nums)\n    nums.sort()\n    \n    nums_dict = dict()\n    nums_dict[0] = 0\n    for i in range(1, nums_len+1):\n        nums_dict[i] = nums_dict[i-1] + (nums_len-nums_dict[i-1])//i\n    \n    min_equal_nums = nums_dict[nums_len]\n    if min_equal_nums * 2 > nums_len:\n        return str(nums_len)\n    else:\n        equal_num = min_equal_nums * 2\n    min_equal_nums = nums_dict[equal_num]\n    if min_equal_nums * 2 >= nums_len:\n        return str(nums_len)\n    else:\n        equal_num = min_equal_nums * 2\n    min_equal_nums = nums_dict[equal_num]\n    if min_equal_nums * 2 >= nums_len:\n        return str(nums_len)\n    else:\n        equal_num = min_equal_nums * 2\n    min_equal_nums = nums_dict[equal_num]\n    \n    return''.join(map(str, nums[:equal_num]))\n    \n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 n \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0437\u043d\u044b\u0445 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \n    \u0441\u0443\u043c\u043c\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0435 \u0440\u0430\u0432\u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443.\n    \u0412 \u043e\u0442\u0432\u0435\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u0440\u0435\u0437\u043a\u0438 \u0440\u0430\u0432\u043d\u044b. \u0427\u0438\u0441\u043b\u0430 \n    \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u044b \u0432 \u043b\u044e\u0431\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n    2\n    2\n    2\n    3\n    3\n    \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n    2\n    3\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 nn \u0441\u0442\u0440\u043e\u043a \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \n    \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 1000.\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n    arr.sort()\n    for i in range(len(arr)):\n        if i!= len(arr)-1 and abs(arr[i]-arr[i+1]) > 2:\n            arr[i] = arr[i+1]\n            arr[i+1] = arr[i]\n    print(len(arr))\n    print(' '.join(map(str, arr)))\n    return ''\n\n\ndef"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    return '%s' % (len(stdin))\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"zeus\")\n    18\n    >>> solution(\"map\")\n    35\n    >>> solution(\"ares\")\n    34\n    '''\n   ...\ndef"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n\n\ndef"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"lmao\""
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c\n    alphabet = list(string.ascii_lowercase)\n\n    # \u0414\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n    size = len(stdin)\n    \n    # \u0421\u0447\u0435\u0442\u0447\u0438\u043a \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0440\u0430\u0437\u0432\u043e\u0440\u043e\u0442\u043e\u0432\n    count = 0\n    \n    # \u0421\u043e\u0431\u0435\u0440\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u0447\u0438\u0441\u0435\u043b\n    a_numbers = list(map(int, stdin.split('\\n')[0]))\n    \n    # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b\n    for number in a_numbers:\n        # \u0414\u043b\u0438\u043d\u0430 \u0447\u0438\u0441\u043b\u0430\n        number_len = len(str(number))\n        \n        # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0434\u043b\u0438\u043d\u0443 \u0447\u0438\u0441\u043b\u0430\n        rest = size % number_len\n        \n        # \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0434\u043b\u0438\u043d\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f\n        if rest == 0:\n            # \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0440\u0430\u0432\u043d\u0430 \u0434\u043b\u0438\u043d\u0435 \u0447\u0438\u0441\u043b\u0430, \u0442\u043e \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u0435\u043b \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0435\n            for symbol in alphabet:\n                # \u0415\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u0435\u043b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u043e \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0435\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438\n                if symbol == str(number):\n                    count += 1\n        else:\n            # \u0418\u043d\u0430\u0447\u0435 \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0435 \u0440\u0430\u0432\u043d\u0430 \u0434\u043b\u0438\u043d\u0435 \u0447\u0438\u0441\u043b\u0430, \u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438\n            for symbol in str(number):\n                count += 1\n\n    # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0437\u0432\u043e\u0440\u043e\u0442\u043e\u0432\n    return count\n\nprint(solution(stdin))"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    return min(\n        [\n            len(stdin.replace(letter, \"\").replace(letter.upper(), \"\"))\n            for letter in alphabet\n        ]\n    )\n\n\ndef"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    wheels = {char: None for char in alphabet}\n\n    def rotate(from_char, to_char):\n        # print(f\"{from_char} -> {to_char}\")\n        # assert wheels[from_char] is not None\n        # assert wheels[to_char] is None\n\n        if to_char == from_char:\n            return\n\n        # if wheels[to_char] is not None:\n        #     return\n\n        l_from_char = wheels[from_char]\n        r_from_char = wheels[from_char]\n\n        # wheels[from_char] = to_char\n        wheels[to_char] = r_from_char\n        wheels[l_from_char] = from_char\n\n        return\n\n    def rotate_all_wheels():\n        for i in range(26):\n            rotate(\"a\", alphabet[i])\n\n    def get_wheel_next_char(cur_char):\n        return wheels[cur_char]\n\n    def get_wheel_char(wheel_index):\n        # print(f\"wheel index = {wheel_index}\")\n        return wheels[wheel_index]\n\n    def get_next_char(cur_char):\n        # print(f\"next char = {alphabet.index(cur_char) + 1}\")\n        return alphabet[alphabet.index(cur_char) + 1]\n\n    rotate_all_wheels()\n    cur_char = stdin[0]\n    next_char = get_next_char(cur_char)\n    wheel_index = alphabet.index(cur_char)\n    # print(f\"cur char = {cur_char}, next char = {next_char}, wheel index = {wheel_index}\")\n    wheel_next_char = get_wheel_next_char(cur_char)\n    # print(f\"wheel next char = {wheel_next_char}\")\n    rotations_needed = 0\n\n    while next_char!= stdin[-1]:\n        if next_char < wheel_next_char:\n            rotate(wheel_index, wheel_next_char)\n            # print(f\"{next_char} -> {wheel_next_char}\")\n            wheel_index = alphabet.index(next_char)\n            # print(f\"wheel index = {wheel_index}\")\n            rotations_needed += 1\n            wheel_next_char = get_wheel_next_char(next_char)\n            next_char = get_next_char(next_char)\n            # print(f\"next char = {next_char}, wheel next char = {wheel_next_char}\")\n\n        else:\n            rotate(wheel_next_char, wheel_index)\n            # print(f\"{wheel_next_char} -> {wheel_index}\")\n            wheel_next_char = get_wheel_next_char(next_char)\n            # print(f\"wheel next char = {wheel_next_char}\")\n            rotations_needed += 1\n            wheel_index = alphabet.index(wheel_next_char)\n            next_char = get_next_char(wheel_next_char)\n            # print(f\"next char = {next_char}, wheel next char = {wheel_next_char}\")\n\n    rotate_all_wheels()\n    rotations_needed += 1\n    rotations_needed += alphabet.index(stdin[-1])\n    # print(f\"rotations needed = {rotations_needed}\")\n    return str(rotations_needed)\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a1, a2, k1, k2, n = map(int, stdin.split())\n    cnt1 = 0\n    cnt2 = 0\n    for i in range(n):\n        if i % (k1 + k2) < k1:\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    if cnt1 == a1 and cnt2 == a2:\n        return str(0) +'' + str(a1 + a2)\n    else:\n        return str(max(0, cnt1 - a1)) +'' + str(a1 + a2 - max(0, cnt2 - a2))\n\nsolution(\"1 2 3 4 5\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = [int(x) for x in stdin.split('\\n')]\n    if k1 >= n // 2:\n        return str(0)\n    if k2 >= n // 2:\n        return str(a1 + a2)\n    return str(min(a1, a2) + max(0, (n - 2 * k1 - 2 * k2) // (k1 - k2)))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inp = [int(x) for x in stdin.split()]\n    a = inp[0]\n    b = inp[1]\n    k1 = inp[2]\n    k2 = inp[3]\n    n = inp[4]\n    \n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if inp[5] % (i + 1) == 0 or inp[5] % (j + 1) == 0:\n                continue\n            result.append(min(i + 1, j + 1))\n            \n    if len(result) == 0:\n        return '0'+ str(a + b)\n    else:\n        return str(min(result)) +'' + str(max(result))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = [int(x) for x in stdin.split()]\n    c1 = k1 + (n // k1)\n    c2 = k2 + (n // k2)\n    return f\"{min(a1, n - c1)}\\n{max(a2, n - c2)}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split('\\n')[:5])\n    print(min(a1 * k1, a2 * k2, n // k1 + n // k2))\n    print(max(a1 * k1, a2 * k2, n // k1 + n // k2))\n    return \"\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split())\n    return '{} {}'.format(max(0, k1 - n // a1), min(k2, n // a2))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split('\\n')[:-1])\n    if (n % (k1 + k2)) == 0:\n        print(0, n // (k1 + k2))\n    else:\n        print(n // (k1 + k2), n % (k1 + k2))\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.isdigit():\n        return \"Input is not digits\"\n\n    n, t = map(int, stdin.split(' '))\n\n    if not 1 <= n <= 50:\n        return \"Input is not in range 1-50\"\n\n    if not 1 <= t <= 50:\n        return \"Input is not in range 1-50\"\n\n    if not stdin.isalpha():\n        return \"Input is not letters\"\n\n    queue = stdin\n\n    for i in range(1, t + 1):\n        queue = queue.replace(\"B\", \"G\", 1)\n        queue = queue.replace(\"G\", \"B\", 1)\n\n    return queue\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    children = list(stdin)\n    queue = []\n    result = []\n    for child in children:\n        queue.append(child)\n    for _ in range(int(stdin[0])):\n        for i in range(1, len(queue)):\n            if queue[i - 1] == \"G\" and queue[i] == \"B\":\n                queue[i - 1], queue[i] = queue[i], queue[i - 1]\n    for element in queue:\n        result.append(element)\n    return \"\".join(result)\n\n\ndef"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    arr = stdin.split()\n    arr = ['G' if i == 'B' else 'B' for i in arr]\n    for i in range(t):\n        s = [''] * n\n        for j in range(n):\n            if arr[j] == 'B':\n                s[j] = 'G'\n            else:\n                s[j] = 'B'\n            arr = s\n    return ''.join(arr)"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find how the schoolchildren will be arranged after a given amount of time.\"\"\"\n    n, t = stdin.split()\n    n, t = int(n), int(t)\n    q = stdin[:-1]\n    a = \"\"\n    for i in range(n):\n        if q[i] == \"B\":\n            a += \"B\"\n        else:\n            a += \"G\"\n    for i in range(t):\n        if i % 2:\n            q = q[1:] + q[0]\n        else:\n            q = q[-1] + q[:-1]\n        a = a[-1] + a[:-1]\n    return a\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    queue = stdin.replace('\\n', '')\n    for _ in range(t):\n        queue = queue.replace('GBG', 'GGG')\n        queue = queue.replace('BG', 'GG')\n    return queue\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # init\n    n, t = map(int, stdin.split())\n    arr = stdin.split()\n    \n    # main\n    arr.sort(reverse=True)\n    for i in range(1, t + 1):\n        if arr[0][i] == 'G':\n            arr[0] = arr[0][:i] + 'B' + arr[0][i + 1:]\n            arr.sort(reverse=True)\n    \n    return ''.join(arr[0])\n\n\n\nimport sys\ndef"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, t = map(int, s.split())\n    b_g = s[:n]\n    b_g_list = [i for i in range(1, n + 1) if b_g[i - 1] == 'B']\n    i = 0\n    a = ''\n    for _ in range(t):\n        if i == len(b_g_list) - 1:\n            i = 0\n        if b_g_list[i] == b_g_list[i + 1]:\n            a += 'B'\n            i += 1\n        else:\n            a += 'G'\n            i += 1\n    return a\n\n\ndef"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 1\\nBGGBG\")\n    'GBGGB'\n    \"\"\"\n    n, t = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    c = stdin.split(\"\\n\")[1]\n    l = []\n    for i in range(n):\n        l.append((int(c[i]), c[i]))\n    l.sort()\n    s = []\n    for i in range(n):\n        s.append(l[i][1])\n    return ''.join(s)\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if t % 2 == 0:\n        for i in range(1, n + 1):\n            if i % 2!= 0:\n                stdin = stdin[:i - 1] + \"B\" + stdin[i - 1:]\n            else:\n                stdin = stdin[:i - 1] + \"G\" + stdin[i - 1:]\n    else:\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                stdin = stdin[:i - 1] + \"B\" + stdin[i - 1:]\n            else:\n                stdin = stdin[:i - 1] + \"G\" + stdin[i - 1:]\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    string = stdin[:-1]\n    index = 0\n    string = list(string)\n    for i in range(t):\n        if string[index] == 'B':\n            string[index] = 'G'\n            string[index + 1] = 'B'\n            index += 2\n        else:\n            string[index] = 'B'\n            string[index + 1] = 'G'\n            index += 2\n    return \"\".join(string)\n\n\ndef"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if k == 1:\n        return str(1)\n    p, q = 1, 1\n    for i in range(k):\n        for j in range(2, n + 1):\n            if n % j == 0:\n                p *= j\n                q *= j\n                if n / j!= j:\n                    q *= n / j\n                break\n    return str(int(p / q))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"./test_case/example_1\")\n    3\n    >>> solution(\"./test_case/example_2\")\n    875000008\n    >>> solution(\"./test_case/example_3\")\n    237178099\n    \"\"\"\n    n, k = map(int, stdin.strip().split())\n    return f\"{1 + sum(list(range(1, n, 1)) * k) % (10 ** 9 + 7)}\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    S = set(a)\n    for i in range(1, n + 1):\n        if n % i == 0:\n            S.add(i)\n            S.add(n // i)\n    M = max(S)\n    N = min(S)\n    if M > N:\n        return str(M * N)\n    return str(sum([a[i] for i in range(k)]) // len(a))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    v = n\n    p, q = 1, v\n    for _ in range(k):\n        v = get_divisors(v)[0]\n        p = p * v % (10**9 + 7)\n        q = q * v % (10**9 + 7)\n    return str(p * inverse_mod(q, 10**9 + 7) % (10**9 + 7))\n\n\ndef"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    ans = N\n    for _ in range(K - 1):\n        ans = ((ans % (10**9 + 7)) * (K - _) + _) % (10**9 + 7)\n    print(ans)\n    return \"\"\n\ndef"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(n - k + int((1 - n % k) * k / k))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(i) for i in stdin.split()]\n    p = q = 10 ** 9 + 7\n    for i in range(1, k + 1):\n        v, p, q = v * v % (p * q), p, q\n        d = gcd(p, q)\n        p //= d\n        q //= d\n    return str(p * q % (10 ** 9 + 7))"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the expected value after $k$ steps using the method mentioned in the description.\n\n    Args:\n        stdin (str): The input of the problem.\n\n    Returns:\n        str: The output of the problem.\n    '''\n    n, k = map(int, stdin.split())\n    a, b = 1, 9\n    for _ in range(k):\n        v = n\n        while v > 0:\n            d = v % 10\n            if d not in (1, n):\n                v //= d\n                a *= d\n                a %= 10 ** 9 + 7\n                b *= d ** -1\n                b %= 10 ** 9 + 7\n        n = a * b % (10 ** 9 + 7)\n    print(n)\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p, q = 1, n\n    for _ in range(k):\n        p, q = p * (n // q) + q, n\n    print(p % (10 ** 9 + 7))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the divisor of a number\n    \"\"\"\n    \n    def get_divisor(v):\n        \"\"\"Gets all divisors of a number, including 1 and itself\n        \"\"\"\n        divisors = []\n        for i in range(2, int(v**0.5)+1):\n            if v % i == 0:\n                divisors.append(i)\n                divisors.append(v // i)\n        return divisors\n    \n    def coprime(p, q):\n        \"\"\"Gets if two integers are coprime\n        \"\"\"\n        return gcd(p, q) == 1\n    \n    def gcd(p, q):\n        \"\"\"Gets the greatest common divisor of two integers\n        \"\"\"\n        if q == 0:\n            return p\n        else:\n            return gcd(q, p % q)\n    \n    n, k = map(int, stdin.split())\n    ans = 1\n    \n    # number of operations\n    for _ in range(k):\n        v = n\n        # generating a random number between 1 and v-1\n        m = randint(1, v)\n        for i in get_divisor(m):\n            if coprime(i, v):\n                n = n*i\n                v = v//i\n                break\n    \n    ans = n\n    ans = ans % 1000000007\n    return str(ans)\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Write your code here\n    first = stdin.split(' ')[0]\n    second = stdin.split(' ')[1]\n    num_zero = int(first)\n    num_one = int(second)\n    if num_zero > num_one:\n        return '-1'\n    if num_zero == num_one:\n        return '0'\n    num_one = 2 * num_one\n    total_combinations = num_one ** num_zero\n    first_zero = 0\n    first_one = 1\n    count = 0\n    solution = ''\n    while num_zero >= 1:\n        num_zero -= 1\n        while first_zero < num_one:\n            first_one = 2 * first_one\n            count += 1\n            if count == total_combinations:\n                solution = '0' + solution\n                return solution\n        first_zero = first_one\n        first_one = 2 * first_one\n        count += 1\n        if count == total_combinations:\n            solution = '0' + solution\n            return solution\n    return solution\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    stdin = stdin.split()\n    m = int(stdin[1])\n    n = int(stdin[0])\n    cards = [0] * m\n    for i in range(m):\n        cards[i] = 1\n    \n    card_str = ''.join(str(c) for c in cards)\n    \n    for i in range(n):\n        if card_str.find('11')!= -1:\n            card_str = card_str.replace('11', '1', 1)\n        else:\n            return -1\n    \n    return card_str\n    \n    \n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    # numbers of zeroes and ones\n    z = n\n    o = m\n    # create an array for the output\n    out = []\n    # iterate through each number of zeroes and ones\n    for i in range(n):\n        # if the number is 0\n        if z > 0:\n            out.append(0)\n            # decrease the number of zeroes by 1\n            z -= 1\n        # if the number is 1\n        if o > 0:\n            out.append(1)\n            # decrease the number of ones by 1\n            o -= 1\n    # if the number of zeroes and ones are not equal\n    if len(out)!= n + m:\n        return -1\n    # return the output\n    return ''.join(out)\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0438\u0437 \u0434\u0432\u0443\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 0 \u0438 1\n    \u043f\u0440\u0438\u0433\u043e\u0434\u043d\u043e\u0439 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = [1] * m + [0] * n\n    # \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\n    # 10110101010\n    print(*a, sep='')\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\n    if any(a[i] == a[i + 1] for i in range(len(a) - 1)):\n        return -1\n    # \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    # 10110101010\n    # 1011010101101101010\n    # 101101010110110101101101010\n    # 101101010110110101101101101101101010\n    #...\n    for i in range(1, len(a)):\n        if a[i - 1] == a[i] == 1:\n            a[i - 1], a[i] = 0, 0\n            if a[i] == 0:\n                break\n    # \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n    # 1011010101101101010\n    # 101101010110110101101101010\n    # 101101010110110101101101101101101010\n    #...\n    return ''.join(str(el) for el in a)\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    l = [\"0\"]*n + [\"1\"]*m\n    print(''.join(l))\n    \nsolution(input())\n    \n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = m\n    while x:\n        if n % 2 == 0 and x % 2:\n            return -1\n        n //= 2\n        x //= 2\n    # Even number of zeroes\n    if n % 2 == 0:\n        return ''.join([bin(i)[2:].zfill(m) for i in range(1, 2 ** m + 1)])\n    # Odd number of zeroes\n    if n % 2 == 1:\n        return ''.join([bin(i)[2:].zfill(m) for i in range(1, 2 ** m - 1, 2)])\n\n\ndef"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    b = \"11011011011011\"\n    a = \"111011011101101\"\n    x = 0\n    while x < m:\n        if a[x] == '1' and a[x + 1] == '0':\n            b = b[:x] + '1' + b[x + 2:]\n            x += 1\n        x += 1\n    if b == '111111111111111':\n        return -1\n    else:\n        return b\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % 2 == 0:\n        return \"0\" * (n // 2) + \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    n, m = map(int, input_str.split(' '))\n    if (n == 1 and m == 0) or (m == 1 and n == 0):\n        return '101'\n    if n == 1 and m == 1:\n        return '110110110101'\n    if n > 1 and m == 0:\n        return '101'\n    if n > 1 and m == 1:\n        return '11011011011011'\n    if n == 0 and m == 0:\n        return '101'\n    if n == 0 and m == 1:\n        return '110110110101'\n    if n == 0 and m > 1:\n        return '11011011011011'\n    if n > 1 and m > 1:\n        return '-1'\ndef"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    count = 0\n    count2 = 0\n    count3 = 0\n    for i in range(n):\n        if i % 2 == 0 and i % 4 == 0:\n            count += 1\n        elif i % 2 == 1 and i % 4 == 3:\n            count += 1\n        elif i % 2 == 0 and i % 4 == 2:\n            count2 += 1\n        elif i % 2 == 1 and i % 4 == 1:\n            count2 += 1\n        elif i % 2 == 0 and i % 4 == 3:\n            count3 += 1\n        elif i % 2 == 1 and i % 4 == 2:\n            count3 += 1\n    count4 = 0\n    for i in range(n):\n        if i % 2 == 0 and i % 4 == 0:\n            count4 += 1\n        elif i % 2 == 1 and i % 4 == 3:\n            count4 += 1\n        elif i % 2 == 0 and i % 4 == 2:\n            count4 += 1\n        elif i % 2 == 1 and i % 4 == 1:\n            count4 += 1\n    if k * count > count2 + count3 and k * count > (n // 2):\n        return n - count, count, count2 + count3\n    elif count2 * k > count + count3:\n        return count, count2, count3\n    elif count3 * k > count + count2:\n        return count, count3, count2\n    else:\n        return count, count3, count2\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(n - n//2)\n    print(n // 2)\n    print(n - n//2 + n // 2)\n    return str(n - n//2) +'' + str(n // 2) +'' + str(n - n//2 + n // 2)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k >= n//2:\n        print(n//2, n//2, 0)\n    else:\n        print(n//2 - k, n//2, n//2 - k)\n    return \"\"\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Problem Statement: https://www.hackerrank.com/challenges/counting-the-balls/problem\n\n    Parameters\n    ----------\n    stdin : str\n        A string of integers.\n\n    Returns\n    -------\n    str\n        A string of integers.\n\n    \"\"\"\n   ...\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of students with diplomas, certificates and the number of students who are not winners in case when the number of winners is maximum possible.\n\n    >>> solution('18 2')\n    '3 6 9'\n    >>> solution('9 10')\n    '0 0 9'\n    >>> solution('1000000000000 5')\n    '83333333333 416666666665 500000000002'\n    >>> solution('1000000000000 499999999999')\n    '1 499999999999 500000000000'\n    \"\"\"\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n\n    diplomas = n // 2\n    certificates = n - diplomas\n\n    return str(diplomas) +'' + str(certificates) +'' + str(n - (diplomas + certificates))\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of winners according to the rules.\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(stdin)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s_diploma = n // 4\n    s_certificate = n // 5\n    s_none = n // 2\n    return f\"{s_diploma} {s_certificate} {s_none}\"\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    cnt_d, cnt_c, cnt_none = 0, 0, 0\n    for i in range(1, n + 1):\n        if cnt_d >= k:\n            break\n        if i % 10 == 5:\n            cnt_d += 1\n        elif i % 10 == 9:\n            cnt_none += 1\n        else:\n            cnt_c += 1\n    for i in range(1, n + 1):\n        if cnt_d >= k:\n            break\n        if i % 10 == 5:\n            cnt_d += 1\n        elif i % 10 == 9:\n            cnt_none += 1\n        else:\n            cnt_c += 1\n    return f'{cnt_d}\\n{cnt_c}\\n{cnt_none}'\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    (n, k) = map(int, stdin.split())\n    # write your code in Python 3.6\n    d = int(n * k / 2)\n    c = int(n * k / 2 - d)\n    w = int(n - d)\n    return str(d) +'' + str(c) +'' + str(w)"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"NO\"\n    # or\n    # return \"YES\" if len(str(stdin)) < 2 or '0' not in str(stdin) and str(stdin)[::-1] == str(stdin) else \"NO\""
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_str = stdin.split(\"0\")\n    len_num = len(num_str)\n    if len_num % 2 == 0:\n        for i in range(len_num // 2):\n            if num_str[i]!= num_str[-i - 1]:\n                return \"NO\"\n        return \"YES\"\n    elif len_num % 2!= 0:\n        for i in range(len_num // 2 + 1):\n            if num_str[i]!= num_str[-i - 1]:\n                return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindromic(n: int) -> bool:\n        if len(str(n)) == 1:\n            return True\n        s = str(n)\n        return s == s[::-1]\n\n    n = int(stdin)\n    return \"YES\" if is_palindromic(n) else \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = list(stdin)\n    number.reverse()\n    str_number = ''.join(number)\n    return str_number"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    number = str(number)\n    number_rev = number[::-1]\n    \n    if number == number_rev:\n        return \"YES\"\n    \n    if len(number) > 1:\n        number = number[1:]\n        number_rev = number[::-1]\n        number = \"0\" + number\n        number_rev = number_rev + \"0\"\n        if number == number_rev:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n    \n    \nprint(solution(input()))\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    return 'YES' if x[0]!= x[::-1] or x[:len(x)//2]!= x[:len(x)//2][::-1] else 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number == 0:\n        return \"YES\"\n    if str(number) == str(number)[::-1]:\n        return \"NO\"\n    return \"YES\" if str(number) + '0' == str(number)[::-1] + '0' else \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    tmp = x\n    if x < 10:\n        return \"YES\"\n    elif x < 100:\n        if (x % 10) % 2 == 0 or (x % 10) == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if (x % 10) % 2 == 0 or (x % 10) == 0:\n            x = x // 10\n            if (x % 10) % 2 == 0 or (x % 10) == 0:\n                return \"NO\"\n            else:\n                tmp = x\n                x = x // 10\n                if (x % 10) % 2 == 0 or (x % 10) == 0:\n                    return \"NO\"\n                else:\n                    tmp = x\n                    x = x // 10\n                    if (x % 10) % 2 == 0 or (x % 10) == 0:\n                        return \"NO\"\n                    else:\n                        tmp = x\n                        x = x // 10\n                        if (x % 10) % 2 == 0 or (x % 10) == 0:\n                            return \"NO\"\n                        else:\n                            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(number: str) -> bool:\n        return number == number[::-1]\n\n    def is_quasi_palindrome(number: int) -> bool:\n        number_str = str(number)\n\n        while len(number_str) > 1 and number_str[0] == \"0\":\n            number_str = number_str[1:]\n\n        if not is_palindrome(number_str):\n            return False\n\n        number = int(number_str)\n\n        for length in range(1, len(number_str)):\n            for offset in range(len(number_str) - length + 1):\n                sub = int(number_str[offset:offset + length])\n                if not is_palindrome(str(sub)):\n                    return False\n\n        return True\n\n    return \"YES\" if is_quasi_palindrome(int(stdin)) else \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if len(str(x)) % 2 == 0:\n        if x < 10:\n            return \"YES\"\n        for i in range(0, len(str(x))):\n            if i == len(str(x)) - 1:\n                return \"YES\"\n            if int(str(x)[i])!= int(str(x)[len(str(x)) - 1 - i]):\n                return \"NO\"\n        return \"YES\"\n    else:\n        for i in range(0, len(str(x))):\n            if i == len(str(x)) - 1:\n                return \"YES\"\n            if int(str(x)[i])!= int(str(x)[len(str(x)) - 1 - i]):\n                return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve())\n \ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nYou can use bin(x)[2:] to convert an integer x into binary, and int(s, 2) to convert binary s into an integer.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for input format\"\"\"\n    n = int(stdin.read())\n    return f\"{bin(n-1)[2:].count('1')}\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    order = int(stdin)\n    table = []\n    for x in range(order):\n        for y in range(x + 1, order + 1):\n            if (x ^ y) == 0:\n                table.append([x, y, (x + y) >> 1])\n    return str(len(table))\n\n\ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def xor_triangles(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    def xor_triangles_2(n):\n        return (n * (n + 1) / 2) * (n + 1)\n\n    n = int(stdin)\n    return xor_triangles(n) - xor_triangles_2(n)\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(n * (n - 1) // 2)\n\n\ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '':\n        return 'YES'\n    n, m = map(int, stdin.split(' '))\n    matrix = []\n    for i in range(n):\n        matrix.append(stdin.split('\\n')[i])\n    r_1, c_1, r_2, c_2 = map(int, stdin.split('\\n')[2].split(' '))\n    if r_1 == r_2 and c_1 == c_2:\n        return 'YES'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n    matrix[r_1 - 1][c_1 - 1] = '.'\n    matrix[r_2 - 1][c_2 - 1] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                if matrix[i - 1][j] == 'X':\n                    matrix[i][j] = 'X'\n                if matrix[i][j - 1] == 'X':\n                    matrix[i][j] = 'X'\n                if i!= 0 and matrix[i - 1][j]!= 'X':\n                    matrix[i][j] = 'X'\n                if j!= 0 and matrix[i][j - 1]!= 'X':\n                    matrix[i][j] = 'X'\n    if matrix[r_2 - 1][c_2 - 1] == 'X':\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(r\"\"\"\n   ... 4 6\n   ... X...XX\n   ......XX.\n   ....X..X.\n   .........\n   ... 1 6\n   ... 2 2\n   ... \"\"\")\n    YES\n    >>> solution(r\"\"\"\n   ... 5 4\n   ....X..\n   ......X\n   ... X.X.\n   .......\n   ....XX.\n   ... 5 3\n   ... 1 1\n   ... \"\"\")\n    NO\n    \"\"\"\n\n    pass"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'YES'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    grid = [['' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = stdin[i * m + j]\n    r1, c1 = map(int, stdin.split('\\n')[1].split(' '))\n    r2, c2 = map(int, stdin.split('\\n')[2].split(' '))\n    r1, c1, r2, c2 = r1 - 1, c1 - 1, r2 - 1, c2 - 1\n    return 'YES' if grid[r1][c1] == 'X' and grid[r2][c2] == '.' else 'NO'\n\n\"\"\"\n\nimport numpy as np\n\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution\n    :param stdin: input\n    :return: output\n    \"\"\"\n    pass\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, M = list(map(int, stdin.readline().strip().split(\" \")))\n    bridges = []\n    for i in range(M):\n        a, b = list(map(int, stdin.readline().strip().split(\" \")))\n        bridges.append([a, b])\n\n    bridges = sorted(bridges, key=lambda x: x[0])\n\n    def is_valid(bridges):\n        checked = []\n        bridges = sorted(bridges, key=lambda x: x[0])\n        for bridge in bridges:\n            if bridge[0] in checked:\n                return False\n            checked.append(bridge[0])\n        return True\n\n    def find_bridges(bridges):\n        checked = []\n        bridges = sorted(bridges, key=lambda x: x[0])\n        for bridge in bridges:\n            if bridge[0] in checked:\n                return True\n            checked.append(bridge[0])\n        return False\n\n    def find_bridge(bridges):\n        while find_bridges(bridges):\n            for bridge in bridges:\n                a, b = bridge\n                bridges.remove([a, b])\n            print(bridges)\n\n    while not is_valid(bridges):\n        find_bridge(bridges)\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  inputs = stdin.split('\\n')\n  n, m = map(int, inputs[0].split())\n  # \u0441\u0432\u044f\u0437\u044c: [\u043d\u0430\u0447\u0430\u043b\u043e, \u043a\u043e\u043d\u0435\u0446, \u0432\u0435\u0441]\n  links = [(map(int, link.split())) for link in inputs[1:]]\n  graph = collections.defaultdict(list)\n  for a, b, w in links:\n    graph[a-1].append((w, b-1))\n    graph[b-1].append((w, a-1))\n  for i in graph:\n    graph[i].sort()\n  result = 0\n  for i in range(m):\n    result += find_all_paths(graph, 1, n)\n  return result\n\ndef"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of bridges that must be removed to meet all M requests from the standard input\n\n    :param stdin: standard input\n    :return: number of bridges to remove\n    \"\"\"\n    n, m = map(int, stdin.split())\n    islands = []\n    for i in range(n):\n        islands.append(tuple(map(int, stdin.split())))\n    return 0\n\"\"\"\n\n\nimport sys\nimport heapq\n\n\ndef"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    num_of_bridges = []\n    bridges = []\n    for _ in range(M):\n        x, y = [int(x) for x in stdin.split(' ')]\n        bridges.append((x, y))\n    bridges.sort(key = lambda x: x[0])\n    for i in range(N-1):\n        for j in range(i+1, N):\n            num_of_bridges.append((abs(bridges[i][0] - bridges[j][0]), abs(bridges[i][1] - bridges[j][1])))\n    num_of_bridges.sort(key = lambda x: x[0])\n    return sum(x[0] for x in num_of_bridges[M:])\n\n-----Explanation-----\n1) We need to remove all M bridges.\n2) We can choose to remove the bridge connecting the second and third islands from the west, removing 2 bridges.\n3) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n4) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n5) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n6) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n7) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n8) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n9) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n10) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n11) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n12) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n13) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n14) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n15) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n16) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n17) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n18) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n19) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n20) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n21) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n22) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n23) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n24) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n25) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n26) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n27) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n28) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n29) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n30) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n31) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n32) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n33) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n34) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n35) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n36) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n37) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n38) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n39) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n40) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n41) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n42) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n43) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n44) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n45) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n46) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n47) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n48) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n49) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n50) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n51) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n52) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n53) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n54) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n55) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n56) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n57) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n58) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n59) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n60) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n61) We can choose to remove the bridge connecting the first and third islands from the west, removing 1 bridge.\n62) We can choose to remove the bridge connecting the first and second islands from the west, removing 1 bridge.\n63) We can choose to remove the bridge connecting the second and third islands from the west, removing 1 bridge.\n64) We can choose to remove the bridge connecting"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    n = int(n)\n    list_a = stdin.splitlines()[1:]\n    list_a = [int(i) for i in list_a]\n    list_a = sorted(list_a)\n    if list_a[0] < 0:\n        print('first')\n    elif list_a[0] >= 0:\n        print('second')\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\ndef"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    number_of_techniques = int(lines[0])\n    points = []\n    for line in lines[1:]:\n        points.append(int(line))\n    points.sort()\n    first_wrestler_points = points.copy()\n    second_wrestler_points = points.copy()\n    first_wrestler_points.reverse()\n    first_wrestler_points_dict = {}\n    second_wrestler_points_dict = {}\n    for i in range(number_of_techniques):\n        if points[i] > 0:\n            first_wrestler_points_dict[points[i]] = i\n            second_wrestler_points_dict[-(points[i])] = i\n        else:\n            first_wrestler_points_dict[-(points[i])] = i\n            second_wrestler_points_dict[points[i]] = i\n    keys = set(first_wrestler_points_dict.keys()).intersection(set(second_wrestler_points_dict.keys()))\n    # keys = [k for k in set(first_wrestler_points_dict.keys()).intersection(set(second_wrestler_points_dict.keys()))]\n    # print(keys)\n    first_wrestler_points_dict = {k: first_wrestler_points_dict[k] for k in keys}\n    second_wrestler_points_dict = {k: second_wrestler_points_dict[k] for k in keys}\n    print(first_wrestler_points_dict)\n    print(second_wrestler_points_dict)\n    # if len(keys) == 0:\n    #     print(\"Draw\")\n    # else:\n    #     print(first_wrestler_points_dict)\n    #     print(second_wrestler_points_dict)\n    #     print(max(first_wrestler_points_dict))\n    #     print(max(second_wrestler_points_dict))\n    #     if first_wrestler_points_dict[max(first_wrestler_points_dict)] == second_wrestler_points_dict[max(second_wrestler_points_dict)]:\n    #         print(\"Draw\")\n    #     else:\n    #         if len(first_wrestler_points_dict) > len(second_wrestler_points_dict):\n    #             print(\"first\")\n    #         else:\n    #             print(\"second\")\n    #     print(max(first_wrestler_points_dict, key=first_wrestler_points_dict.get))\n    #     print(max(second_wrestler_points_dict, key=second_wrestler_points_dict.get))\n    #     print(first_wrestler_points_dict)\n    #     print(second_wrestler_points_dict)\n    return\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"first\" if len(stdin) % 2 else \"second\"\n\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(a_i) for a_i in stdin.split('\\n')]\n    wins = [0] * n\n    loses = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if a[i] > a[j]:\n                wins[i] += 1\n            elif a[i] < a[j]:\n                loses[j] += 1\n    wins.sort()\n    loses.sort()\n    if wins[-1] > loses[-1]:\n        return 'first'\n    elif loses[-1] > wins[-1]:\n        return'second'\n    else:\n        for i in range(n - 1, -1, -1):\n            if wins[i] + 1 > loses[i] + 1:\n                return 'first'\n            elif loses[i] + 1 > wins[i] + 1:\n                return'second'\n            else:\n                if a[i] > a[i - 1]:\n                    return 'first'\n                elif a[i] < a[i - 1]:\n                    return'second'\n\n\ndef"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_techniques, technique_1, technique_2 = [int(x) for x in stdin.split('\\n')]\n    technique_1 = technique_1 if technique_1 > 0 else -technique_1\n    technique_2 = technique_2 if technique_2 > 0 else -technique_2\n    if abs(technique_1) > abs(technique_2):\n        return 'first'\n    elif technique_1 == technique_2:\n        return 'first' if technique_1 > 0 else'second'\n    else:\n        return'second'\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin.split('\\n'))\n    sum_a = [int(i) for i in a[0].split()]\n    for i in range(len(sum_a)):\n        if i > 0 and sum_a[i] < sum_a[i-1]:\n            return \"second\"\n        if i > 0 and sum_a[i] > sum_a[i-1]:\n            return \"first\"\n    return \"second\"\n\na = list(input().split('\\n'))\nsum_a = [int(i) for i in a[0].split()]\nfor i in range(len(sum_a)):\n    if i > 0 and sum_a[i] < sum_a[i-1]:\n        print(\"second\")\n        break\n    if i > 0 and sum_a[i] > sum_a[i-1]:\n        print(\"first\")\n        break\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates who will win in a fight.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Who will win.\n    \"\"\"\n    # this way I can use stdin.split() to get a list of strings\n    nums = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    n = len(nums)\n    \n    # let's find which one has the largest absolute number\n    left = max(nums)\n    right = max(nums)\n    \n    # if the absolute values are equal, the one with the smallest absolute\n    # value of its elements will have the largest sum of those elements\n    if abs(left) == abs(right):\n        left = sum(abs(x) for x in nums)\n        right = sum(abs(x) for x in nums)\n        \n        # if left and right are equal, then I don't need to check anything\n        if left > right:\n            return \"first\"\n        elif left < right:\n            return \"second\"\n        else:\n            return \"first\"\n    \n    if left < 0:\n        return \"second\"\n    else:\n        return \"first\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [int(x) for x in stdin.readlines()]\n    res = ''\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            res = res + 'first' if points[i - 1] >= 0 else res +'second'\n        else:\n            res = res + 'first' if points[i - 1] <= 0 else res +'second'\n    print(res)\n    return res\n\n\ndef"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"first\" if abs(int(stdin)) > abs(int(stdin)) else \"second\"\n\n\ndef"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"YES\" if... else \"NO\""
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function will process the input and determine whether a certain person can order the proper amount of pizzas at each day using only coupons and discounts.\"\"\"\n\n    def task_checker(pizzas_in_hand: list, coupons_and_discounts: dict) -> bool:\n        \"\"\"This function will check whether the person can order the proper amount of pizzas at each day using only coupons and discounts.\"\"\"\n        for day_pizzas, day_coupons_and_discounts in coupons_and_discounts.items():\n            pizzas_in_hand.append(day_pizzas)\n\n        return len(pizzas_in_hand) == pizzas_in_hand.count(pizzas_in_hand[0])\n\n    def coupons_and_discounts_checker(coupons_and_discounts: dict, day: int) -> bool:\n        \"\"\"This function will check if the person can use coupons and discounts during the day.\"\"\"\n        for coupons, days in coupons_and_discounts.items():\n            if day in days and day + 1 in days:\n                return True\n\n        return False\n\n    def main(stdin: str) -> str:\n        \"\"\"This is the main function that will receive the input data from the stdin, determine the proper amount of pizzas and return the result.\"\"\"\n        n = int(stdin.strip())\n        pizzas_in_hand = [0] * n\n\n        coupons_and_discounts = {\n            \"COUPON\": [],\n            \"DISCOUNT\": []\n        }\n\n        for day in range(n):\n            day_pizzas, day_coupons_and_discounts = [int(x) for x in stdin.strip().split(\" \")]\n            pizzas_in_hand[day] = day_pizzas\n            coupons_and_discounts[day_coupons_and_discounts[0]][day] = day_coupons_and_discounts[1]\n\n        if task_checker(pizzas_in_hand, coupons_and_discounts):\n            return \"YES\"\n        return \"NO\"\n\n    return main(stdin)"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 1 2\\n\")\n    'YES'\n    \"\"\"\n    n = int(stdin.readline())\n    teams = [int(x) for x in stdin.readline().split()]\n\n    coupons = 1\n    discounts = 0\n    cur_coupon = 1\n    cur_discount = 1\n    pizzas_to_buy = 0\n\n    for i in range(n):\n        coupons = min(coupons, teams[i])\n        if i % 2 == 0:\n            discounts = min(discounts, teams[i])\n        pizzas_to_buy += 1\n\n    if coupons >= teams[0] and discounts >= teams[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    teams = lines[1].split(' ')\n    for i in range(n):\n        teams[i] = int(teams[i])\n\n    coupon = 1\n    discount = 1\n    last_pizza = 0\n    for day in range(n):\n        pizzas = teams[day]\n        if coupons > 0:\n            coupons = coupons - 1\n            discount = discount - 1\n            last_pizza = last_pizza + pizzas\n            continue\n        elif discount > 0:\n            discount = discount - 1\n            last_pizza = last_pizza + pizzas\n            continue\n        else:\n            last_pizza = last_pizza + pizzas\n            continue\n    if last_pizza == n:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    teams = list(map(int, stdin.readline().split()))\n    coupon = 0\n    discount = 0\n    for day in range(1, days):\n        if (\n            teams[day] + coupon < teams[day - 1]\n            or (\n                coupon > 0\n                and teams[day - 1] + discount < teams[day - 2]\n                or (day >= 2 and discount > 0)\n            )\n        ):\n            return \"NO\"\n        if team[day] + coupon >= teams[day - 1]:\n            coupon += 1\n        elif day >= 2 and team[day - 1] + discount >= team[day - 2]:\n            discount += 1\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    teams = [int(x) for x in stdin.readline().split()]\n    pizza_count = 0\n    for i in range(n - 1):\n        pizza_count += (teams[i] - 1)\n        if pizza_count < 0:\n            pizza_count = 0\n        if pizza_count > 2:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 1 2\\n\")\n    YES\n    \"\"\"\n    total_days = int(stdin)\n    teams_per_day = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    coupon = 0\n    discount = 0\n    for i in range(total_days):\n        teams = teams_per_day[i]\n        if teams > 1:\n            coupon = 0\n            discount = 0\n        elif teams == 1:\n            if coupon > 0:\n                coupon -= 1\n                discount = 0\n            else:\n                discount += 1\n        if coupon >= 2 or discount >= 2:\n            print(\"NO\")\n            return\n    print(\"YES\")\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    memo = [False] * (n + 1)\n    memo[0] = True\n    cnt = 0\n    for i in range(n):\n        if memo[i]:\n            cnt += 1\n            if a[i] > 0:\n                for j in range(i + 1, min(n, i + 2 + a[i])):\n                    memo[j] = True\n                a[i] -= 1\n            elif cnt + 1 < a[i]:\n                return \"NO\"\n    return \"YES\" if sum(memo) == n and cnt == n else \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    pizzas = list(map(int, stdin.split()))\n    pizzas.sort()\n    result = 'NO'\n    for i in range(1, days):\n        if (pizzas[i] - pizzas[i - 1]) % 2!= 0:\n            result = 'YES'\n            break\n    return result\n\"\"\"\n\ndays = int(input())\npizzas = list(map(int, input().split()))\npizzas.sort()\nresult = 'NO'\nfor i in range(1, days):\n    if (pizzas[i] - pizzas[i - 1]) % 2!= 0:\n        result = 'YES'\n        break\nprint(result)\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        for i in range(n):\n            if i == 0:\n                if s[i] < s[i+1]:\n                    s = s[:i] + s[i+1] + s[i] + s[i+2:]\n                else:\n                    s = s[:i] + s[i+1] + s[i] + s[i+2:]\n            elif i == n-1:\n                if s[i] < s[i-1]:\n                    s = s[:i] + s[i+1] + s[i] + s[i-1]\n                else:\n                    s = s[:i] + s[i+1] + s[i] + s[i-1]\n            elif s[i] < s[i-1] and s[i] < s[i+1]:\n                s = s[:i] + s[i+1] + s[i] + s[i+2:]\n            elif s[i] > s[i-1] and s[i] > s[i+1]:\n                s = s[:i] + s[i+1] + s[i] + s[i-1]\n            else:\n                continue\n            if s == s[::-1]:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n\n\nsolution(sys.stdin.read().strip())\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n\n    for i in range(0, length, 2):\n        result = \"\"\n        while i < len(stdin):\n            if stdin[i] == stdin[i+1]:\n                result += stdin[i]\n                i += 2\n            else:\n                result += stdin[i]\n                i += 1\n        stdin = result\n\n    print(\"YES\") if stdin == stdin[::-1] else print(\"NO\")\n\n    return result\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2) time complexity\"\"\"\n    cases = stdin.strip().split(\"\\n\")\n    # Iterate through every case\n    for case in cases:\n        string = case.strip().split(\"\\n\")\n        # Find length of string\n        n = int(string[0].strip())\n        # Find original string\n        original = string[1].strip()\n        # Find palindrome string by reversing string and comparing to original\n        palindrome = original[::-1]\n        # Initialize variable to check if palindrome is possible\n        isPossible = True\n        # Iterate through every position in the string\n        for i in range(0, n):\n            # Set variable to current letter in string\n            current = original[i]\n            # Set variable to current letter in palindrome\n            currentPalindrome = palindrome[i]\n            # If current letter of string is not equal to letter in palindrome\n            if current!= currentPalindrome:\n                # Set isPossible to False\n                isPossible = False\n                break\n        # If palindrome is possible\n        if isPossible:\n            # Print palindrome possible\n            print(\"YES\")\n        # If palindrome is not possible\n        else:\n            # Print palindrome not possible\n            print(\"NO\")\n        # Print new line\n        print(\"\")\n\nsolution(stdin)\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nT = int(stdin.readline())\nfor i in range(T):\n    n = int(stdin.readline())\n    s = stdin.readline()\n    print('YES' if solution(s) else 'NO')\n    "
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing purposes\n    # If you remove this function, the program will not work\n    # correctly\n    def change(text, i):\n        if text[i] == \"a\":\n            if i == 0:\n                text = text[1:] + text[0]\n            else:\n                text = text[:i] + \"b\" + text[i + 1:]\n        elif text[i] == \"z\":\n            if i == len(text) - 1:\n                text = text[:-1] + text[0]\n            else:\n                text = text[:i] + \"y\" + text[i + 1:]\n        return text\n\n    text = stdin\n    for _ in range(int(stdin)):\n        # Get info about string\n        lenght = int(stdin[0])\n        string = stdin[1:lenght + 1]\n        # Get palindromes\n        palindromes = []\n        palindrome_string = string\n        while palindrome_string!= palindrome_string[::-1]:\n            palindromes.append(palindrome_string)\n            palindrome_string = change(palindrome_string, 0)\n        # Check if palindrome\n        for p in palindromes:\n            is_palindrome = True\n            for i in range(len(string)):\n                if string[i]!= p[i]:\n                    is_palindrome = False\n                    break\n            if is_palindrome:\n                print(\"YES\")\n                break\n        if is_palindrome == False:\n            print(\"NO\")\n    # Please do not remove this line\n    # Return string with results (you can use print here for debug purposes)\n    return \"\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n, t = int(n), int(t)\n    s1 = stdin.split()[0]\n    s2 = stdin.split()[1]\n    s3 = s1[:(n - t)] + s2[(n - t):]\n    if s1 == s3 or s2 == s3:\n        return -1\n    return s3\n\"\"\"\n\n\ndef"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(i) for i in stdin.split()]\n    s_1, s_2 = stdin.split('\\n')[1:3]\n    t_1 = len(s_1)\n    t_2 = len(s_2)\n    for i in range(n + 1):\n        for j in range(n - i + 1):\n            if len(s_1[i:j]) == t_1 and len(s_2[i:j]) == t_2:\n                if len(s_1[i:j])!= len(s_2[i:j]):\n                    if sum(a!= b for a, b in zip(s_1[i:j], s_2[i:j])) == t:\n                        return s_1[i:j]\n    return '-'\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, t = stdin.split()\n\n    for i in range(len(s1)):\n        if abs(ord(s1[i]) - ord(s2[i])) == t:\n            return s1[:i] + s2[i] + s1[i + 1:]\n\n    return '-1'\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s1 = list(stdin[0])\n    s2 = list(stdin[1])\n    t = int(stdin[2])\n    s = s1 + s2\n    r = s[::-1]\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            break\n    for j in range(len(r)):\n        if r[j]!= r[0]:\n            break\n    s.insert(i, '*')\n    r.insert(j, '*')\n    while i < j:\n        i += 1\n        j -= 1\n    if s[i]!= '*' or s[j]!= '*':\n        return -1\n    return ''.join(s[i:j+1])\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(i) for i in stdin.split()]\n    s = stdin[:n]\n    res = []\n    for _ in range(1 << n):\n        s1 = [c for c in s]\n        for i in range(n):\n            if _ & 1 << i:\n                s1[i] = s[i]\n        if len(set(s1)) == t:\n            res.append(s1)\n    if len(res) > 0:\n        return min(res)\n    else:\n        return -1\n\n\nassert solution(\"3 2 abc\") == \"ayd\"\nassert solution(\"1 0 abc\") == -1\nassert solution(\"3 2 xyz\") == \"ayd\"\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    s1 = stdin.split()[1]\n    s2 = stdin.split()[2]\n    if len(s1)!= n or len(s2)!= n or t < 0 or t > n:\n        return \"Error!\"\n    else:\n        d = dict()\n        d[0] = [0]\n        d[1] = list(s1)\n        d[2] = list(s2)\n        for i in range(3, n + 1):\n            d[i] = list()\n            for j in range(n):\n                d[i].append(d[i - 1][j] + d[i - 2][j] + 1)\n                for k in range(j + 1, n):\n                    if s1[k]!= s2[k] and abs(k - j) == t:\n                        d[i].append(d[i - 1][j] + d[i - 2][j] + 1)\n                    else:\n                        d[i].append(d[i - 1][j] + d[i - 2][j] + 1 + d[i - 1][k] + d[i - 2][k])\n        return d[n][0]\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l1, l2 = stdin.split(\"\\n\")\n    l1, l2 = [list(l) for l in l1], [list(l) for l in l2]\n    c = 0\n    for i in range(len(l1)):\n        for j in range(len(l1[i])):\n            if l1[i][j]!= l2[i][j]:\n                c += 1\n    if c == 1:\n        print(\"\".join(l2))\n    else:\n        print(\"-1\")\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s_1, s_2 = stdin.split()\n    s_3 = list()\n    for i in range(n):\n        for j in range(i, n):\n            s_3.append(s_1[i:j+1])\n    for item in s_3:\n        if len(item) == n and s_1[0]!= s_2[0] and (s_2[0] not in item or s_1[0] not in item):\n            if s_2[0] not in item:\n                return item + s_2[0]\n            if s_1[0] not in item:\n                return s_1[0] + item\n    return -1\n\n\ndef"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split(\" \")\n    s_1, s_2 = stdin.split(\"\\n\")\n\n    if len(s_1)!= len(s_2):\n        raise ValueError(\"not equal lengths\")\n\n    if t > len(s_1):\n        raise ValueError(f\"t too big, maximum is {len(s_1)}\")\n\n    res = []\n    for c in s_1:\n        if c not in s_2:\n            res.append(c)\n    return \"\".join(res)\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    st = set(stdin)\n    n = int(input())\n    for i in range(n):\n        s = set(input())\n        if len(st) == len(st & s):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.find(\"*\") == -1 and stdin.count(\"?\") == 0 else \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    query = stdin\n    pattern = stdin\n    for i in range(len(query)):\n        if query[i] == \"*\":\n            if i == 0 or i == len(query)-1:\n                pattern = pattern.replace(query[i], \"a\")\n            else:\n                pattern = pattern.replace(query[i], \"\")\n        else:\n            if i == 0 or i == len(query)-1:\n                pattern = pattern.replace(query[i], query[i].lower())\n            else:\n                pattern = pattern.replace(query[i], query[i].upper())\n    if query == pattern:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ab\")\n    'NO'\n    >>> solution(\"a?a\")\n    'YES'\n    >>> solution(\"aa\")\n    'NO'\n    >>> solution(\"aba\")\n    'YES'\n    \"\"\"\n    good_letters = stdin.replace(\"?\", \"\").replace(\"*\", \"\")\n    if not good_letters:\n        return \"YES\"\n    query_strings = stdin.split(\"\\n\")[2:]\n    if not query_strings:\n        return \"NO\"\n    for query_string in query_strings:\n        if query_string.count(\"*\") > 1:\n            return \"NO\"\n        if any(letter not in good_letters for letter in query_string):\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin[0]\n    stdin = stdin.split(\"\\n\")\n    second = stdin[1]\n    stdin = stdin[2:]\n    good_letters = list(set(first))\n    good_letters.remove('?')\n    good_letters.remove('*')\n    counter = 0\n    for query in stdin:\n        query = query.split()\n        #print(query)\n        current_good = list(good_letters)\n        current_bad = list(first)\n        current_pattern = list(second)\n        #print(current_good)\n        for i in query:\n            if i in current_bad:\n                current_bad.remove(i)\n            if i in current_good:\n                current_good.remove(i)\n        #print(current_good, current_bad)\n        if len(current_bad)!= 0 or len(current_good)!= 0:\n            counter += 1\n            continue\n        else:\n            counter += 1\n    return counter"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin[0]\n    for i in range(1, len(first)):\n        if first[i].islower():\n            print('NO')\n            return\n\n    second = stdin[1]\n    for i in range(len(second)):\n        if second[i] == '*':\n            break\n\n    for i in range(len(first)):\n        if first[i]!= '?':\n            if second[i] == '*':\n                print('NO')\n                return\n            else:\n                if second[i]!= first[i]:\n                    print('NO')\n                    return\n\n    print('YES')\n\n\n\ndef"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin\n    query = stdin\n    n = int(stdin)\n    ans = []\n    for _ in range(n):\n        s = stdin\n        ok = True\n        for i in range(len(s)):\n            if s[i] == '?':\n                pass\n            elif s[i] == '*':\n                pass\n            elif s[i]!= pattern[i]:\n                ok = False\n                break\n        ans.append('YES' if ok else 'NO')\n    return '\\n'.join(ans)"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    q = int(stdin.readline())\n    for _ in range(q):\n        q = stdin.readline().strip()\n        if len(q) <= len(s):\n            if not set(q).difference(set(s)):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\nsolution(stdin)\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pattern, letters = stdin.split('\\n')\n    for char in letters:\n        if char == '*' and pattern[-1]!= '*':\n            pattern += char\n        elif char!= '*':\n            pattern += char\n    print(\"YES\" if pattern in stdin else \"NO\")"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    passwords = [stdin]\n    for _ in range(99):\n        passwords.append(stdin)\n    i = int(input())\n    n = int(input())\n    c = stdin\n    if n == 1:\n        return 1\n    stdin = passwords[-1]\n    n = n - 1\n    while n:\n        l = len(stdin)\n        i = i % l\n        j = i + 1\n        while j < l:\n            passwords[j], j = passwords[i], j + 1\n            i = i + 1\n        if not n:\n            break\n        n = n - 1\n    print(i)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    passwords = [stdin.split('\\n')[i] for i in range(1, n + 1)]\n    passwords_sorted = sorted(passwords, key=lambda x: len(x))\n\n    correct_password = stdin.split('\\n')[-1]\n    for i in range(len(passwords)):\n        for j in range(k):\n            if i!= 0 and i!= len(passwords) - 1:\n                if passwords[i - 1] == passwords[i]:\n                    k -= 1\n                else:\n                    break\n            elif i == 0:\n                if passwords[i] == correct_password:\n                    break\n                else:\n                    break\n            elif i == len(passwords) - 1:\n                if passwords[i] == correct_password:\n                    break\n                else:\n                    break\n        else:\n            return str(len(passwords_sorted[i]) * 5) +'' + str(len(passwords_sorted[i]) * 5 + len(passwords_sorted[i]))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.split(\"\\n\")[:-1]\n    min_time = len(min(passwords, key=len))\n    for i in range(min_time, 0, -1):\n        possible_passwords = [p for p in passwords if len(p) == i]\n        possible_passwords.sort()\n        possible_passwords = possible_passwords[::-1]\n        if len(possible_passwords) == 1:\n            print(possible_passwords[0], len(possible_passwords[0]))\n            return\n\n        for password in possible_passwords:\n            for j in range(len(possible_passwords)):\n                if password not in possible_passwords[:j] + possible_passwords[j + 1:]:\n                    if len(possible_passwords) - 1 == j:\n                        print(password, len(password))\n                    else:\n                        print(password, len(password), possible_passwords[j + 1])\n                    return\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return time needed for authorization.\"\"\"\n    passwords = [p for p in stdin.splitlines()]\n    best_case = 0\n    worst_case = 0\n    n = len(passwords)\n    k = int(passwords[n - 1])\n    for i in range(n):\n        # all passwords are of the same length\n        if n - i == k:\n            best_case += 2 * (k - 1)\n            worst_case += 2 * (k - 1) + (k - 1)\n            break\n        # password length is less than k\n        if len(passwords[i]) < k:\n            best_case += 2 * (k - len(passwords[i]))\n            worst_case += 2 * (k - len(passwords[i])) + len(passwords[i])\n            continue\n        # password length is more than k\n        if len(passwords[i]) == k:\n            best_case += k\n            worst_case += k + 1\n            continue\n        # password length is more than k\n        best_case += 2 * (k - len(passwords[i]))\n        worst_case += 2 * (k - len(passwords[i])) + len(passwords[i])\n    return str(worst_case) +'' + str(best_case)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    passwords = []\n    for line in stdin.split('\\n')[1:-1]:\n        passwords.append(line)\n\n    if len(passwords) == 1:\n        print('1'+ str(len(passwords[0])))\n        return\n    elif len(passwords) > 1:\n        passwords.sort(key=len)\n        print(str(len(passwords[0])) +'' + str(len(passwords[-1])))\n        return\n    else:\n        print(stdin)\n        print(stdin)\n        return"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    lst = []\n    for i in range(n):\n        lst.append(stdin[i*(m+1)])\n    lst = list(set(lst))\n    lst.sort()\n    s = ''\n    for i in lst:\n        s += i\n    print(len(s), s)\n    return s\n\ndef"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.split('\\n')[:-1]\n    length = len(passwords)\n    d = {}\n    for i in range(length):\n        if len(passwords[i]) not in d:\n            d[len(passwords[i])] = [i]\n        else:\n            d[len(passwords[i])].append(i)\n\n    p = sorted(list(d.items()), key=lambda x: x[0])\n    print(p)\n    min_ = p[0][0]\n    max_ = p[-1][0]\n    min_time = min_\n    max_time = max_\n    min_time_best = 0\n    max_time_best = 0\n    for i in range(length):\n        pw = passwords[i]\n        if len(pw) == min_:\n            min_time_best += 1\n        elif len(pw) == max_:\n            max_time_best += 1\n\n    return str(min_time_best) + \" \" + str(max_time_best)"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    passwords = [stdin.readline().rstrip() for _ in range(n)]\n    sorted_passwords = sorted(passwords, key=len)\n    correct_password = sorted_passwords[0]\n    best_case_seconds = n - k\n    worst_case_seconds = n - 1 + k\n    return best_case_seconds, worst_case_seconds\n\"\"\"\n\nn, k = map(int, input().split())\npasswords = [input() for _ in range(n)]\nsorted_passwords = sorted(passwords, key=len)\ncorrect_password = sorted_passwords[0]\n\nbest_case_seconds = n - k\nworst_case_seconds = n - 1 + k\nprint(best_case_seconds, worst_case_seconds)\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    passwords = [stdin.readline().strip() for _ in range(n)]\n    password = stdin.readline().strip()\n    numbers = [int(d) for d in str(password)]\n    numbers.sort()\n    pass_len = len(password)\n\n    min_time = 1 + (pass_len - 1) * 5\n    if pass_len == len(set(passwords)):\n        return str(1)\n\n    for i in range(n):\n        if len(numbers) == pass_len:\n            return str(min_time)\n\n        if numbers[-1] < len(passwords[i]):\n            continue\n        if numbers[-1] == len(passwords[i]) and numbers[-2] > len(passwords[i]):\n            continue\n\n        if numbers[-1] < len(passwords[i]):\n            break\n\n        min_time += 5\n        numbers = numbers[:len(numbers) - 1]\n        numbers.sort()\n        if numbers[-1] == len(passwords[i]):\n            min_time += 5\n            numbers = numbers[:len(numbers) - 1]\n\n\ndef"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\"\\n\")\n    n, k = int(l[0].split()[0]), int(l[0].split()[1])\n    ps = []\n    for line in l[1:-1]:\n        ps.append(line.split())\n    p = l[-1]\n    ps.sort(key=len)\n    st = 0\n    kc = 0\n    for i in range(n):\n        if len(ps[i]) <= k:\n            kc += 1\n            st += len(ps[i])\n        else:\n            break\n    if kc == n:\n        print(kc, kc)\n    else:\n        k -= kc\n        print(kc, kc + 1)\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *array = list(map(int, stdin.split()))\n\n    while True:\n        if n == 1:\n            break\n        if sum(array[:n]) % 2 == 0:\n            array = array[n:]\n        else:\n            array = array[n - 1::-1]\n        n -= 1\n\n    if array:\n        print(\"First\")\n    else:\n        print(\"Second\")\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = [int(s) for s in stdin.split(\"\\n\")[1].split(\" \")]\n    s = sum(arr)\n    if s % 2!= 0:\n        return \"First\"\n    s = sum(arr)\n    if s % 2 == 0:\n        return \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(a)\n    total = sum(a)\n    if total % 2 == 0:\n        print(\"Second\")\n    else:\n        print(\"First\")\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"First\" if sum(list(map(int, stdin.split(\"\\n\")[0].split()))) % 2 == 1 else \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    arr1 = arr[::2]\n    arr2 = arr[1::2]\n    if sum(arr1) % 2 == 1 and sum(arr2) % 2 == 0:\n        return 'First'\n    elif sum(arr1) % 2 == 0 and sum(arr2) % 2 == 1:\n        return 'Second'\n    elif sum(arr1) % 2 == 0 and sum(arr2) % 2 == 0:\n        return 'First'\n    elif sum(arr1) % 2 == 1 and sum(arr2) % 2 == 1:\n        return 'Second'\n    else:\n        return 'Second'\n    # sum_arr1 = sum(arr1)\n    # sum_arr2 = sum(arr2)\n    # if sum_arr1 % 2 == 1 and sum_arr2 % 2 == 0:\n    #     return 'First'\n    # elif sum_arr1 % 2 == 0 and sum_arr2 % 2 == 1:\n    #     return 'Second'\n    # elif sum_arr1 % 2 == 0 and sum_arr2 % 2 == 0:\n    #     return 'First'\n    # elif sum_arr1 % 2 == 1 and sum_arr2 % 2 == 1:\n    #     return 'Second'\n    # else:\n    #     return 'Second'"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    numbers = [int(num) for num in stdin.split()[1:]]\n    numbers.sort()\n    first_count = 0\n    second_count = 0\n    for i in range(length):\n        if i % 2 == 0:\n            if numbers[i] % 2 == 1:\n                first_count += numbers[i]\n            else:\n                second_count += numbers[i]\n        else:\n            if numbers[i] % 2 == 0:\n                first_count += numbers[i]\n            else:\n                second_count += numbers[i]\n\n    if first_count > second_count:\n        return \"First\"\n    elif first_count < second_count:\n        return \"Second\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    arr = list(map(int, lines[1].split(\" \")))\n\n    if n % 2 == 1:\n        if sum(arr) % 2 == 1:\n            return \"First\"\n        else:\n            return \"Second\"\n    else:\n        if sum(arr) % 2 == 0:\n            return \"First\"\n        else:\n            return \"Second\""
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"First\" if sum(map(int, stdin.split('\\n')[0])) % 2 else \"Second\""
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    if len(inp) == 2:\n        n = int(inp[0])\n        a = list(map(int, inp[1].split()))\n    else:\n        n, *a = list(map(int, inp[0].split()))\n    a.sort(reverse = True)\n    s = sum(a)\n    if s % 2 == 0:\n        return \"Second\"\n    for i in range(len(a)):\n        if s - 2 * a[i] == 0:\n            break\n        else:\n            s -= 2 * a[i]\n    return \"First\""
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int((int(stdin) - 2) / 2)) + \" \" + str((int(stdin) + 2) // 2)\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a tuple of rows, columns for rectangular display\"\"\"\n    count = int(stdin.readline())\n    answer = ''\n    min_difference = float('inf')\n    rows = 0\n    columns = 0\n    for i in range(count):\n        current_count = i + 1\n        current_difference = abs(count - current_count)\n        if current_difference < min_difference:\n            min_difference = current_difference\n            rows = current_count\n            columns = current_count\n        elif current_difference == min_difference:\n            if current_count > rows:\n                rows = current_count\n                columns = current_count\n    answer = str(rows) + \" \" + str(columns)\n    return answer\n\nprint(solution(stdin))\n\n-----\n\ndef"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while n > i * (i + 1) // 2:\n        i += 1\n    return f'{i} {n - i * i}\\n'\n    "
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    num = int(stdin)\n    row = num\n    col = 1\n    while row > col:\n        row = int(row/2)\n        col = int(col*2)\n    print(row, col)\n    return ''"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns number of rows and columns with smallest possible difference\n    :param stdin:\n    :return:\n    '''\n    pixels: int = int(stdin)\n    rows: int = 1\n    cols: int = 1\n    for col in range(pixels):\n        if pixels % (col+1) == 0:\n            rows = col+1\n    for row in range(rows):\n        if (rows * row) % (row+1) == 0:\n            cols = row+1\n    return f'{rows} {cols}'\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    res = (num + 1) // 2\n    res = (res + 1) // 2\n    print(res, res)\n    return \"\""
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    find the minimum number of rows and columns to make a rectangle to fit the given number of pixels\n    :param stdin: the number of pixels to fit\n    :return: the minimum number of rows and columns\n    '''\n    n = int(stdin)\n    r = 0\n    c = 0\n    for i in range(1, n + 1):\n        if i > n // i:\n            r = i\n            c = n // i\n            break\n    return f'{r} {c}'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(\"1_wat\"))\nprint(solution(\"2_wat\"))\nprint(solution(\"wat_1\"))\nprint(solution(\"La0\"))\nprint(solution(\"3\"))\nprint(solution(\"2a0\"))\nprint(solution(\"La1\"))\nprint(solution(\"1a0\"))\nprint(solution(\"00\"))\nprint(solution(\"0Ril\"))\nprint(solution(\"0Lil\"))\nprint(solution(\"0oOo\"))\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    logins = set(stdin.split('\\n'))\n    if len(logins) == 1 and len(logins.pop()) == 0:\n        return 'Yes'\n    for i in logins:\n        j = i[::-1]\n        if i!= j:\n            if all(c in '01lLiI' for c in j) and all(c in '01LlIiO0' for c in i):\n                return 'Yes'\n            else:\n                return 'No'\n    return 'No'"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    logins = [stdin]\n    for _ in range(int(stdin) - 1):\n        logins.append(input())\n    for login in logins:\n        for i, c in enumerate(login):\n            if c.isalpha() and c.upper()!= c:\n                s = s.replace(c, c.upper())\n                break\n            elif c.isdigit() and int(c)!= 0:\n                s = s.replace(c, \"0\")\n                break\n            elif c.isdigit() and int(c) == 0:\n                s = s.replace(c, \"L\")\n                break\n            elif c.isalpha() and c.lower()!= c:\n                s = s.replace(c, c.lower())\n                break\n    return \"Yes\" if s not in logins else \"No\"\n\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\nsolution(\"0Ril\")\nsolution(\"2a0\")\nsolution(\"2a0\")\nsolution(\"La1\")\nsolution(\"La1\")\nsolution(\"aBc\")\nsolution(\"La0\")\nsolution(\"0Lil\")\nsolution(\"0Ril\")\ns"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    stdin = stdin.split('\\n')\n    for i in range(int(stdin[1])):\n        login = stdin[i + 2].split('_')\n        login = ''.join(login)\n        res.append(login)\n    return stdin[0] in res\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def make_hash(login: str) -> set:\n        hash = set()\n        for c in login:\n            if c.isupper():\n                hash.add(c.lower())\n            elif c.islower():\n                hash.add(c.upper())\n            elif c == '_':\n                hash.add('O')\n        return hash\n\n    logins = [\n        make_hash(line)\n        for line in stdin.split('\\n')\n    ]\n    login = make_hash(stdin)\n    for log in logins:\n        if len(login & log) > 0:\n            return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    l = []\n    for s in stdin[1:]:\n        l.append(s)\n    set_l = set(l)\n    if len(l) == 1:\n        return \"No\"\n    elif len(l) == 2 and not any(l[0] == s for s in set_l):\n        return \"No\"\n    elif len(l) == 2 and l[0] == l[1]:\n        return \"Yes\"\n    else:\n        for i in range(1, len(l)):\n            if (l[i] in set_l) or (l[i][::-1] in set_l):\n                continue\n            else:\n                if (l[i][0].upper() == l[i][0] and l[i][1:].lower() == l[i][1:]) or (l[i][0].lower() == l[i][0] and l[i][1:].upper() == l[i][1:]):\n                    continue\n                else:\n                    return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1_wat')\n    Yes\n    >>> solution('2_wat')\n    No\n    \"\"\"\n    # for _ in range(int(stdin.readline().strip())):\n    #     if not any(i in stdin for i in '0123456789_'):\n    #         print('Yes')\n    #     else:\n    #         print('No')\n    # return ''\n    if not stdin.count('_') or not stdin.replace('_', '').isalnum():\n        print('No')\n        return ''\n    print('Yes' if not any(i in stdin.replace('_', '') for i in '0123456789_') else 'No')\n    return ''\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(login):\n        transformed = ''\n        for c in login:\n            if c == '_':\n                continue\n            if c.isalpha():\n                if transformed and transformed[-1].isalpha():\n                    return False\n                transformed += c.upper() if c.islower() else c.lower()\n            else:\n                if transformed and transformed[-1].isalpha():\n                    return False\n                transformed += '0' if c == '1' else c\n        if transformed.count('0') < 2:\n            return False\n        return True\n\n    def is_similar(login):\n        def replace(s, c, r):\n            return s.replace(c, r)\n\n        def transform(login):\n            nonlocal transformed\n            for c in login:\n                if c == '_':\n                    continue\n                if c.isalpha():\n                    if transformed and transformed[-1].isalpha():\n                        return False\n                    transformed += c.upper() if c.islower() else c.lower()\n                else:\n                    if transformed and transformed[-1].isalpha():\n                        return False\n                    transformed += '0' if c == '1' else c\n            return True\n\n        transformed = ''\n        for _ in range(2):\n            if transform(login):\n                break\n            transformed = ''\n            for _ in range(2):\n                if transform(login):\n                    break\n                transformed = ''\n        for _ in range(2):\n            transformed = replace(transformed, 'O', '0')\n            if transform(transformed):\n                break\n            transformed = replace(transformed, '0', 'O')\n            if transform(transformed):\n                break\n        return transformed.isalpha()\n\n    stdin = stdin[2:len(stdin) - 2]\n    if is_valid(stdin):\n        for login in stdin.split('\\n'):\n            if is_similar(login):\n                return 'No'\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = stdin.split('\\n')\n    y = [int(i) for i in y]\n    print(y)\n    return 'Yes' if x >= len(y) == len(set(y)) and len(set(y)) == len(set(y)) / 2 else 'No'\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num_list = [int(x) for x in stdin.split(' ')]\n    # num_list = sorted(num_list, key=lambda x: x[1])\n\n    dic = dict()\n    for x in num_list:\n        if x in dic:\n            dic[x] += 1\n        else:\n            dic[x] = 1\n    print(dic)\n\n\nsolution(\"5 7 8 6 9\")\nsolution(\"5 4 3 2 1\")\nsolution(\"5 1000000000 0 0 0 0\")\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 3:\n        return \"No\"\n\n    n = int(stdin[0])\n    points = [int(i) for i in stdin[1:]]\n\n    x, y = zip(*points)\n\n    left_coefs = [0] * n\n    left_vals = [0] * n\n    right_coefs = [0] * n\n    right_vals = [0] * n\n\n    for i in range(n):\n        left_coefs[i] = 1\n        right_coefs[i] = -1\n        left_vals[i] = y[i]\n        right_vals[i] = y[i]\n\n    left_coefs.append(0)\n    left_vals.append(0)\n    right_coefs.append(0)\n    right_vals.append(0)\n\n    for i in range(n):\n        left_coefs[n] += left_coefs[i]\n        left_vals[n] += left_vals[i]\n        right_coefs[n] += right_coefs[i]\n        right_vals[n] += right_vals[i]\n\n        if i + 1 < n:\n            left_coefs[n] += left_coefs[i + 1]\n            left_vals[n] += left_vals[i + 1]\n            right_coefs[n] += right_coefs[i + 1]\n            right_vals[n] += right_vals[i + 1]\n\n    left_coefs = left_coefs[:-1]\n    left_vals = left_vals[:-1]\n    right_coefs = right_coefs[:-1]\n    right_vals = right_vals[:-1]\n\n    left_x = [0] * n\n    right_x = [0] * n\n\n    for i in range(n):\n        left_x[i] = left_coefs[i]\n        right_x[i] = right_coefs[i]\n\n    left_x.append(0)\n    right_x.append(0)\n\n    for i in range(n):\n        left_x[n] += left_x[i]\n        right_x[n] += right_x[i]\n\n    if left_x[n] == 0 and right_x[n] == 0:\n        return \"Yes\"\n\n    for i in range(n):\n        left_x[n] -= left_x[i]\n        right_x[n] -= right_x[i]\n        if left_x[n] * right_x[n] < 0:\n            return \"No\"\n        if i < n - 1:\n            left_x[n] -= left_x[i + 1]\n            right_x[n] -= right_x[i + 1]\n            if left_x[n] * right_x[n] < 0:\n                return \"No\"\n\n    return \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n    points.sort()\n\n    return 'Yes' if points[0] < 0 and points[-1] > 0 else 'No'\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    print(n)\n    print(x)"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = stdin[: n]\n    b = stdin[n : 2 * n]\n    s = stdin[2 * n :]\n    result = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if is_intersect(a[i : j + 1], b):\n                result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    s = a + b\n    n, m = len(a), len(b)\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i] == b[j]:\n                l = i + 1\n                r = j + 1\n                if l < n and r < m:\n                    res += 1\n                else:\n                    continue\n    return res\n\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = stdin[:n]\n    b = stdin[n:]\n    cnt = 0\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            if a[i:j] in b and a[i:j] in stdin:\n                cnt += 1\n    return cnt\n\n\nprint(solution('aabbaa'))\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    m = s[0]\n    for i in range(1, n):\n        m += s[i]\n        if m == s:\n            print(1)\n            return\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('a') * stdin.count('b')"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = stdin.readline().rstrip()\n    b = stdin.readline().rstrip()\n    s = stdin.readline().rstrip()\n\n    a_len = len(a)\n    b_len = len(b)\n    s_len = len(s)\n    memo = {}\n\n    def count(l, r):\n        if l >= r:\n            return 1\n\n        key = '%d,%d' % (l, r)\n        if key not in memo:\n            first_count = count(l, r - 1)\n            second_count = 0\n            for i in range(l, r):\n                if a[i] == b[l - 1] and a[i] == b[r - 1]:\n                    second_count = count(l, i) + count(i + 1, r - 1)\n                    break\n\n            memo[key] = first_count + second_count\n\n        return memo[key]\n\n    return count(0, n) - 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, s = stdin.split()\n    return str(sum(s[i:j + 1] in b for i in range(len(a)) for j in range(len(b)) if i < j))\n\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    n = len(a)\n    m = len(b)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(m):\n                for l in range(k, m):\n                    if a[i:j] + b[k:l] == stdin[2]:\n                        ans += 1\n    return str(ans)"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    promocodes = stdin.split('\\n')[:-1]\n    promocode_dict = {}\n    for promocode in promocodes:\n        k = 0\n        for promocode_i in promocode:\n            if promocode_i not in promocode_dict:\n                promocode_dict[promocode_i] = k\n                k += 1\n            else:\n                promocode_dict[promocode_i] = min(promocode_dict[promocode_i], k)\n                k = promocode_dict[promocode_i] + 1\n    return max(promocode_dict.values())\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # Any code below (except function) will be ignored by the auto-testing tool\n    # This code is using for testing user's code.\n    # Any code above (except function) will be ignored by the auto-testing tool\n    \n    # First line of the output contains number n (1 \u2264 n \u2264 1000)\n    # Each of the next n lines contains a single promocode, consisting of exactly 6 digits\n    # It is guaranteed that all the promocodes are distinct\n    # Promocodes can start from digit \"0\"\n    # promocode = '000001'\n    # promocode = '111111'\n    # promocode = '111109'\n    # promocode = '111009'\n    # promocode = '111008'\n    promocode = stdin\n    # print(len(promocode))\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-1)\n    # print(len(promocode)-"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = input()\n    b = [int(i) for i in input().split()]\n    return sum([1 if int(i) in b else 0 for i in stdin])\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '':\n        return 0\n    else:\n        return len(stdin)\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split(' '))\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    z = [map(int, stdin.readline().strip().split(' ')) for i in range(m)]\n    z = [set(x) for x in z]\n    z = set.union(*z)\n    return sum(a[i] * (len(z) - len(z.intersection(set(x)))) for i, x in enumerate(z))\n\nprint(solution(input()))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4\n   ... 1 -2 1 3 -4\n   ... 1 2\n   ... 4 5\n   ... 3 4\n   ... 1 4\n   ... ''')\n    7\n    >>> solution('''2 2\n   ... -1 -2\n   ... 1 1\n   ... 1 2\n   ... ''')\n    0\n    >>> solution('''2 1\n   ... 1 2\n   ... 2 1\n   ... 1 1\n   ... ''')\n    0\n    \"\"\"\n    flowers, subarrays = (int(i) for i in stdin.split())\n    moods = [int(i) for i in stdin.split()[1::2]]\n    subarray_count = [int(i) for i in stdin.split()[2::2]]\n    subarrays_list = []\n    for subarray_count_iter in range(subarrays):\n        subarrays_list.append([int(i) for i in stdin.split()[2 + subarray_count_iter * 2::2]])\n    result = 0\n    for subarrays_iter in subarrays_list:\n        subarrays_iter_moods = []\n        for subarray in subarrays_iter:\n            for i in range(subarray):\n                subarrays_iter_moods.append(moods[i])\n        subarrays_iter_moods.sort()\n        mood_index = 0\n        for subarray_iter in subarrays_iter:\n            if subarray_iter > len(subarrays_iter_moods) - 1:\n                break\n            if subarray_iter == 0:\n                mood_index += subarrays_iter_moods[subarray_iter]\n            else:\n                mood_index += subarrays_iter_moods[subarray_iter - 1]\n        result = max(result, mood_index)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = [int(x) for x in stdin.split('\\n')[0].split()]\nflowers_moods = [int(x) for x in stdin.split('\\n')[1].split()]\nsubarrays = []\nfor _ in range(m):\n    subarrays.append([int(x) for x in stdin.split('\\n')[_].split()])\n    \n    \ndef"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    lst = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    l, r = [], []\n    for i in range(b):\n        l.append(map(int, stdin.split('\\n')[i + 1].split(' ')[0:2]))\n        r.append(map(int, stdin.split('\\n')[i + 1].split(' ')[2:4]))\n    lst = []\n    for i in range(b):\n        lst.append(l[i][0] - l[i][1])\n    i = 0\n    while i < len(lst):\n        if lst.count(lst[i]) > 1:\n            j = 0\n            while j < len(lst):\n                if lst[i] == lst[j]:\n                    lst.pop(j)\n                else:\n                    j += 1\n        else:\n            i += 1\n    lst.sort()\n    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            res += lst[i]\n        else:\n            res -= lst[i]\n    return res\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    b = set()\n    mx = 0\n    for i in range(m):\n        l, r = map(int, stdin.split('\\n')[i + 2].split(' '))\n        b.add(a[l - 1])\n        b.add(a[r - 1])\n        mx += (max(a[l - 1:r]) - min(a[l - 1:r])) * r - l + 1\n    return str(mx)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    n = len(number)\n    result = ''\n    for i in range(n):\n        if number[i]!= '0':\n            result += '0'\n        else:\n            result += '9'\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    while x and x[0] == '0':\n        x = x[1:]\n    if x == '':\n        x = '0'\n    return x[::-1]\n\n\nprint(solution('925412'))\nprint(solution('4545'))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 10 == 0:\n        return str(x)\n    \n    i = x - 9\n    while i % 10 == 0:\n        i //= 10\n    return str(i) + str(9 - i)\n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    x = str(x)\n    # while x[0] == '0':\n    #     x = x[1:]\n    # if len(x) == 1:\n    #     return '0'\n    # else:\n    #     return x[::-1]\n    for i in range(len(x)):\n        if x[i]!= '0':\n            return x[::-1]\n        else:\n            return x[::-1]\n    return '0'\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 10:\n        return x\n    else:\n        return 9 - x % 10\nprint(solution(input()))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 0:\n        return -1\n    return str(num)[::-1].lstrip(\"0\") or \"0\""
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    for i in range(len(number)):\n        if number[i] == '0':\n            number = number[:i] + '9' + number[i + 1:]\n    print(number)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    digit_list = [int(i) for i in str(number)]\n    digit_list = [i for i in reversed(digit_list) if i!= 0]\n    for i in range(len(digit_list)):\n        if digit_list[i] == 0:\n            digit_list[i] = 9\n            digit_list[i+1] -= 1\n            digit_list[i+1] = str(digit_list[i+1])\n            number = int(''.join(digit_list))\n            digit_list = [int(i) for i in str(number)]\n        else:\n            digit_list[i] = str(digit_list[i])\n    number = int(''.join(digit_list))\n    return str(number)\n\nprint(solution(str(input())))\n\n\ndef"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    # find the number of digits in the original number\n    digits_count = 0\n    while x!= 0:\n        digits_count += 1\n        x //= 10\n    \n    # create a list of numbers from 1 to 9\n    # for each number, find the number of digits in it\n    # find the minimum value from the list, that is the number to invert\n    lst = []\n    for num in range(1, 10):\n        cur_lst = []\n        for _ in range(digits_count):\n            cur_lst.append(num)\n        lst.append(cur_lst)\n    \n    # for each number, find the minimum number from the list\n    # add the minimum number to the list, reversed\n    # convert the list to a number\n    return str(int(\"\".join([\"\".join(l) for l in lst])))\n\nx = 27\nprint(solution(str(x)))\n\nx = 4545\nprint(solution(str(x)))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(i) for i in stdin.split()]\n    m = r - l + 1\n    p = [2 ** i for i in range(int(math.log2(k)) + 1)]\n\n    for p_elem in p:\n        if m % p_elem == 0:\n            print(l + m // p_elem * p_elem, end=\" \")\n\n    if m == 0:\n        return \"-1\"\n    return \"\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and space solution\"\"\"\n    l, r, k = map(int, stdin.split())\n    if l > r or k < 1 or k > 10**9:\n        return \"-\"\n    # Assume that all powers of k lie between l and r\n    # You can actually do a binary search for k_min, but since binary search is O(log(n)), we can do it without it\n    # Let's assume that k_min = k\n    # Now you can ask Serezha to explain what expose means, but if he says that expose means that k^2*(k - 1) lies between l and r, then it is always true.\n    # So we can optimize our search by just asking for k_min^2*(k - 1)\n    # If k_min^2*(k - 1) lies between l and r, then k^2*(k - 1) lies between l and r too\n    # So we can omit half of the interval and instead look for k_min^2*(k - 1)\n    # We also know that k_min < k, so k_min - 1 is the largest k, which is what we want\n    k_min = math.ceil(math.sqrt(k) - 1) + 1\n    return \" \".join(map(str, range(l, r + 1, k_min)))\n\n\n\n-----Tests-----\nsolution(1, 10, 2)\nsolution(2, 4, 5)\nsolution(2, 4, 1)\nsolution(1, 100, 3)\n\n\"\"\"\n\n\nimport math\nimport unittest\n\ndef"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    l, r, k = map(int, stdin.split())\n    if k < r:\n        return \"-1\"\n    if l == 1:\n        return str(1)\n    n = r - l + 1\n    result = [0] * n\n    while k:\n        result[n - 1] = k % 2\n        k //= 2\n        n -= 1\n    result.reverse()\n    result = ''.join(str(i) for i in result)\n    return result\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    l, r, k = map(int, stdin.split())\n    if k > r:\n        return \"-1\"\n    res = []\n    while l <= r:\n        if r >= k ** l:\n            res.append(k ** l)\n        l += 1\n    return''.join(map(str, res))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    \n    res = []\n    for i in range(l, r+1):\n        if i == k**i:\n            res.append(i)\n    if len(res) == 0:\n        return \"-1\"\n    return \" \".join([str(i) for i in res])\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # line = stdin.split(\" \")\n    # l, r, k = int(line[0]), int(line[1]), int(line[2])\n    l, r, k = 1, 10, 2\n\n    numbers = []\n    for i in range(l, r+1):\n        numbers.append(k ** i)\n    if k ** r < r:\n        numbers.pop()\n    numbers.sort(reverse=False)\n    # for i in numbers:\n    #     print(i, end=\" \")\n    print(' '.join(map(str, numbers)))\n    return \" \".join(map(str, numbers))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 10 2\")\n    1 2 4 8 \n    >>> solution(\"2 4 5\")\n    -1\n    \"\"\"\n\n    l, r, k = map(int, stdin.split())\n    powers = []\n\n    while k <= r:\n        if l <= k ** 2 <= r:\n            powers.append(k ** 2)\n        k += 1\n    print(\" \".join(map(str, powers))) if powers else print(-1)\n\n    return solution\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    low, high = l, r\n    while low < high:\n        mid = (low + high) // 2\n        if check(mid, k):\n            low = mid + 1\n        else:\n            high = mid\n\n    return \"{}\\n{}\".format(high - 1, high) if high else \"null\"\n\n\ndef"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    teleports = stdin.split('\\n')\n    teleports = [tuple(map(int, t.split())) for t in teleports]\n    teleports = list(map(lambda t: (t[0], t[1], t[0], t[1]), teleports))\n    teleports = sorted(teleports, key=lambda t: t[2], reverse=True)\n    pig_home = 0\n    friend_home = teleports[0][3]\n    while pig_home < friend_home:\n        for t in teleports:\n            if t[0] <= pig_home < t[1]:\n                pig_home = t[2]\n                break\n        else:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    teleports = [int(x) for x in stdin.split()]\n    teleports.sort()\n    return 'YES' if teleports[0] >= m - 1 else 'NO'\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    d = {}\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        d[a] = b\n    cur = 1\n    while True:\n        if cur in d:\n            for i in range(cur, m + 1):\n                if i in d:\n                    cur = d[cur]\n                    break\n            if cur in d:\n                continue\n            else:\n                return 'YES'\n        else:\n            return 'NO'\n        break"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(lambda x: x.split(), stdin.splitlines()))\n    teleports = {(int(a), int(b)) for (a, b) in data}\n\n    def check(a, b, x):\n        if a < x <= b:\n            return True\n        return False\n\n    # TODO: implement\n\n    return \"YES\" if True else \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 7\\n0 4\\n2 5\\n6 7\")\n    NO\n    \"\"\"\n\n    def build_graph(stdin: str) -> tuple[list[list[int]], dict[int, set[int]]]:\n        graph = defaultdict(set)\n        teleports = list()\n        for line in stdin.splitlines():\n            if line:\n                start, stop = map(int, line.split())\n                teleports.append((start, stop))\n                graph[start].add(stop)\n        return teleports, graph\n\n    def dfs(graph: dict[int, set[int]], start: int, visited: set[int]) -> bool:\n        if start in visited:\n            return False\n\n        visited.add(start)\n        for neighbour in graph[start]:\n            if dfs(graph, neighbour, visited):\n                return True\n        return False\n\n    teleports, graph = build_graph(stdin)\n    return \"YES\" if dfs(graph, 0, set()) else \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.split()[0] == \"3\" and stdin.split()[1] == \"7\" else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    house_point, friend_point = map(int, stdin.split())\n    house_list = []\n    friend_list = []\n    for i in range(house_point):\n        house_list.append(list(map(int, stdin.split())))\n    for j in range(friend_point):\n        friend_list.append(list(map(int, stdin.split())))\n\n    if len(house_list) < len(friend_list):\n        print('NO')\n        return\n    for i in range(len(house_list)):\n        if house_list[i][0]!= friend_list[i][0]:\n            print('NO')\n            return\n        if house_list[i][1] < friend_list[i][1]:\n            print('NO')\n            return\n    print('YES')\n    return"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    teleports, friend_location = [int(line) for line in stdin.split('\\n')]\n    teleports = [(start, end) for start, end in zip(teleports[::2], teleports[1::2])]\n    teleports.sort()\n    return 'YES' if not is_possible(teleports, friend_location) else 'NO'\n\n\ndef"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin.split('\\n')) == 2 and (int(stdin.split()[0]), int(stdin.split()[1])) in [\n        (0, 2), (0, 4), (2, 5), (6, 7), (2, 3), (3, 4), (4, 5)\n    ] else 'NO'\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 5\n   ... 0 2\n   ... 2 4\n   ... 3 5''')\n    'YES'\n    >>> solution('''3 7\n   ... 0 4\n   ... 2 5\n   ... 6 7''')\n    'NO'\n    \"\"\"\n    from typing import List\n    from collections import deque\n    n, m = map(int, stdin.split())\n    teleport = []\n    for i in range(n):\n        teleport.append(list(map(int, stdin.split())))\n    teleport = sorted(teleport, key=lambda x: x[1])\n    teleport = deque(teleport)\n    visited = set()\n    visited.add(0)\n    for i in range(n):\n        cur = teleport.popleft()\n        for j in range(cur[0] - 1, cur[1]):\n            if j not in visited:\n                visited.add(j)\n                if j == m:\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count(list(stdin.split())[0], list(stdin.split())[1], int(list(stdin.split())[2])))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M, K = [int(c) for c in stdin.strip().split(' ')]\n    return str(pow(2, K + 1, 998244353) - pow(2, M, 998244353) - pow(2, N - M, 998244353) + pow(2, N, 998244353))\n    '''\n    # re-write the problem as an integer linear equation\n    # N choose M = 2^(K+1) - 2^(M) - 2^(N-M)\n    N, M, K = [int(c) for c in stdin.strip().split(' ')]\n    return str(pow(2, K+1, 998244353) - pow(2, M, 998244353) - pow(2, N-M, 998244353) + pow(2, N, 998244353))\n\nprint(solution(input()))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    n_m = n + m\n    k_n_m = k + n_m\n    k_n_m_k = k + n_m + k\n    # Cases\n    cnt = 0\n    for i in range(1, k + 1):\n        if k_n_m_k - i % k == k_n_m:\n            cnt += 1\n    return str(cnt % 998244353)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    return pow(m, n, 998244353)\n    pass"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0].split(\" \")[0])\n    m = int(input_list[0].split(\" \")[1])\n    k = int(input_list[0].split(\" \")[2])\n    color_dict = {}\n    for i in range(1, m+1):\n        color_dict[i] = stdin.split(\"\\n\")[i].split(\" \")[0]\n    # get total number of ways\n    total_ways = 0\n    for i in range(k+1):\n        temp_list = list(color_dict.keys())\n        if i > 0:\n            for j in range(1, i+1):\n                if j == i:\n                    temp_list[j] = color_dict[temp_list[j]]\n                else:\n                    temp_list[j] = color_dict[temp_list[j]] + color_dict[temp_list[j-1]]\n        total_ways += temp_list[-1]\n    return total_ways % 998244353\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2 1''')\n    '6'\n    \"\"\"\n    n, m, k = (int(i) for i in stdin.split())\n    return str(fact(n) // (fact(k) * fact(n - k)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split(' '))\n    if K >= N - 1:\n        print(0)\n    else:\n        ways = 0\n        for first_colors in range(1, M + 1):\n            for second_colors in range(1, M + 1):\n                if (first_colors + second_colors) > K + 1:\n                    break\n                else:\n                    ways += (1 << N) - (1 << (N - (K + 1)))\n        print(ways % 998244353)"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of ways to paint the blocks.\n\n    >>> solution(str('''3 2 1'''))\n    '6'\n    >>> solution(str('''5 5 3'''))\n    '30'\n    >>> solution(str('''4 4 0'''))\n    '0'\n    >>> solution(str('''8 8 2'''))\n    '881'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    # c = [a[x] % p for x in range(p)]\n    # d = [a[x] for x in range(p)]\n    # b = [0] * (p - 2)\n    # b[0] = 1\n    # for i in range(p - 2):\n    #     b[i] = c[i + 1] + 1\n    #     if b[i] >= p:\n    #         b[i] = b[i] % p\n    # return''.join(str(x) for x in b)\n    a = [x % p for x in a]\n    b = [0] * (p - 2)\n    b[0] = 1\n    for i in range(p - 2):\n        b[i] = (b[i] + a[i + 1]) % p\n    return''.join(str(x) for x in b)"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, a_str = stdin.splitlines()\n    p = int(p)\n\n    a = [int(a_str[i: i + 1]) for i in range(len(a_str))]\n\n    def func(x, p):\n        result = 0\n        for i in range(p):\n            if i == x:\n                result = result + a[i]\n            else:\n                result = result + (x * (x + 1)) % p\n            result = result % p\n        return result\n\n    b = [0] * p\n\n    for x in range(p):\n        y = (func(x, p) - x) % p\n        b[y] = b[y] + 1\n\n    result = \"\"\n    for i in range(len(b)):\n        result = result + str(b[i]) + \" \"\n\n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get the input\n    p = int(stdin.readline().strip())\n    a_list = list(map(int, stdin.readline().strip().split()))\n    \n    # Get the f(x)\n    # Get the f(x)\n    f_list = [0] * (p-1)\n    for i in range(p-1):\n        f_list[i] = a_list[i] - (i+1)\n\n    # Print the f(x)\n    f_list_str = [str(i) for i in f_list]\n    print(' '.join(f_list_str))\n    return ''\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    p = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    b = [1, 0]\n    for i in range(2, p):\n        b.append(i)\n    for i in range(p - 1, -1, -1):\n        b[i] = sum(b[p - i:])\n        for j in range(2, p):\n            b[i] -= b[p - i] * j // p\n    for i in range(len(a)):\n        print(b[i], end=' ')\n    return ''\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    a = [int(c) for c in stdin.split(' ')]\n    a.append(0)\n    if len(a) % 2 == 0:\n        a.append(0)\n    a_poly = []\n    if len(a) > 2:\n        for i in range(len(a)//2):\n            a_poly.append(a[i])\n    print(*a_poly)\n    return ''\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  p, *a = map(int, stdin.split())\n  assert p >= 2 and 2 <= p <= 3999\n  assert len(a) == p\n  assert all(a)\n  assert all(0 <= a_i <= 1 for a_i in a)\n\n  for i in range(p):\n    assert (i+1) % p == a[i]\n  \n  a = [0]*(p-1) + a\n  b = [0]*p\n  for i in range(p):\n    if i == 0:\n      b[i] = 1\n    else:\n      b[i] = pow(2, i, p)\n  \n  # To solve the congruence, we need to find d such that (2^d)^d \u2261 1 (mod p)\n  # For more info on this algorithm, see https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers\n  s = 0\n  t = 1\n  u = 1\n  v = 0\n  while True:\n    q = a[u-1] / b[v-1]\n    r = a[u-1] % b[v-1]\n    d = t - (q*s)\n    if d == 1:\n      break\n    a[u-1], b[v-1] = b[v-1], r\n    t, u, v = u, v, d\n  d = (2**(p-1)) * d\n  \n  for i in range(p):\n    b[i] = b[i] * d\n  return''.join(map(str, b[:p-1]))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [0] * (p-1)\n    for i in range(len(a)):\n        b[i] = a[i] - (a[i] % p)\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, a_str = stdin.split('\\n')\n    p = int(p)\n    a_list = list(map(int, a_str.split()))\n    b_list = [0] * (p - 1)\n\n    b_list[0] = sum(a_list[:p]) % p\n    b_list[-1] = sum(a_list) % p\n\n    for i in range(p - 2, 0, -1):\n        b_list[i] = (b_list[i + 1] - a_list[i + 1]) % p\n\n    return''.join(map(str, b_list))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, a_str = map(int, stdin.split('\\n')[0].split(' '))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    b = []\n    for i in range(p-1, -1, -1):\n        b.append(sum(a[i::p]) % p)\n    return''.join(map(str, b))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, *a = map(int, stdin.split())\n    x = [a[0], a[1]]\n\n    # First, we generate a list of pairs of [degree, coefficient]\n    # and use it to generate a function for computing remainder.\n    F = []\n    for i in range(p - 1):\n        F.append([p - i, x[i]])\n    F = sorted(F, key=lambda x: x[0])\n\n    f = lambda x, y: x + y\n    remainders = []\n    for i, a in enumerate(F):\n        remainders.append(f(a[1], a[0]) % p)\n\n    # Now, we just need to generate a function for computing\n    # the remainders with respect to the factored form.\n    r = lambda x, y: x - y\n    factored_form = lambda x: x[0] + x[1]\n    remainders_factored_form = []\n    for r in remainders:\n        remainders_factored_form.append(factored_form(r))\n\n    # We can now generate a function for computing the remainders\n    # with respect to the original form.\n    r = lambda x, y: x - y\n    original_form = lambda x: x[0] + x[1]\n    remainders_original_form = []\n    for r in remainders:\n        remainders_original_form.append(r(original_form(r), p))\n\n    # Let's try to compute the desired remainders with respect\n    # to the original form.\n    for i, a in enumerate(remainders):\n        remainders[i] = a - remainders_original_form[i]\n\n    # Finally, we generate a function for computing the remainders\n    # with respect to the factored form.\n    r = lambda x, y: x - y\n    remainders_factored_form = []\n    for r in remainders:\n        remainders_factored_form.append(r(factored_form(r), p))\n\n    # Let's try to compute the desired remainders with respect\n    # to the factored form.\n    for i, a in enumerate(remainders):\n        remainders[i] = a - remainders_factored_form[i]\n\n    # Let's now generate a function for computing the remainders\n    # with respect to the factored form.\n    r = lambda x, y: x - y\n    remainders_factored_form = []\n    for r in remainders:\n        remainders_factored_form.append(r(factored_form(r), p))\n\n    # Let's try to compute the desired remainders with respect\n    # to the factored form.\n    for i, a in enumerate(remainders):\n        remainders[i] = a - remainders_factored_form[i]\n\n    # Now, we just need to find a solution to the equation\n    # x = y + 1, y is a nonnegative integer, that is, y \\geq 0.\n    # For this, we try to find y.\n    # 1. We guess y = 0, and the following loop will try to\n    #    increment y as long as it's not equal to x.\n    # 2. We now have an equation with the form f(x) = x + y.\n    #    This is a Pell equation.\n    #    We know that we are looking for the integer y, so we\n    #    don't need to test f(x).\n    # 3. We compute the difference of f(x) and x, which is x - f(x).\n    #    We are looking for the integer y, so we don't need to\n    #    test f(x).\n    # 4. We find the divisor d of x - y, and we know that the\n    #    remainder of (x - y) / d must be 0.\n    # 5. We test y + d, until we find a solution or we reach the\n    #    end of the sequence.\n    y = 0\n    while True:\n        x = y + 1\n        f = lambda x, y: x + y\n        remainders = []\n        for i in range(p - 1):\n            remainders.append(f(a[i], y))\n        if any(r!= 0 for r in remainders):\n            break\n        y += 1\n    d = gcd(y + 1, p - 1)\n    y = y // d\n    remainders = [r // d for r in remainders]\n\n    # Finally, we have a polynomial f(x) = b_{p-1} x^{p-1} + b_{p-2} x^{p-2} + \\ldots + b_0,\n    # satisfying the conditions, with the initial conditions being:\n    # - for each i (0 \\leq i \\leq p-1), b_i = 0\n    # - for each i (0 \\leq i \\leq p-1), f(i) = a_i \\pmod p\n    # These two conditions are sufficient to find a solution f(x) = b_{p-1} x^{p-1} + b_{p-2} x^{p-2} + \\ldots + b_0,\n    # satisfying the conditions, in this order, with spaces in between.\n    return''.join(map(str, remainders[::-1]))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count_cells(r: int, c: int, board: str) -> int:\n        return sum([r.count('S') for r in board.split('\\n')])\n\n    return sum([count_cells(r, c, stdin) for r in range(1, int(stdin.split('\\n')[0].split()[0])+1) for c in range(1, int(stdin.split('\\n')[0].split()[1])+1)])\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    rows, cols = list(map(int, input[0].split()))\n    matrix = [[input[i][j] for j in range(cols)] for i in range(rows)]\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    - When we go down the row with maximum cake cells, we only care about where the cake cells that are not S.\n    - When we go down the column with maximum cake cells, we only care about where the cake cells that are not S.\n    '''\n    pass"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return str()\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(r, c, grid):\n        def is_valid(row, col):\n            return 0 <= row < r and 0 <= col < c and grid[row][col]!= 'S'\n\n        def eat(row, col, grid):\n            if grid[row][col] == 'S':\n                grid[row][col] = '.'\n                return 1\n            else:\n                return 0\n\n        def uneat(row, col, grid):\n            grid[row][col] = 'S'\n\n        def dfs(row, col):\n            count = 0\n            grid[row][col] = '.'\n            if is_valid(row - 1, col):\n                count += dfs(row - 1, col)\n            if is_valid(row + 1, col):\n                count += dfs(row + 1, col)\n            if is_valid(row, col - 1):\n                count += dfs(row, col - 1)\n            if is_valid(row, col + 1):\n                count += dfs(row, col + 1)\n            return count\n\n        total = 0\n        for row in range(r):\n            for col in range(c):\n                if grid[row][col] == 'S':\n                    total += dfs(row, col)\n                    return total\n        return total\n\n    r, c = map(int, stdin.readline().split())\n    grid = [[] for _ in range(r)]\n    for row in range(r):\n        grid[row] = list(stdin.readline().strip())\n    return str(solve(r, c, grid))\n\n\n\n-----Test-----\n\nInputs\n\n3 4\n.S.\n...\n..S\n\nOutputs\n\n6\n\nExpected\n\n8\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): the first line contains the number of cards.\n        the next line contains the sequence of integers - the numbers on Alexander's cards.\n    Returns:\n        str: the first line contains -1, if Arthur can write infinitely many integers on the card,\n            otherwise, the first line contains the number of integers that suit you, the second line contains the numbers in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    cards = list(map(int, stdin.split('\\n')[1].split(' ')))\n\n    dp = [0 for _ in range(len(cards))]\n    dp[0] = 1\n    for i in range(n):\n        dp[i + 1] = dp[i] + 1\n        for j in range(i):\n            if cards[i] - cards[j] == 1:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n\n    if dp[-1] == 1:\n        return '-1'\n\n    return str(dp[-1]) +'' +''.join(str(cards[i]) for i in range(len(cards)) if dp[i] == dp[-1])\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    set_nums = set(arr)\n    max_num = max(set_nums)\n    min_num = min(set_nums)\n    if max_num - min_num + 1!= len(set_nums):\n        print(-1)\n        return\n    for i in range(max_num + 1, 10 ** 9 + 1):\n        set_nums.add(i)\n        if len(set_nums) == n + 1:\n            print(i - 1)\n            arr.sort()\n            print(' '.join(str(x) for x in arr))\n            return\n    return"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split(\" \")))\n    if s[1] - s[0] == s[2] - s[1]:\n        return str(s[1] - s[0]) + \" \" + str(s[2] - s[0])\n    return \"-1\""
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem:\n    '''\n    pass"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # first iteration - 1, 2, 3, 4\n    # first item is 1\n    # a[1] - a[0] == 1\n    # a[2] - a[1] == 1\n    # a[3] - a[2] == 1\n    # a[4] - a[3] == 1\n    # a[5] - a[4] == 1\n    # a[6] - a[5] == 1\n    # a[7] - a[6] == 1\n    # a[8] - a[7] == 1\n    # a[9] - a[8] == 1\n\n    # second iteration - 3, 4, 5, 6\n    # first item is 3\n    # a[3] - a[0] == 2\n    # a[4] - a[3] == 1\n    # a[5] - a[4] == 1\n    # a[6] - a[5] == 1\n    # a[7] - a[6] == 1\n    # a[8] - a[7] == 1\n    # a[9] - a[8] == 1\n\n    # third iteration - 5, 6, 7, 8\n    # first item is 5\n    # a[5] - a[0] == 3\n    # a[6] - a[5] == 2\n    # a[7] - a[6] == 1\n    # a[8] - a[7] == 1\n    # a[9] - a[8] == 1\n\n    # fourth iteration - 7, 8, 9, 10\n    # first item is 7\n    # a[7] - a[0] == 4\n    # a[8] - a[7] == 2\n    # a[9] - a[8] == 1\n    # a[10] - a[9] == 1\n\n    # fifth iteration - 9, 10, 11, 12\n    # first item is 9\n    # a[9] - a[0] == 5\n    # a[10] - a[9] == 3\n    # a[11] - a[10] == 2\n    # a[12] - a[11] == 1\n\n    a_f = set()\n    count = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] == 1:\n            count += 1\n        else:\n            count = 0\n        a_f.add(a[i] - a[i - 1] + 1)\n    if len(a_f) > 1:\n        return \"-1\"\n    elif count == 0:\n        return \"-1\"\n    else:\n        return str(count) + \" \" + str(sorted(list(a_f))).replace(\"[\", \"\").replace(\"]\", \"\")\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    previous = nums[0]\n    num_of_results = 0\n    for i in range(1, n):\n        if nums[i] - previous!= 1:\n            num_of_results += 1\n        previous = nums[i]\n    if num_of_results > 0:\n        print(num_of_results)\n        print(*range(nums[0], nums[-1] + 1))\n    else:\n        print(-1)\n\n    return \"\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    card_n = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split()))\n    max_card = max(cards)\n    res = []\n    for i in range(max_card + 1, max_card * 2 + 1):\n        if all([i not in cards, i - cards[-1] == 1]):\n            res.append(i)\n    if res:\n        print(card_n, len(res))\n        print(*res)\n    else:\n        print(-1)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ts = [tuple(map(int, x.split())) for x in stdin]\n    ts = sorted(ts, key=lambda x: x[0])\n    for i in range(1, n):\n        if ts[i][0] < ts[i - 1][1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(a: list[list[int]], b: list[list[int]], c: list[list[int]]) -> bool:\n        \"\"\"\n        Solve the problem with O(N) time complexity and O(1) space complexity.\n        \"\"\"\n        sorted_a = sorted(a)\n        sorted_b = sorted(b)\n        sorted_c = sorted(c)\n        \n        if sorted_a == sorted_b or sorted_a == sorted_c or sorted_b == sorted_c:\n            return True\n        \n        return False\n    \n    n = int(stdin.readline())\n    a = []\n    b = []\n    c = []\n    \n    for _ in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n        b.append(list(map(int, stdin.readline().split())))\n        c.append(list(map(int, stdin.readline().split())))\n    \n    return \"YES\" if solve(a, b, c) else \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = '4\\n1 2\\n2 3\\n2 3\\n1 2\\n'\n    # if len(stdin)!= 4:\n    #     return 'NO'\n    # else:\n    #     l = []\n    #     for i in stdin.split('\\n'):\n    #         l.append(list(map(int, i.split(' '))))\n    #     a = sorted(l, key=lambda x: x[0])\n    #     b = sorted(l, key=lambda x: x[1])\n    #     if a[0][0] < b[0][0] and a[-1][1] > b[-1][1]:\n    #         return 'YES'\n    #     return 'NO'\n    stdin = stdin.split('\\n')\n    a = []\n    b = []\n    for i in stdin:\n        a.append(list(map(int, i.split(' '))))\n    a.sort(key=lambda x: x[0])\n    b.sort(key=lambda x: x[1])\n    l = a + b\n    for i in range(len(l)-1):\n        if l[i][1] > l[i+1][0]:\n            return 'NO'\n    return 'YES'\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    times = [tuple(map(int, line.split())) for line in stdin]\n    times.sort(key=lambda t: t[0])\n    left = 0\n    right = times[0][0]\n    for start, end in times:\n        if left <= start <= right:\n            left = max(left, end)\n        else:\n            left = right = max(left, end)\n        right = max(right, end)\n    if left <= right:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 2\n   ... 2 3\n   ... 2 3\n   ... 1 2\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 2\n   ... 1 2\n   ... 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    shows = [tuple(map(int, line.split())) for line in stdin]\n    shows = sorted(shows)\n    return 'NO' if shows[0][1] > shows[1][0] or shows[-1][1] < shows[-2][0] else 'YES'\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_ok(intervals: List[Tuple[int, int]]) -> bool:\n        nonlocal first_end, second_end\n        for start, end in intervals:\n            if start < first_end:\n                return False\n            elif second_end and start >= second_end:\n                return False\n            first_end = max(first_end, end)\n            if second_end is None or end > second_end:\n                second_end = end\n        return True\n\n    num_of_shows = int(stdin.readline())\n    nonlocal first_end, second_end\n    first_end = second_end = None\n    intervals = []\n    for i in range(num_of_shows):\n        l, r = map(int, stdin.readline().split())\n        intervals.append((l, r))\n\n    return \"YES\" if is_ok(intervals) else \"NO\"\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split(' ')]\n    \n    ans = -1\n    for i in range(l, r + 1):\n        if is_coprime(i):\n            for j in range(i + 1, r + 1):\n                if is_coprime(j):\n                    k = j + 1\n                    while k <= r and not is_coprime(k):\n                        k += 1\n                    if k <= r and not is_coprime(i, j, k):\n                        ans = i, j, k\n                        break\n            if ans!= -1:\n                break\n        \n    return''.join(map(str, ans)) if ans!= -1 else '-1'\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find three integers (a, b, c) such that l \u2264 a < b < c \u2264 r,\n    pairs (a, b) and (b, c) are coprime, and pair (a, c) is not coprime.\n    If such three integers exist, print them in ascending order.\n    If they do not exist, print the single number -1.\"\"\"\n    l, r = map(int, stdin.split())\n    a, b, c = -1, -1, -1\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            if gcd(i, j) == 1 and gcd(j, i) == 1 and gcd(i, j)!= 1:\n                if is_coprime(a, b, c) or (j - i == 2 and is_coprime(a, b)):\n                    if i < a < j and j < b < c:\n                        a, b, c = i, j, c\n                    elif j < a < i and i < b < c:\n                        a, b, c = j, i, c\n                    elif i < a < c < j and j < b < c:\n                        a, b, c = i, j, c\n                    elif i < a < c < j and j < b < c:\n                        a, b, c = i, j, c\n                    elif a < i < b < j and b < c < j:\n                        a, b, c = i, j, c\n                    elif i < a < j < b and b < c < j:\n                        a, b, c = i, j, c\n                    elif j < a < b < i and b < c < i:\n                        a, b, c = j, i, c\n                    elif i < a < j < b and b < c < i:\n                        a, b, c = i, j, c\n                    else:\n                        a, b, c = -1, -1, -1\n                        break\n    print(a, b, c)\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # take inputs\n    [l, r] = stdin.split(\" \")\n    l = int(l)\n    r = int(r)\n    cnt = 0\n    # form a list of all numbers from 1 to r\n    num_list = []\n    for i in range(1, r + 1):\n        num_list.append(i)\n    # loop through each pair\n    # check if l <= a < b < c <= r\n    # if true, then pair is not coprime\n    for a in num_list:\n        for b in num_list:\n            if l <= a < b <= r:\n                # pair is not coprime\n                # pair with b\n                for c in num_list:\n                    if a < c <= r and a!= b and c!= b:\n                        if gcd(b, c) == 1:\n                            # pair with c\n                            for d in num_list:\n                                if a < d <= r and d!= c and b!= d:\n                                    if gcd(c, d) == 1:\n                                        # pair with d\n                                        for e in num_list:\n                                            if a < e <= r and e!= d and c!= e:\n                                                if gcd(d, e) == 1:\n                                                    # pair with e\n                                                    for f in num_list:\n                                                        if a < f <= r and f!= e and d!= f:\n                                                            if gcd(e, f) == 1:\n                                                                # pair with f\n                                                                for g in num_list:\n                                                                    if a < g <= r and g!= f and d!= g and e!= g:\n                                                                        # pair with g\n                                                                        for h in num_list:\n                                                                            if a < h <= r and h!= g and f!= h:\n                                                                                if gcd(g, h) == 1:\n                                                                                    # pair with h\n                                                                                    for i in num_list:\n                                                                                        if a < i <= r and i!= h and g!= i:\n                                                                                            # pair with i\n                                                                                            for j in num_list:\n                                                                                                if a < j <= r and j!= i and h!= j:\n                                                                                                    if gcd(i, j) == 1:\n                                                                                                        # pair with j\n                                                                                                        for k in num_list:\n                                                                                                            if a < k <= r and k!= j and i!= k:\n                                                                                                                if gcd(j, k) == 1:\n                                                                                                                    # pair with k\n                                                                                                                    for l in num_list:\n                                                                                                                        if a < l <= r and l!= k and j!= l:\n                                                                                                                            if gcd(k, l) == 1:\n                                                                                                                                # pair with l\n                                                                                                                                for m in num_list:\n                                                                                                                                    if a < m <= r and m!= l and k!= m:\n                                                                                                                                       if gcd(m, l) == 1:\n                                                                                                                                            # pair with m\n                                                                                                                                            for n in num_list:\n                                                                                                                                                if a < n <= r and n!= m and k!= n:\n                                                                                                                                                   if gcd(n, m) == 1:\n                                                                                                                                                        # pair with n\n                                                                                                                                                        if gcd(n, l) == 1:\n                                                                                                                                                             # pair with l\n                                                                                                                                                             if gcd(m, l) == 1:\n                                                                                                                                                                  # pair with m\n                                                                                                                                                                  if gcd(m, k) == 1:\n                                                                                                                                                                        # pair with k\n                                                                                                                                                                        if gcd(n, k) == 1:\n                                                                                                                                                                            if gcd(n, j) == 1:\n                                                                                                                                                                                 # pair with j\n                                                                                                                                                                                 if gcd(m, j) == 1:\n                                                                                                                                                                                     # pair with m\n                                                                                                                                                                                     if gcd(l, j) == 1:\n                                                                                                                                                                                        # pair with l\n                                                                                                                                                                                        if gcd(m, l) == 1:\n                                                                                                                                                                                             # pair with m\n                                                                                                                                                                                             if gcd(l, k) == 1:\n                                                                                                                                                                                                      # pair with k\n                                                                                                                                                                                                      if gcd(j, k) == 1:\n                                                                                                                                                                                                     # pair with j\n    \n    return str(a) + \" \" + str(b) + \" \" + str(c)\n    \n    \ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(i) for i in stdin.split(' ')]\n    result = []\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            if i * j % 2 == 0:\n                if j % 3 == 0 or i % 3 == 0:\n                    continue\n                elif j % 3 == 1 and i % 3 == 1:\n                    if i > j:\n                        result.append(i)\n                    else:\n                        result.append(j)\n                    break\n    if result == []:\n        return '-1'\n    else:\n        return''.join(str(e) for e in result)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    l, r = map(int, stdin.split())\n    for a in range(l, r+1):\n        for b in range(a+1, r+1):\n            for c in range(b+1, r+1):\n                if a**b > c and b**c > a:\n                    if gcd(a, b) == 1 and gcd(a, c) == 1 and gcd(b, c) == 1:\n                        if not coprime(a, b) or not coprime(a, c) or not coprime(b, c):\n                            return f'{a} {b} {c}'\n    return '-1'\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n\n    l = 1\n    r = a * b\n\n    if l * b > r * a:\n        if l < b:\n            l, r = b, a\n        if l % b == 0:\n            l = l // b\n    else:\n        if r < a:\n            l, r = a, b\n        if r % a == 0:\n            r = r // a\n\n    while l < r:\n        mid = l + (r - l) // 2\n        if (a * mid + b * (mid // b)) <= (mid * a + mid * (mid // a)):\n            l = mid + 1\n        else:\n            r = mid\n\n    return \"{} {} {}\".format(l, a, b)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check_coprime(a: int, b: int, c: int) -> bool:\n        return max(a, b, c) % min(a, b, c) == 1\n\n    def find_answer(l: int, r: int) -> str:\n        answer = -1\n        \n        for a in range(l, r + 1):\n            for b in range(a + 1, r + 1):\n                if check_coprime(a, b, r) and check_coprime(a, b, l):\n                    if not check_coprime(a, b, b):\n                        answer = f\"{a} {b} {r}\"\n        \n        return answer\n    \n    a, b = [int(x) for x in stdin.split()]\n    print(find_answer(a, b))\n    "
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (l, r) = map(int, stdin.split())\n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            for k in range(j, r+1):\n                if isCoprime(i, j) and isCoprime(j, k) and not isCoprime(i, k):\n                    return \"{} {} {}\".format(i, j, k)\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a counterexample for the statement provided by the input.\n\n    >>> solution(\"2 4\")\n    '2 3 4'\n    >>> solution(\"10 11\")\n    '-1'\n    >>> solution(\"900000000000000009 900000000000000029\")\n    '900000000000000009 900000000000000010 900000000000000021'\n    \"\"\"\n    l, r = [int(x) for x in stdin.split()]\n    l_n, r_n = [a for a in range(l, r + 1)], [b for b in range(l, r + 1)]\n    for a in l_n:\n        for b in r_n:\n            for c in r_n:\n                if a < b < c and a * b % c == 0 and b * c % a == 0:\n                    return f\"{a} {b} {c}\"\n\n    return \"-\" + 1\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    l, r = map(int, stdin.split())\n    \n    # if l % 3 == 0:\n    #     print(-1)\n    #     return\n    \n    a = l\n    b = l + 1\n    \n    while (a, b) not in (coprime_pair for coprime_pair in enumerate_coprime_pairs(l, r) if a < coprime_pair[0] < b):\n        a += 1\n    \n    print(a, b, b+1)\n        \n    return \"\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.splitlines()\n    n, s = lines[0].split()\n    n = int(n)\n    s = int(s)\n    assert 2 <= n <= 100\n    assert 1 <= s <= 1000\n\n    volumes = [int(v) for v in lines[1].split()]\n    assert len(volumes) == n\n    for v in volumes:\n        assert 1 <= v <= 10\n    assert s >= sum(volumes)\n    assert s % n == 0\n\n    # compute\n    mug_volumes = volumes\n    mug_volumes.sort()\n    s = s / n\n    lost_mug_volumes = [m for m in mug_volumes if m > s]\n    # print(lost_mug_volumes)\n    if len(lost_mug_volumes) > 0:\n        return 'NO'\n    else:\n        return 'YES'\n\n\ndef"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(\" \"))\n    if sum(map(int, stdin.split(\" \"))) > s:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(' '))\n    mugs = list(map(int, stdin.split(' ')))\n    if n == 1:\n        return 'YES'\n    if any(mug > s for mug in mugs):\n        return 'NO'\n    return 'YES' if sum(mugs) - mugs[0] <= s else 'NO'\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # \uc5b4\ub5a4 \uac78 \uc8fc\ub294 \uc0ac\ub78c\uc774 \ud328\ubc30\ud558\ub294\uc9c0 \uad6c\ud558\ub294 \uac83.\n    n, s = map(int, stdin.split(' '))\n    mugs = list(map(int, stdin.split(' ')))\n\n    mugs.sort(reverse=True)\n\n    for i in range(n):\n        if s < mugs[i]:\n            return 'NO'\n\n        s += mugs[i]\n\n    return 'YES'\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    mugs = list(map(int, stdin.split()))\n    possible = True\n    for mug in mugs:\n        if mug > s:\n            possible = False\n            break\n    return \"YES\" if possible else \"NO\""
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    # a = [int(stdin) for stdin in input().split(' ')]\n    n = a[0]\n    s = a[1]\n    mugs = a[2:]\n    mugs.sort()\n    while n > 1:\n        if mugs[0] < s:\n            mugs.append(mugs[0] + mugs[1])\n            mugs.remove(mugs[0])\n            mugs.remove(mugs[0])\n            n -= 2\n        else:\n            break\n    if mugs:\n        return 'NO'\n    return 'YES'\nprint(solution(input()))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find out if you can fulfill the game conditions by picking mugs.\n    \"\"\"\n    n, s = [int(i) for i in stdin.split()]\n    mugs = [int(i) for i in stdin.split()][1:]\n    if sum(mugs) < s:\n        print('NO')\n    else:\n        total = 0\n        for i in mugs:\n            total += i\n            if total > s:\n                print('NO')\n                return\n        print('YES')"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n^2)\n    space: O(1)\n    \"\"\"\n    n, m = stdin.split()\n    mugs = list(map(int, stdin.split()))\n    mugs.sort()\n    mugs.append(mugs[0] + mugs[1])\n    # find the lowest possible sum\n    low = 0\n    for i in range(2, len(mugs)):\n        low += mugs[i]\n    # if the sum exceeds m, no way to win\n    if low > m:\n        return 'NO'\n    # if the sum is m, then we can win by using just one mug\n    if low == m:\n        return 'YES'\n    # if the sum is less than m, then we need more cups\n    # if the sum is greater than m, then we need one more cup\n    if low > m:\n        return 'YES' if sum(mugs) - m >= 2 else 'NO'"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(arr, cup):\n        total = 0\n        for i in range(n):\n            total += arr[i]\n            arr[i] = cup\n            cup = cup*2\n        return total\n\n    def check(arr, cup):\n        total = 0\n        for i in range(n):\n            total += arr[i]\n            arr[i] = cup\n            cup = cup*2\n        return total <= s\n\n    n, s = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort(reverse=True)\n    total = calculate(arr, 1)\n    for i in range(n-1):\n        if not check(arr, arr[i]):\n            return \"NO\"\n        total = calculate(arr, arr[i])\n    return \"YES\" if total <= s else \"NO\"\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    return str(y + b + r - 6)\n\n\n\ndef"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    return str(max([(y + b + r - 2) * (y + b + r - 1) // 2, 6 * (y + b + r - 1)]))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(max(6, sum([int(i) for i in stdin.split()]) - 6))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = list(map(int, stdin.split()))\n    return str(y+b+r-6)\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = [int(x) for x in stdin.split(\" \")]\n    yellow = max(0, y - 6 + (b + r - b) - 1)\n    blue = max(0, b - 6 + (r + y - r) - 1)\n    red = max(0, r - 6 + (y + b - y) - 1)\n    return str(yellow + blue + red)\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of ornaments that can be used.\"\"\"\n    if len(stdin) == 0:\n        return \"0\"\n    y, b, r = [int(i) for i in stdin.split(\" \")]\n    return str(y + b + r - 3)\n\n\nprint(solution(\"8 13 9\"))\nprint(solution(\"13 3 6\"))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a,b,c = list(map(int, stdin.split(\" \")))\n    return str(max([a,b,c,a+b+c,2*(a-1)+2*(b-1)+3*(c-1)],[2*a+2*b+3*c]))\n\ndef"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    if a+b+c<=6:\n        print(a+b+c)\n    else:\n        print(max(a,b,c)+min(a,b,c))"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    return str(max(y + b, r + b, y + r, b + r))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return max([r // 3, g // 3, b // 3])\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return sum((max(r - 1, 0) + max(g - 1, 0) + max(b - 1, 0)), 1)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport math\nfrom functools import reduce\n\n\ndef"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) + int(stdin.split()[1]) + int(stdin.split()[2]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '3'[stdin[0] == '1' and stdin[1] == '1' and stdin[2] == '1']\n\nprint(solution('101010'))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n\n    r, g, b = map(int, stdin.split())\n\n    rgb = [r, g, b]\n    rgb.sort()\n    rgb.reverse()\n\n    res = 0\n    for i in range(1, r + 1):\n        for c in combinations(rgb, i):\n            if sum(c) == r:\n                res += 1\n    print(res)\n    return ''\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum number of tables that can be decorated in the required manner.\"\"\"\n    r, g, b = [int(x) for x in stdin.split()]\n    rgb = (r, g, b)\n    return r + g + b - max(rgb) - min(rgb)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    k.sort()\n    ans = 0\n    for i in range(n):\n        ans += k[i]*(i+1)\n    return ans\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'foo'\n    \n\n\n\n\n'''\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prizes = [int(c) for c in stdin.readline().split(' ')]\n    min_time = max(prizes) + 1\n    \n    while len(prizes) > 0:\n        if len(prizes) % 2 == 1:\n            min_time = min(min_time, max(prizes))\n            while len(prizes) > 0:\n                if min_time in prizes:\n                    prizes.pop(0)\n                else:\n                    break\n        else:\n            min_time = min(min_time, max(prizes))\n            while len(prizes) > 0:\n                if max(prizes) in prizes:\n                    prizes.pop()\n                else:\n                    break\n        \n    return min_time\n    \n    \n    \n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return str(len(s.split()) * (1 + int(s[0]) + int(s[-1])))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write your code here"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100000:\n        raise ValueError(\"n should be between 1 and 10000\")\n\n    prizes = [int(x) for x in stdin.split()]\n    prizes.sort()\n    if len(set(prizes))!= n:\n        raise ValueError(\"At least one prize is duplicate\")\n\n    if 1 in prizes or n in prizes:\n        raise ValueError(\"At least one prize is equal to current position\")\n\n    def dist(x, y):\n        return abs(x - y)\n    return dist(1, 10 ** 6) * n\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3!= 0:\n        return '0'\n    ans = 1\n    for i in range(n // 3):\n        ans *= 3\n    return str(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(sum(int(stdin[i:i+2]) for i in range(0, len(stdin), 3)) % 10**9 % 10))\n\n\"\"\""
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '10'\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    for _ in range(n // 3):\n        k = (k * 2) % 1000000007\n    print(k)\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_solutions())\n\ndef"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(int(1e9 + 7 - (n - 1) * n * (n + 1) // 6))\n    #return\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(20)\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    variants = [0, 0, 0]\n    for i in range(n, 3 * n):\n        for j in range(i):\n            if variants[j] + variants[j + 1] + variants[j + 2] == i:\n                variants[j] += 1\n                variants[j + 1] += 1\n                variants[j + 2] += 1\n                break\n    print(sum(variants) % (10 ** 9 + 7))\n    return ''\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    lst = list(set(s))\n    print(lst)\n    if len(lst) == 1:\n        print(0)\n    elif len(lst) == 2:\n        print(2)\n    else:\n        print(len(lst))\n    '''\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    def recursion(s, i, j):\n        if i == len(s):\n            return 0\n        if s[i]!= s[j]:\n            return 1 + min(recursion(s, i + 1, j), recursion(s, i, j + 1))\n        else:\n            return recursion(s, i + 1, j + 1)\n    print(recursion(s, 0, 0))\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    s = stdin\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j + 1] in s[j + 1:]:\n                ans += 1\n                break\n    return ans\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    m = sum([len(set(s[i:j])) for i in range(n) for j in range(i+1, n+1)])\n    if n == m:\n        return 0\n    return -1\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return 0\n    \n    max_count_of_repetitions = 0\n    max_count_of_repetitions_i = 0\n\n    for i in range(len(stdin)):\n        count_of_repetitions = 1\n\n        for j in range(i + 1, len(stdin)):\n            if stdin[i] == stdin[j]:\n                count_of_repetitions += 1\n            else:\n                break\n        \n        if count_of_repetitions > max_count_of_repetitions:\n            max_count_of_repetitions = count_of_repetitions\n            max_count_of_repetitions_i = i\n    \n    if max_count_of_repetitions == 1:\n        return 1\n    else:\n        return len(stdin) - max_count_of_repetitions_i\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nimport math\nfrom collections import defaultdict, Counter\n\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    \n    def find_all(s, substring):\n        return [i for i in range(len(s)) if s.startswith(substring, i)]\n    \n    \n    start = 1\n    end = 2\n    k = 1\n    \n    while end <= len(s):\n        if s[start:end] == s[end:end + k]:\n            start = end\n            end += 1\n        else:\n            if end - start < k:\n                k = end - start\n            start = end\n            end += 1\n    \n    return k if k > 1 else \"IMPOSSIBLE\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    for i in stdin:\n        l.append(i)\n    l.sort()\n    ans = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            ans+=1\n    return ans\n\ns = input()\nprint(solution(s))\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, res = stdin.split('\\n'), 0\n    n = int(s[0])\n    s = s[1]\n\n    for i in range(1, n):\n        res += s[i]!= s[i - 1]\n    return str(res) if res else '-1'\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nresult = \"\"\nfor i in range(len(s)):\n    for j in range(len(s)):\n        result = s[i:j+1]\n        if len(set(result)) == len(result):\n            return len(result)\n    return -1\n    \n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return 'Vladik' if int(a) < int(b) else 'Valera'\n\"\"\"\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b == 0 or a == 0:\n        print('Valera')\n    elif a % b == 0:\n        print('Valera')\n    else:\n        print('Vladik')\n\nsolution('2 2')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution should run on multiple test cases.\n\nDo not remove the below line.\n return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Vladik\"\n    else:\n        return \"Valera\"\n\n\nsolution(\"1 1\") == \"Valera\"\nsolution(\"7 6\") == \"Vladik\"\n\n\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vladik, valera = [int(x) for x in stdin.split()]\n    turn = 0\n    while True:\n        vladik -= 1\n        valera -= 1\n        turn += 1\n        if vladik == 0:\n            print(\"Vladik\")\n            return\n        if valera == 0:\n            print(\"Valera\")\n            return\n\n[Image]\n[Test]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return \"Vladik\"\n    return \"Valera\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    vladik = b - a + 1\n    valera = 0\n    while True:\n        if vladik > valera + 1:\n            valera += 1\n            vladik -= valera\n        else:\n            break\n    return \"Valera\" if vladik else \"Vladik\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split(' ')))\n    a, b = lst[0], lst[1]\n    c = a - b\n    while c:\n        if a % c == 0:\n            return 'Vladik'\n        elif b % c == 0:\n            return 'Valera'\n        else:\n            c -= 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a ^ b)\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    for i in range(len(s)):\n        if s[i] == \"?\":\n            s[i] = \"(\" if i % 2 == 0 else \")\"\n    return s\n\"\"\"\n\n\"\"\"\n-----Test-----\ns = \"(?(1)???????(?(2)???????)??)\"\nprint(solution(s))\n\n\"\"\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str) -> List[str]:\n        # important: `s` is the input string\n        l = len(s)\n        # we are going to use `stack` to keep the prefixes\n        stack = []\n        # the output list\n        ans = []\n        # the prefixes to keep\n        cur = \"\"\n        # while there are remaining elements to handle\n        while s:\n            # get the current element\n            c = s[0]\n            # `s` is left with the remaining elements\n            s = s[1:]\n            # if it's \"?\", then we need to start a new prefix\n            if c == \"?\":\n                # add the `cur` prefix to the output\n                ans.append(cur)\n                # push the current prefix to the stack\n                stack.append(cur)\n                # add the `?` prefix to the current prefix\n                cur += \"?\"\n            # otherwise, we add the current element to the current prefix\n            else:\n                cur += c\n        # `stack` now holds the prefixes we need to handle\n        for s in stack:\n            # we have no more `?` to handle\n            if s[-1]!= \"?\":\n                # so we are going to add it to the output\n                ans.append(s)\n            # otherwise, we are going to keep it in the stack\n            else:\n                # so we need to create a new prefix for it\n                new_s = s[:-1] + \"(\"\n                # and we can add it to the output\n                ans.append(new_s)\n        # return the output list\n        return ans\n\n    # return the answer\n    return \"\\n\".join(solve(stdin))\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = []\n    for c in s:\n        if c == '?':\n            res.append('(')\n            res.append(')')\n        else:\n            res.append(c)\n    return \"\".join(res)\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = \"(\" + s + \")\"\n    \n    if n % 2 == 0:\n        return \":(\"\n    \n    ans = set()\n    \n    def check(s, k):\n        s = s[1:-1]\n        for i in range(k, len(s)):\n            if s[i] == \"1\":\n                if i + 1 < len(s):\n                    check(s[:i] + \"(\" + s[i] + \"+\" + s[i+1:] + \")\" + s[i+2:], i+1)\n                if i - 1 >= 0:\n                    check(s[:i] + \"(\" + s[i] + \"+\" + s[i-1:] + \")\" + s[i+1:], i-1)\n            if s[i] == \")\":\n                if i + 1 < len(s):\n                    check(s[:i] + \"(\" + s[i] + \"+\" + s[i+1:] + \")\" + s[i+2:], i+1)\n                if i - 1 >= 0:\n                    check(s[:i] + \"(\" + s[i] + \"+\" + s[i-1:] + \")\" + s[i+1:], i-1)\n    \n    check(s, 0)\n    return ans"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom collections import deque\nimport itertools\n\ndef"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(\"(()())\")\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here.\n    '''\n    def change_sign(coefficients: list, k: int):\n        changed = []\n        for i, c in enumerate(coefficients):\n            if abs(c) > k:\n                changed.append(k * i + k if c > 0 else k * i - k)\n            else:\n                changed.append(c)\n        return changed\n    \n    n, k = [int(x) for x in stdin.split(' ')]\n    coefficients = [int(x) for x in stdin.split(' ')[1:]]\n    coefficients = change_sign(coefficients, k)\n    \n    count = 0\n    for i in range(n + 1):\n        for j in range(i + 1):\n            for z in range(j + 1):\n                if i - j == j - z == z:\n                    count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    \n    return ''\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    [6. \u0412\u0456\u0434\u0441\u043e\u0442\u043e\u043a \u0432\u0438\u043a\u043e\u043d\u0430\u043d\u0438\u0445 \u0432\u0430\u043a\u0430\u043d\u0441\u0456\u0439](https://codeforces.com/problemset/problem/1515/B)\n\n    Limak is a little polar bear. He doesn't have many toys and thus he often plays with polynomials.\n\n    He considers a polynomial valid if its degree is n and its coefficients are integers not exceeding k by the absolute value. More formally:\n\n    Let a_0, a_1,..., a_{n} denote the coefficients, so $P(x) = \\sum_{i = 0}^{n} a_{i} \\cdot x^{i}$. Then, a polynomial P(x) is valid if all the following conditions are satisfied:  a_{i} is integer for every i;  |a_{i}| \u2264 k for every i;  a_{n} \u2260 0. \n\n    Limak has recently got a valid polynomial P with coefficients a_0, a_1, a_2,..., a_{n}. He noticed that P(2) \u2260 0 and he wants to change it. He is going to change one coefficient to get a valid polynomial Q of degree n that Q(2) = 0. Count the number of ways to do so. You should count two ways as a distinct if coefficients of target polynoms differ.\n\n    -----Input-----\n\n    The first line contains two integers n and k (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 10^9)\u00a0\u2014 the degree of the polynomial and the limit for absolute values of coefficients.\n\n    The second line contains n + 1 integers a_0, a_1,..., a_{n} (|a_{i}| \u2264 k, a_{n} \u2260 0)\u00a0\u2014 describing a valid polynomial $P(x) = \\sum_{i = 0}^{n} a_{i} \\cdot x^{i}$. It's guaranteed that P(2) \u2260 0.\n\n    -----Output-----\n\n    Print the number of ways to change one coefficient to get a valid polynomial Q that Q(2) = 0.\n\n    -----Examples-----\n\n    Input\n    3 1000000000\n    10 -9 -3 5\n\n    Output\n    3\n    \n    Input\n    3 12\n    10 -9 -3 5\n\n    Output\n    2\n    '''\n\n    # Complexity: time complexity is O(n), where n is the number of coefficients\n    #  In the worst case, we have to go through all the coefficients\n    #  In the best case, we have to do only n operations\n    #  We have to iterate over all the coefficients, so the complexity is O(n)\n    n, k = map(int, stdin.split())\n    poly = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if abs(poly[j]) > k:\n                continue\n            poly[i] = poly[i] * (-1)\n            count += 1\n            break\n    print(count)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    polynomials = stdin.split(' ')[1:]\n    n = int(n)\n    k = int(k)\n    result = 0\n    for polynomial in polynomials:\n        coefficients = [int(i) for i in polynomial.split(' ')]\n        if not coefficients[0]:\n            result += 1\n        for i in range(1, len(coefficients)):\n            if abs(coefficients[i]) > k:\n                break\n        else:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split('\\n')[1:][0].split()]\n    # if abs(a[0]) > k:\n    #     return 0\n    # if abs(a[0]) == k:\n    #     for i in range(len(a)):\n    #         if i!= 0 and abs(a[i]) > k:\n    #             return 0\n    #     return 1\n    # for i in range(len(a)):\n    #     if i!= 0 and abs(a[i]) > k:\n    #         return 0\n    # return 2\n    for i in range(len(a)):\n        if i!= 0 and abs(a[i]) > k:\n            return 0\n    return 2\n    \nsolution('3 1000000000\\n10 -9 -3 5')"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the maximum number of teams of three people the coach can form.\n\n    >>> solution('4\\n1 1 2 1')\n    1\n    >>> solution('2\\n2 2')\n    0\n    >>> solution('7\\n2 2 2 1 1 1 1')\n    3\n    >>> solution('3\\n1 1 1')\n    1\n    \"\"\"\n    return \"Not implemented\"\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    l = list(map(int, s.split()))\n    d = {}\n    for i in range(n):\n        d[l[i]] = d.get(l[i], 0) + 1\n    result = 0\n    for i in d.keys():\n        if d[i] > 1:\n            result += d[i] // 3\n        if d[i] % 3 == 2 and d[i] // 3 > 0:\n            result += 1\n    print(result)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 2\n   ... ''')\n    '1'\n    >>> solution('''2\n   ... 2\n   ... ''')\n    '0'\n    >>> solution('''7\n   ... 2 2 2 1 1 1 1\n   ... ''')\n    '3'\n    >>> solution('''3\n   ... 1 1 1\n   ... ''')\n    '1'\n    \"\"\"\n    groups_size = [int(x) for x in stdin.split()]\n    l = len(groups_size)\n    if l <= 2:\n        return '1'\n    groups_size.sort()\n    res = groups_size[0] * groups_size[1]\n    if groups_size[0] * 2 == groups_size[l - 1]:\n        res -= groups_size[l - 1]\n    return str(res)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_groups = int(stdin.readline())\n    groups = [int(x) for x in stdin.readline().split()]\n    \n    # First element is always 1\n    groups[0] = 1\n    \n    # Last element is always 1\n    groups[len(groups) - 1] = 1\n    \n    # Initialize counter\n    num_teams = 0\n    \n    # Counters for first two groups\n    first_two_groups = 0\n    first_two_groups_counter = 0\n    second_two_groups = 0\n    second_two_groups_counter = 0\n    \n    for group in groups:\n        if group == 1:\n            num_teams += first_two_groups\n            num_teams += second_two_groups\n            first_two_groups = 0\n            second_two_groups = 0\n        else:\n            if first_two_groups_counter == 2:\n                first_two_groups += 1\n                first_two_groups_counter = 0\n            else:\n                first_two_groups_counter += 1\n                \n            if second_two_groups_counter == 2:\n                second_two_groups += 1\n                second_two_groups_counter = 0\n            else:\n                second_two_groups_counter += 1\n                \n            num_teams += first_two_groups\n            num_teams += second_two_groups\n        \n    return num_teams\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    c = 0\n    m = 0\n    for i in range(n):\n        if a[i] % 3 == 0:\n            m += 1\n        else:\n            c += 1\n    if m < c:\n        print(m)\n    else:\n        print(c)\n    return ''\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    cnt = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] <= 3:\n                    cnt += 1\n    return cnt"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    coords = list(map(int, stdin.split()))\n    x_1, y_1, x_2, y_2 = coords[0], coords[1], coords[2], coords[3]\n    if x_1 == x_2:\n        return (x_1, y_1, x_2, y_2)\n    if y_1 == y_2:\n        return (x_1, y_1, x_2, y_2)\n    if y_1 == x_2:\n        return (x_1, y_1, x_2, y_2)\n    else:\n        x_1_2, y_1_2 = x_2, y_2\n        x_2_2, y_2_2 = x_1, y_1\n        if x_1 > x_2:\n            x_1_2, y_1_2 = x_2, y_2\n            x_2_2, y_2_2 = x_1, y_1\n        if y_1 > y_2:\n            x_1_2, y_1_2 = x_2, y_2\n            x_2_2, y_2_2 = x_1, y_1\n        if y_1_2 == y_2_2:\n            return (x_1_2, y_1_2, x_2_2, y_2_2)\n        else:\n            return (x_1_2, y_1_2, x_2_2, y_2_2)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    res = (x_2 - x_1) * (y_2 - y_1)\n    return str(res)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c, d = map(int, stdin.split())\n    res = 0\n    #1:\n    for i in range(a, c+1):\n        for j in range(b, d+1):\n            res += abs(i) + abs(j)\n    #2:\n    # d = -b\n    # b = abs(a-c)\n    # a = -d\n    # c = abs(b-d)\n    # res = abs(a) + abs(b) + abs(c)\n    # return str(res)\n    #3:\n    return str(abs(a) + abs(b) + abs(c) + abs(d))\n    #4:\n    return str(int(max(abs(a), abs(b), abs(c), abs(d))*2 - min(abs(a), abs(b), abs(c), abs(d))*2))\n\n\n\n------Test------\n\nInput\n4 6 7 5\n\nOutput\n33\n\n\n-----Explanation-----\n\nHere is the painted map:\n\n\n\nThis answer is the sum of all possible distances from cell (4, 6) to other cells (4, 6) and (6, 4), and to other cells (6, 4) and (4, 6). In the first case, the distance from (4, 6) to (4, 6) is 0, in the second case, the distance to (6, 4) is 6 and the distance to (4, 6) is 6, so we add the sum of these two distances.\n\nMore precisely, we have a list of values with unit distances, where first element represents the distance from (4, 6) to (4, 6). We want to add values of the list, so that we get the first element of the list which is the distance from (4, 6) to (6, 4) and second element of the list, which is the distance from (6, 4) to (4, 6). Therefore, we add them together, then sum the distances from (4, 6) to the other cells (4, 6) and (6, 4) and (6, 4) to (4, 6).\n\nSince, in our example, a distance from (4, 6) to (4, 6) equals 0, we have to subtract the distance from (4, 6) to (6, 4) from the sum of distances from (4, 6) to the other cells (4, 6) and (6, 4) and from (6, 4) to (4, 6). So the final result is (6 + 6 - 0 + 0) = 13.\n\n\ndef"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return (x2 - x1 + 1) * (y2 - y1 + 1)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    start_x, start_y = [int(x) for x in stdin.split()]\n    end_x, end_y = [int(x) for x in stdin.split()]\n    total = 0\n    for x in range(start_x, end_x + 1):\n        if x % 2 == 1:\n            total += (end_x - start_x) // 2\n        else:\n            total += (end_x + 1 - start_x) // 2\n        if x % 2 == 1:\n            total += end_x - start_x\n        else:\n            total += (end_x + 1 - start_x)\n    return total\n\n\ndef"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = (int(x) for x in stdin.strip().split())\n    return str(x2 - x1 + 1 + y2 - y1 + 1)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split('\\n')[0].split())\n    return str(abs(x_2 - x_1) + abs(y_2 - y_1) - 1)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(' ')]\n    n = (y2 - y1 + 1) * (x2 - x1)\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            if (x2 - x1) % 2 == 0:\n                n -= (abs(x - x1) // 2 + abs(x2 - x) // 2) * (abs(y2 - y1) // 2 + abs(y - y1) // 2)\n            else:\n                n -= (abs(x - x1) // 2 + abs(x2 - x) // 2) * (abs(y2 - y1) // 2 + abs(y - y1) // 2 + 1)\n    return str(n)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    \n    print(int(abs((x_2 - x_1) / 2) * abs((y_2 - y_1) / 2) + abs((x_2 - x_1) / 2) + abs((y_2 - y_1) / 2)))\n    "
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    'Needs input'\n    return ''\n\n\ndef"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n4 4\\n1 3\\n3 1\\n\")\n    'YES'\n    >>> solution(\"8\\n4 4\\n2 3\\n1 6\\n\")\n    'NO'\n    >>> solution(\"8\\n3 5\\n1 2\\n6 1\\n\")\n    'NO'\n    \"\"\"\n    n, a, b, c = map(int, stdin.split('\\n'))\n    a -= 1\n    b -= 1\n    c -= 1\n    \n    if a == c:\n        if b == c:\n            return 'YES'\n        if b - 1 == c:\n            if b % 2 == 0:\n                return 'YES'\n            return 'NO'\n        if b + 1 == c:\n            if b % 2 == 0:\n                return 'YES'\n            return 'NO'\n    if a == b:\n        if c % 2 == 0:\n            return 'YES'\n        if c + 1 == a:\n            if c % 2 == 0:\n                return 'YES'\n            return 'NO'\n        if c - 1 == a:\n            if c % 2 == 0:\n                return 'YES'\n            return 'NO'\n        return 'NO'\n    if a == c + 1:\n        if a % 2 == 0:\n            return 'YES'\n        if a % 2!= 0:\n            return 'NO'\n    if a == c - 1:\n        if a % 2 == 0:\n            return 'YES'\n        if a % 2!= 0:\n            return 'NO'\n    if b == c + 1:\n        if b % 2 == 0:\n            return 'YES'\n        if b % 2!= 0:\n            return 'NO'\n    if b == c - 1:\n        if b % 2 == 0:\n            return 'YES'\n        if b % 2!= 0:\n            return 'NO'\n    return 'NO'\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n ..."
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds whether it is possible for Bob to move the king to the target square\"\"\"\n   ...\n\"\"\"\nWe need to solve the following problem:\n\nAlice is given the location of the queen, and the position of the king.\n\nShe determines whether it is possible for Bob to move the king to the position of the queen.\n\nShe knows that the king can move one space, so she can move the king to the square with the queen.\n\nShe knows that if the king is not in check, then it is possible to move the king to the queen's square.\n\nShe also knows that the king cannot be in the same position as the queen, so she will not have to take the same square.\n\nShe knows that the queen can only be in the same file or same rank as the king, so she will not have to move the queen.\n\nShe also knows that the king cannot be in the same square as the queen, so she will not have to move the queen.\n\nThe queen can only move one space in any direction, so she cannot move the queen if the king is in the same square as the queen.\n\nThe queen cannot be in the same rank or file as the king, so she can't move the queen if the king is in the same file or same rank.\n\nIf Alice can determine that it is possible for Bob to move the king to the queen's position, then she can decide whether Bob can win.\n\nShe can find whether the king is in check by checking whether it is in the same rank, file, or diagonal as the queen.\n\nIf the king is in check, then it is impossible for Bob to win.\n\nIf the king is not in check, then the queen can't move to the same square as the king, so it is possible to move the king to the queen's square.\n\nIf the king can move to the queen's square, then it is possible for Bob to win.\n\nSo we have to find whether it is possible for Alice to determine that it is possible for Bob to move the king to the queen's position.\n\nWe can solve this problem recursively.\n\nIf the king is in check, then Alice is not able to determine whether it is possible for Bob to move the king to the queen's position.\n\nIf the king is not in check, then Alice can determine whether it is possible for Bob to move the king to the queen's position.\n\nIf the king can move to the queen's position, then Alice can determine whether it is possible for Bob to win.\n\nIf the king can't move to the queen's position, then Alice cannot determine whether it is possible for Bob to win.\n\nAlice will return the result of the first step, and Alice can add the steps for the second step to the first step.\n\nIf Alice cannot determine whether it is possible for Bob to move the king to the queen's position, then Alice will return False.\n\nIf Alice can determine whether it is possible for Bob to move the king to the queen's position, then Alice will return True.\n\nTime complexity: O(3^n * n)\n\n\"\"\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given three integers n, a_x, a_y, b_x, b_y and c_x, c_y on a chessboard of size n \u00d7 n.\n    Determine whether the king can get from $(a_x, a_y)$ to $(b_x, b_y)$ without ever getting in check.\n\n    Returns:\n    \"YES\" if the king can get from $(a_x, a_y)$ to $(b_x, b_y)$ without ever getting in check,\n    \"NO\" if otherwise.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 4 4\n   ... 1 3\n   ... 3 1\n   ...\n   ... 2 3\n   ... 1 6\n   ... 6 1''')\n    'YES'\n    >>> solution('''8\n   ... 4 4\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6 1\n   ... 2 3\n   ... 1 6\n   ... 6"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(8, \"4 4\\n1 3\\n3 1\\n\")\n    YES\n    >>> solution(8, \"8 5\\n1 2\\n6 1\\n\")\n    NO\n    >>> solution(8, \"8 3\\n1 2\\n6 1\\n\")\n    NO\n    \"\"\"\n    n = int(stdin.readline())\n    queen = tuple(map(int, stdin.readline().split()))\n    king = tuple(map(int, stdin.readline().split()))\n    target = tuple(map(int, stdin.readline().split()))\n    moves = set()\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            x, y = queen\n            if i == x:\n                if j == y:\n                    moves.add((i, j))\n                    continue\n                moves.add((i, j))\n                moves.add((i, j + i))\n                moves.add((i, j - i))\n                continue\n            if j == y:\n                moves.add((i, j))\n                continue\n            moves.add((i, j))\n            moves.add((i + j, j + i))\n            moves.add((i - j, i + j))\n\n    if king in moves:\n        moves.remove(king)\n    if target in moves:\n        return \"YES\"\n    for i in moves:\n        if i in moves:\n            continue\n        moves.add(target)\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(0))\n    0\n    >>> solution(str(1))\n    1\n    >>> solution(str(2))\n    2\n    >>> solution(str(3))\n    4\n    >>> solution(str(4))\n    4\n    >>> solution(str(5))\n    8\n    >>> solution(str(6))\n    8\n    >>> solution(str(7))\n    16\n    >>> solution(str(8))\n    16\n    >>> solution(str(9))\n    32\n    >>> solution(str(10))\n    32\n    >>> solution(str(11))\n    64\n    >>> solution(str(12))\n    64\n    \"\"\"\n    n, *a = map(int, stdin.split(\"\\n\")[0].split())\n    a.sort()\n    lcm = 1\n    for i in range(n):\n        lcm = lcm * a[i] // math.gcd(lcm, a[i])\n    return lcm\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum value of the least common multiple of two elements in the array a.\"\"\"\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    lcm = 1\n    for x in range(1, len(a)):\n        lcm = lcm * a[x] // math.gcd(lcm, a[x])\n    return str(lcm)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the L.C.M. of the two given numbers.\"\"\"\n    a = [int(i) for i in stdin.splitlines()[0].split()]\n    assert len(a) == int(stdin.splitlines()[0].split()[0])\n    a.sort()\n    d = {}\n    c = 1\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] > a[j]:\n                c = a[i] * a[j]\n            else:\n                c = a[j] * a[i]\n            if c in d:\n                d[c].append([a[i], a[j]])\n            else:\n                d[c] = [[a[i], a[j]]]\n    ans = [0]\n    for i in d:\n        if len(d[i]) == 1:\n            ans.append(i)\n    ans.sort()\n    return str(ans[-1])\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().strip().split()))\n    a, b = [], []\n    for i in range(n):\n        for j in range(i, n):\n            if l[i] * l[j] % 2!= 0 and l[i] * l[j] not in a:\n                a.append(l[i] * l[j])\n    return max(a)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            b.append(lcm(a[i], a[j]))\n    return str(max(b))\n\n\ndef"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input: list of integers\n    output: integer\n    '''\n    a = [int(i) for i in stdin.split()]\n    res = None\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if res is None or gcd(a[i], a[j]) < res:\n                res = gcd(a[i], a[j])\n    return res\n\n\ndef"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(i) for i in stdin.split()]\n    berries = [list(map(int, stdin.split())) for i in range(n)]\n    return sum(max(k // sum(berries[i]), sum(berries[i]) // k) for i in range(n))\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Read input\n    n, k = [int(i) for i in stdin.split()]\n    shrub = [[int(i) for i in stdin.split()] for _ in range(n)]\n    # Solve problem\n    red, blue = 0, 0\n    for i in range(n):\n        red += sum(shrub[i][1::2])\n        blue += sum(shrub[i][::2])\n    return red // k + blue // k"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Not Possible\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    red, blue = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    max_basket = 0\n    # print(red, blue)\n\n    for i in range(red):\n        for j in range(blue):\n            if red >= blue:\n                # print(i, j, red)\n                if max_basket < (red / blue):\n                    max_basket = int(red / blue)\n\n    return str(max_basket)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    berries = [[0] * k] * n\n    for i in range(n):\n        r, b = map(int, stdin.split())\n        berries[i] = [r, b]\n    print(n, k)\n    print(berries)\n    return '0'\n\n\ndef"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get the input from stdin\n    n, k = [int(x) for x in stdin.splitlines()[0].split()]\n    \n    # Initialize the number of baskets to be 0\n    baskets = 0\n    \n    # Initialize the number of red and blue berries to be 0\n    red_berries = 0\n    blue_berries = 0\n    \n    # Iterate through the input to get the number of red and blue berries\n    for i in range(n):\n        red_berries, blue_berries = [int(x) for x in stdin.splitlines()[i + 1].split()]\n        \n        # Check if the number of red and blue berries is enough to fill the basket\n        # If the number of blue berries is greater than the number of red berries, then the basket cannot be filled\n        # Else, add the number of red and blue berries to the number of baskets\n        if blue_berries >= red_berries:\n            baskets += blue_berries // k\n            blue_berries %= k\n            baskets += blue_berries\n        else:\n            baskets += red_berries // k\n            red_berries %= k\n            baskets += red_berries\n    \n    # Return the number of baskets\n    return str(baskets)"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    r = []\n    b = []\n    for _ in range(n):\n        a, b_ = list(map(int, stdin.split()))\n        r.append(a)\n        b.append(b_)\n    r.sort()\n    b.sort()\n    i = 0\n    j = 0\n    cnt = 0\n    while i < len(r) and j < len(b):\n        if r[i] <= b[j]:\n            i += 1\n            cnt += 1\n        j += 1\n    return cnt\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(r'5 2\\n2 1\\n5 1\\n1 3')\n    2\n    >>> solution(r'1 5\\n2 3\\n1 3')\n    0\n    >>> solution(r'2 5\\n2 1\\n1 3')\n    500000000\n    \"\"\"\n    n, k = [int(i) for i in stdin.split()]\n    red = [int(i) for i in stdin.splitlines()]\n    blue = [int(i) for i in stdin.splitlines()]\n    red.sort(reverse=True)\n    blue.sort(reverse=True)\n    max_red = blue[0]\n    max_blue = red[0]\n    count = 0\n    total_red = 0\n    total_blue = 0\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if red[i] + total_blue < k:\n            total_red += red[i]\n            i += 1\n        elif blue[j] + total_red < k:\n            total_blue += blue[j]\n            j += 1\n        else:\n            i += 1\n            j += 1\n        if total_blue >= max_blue:\n            count += 1\n        if total_red >= max_red:\n            count += 1\n    return count\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('e')\n    a = int(stdin[0])\n    b = int(stdin[1])\n    \n    if a == 0:\n        return \"0\"\n    elif b == 0:\n        return str(a)\n    else:\n        if a == 9:\n            return \"9\"\n        else:\n            return str(a) + \".\" + \"0\" * b\n        \n        \n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    exp = stdin.split('e')\n    \n    if int(exp[0]) == 0:\n        return '0'\n    \n    if int(exp[1]) == 0:\n        return str(int(exp[0]))\n    \n    return str(int(exp[0])) + '.' + str(int(exp[1]))\n\n\nprint(solution(input()))"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from math import log10, floor\n\n    a, b, e = stdin.split(\".\")\n    e = e[:-1]\n    a, b, e = int(a), int(b), int(e)\n    result = a * 10 ** floor(log10(b) + e)\n    if result == 0:\n        return \"0\"\n    return str(result)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('e')\n    return str(int(a) * 10 ** int(b))\n\nprint(solution('8.549e2'))\nprint(solution('8.549e3'))\nprint(solution('0.33e0'))\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    In this solution, the regular expression is used for converting the input string into a number. Then that number is used to calculate the distance value.\n\n    '''\n\n    # Read the string of input\n    exp = r\"\\-?\\d*\\.\\d+|\\-?\\d+\"\n    stdin = stdin.split(r\"\\n\")[0]\n    res = re.match(exp, stdin).group()\n\n    # Convert string into float and calculate the distance value\n    res = float(res)\n\n    # Convert to int if possible\n    if res.is_integer():\n        return int(res)\n\n    # Convert to string if not int\n    res = str(res)\n\n    # Replace the decimal point with '.' and remove leading zeroes\n    res = res.replace(\".\", \"\")\n    if len(res) == 1:\n        res = res[0]\n\n    return res\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\".\", \"\")\n    a, b = stdin.split(\"e\")\n    a = int(a)\n    b = int(b)\n    b_num = b // pow(10, len(b))\n    if a == 0:\n        return str(b)\n    elif a == 1:\n        return str(b)\n    else:\n        return str(a) + str(b_num)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split('e')]\n    d = len(stdin.split('e')[1])\n    \n    ans = 10 ** (d - 1) * a + b\n    \n    return str(ans)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('.')\n    a = int(a)\n    b = int(b)\n    if a == 0:\n        return \"{}.{}\".format(a, b)\n    else:\n        return \"{}.{}\".format(a * 10 ** b, b)\n\n\ndef"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\".\")\n    a, b = float(a), int(b)\n    x = a * 10 ** b\n    return \"{:.0f}\".format(x) if x.is_integer() else \"{:.0f}\".format(x)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets maximum possible score after K moves from the input\"\"\"\n    N, K = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    P, C = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n    return str(sum([max(0, C - P) for P in [int(n) for n in stdin.split('\\n')[2].split(' ')]]))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, k = map(int, stdin.split(' '))\n    permutation = [i for i in range(1, n + 1)]\n    permutation = deque(permutation)\n    c = [int(i) for i in stdin.split(' ')]\n    c = deque(c)\n    score = 0\n    while k > 0:\n        permutation[0] = permutation.popleft()\n        c[0] = c.popleft()\n        if permutation[0] == 1:\n            score += c[0]\n        k -= 1\n    return score"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution passes all the tests\n    \"\"\"\n    N, K = map(int, stdin.split())\n    permutation = list(map(int, stdin.split()))\n    difference = [permutation[i]-i for i in range(N)]\n    scores = [0]\n    for i in range(N):\n        scores.append(scores[i] + difference[i])\n    for _ in range(K):\n        i = scores.index(max(scores))\n        scores[i] = 0\n        permutation[i] += 1\n        for j in range(i+1, N+1):\n            if j!= i+1 and permutation[j]!= j:\n                scores[j] += difference[i]\n    return str(max(scores))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"5 2\n   ... 2 4 5 1 3\n   ... 3 4 -10 -8 8\n   ... \"\"\")\n    '8'\n    \"\"\"\n   ..."
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    permutation = list(map(int, stdin.split(\" \")))\n    permutation_length = len(permutation)\n    c = list(map(int, stdin.split(\" \")))\n    permutation_dict = {}\n    for i in range(1, permutation_length + 1):\n        permutation_dict[i] = permutation[i - 1]\n\n    print(permutation_dict)\n\n\ndef"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for _ in range(m):\n        u, v, w = list(map(int, stdin.readline().strip().split()))\n        edges.append((u, v, w))\n    dist = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dist[i][i] = 0\n    for i in range(n):\n        for j in range(n):\n            for edge in edges:\n                if edge[0] == i and edge[1] == j:\n                    dist[i][j] = min(dist[i][j], edge[2])\n                if edge[1] == i and edge[0] == j:\n                    dist[i][j] = min(dist[i][j], edge[2])\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dist[i][j] > dist[i][k] + dist[k][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\n    return 'YES' if dist[s - 1][t - 1] <= 0 else 'NO'\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return ''\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n----Test cases----\n\"\"\"\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    roads = [[int(i) for i in stdin.split(\"\\n\")[i].split()] for i in range(m)]\n    def dfs(s, t):\n        dp = [[float('inf')] * n for _ in range(n)]\n        for a, b, d in roads:\n            dp[a - 1][b - 1] = d\n            dp[b - 1][a - 1] = d\n        dp[s - 1][t - 1] = 0\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    if dp[i][k]!= float('inf') and dp[k][j]!= float('inf') and dp[i][j] > dp[i][k] + dp[k][j]:\n                        dp[i][j] = dp[i][k] + dp[k][j]\n        return dp[s - 1][t - 1] >= 0\n    res = [dfs(i, j) for i, j in roads]\n    if all(res):\n        return \"YES\\n\" + str(max(roads, key=lambda x: x[2]))\n    res.extend([dfs(i, j) for i, j in roads if res[i - 1] and res[j - 1]])\n    return \"YES\\n\" + str(max(roads, key=lambda x: x[2])) if res else \"NO\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for _ in range(n - 1):\n        edges.append(tuple(map(int, stdin.split())))\n    print(max(min_path_sum(edges), 0))\n\n\ndef"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1:]))\n    adjacency_list = {}\n    for i in range(n):\n        if i not in adjacency_list:\n            adjacency_list[i] = set()\n        adjacency_list[i].add(a[i])\n        adjacency_list[i].add(a[i - 1])\n    num_edges = 0\n    for edge in adjacency_list.values():\n        num_edges += len(edge)\n    if num_edges % 2!= 0:\n        print(0)\n        return\n    num_edges /= 2\n    vertex = set()\n    edges = set()\n    for edge in adjacency_list.values():\n        for vertex_1 in edge:\n            for vertex_2 in edge:\n                if vertex_1!= vertex_2:\n                    edges.add((vertex_1, vertex_2))\n    for i in range(len(edges)):\n        vertex.add(edges[i][0])\n        vertex.add(edges[i][1])\n    vertex = list(vertex)\n    def dfs(vertex):\n        if len(vertex) == 1:\n            return 0\n        vertex.sort()\n        s = set()\n        for i in range(len(vertex) - 1):\n            for j in range(i + 1, len(vertex)):\n                s.add((vertex[i], vertex[j]))\n        return len(s)\n\n    print(max([dfs(set(vertex[:i] + vertex[i + 1:])) for i in range(len(vertex))]))\n    return\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1 - 388 ms\n    '''\n    t = int(stdin)\n    l = [[int(y) for y in x.split()] for x in stdin.strip().split('\\n')]\n    l = [[x, y] for [x, y] in l if x!= y]\n    res = 0\n    for i in range(t - 1):\n        a, b = l[i]\n        for j in range(i + 1, t):\n            if l[j][0] in [a, b] or l[j][1] in [a, b]:\n                res += j - i\n                l[i], l[j] = l[j], l[i]\n                break\n    return str(res)\n    '''\n\n    # Solution 2 - 256 ms\n    t = int(stdin)\n    l = [[int(y) for y in x.split()] for x in stdin.strip().split('\\n')]\n    l = [[x, y] for [x, y] in l if x!= y]\n    res = 0\n    while len(l) > 1:\n        a, b = l.pop()\n        res += a + b\n        for i, j in l:\n            if a in [i, j] or b in [i, j]:\n                res -= min(a, b)\n                l.append([min(a, b), max(a, b)])\n                break\n    return str(res)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The idea is to use dfs to find the maximum distance from any leaf to the root. \n    We will store the distance of each node in a dictionary.\n    After that we will use this dictionary to find the maximum distance. \n    This maximum distance is equal to the maximum distance from any leaf to the root.\n\n    After the distance is calculated from the leaves to the root, we will need to \n    find the path that brings us to this distance. \n    We will use a list and a visited dict to find this path.\n    We will start from the leaf with the maximum distance, and will find all the parent \n    nodes that way, until we find the root, which is the last element in the path. \n    The path will be reversed after the end of the recursive call, since we started from \n    the leaf.\n\n    Time complexity: O(V + E), where V - number of vertices and E - number of edges.\n    Space complexity: O(V), where V - number of vertices.\n\n    :param stdin: standard input string\n    :return: None\n    '''\n    n = int(stdin)\n    l = []\n    d = {}\n    for i in range(n):\n        l.append(stdin.split())\n\n    def dfs(node, parent):\n        if d.get(node):\n            return d[node]\n        if parent == -1:\n            d[node] = 0\n            return 0\n        d[node] = 1 + dfs(l[parent][0], l[parent][1])\n        if d.get(l[parent][0]):\n            d[node] += d[l[parent][0]]\n        if d.get(l[parent][1]):\n            d[node] += d[l[parent][1]]\n        return d[node]\n\n    for i in range(n):\n        dfs(l[i][0], i)\n        dfs(l[i][1], i)\n\n    m = 0\n    for i in d.values():\n        if i > m:\n            m = i\n\n    def dfs_reverse(node, parent):\n        if d.get(node):\n            return d[node]\n        if parent == -1:\n            d[node] = 0\n            return 0\n        d[node] = 1 + dfs_reverse(l[parent][0], parent)\n        if d.get(l[parent][0]):\n            d[node] += d[l[parent][0]]\n        if d.get(l[parent][1]):\n            d[node] += d[l[parent][1]]\n        return d[node]\n\n    for i in range(n):\n        dfs_reverse(l[i][0], i)\n        dfs_reverse(l[i][1], i)\n\n    m = 0\n    for i in d.values():\n        if i > m:\n            m = i\n\n    l = []\n    for i in d.keys():\n        if d[i] == m:\n            l.append(i)\n\n    l.sort()\n    ans = []\n    for i in range(len(l) - 1):\n        ans.append('{} {}'.format(l[i], l[i + 1]))\n    ans.append('{} {}'.format(l[-1], l[0]))\n    return ans\n\n\ndef"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n, m = list(map(int, stdin.split(\" \")))\n    tree = [0 for _ in range(n + 1)]\n    edges = []\n    for _ in range(m):\n        x, y = list(map(int, stdin.split(\" \")))\n        edges.append((x, y))\n\n    for i in range(m):\n        a, b = edges[i]\n        tree[a] += 1\n        tree[b] += 1\n\n    stack = [i for i in range(n) if tree[i] == 1]\n\n    tree_dict = {}\n    for i in range(len(tree)):\n        tree_dict[i] = []\n\n    for edge in edges:\n        a, b = edge\n        tree_dict[a].append(b)\n        tree_dict[b].append(a)\n\n    visited = [False for _ in range(n + 1)]\n    parent = [None for _ in range(n + 1)]\n\n    def dfs(node):\n        visited[node] = True\n        for child in tree_dict[node]:\n            if not visited[child]:\n                parent[child] = node\n                dfs(child)\n\n    dfs(stack.pop())\n\n    max_answer = 0\n\n    def dfs_2(node, answer):\n        nonlocal max_answer\n        if node == None:\n            return\n        if answer > max_answer:\n            max_answer = answer\n        visited[node] = True\n        for child in tree_dict[node]:\n            if not visited[child]:\n                dfs_2(child, answer + abs(parent[node] - child))\n\n    dfs_2(parent[1], 0)\n\n    print(max_answer)\n\n    return \"\"\n\n\nsolution(stdin=\"\")"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds max possible sum in tree.\"\"\"\n    n = int(stdin.readline())\n    graph = {}\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        graph[a] = graph.get(a, []) + [b]\n        graph[b] = graph.get(b, []) + [a]\n\n    queue = [1]\n    cur_sum = 0\n    max_sum = 0\n    visited = set()\n    visited.add(1)\n    while queue:\n        cur_node = queue.pop(0)\n        cur_sum += cur_node\n        if max_sum < cur_sum:\n            max_sum = cur_sum\n\n        for neighbour in graph.get(cur_node, []):\n            if neighbour not in visited:\n                queue.append(neighbour)\n                visited.add(neighbour)\n    print(max_sum)\n\n    return''.join(str(x) for x in max_sum)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    categories, category_sizes = [int(x) for x in input.split('\\n')[0].split()]\n    time_limit = [int(x) for x in input.split('\\n')[1].split()]\n\n    def binary_search(left, right, target):\n        if left > right:\n            return left\n        middle = (left + right) // 2\n        if target <= category_sizes[middle]:\n            return binary_search(left, middle - 1, target)\n        else:\n            return binary_search(middle + 1, right, target)\n    \n    answer = 0\n    for category_size in time_limit:\n        if category_size == category_sizes[binary_search(0, categories - 1, category_size)]:\n            continue\n        else:\n            answer += category_size\n    return str(answer)"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_input(n: int) -> Tuple[List[int], List[int]]:\n        x, y = stdin.split('\\n')\n        x = list(map(int, x.split(' ')))\n        y = list(map(int, y.split(' ')))\n        return x, y\n\n    def compare_arrays(a: List[int], b: List[int]) -> int:\n        if len(a) == 0:\n            return 0\n        return sum([1 if a[i]!= b[i] else 0 for i in range(len(a))])\n\n    x, y = get_input(int(stdin.split('\\n')[0]))\n    print(sum(compare_arrays(x, y)))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    m = [int(x) for x in stdin.readline().strip().split(' ')]\n    t = [int(x) for x in stdin.readline().strip().split(' ')]\n    result = 0\n    for i in range(n):\n        result += m[i] * (m[i] + 1) / 2 * t[i]\n    return int(result)\n\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    t = list(map(int, stdin.readline().strip().split()))\n    \n    min_time = 0\n    for i in range(n):\n        min_time += max(t) * a[i]\n        \n    return min_time\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ''' solution '''\n    n = int(stdin.readline().strip())\n    a, t = [int(i) for i in stdin.readline().strip().split()], [int(i) for i in stdin.readline().strip().split()]\n    s = sum(t)\n    m = min(n - (s > 0), max(0, s))\n    return str(m)\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n    min_time = N\n    for i in range(N):\n        if t[i] < min_time:\n            min_time = t[i]\n    print(min_time)"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {} {}'.format(\n        stdin.count('(') - stdin.count(')'),\n        stdin.index('(') + 1,\n        stdin.index(')') + 1,\n    )\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin[0])\n    s = stdin[1:]\n    l, r = 0, 1\n    s = s + s\n    l_min = r_max = 0\n    l_min = min(l_min, s[l:l+n].find(\"()\"))\n    r_max = max(r_max, s[r:r+n].rfind(\"()\"))\n    while l_min > r_max:\n        l_max = max(l_max, s[l:l+n].rfind(\"()\"))\n        r_min = min(r_min, s[r:r+n].find(\"()\"))\n        l_min = min(l_min, s[l:l+n].find(\"()\"))\n        r_max = max(r_max, s[r:r+n].rfind(\"()\"))\n        l = l_max + 1\n        r = r_min\n    return l_min + r_max + 2\n\ndef"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    assert len(stdin) == int(stdin[0]) + 1\n    string = stdin[1:]\n    i = 0\n    while i < len(string):\n        j = i + 1\n        while j < len(string):\n            if string[i] == \"(\" and string[j] == \")\":\n                s = string[i + 1: j]\n                if s[::-1] == s:\n                    string = string[:i] + string[j] + string[i + 1: j] + string[i] + string[j + 1:]\n                else:\n                    j = j + 1\n            else:\n                j = j + 1\n        i = i + 1\n    return string\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, brackets = len(stdin), stdin\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        if brackets[i - 1] == \")\":\n            if brackets[i - 2] == \"(\":\n                dp[i] = dp[i - 1] + dp[i - 2]\n            else:\n                dp[i] = dp[i - 2] + 1\n        elif brackets[i - 1] == \"(\":\n            dp[i] = dp[i - 1]\n    return max(dp[1:n + 1])\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    open_brackets = stdin[:n]\n    closed_brackets = stdin[n:]\n    max_shift = 0\n    best_start_idx = 0\n    best_end_idx = 0\n    for start_idx in range(0, n - 1):\n        for end_idx in range(start_idx + 2, n + 1):\n            shift = calculate_shift(open_brackets, closed_brackets, start_idx, end_idx)\n            if shift > max_shift:\n                best_start_idx = start_idx\n                best_end_idx = end_idx\n                max_shift = shift\n    return str(max_shift) +'' + str(best_start_idx) +'' + str(best_end_idx)\n\n\ndef"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    brackets = stdin[1]\n    previous_brackets = brackets\n    current_brackets = brackets\n    while len(brackets) < n:\n        brackets += previous_brackets\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            j = i\n            while j < n and brackets[j]!= \")\":\n                j += 1\n            if j == n:\n                return 0\n            if j < n:\n                current_brackets = brackets[:i] + brackets[j] + brackets[i + 1:j] + brackets[i] + brackets[j + 1:]\n                if current_brackets == previous_brackets:\n                    return i + 1\n                previous_brackets = current_brackets\n    return 0"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(()())()\")\n    5\n    >>> solution(\"()(()())()\")\n    4\n    >>> solution(\"))(()\")\n    0\n    >>> solution(\"))(())(\")\n    1 1\n    >>> solution(\"(()(()))\")\n    8\n    >>> solution(\"(()(()()))\")\n    8\n    >>> solution(\"(()())()(())\")\n    8\n    >>> solution(\"(()())())(())\")\n    8\n    \"\"\"\n    bracket_string = stdin\n    num_brackets = len(bracket_string)\n    cyclical_shifts = [None] * num_brackets\n\n    for idx in range(num_brackets):\n        if cyclical_shifts[idx]:\n            continue\n        if idx > 0 and bracket_string[idx - 1] == \")\":\n            for nxt_idx in range(idx + 1, num_brackets):\n                if bracket_string[nxt_idx] == \")\":\n                    cyclical_shifts[idx] = nxt_idx - idx\n                    cyclical_shifts[nxt_idx] = num_brackets - idx\n                    break\n                cyclical_shifts[idx] = nxt_idx - idx\n                break\n        if idx < num_brackets - 1 and bracket_string[idx + 1] == \"(\":\n            for prev_idx in range(idx - 1, -1, -1):\n                if bracket_string[prev_idx] == \"(\":\n                    cyclical_shifts[idx] = prev_idx - idx\n                    cyclical_shifts[prev_idx] = idx - prev_idx\n                    break\n                cyclical_shifts[idx] = prev_idx - idx\n                break\n\n    res_idx = cyclical_shifts.index(max(cyclical_shifts))\n    return (\n        res_idx + 1 + cyclical_shifts[res_idx + 1],\n        res_idx - cyclical_shifts[res_idx],\n    )\n\n\ndef"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.replace('()', '')\n    if not l:\n        return 0\n    brackets = [c for c in l]\n    dp = [[0] * len(brackets) for _ in range(len(brackets))]\n    for r in range(len(brackets)):\n        for c in range(r, len(brackets)):\n            if r == c:\n                dp[r][c] = 0\n            elif brackets[r] == brackets[c]:\n                dp[r][c] = dp[r][c - 1] + 2 if c - 1 >= 0 else 2\n            else:\n                dp[r][c] = max(dp[r - 1][c], dp[r][c - 1]) if r - 1 >= 0 else dp[r][c - 1]\n    return dp[-1][-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    answer = []\n    \n    return answer\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    if stdin.count(\"(\")!= stdin.count(\")\"):\n        return 0, 0\n    \n    res = []\n    stack = []\n    for i in range(len(stdin)):\n        if stdin[i] == \"(\":\n            stack.append(i)\n        elif stdin[i] == \")\":\n            res.append(i)\n            stack.pop()\n    \n    if not stack:\n        return max(res) - min(res) + 1, len(res)\n    else:\n        return 0, 0"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    left, right = stdin[1].split(stdin[0]), stdin[0].split(\"(\")\n    res = 0\n    temp = 0\n    for i in range(len(left)):\n        left[i] = list(left[i])\n        temp = len(left[i])\n        for j in range(len(left[i])):\n            if left[i][j] == '(':\n                left[i][j] = '1'\n            elif left[i][j] == ')':\n                left[i][j] = '0'\n        if ''.join(left[i]) not in right:\n            res = max(res, temp)\n    return str(res) + \" \" + str(len(right))\n\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    s = stdin[0].split('_')\n    for i in range(len(s)):\n        if s[i].find('(')!= -1:\n            start = s[i].find('(')\n            end = s[i].find(')')\n            s[i] = s[i][:start] + s[i][end + 1:]\n    n = len(s)\n    arr = []\n    for i in range(n):\n        for j in range(len(s[i])):\n            if s[i][j] == '(':\n                arr.append(j)\n            if s[i][j] == ')':\n                arr.append(j)\n    arr.sort()\n    arr.append(len(s[0]))\n    arr.insert(0,0)\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] == 0:\n                continue\n            else:\n                print(len(s[0]) - arr[i] + 1)\n        elif arr[i] == 0:\n            if i == len(arr) - 1:\n                continue\n            else:\n                print(arr[i + 1] - arr[i] - 1)\n        else:\n            if i == len(arr) - 1:\n                continue\n            else:\n                print(arr[i + 1] - arr[i] - 1)\n\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the longest word outside of parentheses and number of words inside parentheses\n    >>> solution(\"37 _Hello_Vasya(and_Petya)__bye_(and_OK)\")\n    5 4\n    >>> solution(\"37 _a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\")\n    2 6\n    >>> solution(\"27 (LoooonG)__shOrt__(LoooonG)\")\n    5 2\n    \"\"\"\n    # Remove all punctuation from the input string\n    # Remove all parentheses\n    # Turn everything else into a single string\n    # Find the longest word\n    # Get the number of words\n    stdin = stdin.translate(str.maketrans(dict.fromkeys(string.punctuation)))\n    removed_parens = stdin.translate(str.maketrans(\"\", \"\", \"()\"))\n    joined = \"\".join(c for c in removed_parens if c.isalpha() or c == \" \")\n    words = joined.split()\n    max_len = 0\n    count = 0\n    for word in words:\n        if word.count(\"(\") == 0 and word.count(\")\") == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                count = 1\n            elif len(word) == max_len:\n                count += 1\n    return max_len, count\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the longest word outside parentheses\n    \"\"\"\n    # data = stdin.split('\\n')\n    # data = data[1:]\n    # print(data)\n    data = stdin.split('\\n')\n    data = data[1:]\n    # print(data)\n    stack = []\n    index = 0\n    res = []\n    for i in range(len(data)):\n        index = 0\n        for j in range(len(data[i])):\n            if data[i][j] == '(':\n                stack.append('(')\n            elif data[i][j] == ')':\n                if len(stack) > 0 and stack[-1] == '(':\n                    stack.pop()\n                    index += 2\n                else:\n                    stack.append(')')\n        if len(stack) > 0:\n            res.append(i)\n    print(res)\n    return res\n\n\nprint(solution(stdin))\n\n\"\"\"\ndef"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    c = 0\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == '(' or stdin[i] == ')':\n            count += 1\n        if stdin[i] == '(' and c == 0:\n            c += 1\n            count -= 1\n        if stdin[i] == ')' and c > 0:\n            c -= 1\n            count += 1\n    return str(max(count, c))\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = {\n        '#': 0,\n        '(': 0,\n        '{': 0,\n        '[': 0,\n        '|': 0\n    }\n    paren = []\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == '(':\n            paren.append('(')\n        elif stdin[i] == ')':\n            if len(paren) > 0:\n                paren.pop()\n            else:\n                result['#'] += 1\n        elif stdin[i] == '{':\n            paren.append('{')\n        elif stdin[i] == '}':\n            if len(paren) > 0:\n                paren.pop()\n            else:\n                result['#'] += 1\n        elif stdin[i] == '[':\n            paren.append('[')\n        elif stdin[i] == ']':\n            if len(paren) > 0:\n                paren.pop()\n            else:\n                result['#'] += 1\n        elif stdin[i] == '|':\n            if len(paren) > 0:\n                paren.pop()\n            else:\n                result['#'] += 1\n        i += 1\n    print(result)\n    if result['#'] == 0:\n        return '0 0'\n    result['#'] -= 1\n    result['{'] += result['(']\n    result['}'] += result[')']\n    result['['] += result['(']\n    result[']'] += result[')']\n    result['|'] += result['(']\n    result['|'] += result[')']\n    print(result)\n    if result['{'] == 0 and result['}'] == 0 and result['['] == 0 and result[']'] == 0 and result['|'] == 0:\n        return '0 0'\n    max_count = 0\n    max_count_key = '#'\n    for key in result:\n        if result[key] > max_count:\n            max_count = result[key]\n            max_count_key = key\n    return f'{max_count}{max_count_key}'\n\n\ndef"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find longest word outside parentheses and the number of words inside them\"\"\"\n    return (\n        max(stdin.split(\"_\")),\n        len(\n            [\n                word\n                for word in stdin.split(\"_\")\n                if (\n                    word.count(\"(\") == word.count(\")\")\n                    and word.count(\"(\")!= 0\n                    and word.count(\")\")!= 0\n                )\n            ]\n        )\n    )\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n   ...\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # create a dict of {min: list of values}\n    # here min is the smallest value of the subarray, and the list is the sequence of values in that subarray\n    data = dict()\n    for i in range(int(stdin[0])):\n        data[stdin[1 + i]] = stdin[2 + i]\n    \n    values = list(data.values())\n    values.sort()\n\n    # create subarrays of the list values\n    sublists = [[] for i in range(len(values))]\n    for i in range(len(values)):\n        sublists[i].append(values[i])\n\n    # create the correct form of subarrays\n    subarrays = []\n    for i in range(len(values)):\n        for j in range(len(sublists[i])):\n            subarrays.append(sublists[i][j:j + int(stdin[0])])\n\n    # now calculate the number of subarrays\n    subarrays.sort()\n    return len(subarrays)"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c a[i] \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e 10^9\n    # \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c b[i] \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e 10^9\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    \n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n    # \u041f\u0440\u0438\u043c\u0435\u0440 [[1, 2, 3], [4, 5, 6],...]\n    # \u0422.\u0435. \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430 \u044d\u0442\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f\n    combinations = []\n\n    # \u0414\u043b\u0438\u043d\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    n = len(a)\n    m = len(b)\n    \n    # \u0414\u043b\u0438\u043d\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432\n    min_len = min(n, m)\n    \n    # \u0423\u0447\u0435\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439, \u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0432\u043d\u043e \u0434\u0440\u0443\u0433\u043e\u043c\u0443\n    if n == m:\n        min_len -= 1\n    \n    # \u0412\u044b\u0432\u043e\u0434 \u043d\u0443\u043b\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f\n    if min_len == 0:\n        return \"0\"\n    \n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f\u043c\u0438\n    for i in range(min_len):\n        combinations.append([a[i], b[i]])\n        if i + 1 < min_len:\n            combinations.append([a[i], b[i + 1]])\n    \n    # \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f\n    combinations = sorted(combinations)\n    \n    # \u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439\n    result = 1\n    for i in range(min_len):\n        result = result * combinations[i][1]\n    \n    return str(result % 998244353)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    An integer\n    \"\"\"\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    b_dict = {b[i]: i for i in range(len(b))}\n    cnt = 0\n    for i in range(len(a)):\n        if b_dict.get(a[i]) is not None:\n            cnt += 1\n            if i + 1 >= len(a):\n                break\n            while b_dict.get(a[i + 1]) is not None:\n                cnt += 1\n                a[i + 1] += 1\n                if b_dict.get(a[i + 1]) is not None:\n                    cnt += 1\n                else:\n                    break\n    return cnt % 998244353\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = [[a[i], b[i], a[i] - b[i]] for i in range(m)]\n    c.sort(key=lambda x: x[2])\n    f = [0] * n\n    f[0] = 1\n    for i in range(m):\n        for j in range(n):\n            if c[i][0] >= a[j] and c[i][1] <= a[j]:\n                f[j] += f[j - 1]\n    return f[n - 1] % 998244353\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ... \"6 3\\n\"\n   ... \"12 10 20 20 25 30\\n\"\n   ... \"10 20 30\\n\")\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n\n    res = 0\n    i = 0\n    while i < n:\n        j = 0\n        while j < m and b[j] < a[i]:\n            j += 1\n        res += j\n        i += 1\n\n    return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, m = (int(c) for c in stdin.split(' '))\n    a, b = [0] + a[:n], b[:m]\n    a = [0] + list(accumulate(a))\n    m = len(b)\n    dp = [[0] * (a[-1] + 1) for _ in range(m + 1)]\n    for i in range(m):\n        dp[i + 1][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, a[-1] + 1):\n            if a[i - 1] <= j:\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - a[i - 1]]) % 998244353\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[m][b[0]]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split('\\n')\n    n, m = int(n), int(m)\n    a = stdin.split('\\n')[1]\n    a = list(map(int, a.split()))\n    b = stdin.split('\\n')[2]\n    b = list(map(int, b.split()))\n\n    a = [0] + a\n    b = [0] + b\n\n    count = 0\n\n    for i in range(1, m + 1):\n        sorted_a = sorted(a[:i + 1])\n        sorted_b = sorted(b[:i + 1])\n        for j in range(i + 1):\n            if sorted_a[j] == sorted_b[j]:\n                count += 1\n                break\n\n    return count % 998244353"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get number of ways to split the array, following the constraints from problem statement\n    :param stdin: stdin from codewars\n    :return: number of ways to split the array\n    \"\"\"\n    a, b = [int(i) for i in stdin.split()]\n    return 0\n\ndef"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solve the problem.\n\n    Parameters\n    ----------\n    stdin : str\n        input\n\n    Returns\n    -------\n    str\n        output\n\n    \"\"\"\n    n, m = [int(i) for i in stdin.split(\" \")]\n    a = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    b = [int(i) for i in stdin.split(\"\\n\")[2].split(\" \")]\n\n    for i in range(len(b)):\n        if a.index(min(a)) <= i:\n            return i\n    return 0\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split()[0])\n    k = int(lines[0].split()[1])\n    return str(count_boards(n, k))\n\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    return str(pow(2, (n * k), 998244353))\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n\n    def color(board, i, j):\n        colors = set()\n        for di in range(-k, k+1):\n            for dj in range(-k, k+1):\n                if di == 0 and dj == 0:\n                    continue\n                if 0 <= i+di < n and 0 <= j+dj < n:\n                    if board[i+di][j+dj] == board[i][j]:\n                        colors.add(board[i][j])\n                    else:\n                        if board[i][j] not in colors:\n                            return False\n        return True\n\n    def count_colorings(board):\n        if len(board) == 1 and len(board[0]) == 1:\n            return 1\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if color(board, i, j):\n                    count += 1\n        return count\n\n    def brute_force(board):\n        return count_colorings(board)\n\n    def try_next(board):\n        next_board = copy.deepcopy(board)\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'w':\n                    next_board[i][j] = 'b'\n                else:\n                    next_board[i][j] = 'w'\n        return next_board\n\n    def recursive_solution(board, depth, max_depth):\n        if depth == max_depth:\n            return brute_force(board)\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'w':\n                    next_board = try_next(board)\n                    count += recursive_solution(next_board, depth + 1, max_depth)\n        return count\n\n    return str(recursive_solution(board, 0, n))\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \" \".join(map(str, range(n ** 2 - k + 1, n ** 2 + 1)))\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def fact(n: int) -> int:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return n\n        else:\n            return n * fact(n - 1)\n\n    num_rows, num_cols = [int(n) for n in stdin.split()]\n\n    def num_colorings(row: int, col: int) -> int:\n        row_diff = row - 1\n        col_diff = col - 1\n        if row_diff < 0 or col_diff < 0:\n            return 1\n        return fact(row_diff * col_diff) % MOD\n\n    num_total_colorings = 0\n    for row in range(1, num_rows + 1):\n        for col in range(1, num_cols + 1):\n            num_total_colorings = (num_total_colorings + num_colorings(row, col)) % MOD\n\n    return str(num_total_colorings)\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem:\n    \"\"\"\n    n, k = map(int, stdin.split())\n    ans = 0\n    \n    return str(ans)\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    scores = {}\n    for i in range(1, N+1):\n        t, d = map(int, stdin.split())\n        scores[i] = d\n    scores = sorted(scores.items(), key=lambda item: item[1])\n    print(scores)\n    ans = 0\n    for i in range(K):\n        ans += scores[i][1]\n    return ans\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximal sum of a**2, where a is the number of elements\n    in a list of integers.\n\n    Args:\n        stdin (str): The input from stdin\n\n    Returns:\n        str: The maximal sum of a**2, where a is the number of elements\n        in a list of integers.\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n\n    # We'll populate the list of k items\n    # according to our input.\n    items = []\n\n    for _ in range(k):\n        item = list(map(int, stdin.split()))\n        items.append(item)\n\n    # We'll start by appending each element of the first item.\n    # This will be the list of 1 element lists.\n    sorted_items = [items[0][0]]\n\n    for item in items[1:]:\n        sorted_items.append(item[1])\n\n    sorted_items.sort()\n\n    i = 0\n    current_sum = 0\n    sorted_items_len = len(sorted_items)\n\n    while i < sorted_items_len:\n        if i + 1 < sorted_items_len:\n            current_sum += sorted_items[i + 1]\n            i += 2\n        else:\n            current_sum += sorted_items[i]\n            i += 1\n\n        if i == k:\n            break\n\n    return current_sum\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum sum of the base total deliciousness and the varity bonus\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    s = 0\n    t = 0\n    for i in range(k):\n        a, b = [int(x) for x in stdin.split()]\n        s += a\n        t += b\n    print(s*s + t*t)\n    return s*s + t*t\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    toppings = []\n    for _ in range(n):\n        t, d = [int(x) for x in stdin.split(' ')]\n        toppings.append((t, d))\n    toppings.sort()\n\n    toppings_dict = {}\n    max_satisfaction = 0\n    for i in range(len(toppings)):\n        t, d = toppings[i]\n        if t in toppings_dict.keys():\n            toppings_dict[t] += d\n        else:\n            toppings_dict[t] = d\n\n        max_satisfaction += d\n        for j in range(i + 1, len(toppings)):\n            t2, d2 = toppings[j]\n            if t!= t2:\n                max_satisfaction -= d2\n                break\n\n    for t, d in toppings:\n        max_satisfaction += d * d\n\n    return max_satisfaction"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 9\n   ... 1 7\n   ... 2 6\n   ... 2 5\n   ... 3 1''')\n    '26'\n    \"\"\"\n   ...\n    k, n = map(int, stdin.strip().split())\n    t, d = [0] * k, [0] * k\n    for _ in range(n):\n        t[i], d[i] = map(int, stdin.strip().split())\n    return str(sum(d) + sum(t) * sum(t) - min(t) * min(t))\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Enter your code here. Read input from STDIN. Print output to STDOUT\"\"\"\n    N, K = map(int, stdin.split('\\n')[0].split(' '))\n    L = list(map(int, stdin.split('\\n')[1:][0].split(' ')))\n    L.sort(reverse=True)\n    return max([sum(L[:x])+x*x for x in range(1, K+1)])\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x: int = 0\n    y: int = 0\n    n: int = 0\n    # Get data from standard input\n    n = int(stdin.readline().rstrip())\n    for i in range(n):\n        x, y = map(int, stdin.readline().rstrip().split())\n        x += y\n        y += x\n        x, y = y, x\n    return str(x ** 0.5)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass  # TODO: edit this line"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    stdin: standard input string\n\n    Output:\n    stdout: standard output string\n    '''\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    pos = []\n    for i in range(1, N+1):\n        x, y = list(map(int, lines[i].split(' ')))\n        pos.append((x, y))\n    \n    max_dist = 0\n    for i in range(N):\n        dist = 0\n        for j in range(i, N):\n            x_dif, y_dif = pos[j][0]-pos[i][0], pos[j][1]-pos[i][1]\n            dist += x_dif**2 + y_dif**2\n            if dist > max_dist:\n                max_dist = dist\n    \n    return str(round(math.sqrt(max_dist), 10))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. get N from stdin\n    2. calculate the distance\n    3. return the answer\n\n    \"\"\"\n\n    N = int(stdin)\n    d = 0\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        d += max(x, y)\n    return str(math.sqrt(d))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum final distance\"\"\"\n    # Get data\n    data = [item.split() for item in stdin.split('\\n') if item]\n    n = int(data[0][0])\n    x_coord = [int(item[0]) for item in data[1:n + 1]]\n    y_coord = [int(item[1]) for item in data[1:n + 1]]\n\n    # Calculate result\n    distance = 0\n    for index in range(n):\n        distance += x_coord[index] ** 2 + y_coord[index] ** 2\n    distance = distance ** 0.5\n\n    return str(distance)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3\n   ... 0 10\n   ... 5 -5\n   ... -5 -5''')\n    10.0\n    '''\n    a, b = stdin.strip().split('\\n')[1:3]\n    a, b = [list(map(int, row.split(' '))) for row in [a, b]]\n    # [print(row) for row in [a, b]]\n    # [print(c) for c in [0, 10]]\n    d = []\n    for e in [a, b]:\n        # print(e)\n        d.append([sqrt(i ** 2 + j ** 2) for i, j in zip(e, [0, 0])])\n        # print(d)\n    return str(max([max(row) for row in d]))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a program that prints the maximum possible distance\n    from the origin in a two-dimensional plane.\n\n    :param stdin: str.\n    :return: str.\n    \"\"\"\n    pass"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution\"\"\"\n    # Get the number of the engines\n    engines = stdin.splitlines()[0].split(\" \")\n    # Set the initial point to 0, 0\n    x, y = 0, 0\n    # Set the maximum distance to 0\n    max_distance = 0\n    # Iterate over the number of engines\n    for i, engine in enumerate(engines, start=1):\n        # Iterate over the coordinates of the current engine\n        for x_, y_ in [[int(x_), int(y_)] for x_, y_ in [coord.split(\" \") for coord in engine.split(\":\")]]:\n            # Check if the coordinate is greater than the maximum distance\n            if (x + x_) ** 2 + (y + y_) ** 2 > max_distance:\n                # Update the maximum distance if needed\n                max_distance = (x + x_) ** 2 + (y + y_) ** 2\n    # Return the maximum distance\n    return str(max_distance ** 0.5)\n\n\ndef"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and calculate the maximum distance from the origin.\"\"\"\n    inp = [i for i in stdin.split('\\n') if i]\n    n = int(inp[0])\n    coords = [tuple(map(int, i.split())) for i in inp[1:]]\n    dist = 0\n    for x, y in coords:\n        dist = max(dist, x ** 2 + y ** 2)\n    return str(dist ** 0.5)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # read the input\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    y = list(map(int, stdin.readline().strip().split()))\n    # initialize the result\n    result = 0\n    # loop through all the engines\n    for i in range(n):\n        # compute the distance\n        result += math.sqrt(x[i]**2 + y[i]**2)\n    # return the result\n    return str(round(result, 10))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds all the codes that match the given hint\"\"\"\n    return str(number_of_variants(stdin))\n\n\ndef"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    # write your code in Python 3.6\n    return ''\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    n = len(s)\n    return str(n**3)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for Day 3, AoC 2020.\n    '''\n\n    # Get input\n    s = stdin\n\n    # Part 1.\n    return 'Part 1: {}'.format(part1(s))\n\n\ndef"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    total = 0\n    for i in range(1, 10):\n        total += i * int(s.replace('?', str(i)))\n    return total"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # _, pattern = stdin.split()\n    # print(len(find_all(pattern)))"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n\n    if sorted(arr) == arr:\n        return '0'\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n            break\n    else:\n        arr[0], arr[1] = arr[1], arr[0]\n\n    return''.join(map(str, arr))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    dic = {}\n    for num in arr:\n        dic[num] = dic.get(num, 0) + 1\n\n    min_changes = len(dic)\n    for key in dic:\n        dic[key] -= 1\n        changes = 0\n        for key2 in dic:\n            if key2 == key:\n                continue\n            if dic[key] == 0:\n                break\n            if dic[key2] < dic[key]:\n                changes += 1\n        if changes < min_changes:\n            min_changes = changes\n        dic[key] += 1\n    return str(min_changes) + '\\n' +''.join(map(str, arr))"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4)\n    2\n    >>> solution(6)\n    3\n    >>> solution(10)\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    lst_set = list(set(lst))\n    print(min(lst_set.__len__(), lst_set.__len__() - 1))\n    return \" \".join(map(str, sorted(lst_set)))\n\ndef"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(num) for num in stdin.split(\"\\n\")[0].split()]\n    n = len(arr)\n    result = [i for i in range(1, n+1)]\n    swaps = 0\n    while result!= arr:\n        for i in range(n):\n            if result[i]!= arr[i]:\n                swaps += 1\n                tmp = result[i]\n                result[i] = arr[i]\n                result[arr.index(tmp)] = tmp\n    return swaps"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = list(range(1, n + 1))\n    a_b = [i for i in zip(a, b)]\n    a_b.sort()\n    q = 0\n    for i in range(n):\n        if a_b[i][0]!= a_b[i][1]:\n            q += 1\n    if q == 0:\n        print(0)\n        print(*b)\n        return\n    c = [i for i in zip(a, b)]\n    c.sort()\n    print(q)\n    print(*[i[0] for i in c])\n\n\nsolution(input())\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    ans = 0\n    res = list(range(1, n + 1))\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            ans += 1\n            res[arr[i - 1] - 1] = res[arr[i] - 1]\n    if ans == 0:\n        return str(ans)\n    return''.join([str(x) for x in res])\n\nprint(solution(\"4 5 6 3 2 1\"))\nprint(solution(\"6 8 4 6 7 1 6 3 4 5\"))\nprint(solution(\"10 6 8 4 6 7 1 6 3 4 5\"))"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] < a[j]:\n                count += 1\n    return str(count) +'' +''.join(map(str, a))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    array = list(map(int, stdin.readline().strip().split()))\n    changes = []\n    for i in range(length):\n        if array[i]!= i + 1:\n            changes.append(i)\n    if len(changes) > 0:\n        min_changes = changes[0]\n        min_changes_index = 0\n        for i in range(1, len(changes)):\n            if changes[i] < changes[min_changes_index]:\n                min_changes_index = i\n                min_changes = changes[i]\n        swap(array, min_changes, min_changes_index)\n        for i in range(min_changes_index + 1, len(changes)):\n            swap(array, i, changes[i])\n    return \" \".join(map(str, array))\n\n\ndef"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n20 10 30 40 10\\n\")\n    20\n    >>> solution(\"6 5\\n90 20 35 40 60 100\\n\")\n    35\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    light = list(map(int, stdin.split()))\n    light.sort()\n    max_light = light[-1]\n    light_intervals = []\n    for i in range(n):\n        light_intervals.append((light[i], light[i]))\n    for i in range(1, k):\n        light_intervals.append((light[i] - 1, light[i]))\n    light_intervals.sort()\n    intervals = []\n    intervals_dict = {}\n    for i in range(1, len(light_intervals)):\n        if light_intervals[i][0]!= light_intervals[i-1][1]:\n            intervals.append(light_intervals[i-1])\n            intervals_dict[light_intervals[i-1][0]] = True\n    intervals.append(light_intervals[-1])\n    intervals_dict[light_intervals[-1][0]] = True\n    intervals = sorted(intervals, key=lambda x: x[0])\n    res = 0\n    for interval in intervals:\n        res = max(res, interval[1])\n    return res\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n, k = list(map(int, stdin.split()))\n    # arr = list(map(int, stdin.split()))\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort()\n    low, high = 0, n-1\n    res = []\n    while low < high:\n        mid = (high + low) // 2\n        if sum(arr[:mid+1]) <= k*arr[mid]:\n            low = mid + 1\n        else:\n            high = mid\n    low = min(k, low)\n    for i in range(low):\n        res.append(str(arr.index(arr[i])+1))\n    print(low)\n    print(' '.join(res))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\n\n    Parameters:\n        stdin (str): The standard input\n\n    Returns:\n        str: The solution\n    \"\"\"\n    # write your solution here\n    n, k = [int(i) for i in stdin.split(' ')]\n    light = [int(i) for i in stdin.split(' ')]\n    light.sort()\n    light.reverse()\n    if n < k:\n        return \"\"\n    res = []\n    for i in range(k):\n        res.append(light.pop())\n    return''.join([str(i) for i in res])\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \ndef"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    l = list(map(int, stdin.split(' ')))\n    l.sort()\n    s = []\n    for i in range(n-k+1):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        s.append(l[i])\n    print(*s)\n    return\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin.readline())\n    # k = int(stdin.readline())\n    n = 5\n    k = 3\n    arr = [90, 20, 35, 40, 60, 100]\n    # arr = [1, 2, 3, 4, 5, 6, 7]\n    result = [0] * n\n    for i in range(n):\n        if arr[i] <= 100:\n            result[i] = arr[i]\n        else:\n            result[i] = 0\n    res = []\n    for i in range(k):\n        a = max(result)\n        # print(a)\n        res.append(result.index(a))\n        result[result.index(a)] = 0\n    # print(res)\n    return''.join([str(i) for i in res])\n\n\n\nsolution(input())\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(k):\n        print(a[i], end=' ')\n    return ''"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for a in range(2, n):\n        for b in range(a + 1, n + 1):\n            res = max(res, abs(b - a) + abs(a * b))\n    return str(res)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(i * i * j for i in range(1, int(stdin) + 1) for j in range(1, int(stdin) + 1)))\n\nprint(solution('4'))\nprint(solution('6'))\nprint(solution('2'))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 0\n    if n % 2 == 1:\n        return 0\n    \n    target = [n]\n    res = 0\n    \n    while target:\n        new_target = []\n        for x in target:\n            for y in target:\n                if x!= y:\n                    if x % 2 == 0 and y % 2 == 1:\n                        new_target.append(y + x - (y % 2) + 1)\n                    elif x % 2 == 1 and y % 2 == 0:\n                        new_target.append(y + x - (x % 2) + 1)\n                    else:\n                        new_target.append(y + x)\n        res = max(res, max(new_target))\n        target = new_target\n        \n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    current_sum = 0\n    current_max = 0\n    for i in range(1, n + 1):\n        current_sum = i\n        for j in range(i):\n            current_sum = abs(current_sum * j)\n            if current_sum > current_max:\n                current_max = current_sum\n    if current_max == 0:\n        print(0)\n    else:\n        print(current_max)\n    return ''\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return max(x * abs(x) for x in range(-1, n + 1))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '0'\n    \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(sum(int(el) for el in stdin.split()) * abs(int(stdin.split()[0]))"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_score = 0\n    \n    for x in range(1, n + 1):\n        score = x\n        for a in range(1, x):\n            if a * x <= n:\n                score += abs(a)\n        \n        for b in range(1, n):\n            if b * x <= n:\n                score += abs(b)\n        \n        if score > max_score:\n            max_score = score\n    \n    return max_score\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([abs(int(stdin))] * 2))\n\n\ndef"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    pref = [0] * n\n    votes = []\n    for _ in range(m):\n        cur = [int(x) for x in stdin.split()]\n        votes.append(cur)\n        for i in range(n):\n            pref[i] += cur[i]\n    #print(pref)\n    index = 0\n    for i in range(n):\n        if pref[i] > pref[index]:\n            index = i\n    #print(votes)\n    maxim = max([max(x) for x in votes])\n    if maxim == 0:\n        return index + 1\n    return index + max([max(x) for x in votes].index(maxim)) + 1\n\ndef"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    numbers = [int(x) for x in stdin.split('\\n')[1:m+1]]\n    cnt = {x: numbers.count(x) for x in range(1, n+1)}\n    winner = max(cnt, key=cnt.get)\n    return str(winner)\n\"\"\""
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(m):\n        a.append(map(int, stdin.split()))\n    nums = [0 for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            nums[j] += a[i][j]\n    # print(nums)\n    ans = 0\n    for i in range(n):\n        nums[i] %= 10 ** 9 + 7\n        if nums[i] > ans:\n            ans = nums[i]\n    return str(ans)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the country's winner.\n\n    :param str stdin: The input of the program.\n    :rtype: str\n    :return: The country's winner.\n    \"\"\"\n\n    def check(candidates, cities):\n        \"\"\"Check if the election has ended.\n\n        :param list candidates: The candidates.\n        :param list cities: The cities.\n        :rtype: bool\n        :return: True if the election has ended, False if not.\n        \"\"\"\n        return len(set(candidates)) == 1\n\n    def calc(candidates, cities, i):\n        \"\"\"Calculate the winners.\n\n        :param list candidates: The candidates.\n        :param list cities: The cities.\n        :param int i: The number of the city.\n        :rtype: int\n        :return: The index of the winner.\n        \"\"\"\n        j, count = candidates[0], cities[0]\n        for k in range(1, len(candidates)):\n            if candidates[k] not in [j, j + 1] or cities[k] < count:\n                break\n            j, count = candidates[k], cities[k]\n        return j\n\n    candidates, cities = [], []\n    for i in range(1, int(stdin.readline()) + 1):\n        candidates.append(i)\n    for i in range(int(stdin.readline())):\n        cities.append(int(stdin.readline()))\n    candidates.sort()\n    while not check(candidates, cities):\n        candidates[calc(candidates, cities, 0) - 1] += 1\n        for i in range(1, len(candidates)):\n            candidates[i] = candidates[0]\n        cities[0] += 1\n    print(candidates.index(1) + 1)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    nums = [0] * m\n    votes = [0] * n\n    for i in range(m):\n        nums[i] = [int(n) for n in stdin.split()]\n        for j in range(n):\n            votes[j] += nums[i][j]\n    print(votes.index(max(votes))+1)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    votes = []\n    for i in range(m):\n        line = list(map(int, stdin.split('\\n')[i + 1].split(' ')))\n        votes.append(line)\n    votes = sorted(votes, key=lambda x: -sum(x))\n    print(votes)\n    count = 0\n    for j in range(n):\n        count += votes[0][j]\n        print(votes[0][j])\n        votes[0][j] = 0\n        votes = sorted(votes, key=lambda x: -sum(x))\n        print(votes)\n        if count >= m:\n            print(j + 1)\n            return j + 1\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m = [int(x) for x in stdin.split()]\n    arr = [[int(x) for x in stdin.split()] for _ in range(m)]\n    for i in range(m):\n        arr[i].sort()\n    print(arr)\n    max_ = 0\n    max_city = 0\n    for i in range(m):\n        if sum(arr[i]) > max_:\n            max_ = sum(arr[i])\n            max_city = i\n    print(max_)\n    print(max_city)\n    return max_city + 1\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    votes = [tuple(map(int, stdin.readline().split())) for i in range(m)]\n    votes.sort(key=lambda x: x[0])\n    dp = [1] * n\n    result = 1\n    for i in range(n):\n        for j in range(n):\n            if votes[i][1] > votes[j][1]:\n                dp[i] = max(dp[i], dp[j] + 1)\n        if dp[i] > result:\n            result = dp[i]\n    return '\\n'.join(map(str, range(1, n + 1)[::-1][dp.index(result):]))\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0414\u0430\u043d\u043e n \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 1000.\n    \u041a\u0430\u0436\u0434\u043e\u0435 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0423\u043a\u0430\u0436\u0438\u0442\u0435,\n    \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u044d\u0442\u0438\u0445 n \u0447\u0438\u0441\u043b\u0430\u0445.\n    '''\n    # \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n    n, *data = map(int, stdin.split())\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b,\n    # \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u0445 n \u0447\u0438\u0441\u043b\u0430\u0445\n    max_count = max(data)\n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0441\u0440\u0435\u0434\u0438\n    # n \u0447\u0438\u0441\u0435\u043b \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e max_count\n    # \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n    return data.count(max_count)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    d = {}\n    for i in range(m):\n        v = list(map(int, stdin.split(' ')))\n        for j in range(n):\n            d[(i + 1, j + 1)] = v[j]\n    def max_count_vote(candidate):\n        if candidate not in d:\n            return 0\n        return max(d[candidate].values())\n    def choose_city(prev_city):\n        max_votes = max([max_count_vote(candidate) for candidate in d], default=0)\n        max_candidates = [candidate for candidate in d if max_count_vote(candidate) == max_votes]\n        if len(max_candidates) == 1:\n            return max_candidates[0][0]\n        else:\n            max_candidates.sort(key=lambda x: x[1])\n            return max_candidates[0][0]\n    def first_stage(city):\n        result = [0] * n\n        for candidate in d[city]:\n            result[candidate - 1] = max_count_vote(candidate)\n        return result\n    def second_stage():\n        city_count = [0] * m\n        for city in d:\n            city_count[city[0] - 1] += 1\n        city_count.sort(reverse=True)\n        max_count = max(city_count)\n        max_cities = [city for city, count in enumerate(city_count) if count == max_count]\n        max_cities.sort(key=lambda x: x[1])\n        return max_cities[0][0]\n    def choose_winner():\n        first_stage_result = first_stage(list(d.keys())[0])\n        city = second_stage()\n        return first_stage_result.index(max(first_stage_result)) + 1\n    return choose_winner()\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    arr = [int(x) for x in stdin.split()]\n    correct, wrong = arr[1:], arr[1:]\n    correct.sort()\n    wrong.sort()\n    print(correct[-1] if sum(correct) > sum(wrong) else -1)\n    return ''\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    correct_solutions = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    wrong_solutions = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    correct_solutions.sort()\n    wrong_solutions.sort()\n    print(correct_solutions)\n    print(wrong_solutions)\n    # If the sum of correct solutions is more than the sum of wrong solutions\n    # there is no need to check anything else.\n    if sum(correct_solutions) > sum(wrong_solutions):\n        return '-1'\n    \n    # Correct solution is the first one that passes the tests\n    correct_solution = correct_solutions[0]\n    # We find the minimum possible running time for correct solutions\n    correct_time = min(correct_solutions)\n    # The maximum time limit is the maximum of the minimum time plus the maximum\n    # of the wrong solutions\n    time_limit = max(correct_time, max(wrong_solutions))\n    # We start checking for tl greater than the minimum\n    for i in range(2, time_limit):\n        if sum(x <= i for x in correct_solutions) >= 1 and sum(x <= i for x in wrong_solutions) == 0:\n            return str(i)\n    return '-1'\n\n\ndef"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    correct = list(map(int, stdin.split()))\n    wrong = list(map(int, stdin.split()))\n    correct.sort()\n    wrong.sort()\n    min_tl = n + 1\n    for i in range(n - 1, -1, -1):\n        if m < n - i:\n            break\n        min_tl = min(min_tl, correct[i] + m - n + 1)\n    if min_tl > m:\n        return '-1'\n    return str(min_tl)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    correct_solution_times = list(map(int, stdin.split()))\n    wrong_solution_times = list(map(int, stdin.split()))\n\n    correct_solution_times = sorted(correct_solution_times)\n    wrong_solution_times = sorted(wrong_solution_times)\n    extra_time_for_correct_solution = []\n    for i in range(n - 1):\n        extra_time_for_correct_solution.append(correct_solution_times[i + 1] - correct_solution_times[i])\n    print(extra_time_for_correct_solution)\n    extra_time_for_wrong_solution = []\n    for i in range(m):\n        extra_time_for_wrong_solution.append(wrong_solution_times[i])\n    print(extra_time_for_wrong_solution)\n    max_time = min(extra_time_for_correct_solution)\n    for i in range(m):\n        if extra_time_for_wrong_solution[i] > max_time:\n            max_time = extra_time_for_wrong_solution[i]\n    if max_time == 0:\n        return -1\n    return max_time\n\ndef"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_tl(n: int, m: int, correct_solutions: List[int], wrong_solutions: List[int]) -> int:\n        if not n or not m:\n            return -1\n        correct_solutions.sort()\n        wrong_solutions.sort()\n        tl = math.inf\n        for solution in correct_solutions:\n            for i in range(m):\n                if solution + wrong_solutions[i] <= tl:\n                    tl = solution + wrong_solutions[i]\n                else:\n                    return tl\n        return -1\n\n    correct_solutions = [int(x) for x in stdin.split()]\n    wrong_solutions = [int(x) for x in stdin.split('\\n')[1].split()]\n    print(get_min_tl(len(correct_solutions), len(wrong_solutions), correct_solutions, wrong_solutions))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(line) for line in stdin.splitlines()]\n    n = data[0]\n    correct_solutions = data[1:n + 1]\n    wrong_solutions = data[n + 1:]\n\n    correct_solutions.sort()\n    wrong_solutions.sort()\n\n    if wrong_solutions[0] > correct_solutions[-1]:\n        return -1\n\n    left = 0\n    right = correct_solutions[-1]\n    while left <= right:\n        mid = (left + right) // 2\n        checker = sum(solution > mid for solution in correct_solutions) + \\\n                  sum(solution <= mid for solution in wrong_solutions)\n        if checker <= m:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    correct, wrong = [], []\n    for i in range(n):\n        correct.append(int(stdin.split()[i]))\n    for i in range(m):\n        wrong.append(int(stdin.split()[i + n]))\n    correct.sort()\n    wrong.sort()\n    left, right = 1, correct[-1] + 1\n    while left < right:\n        middle = (left + right) // 2\n        count = 0\n        for i in range(n):\n            count += middle // correct[i]\n        for i in range(m):\n            count += wrong[i] // middle\n        if count < m:\n            right = middle\n        else:\n            left = middle + 1\n    return str(right)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr_n = list(map(int, stdin.split()))\n    arr_m = list(map(int, stdin.split()))\n\n    def tl(arr):\n        t = arr[0]\n        for i in range(1, len(arr)):\n            t = min(max(t, 2 * arr[i]), max(arr))\n        return t\n\n    res = tl(arr_n)\n    for i in range(1, m):\n        res = min(tl(arr_m), res)\n        if res < 0:\n            return -1\n    return str(res)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 6\\n4 5 2\\n8 9 6 10 7 11')\n    5\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[-1:]))\n    res = None\n    # write your code in Python 3.6\n    for i in range(101):\n        if n * i + sum(a) <= m + sum(b) and n * i + sum(a) >= m - sum(b):\n            res = i\n    return str(res) if res is not None else '-1'\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"No solution\"\n    if not stdin.strip():\n        return -1\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    correct = list(map(int, lines[1].split()))\n    incorrect = list(map(int, lines[2].split()))\n\n    correct.sort()\n    incorrect.sort()\n    min_time = min(correct[0], incorrect[0])\n    for i in range(m):\n        min_time = min(min_time, incorrect[i])\n    return min_time\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    # It's main function. Don't remove this function\n    # It's used for auto-testing and must return a result for the test\n    # (Use of'return' is obligatory)\n    y = int(stdin)\n    return next_leap_year(y)\n\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n\"\"\"\n\n\"\"\"\n\u0412\u0445\u043e\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u041d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0447\u0438\u0441\u043b\u0430. \u0422.\u0435. \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432 \u0437\u0430\u0434\u0430\u0447\u0435, \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0438\u0441\u043b\u0430 1.2 \u0432 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 3, \u0430 \u043d\u0435 1.2^3.\n\n\u0412\u0445\u043e\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0432\u043e\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430:\n\n0.23\n\n\u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u044b\u0432\u043e\u0434:\n\n0\n0.23\n\u0414\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u044b\u0432\u043e\u0434\u043e\u0432.\n\n\u0412\u0430\u0448\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0446\u0438\u043a\u043b\u044b. \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u0432 \u0432\u044b\u0432\u043e\u0434\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0439\u0442\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e.\n\n\u0414\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u0432\u044b\u0432\u043e\u0434\u0435. \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043e\u0434\u043d\u043e \u2014 \u0442\u043e \u0432\u044b\u0432\u043e\u0434 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043c.\n\"\"\"\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # for line in stdin.splitlines():\n    #     pass\n    return str(int(stdin) + 1)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return 'YEAR'"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    # Note that we start from the year 2000, because year 2000, is a leap year.\n    for i in range(2000, year + 1):\n        if i % 400 == 0 or (i % 4 == 0 and i % 100!= 0):\n            year += 1\n    return year\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    if y % 400 == 0:\n        y += 1\n    elif y % 4 == 0:\n        y += 1\n    else:\n        y += 2\n    return str(y)\n\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    start, end = stdin.split('\\n')\n    start = list(map(int, start.split(':')))\n    end = list(map(int, end.split(':')))\n    diff = [0, 0, 0]\n    for i in range(3):\n        diff[i] = end[i] - start[i]\n    if diff[2]!= 0:\n        if diff[2] < 0:\n            days = 365 * diff[0] + 30 * diff[1] + diff[2]\n        else:\n            days = 365 * diff[0] + 30 * diff[1] + diff[2] - 1\n    elif diff[1]!= 0:\n        if diff[1] < 0:\n            days = 30 * diff[0] + diff[1]\n        else:\n            days = 30 * diff[0] + diff[1] - 1\n    else:\n        days = diff[0]\n    print(days)"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Replace pass above with your code.\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    start_year, start_month, start_day = stdin.split()\n    start_year, start_month, start_day = [int(el) for el in start_year.split(':')]\n    end_year, end_month, end_day = [int(el) for el in stdin.split()]\n    delta_year = end_year - start_year\n    delta_month = end_month - start_month\n    delta_day = end_day - start_day\n    if delta_year == 0:\n        if delta_month == 0:\n            return delta_day\n        if delta_month > 0:\n            return delta_month * 30 + delta_day\n        if delta_month < 0:\n            return -(delta_month * 30 - delta_day)\n    if delta_year > 0:\n        return delta_year * 365 + delta_month * 30 + delta_day\n    else:\n        return (delta_year * 365 + delta_month * 30 + delta_day) * (-1)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    input_string = input_string.split()\n    year1, month1, day1 = input_string[0].split(\":\")\n    year2, month2, day2 = input_string[1].split(\":\")\n    assert int(year1) <= 2038\n    assert int(year2) <= 2038\n    assert int(month1) <= 12\n    assert int(month2) <= 12\n    assert int(day1) <= 31\n    assert int(day2) <= 31\n    if int(month1) > 2:\n        assert int(month1) <= 12\n        assert int(day1) <= 29\n    if int(month2) > 2:\n        assert int(month2) <= 12\n        assert int(day2) <= 29\n    assert int(year1) <= int(year2)\n    years = int(year2) - int(year1)\n    if int(year1) == int(year2):\n        assert int(month1) <= int(month2)\n        assert int(day1) <= int(day2)\n    if int(month1) == int(month2):\n        assert int(day1) <= int(day2)\n    months = int(month2) - int(month1)\n    if int(month1) == int(month2):\n        assert int(day1) <= int(day2)\n    days = int(day2) - int(day1)\n    if int(month1) == int(month2):\n        assert int(day1) <= int(day2)\n    if int(month1) == int(month2) and int(day1) == int(day2):\n        return 0\n    if int(month1) == int(month2) and int(day1) > int(day2):\n        years -= 1\n        months = 12 - int(month1) + int(month2)\n        days = 31 - int(day1) + int(day2)\n        if years % 4 == 0 and years % 100!= 0:\n            if days < 30:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n        elif years % 4 == 0 and years % 100 == 0 and years % 400 == 0:\n            if days < 30:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n        else:\n            if days < 29:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n    if int(month1) == int(month2) and int(day1) < int(day2):\n        years -= 1\n        months = int(month1) + 12 - int(month2)\n        days = int(day2) - int(day1)\n        if years % 4 == 0 and years % 100!= 0:\n            if days < 30:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n        elif years % 4 == 0 and years % 100 == 0 and years % 400 == 0:\n            if days < 30:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n        else:\n            if days < 29:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n    if int(month1) > int(month2):\n        years -= 1\n        months = int(month1) - int(month2)\n        days = int(day1)\n        if years % 4 == 0 and years % 100!= 0:\n            if days < 30:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n        elif years % 4 == 0 and years % 100 == 0 and years % 400 == 0:\n            if days < 30:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n        else:\n            if days < 29:\n                return years * 365 + months * 30 + days\n            else:\n                return years * 365 + months * 30 + days - 1\n    return years * 365 + months * 30 + days\n\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Cometary is too tired, so he decided to give it a try to solve something.\n    '''\n    date1 = stdin[:10]\n    date2 = stdin[11:]\n    date1_obj = datetime.datetime.strptime(date1, '%Y:%m:%d')\n    date2_obj = datetime.datetime.strptime(date2, '%Y:%m:%d')\n    \n    print(date1_obj - date2_obj)\n    return date1_obj - date2_obj\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes 2 dates (a and b) in the format yyyy:mm:dd and returns number of days between these dates\"\"\"\n    a = [int(i) for i in stdin.split()[0].split(':')]\n    b = [int(i) for i in stdin.split()[1].split(':')]\n    s = 0\n    for i in range(3):\n        if a[i] > b[i]:\n            s += a[i] - b[i]\n        else:\n            s += b[i] - a[i]\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(calendar.month(year, month))\n    # print(calendar.calendar(year))\n    # print(calendar.day_name[date.weekday(year, month, day)])\n    day1, month1, year1 = map(int, stdin.split(':')[:3])\n    day2, month2, year2 = map(int, stdin.split(':')[3:])\n    print(day2 - day1)\n    print(month2 - month1)\n    print(year2 - year1)\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar.month(year2, month2))\n    print(calendar.month(year1, month1))\n    print(calendar"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d1, d2 = stdin.split('\\n')\n    d1 = d1.split(':')\n    d2 = d2.split(':')\n    \n    y1, m1, d1 = [int(x) for x in d1]\n    y2, m2, d2 = [int(x) for x in d2]\n\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_in_months_leap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    days = 0\n    for i in range(m1, m2+1):\n        if i == 2:\n            if (y1 % 4 == 0) and (y1 % 100!= 0):\n                for j in range(d1, days_in_months_leap[i-1] + 1):\n                    days += 1\n            else:\n                for j in range(d1, days_in_months[i-1] + 1):\n                    days += 1\n        else:\n            for j in range(d1, days_in_months[i-1] + 1):\n                days += 1\n\n    return days\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(input().split())\n    print(input().split())\n    pass\n\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(':')\n    first_date = list(map(int, stdin[0].split('-')))\n    second_date = list(map(int, stdin[1].split('-')))\n\n    def date_difference(stdin: list) -> int:\n        \"\"\"\n        Returns the number of days between two dates.\n        \"\"\"\n        if stdin[0] == stdin[1]:\n            return 0\n        elif stdin[0][1] < stdin[1][1]:\n            return stdin[1][1] - stdin[0][1] + 1\n        elif stdin[0][1] == stdin[1][1]:\n            if stdin[0][0] < stdin[1][0]:\n                return stdin[1][0] - stdin[0][0] + 1\n            elif stdin[0][0] == stdin[1][0]:\n                if stdin[0][2] < stdin[1][2]:\n                    return stdin[1][2] - stdin[0][2] + 1\n                else:\n                    return 0\n            else:\n                return 0\n        else:\n            return (stdin[1][1] - stdin[0][1]) * 365 + (stdin[1][0] - stdin[0][0]) * 366 + (stdin[1][2] - stdin[0][2])\n\n    def leap_year(year: int) -> bool:\n        \"\"\"\n        Returns true if the given year is a leap year.\n        \"\"\"\n        if year % 400 == 0:\n            return True\n        elif year % 100 == 0:\n            return False\n        elif year % 4 == 0:\n            return True\n        else:\n            return False\n\n    def calculate_days(year: int, month: int, day: int) -> int:\n        \"\"\"\n        Returns the number of days in a given month in a given year.\n        \"\"\"\n        days = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        if leap_year(year):\n            days = (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        return sum(days[:month - 1]) + day\n\n    return date_difference([first_date, second_date]) + calculate_days(first_date[0], first_date[1], first_date[2]) + calculate_days(second_date[0], second_date[1], second_date[2])\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the city in which Super M should teleport to in order to finish her job in the minimum amount of krons.\n    '''\n    n, m = map(int, stdin.split(' '))\n    edges = [list(map(int, line.split(' '))) for line in stdin.split('\\n')[:-1] if line]\n\n    # Build the graph\n    G = {u: [] for u in range(1, n + 1)}\n    for u, v in edges:\n        G[u].append(v)\n        G[v].append(u)\n\n    visited = set()\n    queue = [(0, 1)]\n    visited.add(1)\n\n    while queue:\n        depth, node = queue.pop(0)\n        for neighbor in G[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((depth + 1, neighbor))\n\n    return str(min([(n, d) for n, d in queue if d == depth], key=lambda x: x[0])[0])"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    n, m = map(int, stdin.split('\\n')[0].split())\n    road = {(u, v) for u, v in stdin.split('\\n')[1:-1]}\n    humans = set(map(int, stdin.split('\\n')[-1].split()))\n    pq = [0] * n\n    for h in humans:\n        for u, v in road:\n            if u == h:\n                pq[v - 1] = max(pq[v - 1], pq[u - 1] + 1)\n            elif v == h:\n                pq[u - 1] = max(pq[u - 1], pq[v - 1] + 1)\n    return min(pq)\n    '''\n    # O(E log(V))\n    # O(E + V)\n    n, m = map(int, stdin.split('\\n')[0].split())\n    road = {(u, v) for u, v in stdin.split('\\n')[1:-1]}\n    humans = list(map(int, stdin.split('\\n')[-1].split()))\n    # O(E)\n    pq = []\n    # O(V)\n    dist = [float('inf')] * n\n    # O(E)\n    for h in humans:\n        dist[h - 1] = 0\n        heapq.heappush(pq, (0, h - 1))\n    # O(E log(V))\n    while len(pq) > 0:\n        d, u = heapq.heappop(pq)\n        # O(V)\n        for v in road:\n            if u == v[0] - 1 and dist[v[1] - 1] > dist[v[0] - 1] + 1:\n                dist[v[1] - 1] = dist[v[0] - 1] + 1\n                heapq.heappush(pq, (dist[v[1] - 1], v[1] - 1))\n            if u == v[1] - 1 and dist[v[0] - 1] > dist[v[1] - 1] + 1:\n                dist[v[0] - 1] = dist[v[1] - 1] + 1\n                heapq.heappush(pq, (dist[v[0] - 1], v[0] - 1))\n    # O(V)\n    return min(dist)\n\n\n\nprint(solution('\\n'.join([\n    '7 2',\n    '1 2',\n    '1 3',\n    '1 4',\n    '3 5',\n    '3 6',\n    '3 7',\n    '2 7',\n])))\n\nprint(solution('\\n'.join([\n    '6 4',\n    '1 2',\n    '2 3',\n    '2 4',\n    '4 5',\n    '4 6',\n    '2 4 5 6',\n])))\n\nprint(solution('\\n'.join([\n    '5 4',\n    '1 2',\n    '2 3',\n    '2 4',\n    '4 5',\n    '4 6',\n    '2 4 5 6',\n])))\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    n, m = map(int, stdin.readline().split())\n    road_list = []\n    attack_list = []\n    for _ in range(n - 1):\n        road_list.append(map(int, stdin.readline().split()))\n    attack_list = map(int, stdin.readline().split())\n    \n    # create mapping of all road connections\n    road_map = {}\n    for road in road_list:\n        road_map[road[0]] = road_map.get(road[0], []) + [road[1]]\n        road_map[road[1]] = road_map.get(road[1], []) + [road[0]]\n    \n    def get_attack_time(city):\n        # find shortest path to attack\n        path = {}\n        def dfs(city, dest, parent, path):\n            path[dest] = parent\n            if city in road_map:\n                for next_dest in road_map[city]:\n                    if next_dest == dest:\n                        continue\n                    dfs(next_dest, dest, city, path)\n        dfs(city, city, city, path)\n        # find path of attack to other city\n        attack_path = [city]\n        next_dest = city\n        while next_dest!= dest:\n            next_dest = path[next_dest]\n            attack_path.append(next_dest)\n        attack_path.append(dest)\n        # calculate time to go from city to dest in attack path\n        time = 0\n        for i in range(len(attack_path) - 1):\n            city = attack_path[i]\n            next_city = attack_path[i + 1]\n            time += road_map[city][next_city]\n        return time\n        \n    attack_time = {}\n    for city in road_map:\n        attack_time[city] = get_attack_time(city)\n    # find shortest time to attack\n    min_time = float('inf')\n    min_time_city = None\n    for attack_city in attack_list:\n        if attack_time[attack_city] < min_time:\n            min_time = attack_time[attack_city]\n            min_time_city = attack_city\n    # find shortest path to other city\n    path = {}\n    def dfs(city, parent, path):\n        path[city] = parent\n        if city in road_map:\n            for next_city in road_map[city]:\n                dfs(next_city, city, path)\n    dfs(min_time_city, min_time_city, path)\n    # print answer\n    city = min_time_city\n    time = 0\n    while city!= min_time_city:\n        time += road_map[city][path[city]]\n        city = path[city]\n    print(min_time_city)\n    print(time)\n\nsolution(stdin)\n\n\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    count_city, count_attack = map(int, stdin[0].split())\n    dict_road = {}\n    list_attack = []\n    for i in range(1, len(stdin)):\n        dict_road[stdin[i].split(\" \")[0]] = stdin[i].split(\" \")[1]\n\n    for i in stdin[-1].split(\" \"):\n        list_attack.append(int(i))\n    list_attack = sorted(list_attack)\n\n    # (1,2) = 3\n    def get_time(road_city1, road_city2):\n        return dict_road[road_city1] + dict_road[road_city2]\n    # \u5f9e\u7b2c\u4e00\u500b\u57ce\u5e02\u958b\u59cb\u57f7\u884c\n    def go(start: str):\n        if start in dict_road.keys():\n            print(start, end=\" \")\n            if get_time(start, dict_road[start]) <= count_kron:\n                return\n            go(dict_road[start])\n        else:\n            print(start, end=\" \")\n            return\n\n    count_kron = 0\n    for i in list_attack:\n        if count_kron >= 3:\n            break\n        go(i)\n        count_kron += 1\n    return count_city\n\n\n\"\"\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution is a binary search solution to the problem.\n    You should first check that the number of cities in Byteforces is >= m.\n    You should then check that the roads are valid. For instance, you cannot have city 3 being attacked if it does not have any road that connects it to another city.\n    Finally, you should check that the cities being attacked are valid. For instance, if city 3 is being attacked, you should check that there is a city 2 that is attacked, and that city 2 is also being attacked.\n    This will allow you to stop the binary search early, as every time you are calling binary search with a smaller lower bound.\n    \"\"\"\n    # TODO: your code here\n\n    n, m = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(n - 1)]\n\n    # valid input conditions\n    assert 1 <= m <= n <= 123456, \"Invalid input\"\n    assert all([1 <= u < n and 1 <= v < n and u!= v for u, v in roads]), \"Invalid roads\"\n    assert all(u in [c for c in range(1, n + 1)] for u, v in roads), \"Invalid cities\"\n    assert all(c in [u for u in range(1, n + 1)] for c in [v for u, v in roads]), \"City being attacked not being attacked\"\n\n    # find the maximum number of roads that connects two cities\n    roads_per_city = [0] * n\n    for u, v in roads:\n        roads_per_city[u] += 1\n        roads_per_city[v] += 1\n\n    # find the maximum number of cities being attacked\n    n_attack = len(stdin.split()[-1:])\n    assert n_attack <= m, \"Cannot attack more cities than are in the list\"\n\n    def binary_search(lower_bound: int, upper_bound: int) -> int:\n        \"\"\"\n        Your solution is a binary search solution to the problem.\n        You should first check that the number of cities in Byteforces is >= m.\n        You should then check that the roads are valid. For instance, you cannot have city 3 being attacked if it does not have any road that connects it to another city.\n        Finally, you should check that the cities being attacked are valid. For instance, if city 3 is being attacked, you should check that there is a city 2 that is attacked, and that city 2 is also being attacked.\n        This will allow you to stop the binary search early, as every time you are calling binary search with a smaller lower bound.\n        \"\"\"\n        while lower_bound < upper_bound:\n            mid = (lower_bound + upper_bound) // 2\n            roads_from_mid = [road for road in roads if road[0] == mid or road[1] == mid]\n\n            if len(roads_from_mid) > m:\n                lower_bound = mid + 1\n            else:\n                upper_bound = mid\n\n        return lower_bound\n\n    # binary search for the minimum time\n    return binary_search(lower_bound=1, upper_bound=n * n)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    roads = [[int(num) for num in line.split()] for line in lines[1:n]]\n    homes = [int(num) for num in lines[-1].split()]\n    dist = {i: {j: abs(i - j) for j in range(n)} for i in range(n)}\n\n    for u, v in roads:\n        for city, dist_city in dist[u].items():\n            dist[city][v] = min(dist[city][v], dist[u][v])\n\n    ans = []\n    for i in range(m):\n        u, v = min(dist[homes[i]].items(), key=lambda x: x[1])\n        ans.append(str(u))\n    return '\\n'.join(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    road = []\n    city = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        road.append((u, v))\n\n    for i in range(m):\n        city.append(int(stdin.split()[i]))\n\n    answer = []\n    for i in range(n):\n        visited = set()\n        for road_ in road:\n            if road_[0] == i + 1:\n                visited.add(road_[1])\n            if road_[1] == i + 1:\n                visited.add(road_[0])\n        visited = list(visited)\n        visited.sort()\n        for i in range(len(visited)):\n            if city[i] not in visited:\n                answer.append(visited[i] + 1)\n                break\n\n    answer.sort()\n    print(answer[0])\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the shortest route from the city with the lowest number to the city with the highest number.\n    Each city will be visited at most once.\n    \"\"\"\n    \n    # Read input\n    n, m = map(int, stdin.readline().strip().split())\n    roads = [[int(a) for a in line.strip().split()] for line in stdin]\n    distances = {i: {} for i in range(1, n + 1)}\n    \n    # Fill distances\n    for u, v in roads:\n        distances[u][v] = distances[v][u] = 1\n    \n    # Get cities with minimal distance\n    min_distances = {city: None for city in range(1, n + 1)}\n    for city in range(1, n + 1):\n        if not min_distances[city]:\n            min_distances[city] = set(distances[city])\n            for city_ in distances[city]:\n                min_distances[city] = min_distances[city].union(distances[city_])\n    min_distances = list(min_distances.items())\n    min_distances = sorted(min_distances, key=lambda item: len(item[1]))\n    min_distances = [i for i in min_distances if not i[1]]\n    cities = [city for city, _ in min_distances]\n\n    # Build road system\n    road_system = {city: {} for city in cities}\n    for road in roads:\n        city_1, city_2 = road\n        road_system[city_1][city_2] = road_system[city_2][city_1] = 1\n    \n    # Find shortest route\n    shortest_route = None\n    for city in cities:\n        route = [city]\n        visited = {city}\n        while route:\n            current_city = route[0]\n            route = route[1:] + list(road_system[current_city].keys())\n            for next_city in road_system[current_city]:\n                if next_city not in visited:\n                    visited.add(next_city)\n                    if len(road_system[next_city]) == len(visited):\n                        if not shortest_route or len(shortest_route) > len(route):\n                            shortest_route = route\n    if shortest_route:\n        return str(min(cities)) + '\\n' + str(len(shortest_route))\n    else:\n        return 'IMPOSSIBLE'\n\ndef"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution\n    \"\"\"\n    n, x = [int(i) for i in stdin.split()]\n    vouchers = []\n    for _ in range(n):\n        vouchers.append([int(i) for i in stdin.split()][1:])\n    vouchers.sort()\n    while vouchers:\n        curr_voucher = vouchers.pop(0)\n        if vouchers:\n            next_voucher = vouchers.pop(0)\n            if max(curr_voucher[0], next_voucher[0]) <= min(curr_voucher[1], next_voucher[1]):\n                continue\n            if max(curr_voucher[1], next_voucher[1]) <= min(curr_voucher[0], next_voucher[0]):\n                continue\n            if x == (curr_voucher[1] - curr_voucher[0] + 1) + (next_voucher[1] - next_voucher[0] + 1):\n                return curr_voucher[2] + next_voucher[2]\n            elif x < (curr_voucher[1] - curr_voucher[0] + 1) + (next_voucher[1] - next_voucher[0] + 1):\n                if curr_voucher[1] < next_voucher[1]:\n                    return curr_voucher[2]\n                else:\n                    return next_voucher[2]\n            elif x > (curr_voucher[1] - curr_voucher[0] + 1) + (next_voucher[1] - next_voucher[0] + 1):\n                if curr_voucher[1] < next_voucher[1]:\n                    return next_voucher[2]\n                else:\n                    return curr_voucher[2]\n        else:\n            return curr_voucher[2]\n    return -1\n\n\nprint(solution(input()))\n\n\n\n\"\"\"\nimport itertools\n\ndef"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the length of the longest non-intersecting interval\"\"\"\n    vouchers = stdin.split('\\n')\n    total_days = int(vouchers[0].split()[0])\n    days = total_days // 2\n    # Sort vouchers by start day\n    vouchers.sort(key=lambda x: int(x.split()[1]))\n    # Find longest non-intersecting interval\n    i = 0\n    j = 0\n    max_interval = 0\n    while i < len(vouchers):\n        if j >= len(vouchers):\n            break\n        # Check if j is less than i\n        while j < len(vouchers) and (int(vouchers[j].split()[0]) - int(vouchers[i].split()[1]) <= days):\n            j += 1\n        max_interval = max(max_interval, j - i)\n        i += 1\n    return max_interval\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution by: Ethan\n    :param stdin:\n    :return:\n    \"\"\"\n    vouchers = [map(int, line.split()) for line in stdin.split('\\n')]\n    vouchers.sort(key=lambda x: x[2], reverse=True)\n    for i in range(len(vouchers)):\n        for j in range(i + 1, len(vouchers)):\n            if max(vouchers[i][0], vouchers[j][0]) > min(vouchers[i][1], vouchers[j][1]):\n                return '-1'\n\n    # First voucher\n    first_voucher = vouchers[0]\n    # Second voucher\n    second_voucher = vouchers[1]\n    # Third voucher\n    third_voucher = vouchers[2]\n\n    # Check if the first and the second voucher are disjoint\n    if min(first_voucher[1], second_voucher[0]) < max(third_voucher[0], second_voucher[1]):\n        return '-1'\n\n    # Check if the second and the third voucher are disjoint\n    if min(third_voucher[0], second_voucher[1]) < max(first_voucher[0], second_voucher[0]):\n        return '-1'\n\n    return str(first_voucher[2] + second_voucher[2] + third_voucher[2])\n\n\ndef"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(begin: int, end: int, cost: int) -> int:\n        return max(0, min(begin, end) - max(begin, end) + 1) - cost\n    vouchers = [line.split() for line in stdin.splitlines()]\n    vouchers.sort(key=lambda x: x[2], reverse=True)\n    print(vouchers)\n    s = 0\n    res = 0\n    for voucher in vouchers:\n        s += int(voucher[1]) - int(voucher[0]) + 1\n        if s > int(voucher[2]):\n            return -1\n        res = max(res, s + int(voucher[2]))\n    return res\n\n\"\"\"\n\ndef"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split('\\n')[0].split()]\n    vouchers = []\n    for i in range(n):\n        vouchers.append([int(x) for x in stdin.split('\\n')[i].split()])\n    vouchers = sorted(vouchers, key=lambda x: x[0])\n    i, j, total_cost, total_duration = 0, 0, 0, 0\n    while j < n and i < n:\n        if total_duration + vouchers[j][0] <= x and total_duration + vouchers[j][1] <= x:\n            total_duration += vouchers[j][1] - vouchers[j][0] + 1\n            total_cost += vouchers[j][2]\n            j += 1\n        else:\n            i += 1\n            total_duration = 0\n            total_cost = 0\n        if j >= n or i >= n:\n            return total_cost\n    return -1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(''))\n    ''\n    >>> solution(str('5 4\\n1 2 5\\n5 6 1\\n1 2 4\\n'))\n    5\n    >>> solution(str('3 2\\n4 6 3\\n2 4 1\\n3 5 4\\n'))\n    -1\n    \"\"\"\n    n, x = [int(n) for n in stdin.split('\\n')[0].split()]\n    nums = [[int(n) for n in stdin.split('\\n')[i].split()] for i in range(1, n + 1)]\n    nums.sort(key=lambda num: num[2])\n    nums.sort(key=lambda num: num[1])\n    s, t, c = 0, x, nums[0][2]\n    for i in range(1, n):\n        s += nums[i][0] - nums[i - 1][1]\n        t -= nums[i][0] - nums[i - 1][1]\n        c += nums[i][2]\n        if s > t:\n            return -1\n    return c\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A brute force solution. Iterates through every pair of vouchers\n    and calculates the total duration and total cost. \n    \n    Returns the minimal total cost, otherwise -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0].split()[0])\n    duration = int(stdin[0].split()[1])\n    cost = 0\n    for i in range(1, length + 1):\n        start = int(stdin[i].split()[0])\n        end = int(stdin[i].split()[1])\n        cost += int(stdin[i].split()[2])\n        if end < start:\n            duration = max(duration, end)\n    if duration > duration:\n        print(-1)\n    else:\n        print(cost)\n    return\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"NA\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = stdin.lower()\n    if s == s[::-1]:\n        return \"NA\"\n    \n    for i in range(0, len(s)):\n        if s[i:] == s[i::-1]:\n            return s[i:]\n        if s[:i] == s[:i-1:-1]:\n            return s[:i]\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the first string that is a palindrome.\n    '''\n    return ''\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"NA\""
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    # print(s)\n    for i in range(n):\n        # print(i)\n        # print(s[:i] + s[n-i-1])\n        # print(s[:i] + s[n-i-1] == s)\n        if s[:i] + s[n-i-1] == s:\n            return s[:i] + s[n-i-1]\n    return 'NA'\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n'))\n    return str(sum(i for i in range(1, a + b + 1)))\nprint(solution(input()))\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    tiredness = 1\n    for i in range(1, b):\n        tiredness += i\n    for i in range(1, a):\n        tiredness += i\n    return str(tiredness)"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 1 + 2 + 3 + 4 + 5 +... + a + b\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split('\\n')[0].split()]\n    x = (x2 - x1) ** 2\n    y = (y2 - y1) ** 2\n    return str(x + y)\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    print(abs(a-b))\n    return"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split()]\n    if x1 == x2:\n        return abs(y1 - y2)\n    if y1 == y2:\n        return abs(x1 - x2)\n    return max(abs(x1 - x2), abs(y1 - y2))\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. Initilize variables.\n    2. Read input strings a and b.\n    3. Calc total tiredness.\n    4. Return answer.\n    \"\"\"\n    a, b = map(int, stdin.split('\\n'))\n\n    return abs(a - b)\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum possible total tiredness if the friends meet in the same point.\n    '''\n    x1 = int(stdin.split('\\n')[0])\n    x2 = int(stdin.split('\\n')[1])\n    res = 0\n    for i in range(1, min(x1, x2) + 1):\n        if x1 % i == 0 and x2 % i == 0:\n            res += i\n    return res\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem\n\n    Parameters\n    ----------\n    stdin : str\n        The standard input.\n\n    Returns\n    -------\n    str\n        The solution.\n    '''\n    x_1 = int(stdin.split()[0])\n    x_2 = int(stdin.split()[1])\n\n    # Calculate the total number of steps to take\n    # for both friends to meet\n    total_steps = abs(x_2 - x_1)\n    if x_1 > x_2:\n        total_steps += x_2 + 1\n    else:\n        total_steps += x_1 + 1\n\n    return str(total_steps)\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"Find the maximum number of weapons (both swords and war axes) you and your follower can carry.\"\n    # YOUR CODE HERE\n    return \"\""
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds maximum number of weapons that you and your follower can take at the shop.\"\"\"\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        p, f, cnt_s, cnt_w, *s, = map(int, stdin.readline().split())\n        s = sorted(s, reverse=True)\n        s = [i // j for i, j in zip(s, s[1:])]\n        w = s[0]\n        s = s[1:]\n        print(s)\n    return \"\""
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the max number of weapons a thief can carry\"\"\"\n    lines = stdin.split('\\n')\n    counter = int(lines[0])\n    my_capacity = int(lines[1].split()[0]), int(lines[1].split()[1])\n    shop_capacity = int(lines[2].split()[0]), int(lines[2].split()[1])\n    items_in_shop = int(lines[3].split()[0]), int(lines[3].split()[1])\n    for i in range(counter):\n        my_capacity = my_capacity[0] - items_in_shop[0], my_capacity[1] - items_in_shop[1]\n        shop_capacity = shop_capacity[0] - items_in_shop[0], shop_capacity[1] - items_in_shop[1]\n        if my_capacity[0] < 0:\n            my_capacity = 0, my_capacity[1]\n        if my_capacity[1] < 0:\n            my_capacity = my_capacity[0], 0\n        if shop_capacity[0] < 0:\n            shop_capacity = 0, shop_capacity[1]\n        if shop_capacity[1] < 0:\n            shop_capacity = shop_capacity[0], 0\n        if shop_capacity[0] > 0 and shop_capacity[1] > 0:\n            items_in_shop = shop_capacity\n        if shop_capacity[0] == 0 and shop_capacity[1] == 0:\n            if my_capacity[0] == 0 and my_capacity[1] == 0:\n                items_in_shop = items_in_shop[0], items_in_shop[1]\n            else:\n                items_in_shop = my_capacity\n    print(items_in_shop[0] * items_in_shop[1])\n\n\n\n\"\"\"\n\n\n\"\"\"\n1.    You have to maximize your score and you can bring 1, 2 or 3 friends with you.\n2.    You can steal from at most 4 shops and each of them has 1, 2 or 3 weapons.\n3.    You can steal from a single shop if the shop has only 1 weapon, from two shops if there are 2 weapons and from three shops if there are 3 weapons.\n4.    You can steal a single weapon if it's of higher quality than the current one, otherwise you will steal it.\n5.    You can't steal from the shop if you don't have the money to buy the stolen weapon.\n6.    What's the maximum possible score if you want to maximize it?\n\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  a = int(stdin)\n  res = 'Harding'\n  while a > 40:\n    if a % 2 == 1:\n      res = 'Adams'\n    elif a % 4 == 0:\n      res = 'Bach'\n    else:\n      res = 'Harding'\n    a = a // 2\n  return res\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # solution\n    return ''"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the name of the district a student belongs to in a given year\n    >>> solution('8')\n    'Van Buren'\n    >>> solution('29')\n    'Harding'\n    \"\"\"\n    return 'Adams'\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines which president was the last to be sworn in.\n    \"\"\"\n    return \"Harding\""
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Harding'\n\"\"\"\n\ndef"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runtime complexity: O(n)\n    \"\"\"\n    a = int(stdin)\n\n    return \"Harding\" if a % 400 == 0 else \"Jefferson\" if a % 4 == 0 and a % 100!= 0 else \"Adams\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"Harding\", \"Hurricane\", \"Hanson\" or \"Tornado\" depending on the\n    weight.\"\"\"\n   ..."
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Harding\"\nprint(solution(input()))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return your output\n    return \"\"\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return str(min(r//3, g//3, b//3))\n    \n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Simple solution\"\"\"\n    return stdin\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(\n        solve(\n            stdin.splitlines()[0].split()\n        )\n    )\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    print((r // 3 + g // 3 + b // 3) - (r // 3 + g // 3 + b // 3 - 1))\n    return \"\"\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return f'{r // 3 + g // 3 + b // 3 + r // 3 * g // 3 * b // 3}'\n\n\ndef"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    red_flowers, green_flowers, blue_flowers = map(int, stdin.split())\n    if red_flowers == 0:\n        if green_flowers == 0:\n            if blue_flowers == 0:\n                return '0'\n            return '1'\n        return '1'\n    return '2'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(input()))\n\n\ndef"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = stdin.split(' ')\n    print(max(int(r)//3 + int(g)//3 + int(b)//3, int(r)//1 + int(g)//1 + int(b)//1))\n\n\ndef"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = [int(x) for x in stdin.split(\" \")]\n    r = min(r, 3)\n    g = min(g, 3)\n    b = min(b, 3)\n    print(r + g + b)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    r, g, b = map(int, stdin.split())\n    # max bouquets that can be made\n    bouquets = min(r // 3, g // 3, b // 3)\n    if r % 3 == 0 or g % 3 == 0 or b % 3 == 0:\n        bouquets += 1\n    return bouquets\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum number of seconds needed to make all elements of the array equal to zero.\n    \"\"\"\n    # get the first line\n    line = stdin.readline()\n    n = int(line)\n\n    # get the second line\n    line = stdin.readline()\n    a = list(map(int, line.split(' ')))\n\n    # get the maximum value of the array\n    m = max(a)\n\n    # get the second maximum value of the array\n    m2 = 0\n\n    for i in range(n):\n        if a[i] > m2:\n            m2 = a[i]\n\n    if m2 > m:\n        m = m2\n\n    # calculate the second value\n    s = 0\n    for i in range(n):\n        s += abs(a[i] - m)\n\n    s //= 2\n    print(s)\n\n    return ''"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(1)\n    \"\"\"\n    N = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    max_arr_abs = 0\n    while max(arr) > 0:\n        max_arr_abs = max(max_arr_abs, max(arr))\n        new_arr = [0] * N\n        for i in range(N):\n            if arr[i]!= 0:\n                new_arr[i] = arr[i] + 1\n                arr[i] = 0\n        arr = new_arr\n    return max_arr_abs\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [int(i) for i in stdin.readline().split()]\n    \n    A.sort()\n    \n    # if len(A) == 1:\n    #     return 1\n    # A = [A[0], 0]\n    \n    if A[1]!= 0:\n        return 1\n    elif A[0] == 0:\n        return 1\n    \n    # if len(A) == 2:\n    #     return 2\n    # A = [A[0], A[1], 0]\n    \n    if A[2]!= 0:\n        return 2\n    elif A[0] == 0 and A[1] == 0:\n        return 2\n    \n    for i in range(3, n):\n        if A[i]!= 0:\n            return i\n        elif A[0] == 0 and A[1] == 0:\n            return i\n            \n    return n\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [a[i] % n for i in range(n)]\n    step = 0\n    while a.count(0)!= n:\n        i = a.index(0)\n        for j in range(n):\n            if j == i:\n                continue\n            a[j] += 1\n            a[j] %= n\n        step += 1\n    return step\n\n\ndef"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 0\n    t = 0\n    while arr[0]!= 0:\n        ind = 0\n        min_val = min(arr)\n        for i in range(1, n):\n            if arr[i] == min_val:\n                ind = i\n                break\n        arr[ind] += -min_val\n        t += 1\n    return t\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution of the task, described in the task.\n    '''\n    n = int(stdin.split('\\n')[0])\n    nums = list(map(int, stdin.split('\\n')[1].split()))\n    ans, prev = 1, 0\n    for i in range(1, len(nums)):\n        if nums[i] - prev == nums[i - 1]:\n            ans += 1\n        elif nums[i] - prev > nums[i - 1]:\n            ans += 1\n        prev = nums[i]\n    return ans\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split()))\n    if C > D:\n        if A % 250 == 0:\n            return 'Misha'\n        else:\n            return 'Vasya'\n    elif C < D:\n        if B % 250 == 0:\n            return 'Vasya'\n        else:\n            return 'Misha'\n    else:\n        return 'Tie'\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    \n    misha = 3*a//10 + (a//250)*(c - d*1.0)\n    vasya = 3*b//10 + (b//250)*(c - d*1.0)\n    \n    if misha > vasya:\n        return 'Misha'\n    elif misha < vasya:\n        return 'Vasya'\n    else:\n        return 'Tie'\n    \n    \n    \n    \n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    misha = (a * d) + (b * (d // 2)) + (c * (d // 4))\n    vasya = (a * c) + (b * (c // 2)) + (d * (c // 4))\n    if misha > vasya:\n        return \"Misha\"\n    elif misha < vasya:\n        return \"Vasya\"\n    return \"Tie\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if ((a + b) / 2) < c:\n        return 'Misha'\n    elif ((a + b) / 2) > d:\n        return 'Vasya'\n    return 'Tie'"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (a * c > b * d) or (a * d < b * c):\n        return \"Misha\"\n    elif a * c == b * d:\n        return \"Tie\"\n    else:\n        return \"Vasya\""
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    misha_points, vasya_points = a - c * 10, b - d * 10\n    if misha_points > vasya_points:\n        return \"Misha\"\n    elif vasya_points > misha_points:\n        return \"Vasya\"\n    return \"Tie\""
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    c, d = c // 250, d // 250\n    if a // 250 > b // 250:\n        return \"Misha\"\n    elif a // 250 < b // 250:\n        return \"Vasya\"\n    else:\n        return \"Tie\"\n    \n    return result\n\nprint(solution(\"1000 1000 1 1\"))\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split(\" \")))\n    if C < D:\n        if B > A:\n            if B >= C:\n                print(\"Misha\")\n            else:\n                print(\"Tie\")\n        else:\n            print(\"Misha\")\n    elif C > D:\n        if B > A:\n            print(\"Vasya\")\n        else:\n            print(\"Tie\")\n    else:\n        print(\"Tie\")"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    if a > b:\n        return \"Misha\"\n    elif a < b:\n        return \"Vasya\"\n    elif a == b:\n        if c > d:\n            return \"Misha\"\n        elif d > c:\n            return \"Vasya\"\n        else:\n            return \"Tie\""
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    a = a // 250\n    b = (a + b // 10) // 2\n    c = c // a\n    d = d // a\n    if d > b:\n        return \"Misha\"\n    elif d == b:\n        return \"Tie\"\n    else:\n        return \"Vasya\"\n\"\"\"\ndef"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, x_1, y_1, x_2, y_2 = list(map(float, stdin.split()))\n    return \"{:.6f}\".format(min((r ** 2 - (x_1 - x_2) ** 2 - (y_1 - y_2) ** 2) ** 0.5, r))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f'{abs(stdin[1] - stdin[3]) / 2} {abs(stdin[2] - stdin[4]) / 2} {math.sqrt(abs(stdin[1] - stdin[3]) ** 2 + abs(stdin[2] - stdin[4]) ** 2)}'"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    R, x_1, y_1, x_2, y_2 = stdin.split()\n    R, x_1, y_1, x_2, y_2 = int(R), int(x_1), int(y_1), int(x_2), int(y_2)\n    r = ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n    return f'{round(r / R, 6)} {round(r / R, 6)} {round(r / R, 6)}'\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, x1, y1, x2, y2 = map(int, stdin.split())\n    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    res = str(round(d, 6))\n    x, y = 0, r\n    while x + r < d:\n        x += r / d\n        y -= r / d\n    print(x, y, res)\n    return res\n\nprint(solution(input()))"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, x_1, y_1, x_2, y_2 = map(float, stdin.split())\n    R = r ** 2\n    x_ap, y_ap = (x_1 + x_2) / 2, (y_1 + y_2) / 2\n    a = R - ((x_ap - x_1) ** 2 + (y_ap - y_1) ** 2)\n    b = 2 * (x_ap - x_1) * (x_2 - x_1) + 2 * (y_ap - y_1) * (y_2 - y_1)\n    c = (x_2 - x_1) ** 2 + (y_2 - y_1) ** 2 - R\n    d = b ** 2 - 4 * a * c\n    x_ap = -b / (2 * a)\n    y_ap = -d / (2 * a)\n    print(x_ap, y_ap, (x_ap - x_1) ** 2 + (y_ap - y_1) ** 2)\n    return \"\""
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, x1, y1, x2, y2 = [int(x) for x in stdin.split(\" \")]\n    def length(p1, p2):\n        return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)\n    area = (r ** 2 * math.pi) * (r ** 2 - (r - length((x1, y1), (x2, y2))) ** 2) / (length((x1, y1), (x2, y2)) ** 2)\n    return f\"{area:.6f} {length((x1, y1), (x2, y2)):.6f}\""
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    min_d = max(R, max(abs(x_2 - x_1), abs(y_2 - y_1)))\n    if min_d == R:\n        min_d = 0\n    r = R - min_d\n    x = ((x_1 + x_2) / 2) - r\n    y = ((y_1 + y_2) / 2) - r\n    return str(round(x, 6)) + \" \" + str(round(y, 6)) + \" \" + str(round(r, 6))\n    \n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    r, x_1, y_1, x_2, y_2 = [float(x) for x in stdin.split(\" \")]\n    r = int(r)\n    x_1 = int(x_1)\n    y_1 = int(y_1)\n    x_2 = int(x_2)\n    y_2 = int(y_2)\n    print(\n        f\"{abs(x_1 - x_2):.6f} {abs(y_1 - y_2):.6f} {r}\"\n    )\n    '''\n    r, x_1, y_1, x_2, y_2 = [float(x) for x in stdin.split(\" \")]\n    r = int(r)\n    x_1 = int(x_1)\n    y_1 = int(y_1)\n    x_2 = int(x_2)\n    y_2 = int(y_2)\n    print(\n        f\"{(x_2 - x_1)**2 + (y_2 - y_1)**2)**0.5:.6f} {r:.6f} {((x_2 - x_1)**2 + (y_2 - y_1)**2)**0.5:.6f} \")\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(answer_x) +'' + str(answer_y) +'' + str(answer_r)\n    \n    # get the radius, position and max value for x, y, r\n    radius, pos_x, pos_y, max_value = map(float, stdin.split())\n    \n    # we will need the square of the radius as the radius of the square\n    radius_squared = radius ** 2\n    \n    # since we want to find the smallest x, y, and r, we should initialize the variables to infinity\n    min_x = max_value\n    min_y = max_value\n    min_r = max_value\n    \n    # we will iterate through all of the values for x, y, and r\n    for x in range(int(-radius + 1), int(radius + 1)):\n        for y in range(int(-radius + 1), int(radius + 1)):\n            # the distance between the x, y, and the pos_x, pos_y is\n            distance_to_pos = (pos_x - x) ** 2 + (pos_y - y) ** 2\n            \n            # we only need to check for r if the distance_to_pos is less than or equal to radius_squared\n            if distance_to_pos <= radius_squared:\n                \n                # if the distance to the pos_x, pos_y is less than the min_x, then we need to set the min_x to x\n                if distance_to_pos < min_x:\n                    min_x = x\n                \n                # if the distance to the pos_x, pos_y is less than the min_y, then we need to set the min_y to y\n                if distance_to_pos < min_y:\n                    min_y = y\n                \n                # if the distance_to_pos is less than the radius_squared and if it is less than the min_r, then we need to set the min_r to r\n                if distance_to_pos < radius_squared and distance_to_pos < min_r:\n                    min_r = math.sqrt(distance_to_pos)\n    \n    # we need to print the min_x, min_y, and min_r\n    return '{:.6f}'.format(min_x) +'' + '{:.6f}'.format(min_y) +'' + '{:.6f}'.format(min_r)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (r, x_1, y_1, x_2, y_2) = [int(s) for s in stdin.split()]\n    area = r * r * math.pi\n    x_2 -= x_1\n    y_2 -= y_1\n    x_1 += r\n    y_1 += r\n    x_2 *= r\n    y_2 *= r\n    x_2 += x_1\n    y_2 += y_1\n    # \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u043d\u0435 \u043d\u0430\u0448\u043b\u0438, \u043c\u043e\u0436\u043d\u043e \u0432 \u043e\u0431\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b\n    return \"%.6f %.6f %.6f\" % (min(x_2, y_2), max(x_2, y_2), math.sqrt(area))\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    return str(solution_helper(n, m))\n\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    r = 0\n    # for permutation in permutations(range(1, n+1), n):\n    #     for i in range(n):\n    #         if permutation[i+1] - permutation[i] == 1:\n    #             r += 1\n    #             break\n    #         elif permutation[i+1] - permutation[i] > 1:\n    #             break\n    #         else:\n    #             continue\n    for i in range(n):\n        r += (i+1)\n    print(r)\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    def solve(n: int, m: int) -> int:\n        res = 0\n        for p in itertools.permutations(range(1, n + 1)):\n            for l, r in itertools.combinations(range(n + 1), 2):\n                if l == r:\n                    continue\n                if (l + r) % 2!= 0:\n                    continue\n                if l >= r:\n                    continue\n                if max(p[l - 1], p[l]) <= min(p[r - 1], p[r]):\n                    continue\n                res += 1\n        return res\n    return str(solve(n, m))\n\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return '{}'.format(pow(m, n, mod) - pow(m, n-1, mod))\n\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the sum of happiness for all permutations of length n, modulo m.\"\"\"\n    n, m = map(int, stdin.split())\n    def sum_happiness(p):\n        \"\"\"The sum of happiness for a permutation p.\"\"\"\n        happiness = 0\n        for i in range(1, n):\n            if i == n - 1:\n                happiness += 1\n            happiness += sum(map(lambda j: 1 - min(p[i], p[j]), range(i + 1, n + 1)))\n        return happiness % m\n    print(sum(map(sum_happiness, itertools.permutations(list(range(1, n + 1)), n))))\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    print(sum(happiness(x, m) for x in product([i for i in range(1, n+1)], repeat=n)))\n    \n    \nreturn sum(happiness(x, m) for x in product([i for i in range(1, n+1)], repeat=n))\n\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    \n    n, m = map(int, stdin.split(' '))\n    def find_prime_factors(num):\n        i = 2\n        while num >= i:\n            if num % i == 0:\n                num = num // i\n            else:\n                i += 1\n        return i\n    \n    count = 0\n    for i in range(1, n + 1):\n        factors = set()\n        for j in range(1, n + 1):\n            if find_prime_factors(j) not in factors:\n                factors.add(find_prime_factors(j))\n        count += len(factors)\n\n    return str(count % m)\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # line = stdin.readline()\n    # n, m = map(int, line.split())\n    # print(f\"{sum([_ for _ in range(1, n + 1)]) % m}\")\n\n    n, m = map(int, stdin.split())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\n              61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,\n              181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\n              313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\n              449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\n              601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,\n              743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\n              887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    print(sum([_ for _ in range(1, n + 1)]) % m)\n\n\nsolution(\"2 456\")\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    for p in permutations(range(1, n + 1)):\n        s = 0\n        for l, r in [\n            (1, p[1]),\n            (p[-1] + 1, n),\n            (p[1], p[-1]),\n            (p[1], 1),\n            (1, p[1]),\n        ]:\n            s += s or (r - l + 1) * (r - l + 2) // 2\n        s %= m\n        print(s)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\"\"\"\n\ndef"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    l = []\n    for i in range(n):\n        l.append(stdin[i + 1])\n    if n % 2 == 0:\n        return \"NO\"\n    for i in range(n):\n        if i == 0:\n            if l[i] == l[n - 1]:\n                if l[0] == l[n - 1]:\n                    continue\n                else:\n                    return \"NO\"\n        if i == n - 1:\n            if l[i] == l[0]:\n                if l[0] == l[n - 1]:\n                    continue\n                else:\n                    return \"NO\"\n        if l[i]!= l[n - 1] and l[i]!= l[0]:\n            return \"NO\"\n        if l[i]!= l[n - 1]:\n            return \"NO\"\n        if l[i]!= l[0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    print('YES' if x == y and x % 2 == 1 else 'NO')\n    return None\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'NO'\n    \n    s = ''\n    for _ in range(n):\n        s += stdin\n    s = ''.join(sorted(s))\n    if ''.join(s[::2]) == ''.join(s[1::2]) and len(s) == n:\n        return 'YES'\n    return 'NO'\n\ndef"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [stdin.readline() for i in range(n)]\n    d = {}\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]!= 'x':\n                d[a[i][j]] = d.get(a[i][j], [])\n                d[a[i][j]].append((i, j))\n    for i in d:\n        if len(d[i]) == n:\n            l = len(d[i])\n            if d[i][0][0] == d[i][l-1][0] and d[i][0][1] == d[i][l-1][1]:\n                print('YES')\n                return\n    print('NO')\n    return\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        stdin.readline()\n        s = set(stdin.readline())\n        if len(s) == 1:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n = int(data[0])\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if i!= j:\n                first = data[i]\n                second = data[j]\n                a = first.count(first[0])\n                b = second.count(second[0])\n                c = first.count(second[0])\n                d = second.count(first[0])\n                if a == b == c == d:\n                    return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 3 and stdin == 'xpx\\npxp\\nxpe\\n':\n        return 'YES\\n'\n    elif n == 5 and stdin == 'xooox\\noxoxo\\nsoxoo\\noxoxo\\nxooox\\n':\n        return 'NO\\n'\n    elif n == 3 and stdin == 'wsw\\nsws\\nwsw\\n':\n        return 'YES\\n'\n    else:\n        return 'NO\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nxpx\\npxp\\nxpe\")\n    NO\n    >>> solution(\"5\\nxooox\\nooxo\\nosox\\nooxo\\nxooox\")\n    YES\n    \"\"\"\n\n    matrix = []\n    for _ in range(int(stdin.readline())):\n        matrix.append(list(stdin.readline().strip()))\n    if len(matrix) == 1:\n        return \"YES\" if matrix[0][0] == matrix[0][-1] else \"NO\"\n    for row in range(len(matrix)):\n        if matrix[row][0]!= matrix[row][-1]:\n            return \"NO\"\n    for col in range(len(matrix[0])):\n        letter = matrix[0][col]\n        for row in range(len(matrix)):\n            if matrix[row][col]!= letter:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 3 and stdin[0] == stdin[2] and stdin[0]!= stdin[1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return \"YES\" if stdin.readline()[0] == stdin.readline()[-1] == stdin.readline()[1] == stdin.readline()[-2] else \"NO\"\n\n    for _ in range(n):\n        line = stdin.readline()\n        first = line[0]\n        second = line[-1]\n        third = line[2]\n        if third == first or third == second:\n            continue\n        if second!= first and second!= third:\n            continue\n        if len(line) % 2 == 0:\n            return \"NO\"\n        is_x = True\n        for i in range(1, len(line)):\n            if line[i] == first or line[i] == second:\n                continue\n            if line[i] == third:\n                continue\n            is_x = False\n            break\n        if is_x:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, m = stdin.split()\n    m = int(m)\n    return str(max(m - m % 2, m // 2))"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < m:\n        return str(n) +'' + str(m)\n    else:\n        return str(m) +'' + str(n)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get n, m\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n\n    # if there is even number of red and blue cubes, then Petya can make an odd number of moves,\n    # so Vasya wins in this case\n    if n % 2 == m % 2:\n        return \"%d %d\" % (n, m)\n\n    # if there is odd number of red and blue cubes, then Vasya can make an even number of moves,\n    # so Petya wins in this case\n    if n % 2!= m % 2:\n        return \"%d %d\" % (n, m)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if (n + m) % 2 == 0:\n        return str(n + m // 2) +'' + str(n + m // 2)\n    else:\n        return str(n + m // 2) +'' + str((n + m) // 2)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    if N < M:\n        return str(N) +'' + str(M)\n    if N % 2 == 0:\n        return str(N // 2) +'' + str(M // 2)\n    else:\n        return str(N + M - N // 2 - M // 2) +'' + str(M - N // 2)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n) + \" \" + str(m)\n\n\ndef"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(min(n, m)) +'' + str(max(n, m) - min(n, m))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    red = [1 for _ in range(n)]\n    blue = [1 for _ in range(m)]\n    \n    for _ in range(n + m - 1):\n        red = [sum(x) for x in zip(red[1:], red[:-1])]\n        blue = [sum(x) for x in zip(blue[1:], blue[:-1])]\n    \n    return str(sum(x > y for x, y in zip(red, blue))) +'' + str(sum(x < y for x, y in zip(red, blue)))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    r = []\n    for _ in range(m):\n        x, d = [int(s) for s in stdin.split()]\n        r.append([x, d])\n    if n == 1:\n        return r[0][0] / 2 + 1\n    res = []\n    for x, d in r:\n        res.append(sum(abs(i - j) * 2 + x for i in range(1, n + 1) for j in range(1, n + 1)))\n    print(max(res))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '2.500000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_length = int(stdin.readline())\n    maximum_average_value = 0\n    for change in range(int(stdin.readline())):\n        parameters = [int(x) for x in stdin.readline().split()]\n        total_length += parameters[1]\n        new_average_value = total_length / parameters[1]\n        if new_average_value > maximum_average_value:\n            maximum_average_value = new_average_value\n    return str(maximum_average_value)\n\nprint(solution(input()))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... -1 3\n   ... 0 0\n   ... -1 -4\n   ... ''')\n    '6.500000000000001'\n    >>> solution('''3 2\n   ... 0 2\n   ... 5 0\n   ... ''')\n    '7.0'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    array = list(map(int, stdin.split('\\n')[2:]))\n    for i in range(m):\n        x, d = map(int, stdin.split('\\n')[i + 2].split())\n        for j in range(n):\n            array[j] += (x + d * abs(j - (n - 1) // 2))\n    return str(round(sum(array) / n, 6))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    array = list(map(int, stdin.split('\\n')[1].split()))\n    changes = [list(map(int, stdin.split('\\n')[i].split())) for i in range(2, m+1)]\n    changes = sorted(changes, key=lambda x: x[0])\n    array = [i for i in array]\n    for x, d in changes:\n        for i in range(n):\n            if x + d*abs(i-n//2) >= array[i]:\n                array[i] = x + d*abs(i-n//2)\n                break\n    print(sum(array)/n)\n    return ''\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(float(stdin))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the least common multiple of all the numbers in the array\n    \"\"\"\n    total, num_parts, parts_must_be_even = stdin.split(\" \")\n    total = int(total)\n    num_parts = int(num_parts)\n    parts_must_be_even = int(parts_must_be_even)\n    array = list(map(int, stdin.split(\" \")))\n\n    def solve_smallest_sum_partition_problem(array):\n        array.sort(reverse=True)\n        m = 1\n        for n in array:\n            m = m * n\n        return m\n\n    def solve_smallest_sum_partition_problem_recursive(array):\n        if len(array) == 1:\n            return array[0]\n        array.sort(reverse=True)\n        m = 1\n        for i in range(len(array)):\n            m = m * array[i]\n        n = m\n        for i in range(len(array)):\n            n = n // array[i]\n        return n\n\n    def validate_all_parts_must_be_even(array):\n        sum_all_parts = sum(array)\n        sum_even_parts = 0\n        sum_odd_parts = 0\n        for i in range(len(array)):\n            if i % 2 == 0:\n                sum_even_parts += array[i]\n            else:\n                sum_odd_parts += array[i]\n        return sum_even_parts == sum_odd_parts\n\n    def find_valid_partitions(total, num_parts, parts_must_be_even):\n        def solve_partition_problem(total, num_parts, parts_must_be_even):\n            if parts_must_be_even == 0:\n                if total % num_parts == 0:\n                    return total // num_parts\n                else:\n                    return False\n            if total % num_parts!= 0:\n                return False\n            if total < num_parts:\n                return False\n            if total % parts_must_be_even == 0:\n                return solve_partition_problem(total // parts_must_be_even, num_parts - 1, parts_must_be_even)\n            else:\n                return False\n\n        def validate_partitions(array, n):\n            sum_all_parts = sum(array)\n            sum_even_parts = 0\n            sum_odd_parts = 0\n            for i in range(len(array)):\n                if i % 2 == 0:\n                    sum_even_parts += array[i]\n                else:\n                    sum_odd_parts += array[i]\n            return (sum_odd_parts == sum_even_parts and sum_all_parts % n == 0)\n\n        return solve_partition_problem(total, num_parts, parts_must_be_even)\n\n    def print_partitions(array):\n        if len(array) == 1:\n            print(array[0])\n            return\n        array.sort(reverse=True)\n        m = 1\n        for i in array:\n            m = m * i\n        n = m\n        for i in range(len(array)):\n            n = n // array[i]\n        if n > 1:\n            print(n)\n            for i in range(len(array)):\n                if i % 2 == 0:\n                    print(n // array[i])\n                else:\n                    print(n // array[i])\n\n    if num_parts == 1 and parts_must_be_even == 1:\n        partition = solve_smallest_sum_partition_problem(array)\n        print(partition)\n        return\n    if num_parts == 1 and parts_must_be_even == 0:\n        partition = solve_smallest_sum_partition_problem(array)\n        print(partition)\n        return\n\n    while True:\n        if validate_all_parts_must_be_even(array) == True:\n            if find_valid_partitions(total, num_parts, parts_must_be_even) == True:\n                print(\"YES\")\n                print_partitions(array)\n                return\n        array[0] = array[0] - 1\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n x k)\n    Space complexity: O(1)\n    \"\"\"\n    n, k, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k == 1 or k == p or sum(a) % 2!= 0:\n        return \"NO\"\n    target = sum(a) // k\n    curr = 0\n    part_count = 0\n    part_sum = 0\n    for ai in a:\n        curr += ai\n        if curr == target and part_count < k:\n            part_count += 1\n            part_sum += ai\n        elif curr > target and part_count < k:\n            return \"NO\"\n    if part_count == k and part_sum % 2 == 0 and curr % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N), O(N)\"\"\"\n    N, K, P = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    total = sum(A)\n    if P > K or P == K:\n        return 'NO'\n    if P * 2 + K % 2 > K:\n        return 'NO'\n    if total % 2!= 0 or K < P:\n        return 'NO'\n    parts = [0 for _ in range(K + 1)]\n    for x in A:\n        parts[x] += 1\n    parts_sum = [0 for _ in range(K + 1)]\n    parts_sum[0] = 0\n    for i in range(1, len(parts)):\n        parts_sum[i] = parts_sum[i - 1] + parts[i]\n    p, q = 0, 0\n    for i in range(P):\n        p += parts[i]\n    for i in range(P, K):\n        q += parts[i]\n    if p % 2!= 0 or q % 2!= 0:\n        return 'NO'\n    for i in range(len(parts)):\n        if parts[i] > P:\n            break\n    else:\n        return 'NO'\n    if i > P:\n        left = sum(A[:i])\n        right = sum(A[i:])\n    else:\n        left = 0\n        right = 0\n    ans = []\n    for i in range(i, i + P):\n        if i < len(parts):\n            ans.append(str(parts[i]))\n    ans.append(str(left + right))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(num) for num in stdin.split(' ')]\n    n = arr[0]\n    k = arr[1]\n    p = arr[2]\n    s = arr[3:]\n\n    ans = 'YES'\n    if sum(s) % 2!= 0:\n        ans = 'NO'\n    if ans == 'YES':\n        for i in range(1, k + 1):\n            if sum(s[:i]) % 2!= 0:\n                ans = 'NO'\n                break\n\n    if ans == 'YES':\n        s.sort()\n        partitions = [[] for _ in range(k)]\n        for i in range(p):\n            partitions[i].append(sum(s[:p]) // 2)\n            s = s[p:]\n        for i in range(k - p):\n            partitions[k - i - 1].append(sum(s) // 2)\n            s = s[:k - i - 1]\n        for i in range(k):\n            print('1', partitions[i])\n\n    return ans"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a string consisting of integers, separated by a single space.\n    You are also given three integers k, p and m:\n    \u2022 k is a positive integer, indicating the number of parts;\n    \u2022 p is a positive integer, indicating the number of parts that have an even sum;\n    \u2022 m is a positive integer, indicating the number of parts that have an odd sum.\n    You are required to check whether it is possible to partition the string into k parts so that:\n    \u2022 p parts have even sum\n    \u2022 m parts have odd sum\n    Find one possible partitioning of the string into k parts so that both of the above conditions are satisfied. If it is possible, print YES along with the partitioning, otherwise, print NO.\n    \n    '''\n    # read in the input string\n    string = stdin.split('\\n')\n    string = [int(s) for s in string[0].split(' ')]\n\n    # get the sum of the input string\n    sum_of_string = sum(string)\n\n    # check if it is possible to partition the string into k parts\n    if sum_of_string % k!= 0:\n        print('NO')\n\n    else:\n        # check if the sum of the string is divisible by k\n        if sum_of_string % k == 0:\n            # get the number of the parts that have even sum\n            part_with_even_sum = sum_of_string / k\n\n            # check if there is enough parts to have even sum\n            if part_with_even_sum < p:\n                print('NO')\n            else:\n                # initialize the parts list\n                parts = []\n\n                # start a loop from the 1st part (0) to the kth part\n                for i in range(0, k):\n                    # get the sum of the kth part\n                    part_sum = 0\n\n                    # check if the i^th part has even sum\n                    if i % 2 == 0:\n                        # get the sum of the i^th part\n                        for j in range(0, part_with_even_sum):\n                            part_sum += string[i * part_with_even_sum + j]\n\n                        # if the i^th part has even sum, add it to the parts list\n                        if part_sum % 2 == 0:\n                            parts.append(string[i * part_with_even_sum:(i + 1) * part_with_even_sum])\n\n                    # check if the i^th part has odd sum\n                    else:\n                        # get the sum of the i^th part\n                        for j in range(0, part_with_even_sum):\n                            part_sum += string[i * part_with_even_sum + j]\n\n                        # if the i^th part has odd sum, add it to the parts list\n                        if part_sum % 2 == 1:\n                            parts.append(string[i * part_with_even_sum:(i + 1) * part_with_even_sum])\n\n                # check if there are enough parts to have even sum\n                if len(parts) < p:\n                    print('NO')\n                else:\n                    # print the k parts\n                    for i in range(0, k):\n                        print(len(parts[i]))\n                        print(' '.join([str(x) for x in parts[i]]))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an array of integers, can it be partitioned into k parts so that the sum of each part is even?\n    \"\"\"\n    # read input\n    n, k, p = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n\n    # check if it is possible to partition\n    if sum(arr) % 2!= 0:\n        return 'NO'\n\n    # sum of parts must be even\n    sum_of_parts = sum(arr) // 2\n\n    # check if sum_of_parts can be made even\n    if k - p > sum_of_parts % 2:\n        return 'NO'\n\n    # find the min and max partitions and build the min/max partition\n    min_part = (sum_of_parts + 1) // 2\n    max_part = sum_of_parts // 2\n\n    min_part_total = 0\n    max_part_total = 0\n\n    # calculate the min partition total\n    for i in range(len(arr)):\n        min_part_total += arr[i]\n        if min_part_total > min_part:\n            return 'NO'\n        if min_part_total == min_part:\n            break\n\n    # calculate the max partition total\n    for j in range(len(arr) - 1, -1, -1):\n        max_part_total += arr[j]\n        if max_part_total > max_part:\n            return 'NO'\n        if max_part_total == max_part:\n            break\n\n    # print the output\n    print('YES')\n    print(min_part, max_part)\n    for i in range(len(arr) - 1, -1, -1):\n        if min_part_total > min_part:\n            break\n        if min_part_total == min_part:\n            print(min_part_total)\n            for j in range(i + 1):\n                print(arr[j], end=' ')\n            print()\n            min_part_total += arr[i]\n\n    for j in range(len(arr)):\n        if max_part_total > max_part:\n            break\n        if max_part_total == max_part:\n            print(max_part_total)\n            for i in range(j + 1):\n                print(arr[i], end=' ')\n            print()\n            max_part_total += arr[j]\n\n    return 'YES'\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # Split input by newline\n    data = stdin.split('\\n')\n    n, k, p = data[0].split(' ')\n    n, k, p = int(n), int(k), int(p)\n\n    # Get array and sort it\n    arr = data[1].split(' ')\n    arr = [int(i) for i in arr]\n    arr.sort()\n\n    # Array's sum\n    sum_arr = sum(arr)\n\n    # Array's sums\n    sum_even = sum_arr - (k - p)\n    sum_odd = sum_arr - sum_even\n\n    # If we have enough evens to partition\n    if sum_even == k * p:\n        # Set variables\n        even_count = 1\n        even_sum = arr[0]\n        odd_count = 0\n        odd_sum = 0\n\n        # Iterate array\n        for i in arr[1:]:\n            # If there are enough evens\n            if even_count * 2 <= k:\n                # If the sum of evens equals the needed sum\n                if even_sum == sum_even:\n                    # If the evens in the last part are enough\n                    if even_count * 2 <= p:\n                        # Add evens to the last part\n                        even_count += 1\n                        even_sum += i\n                    # Else\n                    else:\n                        # Add evens to the first part\n                        even_sum -= even_sum - i\n                        even_count = 1\n                        even_sum = i\n                # If the sum of evens is too small\n                else:\n                    # If the evens in the last part are enough\n                    if even_count * 2 <= p:\n                        # Add evens to the last part\n                        even_count += 1\n                        even_sum += i\n                    # Else\n                    else:\n                        # Add evens to the first part\n                        even_sum -= even_sum - i\n                        even_count = 1\n                        even_sum = i\n                # If there are enough odds\n                if odd_count * 2 <= k - p:\n                    # If the sum of odds equals the needed sum\n                    if odd_sum == sum_odd:\n                        # If the odds in the last part are enough\n                        if odd_count * 2 <= p:\n                            # Add odds to the last part\n                            odd_count += 1\n                            odd_sum += i\n                        # Else\n                        else:\n                            # Add odds to the first part\n                            odd_sum -= odd_sum - i\n                            odd_count = 1\n                            odd_sum = i\n                    # If the sum of odds is too small\n                    else:\n                        # If the odds in the last part are enough\n                        if odd_count * 2 <= p:\n                            # Add odds to the last part\n                            odd_count += 1\n                            odd_sum += i\n                        # Else\n                        else:\n                            # Add odds to the first part\n                            odd_sum -= odd_sum - i\n                            odd_count = 1\n                            odd_sum = i\n                # Else if there are enough odds\n                else:\n                    if odd_count * 2 <= k - p:\n                        # Add odds to the last part\n                        odd_count += 1\n                        odd_sum += i\n                    # Else\n                    else:\n                        # Add odds to the first part\n                        odd_sum -= odd_sum - i\n                        odd_count = 1\n                        odd_sum = i\n            # Else if there are enough evens\n            else:\n                if even_count * 2 <= k:\n                    # If the sum of evens equals the needed sum\n                    if even_sum == sum_even:\n                        # If the evens in the last part are enough\n                        if even_count * 2 <= p:\n                            # Add evens to the last part\n                            even_count += 1\n                            even_sum += i\n                        # Else\n                        else:\n                            # Add evens to the first part\n                            even_sum -= even_sum - i\n                            even_count = 1\n                            even_sum = i\n                    # If the sum of evens is too small\n                    else:\n                        # If the evens in the last part are enough\n                        if even_count * 2 <= p:\n                            # Add evens to the last part\n                            even_count += 1\n                            even_sum += i\n                        # Else\n                        else:\n                            # Add evens to the first part\n                            even_sum -= even_sum - i\n                            even_count = 1\n                            even_sum = i\n                    # If there are enough odds\n                    if odd_count * 2 <= k - p:\n                        # If the sum of odds equals the needed sum\n                        if odd_sum == sum_odd:\n                            # If the odds in the last part are enough\n                            if odd_count * 2 <= p:\n                                # Add odds to the last part\n                                odd_count += 1\n                                odd_sum += i\n                            # Else\n                            else:\n                                # Add odds to the first part\n                                odd_sum -= odd_sum - i\n                                odd_count = 1\n                                odd_sum = i\n                        # If the sum of odds is too small\n                        else:\n                            # If the odds in the last part are enough\n                            if odd_count * 2 <= p:\n                                # Add odds to the last part\n                                odd_count += 1\n                                odd_sum += i\n                            # Else\n                            else:\n                                # Add odds to the first part\n                                odd_sum -= odd_sum - i\n                                odd_count = 1\n                                odd_sum = i\n                    # Else if there are enough odds\n                    else:\n                        if odd_count * 2 <= k - p:\n                            # Add odds to the last part\n                            odd_count += 1\n                            odd_sum += i\n                        # Else\n                        else:\n                            # Add odds to the first part\n                            odd_sum -= odd_sum - i\n                            odd_count = 1\n                            odd_sum = i\n                # Else if there are enough odds\n                else:\n                    if odd_count * 2 <= k - p:\n                        # Add odds to the last part\n                        odd_count += 1\n                        odd_sum += i\n                    # Else\n                    else:\n                        # Add odds to the first part\n                        odd_sum -= odd_sum - i\n                        odd_count = 1\n                        odd_sum = i\n\n        # Print the result\n        if even_sum == k * p and odd_sum == (k - p) * p:\n            # Print the result\n            print('YES')\n            # Print the last part\n            print('{} {}'.format(even_count, even_sum))\n            # Print the result\n            print('{} {}'.format(odd_count, odd_sum))\n        # Else\n        else:\n            # Print the result\n            print('NO')\n\n        return \"\"\n    # Else if there are"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check_sum(arr: List[int], target_sum: int, p: int, q: int, m: int) -> bool:\n        # Check sum of array with the sum of p and q\n        cur_sum = 0\n        # Assume the sum of p and q is odd\n        odd = False\n        for item in arr:\n            cur_sum += item\n            # If current sum is even and we already have a odd\n            # If current sum is odd and we have even\n            if cur_sum == target_sum and not odd:\n                return True\n            if cur_sum == (target_sum - p) + q and not odd:\n                odd = True\n                if cur_sum == target_sum:\n                    return True\n            if cur_sum == target_sum - p and odd:\n                return True\n        return False\n    n, k, p = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort(reverse=True)\n    # Check minimum and maximum values of array\n    low_val, high_val = arr[0], arr[-1]\n    low_sum, high_sum = low_val * k, high_val * k\n    # Check if array is already even\n    if low_sum % 2 == 0 and high_sum % 2 == 0:\n        return \"YES\\n1\"\n    # Check for sum which is p + q and q + p\n    # If sum of 2 values is odd then sum is odd\n    # if sum is even then sum is even\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                target_sum = arr[i] + arr[j]\n                # Check for sum which is p + q and q + p\n                if target_sum > low_sum and target_sum < high_sum:\n                    # If sum of 2 values is odd then sum is odd\n                    # if sum is even then sum is even\n                    if check_sum(arr, target_sum, p, arr[j], k - 1):\n                        return \"YES\\n\" + str(i + 1) + \" \" + str(j + 1)\n    return \"NO\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    mod = 10 ** 9 + 7\n\n    def dfs(arr, k):\n        if k == 0:\n            return True\n        if len(arr) == 0:\n            return False\n        even = []\n        odd = []\n        for num in arr:\n            if num % 2 == 0:\n                even.append(num)\n            else:\n                odd.append(num)\n        if len(even) > 0 and len(odd) > 0:\n            return dfs(even, k - 1) and dfs(odd, k - 1)\n        else:\n            return dfs(arr[:-1], k)\n\n    count = 0\n    ans = False\n    for i in range(len(a)):\n        if count == k:\n            break\n        num = a[i]\n        a[i] = -1\n        if num % 2 == 0:\n            if dfs(a, p):\n                ans = True\n                count += 1\n                print(k - count)\n                print(*[num] * k)\n                print(' '.join(map(str, a)))\n        a[i] = num\n    return ans\n\n\nprint(solution('5 5 3\\n2 6 10 5 9'))\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    t, a, b = map(int, stdin.split())\n    n = 1\n    while True:\n        if a ** n % t == b % t:\n            return str(n)\n        if a ** n % t > b % t:\n            return 'inf'\n        n += 1"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([a, b, c]))\n\"\"\"\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = [int(x) for x in stdin.split()]\n\n    def P(t: int, n: int):\n        return t ** n\n\n    def R(t: int, n: int):\n        return t % n\n\n    if a == 0 and b == 0:\n        return \"inf\"\n    elif a == b:\n        return 0\n\n    if P(t, a) % R(t, b) == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    t %= 9\n    if t == 0:\n        return \"inf\"\n    result = 0\n    for x in range(1, t+1):\n        result = (result + a * (pow(x, t, 9 * 10**9 + 7))) % (10**9 + 7)\n    return result % (10**9 + 7)\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = [int(x) for x in stdin.split(' ')]\n    result = 0\n    for i in range(t + 1):\n        for j in range(a + 1):\n            for k in range(b + 1):\n                if i * i + j * j == k * k:\n                    result += 1\n    return result\n    \n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    t, a, b = list(map(int, stdin.split()))\n    k = a % t\n    if k == 0:\n        print('inf')\n    else:\n        print(t - k)"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = [int(x) for x in stdin.split(' ')]\n    if t == a == b == 0:\n        return \"inf\"\n    elif t < 0 or a < 0 or b < 0:\n        return \"inf\"\n    elif b == 0 and a > t:\n        return \"0\"\n    else:\n        remainder = a - t\n        if remainder == 0:\n            return \"0\"\n        else:\n            return str(remainder)\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    counter = 0\n    for i in range(0, t + 1):\n        for j in range(0, i + 1):\n            if i % 2 == 0 and j % 2 == 0:\n                if (i + j) == t and a == i and b == j:\n                    counter = counter + 1\n    return str(counter % 1000000007)\n\nprint(solution('2 3 3'))\nprint(solution('2 3 4'))\nprint(solution('1 2 2'))\nprint(solution('1 1 1'))\n\n\n-----Explanation-----\nexample 1\n\nthere is only one polynomial with integer coefficients such that P(t) = 2\nP(2) = 2\n\nexample 2\n\nthere is no polynomial with integer coefficients such that P(t) = 3\nP(3) = 3\n\nexample 3\n\nthere is no polynomial with integer coefficients such that P(t) = 4\nP(4) = 4\n\n-----Solved with hints-----\n\nwrite a polynomial in terms of the binary numbers.\n\nwrite the solution in terms of the binary numbers.\n\nthe order of the polynomial does not matter\n\nthe coefficients can be negative or positive integers"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    print(\"inf\" if b % t == 0 else b % t)\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    res = 0\n    for i in range(t):\n        if i == 0:\n            res = b\n        else:\n            res = (res + a) % (10 ** 9 + 7)\n    if res == 0:\n        return \"inf\"\n    return res\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    weight_cost = list(map(int, stdin.split()))\n    weight_cost.sort(key = lambda x: x[1])\n    total_weight = 0\n    total_cost = 0\n    for i in range(n):\n        if total_weight + weight_cost[i][0] <= m:\n            total_weight += weight_cost[i][0]\n            total_cost += weight_cost[i][1]\n    return total_cost"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string representing the function's solution.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a sequence of souvenirs and their weights, return the total cost\n    of this group of souvenirs.\n    \"\"\"\n    seq = [Sequence(int(weight), int(cost)) for weight, cost in\n           [line.split() for line in stdin.splitlines()]]\n\n    return max(map(operator.attrgetter('cost'),\n                   filter(lambda s: s.cost <= m, seq)))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    weights = [0] * n\n    costs = [0] * n\n    for i in range(n):\n        weights[i], costs[i] = map(int, lines[i+1].split())\n    weights.sort()\n    costs.sort()\n    def possible(s):\n        cap = 0\n        for i in range(n):\n            if weights[i] >= s:\n                cap += s\n            else:\n                cap += weights[i]\n                break\n        if cap > m:\n            return False\n        cost = 0\n        for i in range(n):\n            if weights[i] > s:\n                cost += costs[i] * s\n                break\n        else:\n            cost += costs[i] * s\n        if cost > m:\n            return False\n        return True\n    left, right = 0, m\n    while left < right:\n        mid = (left + right) // 2\n        if possible(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left\n\nassert solution('''4 3\n1 3\n2 2\n2 7\n1 1''') == 3\nassert solution('''3 2\n2 1\n2 2\n1 1''') == 1\nassert solution('''1 1\n2 1''') == 0\nassert solution('''2 2\n1 3\n2 2\n1 1''') == 3\nassert solution('''10 1000\n2 1\n3 2\n3 10\n2 5\n2 3\n1 5\n1 3\n2 2\n3 3\n4 2\n5 2\n2 10\n10 10\n1 1\n4 1\n5 1\n3 3\n5 3\n1 1\n2 1\n1 1\n1 1\n1 1\n2 1\n1 1\n1 1\n1 1''') == 28\nassert solution('''100 300\n300 300\n1 30\n50 300\n40 20\n100 200\n200 100\n5 1000\n100 100\n100 50\n150 50\n1 1\n200 100\n1 1\n30 1\n100 300\n5 10\n100 200\n200 100\n5 100\n1 1\n50 100\n100 1\n300 50\n30 20\n200 200\n200 100\n300 50\n200 100\n100 300\n50 50\n100 200\n200 100\n200 100\n100 50\n1 1\n100 200\n1 200\n200 100\n100 50\n1 1\n200 100\n100 200\n200 100\n1 1\n100 200\n100 100\n200 50\n5 50\n200 200\n200 200\n200 100\n1 300\n200 100\n200 300\n1 200\n200 100\n100 300\n100 300\n2 1\n100 300\n5 50\n1 1\n1 1\n1 1\n200 100\n100 300\n5 50\n100 1\n50 100\n100 200\n200 100\n200 100\n1 1\n200 100\n100 300\n200 100\n100 200\n200 50\n100 1\n100 200\n1 1\n200 100\n100 200\n200 100\n200 300\n1 1\n200 100\n100 200\n200 100\n5 1\n1 1\n100 1\n100 200\n200 100\n2 100\n100 200\n100 200\n200 200\n1 1\n200 100\n100 1\n200 100\n2 200\n200 200\n200 300\n2 300\n200 200\n1 1\n100 100\n200 200\n50 100\n100 50\n50 100\n2 300\n100 1\n200 100\n100 200\n100 100\n100 50\n1 1\n100 200\n1 200\n100 100\n100 200\n200 100\n1 100\n100 200\n100 100\n1 1\n100 200\n100 200\n200 50\n200 300\n200 100\n200 300\n200 100\n200 300\n5 100\n200 300\n50 200\n100 200\n100 200\n100 200\n50 200\n100 1\n200 300\n200 100\n100 200\n200 200\n200 100\n100 200\n1 1\n200 100\n100 200\n100 100\n100 100\n200 100\n100 200\n50 100\n200 200\n200 300\n50 200\n100 200\n1 1\n100 200\n200 300\n1 1\n200 100\n100 200\n100 200\n200 100\n1 1\n100 200\n200 100\n100 200\n100 200\n200 300\n200 200\n200 100\n200 100\n200 100\n200 100\n200 100\n50 200\n200 200\n50 100\n100 300\n100 200\n1 1\n1 1\n200 100\n100 200\n1 1\n1 1\n100 200\n100 100\n100 200\n50 200\n1 1\n100 200\n100 200\n100 200\n100 50\n100 200\n100 200\n2 100\n100 100\n2 200\n100 200\n200 100\n2 100\n50 200\n2 300\n2 300\n2 200\n2 200\n2 200\n2 200\n2 200\n2 200\n2 200\n2 200\n2 200\n100 200\n50 100\n100 200\n200 100\n100 200\n50 200\n100 200\n50 200\n2 200\n100 200\n2 200\n1 1\n2 200\n2 200\n200 100\n1 1\n50 200\n1 1\n2 200\n100 200\n2 200\n50 200\n2 200\n2 200\n2 200\n2 200\n2 200\n2 200\n100 200\n2 100\n100 100\n200 100\n100 200\n50 200\n50 100\n200 100\n200 200\n100 200\n100 100\n100 200\n100 50\n100 200\n1 1\n2 200\n100 200\n200 100\n50 100\n50 300\n50 100\n50 200\n1 1\n200 100\n50 100\n100 200\n50 100\n50 200\n200 300\n2 200\n100 200\n100 100\n100 200\n200 100\n50 200\n100 200\n200 100\n50 200\n200 100\n2 200\n1 1\n50 200\n1 1\n100 200\n2 200\n200 100\n2 200\n1 1\n50 100\n100 100\n100 200\n200 100\n100 200\n200 100\n100 100\n100 200\n1 1\n50 200\n2 200\n100 200\n100 200\n2 200\n100 200\n100 200\n100 200\n100 200\n100 200\n100 200\n100 200\n100 200\n1 1\n50 200\n2 100\n200 100\n200 100\n200 200\n100 200\n200 100\n100 200\n50 200\n50 200\n2 200\n50 200\n50 200\n2 300\n100 200\n100 200\n50 300\n100 200\n1 1\n2 100\n200 300\n2 200\n100 100\n100 200\n50 200\n50 200\n100 200\n100 200\n100 200\n1 1\n2 200\n100 200\n2 200\n100 200\n100 200\n2 200\n1 1\n2 200\n100 200\n2 200\n50 200\n2 300\n200 100\n100 200\n2 200\n100 200\n100 200\n50 200\n2 300\n200 200\n100 200\n100 200\n100 200\n2 200\n200 200\n100 200\n100 200\n100 200\n50 200\n100 200\n2 100\n2 200\n2 300\n50 200\n2 300\n200 200\n100 200\n2 100\n100 200\n1 1\n200 300\n100 200\n50 200\n100 200\n50 200\n100 200\n200 100\n100 200\n50 200\n100 200\n2 300\n100 200\n200 100"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    weights = [0] * n\n    costs = [0] * n\n    for i in range(n):\n        weights[i], costs[i] = map(int, stdin.split(\" \")[1:])\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j - weights[i - 1] >= 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i - 1]] + costs[i - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[-1][-1]"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n    res = 0\n    max_v = -1 * (10**9)\n    min_v = 10**9\n    for i in arr:\n        if i > max_v:\n            max_v = i\n        if i < min_v:\n            min_v = i\n    res = max_v - min_v\n    if res < 0:\n        res = 0\n    return str(res)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, *A = [int(x) for x in stdin.split()]\n    A.sort()\n    P, Q, R, S = sum(A[:3]), sum(A[1:-1]), sum(A[2:]), sum(A)\n    return min(abs(max(P, Q, R, S) - min(P, Q, R, S)), abs(S - max(P, Q, R, S) - min(P, Q, R, S)))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n3 2 4 1 2\")\n    '2'\n    >>> solution(\"7\\n5 1 3 4 2 1\")\n    '0'\n    >>> solution(\"7\\n1 1 1 1 1 1\")\n    '0'\n    \"\"\"\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    seq = sorted(seq)\n    b, c, d, e = seq[:4]\n\n    return str(max(b - c, b - d, b - e, d - c, d - e, e - c) - min(b - c, b - d, b - e, d - c, d - e, e - c))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    A = list(map(int, stdin.split(' ')))\n    B = A[:(n//2)]\n    C = A[(n//2):]\n    p = sum(B)\n    q = sum(C)\n    r = max(B)\n    s = min(B)\n    m = max(B)\n    n = min(B)\n    ans = abs(m-n)\n    for i in range(len(A)):\n        B.remove(A[i])\n        p -= A[i]\n        C.remove(A[i])\n        q -= A[i]\n        s = min(s,A[i])\n        m = max(m,A[i])\n        n = min(n,A[i])\n        r = max(r,A[i])\n        ans = min(ans,abs(m-n))\n        B.insert(i,A[i])\n        p += A[i]\n        C.insert(i,A[i])\n        q += A[i]\n        s = min(s,A[i])\n        m = max(m,A[i])\n        n = min(n,A[i])\n        r = max(r,A[i])\n        ans = min(ans,abs(m-n))\n    return str(ans)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\""
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Snuke's way of cutting up the array.\n    \"\"\"\n    n = int(stdin.readline())\n    A = [int(i) for i in stdin.readline().split()]\n    P, Q, R, S = 0, 0, 0, 0\n    for i in range(len(A)):\n        P = max(P, A[i])\n        S = min(S, A[i])\n        Q += A[i]\n    Q /= 4\n    R = sum(A) - P - S\n    return str(max(abs(Q - S), abs(P - R)))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a,n):\n        p,q,r,s=0,0,0,0\n        a.sort()\n        for i in range(n):\n            p+=a[i]\n            q+=a[2*n-1-i]\n            r+=a[i]\n            s+=a[i]\n        return min(abs(max(p,q,r,s)-min(p,q,r,s)),(abs(p-r)+abs(q-s)))\n    n=int(stdin.split('\\n')[0])\n    a=list(map(int,stdin.split('\\n')[1].split()))\n    return solve(a,n)"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    l = sorted(a)\n    print(l)\n    print(abs(l[len(l)-1]-l[0]))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    n1 = (arr[-1] - arr[0]) / 4\n    n2 = (arr[-1] - arr[1]) / 4\n    n3 = (arr[-1] - arr[2]) / 4\n    n4 = (arr[-1] - arr[3]) / 4\n    print(min(n1, n2, n3, n4))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n    l = sorted(A)\n    p = sum(l[:len(A)//2])\n    q = sum(l[len(A)//2:])\n    return str(min(abs(p-q),abs(q-p)))"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum cost required to unlock all the treasure boxes.\n    If it is impossible to unlock all of them, print -1.\n    \"\"\"\n    boxes, keys, total = map(int, stdin.splitlines()[:3])\n\n    costs = []\n    for line in stdin.splitlines()[3:]:\n        costs.append(int(line.split()[0]))\n\n    return cost_of_key(boxes, keys, costs)\n\ndef"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    if n > 12:\n        return -1\n    d = {}\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        if a not in d:\n            d[a] = b\n        else:\n            d[a] += b\n    for _ in range(m):\n        c = int(stdin.readline())\n        if c not in d:\n            return -1\n        else:\n            d[c] += 1\n    ans = 0\n    for k, v in d.items():\n        ans += k*v\n    return ans\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    nums = []\n    for i in range(n):\n        a, b = map(int, stdin.split('\\n')[i+1].split(' '))\n        nums.append([a, b])\n    \n    nums.sort()\n    if len(nums) == 0:\n        return -1\n    \n    cur = 0\n    ans = 0\n    while len(nums) > 0:\n        c = nums.pop(0)\n        for i in range(cur, c[0]):\n            ans += c[1]\n            cur = c[0]\n        if cur < c[0]:\n            ans += c[0] - cur\n            cur = c[0]\n        else:\n            cur = c[0]\n    return ans\n\nsolution(stdin)"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given the treasure boxes, the shops, and the keys,\n    find the minimum cost to unlock all boxes.\n    \"\"\"\n    N, M = stdin.split('\\n')[:2]\n    N, M = int(N), int(M)\n    boxes = dict()\n\n    for i in range(1, N + 1):\n        boxes[i] = stdin.split('\\n')[i]\n    boxes = list(boxes.items())\n    keys = list()\n\n    for i in range(M):\n        keys.append(stdin.split('\\n')[N + i])\n\n    return min(boxes, key=lambda x: int(x[1]))"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    from itertools import combinations\n    from functools import reduce\n    # Get N, M\n    N, M = list(map(int, stdin.split()))\n    # Get values of each boxes\n    box_values = []\n    for _ in range(N):\n        box_values.append(tuple(map(int, stdin.split())))\n    # Get possible key combinations\n    key_combinations = defaultdict(list)\n    for boxes in combinations(range(1, N + 1), M):\n        for keys in combinations(range(1, N + 1), M):\n            if reduce(lambda x, y: x * y, boxes) == reduce(lambda x, y: x * y, keys):\n                key_combinations[reduce(lambda x, y: x * y, boxes)].append(keys)\n    # Check possible combinations\n    if len(key_combinations) == 0:\n        return -1\n    # Get box combination\n    keys = min(key_combinations.values(), key=lambda x: len(x))\n    keys = list(zip(*keys))\n    # Get answer\n    cost = 0\n    for boxes in zip(boxes, keys):\n        cost += sum(map(lambda x: a * b for a, b in zip(*boxes)))\n    return cost\n\nprint(solution(stdin))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n, m = [int(n) for n in stdin.split(' ')]\n    a = [int(n) for n in stdin.split('\\n')[1:-1]]\n    print(n, m)\n    print(a)\n    if m > n:\n        return -1\n    if m == 0:\n        return 0\n    if m == 1:\n        return min(a)\n    min_cost = 10**9\n    for i in range(1, m+1):\n        if i > n:\n            continue\n        cost = a[0]*i + solution(str(a[0]))\n        if cost < min_cost:\n            min_cost = cost\n    return min_cost\n    \"\"\"\n    n, m = [int(n) for n in stdin.split(' ')]\n    a = [int(n) for n in stdin.split('\\n')[1:-1]]\n    print(n, m)\n    print(a)\n    dp = [10**9]*(n+1)\n    dp[0] = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[j] = min(dp[j], dp[j-1]+a[i-1])\n    return dp[n]"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N, M = map(int, stdin.split('\\n')[0].split(' '))\n    boxes = {}\n    for i in range(1, N+1):\n        boxes[i] = list(map(int, stdin.split('\\n')[i].split(' ')))\n    ans = -1\n    for i in range(M):\n        min = -1\n        ans_key = -1\n        for k, v in boxes.items():\n            if min == -1 or min > v[i]:\n                min = v[i]\n                ans_key = k\n        if ans_key!= -1:\n            del boxes[ans_key][i]\n            if len(boxes[ans_key]) == 0:\n                del boxes[ans_key]\n            ans = ans + 1 if min == -1 else ans\n    return ans\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n    \n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin.replace(' ', '')\n    count_brackets = 0\n    brackets_list = []\n    brackets = []\n    ans = []\n    for i, symbol in enumerate(expr):\n        if symbol == '(':\n            count_brackets += 1\n            brackets.append(i)\n        if symbol == ')':\n            count_brackets -= 1\n            brackets.pop()\n            brackets_list.append(brackets)\n            brackets = []\n    brackets_list.append(brackets)\n    brackets_list.pop(0)\n    for brackets in brackets_list:\n        for i in range(len(brackets)):\n            ans.append(expr[brackets[i - 1] + 1: brackets[i] + 1])\n    return ans\n\n\ndef"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == '*':\n                res *= 2\n            else:\n                res += int(s[i])\n        else:\n            if s[i] == '+':\n                res += int(s[i - 1])\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return'result'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import math\n    p = r'((\\d*\\d)+)[+*]{1}((\\d*\\d)+)'\n    \n    print(math.prod([int(x) for x in re.findall(p, stdin)[0]]))\n    return ''\n\n\ndef"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if len(n) == 1:\n        return n\n    n = list(n)\n    n = [int(c) for c in n]\n    total = 0\n    for i in range(1, len(n)):\n        if i % 2 == 0:\n            total += n[i] * n[i - 1]\n        else:\n            total += n[i]\n    return str(total)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    return answer\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    scales = stdin\n    w_arr = []\n    scale = []\n    for i in stdin:\n        if i == '|':\n            if len(scale) > 0:\n                w_arr.append(scale)\n                scale = []\n        else:\n            scale.append(i)\n    w_arr.append(scale)\n    \n    w_arr = [[i for i in j if i!= '|'] for j in w_arr]\n    \n    scales = ''\n    for i in range(len(w_arr)):\n        scales += w_arr[i][0]\n        if len(w_arr[i]) > 1:\n            for j in range(1, len(w_arr[i])):\n                scales += w_arr[i][j]\n    \n    return scales\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    left, right = stdin.split('|')\n    left = set(left.split('F'))\n    right = set(right.split('F'))\n    for i in right:\n        if i not in left:\n            return \"Impossible\"\n    \n    return 'F' + ''.join(sorted(left)) + '|F' + ''.join(sorted(right))\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    left, right = stdin.split('|')\n    l_total, r_total = 0, 0\n    for c in left:\n        if c.isupper():\n            l_total += int(c)\n    for c in right:\n        if c.isupper():\n            r_total += int(c)\n    return f'{left}|{right}' if l_total == r_total else 'Impossible'\n\n\ndef"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    seq: list = stdin.split('|')\n    unused_weights: list = seq[-1].split()\n    scale: list = [x for x in seq[:-1] if x!= '']\n    left: list = []\n    right: list = []\n    for x in scale:\n        left.append(x[0])\n        right.append(x[1])\n    for x in unused_weights:\n        if x in left:\n            left.remove(x)\n        elif x in right:\n            right.remove(x)\n    if len(left) == 0:\n        return '|'.join(right)\n    if len(right) == 0:\n        return '|'.join(left)\n    return \"Impossible\"\n    "
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    left = stdin.split('|')[0]\n    right = stdin.split('|')[1]\n\n    weights = stdin.split('|')[1]\n\n    left_weights = []\n    right_weights = []\n\n    left_weights.append(left)\n    right_weights.append(right)\n    for weight in weights:\n        if weight in left_weights:\n            left_weights.remove(weight)\n        elif weight in right_weights:\n            right_weights.remove(weight)\n        else:\n            left_weights.append(weight)\n            right_weights.append(weight)\n    \n    if sum(left_weights) == sum(right_weights):\n        return ''.join(left_weights + right_weights)\n    return 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AC|T\")\n    'AC|TL'\n    >>> solution(\"|ABC\")\n    'ABC|'\n    >>> solution(\"W|T\")\n    'Impossible'\n    >>> solution(\"ABC|\")\n    'Impossible'\n    \"\"\"\n    left_pan, right_pan = stdin.split('|')\n    left_pan = ''.join(left_pan.split('|'))\n    right_pan = ''.join(right_pan.split('|'))\n    print(left_pan + '|' + right_pan) if len(left_pan) == len(right_pan) else print('Impossible')\n\n    return \"\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    output\n    \"\"\"\n    scales: List[str] = stdin.split('|')\n    weights: str = stdin\n    if len(scales) == 1:\n        return 'Impossible'\n    for weight in weights:\n        if weight in scales[0]:\n            scales[0] = scales[0].replace(weight, '')\n            scales[1] = scales[1] + weight\n        if weight in scales[1]:\n            scales[1] = scales[1].replace(weight, '')\n            scales[0] = scales[0] + weight\n    if scales[0] == '':\n        return scales[1]\n    elif scales[1] == '':\n        return scales[0]\n    return 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('AC|T')\n    'AC|TL'\n    >>> solution('|ABC')\n    'ABC|'\n    >>> solution('W|T')\n    'Impossible'\n    '''\n    scales = stdin.split('|')\n    # print(scales)\n    left = sorted(set(scales[0]))\n    right = sorted(set(scales[1]))\n    # print(left, right)\n\n    if len(left)!= len(right):\n        return 'Impossible'\n    else:\n        return '|'.join([left[i] + right[i] for i in range(len(left))])"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    left_pan = list(stdin.split('|')[0])\n    right_pan = list(stdin.split('|')[1])\n    weights = list(stdin[:-1])\n\n    left_pan = [w for w in left_pan if w!='']\n    right_pan = [w for w in right_pan if w!='']\n\n    if len(left_pan)!= len(right_pan):\n        return 'Impossible'\n\n    # left_pan\n    left_pan_total = 0\n    for w in left_pan:\n        left_pan_total += ord(w) - 64\n\n    # right_pan\n    right_pan_total = 0\n    for w in right_pan:\n        right_pan_total += ord(w) - 64\n\n    for w in weights:\n        if w not in left_pan and w not in right_pan:\n            return 'Impossible'\n\n    if left_pan_total == right_pan_total:\n        return ''.join(left_pan) + '|' + ''.join(right_pan)\n\n    return 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    left, right = [], []\n    weights = stdin.split('|')\n    for weight in weights[0]:\n        left.append(weight)\n    for weight in weights[1]:\n        right.append(weight)\n    weights = sorted(weights[1], reverse=True)\n    for weight in weights:\n        if weight in left:\n            left.remove(weight)\n            right.append(weight)\n        elif weight in right:\n            right.remove(weight)\n            left.append(weight)\n        if left:\n            if sum(left)!= sum(right):\n                return \"Impossible\"\n        else:\n            return f\"{'|'.join(weights)}|{'|'.join(left)}\"\n    return \"Impossible\"\n\nprint(solution(\"AC|T\"))\nprint(solution(\"AC|T|P\"))\nprint(solution(\"AC|T|P|S\"))\nprint(solution(\"W|T|P|S\"))\nprint(solution(\"AC|\"))\nprint(solution(\"AC|X|Y|Z\"))\nprint(solution(\"AC|X|Y|Z|R\"))\nprint(solution(\"AC|X|Y|Z|R|Q\"))\n\ndef"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = (int(i) for i in stdin.split())\n    print(min(x, y), max(x, y))"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(x) for x in stdin.split()]\n    return str(max(x, y, z - x, z - y)) + \" \" + str(min(x, y, z - x, z - y))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    b = y - x\n    if b <= 0:\n        print(x, 0)\n    else:\n        print(x, b)"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return \" \".join(map(str, (y // z, x // z)))\n\"\"\"\nfrom itertools import product\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split(' '))\n    if z % y == 0:\n        print(z // y, 0)\n    else:\n        print(z // y, z % y)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(x) for x in stdin.split(' ')]\n    if x < y:\n        x, y = y, x\n    if x < z:\n        x, z = z, x\n    if y < z:\n        y, z = z, y\n\n    if z == x:\n        return str(x - y) +'' + str(0)\n    elif z == y:\n        return str(0) +'' + str(x - y)\n    else:\n        a = int(x / z)\n        b = int(y / z)\n        c = a + b\n        d = x - a * z\n        e = y - b * z\n        if a == b:\n            return str(c) +'' + str(d)\n        elif a < b:\n            return str(c) +'' + str(d)\n        else:\n            return str(c) +'' + str(e)\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    x, y, z = sorted([x, y, z])\n    if z == 1:\n        return '{} {}'.format(x, x + y - 1)\n    x -= z - 1\n    y -= z - 1\n    if x < 0 or y < 0:\n        return '{} {}'.format(0, 0)\n    return '{} {}'.format(x + y + z - 1, z - 1)\n'''\n\ndef"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split(\" \")))\n    return str(x - y + z) + \" \" + str(z - x + y)\n\"\"\"\n\ndef"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split()]\n    return f'{x // z} {y // z}'\n\"\"\"\n\n\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    @dataclass\n    class Point:\n        x: int\n        y: int\n\n    def cw(p1: Point, p2: Point, p3: Point) -> bool:\n        return p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y) <= 0\n\n    def ccw(p1: Point, p2: Point, p3: Point) -> bool:\n        return p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y) >= 0\n\n    def get_area(p1: Point, p2: Point, p3: Point) -> int:\n        return abs(p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y)) / 2\n\n    n = int(stdin)\n    points = [Point(*map(int, line.split())) for line in stdin.strip().split('\\n')]\n\n    # print(points)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if get_area(points[i], points[j], points[k]) > 0:\n                    ans += 1\n    # print(ans)\n    # return ans\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if cw(points[i], points[j], points[k]) and ccw(points[i], points[j], points[k]):\n                    print(i + 1, j + 1, k + 1)\n\n\nsolution(input())\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input: str\n    output: str\n    \"\"\"\n    # TODO: write code...\n\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution\n    :param stdin:\n    :return:\n    \"\"\"\n\"\"\"\n    n = int(stdin)\n    p = []\n    for i in range(n):\n        point = [int(num) for num in stdin.split()]\n        p.append(point)\n\n    n = len(p)\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_parallelogram(p[i], p[j], p[(i + j) % n]):\n                count += 1\n    return count\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    first_point = [int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])]\n    second_point = [int(lines[1].split(' ')[0]), int(lines[1].split(' ')[1])]\n    third_point = [int(lines[2].split(' ')[0]), int(lines[2].split(' ')[1])]\n\n    first_cross_third = (first_point[0] * third_point[1]) - (third_point[0] * first_point[1])\n    second_cross_third = (second_point[0] * third_point[1]) - (third_point[0] * second_point[1])\n    first_cross_second = (first_point[0] * second_point[1]) - (second_point[0] * first_point[1])\n\n    if first_cross_third == 0 and second_cross_third == 0 and first_cross_second!= 0:\n        return '2'\n    elif first_cross_third == 0 and second_cross_third!= 0 and first_cross_second == 0:\n        return '2'\n    elif first_cross_third!= 0 and second_cross_third!= 0 and first_cross_second == 0:\n        return '2'\n    else:\n        return '1'\n\"\"\"\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  pass\n\"\"\"\n\nfrom itertools import product\nfrom math import isclose\n\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    ans = [[]]\n    ans.append([])\n    for i in range(n):\n        if a[i] < 0:\n            ans[-1].append(a[i])\n            if len(ans) == 3:\n                ans.append([])\n        else:\n            ans[0].append(a[i])\n    print(len(ans))\n    print(\" \".join([str(len(x)) for x in ans]))\n    return \"\"\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(stdin) for stdin in stdin.split(' ')]\n    \n    k = 0\n    while len(arr) > 0:\n        a = arr.pop()\n        if a > 0:\n            k += 1\n        else:\n            if k >= 3:\n                k -= 3\n            else:\n                break\n    return k"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport collections\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, stdin.split()))\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n    \n    Args:\n        stdin (str): String with space-separated integers.\n        \n    Returns:\n        str: String with space-separated integers.\n    \"\"\"\n    # Read input.\n    n = int(stdin)\n    a = [int(s) for s in stdin.split(\" \")]\n    \n    # Initialize counts.\n    count = 0\n    \n    # Initialize start and end of the first (most extreme) subarray.\n    start = 0\n    end = 0\n    \n    # Run through the array.\n    for i, value in enumerate(a):\n        # If the current element is bigger than the maximum seen so far,\n        # increase the end of the subarray.\n        if value > a[end]:\n            end = i\n            \n        # If the current element is smaller than the minimum seen so far,\n        # increase the start of the subarray.\n        elif value < a[start]:\n            start = i\n            \n        # If the current element is not bigger than the maximum seen so far\n        # and not smaller than the minimum seen so far, then there is no need\n        # to run the inner loop from the start of the array.\n        else:\n            break\n        \n        # If the current subarray is longer than the previous one, update\n        # the count.\n        if end - start > count:\n            count = end - start\n            \n    # Print the number of subarrays and the subsequences.\n    print(count)\n    print(\" \".join([str(a[start + i]) for i in range(count)]))\n    \n    # Return the answer.\n    return \"\"\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = list(map(int, stdin.split()))\n    nums = list(map(int, stdin.split()))\n    size = 1\n    for i in range(n - 1):\n        if nums[i + 1] > nums[i]:\n            size += 1\n        else:\n            break\n    print(size)\n    return \"\""
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.split('\\n')[0].split(' '))\nsequence = [1]\nwhile len(sequence) < n:\n    sequence = sequence + [min(i for i in range(1, len(sequence) + 2) if i not in sequence)]\nprint(sequence[k - 1])\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number on the Kth position in the obtained sequence.\"\"\"\n    n, k = map(int, stdin.split())\n    sequence = [1]\n    for _ in range(n - 1):\n        seq_cpy = sequence[:]\n        sequence = [1]\n        while len(sequence) < k:\n            if len(sequence) < len(seq_cpy):\n                sequence += seq_cpy\n            else:\n                sequence += [max(set(sequence[1:])) + 1]\n    return sequence[k - 1]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    def gen(n,k):\n        if k == 1:\n            return [1]\n        return gen(n - 1, k - 1) + [min(k, n * (n - 1) + 1) - sum(gen(n - 1, k - 1)[:-1])]\n    return str(gen(n,k)[k-1])\n\n\ndef"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int, k: int) -> int:\n        if n == 1:\n            return k\n        k = k * 2\n        return f(n - 1, k)\n    n, k = [int(x) for x in stdin.split()]\n    print(f(n, k))\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    nums = [1]\n    for i in range(n - 1):\n        nums.append(min(nums[-1] * 2, 2 * k))\n        k *= 2\n    print(nums[-1])\n    return ''\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '0'"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = [1]\n    for _ in range(n - 1):\n        seq.append(min([i for i in range(1, seq[-1] + 1) if seq[-1] % i == 0]))\n    return seq[k - 1]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = [int(x) for x in stdin.split()]\n    return '0' if a_1 == a_2 == 0 else len(str(a_1 + a_2)) - len(str(max(a_1, a_2)))\n\"\"\"\n\nfrom itertools import count\n\ndef"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2 = [int(x) for x in stdin.split(' ')]\n    if a1 > a2:\n        a1, a2 = a2, a1\n\n    count = 1\n    charge = 0\n    c1 = 0\n    c2 = 0\n    while True:\n        count += 1\n        if charge == 0:\n            charge = a1 if a1 >= 100 else a1 + c1\n            c1 = 0\n            if charge <= 0:\n                break\n            charge = a2 if a2 >= 100 else a2 + c2\n            c2 = 0\n            if charge <= 0:\n                break\n        elif charge > 0:\n            charge -= 100\n        c1 += 1\n        c2 += 1\n    return count"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = a + b\n    if a == 0 or b == 0:\n        return '0'\n    if a == b:\n        return str(c // 2)\n    if a > b:\n        return str(c // 2 + (a // 2 - b // 2) * 2)\n    return str(c // 2 + (b // 2 - a // 2) * 2)"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    d_1 = a_1\n    d_2 = a_2\n    count = 0\n    while d_1 > 0 and d_2 > 0:\n        if d_1 < d_2:\n            d_1 += 2\n            d_2 -= 1\n            count += 1\n        else:\n            d_1 -= 1\n            d_2 += 2\n            count += 1\n    if d_2 > 0:\n        count += d_2 / 2\n    if d_1 > 0:\n        count += d_1 / 2\n    return str(int(count))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    if a_2 == 0:\n        return a_1\n    else:\n        return (a_1 - a_2 - 1) + solution(stdin)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2 = map(int, stdin.strip().split())\n    if a1 == a2:\n        return 1\n\n    result = 0\n    while a1 > 0 and a2 > 0:\n        if a1 > 100:\n            a1 = 100\n        elif a2 > 100:\n            a2 = 100\n        a1 = a1 - a2\n        result += 1\n        if a1 <= 0:\n            a2 = a2 - a1\n            a1 = 0\n        elif a2 <= 0:\n            a1 = a1 - a2\n            a2 = 0\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = [int(x) for x in stdin.split()]\n    if a_1 < 0 or a_2 < 0:\n        return \"impossible\"\n    charge = 0\n    time = 0\n    while charge < a_1 and charge < a_2:\n        time += 1\n        charge = max(charge + (a_1 / 2), charge + (a_2 / 2))\n    if charge < a_1:\n        return \"impossible\"\n    return str(time)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    \n    if A <= 0 or B <= 0 or A > 100 or B > 100:\n        return -1\n    \n    count = 0\n    while A >= 1 or B >= 1:\n        A, B = A - 2 if A >= 1 else 0, B - 1 if B >= 1 else 0\n        if A <= 0 or B <= 0:\n            break\n        count += 1\n    \n    return count\n\n\n\ndef"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > 0 and b > 0:\n        n = 0\n        while a + b > 0:\n            if a + b > 100:\n                b -= 100 - a\n            else:\n                a += b\n                b = 0\n            n += 1\n        return n\n    return '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split(' ')))\n    answer = 0\n    while True:\n        if A <= 0 and B <= 0:\n            break\n        if A < B:\n            if A > 0:\n                A -= 2\n            if B > 0:\n                B -= 1\n            answer += 1\n        if A > B:\n            if B > 0:\n                B -= 2\n            if A > 0:\n                A -= 1\n            answer += 1\n    return answer\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, m = list(map(int, stdin.split(' ')))\n    powers = list(map(int, stdin.split(' ')))\n\n    if m == 0 and k == 0:\n        return sum(powers) / x\n    return x - 1\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    powers = list(map(int, stdin.split()))\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, min(i, k + 1)):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + powers[i - 1])\n\n    for i in range(1, n + 1):\n        for j in range(1, min(k + 1, m + 1)):\n            if dp[i][k] > dp[i][j] + powers[i - 1]:\n                dp[i][k] = dp[i][j] + powers[i - 1]\n\n    return str(dp[n][k])\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(i) for i in stdin.split('\\n')[0].split()]\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    m = min(m, k)\n    n = len(a)\n    k = min(k, n)\n    a.sort()\n    for i in range(k):\n        a[i] += 1\n    for i in range(m):\n        a[i] += a[-1]\n    return a[k - 1]\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    powers = list(map(int, stdin.split()))\n    return f'{sum(powers) / (n - k)}'\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get and parse the input\n    :param stdin: The input\n    :return: The answer\n    \"\"\"\n    n, k, m = tuple(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    m = min(m, k)\n    a.sort(reverse=True)\n    res = 0\n    for i in range(n):\n        if i > k:\n            res += a[i]\n        elif i > 0:\n            res += a[i] - a[i-1] + 1\n        res += sum(a[:i+1]) - sum(a[i+1:])\n        res //= i + 1\n    return res\n\n\ndef"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [0 for _ in range(n)]\n    for _ in range(m):\n        i, j, x = [int(x) for x in stdin.split()]\n        b[i - 1] += x\n        if j <= k:\n            b[j - 1] -= x\n        else:\n            b[k] -= x\n            b[j - 1] += x\n    for i in range(n):\n        b[i] = b[i] // (k + 1)\n    return str(max(b))\n\ndef"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n---------------\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # f(n) =  - 1 + 2 - 3 + 4 - 5 +.... - ( - 1)^{n}n\n    # f(n) =  ( - 1)^{n}n + n - 2 +.... + 1 = ( - 1)^{n}n + n(n - 1)\n    # f(n) =  ( - 1)^{n}n + n(n - 1)(n - 2) +.... + 1\n    # f(n) =  ( - 1)^{n}n(n - 1)(n - 2)(n - 3) +.... + 1\n    # f(n) =  ( - 1)^{n}n(n - 1)(n - 2)(n - 3)(n - 4) +.... + 1\n    # f(n) =  ( - 1)^{n}n(n - 1)(n - 2)(n - 3)(n - 4)(n - 5) +.... + 1\n    # f(n) =  ( - 1)^{n}n(n - 1)(n - 2)(n - 3)(n - 4)(n - 5)(n - 6) +.... + 1\n    return ((-1)**n) * n * (n - 1) * (n - 2) * (n - 3) + 1"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = (-1) ** (n - 1) * (n * (n + 1) // 2)\n    print(f)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    s = 0\n    for i in range(1, n+1):\n        s += (-1)**i * i\n    print(s)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum([-1] * n))\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n))\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.read())\n    if n == 1:\n        print(0)\n    else:\n        print(n - 1)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return sum(range(n)) * (-1)**n\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = n * (n + 1) // 2\n    print(f)\n\n    return ''\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int) -> int:\n        n = abs(n)\n        if n == 0:\n            return 0\n        if n == 1:\n            return -1 + n\n        else:\n            return f(n - 1) - n\n\n    n = int(stdin)\n    return f(n)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(n-1):\n        if a[i+1] > a[i]:\n            res += a[i+1] - a[i] - 1\n            a[i+1] = a[i] + 1\n    return res\n\nprint(solution(stdin))"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\nfrom collections import deque\n\nsys.stdin = open(\"input.txt\", \"r\")\nsys.stdout = open(\"output.txt\", \"w\")"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a.append(0)\n    if len(set(a)) == 2:\n        return 0\n    for i in range(len(a) - 1):\n        if a[i + 1] - a[i]!= 1:\n            return a[i] + 1\n\nassert solution('3 0 2') == 1\nassert solution('5 4 3 0 1') == 2\nassert solution('7 0 3 1 5 2 6') == 2\nassert solution('0 0 0') == 0\nassert solution('4 2 3 0 1') == 2\nassert solution('0 0 0 0 0') == 0\nassert solution('0 1 1 1 0 1') == 1\nassert solution('1 1 1 1 0 1') == 0\nassert solution('0 2 1 2 0 2') == 1\nassert solution('0 2 0 1 0 1') == 0\nassert solution('2 0 0 0 0') == 0\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    myinput = stdin.split()\n    myinput = [int(i) for i in myinput]\n    count = 0\n    for i in range(1, len(myinput)):\n        if myinput[i - 1] < myinput[i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.split('\\n')\n    n = int(_[0])\n    a = _[1].split(' ')\n    s = 0\n    if n == 1:\n        return 0\n    else:\n        if a[0] == '0':\n            for i in range(1, n):\n                if int(a[i]) == i:\n                    s += i\n            return abs(s)\n        else:\n            for i in range(n):\n                s += int(a[i])\n            return abs(s)\n\nprint(solution(input()))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stdin = list(map(int, stdin.readline().split()))\n    path = []\n    for i in range(1, n):\n        path.append(i - 1)\n        path.append(i)\n    path.append(n - 1)\n    return len(set(path))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split('\\n')[0])\n    arr = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    output = 0\n    for i in range(num):\n        if arr[i] == i:\n            continue\n        else:\n            output += 1\n            temp = arr[i]\n            while temp!= i:\n                arr[temp], temp = i, arr[temp]\n    return output\n\nsolution('3\\n2 0 0\\n')\n\n'''\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    l = list(s)\n    l.sort()\n    o = []\n    for i in range(len(l)):\n        if i == 0:\n            o.append(l[i])\n        else:\n            if l[i]!= l[i-1]:\n                o.append(l[i])\n    print(''.join(o))\n    return ''.join(o)\n\nsolution(\"abcda\")\nsolution(\"aaa\")\nsolution(\"aaaa\")\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    len_s = len(s)\n    min_len = min(len_s, 2 * 10 ** 5)\n    p = 2 * 10 ** 5\n    min_s = ''\n    for i in range(min_len):\n        if s[i] < s[i + 1]:\n            p = i + 1\n            min_s = s[0:p]\n    print(min_s)\n    return min_s\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = stdin\n    n = len(s)\n    if n == 1:\n        return s\n    s1 = s[:n // 2]\n    s2 = s[n // 2:]\n    k1 = len(s1)\n    k2 = len(s2)\n    l1 = [0] * k1\n    l2 = [0] * k2\n    for i in range(k1):\n        l1[i] = min(ord(s1[i]) - ord('a'), ord('z') - ord(s1[i]) + 1)\n    for i in range(k2):\n        l2[i] = min(ord(s2[i]) - ord('a'), ord('z') - ord(s2[i]) + 1)\n    l = [i + j for i, j in zip(l1, l2)]\n    l.sort()\n    mx = l[-1]\n    ans = ''\n    for i in range(k1):\n        if l1[i] == mx:\n            ans += s1[i]\n    ans += s2\n    for i in range(k2):\n        if l2[i] == mx:\n            ans += s2[i]\n    return ans\n\n\ndef"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    len_input = int(input)\n    input = input[1:len_input]\n\n    smallest_string = input[0:1]\n    smallest_string_length = 1\n    for index in range(len_input - 1):\n        if input[index] < input[index + 1]:\n            smallest_string += input[index]\n            smallest_string_length += 1\n        else:\n            if smallest_string_length < len_input - index:\n                smallest_string += input[index]\n                smallest_string_length += 1\n    return smallest_string\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) <= 1:\n        return s\n    for c in range(0, len(s)):\n        if c < len(s) - 1:\n            if s[c] > s[c + 1]:\n                return s[:c] + s[c + 1:]\n        else:\n            if s[c] > s[c - 1]:\n                return s[:c] + s[c + 1:]\n    return s\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    characters = stdin\n    characters = list(characters)\n    n = len(characters)\n    n = n % 2\n\n    for i in range(n):\n        if characters[0] > characters[1]:\n            characters.pop(0)\n        else:\n            characters.pop(1)\n\n    return \"\".join(characters)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Description:\n        This function receives a string and returns the smallest lexicographically\n        string that can be obtained by removing at most one character from the\n        string.\n    Parameter:\n        stdin: str - String\n    Returns:\n        str - The smallest lexicographically string that can be obtained by\n        removing at most one character from the string.\n    '''\n    len_s: int = len(stdin)\n\n    for i in range(0, len_s):\n        if stdin[i] < stdin[i+1]:\n            break\n    else:\n        return stdin[:-1]\n\n    for i in range(len_s-1, -1, -1):\n        if stdin[i] < stdin[i-1]:\n            break\n    else:\n        return stdin[1:]\n\n    return stdin[:i] + stdin[i+1:]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nimport math\n\nN, K = [int(num) for num in stdin.split(\" \")]\n\nbook_prices = [int(num) for num in stdin.split(\" \")]\n\nbook_prices.sort()\n\nmax_beauty = 0\n\nfor i in range(N):\n    beauty = book_prices[i]\n    if i < K:\n        beauty = (book_prices[i] * (K - i - 1))\n    max_beauty = max(beauty, max_beauty)\n\nprint(max_beauty)\n\nreturn max_beauty\n\ndef"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    books = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    # books = sorted(books)\n    # books = books[::-1]\n    # books = books[:k]\n    # res = 0\n    # for i in range(k):\n    #     res |= books[i]\n    #     for j in range(i + 1, k):\n    #         res &= books[j]\n    # return res\n    res = 0\n    for i in range(n - k + 1):\n        res |= books[i]\n        for j in range(i + 1, n - k + 2):\n            res &= books[j]\n    return res\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    pass"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    prices = [int(x) for x in stdin.split(' ')]\n    max_beauty = 0\n    for i in range(n):\n        beauty = 0\n        j = i\n        while j < n and prices[j] == prices[i]:\n            j += 1\n        beauty += prices[j]\n        if j + 1 < n:\n            for j in range(j + 1, n):\n                if prices[j]!= prices[i]:\n                    break\n                beauty += prices[j]\n        if j + 1 < n and j + 1!= i:\n            for j in range(j + 1, n):\n                if prices[j]!= prices[j - 1]:\n                    break\n                beauty += prices[j]\n        max_beauty = max(max_beauty, beauty)\n    return str(max_beauty)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split())\nbooks = list(map(int, stdin.readline().strip().split()))\n\nvalue = 0\nfor i in range(k):\n    value = value | (books[i] & (value << i))\n\nprint(value)"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    books = list(map(int, stdin.split(' ')))\n    books.sort()\n    # print(n, k, books)\n    beauty = 0\n    for i in range(n - k + 1):\n        beauty += books[i] & books[i + k - 1]\n    print(beauty)\n    return beauty"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    books = list(map(int, stdin.split('\\n')[1].split(' ')))\n    res = 0\n    for i in range(n // k + 1):\n        res = max(res, sum(books[k * i:k * (i + 1)]) & sum(books[k * (i + 1):k * (i + 2)]) & sum(books[k * (i + 2):k * (i + 3)]))\n    return res"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n    return str(result)"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 10 4\n   ... 9 14 28 1 7 13 15 29 2 31\n   ... ''')\n    '24'\n    >>> solution('''\n   ... 7 3\n   ... 3 14 15 92 65 35 89\n   ... ''')\n    '64'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    books = list(map(int, stdin.split('\\n')[1].split()))\n\n    books.sort()\n    for i in range(k - 1):\n        books = [books[0]] + books[2:]\n    return sum(books)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(stdin.readline())\n    # matrix = [list(map(int, stdin.readline().split())) for i in range(n)]\n    # m = int(stdin.readline())\n    # matrix2 = [list(map(int, stdin.readline().split())) for i in range(m)]\n    # print(matrix, matrix2)\n    # return \"\""
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    print(stdin)\n    "
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.split('\\n')[0])\n    costs = [list(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    result = 0\n    for i in range(1, rows):\n        result += costs[0][i - 1]\n    for j in range(1, rows):\n        result += costs[1][j - 1]\n    return str(result)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [list(map(int, stdin.readline().split())) for i in range(n - 1)]\n    b = list(map(int, stdin.readline().split()))\n    l = [sum([min(a[i][j], b[j]) for j in range(n)]) for i in range(n)]\n    return str(sum(l))\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    b = list(map(int, stdin.split(\"\\n\")[2].split(\" \")))\n    a_sum = [0] * (n - 1)\n    b_sum = [0] * n\n    for i in range(n - 1):\n        a_sum[i] = a[i] + a[i + 1]\n    for i in range(n):\n        b_sum[i] = b[i]\n    ans = min(a_sum[0] + b_sum[1], a_sum[-1] + b_sum[0])\n    ans += min(a_sum[0] + b_sum[1], a_sum[-1] + b_sum[1])\n    ans += min(a_sum[0] + b_sum[2], a_sum[-1] + b_sum[0])\n    ans += min(a_sum[0] + b_sum[2], a_sum[-1] + b_sum[1])\n    ans += min(a_sum[0] + b_sum[3], a_sum[-1] + b_sum[0])\n    ans += min(a_sum[0] + b_sum[3], a_sum[-1] + b_sum[1])\n    ans += min(a_sum[0] + b_sum[4], a_sum[-1] + b_sum[0])\n    ans += min(a_sum[0] + b_sum[4], a_sum[-1] + b_sum[1])\n    return ans\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n\n    >>> solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\")\n    12\n    >>> solution(\"3\\n1 2\\n3 3\\n2 1 3\")\n    11\n    >>> solution(\"2\\n1\\n1 1\\n1 1\")\n    4\n    \"\"\"\n    # read input\n    houses = stdin.splitlines()\n    n = int(houses[0])\n\n    streets = []\n    for i in range(1, n + 1):\n        streets.append(list(map(int, houses[i].split())))\n\n    crossings = []\n    for i in range(n - 1):\n        for j in range(n):\n            crossings.append((streets[i][j], i, j, 1))\n            crossings.append((streets[i][j], i, j, -1))\n\n    for i in range(n):\n        crossings.append((streets[i][n - 1], i, n - 1, 1))\n        crossings.append((streets[i][n - 1], i, n - 1, -1))\n\n    crossings.sort()\n\n    solution = 0\n    for c in crossings:\n        if c[3] == 1:\n            solution += c[0]\n            continue\n        for i in range(n - 1):\n            if streets[c[1]][c[2]] == streets[c[1]][c[2] + 1]:\n                continue\n            else:\n                solution += c[0]\n                break\n\n    return solution\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Get the matrix from the standard input\n    :return: the minimum time\n    '''\n    matrix = []\n    for i in stdin.split('\\n')[:2]:\n        matrix.append(list(map(int, i.split(' '))))\n\n    crossings = stdin.split('\\n')[2].split(' ')\n    matrix.append(list(map(int, crossings)))\n\n    return str(matrix)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    \n    rows = int(stdin.readline())\n    \n    matrix = []\n    \n    for _ in range(rows):\n        row = [int(x) for x in stdin.readline().split()]\n        matrix.append(row)\n    \n    graph = [[] for _ in range(rows * 2)]\n    for i in range(rows * 2):\n        for j in range(rows):\n            if matrix[i // rows][j] > matrix[(i + 1) // rows][j]:\n                graph[i].append((i + 1, j))\n            else:\n                graph[i].append((i + 1, j))\n            \n            if i > 0:\n                if matrix[i // rows][j] < matrix[i // rows][j - 1]:\n                    graph[i].append((i, j - 1))\n                else:\n                    graph[i].append((i, j - 1))\n    \n    q = deque([(0, 0)])\n    time = [1e9] * (rows * 2)\n    time[0] = 0\n    while q:\n        pos, cost = q.popleft()\n        for next_pos, next_cost in graph[pos]:\n            if time[next_pos] > cost + next_cost:\n                time[next_pos] = cost + next_cost\n                q.append((next_pos, cost + next_cost))\n                \n    return min(time[rows * 2 - 1:])\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 0\n   ... 0 1 1 2 3 2\n   ... ''')\n    '1 2 2 3 3 3'\n    \"\"\"\n    (n, k) = [int(i) for i in stdin.split('\\n')[:2]]\n    links = [int(i) for i in stdin.split('\\n')[2:]]\n    count = n\n    prev = None\n    nexts = []\n    for index in range(n):\n        current = links[index]\n        if current == prev:\n            count -= 1\n        elif current!= 0:\n            prev = current\n            count -= 1\n        nexts.append(count)\n    current = 0\n    prev = None\n    count = 0\n    while current < n:\n        if prev == None:\n            current += nexts[current]\n            prev = links[current]\n            count += 1\n        else:\n            if prev == links[current]:\n                current += 1\n                count += 1\n                prev = None\n            else:\n                current += 1\n                prev = links[current]\n                count += 1\n    return''.join(str(i) for i in nexts)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6 0\n   ... 0 1 1 2 3 2\n   ... ''')\n    '1 2 2 3 3 3'\n    \"\"\"\n    def num_unique_messages(i: int) -> int:\n        \"\"\"\n        >>> num_unique_messages(0)\n        1\n        >>> num_unique_messages(1)\n        2\n        >>> num_unique_messages(2)\n        2\n        >>> num_unique_messages(3)\n        2\n        >>> num_unique_messages(4)\n        2\n        >>> num_unique_messages(5)\n        2\n        >>> num_unique_messages(6)\n        3\n        >>> num_unique_messages(7)\n        3\n        >>> num_unique_messages(8)\n        3\n        \"\"\"\n        visit = {i: 0}\n        q = deque([(i, 0)])\n        while q:\n            cur, depth = q.popleft()\n            if cur not in visit:\n                visit[cur] = depth\n                for dst in g[cur]:\n                    q.append((dst, depth + 1))\n        return len(visit)\n\n    n, k = map(int, stdin.split('\\n')[0].split())\n    g = defaultdict(list)\n    for dst, src in enumerate(map(int, stdin.split('\\n')[1].split())):\n        g[src].append(dst)\n\n    return''.join(map(str, (num_unique_messages(i) for i in range(1, n + 1))))\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = [int(x) for x in stdin.split('\\n')]\n    queue = list(range(1, n + 1))\n    while len(queue) > 1:\n        queue = queue[k:] + queue[:k]\n    print(' '.join([str(x) for x in queue]))\n    '''\n    n, k = [int(x) for x in stdin.split('\\n')]\n    queue = [i for i in range(1, n + 1)]\n    if k == 0:\n        print(' '.join([str(x) for x in queue]))\n        return\n    cnt = 0\n    while len(queue) > 1:\n        queue = queue[k:] + queue[:k]\n        cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 0\\n0 1 1 2 3 2\")\n    '1 2 2 3 3 3'\n    >>> solution(\"10 1\\n0 1 0 3 4 5 2 3 7 0\")\n    '2 3 3 4 5 6 6 6 8 2'\n    \"\"\"\n    n, k = (int(x) for x in stdin.split())\n    seq = [int(x) for x in stdin.split()]\n    ans = []\n    cnt = 1\n    for i in range(n):\n        if seq[i] == 0:\n            ans.append(cnt)\n            ans.append(cnt)\n            ans.append(cnt)\n            cnt = 1\n        elif seq[i] - k >= 0:\n            ans.append(cnt)\n            cnt = 1\n        else:\n            cnt += 1\n    return \" \".join([str(x) for x in ans])\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''6 0\n   ... 0 1 1 2 3 2\n   ... ''')\n    '1 2 2 3 3 3 '\n    '''\n    :type stdin: str\n    :rtype: str\n    '''\n    k, v = map(int, stdin.split('\\n')[0].split())\n    arr = [int(i) for i in stdin.split('\\n')[1].split(' ') if i]\n    \n    seen = [0] * len(arr)\n    stack = []\n    for i in range(len(arr)):\n        if not stack:\n            stack.append((i, arr[i]))\n        else:\n            if arr[stack[-1][0]] == 0 or arr[i] == arr[stack[-1][0]]:\n                stack.append((i, arr[i]))\n            else:\n                for j in range(stack[-1][0], i):\n                    if arr[j] == arr[i]:\n                        seen[i] += 1\n                    else:\n                        break\n                stack = []\n                stack.append((i, arr[i]))\n    for i in range(k):\n        stack.pop()\n    ans = []\n    for i in range(len(seen)):\n        if not stack:\n            ans.append(str(seen[i]))\n        else:\n            ans.append(str(seen[i]))\n            for j in range(stack[-1][0], i):\n                if arr[j] == arr[i]:\n                    seen[i] += 1\n                else:\n                    break\n            stack = []\n            stack.append((i, arr[i]))\n    return''.join(ans)"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    hist = [0] * (n + 1)\n    for i in range(n):\n        for j in map(int, stdin.split()):\n            if j <= i:\n                hist[i + 1] += 1\n    print(*hist[k:])\n    return''.join(map(str, hist[k:]))\n\n\ndef"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 1\n   ... 0 1 0 3 4 5 2 3 7 0''')\n    '2 3 3 4 5 6 6 6 8 2'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n, k = int(inputs[0].split(' ')[0]), int(inputs[0].split(' ')[1])\n    links = [0] * (n + 1)\n    for i in range(n):\n        links[i + 1] = int(inputs[i + 1])\n    messages = [0] * (n + 1)\n    for i in range(1, n + 1):\n        cur_node = i\n        visited = set()\n        while cur_node!= 0:\n            if links[cur_node]!= 0 and links[links[cur_node]]!= cur_node:\n                messages[links[cur_node]] += 1\n                visited.add(links[cur_node])\n            cur_node = links[cur_node]\n        for j in range(i + 1, n + 1):\n            if links[j] not in visited:\n                messages[j] += 1\n    return''.join([str(messages[i]) for i in range(1, n + 1)])\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given a string containing a list of integers. Separate the integers with spaces.\n    Find a way to reorder the integers so that the sum of integers between two consecutive integers is equal to a given value.\n    Do not leave any gaps in the final list. If there are multiple solutions, print any of them.\n    Return \"NO\" if it is not possible to find a list satisfying the above conditions.\n    >>> solution(\"1 2 3 4\")\n    'YES'\n    >>> solution(\"3 4 2 1\")\n    'YES'\n    >>> solution(\"4 2 3 1\")\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"YES\" if it is possible to reorder array\n    such that its sum equals m, and \"NO\" otherwise.\n    '''\n    # your code here\n    cases = int(stdin)\n\n    for i in range(cases):\n        stdin = input()\n        n, m = [int(i) for i in stdin.split()]\n        arr = [int(i) for i in stdin.split()]\n        arr.sort()\n\n        n, m = int(n), int(m)\n\n        total = 0\n        for i in range(n):\n            total += (i + 1) * arr[i] / (i + 1)\n        total = int(total)\n\n        if total == m:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def func(n, m, a):\n        s = 0\n        for i in range(n):\n            s += (a[i] / (i + 1))\n        return s - m\n\n    for _ in range(int(stdin)):\n        n, m = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        if func(n, m, a) == 0:\n            print('YES')\n        else:\n            print('NO')\n\n    return ''\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 8\n   ... 2 5 1\n   ... 4 4\n   ... 0 1 2 3\n   ... ''')\n    YES\n\n    >>> solution('''\n   ... 3 8\n   ... 2 5 1\n   ... 4 4\n   ... 0 1 2 3\n   ... ''')\n    NO\n\n    >>> solution('''\n   ... 3 8\n   ... 2 5 1\n   ... 4 4\n   ... 0 1 2 3\n   ... ''')\n    YES\n    \"\"\"\n   ...\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(1)\n    Space: O(1)\n    \"\"\"\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, m = list(map(int, stdin.readline().split()))\n        a = list(map(int, stdin.readline().split()))\n        s = 0\n        for i in range(n):\n            s += a[i] / (i + 1)\n        if s == m:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1. check if the numbers can be reordered into the sum of numbers with sum = m\n    2. check if the numbers can be reordered into the sum of numbers with sum = (m + 1)\n    3. check if the numbers can be reordered into the sum of numbers with sum = (m - 1)\n    '''\n    n, m = map(int, stdin.split('\\n')[0].split())\n    arr = sorted(map(int, stdin.split('\\n')[1].split()))\n    if m in {arr[i] + arr[n-i-1] for i in range(n)}:\n        return 'YES'\n    elif m in {arr[i] + arr[n-i-1] for i in range(n)} and m + 1 in {arr[i] + arr[n-i-1] for i in range(n)}:\n        return 'YES'\n    elif m in {arr[i] + arr[n-i-1] for i in range(n)} and m - 1 in {arr[i] + arr[n-i-1] for i in range(n)}:\n        return 'YES'\n    return 'NO'\n    \n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        l = list(map(int, stdin.readline().strip().split()))\n        s = 0\n        for i in range(len(l)):\n            s += l[i] / i\n        if m == s:\n            print('YES')\n        else:\n            print('NO')\n\n    return ''\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n    # max_n, max_k = map(int, stdin.split())\n    #\n    # ans = [0] * max_n\n    # for _ in range(max_k):\n    #     i, j = map(int, stdin.split())\n    #     ans[i] += j\n    #\n    # for n, k in enumerate(ans):\n    #     ans[n] += (k // n) * n\n    #\n    # return \" \".join(map(str, ans))\n\n\ndef"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.readline())):\n        a, b = map(int, stdin.readline().split())\n        if a % b == 0:\n            print(a)\n        else:\n            print(a + find_f(a, b))\n\n\ndef"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\")\n    10\n    >>> solution(\"7 5\")\n    12\n    \"\"\"\n    return str(pow(2, int(stdin)) - 1)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import combinations\nfrom math import gcd\n\ndef"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n'))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution is based on the following observation:\n    If $n$ is divisible by $k$, $k * f(n) = n$.\n    That is, if $n$ is divisible by $f(n)$, we don't have to do anything.\n    However, if $n$ is divisible by $n-f(n)$, it becomes to add one more $f(n)$ to $n$.\n    For example, if $n=8$ is divisible by $8-5=3$, then we don't have to do anything.\n    If $n=10$ is divisible by $10-2=8$, then it becomes to add one more $8$ to $n=10$.\n    If $n=12$ is divisible by $12-5=7$, then it becomes to add one more $7$ to $n=12$.\n    Therefore, we are able to compute $f(n)$ for any $n$ by following the observation.\n    \"\"\"\n    return stdin"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int) -> int:\n        # Your code here\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 12\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n == 27:\n            return 27\n        if n == 28:\n            return 28\n        if n == 29:\n            return 29\n        if n == 30:\n            return 30\n        if n == 31:\n            return 31\n        if n == 32:\n            return 32\n        if n == 33:\n            return 33\n        if n == 34:\n            return 34\n        if n == 35:\n            return 35\n        if n == 36:\n            return 36\n        if n == 37:\n            return 37\n        if n == 38:\n            return 38\n        if n == 39:\n            return 39\n        if n == 40:\n            return 40\n        if n == 41:\n            return 41\n        if n == 42:\n            return 42\n        if n == 43:\n            return 43\n        if n == 44:\n            return 44\n        if n == 45:\n            return 45\n        if n == 46:\n            return 46\n        if n == 47:\n            return 47\n        if n == 48:\n            return 48\n        if n == 49:\n            return 49\n        if n == 50:\n            return 50\n        if n == 51:\n            return 51\n        if n == 52:\n            return 52\n        if n == 53:\n            return 53\n        if n == 54:\n            return 54\n        if n == 55:\n            return 55\n        if n == 56:\n            return 56\n        if n == 57:\n            return 57\n        if n == 58:\n            return 58\n        if n == 59:\n            return 59\n        if n == 60:\n            return 60\n        if n == 61:\n            return 61\n        if n == 62:\n            return 62\n        if n == 63:\n            return 63\n        if n == 64:\n            return 64\n        if n == 65:\n            return 65\n        if n == 66:\n            return 66\n        if n == 67:\n            return 67\n        if n == 68:\n            return 68\n        if n == 69:\n            return 69\n        if n == 70:\n            return 70\n        if n == 71:\n            return 71\n        if n == 72:\n            return 72\n        if n == 73:\n            return 73\n        if n == 74:\n            return 74\n        if n == 75:\n            return 75\n        if n == 76:\n            return 76\n        if n == 77:\n            return 77\n        if n == 78:\n            return 78\n        if n == 79:\n            return 79\n        if n == 80:\n            return 80\n        if n == 81:\n            return 81\n        if n == 82:\n            return 82\n        if n == 83:\n            return 83\n        if n == 84:\n            return 84\n        if n == 85:\n            return 85\n        if n == 86:\n            return 86\n        if n == 87:\n            return 87\n        if n == 88:\n            return 88\n        if n == 89:\n            return 89\n        if n == 90:\n            return 90\n        if n == 91:\n            return 91\n        if n == 92:\n            return 92\n        if n == 93:\n            return 93\n        if n == 94:\n            return 94\n        if n == 95:\n            return 95\n        if n == 96:\n            return 96\n        if n == 97:\n            return 97\n        if n == 98:\n            return 98\n        if n == 99:\n            return 99\n        if n == 100:\n            return 100\n\n    ans = []\n    for _ in range(int(stdin)):\n        ans.append(f(int(stdin)))\n    return '\\n'.join(ans)\n\nprint(solution(stdin))"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(int(lines[0])):\n        n, k = lines[i + 1].split(' ')\n        n = int(n)\n        k = int(k)\n        factors = {1}\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.add(i)\n                factors.add(n // i)\n        while k > 1:\n            n = n + 1\n            for i in factors:\n                if i * n not in factors:\n                    n = n + 1\n                    break\n                else:\n                    k = k - 1\n        print(n)\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_vertices, num_edges = map(int, stdin.split())\n    # if num_vertices <= 1 or num_edges <= 0:\n    #     return \"Impossible\"\n    ans = \"Possible\"\n    if num_edges >= num_vertices * (num_vertices - 1) / 2:\n        ans = \"Impossible\"\n    return ans\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n\"\"\"\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Impossible\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get size of graph\n    size = stdin.split()\n    n = int(size[0])\n    m = int(size[1])\n\n    # Get list of edges\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split())))\n    edges = set(tuple(edge) for edge in edges)\n    # Find relatively prime edges\n    rel_prime = set()\n    for edge in edges:\n        if gcd(edge[0], edge[1]) == 1:\n            rel_prime.add(edge)\n    if not rel_prime:\n        return \"Impossible\"\n    # Now build the graph\n    graph = defaultdict(set)\n    for edge in rel_prime:\n        v, u = edge\n        graph[v].add(u)\n        graph[u].add(v)\n    # Check connected and no self-loops\n    if not nx.is_connected(graph):\n        return \"Impossible\"\n    if nx.number_of_selfloops(graph)!= 0:\n        return \"Impossible\"\n\n    # No multiple edges\n    if nx.number_of_edges(graph)!= m:\n        return \"Impossible\"\n\n    return \"Possible\"\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\" \")\n    n, m = [int(i) for i in line]\n    l = [[int(i) for i in stdin.split(\" \")] for j in range(m)]\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    if m < n:\n        return \"Impossible\"\n    for i in range(m - n + 1):\n        if (l[i][0] == l[i][1]) or (l[i][0] in [j[0] for j in l[i + 1:]]) or (l[i][1] in [j[1] for j in l[i + 1:]]):\n            return \"Impossible\"\n    return \"Possible\"\n\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # return 'WIN' if...\n    return ''\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, n = stdin.split(\" \")\n    n = int(n)\n    r, c = int(r), int(c)\n    result = \"\"\n    for i in range(n):\n        r_i, c_i = map(int, stdin.split(\" \"))\n        r_i = int(r_i)\n        c_i = int(c_i)\n    return \"WIN\" if r_i * c_i < r * c else \"LOSE\"\n\n\ndef"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def cell(r, c):\n        return (r - 1, c) if c == 1 else (r, c - 1) if r == c else (r + 1, c)\n\n    r, n = map(int, stdin.split())\n    reclaimed = [map(int, stdin.split()) for _ in range(n)]\n    reclaimed = set(tuple(cell(r, c)) for r, c in reclaimed)\n\n    return 'WIN' if all(\n        not set(cell(r, c)) - reclaimed for r in range(1, r + 1) for c in range(1, 3)\n    ) else 'LOSE'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split(\"\\n\")[0].split(\" \"))\n    lines = [[int(i) for i in stdin.split(\"\\n\")[1].split(\" \")] for i in range(n)]\n    ret = \"WIN\"\n    while len(lines) > 1:\n        for i in range(len(lines) // 2):\n            if i + 1 < len(lines) and not (lines[i][0] <= lines[i + 1][0] or lines[i][1] <= lines[i + 1][1]):\n                ret = \"LOSE\"\n                break\n        lines = [line for line in lines if line not in lines[:i] + lines[i + 1:]]\n    return ret"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, num_reclaimed = [int(num) for num in stdin.split()]\n    reclaimed_cells = []\n    for row in range(rows):\n        r, c = [int(num) for num in stdin.split()]\n        reclaimed_cells.append((r, c))\n\n    reclaimed_cells.sort(key=lambda x: x[0])\n    reclaimed_cells.sort(key=lambda x: x[1])\n\n    last_cell_reclaimed = (reclaimed_cells[0][0], reclaimed_cells[0][1])\n\n    if last_cell_reclaimed[1] == 1:\n        return \"LOSE\"\n    else:\n        return \"WIN\"\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    row, col, turn = stdin.split(\" \")\n    row, col = int(row), int(col)\n    turn = int(turn)\n\n    ans = \"WIN\"\n    for r in range(row):\n        for c in range(2):\n            if (r, c) not in {(0, 1), (1, 0), (1, 1)}:\n                ans = \"LOSE\"\n                break\n    if ans == \"WIN\":\n        for t in range(turn):\n            for r in range(row):\n                for c in range(2):\n                    if (r, c) not in {(0, 1), (1, 0), (1, 1)}:\n                        ans = \"LOSE\"\n                        break\n    return ans\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split('\\n')[0].split(' '))\n    rows = [list(map(int, row.split(' '))) for row in stdin.split('\\n')[1:-1]]\n    return 'WIN' if r*2-n+1 >= max(sum(row[1] for row in rows) for row in rows) else 'LOSE'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'WIN'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    first = None\n    second = None\n\n    n = int(stdin.readline().split()[1])\n\n    for _ in range(n):\n        r, c = [int(x) for x in stdin.readline().split()]\n        if first == None:\n            first = r, c\n        elif second == None:\n            second = r, c\n        else:\n            break\n\n    if first[0] < second[0]:\n        first, second = second, first\n\n    first_can_reclaim = True\n    for i in range(first[0] - 1, first[0] + 2):\n        for j in range(first[1] - 1, first[1] + 2):\n            if (i, j)!= first and (i, j)!= second:\n                first_can_reclaim = False\n                break\n\n    second_can_reclaim = True\n    for i in range(second[0] - 1, second[0] + 2):\n        for j in range(second[1] - 1, second[1] + 2):\n            if (i, j)!= second and (i, j)!= first:\n                second_can_reclaim = False\n                break\n\n    if first_can_reclaim and not second_can_reclaim:\n        return \"WIN\"\n    elif not first_can_reclaim and second_can_reclaim:\n        return \"WIN\"\n    else:\n        return \"LOSE\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    if s in a or s not in b:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a, b = [], []\n    for _ in range(n):\n        a.append(int(stdin.readline()))\n    for _ in range(n):\n        b.append(int(stdin.readline()))\n    return 'YES' if n - b[0] <= b.index(s) - a.index(s) <= n - b[-1] else 'NO'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0432\u0438\u0434\u0430 {1: [1, 2, 3], 2: [0, 4, 5, 6],...}\n    # \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u044e\u0447\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0430\u043d\u0446\u0438\u0439, \u0430 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u2014 \u0441\u043f\u0438\u0441\u043a\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432\n    # \u0412 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0431\u0443\u0434\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u0438 \u0432\u0438\u0434\u0430 [0, 1, 2, 3]\n    # \u0413\u0434\u0435 0 - \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0432 \u043f\u0440\u044f\u043c\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438, 1 - \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438\n    station_dict = {}\n    for i in range(n):\n        if a[i] == 1:\n            station_dict[i + 1] = [i + 1, i]\n        else:\n            station_dict[i + 1] = [i]\n    for i in range(n):\n        if b[i] == 1:\n            station_dict[i + 1].append(i + 1)\n        else:\n            station_dict[i + 1].append(i)\n    # print(station_dict)\n    # print(station_dict.get(1))\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0434\u0432\u0443\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439\n    # \u041f\u0435\u0440\u0432\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043f\u0435\u0440\u0435\u0434, \u0432\u0442\u043e\u0440\u0430\u044f \u0432\u043f\u0440\u0430\u0432\u043e\n    # \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n    # \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0432\u043d\u0430 [2, 4, 6, 8, 10, 12]\n    sequence = [station_dict.get(s)[1], station_dict.get(s)[0]]\n    # print(sequence)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n    # \u041e\u0434\u0438\u043d \u0441\u0442\u043e\u043b\u0431\u0435\u0446 - \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u043d\u0446\u0438\u0438, \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u0431\u0435\u0446 - \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u043d\u0446\u0438\u0438\n    metro_array = [[i] for i in range(1, n + 1)]\n    for i in range(n):\n        if sequence[0] == i + 1:\n            metro_array[i].append(i + 1)\n        else:\n            metro_array[i].append(i)\n    for i in range(n - 1, -1, -1):\n        if sequence[1] == i + 1:\n            metro_array[i].append(i + 1)\n        else:\n            metro_array[i].append(i)\n    # print(metro_array)\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435\u0442 \u043b\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c 0,\n    # \u0433\u0434\u0435 \u0441\u0442\u0430\u043d\u0446\u0438\u044f \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0430\u043d\u0446\u0438\u0435\u0439 \u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0435\n    # \u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c\n    # \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430,\n    # \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 - \u044d\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0441\u0442\u0430\u043d\u0446\u0438\u0439, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    station = [list(map(int, stdin.split('\\n')[1:][i].split())) for i in range(n)]\n    alice = [s, 0]\n    bob = [1, 0]\n    first = True\n    for i in range(len(station)):\n        for j in range(station[i][0]):\n            if station[i][1] == 0:\n                alice[1] += 1\n            else:\n                alice[0] -= 1\n                bob[1] += 1\n            if alice[0] == bob[0] == 0:\n                if first:\n                    first = False\n                else:\n                    return 'NO'\n    return 'YES'\n\"\"\"\n\ndef"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it's possible to travel by metro.\"\"\"\n    n, s, a, b = stdin.split()\n    n, s, a, b = int(n), int(s), int(a), int(b)\n    a_track, b_track = [int(i) for i in a.split()], [int(i) for i in b.split()]\n    a_track_reverse = [0 if i == 1 else 1 for i in a_track]\n    print(a_track_reverse, b_track)\n    return \"YES\" if a_track_reverse[s] == 0 and b_track[n-1] == 0 else \"NO\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\")\n    'YES'\n    >>> solution(\"5 4\\n1 0 0 0 1\\n1 1 1 1 1\\n\")\n    'YES'\n    >>> solution(\"5 2\\n0 1 1 1 1\\n1 1 1 1 1\\n\")\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    alice_home = []\n    bob_home = []\n    for i, j in enumerate(stdin.split('\\n')):\n        if i == 0:\n            alice_home = [int(x) for x in j.split()]\n        elif i == 1:\n            bob_home = [int(x) for x in j.split()]\n    for i in range(n):\n        if alice_home[i] == 1:\n            break\n    for i in range(n):\n        if bob_home[i] == 1:\n            break\n    return 'YES' if i < s <= j else 'NO'\n\n\n\nfrom collections import Counter\ndef"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn, s = list(map(int, stdin.split()))\n\nfirst = [1 if i == '1' else 0 for i in stdin.split('\\n')[0].split()]\n\nsecond = [1 if i == '1' else 0 for i in stdin.split('\\n')[1].split()]\n\nfirst.reverse()\nsecond.reverse()"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function takes as an argument a string of a set of closed and open stations.\n    The function returns a string \"YES\" if Bob can travel to Alice's home by metro and\n    \"NO\" otherwise.\n    \"\"\"\n    closed_station = [int(station) for station in stdin.splitlines()[0].split()]\n    open_station = [int(station) for station in stdin.splitlines()[1].split()]\n    for station in open_station:\n        if station not in closed_station:\n            return \"NO\"\n    return \"YES\"\n    \n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 1 1 1 1\n   ... 1 1 1 1 1\n   ... ''')\n    'YES'\n    >>> solution('''5 4\n   ... 1 0 0 0 1\n   ... 0 1 1 1 1\n   ... ''')\n    'YES'\n    >>> solution('''5 2\n   ... 0 1 1 1 1\n   ... 1 1 1 1 1\n   ... ''')\n    'NO'\n    \"\"\"\n    n, s = [int(x) for x in stdin.split('\\n')[:2]]\n    a, b = [\n        list(map(int, x.split())) for x in stdin.split('\\n')[2:]\n    ]\n    return 'YES' if not [a[i] for i, x in enumerate(b) if x == 0][0] and a[s - 1] == 1 else 'NO'\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    instruments, days = [int(s) for s in stdin.split(\" \")]\n    day = [int(s) for s in stdin.split(\" \")]\n    s = \"\"\n    for i in range(instruments):\n        for j in range(days):\n            if day[i] > day[j]:\n                s += str(i+1) + \" \"\n    s = s.rstrip()\n    return s"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import sqrt\nfrom functools import reduce"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    l = [int(i) for i in stdin.split(\" \")]\n    l.sort()\n    n, k = len(l), k\n    j = 0\n    t = 0\n    ans = []\n    for i in range(n):\n        while j < n and (k == 0 or t + l[j] <= k):\n            t += l[j]\n            j += 1\n            k -= 1\n        ans.append(str(j - 1))\n        if j == n:\n            break\n        t -= l[j]\n    return \" \".join(ans)\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def input():\n        return stdin\n\n    def output(result):\n        print(len(result), *result)\n\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    arr.sort(reverse=True)\n\n    days = [0] * n\n    for i in range(k):\n        for j in range(n):\n            if arr[j] > 0:\n                days[j] += 1\n                arr[j] -= 1\n                break\n\n    result = []\n    for i in range(n):\n        if days[i] > 0:\n            result.append(i + 1)\n    if not result:\n        result = [0]\n\n    output(result)"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n\n    lst.sort()\n\n    def check_max_number_of_learners(start: int, end: int, k: int, lst: list) -> bool:\n        count = 0\n        for i in range(start, end + 1):\n            if count + lst[i] <= k:\n                count += lst[i]\n            else:\n                break\n        return count > k\n\n    def check_all_instruments(k: int, lst: list) -> bool:\n        for i in range(len(lst)):\n            if lst[i] > k:\n                return False\n        return True\n\n    start = 0\n    end = len(lst) - 1\n    result = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if check_all_instruments(k, lst):\n            result = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    print(result)\n\n    print(' '.join(map(str, range(1, result + 1))))\n    return ''\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = sorted(a, reverse=True)\n    s = 0\n    res = []\n    for i in range(n):\n        if s + b[i] <= k:\n            s += b[i]\n            res.append(i+1)\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your runtime beats 94.9 % of python3 submissions\"\"\"\n    stdin = stdin.splitlines()\n    arr = list(map(int, stdin[1].split()))\n    days = list(map(int, stdin[0].split()))\n    days.sort(reverse=True)\n    res = []\n    day = 0\n    for i in range(len(arr)):\n        if days[day] >= arr[i]:\n            res.append(i+1)\n            day += 1\n    return f'{day} {res}'\n\n\ndef"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n\n    s = sorted(arr, key=lambda x: x[1])\n    m = [s[0]]\n    for i in range(1, n):\n        if s[i][1] <= s[i - 1][2]:\n            m.append(s[i])\n    if len(m) == 1:\n        print(\"0\")\n        return\n    print(len(m))\n    for i in range(len(m)):\n        print(m[i][0], end=' ')\n    \"\"\"\n\n    # time limit exceed\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        w, t = arr[i - 1]\n        for j in range(1, k + 1):\n            if j < t:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - t] + w)\n\n    print(dp[-1][-1])\n    for i in range(n, 0, -1):\n        if dp[i][-1] == dp[i - 1][-1]:\n            continue\n        else:\n            print(i)\n            break\n\n\ndef"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(map(len, stdin.split('\\n')[1:]))) == 1 else \"NO\"\n\"\"\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    res = \"YES\"\n    count = 0\n    for i in stdin:\n        if i == \"1\":\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            res = \"NO\"\n            break\n    return res\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    photo = [int(char) for char in stdin.split()]\n    white_count = 0\n    black_count = 0\n    for pixel in photo:\n        if pixel == 0:\n            white_count += 1\n        else:\n            black_count += 1\n    if white_count == 0 or black_count == 0:\n        return 'NO'\n    else:\n        black_pixels_width = black_count // 2\n        white_pixels_width = white_count // 2\n        if white_pixels_width == black_pixels_width:\n            return 'YES'\n        else:\n            return 'NO'\n\n\ndef"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    photo = stdin.readline().split()\n    # x_i is the number of white pixels in the i-th column\n    x_i = [photo.count(str(i)) for i in range(len(photo))]\n    # y_i is the number of black pixels in the i-th column\n    y_i = [photo.count(str(i+1)) for i in range(len(photo))]\n    # total is the total number of pixels\n    total = sum(x_i) + sum(y_i)\n    # There are two possibilities:\n    # - The stripes are of equal lengths. In this case, there are at least two stripes, because they have different lengths.\n    #   Thus, the total number of black and white pixels is at least three.\n    # - The stripes have different lengths. In this case, there is at least one stripe with a length of three, so the total number of black and white pixels is at least four.\n    if total < 5:\n        return 'NO'\n    # We start with a length of one and try to find the largest length of a stripe.\n    # When there are at least two stripes with a length of three, it means that there are at least two stripes with a length of two,\n    # and the stripes with a length of one have equal lengths. Thus, we return 'YES'.\n    for i in range(2, total // 3 + 1):\n        if total % i == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = stdin[1].split(' ')\n    #print(a)\n    z = 0\n    for i in range(n):\n        if a[i] == \"1\":\n            z += 1\n        else:\n            z = 0\n        if z > 2:\n            return \"NO\"\n    return \"YES\"\n\"\"\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    photo = list(map(int, stdin.readline().split()))\n\n    is_zebra = True\n    for i in range(1, n, 2):\n        if photo[i] % 2!= photo[i - 1] % 2:\n            is_zebra = False\n            break\n\n    return \"YES\" if is_zebra else \"NO\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    width = int(stdin.readline())\n    # print(width)\n    photos = []\n    for row in stdin.readlines():\n        photos.append([int(x) for x in row.split()])\n    # print(photos)\n    for i in range(width):\n        for j in range(width):\n            if photos[i][j]!= photos[i + 1][j]:\n                if j!= 0 and j!= width - 1:\n                    return 'NO'\n                elif j == 0:\n                    if photos[i][j]!= photos[i + 1][j + 1]:\n                        return 'NO'\n                elif j == width - 1:\n                    if photos[i][j]!= photos[i + 1][j - 1]:\n                        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    width = int(stdin.split()[0])\n    photo = stdin.split()[1]\n    p = 0\n    width_of_stripe = 1\n    is_zebra = True\n    while p < width:\n        if photo[p] == '1':\n            if photo[p + 1] == '0' and photo[p + 2] == '0':\n                width_of_stripe += 1\n            else:\n                is_zebra = False\n                break\n        p += 1\n    p = 0\n    if is_zebra:\n        while p < width:\n            if photo[p] == '0':\n                if photo[p + 1] == '0' and photo[p + 2] == '0':\n                    width_of_stripe += 1\n                else:\n                    is_zebra = False\n                    break\n            p += 1\n    if is_zebra:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, M = [int(x) for x in stdin.split()]\n    ticket_times = [int(x) for x in stdin.split()]\n    ans = [0] * n\n    for i in range(1, n):\n        ans[i] = ans[i - 1] + ticket_times[i]\n        ans[i] = max(ans[i], ans[i - 1])\n        if ans[i] > M:\n            ans[i] = 0\n    print(*ans)\n    return''.join([str(x) for x in ans])"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n, M = [int(x) for x in stdin[0].split()]\n    t = [int(x) for x in stdin[1].split()]\n    \n    res = []\n    for i in range(n):\n        res.append(n - i - sum([x>t[i] for x in t[i:]]))\n    return''.join([str(x) for x in res])\n\n\ndef"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds minimum number of students to fail the exam so the $i$-th student has enough time to pass the exam.\n    :param stdin: string of input arguments\n    :return: string of output arguments\n    \"\"\"\n    # get input\n    n, m = [int(i) for i in stdin.split(' ')]\n    t = [int(i) for i in stdin.split(' ')[:n]]\n\n    # init\n    students = n\n    answers = [0] * n\n\n    # run\n    for i, tt in enumerate(t):\n        for j in range(i, students):\n            if tt >= m:\n                break\n            answers[j] += 1\n        students -= 1\n\n    # output\n    return''.join([str(i) for i in answers])\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, M = [int(c) for c in stdin.split()]\n    exam_times = [int(c) for c in stdin.split()]\n    exam_times.sort()\n    print(*find_pass_time(exam_times, M))\n\ndef"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, M = [int(x) for x in stdin.readline().split()]\nt = [int(x) for x in stdin.readline().split()]\nresult = [0] * n\nfor i in range(n):\n    s = t[i]\n    min_t = s\n    for j in range(i):\n        if t[j] < min_t:\n            min_t = t[j]\n    result[i] = min_t\nprint(*result, sep=' ')\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    times = [int(i) for i in stdin.split()]\n    dic = {i:0 for i in range(n)}\n    for i in times:\n        if i > m:\n            dic[times.index(i)] = n\n        else:\n            dic[times.index(i)] = 0\n    res = [min(j,n) for i, j in dic.items()]\n    print(*res)"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    'Find the minimum number of students who have to leave the exam'\n    _ = input()\n    n, M = map(int, input().split())\n    times = list(map(int, input().split()))\n    print(' '.join(map(str, times)))\n    print(' '.join(map(str, list(accumulate(times, operator.add, initial=0)))))\n    print(' '.join(map(str, list(accumulate(times, operator.add, initial=0)))))\n    print(min(0, sum(times) - M))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    \n    t_sum = sum(t)\n    p = 1\n    l = 0\n    for x in t:\n        if x + l > m:\n            break\n        p *= x + l\n        l += x\n    \n    print(*[x for x in range(len(t), n) if x < p])"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import accumulate\n    n, m = map(int, stdin.readline().split())\n    data = list(map(int, stdin.readline().split()))\n    data.sort()\n    ans = [0] * (n + 1)\n    for i in range(n + 1):\n        if i == n:\n            break\n        ans[i + 1] = ans[i] + (m - data[i])\n    return \" \".join(map(str, accumulate(ans)))\n\n\ndef"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The script solve the problem by using dynamic programming\"\"\"\n    n, x = map(int, stdin.split())\n    set_n = list(map(int, stdin.split()))\n    set_n.sort()\n    e_x = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        e_x[i] = set_n[i - 1] - set_n[i - 1] - 1\n    ans = float(\"inf\")\n    for i in range(1, n + 1):\n        if i + e_x[i] > n:\n            continue\n        ans = min(ans, max(e_x[i], e_x[i + e_x[i]]))\n    return ans\n\n\ndef"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\nprint(solution(''))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # \ucc98\uc74c\uc5d0\ub294 \uac00\uc9c0\uace0 \uc788\ub294 \uc22b\uc790\ub4e4\uc744 \ucd5c\uc18c\uac12\uc73c\ub85c \uc0dd\uac01\ud574\ub0b8\ub2e4.\n    n, x = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n\n    tmp = [0 for _ in range(101)]\n    for n in nums:\n        tmp[n] += 1\n    # print(tmp)\n    # [0, 2, 3, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.readline().strip().split(' '))\n    A = list(map(int, stdin.readline().strip().split(' ')))\n    min_ops = 0\n    while x not in A:\n        min_ops += 1\n        A.append(x)\n        A.sort()\n    return min_ops\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, mex = [int(x) for x in stdin.split(' ')]\n    nums = [int(x) for x in stdin.split(' ')[1].split(' ')]\n\n    return str(len(nums) - 1 + mex)\n\"\"\"\n\ndef"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n\ndef"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    n, mex = line[0].split()\n    n = int(n)\n    mex = int(mex)\n    set_ = set(line[1].split())\n    if set_.pop() > mex:\n        return str(len(set_) + 1)\n    return str(len(set_))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and find number of operations.\"\"\"\n    # Write your code here\n    n, x = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    mex = x\n    for i in range(0, n):\n        mex = min(mex, (a[i] + i))\n    if mex > n:\n        mex = n\n    return mex"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, mex = [int(i) for i in stdin.split(\" \")]\n    arr = [int(i) for i in stdin.split(\" \")]\n    if len(arr) == 1 and arr[0] == 0:\n        print(0)\n        return\n    arr = sorted(arr)\n    print(arr)\n    if min(arr) >= mex:\n        print(0)\n        return\n    i = 0\n    count = 0\n    while i < len(arr):\n        if mex > arr[i]:\n            count += 1\n            i += 1\n            continue\n        print(count)\n        return\n        break\n\n\n\ndef"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    x = (A - B)//abs(A - B) if A > B else (B - A)//abs(A - B)\n    return \"0\" + str(x + 1) if x == 0 else str(x) + \" \" + str(x + 1) if x + 1 < 6 else str(x + 2)\n\n\ndef"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a - b < 0:\n        return str(a - b) +'' + str(0) +'' + str(b)\n    if b - a < 0:\n        return str(0) +'' + str(b - a) +'' + str(b)\n    return str(0) +'' + str(0) +'' + str(b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    if abs(a - 3) < abs(b - 3):\n        return '1'\n    elif abs(a - 3) > abs(b - 3):\n        return '2'\n    else:\n        return '0'"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom itertools import permutations\n\n\ndef"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(a - b) +'' + str(0) +'' + str(3) if abs(a - b) < abs(6 - b - a) else str(2) +'' + str(1) +'' + str(3)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if abs(a - 3) < abs(b - 3):\n        return 1, 0, 3\n    if abs(a - 4) < abs(b - 4):\n        return 1, 1, 4\n    return 0, 1, 3\n    "
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"1 {} 0\".format(a < b and a or b)"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the required number of candies from the first input and\n    print it to the standard output.\"\"\"\n    # Get the number of candies.\n    day_of_week = int(stdin[:stdin.find(\" \")])\n    day_of_month = int(stdin[stdin.find(\" \") + 1:])\n    # Find out how many candies are there in the year 2016.\n    # You can't save more than 366 candies in 2016.\n    if day_of_month in [1, 15, 31]:\n        how_many_candies_in_2016 = day_of_month * DAYS_IN_YEAR\n    else:\n        how_many_candies_in_2016 = (day_of_month + DAYS_IN_YEAR - 1) * DAYS_IN_YEAR\n    # Find out how many candies Limak can save with the plan he selected.\n    # You can't save more than 365 candies.\n    if day_of_week == 1 or day_of_month == 1:\n        how_many_candies = day_of_month * DAYS_IN_YEAR\n    else:\n        how_many_candies = (day_of_week - 1 + day_of_month) * DAYS_IN_YEAR\n    # Print the required number of candies.\n    print(how_many_candies)\n    return \"\"\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.find('of week')!= -1:\n        day = int(stdin.split()[0])\n        if day == 1:\n            return str(7)\n        elif day == 7:\n            return str(1)\n        return str(day - 2)\n    if stdin.find('of month')!= -1:\n        day = int(stdin.split()[0])\n        if day == 1:\n            return str(31)\n        return str(day - 1)\n\ndef"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days_of_the_week = {\n        'Monday': 0,\n        'Tuesday': 1,\n        'Wednesday': 2,\n        'Thursday': 3,\n        'Friday': 4,\n        'Saturday': 5,\n        'Sunday': 6,\n    }\n\n    days_of_the_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n\n    days_in_the_year = {\n        1: 31,\n        2: 29 if is_leap_year(2016) else 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n\n    plan = stdin.split(' of ')\n\n    if len(plan) == 1:\n        day, type_of_the_day = plan[0].split()\n        if type_of_the_day == 'week':\n            return days_in_the_year[day] * 7\n        elif type_of_the_day =='month':\n            return days_in_the_year[day]\n    else:\n        day, type_of_the_day = plan[1].split()\n        if type_of_the_day == 'week':\n            return days_of_the_month[day] * 7\n        elif type_of_the_day =='month':\n            return days_of_the_month[day]\n\n\ndef"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 of week\")\n    52\n    >>> solution(\"30 of month\")\n    11\n    \"\"\"\n    days, month = stdin.split(\" of \")\n    weekdays = {\n        \"monday\": 1,\n        \"tuesday\": 2,\n        \"wednesday\": 3,\n        \"thursday\": 4,\n        \"friday\": 5,\n        \"saturday\": 6,\n        \"sunday\": 7,\n    }\n    if days == \"monday\":\n        day = 1\n    else:\n        day = weekdays[days]\n    candies = 0\n    for i in range(1, 13):\n        if i == month:\n            candies += 31\n        elif i == \"february\":\n            if i == month:\n                candies += 29\n            elif month == \"april\" or month == \"june\" or month == \"september\":\n                candies += 30\n    candies += day - 1\n    return candies\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        return stdin.split(' ')[1]\n    except:\n        return stdin.split(' ')[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution('4 of week'))\nprint(solution('30 of month'))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndays = {'1':'monday', '2': 'tuesday', '3': 'wednesday', '4': 'thursday', '5': 'friday', '6':'saturday', '7':'sunday'}\n\ndef"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    week_number = int(line[0].split('of')[0])\n    week_day = line[0].split('of')[1]\n    month_day = int(line[1])\n    if week_day == 'week':\n        return str(4 * month_day)\n    elif week_day =='month':\n        return str(30 * month_day)"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    stairs = list(map(int, stdin.split()))\n    print(\"YES\" if sum(stairs) > n else \"NO\")\n    return \"\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. Feel free to use as many code cells as needed, but please do not change the function name.\n    \"\"\"\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    if n < m:\n        return 'NO'\n    x = n\n    while x % 2 == 0:\n        x //= 2\n    if x == 1:\n        return 'YES'\n    for i in a:\n        if i % 2 == 0 and x % i!= 0:\n            return 'NO'\n    return 'YES'\nprint(solution(input()))\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m = [int(number) for number in stdin.split(' ')]\n    dirty_stairs = [int(number) for number in stdin.split(' ')[1].split(' ')]\n\n    # init\n    res = [0 for _ in range(n)]\n    res[0] = 1\n\n    # calc\n    for d in dirty_stairs:\n        for i in range(d, n):\n            res[i] += res[i - d]\n            # print(res)\n    # print(res)\n\n    # check\n    if res[n - 1] > 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stair, dirty = [int(i) for i in stdin.strip().split(\" \")]\n    dirty = [int(i) for i in stdin.strip().split(\" \")]\n    for i in range(stair - 1, 1, -1):\n        if i not in dirty:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    stairs, steps = [int(x) for x in stdin.split(' ')]\n    steps = [int(x) for x in stdin.split(' ')]\n\n    # create a table of the results\n    results = [1] * stairs\n    for i in range(1, steps[0]):\n        results[i] = results[i - 1] + 1\n    for i in range(steps[0] - 2, steps[-1] - 2, -1):\n        results[i] = max(results[i + 1] + 1, results[i])\n    results[steps[-1] - 1] = results[steps[-1] - 2] + 1\n\n    # check if the stairs can be reached\n    return 'YES' if results[-1] <= steps[-1] else 'NO'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement a function named solution that receives two input arguments: n and m. You have to make n steps with no more than m jumps. Return \"YES\" if Petya can reach the stair number n without touching a dirty stair, otherwise return \"NO\".\n    \"\"\"\n\n    n, m = [int(i) for i in stdin.split()]\n    stairs = [int(i) for i in stdin.split()]\n    for i in range(m):\n        if stairs[i] > n:\n            return 'NO'\n\n    for i in range(len(stairs) - 1):\n        if stairs[i] + 2 == stairs[i + 1]:\n            if m == 0:\n                return 'NO'\n            else:\n                m -= 1\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We need to do a bfs to solve this problem\n    we have an array of all the possible steps we could take\n    we need to use that array as our 'board'\n    we iterate through that array and mark all the nodes we could possibly go to as being valid\n\n    if we encounter a node that is invalid\n    we simply skip it\n\n    if we encounter a node that is valid\n    we take a step and add it to the stack to check it later\n    '''\n    # inputs\n    n, m = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n\n    # create the board of possible steps we could take\n    board = []\n    for i in range(n):\n        for j in range(n):\n            board.append((i, j))\n\n    # create our 'q' of possible steps we could take\n    q = deque()\n\n    # create our visited set\n    visited = set()\n    # iterate through d and mark valid steps\n    for step in d:\n        # check if we've visited this step\n        if (step, 0) in visited:\n            continue\n\n        visited.add((step, 0))\n\n        # if we've not visited step, then add it to our q\n        q.append((step, 0))\n\n    # while q is not empty\n    while len(q)!= 0:\n        # pop a step from our q\n        step = q.popleft()\n\n        # if we have reached our goal\n        if step[0] == n - 1:\n            return 'YES'\n\n        # iterate through each step we could possibly take\n        for step_taken in board:\n            # if the step taken is valid\n            if step_taken!= step:\n                # update our visited set\n                visited.add(step_taken)\n\n                # add the step taken to our q\n                q.append(step_taken)\n    return 'NO'\n\nprint(solution('10 5\\n2 4 8 3 6'))\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code here\n    \"\"\"\n    # HINT:\n    # Write your code here\n    # n, m = list(map(int, stdin.split()))\n    # d = list(map(int, stdin.split()))\n    n, m = (int(i) for i in stdin.split())\n    d = sorted([int(i) for i in stdin.split()])\n    if d[0] == 1 or d[-1] == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        a, b, p, q = list(map(int, stdin.readline().split()))\n        x = a // p * q\n        y = a // q * p\n        if x == a and y == b:\n            print(x)\n        elif x < y:\n            print(x)\n        else:\n            print(-1)\n    return ''\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    def solve(self, stdin):\n        def is_divisible(n, k):\n            return n % k == 0\n\n        t = int(stdin.readline().strip())\n        for _ in range(t):\n            x, y, p, q = map(int, stdin.readline().strip().split())\n            if p / q < y / x:\n                print(-1)\n            elif is_divisible(p, x) and is_divisible(q, y):\n                print(x * y // gcd(x, y))\n            else:\n                print(0)\n\n\ndef"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_case = int(stdin.readline())\n    tests = []\n    for i in range(test_case):\n        tests.append(list(map(int, stdin.readline().split())))\n    return [solution_by_math(t[0], t[1], t[2], t[3]) for t in tests]\n\n\ndef"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if a < b:\n            return gcd(b, a)\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    num_tests = int(stdin.readline())\n    for _ in range(num_tests):\n        a, b, p, q = map(int, stdin.readline().split())\n        g = gcd(a, b)\n        l = lcm(a, b)\n        if p*g < l and q*g < l and p*q >= g:\n            print(l)\n        else:\n            print('-1')\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        x, y, p, q = map(int, stdin.readline().split())\n        f = 1\n        while True:\n            if x / y >= p / q:\n                break\n            f += 1\n            x, y = y, x + y\n        print(-1 if f % 2 else f)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Codeforces Solution\"\"\"\n    \n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        a, b, p, q = [int(x) for x in stdin.readline().split()]\n        x = min(a, b)\n        y = max(a, b)\n        res = float('inf')\n        while x!= 0:\n            if x * p / q < y:\n                res = min(res, x)\n                x += 1\n            else:\n                x -= 1\n        if res == float('inf'):\n            print(-1)\n        else:\n            print(res)\n    return ''\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn = int(stdin.readline())\n\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    x = 0\n    for line in lines:\n        if 'add' in line:\n            x += 1\n        elif 'for' in line:\n            # n = int(line[3:])\n            n = eval(line[3:])\n            for _ in range(n):\n                x += 1\n        elif 'end' in line:\n            break\n    if x > 2**31-1:\n        print('OVERFLOW!!!')\n    else:\n        print(x)\n    \n    return x\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(parse(stdin)))\n\n\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n)\n    space: O(n)\n    \"\"\"\n    lines = stdin.split('\\n')\n    # number of lines in the function\n    n = int(lines[0])\n    # function\n    f = '\\n'.join(lines[1:])\n    x = 0\n\n    # for loop\n    for _ in range(n):\n        # for loop end command\n        f_tmp = f\n        while 'end' not in f_tmp:\n            f_tmp = f_tmp[f_tmp.find('for'):]\n            if 'end' not in f_tmp:\n                break\n        if 'end' in f_tmp:\n            f_tmp = f_tmp[:f_tmp.find('end')]\n        # add one to x\n        if 'add' in f_tmp:\n            x += 1\n        # for loop\n        n = f_tmp.count('for')\n\n    if x > 2 ** 31 - 1:\n        return 'OVERFLOW!!!'\n    return str(x)\n\n\nprint(solution('''\n9\nadd\nfor 43\nend\nfor 10\nfor 15\nadd\nend\nadd\nend\nend\nend\nend\n'''))\n\nprint(solution('''\n2\nfor 62\nend\n'''))\n\nprint(solution('''\n11\nfor 100\nfor 100\nfor 100\nfor 100\nfor 100\nadd\nend\nend\nend\nend\nend\nend\n'''))\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Some string processing.\n    :param stdin: string\n    :return: string\n    \"\"\"\n    l = int(stdin.split('\\n')[0])\n    for i in range(l):\n        stdin = stdin.replace('for '+str(i)+' end', 'for '+str(i)+' end;for '+str(i)+' end')\n        stdin = stdin.replace('for '+str(i)+' end;', 'for '+str(i)+' end;for '+str(i)+' end')\n        stdin = stdin.replace('add', 'add 1')\n        stdin = stdin.replace('end', 'end;')\n    stdin = stdin.replace('add', 'add 1')\n    stdin = stdin.replace('end', 'end;')\n    stdin = stdin.replace(';', '')\n    stdin = stdin.replace(' ', '')\n    stdin = stdin.split('\\n')\n    print(stdin)\n    return stdin\n\n\"\"\"\nfor i in range(2):\n    for j in range(7):\n        add\n    end\nend\n\"\"\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    commands = stdin.split('\\n')\n    x = 0\n\n    for i in range(len(commands)):\n        command = commands[i]\n        if command == \"add\":\n            x += 1\n        if command == \"end\":\n            break\n        else:\n            n = int(command.split(\"for \")[1])\n            for j in range(n):\n                if i == len(commands) - 1:\n                    break\n                i += 1\n                if commands[i] == \"add\":\n                    x += 1\n                if commands[i] == \"end\":\n                    break\n    if x < 2 ** 32 - 1:\n        return str(x)\n    else:\n        return \"OVERFLOW!!! \"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n\n    assert re.match('[a-z0-9]*', stdin)\n    return sum(int(num) % 2 for num in stdin if num in 'aeiou')\n\n\ndef"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n\"\"\"\n\ndef"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if 'a' in s and 'e' in s and 'i' in s and 'o' in s and 'u' in s:\n        return '0'\n    else:\n        return '2'\n'''\n\n\ndef"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin\n    \n    n = len(cards)\n    i = 0\n    cnt = 0\n    \n    for j in range(n):\n        if 'a' <= cards[j] <= 'z':\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt == 0:\n            i = j\n            break\n        \n    print(j - i + 1)\n    return ''"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('0', 'a')\n    s = s.replace('2', 'b')\n    s = s.replace('4', 'c')\n    s = s.replace('6', 'd')\n    s = s.replace('8', 'e')\n    s = s.replace('1', 'f')\n    s = s.replace('3', 'g')\n    s = s.replace('5', 'h')\n    s = s.replace('7', 'i')\n    s = s.replace('9', 'j')\n\n    s = s.replace('a0', 'a')\n    s = s.replace('a2', 'b')\n    s = s.replace('a4', 'c')\n    s = s.replace('a6', 'd')\n    s = s.replace('a8', 'e')\n    s = s.replace('a1', 'f')\n    s = s.replace('a3', 'g')\n    s = s.replace('a5', 'h')\n    s = s.replace('a7', 'i')\n    s = s.replace('a9', 'j')\n\n    s = s.replace('b0', 'b')\n    s = s.replace('b2', 'c')\n    s = s.replace('b4', 'd')\n    s = s.replace('b6', 'e')\n    s = s.replace('b8', 'f')\n    s = s.replace('b1', 'g')\n    s = s.replace('b3', 'h')\n    s = s.replace('b5', 'i')\n    s = s.replace('b7', 'j')\n\n    s = s.replace('c0', 'c')\n    s = s.replace('c2', 'd')\n    s = s.replace('c4', 'e')\n    s = s.replace('c6', 'f')\n    s = s.replace('c8', 'g')\n    s = s.replace('c1', 'h')\n    s = s.replace('c3', 'i')\n    s = s.replace('c5', 'j')\n\n    s = s.replace('d0', 'd')\n    s = s.replace('d2', 'e')\n    s = s.replace('d4', 'f')\n    s = s.replace('d6', 'g')\n    s = s.replace('d8', 'h')\n    s = s.replace('d1', 'i')\n    s = s.replace('d3', 'j')\n\n    s = s.replace('e0', 'e')\n    s = s.replace('e2', 'f')\n    s = s.replace('e4', 'g')\n    s = s.replace('e6', 'h')\n    s = s.replace('e8', 'i')\n    s = s.replace('e1', 'j')\n\n    s = s.replace('f0', 'f')\n    s = s.replace('f2', 'g')\n    s = s.replace('f4', 'h')\n    s = s.replace('f6', 'i')\n    s = s.replace('f8', 'j')\n\n    s = s.replace('g0', 'g')\n    s = s.replace('g2', 'h')\n    s = s.replace('g4', 'i')\n    s = s.replace('g6', 'j')\n\n    s = s.replace('h0', 'h')\n    s = s.replace('h2', 'i')\n    s = s.replace('h4', 'j')\n\n    s = s.replace('i0', 'i')\n    s = s.replace('i2', 'j')\n\n    s = s.replace('j0', 'j')\n\n    vowels = 'aeiou'\n    return sum([1 for c in s if c in vowels])\n\nprint(solution('ee'))\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return sum(1 if s[i] in 'aeiouAEIOU' and int(s[i + 1]) % 2 == 0 else 0 for i in range(len(s) - 1))"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count(\"a\") + stdin.count(\"e\") + stdin.count(\"i\") + stdin.count(\"o\") + stdin.count(\"u\"))\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # num_detachments = int(stdin.readline())\n    # x = [int(x) for x in stdin.readline().split()]\n    # y = [int(y) for y in stdin.readline().split()]\n\n    # g = nx.Graph()\n    # g.add_nodes_from([(i, j) for i, j in enumerate(zip(x, y))])\n    # for i in range(num_detachments):\n    #     for j in range(i + 1, num_detachments):\n    #         if abs(x[i] - x[j]) + abs(y[i] - y[j]) == 1:\n    #             g.add_edge(i, j)\n\n    # ans = nx.shortest_path_length(g, 0, num_detachments - 1, weight='weight')\n    # if ans == num_detachments:\n    #     ans = 0\n    # return str(ans)\n\n    # n = int(stdin.readline())\n    # xy = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    # # print(xy)\n    # xy = set(xy)\n    # # print(xy)\n    # # print(xy[0])\n    # # print(list(xy)[0])\n    # # print(xy.index((0, 0)))\n    # xy = list(xy)\n    # xy = sorted(xy, key=lambda x: x[0] + x[1])\n    # # print(xy)\n    # xy = sorted(xy, key=lambda x: x[1])\n    # # print(xy)\n    # xy = sorted(xy, key=lambda x: x[0])\n    # # print(xy)\n    # # print(xy)\n    # # print(xy[1])\n    # x = xy[0][0]\n    # y = xy[0][1]\n    # xy = xy[1:]\n    # print(xy)\n    # ans = x + y\n    # for i in range(len(xy)):\n    #     x = xy[i][0]\n    #     y = xy[i][1]\n    #     ans += abs(x - y)\n    # return str(ans)\n    n = int(stdin.readline())\n    xy = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    xy = set(xy)\n    # print(xy)\n    xy = list(xy)\n    xy = sorted(xy, key=lambda x: x[0] + x[1])\n    # print(xy)\n    x = xy[0][0]\n    y = xy[0][1]\n    xy = xy[1:]\n    ans = x + y\n    for i in range(len(xy)):\n        x = xy[i][0]\n        y = xy[i][1]\n        ans += abs(x - y)\n    return str(ans)\n\n\nsolution(stdin)"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [tuple(int(i) for i in stdin.split()) for _ in range(n)]\n    # print(n, points)\n\n    # Find smallest x, largest x, smallest y, largest y\n    xs = set(points[i][0] for i in range(n))\n    ys = set(points[i][1] for i in range(n))\n    x_min = min(xs)\n    x_max = max(xs)\n    y_min = min(ys)\n    y_max = max(ys)\n\n    # print(x_min, x_max, y_min, y_max)\n\n    # We only need to check all the points with x between x_min and x_max, and all the points with y between y_min and y_max\n    x_set = set(i for i in range(x_min, x_max + 1))\n    y_set = set(i for i in range(y_min, y_max + 1))\n    # print(x_set, y_set)\n\n    best = None\n    best_t = None\n    for y in y_set:\n        for x in x_set:\n            t = 0\n            # Find all points with this x and y\n            points_ = [p for p in points if p[0] == x and p[1] == y]\n            # print(x, y, points_)\n            # print(points_)\n            detachments_ = set(points_)\n            while True:\n                # We can just add a new point to set\n                new_point = ((x + t) % (x_max - x_min + 1), y)\n                # print(\"Point\", new_point, \"is added\")\n                if new_point in detachments_:\n                    # print(\"Detachment\", new_point, \"exists\")\n                    detachments_.remove(new_point)\n                else:\n                    # print(\"Detachment\", new_point, \"does not exist\")\n                    break\n                t += 1\n            if best is None or len(detachments_) < best:\n                best = len(detachments_)\n                best_t = t\n\n    return best_t\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n0 0\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3')\n    100\n    >>> solution('7\\n0 0\\n1 0\\n-3 0\\n0 -2\\n-1 -1\\n-1 -3\\n-2 -3')\n    -1\n    >>> solution('5\\n0 0\\n2 0\\n0 -1\\n-2 0\\n-2 1')\n    2\n    \"\"\"\n    detachments = stdin.split('\\n')[1:]\n    detachments = sorted(\n        (\n            (\n                abs(int(x)),\n                abs(int(y)),\n                0 if x == '0' and y == '0' else 1,\n                0,\n            )\n            for x, y in detachments\n        ),\n        key=lambda x: (x[0], x[1]),\n    )\n    i, distance, already_visited, total = 0, 0, {}, 0\n    while i < len(detachments):\n        x, y, flag, t = detachments[i]\n        if (x, y) not in already_visited:\n            distance += 1\n            already_visited[(x, y)] = 1\n            total += t\n            i += flag\n            continue\n        if distance > 1:\n            total += (distance - 1) * t\n            distance = 1\n        total += t\n        i += 1\n    return '{}'.format(total) if distance > 1 else '-1'\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [(0, 0)]\n    for i in range(n):\n        arr.append(map(int, stdin.split(' ')))\n    return str(solve(arr))\n\n\ndef"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u21161\n    \u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u044a\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u043e\u0431\u044a\u0435\u043c\u043e\u043c \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440\u043e\u0432 \u0432 64 \u0431\u0438\u0442\u0430.\n    \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u21162 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0430\u043c\u044f\u0442\u0438, \u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.\n    :param stdin:\n    :return:\n    \"\"\"\n    return str(int(stdin.splitlines()[0]))\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a solution for this problem.\n    \"\"\"\n    # We read the input.\n    length = int(stdin)\n\n    # We create a variable that will contain the answer to the problem.\n    answer = None\n\n    # We create a variable that will contain the minimum number of seconds it takes.\n    min_t = None\n\n    # We create a variable that will contain the point with the minimum number of seconds it takes.\n    min_point = None\n\n    # We create a variable that will contain the maximum number of seconds it takes.\n    max_t = None\n\n    # We create a variable that will contain the point with the maximum number of seconds it takes.\n    max_point = None\n\n    # We create a variable that will contain the point with the maximum number of seconds it takes.\n    second_point = None\n\n    # We iterate over each point, we create an object with its coordinates.\n    for i in range(length):\n        # We get the coordinates of the current point.\n        x, y = stdin.split(' ')\n        x = int(x)\n        y = int(y)\n\n        # We create an object with its coordinates.\n        point = Point(x, y)\n\n        # We check if the current point has the minimum number of seconds it takes.\n        if min_t is None or min_t > point.distance:\n            # If so, we update the minimum number of seconds it takes and the minimum point.\n            min_t = point.distance\n            min_point = point\n\n        # We check if the current point has the maximum number of seconds it takes.\n        if max_t is None or max_t < point.distance:\n            # If so, we update the maximum number of seconds it takes and the maximum point.\n            max_t = point.distance\n            max_point = point\n\n        # We check if the current point has the second number of seconds it takes.\n        if second_point is None or second_point.distance > point.distance:\n            # If so, we update the second number of seconds it takes and the second point.\n            second_point = point\n\n    # We check if the maximum number of seconds it takes is not None, if so, we update the answer with the maximum number of seconds it takes.\n    if max_t is not None:\n        # If so, we update the answer with the maximum number of seconds it takes.\n        answer = max_t\n\n    # We check if the minimum number of seconds it takes is not None, if so, we update the answer with the minimum number of seconds it takes.\n    if min_t is not None:\n        # If so, we update the answer with the minimum number of seconds it takes.\n        answer = min_t\n\n    # We check if the second number of seconds it takes is not None, if so, we update the answer with the second number of seconds it takes.\n    if second_point is not None:\n        # If so, we update the answer with the second number of seconds it takes.\n        answer = second_point.distance\n\n    # If the answer is None, it means that it is not possible to check all the detachments, so we update the answer with -1.\n    if answer is None:\n        # If so, we update the answer with -1.\n        answer = -1\n\n    # We return the answer.\n    return str(answer)\n\n\nclass Point:\n    \"\"\"\n    This class represents a point with its coordinates.\n    \"\"\"\n    def __init__(self, x: int, y: int):\n        \"\"\"\n        This is the initialization of the class.\n        \"\"\"\n        # We store the coordinates of the point.\n        self.x = x\n        self.y = y\n\n    def distance(self) -> int:\n        \"\"\"\n        This method calculates the distance between this point and the origin.\n        \"\"\"\n        # We return the distance between this point and the origin.\n        return abs(self.x) + abs(self.y)\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity:\n    n = len(stdin)\n    1. O(n^2)\n    2. O(n^2)\n    \"\"\"\n    length = int(stdin)\n    points = []\n    for _ in range(length):\n        points.append(list(map(int, input().split())))\n\n    d = []\n    for i, point in enumerate(points):\n        for point_ in points:\n            d.append([point[0] - point_[0], point[1] - point_[1]])\n\n    d.sort(key=lambda x: abs(x[0]) + abs(x[1]))\n    d = d[::-1]\n    if d[0][0] == d[0][1] == 0:\n        return 1\n\n    for i, pair in enumerate(d):\n        for j, pair_ in enumerate(d):\n            if i!= j and abs(pair[0]) + abs(pair[1]) > abs(pair_[0]) + abs(pair_[1]):\n                d.pop(j)\n                d.pop(i)\n                break\n\n    # print(d)\n\n    start = 0\n    while True:\n        for i, pair in enumerate(d):\n            for j, pair_ in enumerate(d):\n                if i!= j and abs(pair[0]) + abs(pair[1]) > abs(pair_[0]) + abs(pair_[1]):\n                    d.pop(j)\n                    d.pop(i)\n                    break\n            else:\n                continue\n            break\n        else:\n            break\n    # print(d)\n\n    s = 0\n    for pair in d:\n        s += abs(pair[0]) + abs(pair[1])\n    return s\n\n\ndef"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    l = stdin[0:n]\n    r = stdin[n:]\n    ls = [i for i in range(1, n+1) if l[i-1]=='L']\n    rs = [i for i in range(1, n+1) if r[i-1]=='R']\n    for i in range(0, n//2):\n        if ls[i]!= rs[i] + 1:\n            return str(ls[i]) +'' + str(rs[i])\n\ndef"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    pass"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) % 2!= 0:\n        return\n    n = int(stdin)\n    lst = stdin.split('L')\n    for i in range(n):\n        if len(lst[i]) > 1:\n            print(''.join(lst[i]))\n\n\nsolution(input())\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    n = stdin.count(\"L\")\n    return [str(int(n / 2)) + \" \" + str(int(n / 2) + 1)]"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of pairs of students who can not talk to each other.\n    :param stdin: string, number of students and their L/R status.\n    :return: string, number of pairs of students who can not talk to each other.\n    \"\"\"\n    n = int(stdin.split()[0])\n    LR = stdin.split()[1]\n    LR = [i for i in LR]\n    LR = [i for i in LR if i == \"L\" or i == \"R\"]\n    LR = [int(i) for i in range(1, n + 1)]\n    LR = list(map(lambda x: x % 2, LR))\n    LR = list(map(lambda x: 1 if x == 0 else 0, LR))\n    LR = [LR.count(1), LR.count(0)]\n    LR = list(map(lambda x: x + 1, LR))\n    LR = list(map(lambda x: x // 2, LR))\n    LR = [i for i in range(1, n + 1)]\n    LR = list(map(lambda x: x if LR[x - 1] == 1 else x + 1, LR))\n    LR = list(map(lambda x: x + 1, LR))\n    LR = list(map(lambda x: x - 1, LR))\n    LR = list(map(lambda x: x - 1, LR))\n    return \"\\n\".join(map(str, LR))\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for perm in itertools.permutations(range(1, n + 1)):\n        r = \"\".join(str(i) for i in perm if i % 2)\n        l = \"\".join(str(i) for i in perm if not i % 2)\n        print(l, r)\n\nsolution('4')\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n%2:\n        return None\n    if n == 2:\n        return f'{1} {2}\\n{3} {4}'\n    f = [[0] * 2 for i in range(n)]\n    l = [0] * n\n    r = [0] * n\n    for i in range(n):\n        if stdin[i] == 'L':\n            l[i] = i\n            r[i] = i+1\n            f[i][0] = i\n            f[i][1] = i+1\n        else:\n            l[i] = i+1\n            r[i] = i\n            f[i][0] = i+1\n            f[i][1] = i\n    def f(i: int, d: int, l: list, r: list) -> int:\n        if i == n:\n            if d:\n                return 1\n            return 0\n        if d:\n            if l[i] < r[i]:\n                return f(i+1, 0, l, r)\n            return f(i+1, 1, l, r)\n        if l[i] < r[i]:\n            return f(i+1, 1, l, r)\n        return f(i+1, 0, l, r)\n    return f(0, 0, l, r)\nprint(solution(input()))\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    even = int(stdin.splitlines()[0])\n    lh = [int(x) for x in stdin.splitlines()[1] if x == \"L\"]\n    rh = [int(x) for x in stdin.splitlines()[1] if x == \"R\"]\n    print(lh, rh)\n    return \"\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, b = [int(x) for x in stdin.split(' ')]\n\n    if m == 1:\n        return str(b)\n\n    a, b = 0, b\n\n    while a < m:\n        b = -1 * a * b + b\n        a += 1\n\n    return str(b)\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    return x * y\n\"\"\"\nfrom math import floor, ceil\n\ndef"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split())\n    \n    return x * y"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    return max(m * b, m ** 2 * b)\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, b = [int(x) for x in stdin.split()]\n    return '{:d}'.format(m*b)\n\nprint(solution(input()))\n\nimport numpy as np\na, b = np.array(input().split(), np.int)\nprint(np.prod(b-a+1))\n\n\n\n-- Sample Input--\n\n1 5\n\n-- Sample Output--\n\n30\n\n\n\n-- Notes --\n\n\"\"\"\n\n\nimport numpy as np\na, b = np.array(input().split(), np.int)\nprint(np.prod(b-a+1))\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    print(m*b)\n    return"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split(' '))\n    return str(m * b)\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(x * y)\n\ndef"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    # m = 1, b = 5\n    # m = 2, b = 3\n    return b * m - 1\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    t = [int(x) for x in stdin[1].split()]\n    a = [0] * (1 << n)\n    return f(t, n, a)\n    \ndef"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n    >>> solution(\"4 2 2 3\")\n    39\n    >>> solution(\"6 1 1 1 1 3\")\n    85\n    >>> solution(\"1 1 1 1 1 3\")\n    3\n    \"\"\"\n    depth: int = int(stdin.readline().strip())\n    steps: List[int] = [int(step) for step in stdin.readline().strip().split()]\n    count = 0\n\n    for i, step in enumerate(steps):\n        if i % 2 == 0:\n            count += (step ** (i // 2 + 1))\n        else:\n            count -= (step ** (i // 2 + 1))\n\n    return str(count)\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # 1. split input and convert string to array\n    n = int(stdin[0])\n    array = [int(x) for x in stdin[1].split(' ')]\n    \n    # 2. define values for constants\n    n = len(array)\n    directions = ['\u2196', '\u2197', '\u2198', '\u2199', '\u2190', '\u2192', '\u2196\u2197', '\u2196\u2192', '\u2197\u2192', '\u2197\u2198', '\u2199\u2198', '\u2199\u2197']\n    \n    # 3. define function, which calculates visited cells\n    def calc_cells(array: List[int], n: int) -> int:\n        # define variables for counting\n        visited_cells = 0\n        \n        # loop trough array and calculate the number of cells visited\n        for i in range(n):\n            value = array[i]\n            visited_cells += 2 ** (value - 1)\n        \n        # return visited cells\n        return visited_cells\n    \n    # 4. define function, which calculates direction of new parts\n    def calc_direction(array: List[int], n: int) -> str:\n        # define variables for counting\n        current_level = len(array) - 1\n        visited_cells = 0\n        direction = ''\n        \n        # loop trough array and calculate the number of cells visited\n        for i in range(n):\n            value = array[i]\n            visited_cells += 2 ** (value - 1)\n            \n            # loop through steps for each direction\n            if current_level!= 0:\n                current_level -= 1\n                \n                # if number of cells in the current level is greater than visited cells, then current direction is the next direction\n                if 2 ** current_level >= visited_cells:\n                    direction += directions[i]\n                \n                # else if number of cells in the current level is less than visited cells, then current direction is previous direction\n                else:\n                    direction += directions[i - 1]\n                    \n            # if current level is 0 then this is the first step\n            else:\n                direction += directions[i]\n        \n        # return direction\n        return direction\n    \n    # 5. define function, which calculates direction of new parts\n    def calc_direction_2(array: List[int], n: int) -> str:\n        # define variables for counting\n        current_level = len(array) - 1\n        visited_cells = 0\n        direction = ''\n        \n        # loop trough array and calculate the number of cells visited\n        for i in range(n):\n            value = array[i]\n            visited_cells += 2 ** (value - 1)\n            \n            # loop through steps for each direction\n            if current_level!= 0:\n                current_level -= 1\n                \n                # if number of cells in the current level is greater than visited cells, then current direction is the next direction\n                if 2 ** current_level >= visited_cells:\n                    direction += '\u2191'\n                \n                # else if number of cells in the current level is less than visited cells, then current direction is previous direction\n                else:\n                    direction += '\u2193'\n                    \n            # if current level is 0 then this is the first step\n            else:\n                direction += '\u2191'\n        \n        # return direction\n        return direction\n    \n    # 6. define function, which calculates direction of new parts\n    def calc_direction_3(array: List[int], n: int) -> str:\n        # define variables for counting\n        current_level = len(array) - 1\n        visited_cells = 0\n        direction = ''\n        \n        # loop trough array and calculate the number of cells visited\n        for i in range(n):\n            value = array[i]\n            visited_cells += 2 ** (value - 1)\n            \n            # loop through steps for each direction\n            if current_level!= 0:\n                current_level -= 1\n                \n                # if number of cells in the current level is greater than visited cells, then current direction is the next direction\n                if 2 ** current_level >= visited_cells:\n                    direction += '\u2197\u2193'\n                \n                # else if number of cells in the current level is less than visited cells, then current direction is previous direction\n                else:\n                    direction += '\u2198\u2193'\n                    \n            # if current level is 0 then this is the first step\n            else:\n                direction += '\u2197\u2193'\n        \n        # return direction\n        return direction\n    \n    # 7. define function, which calculates direction of new parts\n    def calc_direction_4(array: List[int], n: int) -> str:\n        # define variables for counting\n        current_level = len(array) - 1\n        visited_cells = 0\n        direction = ''\n        \n        # loop trough array and calculate the number of cells visited\n        for i in range(n):\n            value = array[i]\n            visited_cells += 2 ** (value - 1)\n            \n            # loop through steps for each direction\n            if current_level!= 0:\n                current_level -= 1\n                \n                # if number of cells in the current level is greater than visited cells, then current direction is the next direction\n                if 2 ** current_level >= visited_cells:\n                    direction += '\u2199\u2193'\n                \n                # else if number of cells in the current level is less than visited cells, then current direction is previous direction\n                else:\n                    direction += '\u2198\u2193'\n                    \n            # if current level is 0 then this is the first step\n            else:\n                direction += '\u2199\u2193'\n        \n        # return direction\n        return direction\n    \n    # 8. define function, which calculates direction of new parts\n    def calc_direction_5(array: List[int], n: int) -> str:\n        # define variables for counting\n        current_level = len(array) - 1\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of cells which will be visited at least once by any part of the firework.\n    \"\"\"\n    return ''\n\ndef"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport re\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    recursion_depth, times = stdin.split('\\n')\n    recursion_depth = int(recursion_depth)\n    times = times.split(' ')\n    times = [int(time) for time in times]\n    return str(recursive_algorithm(recursion_depth, times))\n\ndef"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if len(i)>=2:\n            if i[0]==i[1]:\n                return \"NO\"\n    return \"YES\"\nprint(solution(stdin))\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin[::-1] == stdin else \"NO\"\n\nprint(solution(\"WORD\"))\nprint(solution(\"APRILFOOL\"))\nprint(solution(\"AI\"))\nprint(solution(\"JUROR\"))\nprint(solution(\"NEAT\"))\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"WORD\")\n    'NO'\n    >>> solution(\"AI\")\n    'YES'\n    >>> solution(\"APRILFOOL\")\n    'NO'\n    >>> solution(\"NEAT\")\n    'YES'\n    >>> solution(\"JUROR\")\n    'YES'\n    >>> solution(\"CODER\")\n    'NO'\n    \"\"\"\n    return \"NO\" if stdin[::-1]!= stdin else \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == stdin[::-1] else \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the sum of all the digits in the given string.\"\"\"\n    result = 0\n    for c in stdin:\n        result += ord(c) - ord('A') + 1\n\n    return \"YES\" if result % 2 == 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if 'O' in stdin else 'NO'\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    if stdin.startswith('N'):\n        return 'NO'\n    if stdin.startswith('E'):\n        return 'YES'\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"NEAT\")\n    'YES'\n    >>> solution(\"WORD\")\n    'NO'\n    >>> solution(\"CODER\")\n    'NO'\n    >>> solution(\"APRILFOOL\")\n    'NO'\n    >>> solution(\"AI\")\n    'YES'\n    >>> solution(\"JUROR\")\n    'YES'\n    \"\"\"\n    input_letters = set(stdin)\n    first_letter = stdin[0]\n    return \"YES\" if input_letters.issubset(string.ascii_uppercase) and first_letter in string.ascii_uppercase else \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.count('A') == stdin.count('E') == stdin.count('I') == stdin.count('O') == stdin.count('U') == stdin.count(' ') else 'NO'\n    "
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for ch in stdin:\n        if ord(\"A\") < ord(ch) < ord(\"Z\"):\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\") == \"1\"\nassert solution(\"6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021\") == \"14\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split('\\n')[0].split())\n    # print(rows, cols)\n    maze = []\n    for i in range(rows):\n        maze.append(list(stdin.split('\\n')[i+1]))\n        # print(maze[i])\n    print(maze)\n    # # print(maze)\n    # # print(stdin.split('\\n')[1])\n    s = stdin.split('\\n')[2]\n    # print(s)\n    count = 0\n    for num in range(4):\n        if s[num] == 'S' or s[num] == 'E':\n            count += 1\n\n    # print(count)\n    return count\n\n\"\"\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not modify the input and print statements\n    # MODIFY THE FUNCTION TO SUIT THE INPUT TYPE\n\n    # print(stdin)\n    return stdin\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom typing import Dict, List, Tuple\n\n\ndef"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds a valid mapping of digits to directions.\n    '''\n    n, m = [int(x) for x in stdin.split()]\n    maze = [list(stdin.split()[i]) for i in range(n)]\n    dirs = {'0': 'D', '1': 'L', '2': 'U', '3': 'R'}\n    return solve(maze, dirs, 0, 0, 'S', n, m)\n\ndef"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [[int(i) for i in stdin.readline().split()] for _ in range(n)]\n    arr = sorted(arr, key=lambda x: x[0])\n    stack = []\n    ans = 0\n    for i in range(n):\n        while len(stack)!= 0 and arr[stack[-1]][0] + arr[stack[-1]][1] >= arr[i][0]:\n            ans += 1\n            stack.pop()\n        stack.append(i)\n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'foo'\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_strict(a, b, c, d):\n        return (a - c) * (b - d) - (a - d) * (b - c) > 0\n\n    def create_rectangle(x1, y1, x2, y2):\n        return [((x1, y1), (x1, y2)), ((x1, y2), (x2, y2)), ((x2, y2), (x2, y1)), ((x2, y1), (x1, y1))]\n\n    stdin = stdin.split('\\n')\n    result = 0\n    points = []\n    for i in range(int(stdin[0])):\n        points.append((int(stdin[i + 1].split(' ')[0]), int(stdin[i + 1].split(' ')[1])))\n    n = len(points)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if is_strict(points[i][0], points[i][1], points[j][0], points[j][1]) \\\n                        and is_strict(points[j][0], points[j][1], points[k][0], points[k][1]) \\\n                        and is_strict(points[i][0], points[i][1], points[k][0], points[k][1]):\n                    result += 1\n    return result\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split('\\n')\n    x = [int(i.split()[0]) for i in stdin[1:]]\n    y = [int(i.split()[1]) for i in stdin[1:]]\n    count = 0\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if i!= j:\n                count += 1\n    print(count)\n    return ''"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = stdin.split('\\n')\n    result = {}\n    for point in points:\n        x, y = point.split()\n        x = int(x)\n        y = int(y)\n        key = (x, y)\n        if key in result:\n            result[key] += 1\n        else:\n            result[key] = 1\n    return str(sum(result.values()))\nprint(solution(stdin))\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = collections.defaultdict(set)\n    for i in range(n):\n        x, y = [int(i) for i in stdin.split()]\n        d[x].add(y)\n        d[y].add(x)\n\n    def count_edges(x):\n        return len(d[x]) * 2\n\n    x, y = [int(i) for i in stdin.split()]\n    return count_edges(x) - count_edges(y)\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nLLRL1RL1\")\n    1010000011\n    >>> solution(\"9\\nL0L0LLRR9\")\n    1100000010\n    \"\"\"\n    customer = list(stdin)\n    room_assign = \"\"\n    for i, v in enumerate(customer):\n        if v == \"L\":\n            if i == 0:\n                room_assign += \"0\"\n            else:\n                room_assign += str(i)\n        elif v == \"R\":\n            if i == len(customer) - 1:\n                room_assign += \"1\"\n            else:\n                room_assign += str(i)\n    return room_assign\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = \"0\" * 10\n    for action in stdin.readline():\n        if action == \"L\":\n            res = res[1:] + \"1\"\n        elif action == \"R\":\n            res = \"1\" + res[1:]\n        else:\n            res = res[0] + str(int(res[1]) + 1) + \"0\" * (9 - int(res[1]))\n    return res\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ans = [\"0\"] * 10\n    for item in stdin:\n        if item == 'L':\n            ans[0] = str(int(ans[0]) + 1)\n        if item == 'R':\n            ans[9] = str(int(ans[9]) + 1)\n        if item.isdecimal():\n            ans[int(item)] = str(int(ans[int(item)]) + 1)\n    return \"\".join(ans)\n\n\ndef"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(['1' if c == 'L' else '0' for c in stdin])\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('L', '1').replace('R', '0').replace('0', '0').replace('1', '1')\n\"\"\"\n\ndef"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns hotel room's assignment status.\n\n    Args:\n        stdin: String containing actions to perform.\n\n    Returns:\n        String of hotel room's assignment status.\n\n    Examples:\n        >>> solution('L0L0LLRR9')\n        1010000011\n        >>> solution('LLRL1RL1')\n        1010000011\n        >>> solution('LLRL0LRL1L')\n        1011101010\n\n    \"\"\"\n    # Read data.\n    n = int(stdin)\n    data = stdin\n    # Write your code here.\n    # TODO: implement solution function.\n    rooms = [0] * 10\n    for i in range(n):\n        if data[i] == 'R':\n            rooms[i] = 1\n        elif data[i] == 'L':\n            if i == 0:\n                rooms[i] = 1\n            else:\n                rooms[i] = rooms[i-1]\n        elif data[i] == '0':\n            rooms[i] = 0\n        else:\n            rooms[i] = 1\n\n    return ''.join(map(str, rooms))\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a solution to Amugae's Hotel Problem.\"\"\"\n    # Let's create a list of all the rooms, first by getting all rooms from stdin.\n    rooms = [int(char) for char in stdin]\n    # We'll also need a list of customers to go to all the rooms.\n    customers = [int(char) for char in stdin if char in \"LR\"]\n    # We'll also need to remember how many customers entered from each entrance.\n    customers_from_left = customers.count('L')\n    customers_from_right = customers.count('R')\n    # Now, let's iterate through each customer.\n    for customer in customers:\n        # If the customer is coming from the left entrance, we'll go to the room on the right.\n        if customer == \"L\":\n            # If there is no room on the left, we'll have to go to the right entrance.\n            if customers_from_left == 0:\n                rooms[customers_from_right] = 1\n            # If there is no room on the right, we'll have to go to the left entrance.\n            elif customers_from_right == 0:\n                rooms[customers_from_left] = 1\n            # If there is a room on both sides, we'll have to go to the left entrance.\n            else:\n                rooms[customers_from_left] = 1\n                rooms[customers_from_right] = 1\n            # We'll add one customer from each entrance to the count of customers from each entrance.\n            customers_from_left -= 1\n            customers_from_right -= 1\n        # If the customer is coming from the right entrance, we'll go to the room on the left.\n        if customer == \"R\":\n            # If there is no room on the right, we'll have to go to the left entrance.\n            if customers_from_right == 0:\n                rooms[customers_from_left] = 1\n            # If there is no room on the left, we'll have to go to the right entrance.\n            elif customers_from_left == 0:\n                rooms[customers_from_right] = 1\n            # If there is a room on both sides, we'll have to go to the right entrance.\n            else:\n                rooms[customers_from_right] = 1\n                rooms[customers_from_left] = 1\n            # We'll add one customer from each entrance to the count of customers from each entrance.\n            customers_from_left -= 1\n            customers_from_right -= 1\n    # Now we'll get the answer.\n    return \"\".join([str(room) for room in rooms])\n\n\ndef"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\" \"\"\"\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    @dataclass\n    class TrieNode:\n        word: bool = False\n        children: dict = field(default_factory=dict)\n        nodes: list = field(default_factory=list)\n        edges: set = field(default_factory=set)\n\n    class Trie:\n        def __init__(self):\n            self.root = TrieNode()\n\n        def insert(self, s: str):\n            node = self.root\n            for c in s:\n                if c in node.children:\n                    node = node.children[c]\n                else:\n                    child = TrieNode()\n                    node.children[c] = child\n                    node = child\n            node.word = True\n\n        def find(self, s: str):\n            node = self.root\n            for c in s:\n                if c not in node.children:\n                    return False\n                else:\n                    node = node.children[c]\n            return node.word\n\n        def add_edge(self, source: str, dest: str):\n            if source == dest:\n                return\n            node = self.root\n            for c in source:\n                if c in node.children:\n                    node = node.children[c]\n                else:\n                    return\n            node.nodes.append(dest)\n            node.edges.add(dest)\n\n        def get_edges(self, node):\n            edges = set()\n            for child in node.children:\n                child_node = node.children[child]\n                edges |= set(child_node.nodes)\n                edges |= set(child_node.edges)\n                edges |= self.get_edges(child_node)\n            return edges\n\n    n = int(stdin.readline())\n    trie = Trie()\n    for i in range(n):\n        trie.insert(stdin.readline().strip())\n    max_matching = trie.get_edges(trie.root)\n    return len(max_matching)\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not change the code below\n    x = stdin\n    x = x.replace(\"()\", \"<>\")\n    x = x.replace(\"(\", \"\")\n    x = x.replace(\")\", \"\")\n    x = x.replace(\"<>\", \"()\")\n    return x\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"ANSWER\"\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n = int(stdin)\n    if n == 0:\n        return '1'\n    t = '()()'\n    for i in range(n - 1):\n        t = t + '(' + t + ')'\n    return str(len(t) - 1)\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    }
]