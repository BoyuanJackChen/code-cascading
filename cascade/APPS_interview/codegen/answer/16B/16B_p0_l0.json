[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = 0\n    max_num = 0\n    for i in range(1, x):\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        if sum > max_sum:\n            max_sum = sum\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    l = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, q + 1)]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q -"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    h, m = map(int, stdin.split())\n    if m < 7:\n        m += 60\n        h -= 1\n    if h < 0:\n        h += 24\n    h = str(h)\n    m = str(m)\n    if len(h) < 2:\n        h = '0' + h\n    if len(m) < 2:\n        m = '0' + m\n    if '7' in h + m:\n        return 0\n    return int(h + m.replace('7', '')) - int(h + m)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(x) for x in stdin.split()]\n    return str(min(abs(l - pos), abs(r - pos)))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10\n   ... 6 3\n   ... 8 2\n   ... 1 4\n   ... 4 10\n   ... 4 1\n   ... 3 2\n   ... 2 6\n   ... 1 100\n   ... 2 15\n   ... 10 11\n   ... 14 100''')\n    '2'\n    \"\"\"\n   ..."
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = 0\n    while n > 0:\n        n -= m\n        days += 1\n        if n < 0:\n            n = 0\n    return days"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    }
]