[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = 0\n    max_num = 0\n    for i in range(1, x):\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        if sum > max_sum:\n            max_sum = sum\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    l = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, q + 1)]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q - 2]\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l = l[:q -"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    h, m = map(int, stdin.split())\n    if m < 7:\n        m += 60\n        h -= 1\n    if h < 0:\n        h += 24\n    h = str(h)\n    m = str(m)\n    if len(h) < 2:\n        h = '0' + h\n    if len(m) < 2:\n        m = '0' + m\n    if '7' in h + m:\n        return 0\n    return int(h + m.replace('7', '')) - int(h + m)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(x) for x in stdin.split()]\n    return str(min(abs(l - pos), abs(r - pos)))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10\n   ... 6 3\n   ... 8 2\n   ... 1 4\n   ... 4 10\n   ... 4 1\n   ... 3 2\n   ... 2 6\n   ... 1 100\n   ... 2 15\n   ... 10 11\n   ... 14 100''')\n    '2'\n    \"\"\"\n   ..."
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = 0\n    while n > 0:\n        n -= m\n        days += 1\n        if n < 0:\n            n = 0\n    return days"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1\")\n    '1'\n    >>> solution(\"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\")\n    '2'\n    >>> solution(\"2\\n2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\")\n    '-1'\n    \"\"\"\n    d = int(stdin.readline())\n    n, m = map(int, stdin.readline().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, stdin.readline().split())\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, stdin.readline().split())\n    sofas.sort(key=lambda x: (x[0], x[1]))\n    for i in range(d):\n        if cnt_l > 0 and cnt_r > 0 and cnt_t > 0 and cnt_b > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_l -= 1\n                cnt_r -= 1\n                cnt_t -= 1\n                cnt_b -= 1\n                continue\n        if cnt_l > 0 and cnt_r > 0 and cnt_t > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_l -= 1\n                cnt_r -= 1\n                cnt_t -= 1\n                continue\n        if cnt_l > 0 and cnt_r > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_l -= 1\n                cnt_r -= 1\n                continue\n        if cnt_l > 0 and cnt_t > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_l -= 1\n                cnt_t -= 1\n                continue\n        if cnt_l > 0 and cnt_b > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_l -= 1\n                cnt_b -= 1\n                continue\n        if cnt_r > 0 and cnt_t > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_r -= 1\n                cnt_t -= 1\n                continue\n        if cnt_r > 0 and cnt_b > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_r -= 1\n                cnt_b -= 1\n                continue\n        if cnt_t > 0 and cnt_b > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_t -= 1\n                cnt_b -= 1\n                continue\n        if cnt_l > 0:\n            if sofas[i][0] == sofas[i - 1][2] and sofas[i][1] == sofas[i - 1][3]:\n                cnt_l -= 1"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days_in_year = int(stdin)\n    days_off = 0\n    days_work = 0\n    if days_in_year % 2 == 0:\n        days_work = days_in_year // 2\n        days_off = days_in_year // 2\n    else:\n        days_work = (days_in_year // 2) + 1\n        days_off = (days_in_year // 2)\n    return str(days_work) + \" \" + str(days_off)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = [int(x) for x in stdin.split()]\n    return str(n * p + n * q)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trophies = stdin\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('S')\n    trophies = list(trophies)\n    trophies.sort()\n    trophies.reverse()\n    trophies = ''.join(trophies)\n    trophies = trophies.split('G')\n    "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    courses = list(map(int, stdin.split()))\n    courses.sort()\n    courses = [0] + courses + [n + 1]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if courses[i] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - courses[i]] + 1)\n    if dp[n][k] == 0:\n        return '-1'\n    else:\n        return''.join(map(str, dp[n][k:]))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    if k == 1:\n        return''.join(map(str, p))\n    if k == n:\n        return''.join(map(str, p))\n    if k == n - 1:\n        return''.join(map(str, p))\n    if k == n - 2:\n        return''.join(map(str, p))\n    if k == n - 3:\n        return''.join(map(str, p))\n    if k == n - 4:\n        return''.join(map(str, p))\n    if k == n - 5:\n        return''.join(map(str, p))\n    if k == n - 6:\n        return''.join(map(str, p))\n    if k == n - 7:\n        return''.join(map(str, p))\n    if k == n - 8:\n        return''.join(map(str, p))\n    if k == n - 9:\n        return''.join(map(str, p))\n    if k == n - 10:\n        return''.join(map(str, p))\n    if k == n - 11:\n        return''.join(map(str, p))\n    if k == n - 12:\n        return''.join(map(str, p))\n    if k == n - 13:\n        return''.join(map(str, p))\n    if k == n - 14:\n        return''.join(map(str, p))\n    if k == n - 15:\n        return''.join(map(str, p))\n    if k == n - 16:\n        return''.join(map(str, p))\n    if k == n - 17:\n        return''.join(map(str, p))\n    if k == n - 18:\n        return''.join(map(str, p))\n    if k == n - 19:\n        return''.join(map(str, p))\n    if k == n - 20:\n        return''.join(map(str, p))\n    if k == n - 21:\n        return''.join(map(str, p))\n    if k == n - 22:\n        return''.join(map(str, p))\n    if k == n - 23:\n        return''.join(map(str, p))\n    if k == n - 24:\n        return''.join(map(str, p))\n    if k == n - 25:\n        return''.join(map(str, p))\n    if k == n - 26:\n        return''.join(map(str, p))\n    if k == n - 27:\n        return''.join(map(str, p))\n    if k == n - 28:\n        return''.join(map(str, p))\n    if k == n - 29:\n        return''.join(map(str, p))\n    if k == n - 30:\n        return''.join(map(str, p))\n    if k == n - 31:\n        return''.join(map(str, p))\n    if k == n - 32:\n        return''.join(map(str, p))\n    if k == n - 33:\n        return''.join(map(str, p))\n    if k == n - 34:\n        return''.join(map(str, p))\n    if k == n - 35:\n        return''.join(map(str, p))\n    if k == n - 36:\n        return''.join(map(str, p))\n    if k == n - 37:\n        return''.join(map(str, p))\n    if k == n - 38:\n        return''.join(map(str, p))\n    if k == n - 39:\n        return''.join(map(str, p))\n    if k == n - 40:\n        return''.join(map(str, p))\n    if k == n - 41:\n        return''.join(map(str, p))\n    if k == n - 42:\n        return''.join(map(str, p))\n    if k == n - 43:\n        return''.join(map(str, p))\n    if k == n - 44:\n        return''.join(map(str, p))\n    if k == n - 45:\n        return''.join(map(str, p))\n    if k == n - 46:\n        return''.join(map(str, p))\n    if k == n - 47:\n        return''.join(map(str, p))\n    if k == n - 48:\n        return''.join(map(str, p))\n    if k == n - 49:\n        return''.join(map(str, p))\n    if k == n - 50:\n        return''.join(map(str, p))\n    if k == n - 51:\n        return''.join(map(str, p))\n    if k == n - 52:\n        return''.join(map(str, p))\n    if k == n - 53:\n        return''.join(map(str, p))\n    if k == n - 54:\n        return''.join(map(str, p))\n    if k == n - 55:\n        return''.join(map(str, p))\n    if k == n - 56:\n        return''.join(map(str, p))\n    if k == n - 57:\n        return''.join(map(str, p))\n    if k == n - 58:\n        return''."
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = [int(x) for x in stdin.split('\\n')]\n    return '1' if cnt_1 + cnt_2 + cnt_3 + cnt_4 == 2 * (cnt_1 + cnt_2 + cnt_3 + cnt_4) else '0'\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = stdin.split()\n    n, k, t = int(n), int(k), int(t)\n    if t < k:\n        return 0\n    elif t == k:\n        return n\n    else:\n        return n - (t - k)"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[1:].replace(stdin[0], '')"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 3\n   ... 0 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 765 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split(':')\n    hour = int(time[0])\n    minute = int(time[1])\n    if hour < 12:\n        hour += 12\n    hour = hour - 12\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour = hour * 10 + minute\n    hour"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return str(abs(a[0] - a[n - 1]))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if stdin == stdin[::-1] else \"NIE\""
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    while a > b:\n        a = a - b\n    return str(a)"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(line) for line in stdin.split('\\n')]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(k):\n        row, col = map(int, stdin.split())\n        matrix[row - 1][col - 1] = 1\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = matrix[j][i]\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n    for i in range(n):\n        matrix[i] = sorted(matrix[i])\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                return -1\n    return '\\n'.join(' '.join(map(str, row)) for row in matrix)\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    return max(\n        (x ** y ** z, x ** z ** y, (x ** y) ** z, (x ** z) ** y, y ** x ** z, y ** z ** x, (y ** x) ** z, (y ** z) ** x),\n        key=lambda x: x[0])[0]\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    examples = []\n    regular = []\n    for i in range(1, n + 1):\n        if stdin.split('\\n')[i].split(' ')[1] == '1':\n            examples.append(i)\n        else:\n            regular.append(i)\n    examples.sort()\n    regular.sort()\n    result = []\n    for i in examples:\n        result.append('move {} {}'.format(i, i + len(regular)))\n    for i in regular:\n        result.append('move {} {}'.format(i, i + len(examples)))\n    return '\\n'.join(result)"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - len(set(stdin)))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(m - 1 - gcd(x, m))\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2''')\n    '1 8'\n    >>> solution('''1 3''')\n    '1 1'\n    >>> solution('''4 3''')\n    '23 128'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return str(n - k + 1) + \" \" + str(n - k + 1)\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if... else \"NO\""
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    count = 0\n    for k in range(L, R + 1):\n        for l in range(L, R + 1):\n            if a_1 * k + b_1 == a_2 * l + b_2:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(min(a // 2, b // 2, n // 2))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [stdin.split() for _ in range(n)]\n    if n == m:\n        return \"YES\" if all(len(set(row)) == 1 for row in field) else \"NO\"\n    return \"YES\" if all(len(set(row)) == 1 for row in zip(*field)) and all(len(set(row)) == 1 for row in zip(*field)) else \"NO\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3)\n    -2 0\n    >>> solution(7)\n    3 2\n    \"\"\"\n    n = int(stdin.readline())\n    x, y = 0, 0\n    for i in range(n):\n        if i % 2 == 0:\n            x += 1\n        else:\n            y += 1\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a * b < c:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ratings = [int(stdin) for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ratings[i] > ratings[j]:\n                return \"rated\"\n    return \"unrated\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(n):\n        if arr[i] == 0:\n            res.append(0)\n        else:\n            res.append(i - arr[i:].index(0))\n    return''.join(map(str, res))\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        vectors.append((x, y))\n    vectors.sort()\n    min_angle = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = vectors[i]\n            x2, y2 = vectors[j]\n            angle = abs(math.atan2(y1 - y2, x1 - x2))\n            if angle < min_angle:\n                min_angle = angle\n                a, b = i + 1, j + 1\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(x) for x in stdin.split()]\n    return str(d // (k * a + b) * (k * a + b + t) + d % (k * a + b) * (k * a + b + t) + t * a)\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return str(n)\n    if n % k!= 0:\n        return '-1'\n    return''.join(map(str, range(1, k + 1)))\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(1 for x in range(1, n + 1) for y in range(1, m + 1) if x + y % 5 == 0))\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    beauty = 0\n    for i in range(n):\n        beauty = max(beauty, sum(a[i:i + x]))\n    return str(beauty)\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(m * k - n * (k - 1))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while k > 0:\n        k -= 1\n        n *= 10\n    return str(n // 10 ** (k - 1))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split('\\n')[0].split())\n    s = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    return str(max(r, sum(s) - sum(b)))\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return -1"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    b = list(map(int, stdin.readline().strip().split()))\n    b.sort()\n    b.reverse()\n    t = [0] * n\n    t[0] = b[0]\n    for i in range(1, n):\n        t[i] = t[i - 1] + b[i]\n    t.sort()\n    t.reverse()\n    return t[0]\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if m % w == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return \"No\"\n    if k == 2:\n        return \"Yes\"\n    if k == 3:\n        return \"No\"\n    if k == 4:\n        return \"Yes\"\n    if k == 5:\n        return \"Yes\"\n    if k == 6:\n        return \"Yes\"\n    if k == 7:\n        return \"Yes\"\n    if k == 8:\n        return \"Yes\"\n    if k == 9:\n        return \"Yes\"\n    if k == 10:\n        return \"Yes\"\n    if k == 11:\n        return \"Yes\"\n    if k == 12:\n        return \"Yes\"\n    if k == 13:\n        return \"Yes\"\n    if k == 14:\n        return \"Yes\"\n    if k == 15:\n        return \"Yes\"\n    if k == 16:\n        return \"Yes\"\n    if k == 17:\n        return \"Yes\"\n    if k == 18:\n        return \"Yes\"\n    if k == 19:\n        return \"Yes\"\n    if k == 20:\n        return \"Yes\"\n    if k == 21:\n        return \"Yes\"\n    if k == 22:\n        return \"Yes\"\n    if k == 23:\n        return \"Yes\"\n    if k == 24:\n        return \"Yes\"\n    if k == 25:\n        return \"Yes\"\n    if k == 26:\n        return \"Yes\"\n    if k == 27:\n        return \"Yes\"\n    if k == 28:\n        return \"Yes\"\n    if k == 29:\n        return \"Yes\"\n    if k == 30:\n        return \"Yes\"\n    if k == 31:\n        return \"Yes\"\n    if k == 32:\n        return \"Yes\"\n    if k == 33:\n        return \"Yes\"\n    if k == 34:\n        return \"Yes\"\n    if k == 35:\n        return \"Yes\"\n    if k == 36:\n        return \"Yes\"\n    if k == 37:\n        return \"Yes\"\n    if k == 38:\n        return \"Yes\"\n    if k == 39:\n        return \"Yes\"\n    if k == 40:\n        return \"Yes\"\n    if k == 41:\n        return \"Yes\"\n    if k == 42:\n        return \"Yes\"\n    if k == 43:\n        return \"Yes\"\n    if k == 44:\n        return \"Yes\"\n    if k == 45:\n        return \"Yes\"\n    if k == 46:\n        return \"Yes\"\n    if k == 47:\n        return \"Yes\"\n    if k == 48:\n        return \"Yes\"\n    if k == 49:\n        return \"Yes\"\n    if k == 50:\n        return \"Yes\"\n    if k == 51:\n        return \"Yes\"\n    if k == 52:\n        return \"Yes\"\n    if k == 53:\n        return \"Yes\"\n    if k == 54:\n        return \"Yes\"\n    if k == 55:\n        return \"Yes\"\n    if k == 56:\n        return \"Yes\"\n    if k == 57:\n        return \"Yes\"\n    if k == 58:\n        return \"Yes\"\n    if k == 59:\n        return \"Yes\"\n    if k == 60:\n        return \"Yes\"\n    if k == 61:\n        return \"Yes\"\n    if k == 62:\n        return \"Yes\"\n    if k == 63:\n        return \"Yes\"\n    if k == 64:\n        return \"Yes\"\n    if k == 65:\n        return \"Yes\"\n    if k == 66:\n        return \"Yes\"\n    if k == 67:\n        return \"Yes\"\n    if k == 68:\n        return \"Yes\"\n    if k == 69:\n        return \"Yes\"\n    if k == 70:\n        return \"Yes\"\n    if k == 71:\n        return \"Yes\"\n    if k == 72:\n        return \"Yes\"\n    if k == 73:\n        return \"Yes\"\n    if k == 74:\n        return \"Yes\"\n    if k == 75:\n        return \"Yes\"\n    if k == 76:\n        return \"Yes\"\n    if k == 77:\n        return \"Yes\"\n    if k == 78:\n        return \"Yes\"\n    if k == 79:\n        return \"Yes\"\n    if k == 80:\n        return \"Yes\"\n    if k == 81:\n        return \"Yes\"\n    if k == 82:\n        return \"Yes\"\n    if k == 83:\n        return \"Yes\"\n    if k == 84:\n        return \"Yes\"\n    if k == 85:\n        return \"Yes\"\n    if k == 86:\n        return \"Yes\"\n    if k == 87:\n        return \"Yes\"\n    if k == 88:\n        return \"Yes\"\n    if k == 89:\n        return \"Yes\"\n    if k == 90:\n        return \"Yes\"\n    if k == 91:\n        return \"Yes\"\n    if k == 92:\n        return \"Yes\"\n    if k == 93:\n        return \"Yes\"\n    if k == 94:\n        return \"Yes\"\n    if k == 95:\n        return \"Yes\"\n    if k == 96:\n        return \"Yes\"\n    if k == 97:\n        return \"Yes\"\n    if k == 98:\n        return \"Yes\"\n    if k == 99:\n        return \"Yes\"\n    if k == 100:\n        return \""
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return n * t // 2\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(-1)\n    else:\n        print(int(stdin.split()[0]) * int(stdin.split()[1]))"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    return str(min(a, b) + n - max(a, b))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '01110' else 'NO'"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, bx = map(int, stdin.split())\n    x_digits = list(map(int, stdin.split()))\n    y, by = map(int, stdin.split())\n    y_digits = list(map(int, stdin.split()))\n    if bx < by:\n        return '<'\n    elif bx > by:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"BitLGM\"\n    elif n == 2:\n        return \"BitAryo\"\n    else:\n        if a[0] > a[1]:\n            return \"BitLGM\"\n        elif a[0] < a[1]:\n            return \"BitAryo\"\n        else:\n            return \"BitLGM\" if a[0] > a[2] else \"BitAryo\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i + j > n - 1:\n                break\n            if a[i] * a[j] % k == 0:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    if k == 1:\n        return \"YES\" if len(set(s)) == 1 else \"NO\"\n    return \"YES\" if len(set(s)) == 1 and len(s) == k else \"NO\"\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    min1 = arr[0]\n    min2 = arr[1]\n    for i in range(2, n):\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return min1 - min2\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = [int(x) for x in stdin.split()]\n    return str(t // (w + b)) + \"/\" + str(t // (w + b))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 0:\n        return \"0\"\n    elif x + y > z:\n        return \"+\"\n    elif x + y < z:\n        return \"-\"\n    else:\n        return \"?\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nRURUU\\n-2 3\")\n    3\n    >>> solution(\"4\\nRULR\\n1 1\")\n    0\n    >>> solution(\"3\\nUUU\\n100 100\")\n    -1\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    seq = stdin.split(\"\\n\")[1]\n    x, y = map(int, stdin.split(\"\\n\")[2].split())\n    seq_list = list(seq)\n    min_id = 0\n    max_id = 0\n    for i in range(n):\n        if seq_list[i] == \"U\":\n            y += 1\n        elif seq_list[i] == \"D\":\n            y -= 1\n        elif seq_list[i] == \"L\":\n            x -= 1\n        elif seq_list[i] == \"R\":\n            x += 1\n        if x < 0 or y < 0:\n            return -1\n        if i == 0:\n            min_id = i\n        if x == 0 and y == 0:\n            max_id = i\n    return max_id - min_id + 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - n % 10 ** k)"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = [int(i) for i in stdin.split()]\n    if n == 1:\n        return str(m) +'' + str(m) +'' + str(m)\n    if x == 1:\n        return str(m) +'' + str(m) +'' + str(m)\n    if x == n:\n        return str(m) +'' + str(m) +'' + str(m)\n    if y == 1:\n        return str(m) +'' + str(m) +'' + str(m)\n    if y == m:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == 1:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 1:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 2:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 3:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 4:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 5:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 6:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 7:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 8:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 9:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 10:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 11:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 12:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 13:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 14:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 15:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 16:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 17:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 18:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 19:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 20:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 21:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 22:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 23:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 24:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 25:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 26:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 27:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 28:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 29:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 30:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k == m + 31:\n        return str(m) +'' + str(m) +'' + str(m)\n    if k =="
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ribbons = [stdin[i:i + 3] for i in range(0, len(stdin), 3)]\n    ribbons = [list(ribbon) for ribbon in ribbons]\n    ribbons = [list(set(ribbon)) for ribbon in ribbons]\n    ribbons = [list(ribbon) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[1]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[2]) for ribbon in ribbons]\n    ribbons = [ribbon.count(ribbon[0]) for ribbon in ribbons]\n    rib"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    return str(c // (v_0 - v_1) + c // (a * (l + 1)) + c // (a * (l + 1)) + c // (a * (l + 1)) + c // (a * (l + 1)))\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return str(n)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(n - len(primes)):\n        primes.append(primes[-1] + 2)\n    for i in range(len(primes)):\n        if n % primes[i] == 0:\n            return str(i + 1) + \" \" + str(n // primes[i])"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [list(stdin.split()[i]) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                break\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split()]\n    return str(max(0, n * m - a * b))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    odd_nums = [x for x in nums if x % 2 == 1]\n    if len(odd_nums) == 0:\n        return -1\n    return sum(odd_nums)"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... ''')\n    '6'\n    >>> solution('''3 3\n   ... 1 1\n   ... 1 1\n   ... 1 3\n   ... ''')\n    '2'\n    >>> solution('''4 10\n   ... 5 3\n   ... 2 1\n   ... 3 2\n   ... 5 1\n   ... ''')\n    '10'\n    \"\"\"\n    n, T = [int(x) for x in stdin.split('\\n')[:2]]\n    songs = [tuple(int(x) for x in stdin.split('\\n')[i].split()) for i in range(2, n + 2)]\n    songs.sort(key=lambda x: x[0])\n    songs.sort(key=lambda x: x[1])\n    songs = [x[0] for x in songs]\n    songs = [0] + songs + [T]\n    dp = [[0] * (T + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, T + 1):\n            if j - songs[i] >= 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - songs[i]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][T] % (10 ** 9 + 7))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    while len(a) < m:\n        x = randint(1, m)\n        a.append(x)\n        gcd = gcd_list(a)\n        if gcd == 1:\n            break\n    return str(len(a))\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    return str(sum(1 for a in range(l, r + 1) for b in range(a + 1, r + 1) if gcd(a, b) == x and lcm(a, b) == y))\n\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b - gcd(a, b))\n\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    return str(sum(marks) - k * n)"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    if n % 2 == 0:\n        if arr[n // 2] == 0:\n            return 0\n        else:\n            return arr[n // 2]\n    else:\n        if arr[n // 2] == 0:\n            return arr[n // 2 + 1]\n        else:\n            return arr[n // 2]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(0)\n    if a > b:\n        a, b = b, a\n    if a % 2 == 0:\n        return str(a // 2) +'' + str(b)\n    if b % 2 == 0:\n        return str(a) +'' + str(b // 2)\n    if a % 3 == 0:\n        return str(a // 3) +'' + str(b)\n    if b % 3 == 0:\n        return str(a) +'' + str(b // 3)\n    return str(-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = [int(x) for x in stdin.split()]\n    if x_p == x_v and y_p == y_v:\n        return \"Draw\"\n    elif x_p == x_v and y_p > y_v:\n        return \"Polycarp\"\n    elif x_p < x_v and y_p == y_v:\n        return \"Polycarp\"\n    elif x_p > x_v and y_p == y_v:\n        return \"Vasiliy\"\n    elif x_p == x_v and y_p < y_v:\n        return \"Vasiliy\"\n    elif x_p < x_v and y_p < y_v:\n        return \"Vasiliy\"\n    elif x_p > x_v and y_p > y_v:\n        return \"Polycarp\"\n    elif x_p < x_v and y_p > y_v:\n        return \"Polycarp\"\n    elif x_p > x_v and y_p < y_v:\n        return \"Polycarp\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    return (d - 1) * 7 + (m - 1) // 5 + 1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return sum(1 for i in range(a, b + 1) if bin(i).count('0') == 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return sum(d(i * j * k) for i in range(1, a + 1) for j in range(1, b + 1) for k in range(1, c + 1)) % (10 ** 9 + 7)\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AB\\nXC\\nXB\\nAC\")\n    'YES'\n    >>> solution(\"AB\\nXC\\nAC\\nBX\")\n    'NO'\n    \"\"\"\n    bessie = stdin.splitlines()[0]\n    elsie = stdin.splitlines()[1]\n    bessie_tiles = {\n        \"A\": bessie[0] + bessie[1],\n        \"B\": bessie[2] + bessie[3],\n        \"C\": bessie[4] + bessie[5],\n    }\n    elsie_tiles = {\n        \"A\": elsie[0] + elsie[1],\n        \"B\": elsie[2] + elsie[3],\n        \"C\": elsie[4] + elsie[5],\n    }\n    if bessie_tiles == elsie_tiles:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    k = str(k)\n    k = k[::-1]\n    res = 0\n    for i in range(len(k)):\n        res += int(k[i]) * (n ** i)\n    return str(res)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"YES\" if a[0] == 1 else \"NO\"\n    if a[0] < a[1]:\n        if a[1] < a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if a[0] > a[1]:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - k + 1)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = [int(x) for x in stdin.split()]\n    if vx == 0 and vy == 0:\n        return '-1'\n    if vx == 0:\n        if vy > 0:\n            return '0 0'\n        else:\n            return '0'+ str(m)\n    if vy == 0:\n        if vx > 0:\n            return str(n) +'0'\n        else:\n            return '0 0'\n    if vx > 0:\n        if vy > 0:\n            return str(n) +'' + str(m)\n        else:\n            return str(n) +'0'\n    else:\n        if vy > 0:\n            return '0'+ str(m)\n        else:\n            return '0 0'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.split())\n    a3, b3 = map(int, stdin.split())\n    if a1 < a2 and a2 < a3 and b1 < b2 and b2 < b3:\n        return \"YES\"\n    return \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    bad = set(map(int, stdin.split()[1:]))\n    i = 0\n    while i < m:\n        if i + 1 in bad:\n            i += 1\n            continue\n        if i + 1 == b_1:\n            i += 1\n            continue\n        if i + 1 == q:\n            i += 1\n            continue\n        if i + 1 == b_1 - q:\n            i += 1\n            continue\n        i += 1\n    if i < l:\n        return str(i)\n    return \"inf\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(stdin[i:i + m]) for i in range(0, n * m, m)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '+'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '+':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                matrix[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'w'\n    for i in range(n):\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if n % a!= 0 or n % b!= 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 1 3 4 5 6 9\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 998 999 1000\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 2 3 4 5\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n - 1):\n        if a[i + 1] - a[i] > ans:\n            ans = a[i + 1] - a[i]\n    return str(ans)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    i = 0\n    while sum(a[:i + 1]) < sum(a) / 2:\n        i += 1\n    return str(i + 1)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(stdin) % 2 == 0 and stdin.count('1') % 2 == 0 else 'no'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'abcdefghijklmnopqrstuvwxyz' if stdin == 'thereisnoanswer' else '-1'"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    return str(max(0, k - (n - r + 1) * (m - r + 1)))"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 2 2 2\")\n    '-3 -3 -3 -3'\n    >>> solution(\"1\\n0\")\n    '0'\n    >>> solution(\"3\\n-3 -3 2\")\n    '-3 -3 2'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = [-i - 1 for i in a]\n    print(*a)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return -1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return i\n    return -1\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\\n\")\n    '87'\n    \"\"\"\n    n = int(stdin.readline())\n    cubes = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x: x[2])\n    cubes.sort(key=lambda x: x[3])\n    cubes.sort(key=lambda x: x[4])\n    cubes.sort(key=lambda x: x[5])\n    cubes.sort(key=lambda x: x[0])\n    cubes.sort(key=lambda x: x[1])\n    cubes.sort(key=lambda x:"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * 10 ** k)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(n)]\n    B = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(solve(A, B))\n\n\ndef"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return''.join(map(str, [r / (r + s + p), s / (r + s + p), p / (r + s + p)]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    return str(max(0, min(r_1, r_2) - max(l_1, l_2) + 1 - k))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 1 2 0\n   ... 0 1 1\n   ... 0 2 2\n   ... -3 4 -1\n   ... -2 6 3\n   ... 1 0 1\n   ... 0 1 2\n   ... 2 0 2\n   ... -1 -4 5\n   ... 3 -2 4\n   ... 1 2 4''')\n    13\n    \"\"\"\n    n, m = map(int, stdin.split())\n    lines = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    lines = sorted(lines, key=lambda x: x[0])\n    lines = sorted(lines, key=lambda x: x[1])\n    points = set()\n    for line in lines:\n        points.add(line[0])\n        points.add(line[1])\n    points = sorted(points)\n    points = {point: i for i, point in enumerate(points)}\n    segments = []\n    for line in lines:\n        segments.append((points[line[0]], points[line[1]]))\n    segments = sorted(segments, key=lambda x: x[0])\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = {(segment[0], segment[1]): True for segment in segments}\n    points = {point: i for i, point in enumerate(points)}\n    points = {point: i for i, point in enumerate(points)}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment[1]]): True for segment in segments}\n    segments = {(points[segment[0]], points[segment["
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x % s == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 4:\n        return 'AGCT'\n    elif n == 6:\n        return 'AGCGT'\n    elif n == 8:\n        return 'AGCTT'\n    else:\n        return '==='.join(['AGCT'] * n)\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    field = [list(stdin[i:i + 4]) for i in range(0, len(stdin), 4)]\n    x_count = 0\n    o_count = 0\n    for i in range(4):\n        for j in range(4):\n            if field[i][j] == 'x':\n                x_count += 1\n            elif field[i][j] == 'o':\n                o_count += 1\n    if x_count - o_count > 1 or o_count - x_count > 1:\n        return 'NO'\n    if x_count - o_count == 1:\n        if field[0][0] == 'x' and field[1][1] == 'x' and field[2][2] == 'x':\n            return 'YES'\n        if field[0][2] == 'x' and field[1][1] == 'x' and field[2][0] == 'x':\n            return 'YES'\n        for i in range(4):\n            if field[i][0] == 'x' and field[i][1] == 'x' and field[i][2] == 'x':\n                return 'YES'\n            if field[0][i] == 'x' and field[1][i] == 'x' and field[2][i] == 'x':\n                return 'YES'\n        if field[0][0] == 'x' and field[1][1] == 'x' and field[2][2] == 'x':\n            return 'YES'\n        if field[0][2] == 'x' and field[1][1] == 'x' and field[2][0] == 'x':\n            return 'YES'\n    if o_count - x_count == 1:\n        if field[0][0] == 'o' and field[1][1] == 'o' and field[2][2] == 'o':\n            return 'YES'\n        if field[0][2] == 'o' and field[1][1] == 'o' and field[2][0] == 'o':\n            return 'YES'\n        for i in range(4):\n            if field[i][0] == 'o' and field[i][1] == 'o' and field[i][2] == 'o':\n                return 'YES'\n            if field[0][i] == 'o' and field[1][i] == 'o' and field[2][i] == 'o':\n                return 'YES'\n        if field[0][0] == 'o' and field[1][1] == 'o' and field[2][2] == 'o':\n            return 'YES'\n        if field[0][2] == 'o' and field[1][1] == 'o' and field[2][0] == 'o':\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    if s % 2 == 0:\n        print('YES')\n    else:\n        print('NO')\n    return ''"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    for i in range(k):\n        if b[i] in a:\n            a.remove(b[i])\n        else:\n            a.append(b[i])\n    if len(a) == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split()]\n    a, b, c = [int(i) for i in stdin.split()]\n    if x + y + z == a + b + c:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"912\" else \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = [int(x) for x in stdin.split()]\n    if K > N or M > N or L > N:\n        return \"-1\"\n    if K + M + L > N:\n        return \"-1\"\n    if K * M * L > N:\n        return \"-1\"\n    return N - (K + M + L)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(stdin[i:i + m]) for i in range(0, n * m, m)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 'B'\n    for i in range(n):\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n    return \"Yes\" if x == y else \"No\""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.append(0)\n    a.append(360)\n    a.sort()\n    res = 360\n    for i in range(1, n + 1):\n        res = min(res, a[i] - a[i - 1])\n    return str(res)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m)"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return \"Yes\"\n    if n % k == 0:\n        return \"No\"\n    return \"Yes\" if all(n % i!= n % (i + 1) for i in range(k - 1)) else \"No\""
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[0]\n    b = stdin.split('\\n')[1]\n    if int(a) < int(b):\n        return '<'\n    elif int(a) > int(b):\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(min(n // 4, a, b, c))\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    edges = []\n    for _ in range(m):\n        edges.append([int(x) for x in stdin.split(' ')])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    x, s = [], []\n    for i in range(n):\n        x_i, s_i = map(int, stdin.split('\\n')[i + 1].split())\n        x.append(x_i)\n        s.append(s_i)\n    x.sort()\n    s.sort()\n    ans = 0\n    for i in range(n):\n        ans += x[i] - x[i - 1] - s[i]\n    return ans\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, *items = map(int, stdin.split())\n    dp = [0] * (W + 1)\n    for item in items:\n        for i in range(item, W + 1):\n            dp[i] = max(dp[i], dp[i - item] + item)\n    return dp[-1]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c.reverse()\n    s = 0\n    for i in range(n):\n        s += c[i] * (2 ** i)\n        if s >= l:\n            break\n    return s"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    mex = 1\n    for i in range(n):\n        if arr[i] > mex:\n            mex = arr[i]\n    return str(mex)"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin]\n    s = sum(a)\n    if s % n == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 else \"IGNORE HIM!\""
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    tabs = list(map(int, stdin.split('\\n')[1].split()))\n    e = 0\n    s = 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n        if i % k == 0:\n            if tabs[i] == 1:\n                e -= 1\n            else:\n                s -= 1\n    return abs(e - s)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c0, c1 = [int(x) for x in stdin.split()]\n    return str(n * c0 + n * c1)"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split()]\n    if x == y:\n        return \"YES\"\n    if x < y:\n        if a < x:\n            return \"YES\"\n        if a == x:\n            if b < y:\n                return \"YES\"\n            if b == y:\n                return \"YES\"\n        if a > x:\n            if b < y:\n                return \"YES\"\n            if b == y:\n                return \"YES\"\n    if x > y:\n        if a < x:\n            return \"YES\"\n        if a == x:\n            if b < y:\n                return \"YES\"\n            if b == y:\n                return \"YES\"\n        if a > x:\n            if b < y:\n                return \"YES\"\n            if b == y:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    a, b = 0, 0\n    for i in range(l, r + 1):\n        if i % x == 0 and i % y == 0:\n            a, b = i, i\n            break\n    if a == 0 and b == 0:\n        return '0'\n    return str(b - a + 1)\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    consonants = ''.join([chr(i) for i in range(ord('a'), ord('z') + 1) if chr(i) not in vowels])\n    word = stdin.lower()\n    typos = []\n    for i in range(len(word) - 2):\n        if word[i] in consonants and word[i + 1] in consonants and word[i + 2] in consonants:\n            typos.append(i)\n    if typos:\n        typos.append(len(word))\n        typos.sort()\n        typos.append(typos[0] + 1)\n        typos.sort()\n        for i in range(len(typos) - 1):\n            if typos[i + 1] - typos[i] > 1:\n                typos[i + 1] = typos[i] + 1\n        typos.sort()\n        for i in range(len(typos)):\n            word = word[:typos[i]] +'' + word[typos[i]:]\n    return word\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    ans = 0\n    for i in range(m):\n        if a[i] < x:\n            ans += a[i]\n            x -= a[i]\n        else:\n            ans += x\n            x = 0\n    for i in range(k):\n        if c[i] < n:\n            ans += c[i] * d[i]\n            n -= c[i]\n        else:\n            ans += n * d[i]\n            n = 0\n    ans += n * x\n    return ans\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n - k % (n + m)) +'' + str(k % (n + m) + 1)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    a = 1\n    b = 1\n    while True:\n        if a * b > X:\n            break\n        if X % a == 0:\n            b = X // a\n            break\n        if X % b == 0:\n            a = X // b\n            break\n        a += 1\n        b += 1\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lemon = int(stdin.split('\\n')[0])\n    apple = int(stdin.split('\\n')[1])\n    pear = int(stdin.split('\\n')[2])\n    if pear < apple:\n        return 0\n    if pear < lemon:\n        return 0\n    if apple < lemon:\n        return lemon\n    return lemon + apple + pear\n\nprint(solution(input()))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    if arr[0] > arr[1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while x > 0:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = x ^ (2 ** t - 1)\n            t += 1\n    return t\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] > k:\n            break\n        ans += k // a[i]\n    return ans"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    line = stdin.split()\n    if 'G' in line:\n        start = line.index('G')\n    else:\n        start = 0\n    if 'T' in line:\n        end = line.index('T')\n    else:\n        end = n - 1\n    if start > end:\n        return 'NO'\n    if k == 1:\n        return 'YES'\n    if k > n - 1:\n        return 'NO'\n    if k == n - 1:\n        return 'YES'\n    if k == n:\n        return 'YES'\n    if k == n - 2:\n        return 'YES'\n    if k == n - 3:\n        return 'YES'\n    if k == n - 4:\n        return 'YES'\n    if k == n - 5:\n        return 'YES'\n    if k == n - 6:\n        return 'YES'\n    if k == n - 7:\n        return 'YES'\n    if k == n - 8:\n        return 'YES'\n    if k == n - 9:\n        return 'YES'\n    if k == n - 10:\n        return 'YES'\n    if k == n - 11:\n        return 'YES'\n    if k == n - 12:\n        return 'YES'\n    if k == n - 13:\n        return 'YES'\n    if k == n - 14:\n        return 'YES'\n    if k == n - 15:\n        return 'YES'\n    if k == n - 16:\n        return 'YES'\n    if k == n - 17:\n        return 'YES'\n    if k == n - 18:\n        return 'YES'\n    if k == n - 19:\n        return 'YES'\n    if k == n - 20:\n        return 'YES'\n    if k == n - 21:\n        return 'YES'\n    if k == n - 22:\n        return 'YES'\n    if k == n - 23:\n        return 'YES'\n    if k == n - 24:\n        return 'YES'\n    if k == n - 25:\n        return 'YES'\n    if k == n - 26:\n        return 'YES'\n    if k == n - 27:\n        return 'YES'\n    if k == n - 28:\n        return 'YES'\n    if k == n - 29:\n        return 'YES'\n    if k == n - 30:\n        return 'YES'\n    if k == n - 31:\n        return 'YES'\n    if k == n - 32:\n        return 'YES'\n    if k == n - 33:\n        return 'YES'\n    if k == n - 34:\n        return 'YES'\n    if k == n - 35:\n        return 'YES'\n    if k == n - 36:\n        return 'YES'\n    if k == n - 37:\n        return 'YES'\n    if k == n - 38:\n        return 'YES'\n    if k == n - 39:\n        return 'YES'\n    if k == n - 40:\n        return 'YES'\n    if k == n - 41:\n        return 'YES'\n    if k == n - 42:\n        return 'YES'\n    if k == n - 43:\n        return 'YES'\n    if k == n - 44:\n        return 'YES'\n    if k == n - 45:\n        return 'YES'\n    if k == n - 46:\n        return 'YES'\n    if k == n - 47:\n        return 'YES'\n    if k == n - 48:\n        return 'YES'\n    if k == n - 49:\n        return 'YES'\n    if k == n - 50:\n        return 'YES'\n    if k == n - 51:\n        return 'YES'\n    if k == n - 52:\n        return 'YES'\n    if k == n - 53:\n        return 'YES'\n    if k == n - 54:\n        return 'YES'\n    if k == n - 55:\n        return 'YES'\n    if k == n - 56:\n        return 'YES'\n    if k == n - 57:\n        return 'YES'\n    if k == n - 58:\n        return 'YES'\n    if k == n - 59:\n        return 'YES'\n    if k == n - 60:\n        return 'YES'\n    if k == n - 61:\n        return 'YES'\n    if k == n - 62:\n        return 'YES'\n    if k == n - 63:\n        return 'YES'\n    if k == n - 64:\n        return 'YES'\n    if k == n - 65:\n        return 'YES'\n    if k == n - 66:\n        return 'YES'\n    if k == n - 67:\n        return 'YES'\n    if k == n - 68:\n        return 'YES'\n    if k == n - 69:\n        return 'YES'\n    if k == n - 70:\n        return 'YES'\n    if k == n - 71:\n        return 'YES'\n    if k == n - 72:\n        return 'YES'\n    if k == n - 73:\n        return 'YES'\n    if k == n - 74:\n        return 'YES'\n    if k == n - 75:\n        return 'YES'\n    if k == n - 76:\n        return 'YES'\n    if k == n - 77:\n        return 'YES'\n    if k == n - 78:\n        return 'YES'\n    if k == n - 79:\n        return 'YES'\n    if k == n - 80:\n        return 'YES'\n    if k == n - 81:\n        return 'YES'\n    if k == n - 82:\n        return 'YES'\n    if k == n - 83:\n        return 'YES'\n    if k == n - 84:\n        return 'YES'\n    if k == n - 85:\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if y_1 + r < y_2:\n        return '-1'\n    if y_1 + 2 * r < y_w:\n        return '-1'\n    if y_2 - y_1 < 2 * r:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    if y_2 - y_1 < y_w - y_1:\n        return '-1'\n    "
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return min(b, d, s) - 1\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a = list(a)\n    b = list(b)\n    a_len = len(a)\n    b_len = len(b)\n    if a_len == 0 or b_len == 0:\n        return '-'\n    i = 0\n    j = 0\n    while i < a_len and j < b_len:\n        if a[i] == b[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return ''.join(a[i:])\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 4\n    if n == 10:\n        return 4\n    if n == 11:\n        return 4\n    if n == 12:\n        return 4\n    if n == 13:\n        return 4\n    if n == 14:\n        return 4\n    if n == 15:\n        return 4\n    if n == 16:\n        return 4\n    if n == 17:\n        return 4\n    if n == 18:\n        return 4\n    if n == 19:\n        return 4\n    if n == 20:\n        return 4\n    if n == 21:\n        return 4\n    if n == 22:\n        return 4\n    if n == 23:\n        return 4\n    if n == 24:\n        return 4\n    if n == 25:\n        return 4\n    if n == 26:\n        return 4\n    if n == 27:\n        return 4\n    if n == 28:\n        return 4\n    if n == 29:\n        return 4\n    if n == 30:\n        return 4\n    if n == 31:\n        return 4\n    if n == 32:\n        return 4\n    if n == 33:\n        return 4\n    if n == 34:\n        return 4\n    if n == 35:\n        return 4\n    if n == 36:\n        return 4\n    if n == 37:\n        return 4\n    if n == 38:\n        return 4\n    if n == 39:\n        return 4\n    if n == 40:\n        return 4\n    if n == 41:\n        return 4\n    if n == 42:\n        return 4\n    if n == 43:\n        return 4\n    if n == 44:\n        return 4\n    if n == 45:\n        return 4\n    if n == 46:\n        return 4\n    if n == 47:\n        return 4\n    if n == 48:\n        return 4\n    if n == 49:\n        return 4\n    if n == 50:\n        return 4\n    if n == 51:\n        return 4\n    if n == 52:\n        return 4\n    if n == 53:\n        return 4\n    if n == 54:\n        return 4\n    if n == 55:\n        return 4\n    if n == 56:\n        return 4\n    if n == 57:\n        return 4\n    if n == 58:\n        return 4\n    if n == 59:\n        return 4\n    if n == 60:\n        return 4\n    if n == 61:\n        return 4\n    if n == 62:\n        return 4\n    if n == 63:\n        return 4\n    if n == 64:\n        return 4\n    if n == 65:\n        return 4\n    if n == 66:\n        return 4\n    if n == 67:\n        return 4\n    if n == 68:\n        return 4\n    if n == 69:\n        return 4\n    if n == 70:\n        return 4\n    if n == 71:\n        return 4\n    if n == 72:\n        return 4\n    if n == 73:\n        return 4\n    if n == 74:\n        return 4\n    if n == 75:\n        return 4\n    if n == 76:\n        return 4\n    if n == 77:\n        return 4\n    if n == 78:\n        return 4\n    if n == 79:\n        return 4\n    if n == 80:\n        return 4\n    if n == 81:\n        return 4\n    if n == 82:\n        return 4\n    if n == 83:\n        return 4\n    if n == 84:\n        return 4\n    if n == 85:\n        return 4\n    if n == 86:\n        return 4\n    if n == 87:\n        return 4\n    if n == 88:\n        return 4\n    if n == 89:\n        return 4\n    if n == 90:\n        return 4\n    if n == 91:\n        return 4\n    if n == 92:\n        return 4\n    if n == 93:\n        return 4\n    if n == 94:\n        return 4\n    if n == 95:\n        return 4\n    if n == 96:\n        return 4\n    if n == 97:\n        return 4\n    if n == 98:\n        return 4\n    if n == 99:\n        return 4\n    if n == 100:\n        return 4\n    return 4\n\nprint(solution(input()))\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    if n < a:\n        return str(n // b)\n    else:\n        return str(n // b + n // c + n // a)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 5:\n        return \"Too weak\"\n    if stdin.isupper() or stdin.islower() or stdin.isdigit():\n        return \"Too weak\"\n    if stdin.count(\"!\") > 0 or stdin.count(\"?\") > 0 or stdin.count(\".\") > 0 or stdin.count(\",\") > 0 or stdin.count(\"_\") > 0:\n        return \"Correct\"\n    return \"Too weak\""
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a_b = [a[i] - b[i] for i in range(n)]\n    a_b.sort()\n    if a_b[0] > 0:\n        return -1\n    else:\n        return a_b[0]\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n0 1 1 0\")\n    'YES\\n(((0)->1)->(1->0))'\n    >>> solution(\"2\\n1 1\")\n    'NO'\n    >>> solution(\"1\\n0\")\n    'YES\\n0'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\\n\" + str(a[0])\n    if n == 2:\n        if a[0] == 1 and a[1] == 1:\n            return \"NO\"\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 1:\n        return \"NO\"\n    if a[0] == 0 and a[1] == 0:\n        return \"YES\\n0\"\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 0:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 0:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 0:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 0:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 0:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 0:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 0:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 0 and a[1] == 1:\n        return \"YES\\n\" + str(a[0]) + \"->\" + str(a[1])\n    if a[0] == 1 and a[1] == 0"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a >= 2 * b:\n            a -= 2 * b\n        else:\n            b -= 2 * a\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    return str(b - a + 1 - (b - a) % k)\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while k > 0:\n        k -= 1\n        n *= 10\n    return str(n // 10 ** (k - 1))\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n % 2 == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if s[0] == \"8\":\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        return \"NO\"\n                    else:\n                        return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        return \"NO\"\n                    else:\n                        return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        if s[4] == \"0\":\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        if s[4] == \"0\":\n                            return \"NO\"\n                        else:\n                            return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        if s[4] == \"0\":\n                            if s[5] == \"0\":\n                                return \"YES\"\n                            else:\n                                return \"NO\"\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        if s[4] == \"0\":\n                            if s[5] == \"0\":\n                                return \"NO\"\n                            else:\n                                return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        if s[4] == \"0\":\n                            if s[5] == \"0\":\n                                if s[6] == \"0\":\n                                    return \"YES\"\n                                else:\n                                    return \"NO\"\n                            else:\n                                return \"NO\"\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        if s[4] == \"0\":\n                            if s[5] == \"0\":\n                                if s[6] == \"0\":\n                                    return \"NO\"\n                                else:\n                                    return \"YES\"\n                            else:\n                                return \"NO\"\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        if s[4] == \"0\":\n                            if s[5] == \"0\":\n                                if s[6] == \"0\":\n                                    if s[7] == \"0\":\n                                        return \"YES\"\n                                    else:\n                                        return \"NO\"\n                            else:\n                                return \"NO\"\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if s[0] == \"8\":\n            if s[1] == \"0\":\n                if s[2] == \"0\":\n                    if s[3] == \"0\":\n                        if s[4] == \"0\":\n                            if s[5] == \"0\":\n                                if s[6] == \"0\":\n                                    if s[7] == \"0\":\n                                        if s[8] == \"0\":\n                                            return \"YES\""
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    return str(n * (n - 1) // 2 - (n - pos) * (n - pos - 1) // 2 - (n - pos - 1) * (n - pos) // 2 + x * (n - pos) * (n - pos - 1) // 2)\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin.split()[1])\n    s = s.replace('*','')\n    s = s.replace('?','')\n    s = s.split()\n    for i in range(len(s)):\n        if len(s[i])!= k:\n            return 'Impossible'\n    for i in range(len(s)):\n        for j in range(len(s[i])):\n            if s[i][j] not in 'abcdefghijklmnopqrstuvwxyz':\n                return 'Impossible'\n    for i in range(len(s)):\n        for j in range(len(s[i])):\n            if s[i][j] == 'a':\n                if s[i][j + 1] == 'b':\n                    if s[i][j + 2] == 'c':\n                        if s[i][j + 3] == 'd':\n                            if s[i][j + 4] == 'e':\n                                if s[i][j + 5] == 'f':\n                                    if s[i][j + 6] == 'g':\n                                        if s[i][j + 7] == 'h':\n                                            if s[i][j + 8] == 'i':\n                                                if s[i][j + 9] == 'j':\n                                                    if s[i][j + 10] == 'k':\n                                                        if s[i][j + 11] == 'l':\n                                                            if s[i][j + 12] =='m':\n                                                                if s[i][j + 13] == 'n':\n                                                                    if s[i][j + 14] == 'o':\n                                                                        if s[i][j + 15] == 'p':\n                                                                            if s[i][j + 16] == 'q':\n                                                                                if s[i][j + 17] == 'r':\n                                                                                    if s[i][j + 18] =='s':\n                                                                                        if s[i][j + 19] == 't':\n                                                                                            if s[i][j + 20] == 'u':\n                                                                                                if s[i][j + 21] == 'v':\n                                                                                                    if s[i][j + 22] == 'w':\n                                                                                                        if s[i][j + 23] == 'x':\n                                                                                                            if s[i][j + 24] == 'y':\n                                                                                                                if s[i][j + 25] == 'z':\n                                                                                                                    return s[i][:j] + s[i][j + 26:]\n    return 'Impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin) // 90, 3))\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y, z = [int(i) for i in stdin.split()]\n    if a + b + c >= x + y + z:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    return str(sum([1 for x in range(n, n + k) if x % k == 0]))"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return str(l + r + a - 1)\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return n - k + 1"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(n, m) * 2)"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    petya = set()\n    vasya = set()\n    for i in range(n):\n        a = int(stdin)\n        if i % 2 == 0:\n            petya.add(a)\n        else:\n            vasya.add(a)\n    if len(petya)!= len(vasya):\n        return \"NO\"\n    petya = list(petya)\n    vasya = list(vasya)\n    petya.sort()\n    vasya.sort()\n    if petya == vasya:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if sum(a) > 8 * n:\n        return \"NO\"\n    for i in range(k):\n        if a[i] > 8:\n            return \"NO\"\n        if i > 0 and a[i] == a[i - 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    t = a[0]\n    cost = 0\n    for i in range(1, n):\n        cost += abs(a[i] - t)\n        if a[i] - t > 1:\n            t = a[i]\n    print(t, cost)\n    return ''"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = 1\n    q = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                p *= 2\n                q *= 2\n            elif a[i] < a[j]:\n                p *= 2\n                q *= 2\n    return str(p // q)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(int(y / x) - (y // x))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(abs(a * d - b * c))\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    ans = 0\n    for i in range(n):\n        if t[i] == 1:\n            if a > 0:\n                a -= 1\n            else:\n                ans += 1\n        else:\n            if b > 0:\n                b -= 1\n            else:\n                ans += 1\n    return ans"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = [int(x) for x in stdin.split()]\n    if A + B + C == N:\n        return str(N - A - B - C)\n    return '-1'"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return (x + k * (x // 2)) % (10 ** 9 + 7)\n\nprint(solution(input()))\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    r.sort()\n    ans = 1\n    for i in range(n):\n        ans *= (r[i] - l[i] + 1)\n        ans %= 1000000007\n    return ans\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_ways(int(stdin)))\n\n\ndef"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    v.sort()\n    i = 0\n    while i < n and s > 0:\n        s -= v[i]\n        i += 1\n    if s > 0:\n        return -1\n    return i\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2, a, b = [int(x) for x in stdin.split()]\n    if h1 < h2:\n        return -1\n    if h1 == h2:\n        return 0\n    return (h2 - h1) // (a - b) + 1\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = [int(x) for x in stdin.split()]\n    return str(max(C * H_r, C * H_b, C * (H_r + H_b), C * (W_r + W_b)))\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return str(abs(x2 - x1) + abs(y2 - y1))\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [stdin[i] for i in range(n)]\n    for i in range(n):\n        if arr[i] == 'D':\n            arr[i] = 'R'\n        else:\n            arr[i] = 'D'\n    return arr[0]"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(x) for x in stdin.split(' ')]\n    return str(sum(1 for w in range(a, a + 1) for h in range(b, b + 1) if w / h == x / y))\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    return str(len(str(n)) - len(str(n).rstrip('0')))"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split()]\n    return str(sum(i + 1 if i % a == 0 or i % b == 0 else 0 for i in range(m + 1)))\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n % 2 == 0:\n        return \"No\"\n    for i in range(n):\n        if a[i] % 2 == 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x2:\n        x3 = x1\n        x4 = x2\n        y3 = y1\n        y4 = y2\n    elif y1 == y2:\n        x3 = x1\n        x4 = x2\n        y3 = y1\n        y4 = y2\n    elif x1 == y2:\n        x3 = x1\n        x4 = x2\n        y3 = y1\n        y4 = y2\n    elif x1 == y1:\n        x3 = x1\n        x4 = x2\n        y3 = y1\n        y4 = y2\n    elif x2 == y1:\n        x3 = x1\n        x4 = x2\n        y3 = y1\n        y4 = y2\n    elif x2 == y2:\n        x3 = x1\n        x4 = x2\n        y3 = y1\n        y4 = y2\n    elif y2 == y1:\n        x3 = x1\n        x4 = x2\n        y3 = y1\n        y4 = y2\n    else:\n        x3 = -1\n        x4 = -1\n        y3 = -1\n        y4 = -1\n    return f\"{x3} {y3} {x4} {y4}\""
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    n = int(stdin)\n    if n == 0:\n        return str(10 ** 9 + 6)\n    elif n == 1:\n        return str(x)\n    else:\n        return str(x + y)\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    if sum(arr) == 0:\n        return \"YES\"\n    if sum(arr) < 0:\n        return \"NO\"\n    if len(arr) == 1:\n        return \"NO\"\n    if len(arr) == 2:\n        if arr[0] == 0:\n            return \"YES\"\n        if arr[1] == 0:\n            return \"YES\"\n        if arr[0] == arr[1]:\n            return \"YES\"\n        if arr[0] + 1 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 1:\n            return \"YES\"\n        return \"NO\"\n    if len(arr) > 2:\n        if arr[0] == 0:\n            return \"YES\"\n        if arr[0] == arr[1]:\n            return \"YES\"\n        if arr[0] + 1 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 1:\n            return \"YES\"\n        if arr[0] + 1 == arr[1] - 1:\n            return \"YES\"\n        if arr[0] == arr[1] - 2:\n            return \"YES\"\n        if arr[0] + 2 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 2:\n            return \"YES\"\n        if arr[0] + 2 == arr[1] - 2:\n            return \"YES\"\n        if arr[0] == arr[1] - 3:\n            return \"YES\"\n        if arr[0] + 3 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 3:\n            return \"YES\"\n        if arr[0] + 3 == arr[1] - 3:\n            return \"YES\"\n        if arr[0] == arr[1] - 4:\n            return \"YES\"\n        if arr[0] + 4 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 4:\n            return \"YES\"\n        if arr[0] + 4 == arr[1] - 4:\n            return \"YES\"\n        if arr[0] == arr[1] - 5:\n            return \"YES\"\n        if arr[0] + 5 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 5:\n            return \"YES\"\n        if arr[0] + 5 == arr[1] - 5:\n            return \"YES\"\n        if arr[0] == arr[1] - 6:\n            return \"YES\"\n        if arr[0] + 6 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 6:\n            return \"YES\"\n        if arr[0] + 6 == arr[1] - 6:\n            return \"YES\"\n        if arr[0] == arr[1] - 7:\n            return \"YES\"\n        if arr[0] + 7 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 7:\n            return \"YES\"\n        if arr[0] + 7 == arr[1] - 7:\n            return \"YES\"\n        if arr[0] == arr[1] - 8:\n            return \"YES\"\n        if arr[0] + 8 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 8:\n            return \"YES\"\n        if arr[0] + 8 == arr[1] - 8:\n            return \"YES\"\n        if arr[0] == arr[1] - 9:\n            return \"YES\"\n        if arr[0] + 9 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 9:\n            return \"YES\"\n        if arr[0] + 9 == arr[1] - 9:\n            return \"YES\"\n        if arr[0] == arr[1] - 10:\n            return \"YES\"\n        if arr[0] + 10 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 10:\n            return \"YES\"\n        if arr[0] + 10 == arr[1] - 10:\n            return \"YES\"\n        if arr[0] == arr[1] - 11:\n            return \"YES\"\n        if arr[0] + 11 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 11:\n            return \"YES\"\n        if arr[0] + 11 == arr[1] - 11:\n            return \"YES\"\n        if arr[0] == arr[1] - 12:\n            return \"YES\"\n        if arr[0] + 12 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 12:\n            return \"YES\"\n        if arr[0] + 12 == arr[1] - 12:\n            return \"YES\"\n        if arr[0] == arr[1] - 13:\n            return \"YES\"\n        if arr[0] + 13 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 13:\n            return \"YES\"\n        if arr[0] + 13 == arr[1] - 13:\n            return \"YES\"\n        if arr[0] == arr[1] - 14:\n            return \"YES\"\n        if arr[0] + 14 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 14:\n            return \"YES\"\n        if arr[0] + 14 == arr[1] - 14:\n            return \"YES\"\n        if arr[0] == arr[1] - 15:\n            return \"YES\"\n        if arr[0] + 15 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 15:\n            return \"YES\"\n        if arr[0] + 15 == arr[1] - 15:\n            return \"YES\"\n        if arr[0] == arr[1] - 16:\n            return \"YES\"\n        if arr[0] + 16 == arr[1]:\n            return \"YES\"\n        if arr[0] == arr[1] - 16:\n            return \"YES\"\n        if arr[0] + 16 == arr[1] - 16:\n            return \"YES\"\n        if arr[0] =="
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n * (m - k + 1))\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 8 == 0:\n        return \"YES\"\n    if n < 8:\n        return \"NO\"\n    while n > 0:\n        if n % 8 == 0:\n            return \"YES\"\n        n //= 8\n    return \"NO\""
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 3\n   ... 6 2\n   ... 2 1\n   ... 7 3''')\n    '4'\n    >>> solution('''8 4\n   ... 3 1\n   ... 6 2\n   ... 5 2\n   ... 2 1''')\n    '-1'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    floors = [tuple(map(int, stdin.split('\\n')[i].split())) for i in range(2, m + 2)]\n    floors.sort(key=lambda x: x[0])\n    for i in range(1, n):\n        if floors[i][0]!= floors[i - 1][0]:\n            return str(-1)\n    return str(floors[n - 1][1])\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = s.lower()\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    s = list(s)\n    "
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split()]\n    if k > a / b:\n        return -1\n    return a // b - k + 1\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin[:n]\n    if p > n or q > n:\n        return '-1'\n    if p == q:\n        return '1\\n' + s\n    if p == 1:\n        return '1\\n' + s[:q]\n    if q == 1:\n        return '1\\n' + s[:p]\n    return '2\\n' + s[:p] + '\\n' + s[:q]\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    obstacles.sort()\n    if obstacles[0] < 0 or obstacles[-1] > m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == 0:\n        return \"IMPOSSIBLE\"\n    if obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == 0 and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == 0 and obstacles[-1] < m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] > 0 and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] > 0 and obstacles[-1] < m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] > 0 and obstacles[-1] > m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == 0 and obstacles[-1] > m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] < m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] < m and obstacles[-1] < m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] < m and obstacles[-1] > m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] > m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] < m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] > m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] > m and obstacles[-1] < m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] > m and obstacles[-1] > m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n    if obstacles[0] == m and obstacles[-1] == m:\n        return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    return str(bin(s ^ x).count('1'))\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skewers = [i for i in range(1, n + 1)]\n    turns = 0\n    while len(skewers) > 1:\n        turns += 1\n        skewers = [skewers[i - k] for i in range(k, len(skewers) + k) if i - k >= 0] + \\\n                  [skewers[i + k] for i in range(k, len(skewers) + k) if i + k < len(skewers)]\n    return turns\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10 ** 9:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 4\n    if n == 10:\n        return 4\n    if n == 11:\n        return 5\n    if n == 12:\n        return 5\n    if n == 13:\n        return 6\n    if n == 14:\n        return 6\n    if n == 15:\n        return 7\n    if n == 16:\n        return 7\n    if n == 17:\n        return 8\n    if n == 18:\n        return 8\n    if n == 19:\n        return 9\n    if n == 20:\n        return 9\n    if n == 21:\n        return 10\n    if n == 22:\n        return 10\n    if n == 23:\n        return 11\n    if n == 24:\n        return 11\n    if n == 25:\n        return 12\n    if n == 26:\n        return 12\n    if n == 27:\n        return 13\n    if n == 28:\n        return 13\n    if n == 29:\n        return 14\n    if n == 30:\n        return 14\n    if n == 31:\n        return 15\n    if n == 32:\n        return 15\n    if n == 33:\n        return 16\n    if n == 34:\n        return 16\n    if n == 35:\n        return 17\n    if n == 36:\n        return 17\n    if n == 37:\n        return 18\n    if n == 38:\n        return 18\n    if n == 39:\n        return 19\n    if n == 40:\n        return 19\n    if n == 41:\n        return 20\n    if n == 42:\n        return 20\n    if n == 43:\n        return 21\n    if n == 44:\n        return 21\n    if n == 45:\n        return 22\n    if n == 46:\n        return 22\n    if n == 47:\n        return 23\n    if n == 48:\n        return 23\n    if n == 49:\n        return 24\n    if n == 50:\n        return 24\n    if n == 51:\n        return 25\n    if n == 52:\n        return 25\n    if n == 53:\n        return 26\n    if n == 54:\n        return 26\n    if n == 55:\n        return 27\n    if n == 56:\n        return 27\n    if n == 57:\n        return 28\n    if n == 58:\n        return 28\n    if n == 59:\n        return 29\n    if n == 60:\n        return 29\n    if n == 61:\n        return 30\n    if n == 62:\n        return 30\n    if n == 63:\n        return 31\n    if n == 64:\n        return 31\n    if n == 65:\n        return 32\n    if n == 66:\n        return 32\n    if n == 67:\n        return 33\n    if n == 68:\n        return 33\n    if n == 69:\n        return 34\n    if n == 70:\n        return 34\n    if n == 71:\n        return 35\n    if n == 72:\n        return 35\n    if n == 73:\n        return 36\n    if n == 74:\n        return 36\n    if n == 75:\n        return 37\n    if n == 76:\n        return 37\n    if n == 77:\n        return 38\n    if n == 78:\n        return 38\n    if n == 79:\n        return 39\n    if n == 80:\n        return 39\n    if n == 81:\n        return 40\n    if n == 82:\n        return 40\n    if n == 83:\n        return 41\n    if n == 84:\n        return 41\n    if n == 85:\n        return 42\n    if n == 86:\n        return 42\n    if n == 87:\n        return 43\n    if n == 88:\n        return 43\n    if n == 89:\n        return 44\n    if n == 90:\n        return 44\n    if n == 91:\n        return 45\n    if n == 92:\n        return 45\n    if n == 93:\n        return 46\n    if n == 94:\n        return 46\n    if n == 95:\n        return 47\n    if n == 96:\n        return 47\n    if n == 97:\n        return 48\n    if n == 98:\n        return 48\n    if n == 99:\n        return 49\n    if n == 100:\n        return 49\n    if n == 101:\n        return 50\n    if n == 102:\n        return 50\n    if n == 103:\n        return 51\n    if n == 104:\n        return 51\n    if n == 105:\n        return 52\n    if n == 106:\n        return 52\n    if n == 107:\n        return 53\n    if n == 108:\n        return 53\n    if n == 109:\n        return 54\n    if n == 110:\n        return 54\n    if n == 111:\n        return 55\n    if n == 112:\n        return 55\n    if n == 113:\n        return 56\n    if n == 114:\n        return 56\n    if n == 115:\n        return 57\n    if n == 116:\n        return 57\n    if n == 117:\n        return 58\n    if n == 118:\n        return 58\n    if n == 119:\n        return 59\n    if n == 120:\n        return 59\n    if n == 121:\n        return 60\n    if n == 122:\n        return 60\n    if n == 123:\n        return 61\n    if n == 124:\n        return 61\n    if n == 125:\n        return 62\n    if n == 126:\n        return 62\n    if n == 127:\n        return 63\n    if n == 128:\n        return 63\n    if n == 129:\n        return 64\n    if n == 130:\n        return 64\n    if n == 131:\n        return 65\n    if n == 132:\n        return 65\n    if n == 133:\n        return 66\n    if n == 134:\n        return 66\n    if n == 135:\n        return 67\n    if n == 136:\n        return 67\n    if n == 137:\n        return 68\n    if n == 138:\n        return 68\n    if n == 139:\n        return 69\n    if n == 140:\n        return 69\n    if n == 141:\n        return 70\n    if n == 142:\n        return 70\n    if n == 143:\n        return 71\n    if n == 144:\n        return 71\n    if n == 145:\n        return 72\n    if n == 146:\n        return 72\n    if n == 147:\n        return 73\n    if n == 148:\n        return 73\n    if n == 149:\n        return 74\n    if n == 150:\n        return 74\n    if n == 151:\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) // 2 % (10 ** 9 + 7))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - max(stdin.rfind('A'), stdin.rfind('E'), stdin.rfind('I'), stdin.rfind('O'), stdin.rfind('U'), stdin.rfind('Y'))"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    if sum(a) % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sizes = [int(x) for x in stdin.split()]\n    alice = 0\n    bob = 0\n    decider = 1\n    for i in range(n):\n        if sizes[i] > decider:\n            alice += sizes[i] - decider\n            bob += decider\n            decider = sizes[i]\n        else:\n            decider -= sizes[i]\n    return str(alice) +'' + str(bob)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        m = max(m, a[i] + i)\n    if m < n:\n        return -1\n    return m\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    if n % 2 == 0:\n        if sum(a) % 2 == 0:\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    else:\n        if sum(a) % 2 == 0:\n            return \"Bob\"\n        else:\n            return \"Alice\""
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0] == a[-1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nababa\")\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                ans = max(ans, j - i)\n    print(ans)\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return n - a + 1"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    colors = list(map(int, stdin.split(' ')))\n    k = list(map(int, stdin.split(' ')))\n    if sum(k) > n:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    mishka = 0\n    chris = 0\n    for i in range(n):\n        mishka_dice, chris_dice = map(int, stdin.readline().split())\n        if mishka_dice > chris_dice:\n            mishka += 1\n        elif chris_dice > mishka_dice:\n            chris += 1\n        else:\n            mishka += 1\n            chris += 1\n    if mishka > chris:\n        return \"Mishka\"\n    elif chris > mishka:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    field = [list(stdin[i:i + m]) for i in range(0, n * m, m)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if 0 <= k < n and 0 <= l < m and field[k][l]!= '*':\n                            field[k][l] = str(int(field[k][l]) + 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '0'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if 0 <= k < n and 0 <= l < m and field[k][l]!= '*':\n                            field[k][l] = '*'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                field[i][j] = '*'\n            else:\n                field[i][j] = str(int(field[i][j]) - 1)\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '0':\n                field[i][j] = '.'"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while n > 0:\n        k += 1\n        n = n // 10\n    return k"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"-o-o--\")\n    'YES'\n    >>> solution(\"-o---\")\n    'YES'\n    >>> solution(\"ooo\")\n    'YES'\n    \"\"\"\n    necklace = stdin\n    necklace = necklace.replace(\"-\", \"\")\n    necklace = necklace.replace(\"o\", \"\")\n    necklace = necklace.replace(\" \", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace = necklace.replace(\"\", \"\")\n    necklace"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return n - k + 1 if n - k + 1 <= m else m - k + 1"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 3 10\n   ... 2 -4 15 -3 4 8 3\n   ... ''')\n    '7'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_cost = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_cost = sum(a[i:j + 1]) - k * math.ceil(j - i + 1 / m)\n            if subarray_cost > max_cost:\n                max_cost = subarray_cost\n    return str(max_cost)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        for j in range(m):\n            points.append((i, j))\n    points = sorted(points, key=lambda x: x[0] + x[1])\n    print(points[0][0], points[0][1])\n    print(points[1][0], points[1][1])\n    print(points[2][0], points[2][1])\n    print(points[3][0], points[3][1])\n    return ''\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    k = int(n[0])\n    n = n[1:]\n    n = n[k:]\n    return n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = [int(x) for x in stdin.split()]\n    temps = [int(x) for x in stdin.split()]\n    temps.sort()\n    if temps[0] < min or temps[-1] > max:\n        return 'Incorrect'\n    for i in range(1, n):\n        if temps[i] < min or temps[i] > max:\n            return 'Incorrect'\n    return 'Correct'\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 0\n    for i in range(1, m + 1):\n        if str(i).endswith('0' * m):\n            count += 1\n    print(count)\n    print(*[i for i in range(1, m + 1) if str(i).endswith('0' * m)], sep='\\n')\n    return ''"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3 2\n   ... 2 1\n   ... 1 2 3\n   ... 1 2 2\n   ... 2 2 1''')\n    '2 2 2'\n    \"\"\"\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v, w = map(int, stdin.split('\\n')[_ + 1].split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    dist = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dist[i] = max(dist[j] + 1 for j in graph[i])\n    return''.join(map(str, dist[1:k + 1]))\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    if n % 2 == 0:\n        x = 2 - x\n    return str(x)"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 0 0 2 3\n   ... 0 3 3 5\n   ... 2 0 5 2\n   ... 3 2 5 5\n   ... 2 2 3 3''')\n    'YES'\n    >>> solution('''4\n   ... 0 0 2 3\n   ... 0 3 3 5\n   ... 2 0 5 2\n   ... 3 2 5 5''')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    return str(sum(i for i in range(n + 1) if i - sum(int(j) for j in str(i)) >= s))"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(set(stdin.split())) < len(stdin.split()) else 'NO'"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return str(sum(k ** i * (k - i) ** j * (k - j) for i in range(k + 1) for j in range(k + 1) if i + j <= t))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    ruler = list(map(int, stdin.split()))\n    ruler.sort()\n    ruler.append(l)\n    ruler.insert(0, 0)\n    ruler.sort()\n    ruler = [ruler[i] - ruler[i - 1] for i in range(1, len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()\n    ruler = [ruler[i] for i in range(len(ruler))]\n    ruler.sort()\n    ruler.reverse()"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 1\\n9 7\\n1 4\\n10 7\")\n    '3983.539484752'\n    \"\"\"\n    n = int(stdin)\n    cakes = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    max_volume = 0\n    for i in range(n):\n        max_volume += cakes[i][0] * cakes[i][1]\n    return str(max_volume)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    slices = 0\n    for i in range(n):\n        if h[i] > k:\n            slices += (h[i] - k)\n            h[i] = k\n    return slices"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s < 0:\n            s = 0\n    return s"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = [int(x) for x in stdin.split()]\n    if k1 + k2 + k3 < 2:\n        return \"NO\"\n    if k1 % 2 == 0 or k2 % 2 == 0 or k3 % 2 == 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys = int(stdin.readline())\n    boys_skills = list(map(int, stdin.readline().split()))\n    girls = int(stdin.readline())\n    girls_skills = list(map(int, stdin.readline().split()))\n    boys_skills.sort()\n    girls_skills.sort()\n    i = 0\n    j = 0\n    pairs = 0\n    while i < boys and j < girls:\n        if abs(boys_skills[i] - girls_skills[j]) <= 1:\n            pairs += 1\n            i += 1\n            j += 1\n        elif boys_skills[i] > girls_skills[j]:\n            j += 1\n        else:\n            i += 1\n    return pairs"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    defence, attack = map(int, stdin.split())\n    if defence > attack:\n        return \"Team 1\"\n    elif attack > defence:\n        return \"Team 2\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.replace('?', '0')\n    if n % 2 == 0:\n        first_half = ticket[:n // 2]\n        second_half = ticket[n // 2:]\n        if sum(map(int, first_half)) == sum(map(int, second_half)):\n            return 'Bicarp'\n        else:\n            return 'Monocarp'\n    else:\n        return 'Monocarp'\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    buses = []\n    for i in range(n):\n        s, d = map(int, stdin.split())\n        buses.append((s, d))\n    buses.sort()\n    for i in range(n):\n        if buses[i][0] >= t:\n            return i + 1\n    return n + 1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = 0\n    while True:\n        if bin(n + 1).count('1') == m and bin(n + 2).count('1') == m and bin(n + 3).count('1') == m and bin(n + 4).count('1') == m:\n            if bin(n + 1).count('1') == k and bin(n + 2).count('1') == k and bin(n + 3).count('1') == k and bin(n + 4).count('1') == k:\n                return str(n + 1)\n        n += 1"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(stdin) % 5 == 0 else 'no'"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    magic_square = []\n    for _ in range(n):\n        magic_square.append(list(map(int, stdin.split())))\n    \n    # check if the sum of each row is equal to the sum of each column\n    for i in range(n):\n        if sum(magic_square[i])!= sum(map(lambda x: x[i], magic_square)):\n            return '-1'\n    \n    # check if the sum of each diagonal is equal to the sum of the other diagonal\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[n-1], magic_square)):\n        return '-1'\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[0], magic_square)):\n        return '-1'\n    \n    # check if the sum of each row is equal to the sum of each column\n    for i in range(n):\n        if sum(magic_square[i])!= sum(map(lambda x: x[i], magic_square)):\n            return '-1'\n    \n    # check if the sum of each diagonal is equal to the sum of the other diagonal\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[n-1], magic_square)):\n        return '-1'\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[0], magic_square)):\n        return '-1'\n    \n    # check if the sum of each row is equal to the sum of each column\n    for i in range(n):\n        if sum(magic_square[i])!= sum(map(lambda x: x[i], magic_square)):\n            return '-1'\n    \n    # check if the sum of each diagonal is equal to the sum of the other diagonal\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[n-1], magic_square)):\n        return '-1'\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[0], magic_square)):\n        return '-1'\n    \n    # check if the sum of each row is equal to the sum of each column\n    for i in range(n):\n        if sum(magic_square[i])!= sum(map(lambda x: x[i], magic_square)):\n            return '-1'\n    \n    # check if the sum of each diagonal is equal to the sum of the other diagonal\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[n-1], magic_square)):\n        return '-1'\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[0], magic_square)):\n        return '-1'\n    \n    # check if the sum of each row is equal to the sum of each column\n    for i in range(n):\n        if sum(magic_square[i])!= sum(map(lambda x: x[i], magic_square)):\n            return '-1'\n    \n    # check if the sum of each diagonal is equal to the sum of the other diagonal\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[n-1], magic_square)):\n        return '-1'\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[0], magic_square)):\n        return '-1'\n    \n    # check if the sum of each row is equal to the sum of each column\n    for i in range(n):\n        if sum(magic_square[i])!= sum(map(lambda x: x[i], magic_square)):\n            return '-1'\n    \n    # check if the sum of each diagonal is equal to the sum of the other diagonal\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[n-1], magic_square)):\n        return '-1'\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[0], magic_square)):\n        return '-1'\n    \n    # check if the sum of each row is equal to the sum of each column\n    for i in range(n):\n        if sum(magic_square[i])!= sum(map(lambda x: x[i], magic_square)):\n            return '-1'\n    \n    # check if the sum of each diagonal is equal to the sum of the other diagonal\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[n-1], magic_square)):\n        return '-1'\n    if sum(magic_square[0][0:n])!= sum(map(lambda x: x[0], magic_square)):\n        return '-1'\n    \n    # check if the sum of each row is equal to the sum of each column\n    for i in range(n):\n        if sum(magic_square[i])!= sum(map(lambda x: x[i], magic_square)):\n            return '-1'\n    \n    # check if the sum of each diagonal is equal to the sum of the other diagonal\n    if sum(magic_square[0][0:n])!= sum(map"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 0\n    for i in range(n):\n        k = max(k, a[i] + m)\n    return str(k) +'' + str(k + m)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    fav_ingredients = []\n    for _ in range(n):\n        fav_ingredients.append(list(map(int, stdin.split('\\n')[_].split(' '))))\n    pizzas = []\n    for _ in range(m):\n        pizzas.append(list(map(int, stdin.split('\\n')[_].split(' '))))\n    pizzas.sort(key=lambda x: x[0])\n    pizzas.sort(key=lambda x: x[1])\n    pizzas.sort(key=lambda x: x[2])\n    pizzas.sort(key=lambda x: x[3])\n    pizzas.sort(key=lambda x: x[4])\n    pizzas.sort(key=lambda x: x[5])\n    pizzas.sort(key=lambda x: x[6])\n    pizzas.sort(key=lambda x: x[7])\n    pizzas.sort(key=lambda x: x[8])\n    pizzas.sort(key=lambda x: x[9])\n    pizzas.sort(key=lambda x: x[10])\n    pizzas.sort(key=lambda x: x[11])\n    pizzas.sort(key=lambda x: x[12])\n    pizzas.sort(key=lambda x: x[13])\n    pizzas.sort(key=lambda x: x[14])\n    pizzas.sort(key=lambda x: x[15])\n    pizzas.sort(key=lambda x: x[16])\n    pizzas.sort(key=lambda x: x[17])\n    pizzas.sort(key=lambda x: x[18])\n    pizzas.sort(key=lambda x: x[19])\n    pizzas.sort(key=lambda x: x[20])\n    pizzas.sort(key=lambda x: x[21])\n    pizzas.sort(key=lambda x: x[22])\n    pizzas.sort(key=lambda x: x[23])\n    pizzas.sort(key=lambda x: x[24])\n    pizzas.sort(key=lambda x: x[25])\n    pizzas.sort(key=lambda x: x[26])\n    pizzas.sort(key=lambda x: x[27])\n    pizzas.sort(key=lambda x: x[28])\n    pizzas.sort(key=lambda x: x[29])\n    pizzas.sort(key=lambda x: x[30])\n    pizzas.sort(key=lambda x: x[31])\n    pizzas.sort(key=lambda x: x[32])\n    pizzas.sort(key=lambda x: x[33])\n    pizzas.sort(key=lambda x: x[34])\n    pizzas.sort(key=lambda x: x[35])\n    pizzas.sort(key=lambda x: x[36])\n    pizzas.sort(key=lambda x: x[37])\n    pizzas.sort(key=lambda x: x[38])\n    pizzas.sort(key=lambda x: x[39])\n    pizzas.sort(key=lambda x: x[40])\n    pizzas.sort(key=lambda x: x[41])\n    pizzas.sort(key=lambda x: x[42])\n    pizzas.sort(key=lambda x: x[43])\n    pizzas.sort(key=lambda x: x[44])\n    pizzas.sort(key=lambda x: x[45])\n    pizzas.sort(key=lambda x: x[46])\n    pizzas.sort(key=lambda x: x[47])\n    pizzas.sort(key=lambda x: x[48])\n    pizzas.sort(key=lambda x: x[49])\n    pizzas.sort(key=lambda x: x[50])\n    pizzas.sort(key=lambda x: x[51])\n    pizzas.sort(key=lambda x: x[52])\n    pizzas.sort(key=lambda x: x[53])\n    pizzas.sort(key=lambda x: x[54])\n    pizzas.sort(key=lambda x: x[55])\n    pizzas.sort(key=lambda x: x[56])\n    pizzas.sort(key=lambda x: x[57])\n    pizzas.sort(key=lambda x: x[58])\n    pizzas.sort(key=lambda x: x[59])\n    pizzas.sort(key=lambda x: x[60])\n    pizzas.sort(key=lambda x: x[61])\n    pizzas.sort(key=lambda x: x[62])\n    pizzas.sort(key=lambda x: x[63])\n    pizzas.sort(key=lambda"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    if m == 0 or s == 0:\n        return '-1 -1'\n    if m == 1:\n        return str(s)\n    if s == 1:\n        return '1' + '9' * (m - 1)\n    if s == m:\n        return '9' * m\n    if s > m:\n        return '-1 -1'\n    if s < m:\n        return '9' * m\n    return '9' * m\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    return sum(sum(i) for i in range(l, r + 1) if len(set(str(i))) <= k) % 998244353\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if k == 1:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 1:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 2:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 3:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 4:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 5:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 6:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 7:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 8:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 9:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 10:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 11:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 12:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 13:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 14:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 15:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 16:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 17:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 18:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 19:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 20:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 21:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 22:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 23:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 24:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 25:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 26:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 27:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 28:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 29:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 30:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 31:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 32:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 33:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 34:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 35:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 36:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 37:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 38:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 39:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 40:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 41:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 42:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 43:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 44:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 45:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 46:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 47:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 48:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 49:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 50:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 51:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 52:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 53:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 54:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 55:\n        return \"YES\" if n % 2 == 0 else \"NO\"\n    if k == n - 56:\n        return \"YES\" "
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0 0 0 0'"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the minimum possible value of E\n    pass"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - (int(stdin) % 1))"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_dict = {}\n    t_dict = {}\n    for i in range(len(s)):\n        if s[i] not in s_dict:\n            s_dict[s[i]] = 1\n        else:\n            s_dict[s[i]] += 1\n        if t[i] not in t_dict:\n            t_dict[t[i]] = 1\n        else:\n            t_dict[t[i]] += 1\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[1])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[1])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted(s_dict.items(), key=lambda item: item[0])}\n    t_dict = {k: v for k, v in sorted(t_dict.items(), key=lambda item: item[0])}\n    s_dict = {k: v for k, v in sorted("
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first, last = stdin.split()\n    return min(first[0] + last[0], last[0] + first[0])\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n[[][]][]\")\n    +-        -++- -+\n    |+- -++- -+||   |\n    ||   ||   |||   |\n    |+- -++- -+||   |\n    +-        -++- -+\n    >>> solution(\"6\\n[[[]]]\")\n    +-     -+\n    |+-   -+|\n    ||+- -+||\n    |||   |||\n    ||+- -+||\n    |+-   -+|\n    +-     -+\n    >>> solution(\"6\\n[[][]]\")\n    +-        -++- -+\n    |+- -++- -+||   |\n    ||   ||   |||   |\n    |+- -++- -+||   |\n    +-        -++- -+\n    >>> solution(\"2\\n[]\")\n    +- -+\n    |   |\n    +- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]\")\n    +- -++- -+\n    |   ||   |\n    +- -++- -+\n    >>> solution(\"4\\n[][]"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a = a[::-1]\n    b = b[::-1]\n    a = int(a, 2)\n    b = int(b, 2)\n    if a > b:\n        return '>'\n    elif a < b:\n        return '<'\n    else:\n        return '='\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gems = {\n        \"purple\": 0,\n        \"green\": 0,\n        \"blue\": 0,\n        \"orange\": 0,\n        \"red\": 0,\n        \"yellow\": 0,\n    }\n    for line in stdin.splitlines():\n        gems[line] += 1\n    return \" \".join(\n        sorted(\n            [\n                \"Power\",\n                \"Time\",\n                \"Space\",\n                \"Soul\",\n                \"Reality\",\n                \"Mind\",\n            ],\n            key=lambda x: gems[x],\n            reverse=True,\n        )\n    )\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return \"Final!\"\n    return str(n - (a + b) + 1)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3 2 1\\n0 1 1 1\\n\")\n    2\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    p = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    b = [int(i) for i in stdin.split(\"\\n\")[2].split()]\n    return sum(b) - sum(p)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = [int(x) for x in stdin.split()]\n    return str(max(0, v_2 * t - v_1 * t + d * (t - 1) * (v_2 - v_1)))"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 4 2\n   ... 10 4\n   ... 2 6''')\n    10\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    weights = list(map(int, stdin.split('\\n')[2:2 + n]))\n    lengths = list(map(int, stdin.split('\\n')[2 + n:]))\n    capacity = list(map(int, stdin.split('\\n')[2 + n:]))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if lengths[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - lengths[i - 1]] + weights[i - 1])\n    for i in range(m, 0, -1):\n        if dp[n][i] <= capacity[i - 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(str(factorial(a) / factorial(b))[-1]))\n\n\ndef"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    lily = stdin.split()\n    if lily[0] == '0' and lily[-1] == '1':\n        if n == 1:\n            return 0\n        else:\n            return -1\n    else:\n        if n == 1:\n            return -1\n        else:\n            return n - 1"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 10 ** 3):\n        if n * m + 1 not in primes:\n            return str(m)"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 12345 == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(k, n - k)) +'' + str(max(k, n - k))"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 0\n    elif a == b:\n        return 1\n    else:\n        return 1 + solution(str(a * 3) + \" \" + str(b * 2))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x)"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    months = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    n = int(stdin)\n    if n == 1:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 2:\n        return \"YES\" if months[0] == int(stdin) else \"NO\"\n    if n == 3:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 4:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 5:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 6:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 7:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 8:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 9:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 10:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 11:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 12:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 13:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 14:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 15:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 16:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 17:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 18:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 19:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 20:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 21:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 22:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 23:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    if n == 24:\n        return \"YES\" if days[0] == int(stdin) else \"NO\"\n    return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n % 2 == 0:\n        return \"NO\"\n    k = 1\n    while k * (k + 1) < 2 * n:\n        k += 1\n    if k * (k + 1) == 2 * n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 5 7\n   ... 3 3 4 1\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a, b = map(int, stdin.split('\\n')[1].split())\n    h = list(map(int, stdin.split('\\n')[2].split()))\n    h.append(0)\n    h.insert(0, 0)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += min(h[i] - h[i - 1], h[i - 1] - h[i])\n    return ans if ans < b else -1\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n * m / k == int(n * m / k):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    elif n % k == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    if a[0] == a[1]:\n        return \"chest\"\n    elif a[0] == a[2]:\n        return \"back\"\n    else:\n        return \"biceps\""
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4 4\")\n    2\n    >>> solution(\"5 4 5 5\")\n    0\n    >>> solution(\"4 5 3 5\")\n    1\n    \"\"\"\n    grades = [int(x) for x in stdin.split()]\n    grades.sort()\n    grades.reverse()\n    grades = grades[:grades.index(5)]\n    return len(grades)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    if u == 0:\n        return '0'\n    if v == 0:\n        return '-1'\n    if u == v:\n        return '0'\n    if u > v:\n        return '-1'\n    if u < v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v:\n        return '0'\n    if u == v"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if x1 + x == x2 and y1 + y == y2:\n        return \"YES\"\n    elif x1 - x == x2 and y1 - y == y2:\n        return \"YES\"\n    elif x1 - x == x2 and y1 + y == y2:\n        return \"YES\"\n    elif x1 + x == x2 and y1 - y == y2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    return str(max(a * e + b * f, a * f + b * e))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    return str(len([n for n in range(1, x) if (n * a) % p == b % p]))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return str(max(k_2 * 32 + k_3 * 256, k_5 * 5 * 256 + k_6 * 6 * 32))\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(x) for x in stdin.split()]\n    return str(n * n - c)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return max(a ^ b for a in range(l, r + 1) for b in range(l, r + 1))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(0, k - n * (n + 1) // 2))\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = [int(i) for i in stdin.split()]\n    if t1 + t2 + t3 < t1 * (x - y) + t2 * (y - z) + t3 * (z - x):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(range(1, n + 1), key=lambda a: abs(m - a)))\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count = 0\n        if count >= 2:\n            break\n    return count"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    if k > arr[-1]:\n        return -1\n    if k == arr[-1]:\n        return n\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] + arr[j] == k:\n            return n - j\n        elif arr[i] + arr[j] > k:\n            j -= 1\n        else:\n            i += 1\n    return -1\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    b[0] = k\n    for i in range(1, n):\n        b[i] = min(b[i - 1] + a[i - 1], k)\n    print(b[-1])\n    print(*b)\n    return ''"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(stdin.lower())) == 26 else \"NO\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split(':')\n    hours = int(time[0])\n    minutes = int(time[1])\n    minutes += a\n    if minutes >= 60:\n        hours += minutes // 60\n        minutes = minutes % 60\n    if hours >= 24:\n        hours = hours % 24\n    return f'{hours:02d}:{minutes:02d}'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                for k in range(m):\n                    if a[i][k] == 1:\n                        a[i][k] = 0\n                break\n    for i in range(n):\n        if a[i].count(1) == m:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n6 4\")\n    0\n    >>> solution(\"1 4\\n2 3\")\n    -1\n    >>> solution(\"3 1\\n4 4\")\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort()\n    for i in range(n - 1):\n        if points[i][0] * points[i + 1][1] < points[i + 1][0] * points[i][1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(math.gcd(math.factorial(a), math.factorial(b)))\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(2, n):\n        for b in range(a + 1, n):\n            if a - b == n:\n                return str(a) + \" \" + str(b)"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3 10\n   ... 1 2 20\n   ... 2 3 30\n   ... 1 3 45\n   ... ''')\n    35\n    \"\"\"\n    n, m, p = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {i: [] for i in range(1, n + 1)}\n    for a, b, c in edges:\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    visited = set()\n    queue = deque([(1, 0)])\n    while queue:\n        node, cost = queue.popleft()\n        if node == n:\n            return cost\n        if node in visited:\n            continue\n        visited.add(node)\n        for neighbor, coin in graph[node]:\n            queue.append((neighbor, cost + coin))\n    return -1\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... ba 3\n   ... abc 4\n   ... cbaa 5\n   ... ''')\n    7\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    costs = []\n    for i in range(1, n + 1):\n        costs.append(list(map(int, stdin.split('\\n')[i].split())))\n    costs.sort(key=lambda x: x[1])\n    cost = 0\n    for i in range(n):\n        cost += costs[i][1] * (i + 1)\n        if cost > costs[i][0]:\n            return -1\n    return cost\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(sum(i ^ j for i, j in zip(range(1, n + 1), range(k + 1, n + 1))) for k in range(1, n + 1)))\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]))\n\"\"\"\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"nineteen\")"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    if y % p == 0:\n        return -1\n    return y // p\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append(0)\n    houses.append"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    a_set = set(a)\n    b_set = set(b)\n    if len(a_set) > len(b_set):\n        a_set, b_set = b_set, a_set\n    a_set_diff_b_set = a_set.difference(b_set)\n    if len(a_set_diff_b_set) == 0:\n        return -1\n    else:\n        return len(a_set_diff_b_set)\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a % 2 == 0:\n        a = a + 1\n    if c % 2 == 0:\n        c = c + 1\n    if a > c:\n        return -1\n    return b + (a - c) * d\n\n\ndef"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n // 3\n    b = a\n    c = n - a * 3\n    if c == 0:\n        return str(a) + \" \" + str(b) + \" \" + str(c)\n    elif c == 1:\n        return str(a) + \" \" + str(b) + \" \" + str(c)\n    else:\n        return str(a) + \" \" + str(b) + \" \" + str(c)\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = [int(x) for x in stdin.split()]\n    return str(sum(\n        [\n            sum(\n                [\n                    sum(\n                        [\n                            sum(\n                                [\n                                    sum(\n                                        [\n                                            sum(\n                                                [\n                                                    sum(\n                                                        [\n                                                            sum(\n                                                                [\n                                                                    sum(\n                                                                        [\n                                                                            sum(\n                                                                                [\n                                                                                    sum(\n                                                                                        [\n                                                                                            sum(\n                                                                                                [\n                                                                                                    sum(\n                                                                                                        [\n                                                                                                            sum(\n                                                                                                                [\n                                                                                                                    sum(\n                                                                                                                        [\n                                                                                                                            sum(\n                                                                                                                                [\n                                                                                                                                    sum(\n                                                                                                                                        [\n                                                                                                                                            sum(\n                                                                                                                                                [\n                                                                                                                                                    sum(\n                                                                                                                                                         [\n                                                                                                                                                            sum(\n                                                                                                                                                                [\n                                                                                                                                                                     sum(\n                                                                                                                                                                        [\n                                                                                                                                                                           sum(\n                                                                                                                                                                                  [\n                                                                                                                                                                                    sum(\n                                                                                                                                                                                      [\n                                                                                                                                                                                         sum(\n                                                                                                                                                                                                    [\n                                                                                                                                                                                                     c\n                                                                                                                                                                                                     for c in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     for b\n                                                                                                                                                                                                     in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     for a\n                                                                                                                                                                                                     in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     for d\n                                                                                                                                                                                                     in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     for c\n                                                                                                                                                                                                     in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     for b\n                                                                                                                                                                                                     in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     for a\n                                                                                                                                                                                                     in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     for d\n                                                                                                                                                                                                     in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     for c\n                                                                                                                                                                                                     in range(\n                                                                                                                                                                                                     n\n                                                                                                                                                                                                     )\n                                                                                                                                                                                                     ]\n                                                                                                                                                                                                     )\n                                                                                                                                                                                             "
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n    if d1 == d2:\n        return w\n    else:\n        return w - u1 + u2\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, *c = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    c.sort()\n    for i in range(len(c)):\n        if c[i] < x:\n            continue\n        if i + 1 < len(c) and c[i + 1] - c[i] < y:\n            continue\n        return str(i + 1)\n    return '0'\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = [int(x) for x in stdin.split('\\n')]\n    x = n\n    cost = 0\n    while x > 1:\n        if x % k == 0:\n            x //= k\n            cost += b\n        else:\n            x -= 1\n            cost += a\n    return cost"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n            count += 1\n        else:\n            n = n * 3 + 1\n            count += 1\n    return str(int(n)) + \" \" + str(count)\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    hands = stdin.split()[1:]\n    score = 0\n    for i in range(N):\n        if i < K:\n            score += hands[i]\n        else:\n            score += hands[i] if hands[i]!= hands[i - K] else 0\n    return score"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a + b, a + c, b + c))\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(x) for x in stdin.split()]\n    marks = [int(x) for x in stdin.split()][k:]\n    marks.sort()\n    if sum(marks) > x:\n        return '-1'\n    elif sum(marks) < x:\n        return''.join([str(x) for x in marks])\n    else:\n        return''.join([str(x) for x in marks[:n - k]])\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"n\") == 0 else \"NO\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 1\n   ... ''')\n    '4'\n    >>> solution('''7 21\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 1 5\n   ... 1 6\n   ... 1 7\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... 2 6\n   ... 2 7\n   ... 3 4\n   ... 3 5\n   ... 3 6\n   ... 3 7\n   ... 4 5\n   ... 4 6\n   ... 4 7\n   ... 5 6\n   ... 5 7\n   ... 6 7\n   ... ''')\n    '16'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    return str(max(\n        sum(\n            max(\n                len(set(graph[a]) & set(graph[b])) for b in graph[a]\n            ) for a in range(n)\n        ) for _ in range(n)\n    ))\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    auction = list(map(int, stdin.split()))\n    prices.sort()\n    auction.sort()\n    ans = 0\n    for i in range(m):\n        ans += prices[i]\n    for i in range(n - m):\n        ans += prices[i]\n    return ans"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    return str(int(sum([max(0.3 * max(0, (1 - m[i] / 250) * max(0, (1 - m[i] / 250) * -50 + 500)), (1 - m[i] / 250) * max(0, (1 - m[i] / 250) * -50 + 500)) for i in range(5)]))) + 100 * h[0] - 50 * h[1])\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = [int(x) for x in stdin.split()]\n    return str(sum(1 for i in range(n) for j in range(m) if l <= max(i, j) <= r))\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    matrix1 = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n    matrix2 = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n    if n == 1 or m == 1:\n        return 'Impossible'\n    for i in range(n):\n        if matrix1[i][0] > matrix1[i][1]:\n            return 'Impossible'\n        if matrix2[i][0] > matrix2[i][1]:\n            return 'Impossible'\n    for j in range(m):\n        if matrix1[0][j] > matrix1[1][j]:\n            return 'Impossible'\n        if matrix2[0][j] > matrix2[1][j]:\n            return 'Impossible'\n    return 'Possible'\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (n - i)\n    return ans"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] < k:\n            ans += 1\n            k -= a[i]\n        else:\n            break\n    return ans\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, min_1, max_1, min_2, max_2, min_3, max_3 = map(int, stdin.split())\n    return str(min(min_1, min_2, min_3)) +'' + str(max(max_1, max_2, max_3))"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"UP\" if a[0] < 7 else \"DOWN\"\n    for i in range(n - 1):\n        if a[i] < 7:\n            if a[i + 1] > a[i]:\n                return \"UP\"\n            else:\n                return \"DOWN\"\n    return \"DOWN\" if a[-1] < 7 else \"UP\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(s)):\n        if s[i] in vowels and t[i] in vowels:\n            continue\n        elif s[i] in vowels and t[i] in vowels:\n            return 'No'\n        elif s[i] in vowels and t[i] not in vowels:\n            return 'No'\n        elif s[i] not in vowels and t[i] in vowels:\n            return 'No'\n        elif s[i] not in vowels and t[i] not in vowels:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    black_pawns = 0\n    white_pawns = 0\n    for row in board:\n        for pawn in row:\n            if pawn == 'B':\n                black_pawns += 1\n            elif pawn == 'W':\n                white_pawns += 1\n    if black_pawns > white_pawns:\n        return 'A'\n    elif white_pawns > black_pawns:\n        return 'B'\n    return 'Draw'"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0] + a[i - 1]\n    for j in range(1, m + 1):\n        dp[0][j] = dp[0][j - 1] + b[j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + a[i - 1] + b[j - 1]\n    return str(max(dp[n][m], dp[n][m]))\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"Danil\") + stdin.count(\"Olya\") + stdin.count(\"Slava\") + stdin.count(\"Ann\") + stdin.count(\"Nikita\") == 0 else \"NO\"\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if k > b - a + 1:\n        return -1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n    if k == 3:\n        return 3\n    if k == 4:\n        return 4\n    if k == 5:\n        return 5\n    if k == 6:\n        return 6\n    if k == 7:\n        return 7\n    if k == 8:\n        return 8\n    if k == 9:\n        return 9\n    if k == 10:\n        return 10\n    if k == 11:\n        return 11\n    if k == 12:\n        return 12\n    if k == 13:\n        return 13\n    if k == 14:\n        return 14\n    if k == 15:\n        return 15\n    if k == 16:\n        return 16\n    if k == 17:\n        return 17\n    if k == 18:\n        return 18\n    if k == 19:\n        return 19\n    if k == 20:\n        return 20\n    if k == 21:\n        return 21\n    if k == 22:\n        return 22\n    if k == 23:\n        return 23\n    if k == 24:\n        return 24\n    if k == 25:\n        return 25\n    if k == 26:\n        return 26\n    if k == 27:\n        return 27\n    if k == 28:\n        return 28\n    if k == 29:\n        return 29\n    if k == 30:\n        return 30\n    if k == 31:\n        return 31\n    if k == 32:\n        return 32\n    if k == 33:\n        return 33\n    if k == 34:\n        return 34\n    if k == 35:\n        return 35\n    if k == 36:\n        return 36\n    if k == 37:\n        return 37\n    if k == 38:\n        return 38\n    if k == 39:\n        return 39\n    if k == 40:\n        return 40\n    if k == 41:\n        return 41\n    if k == 42:\n        return 42\n    if k == 43:\n        return 43\n    if k == 44:\n        return 44\n    if k == 45:\n        return 45\n    if k == 46:\n        return 46\n    if k == 47:\n        return 47\n    if k == 48:\n        return 48\n    if k == 49:\n        return 49\n    if k == 50:\n        return 50\n    if k == 51:\n        return 51\n    if k == 52:\n        return 52\n    if k == 53:\n        return 53\n    if k == 54:\n        return 54\n    if k == 55:\n        return 55\n    if k == 56:\n        return 56\n    if k == 57:\n        return 57\n    if k == 58:\n        return 58\n    if k == 59:\n        return 59\n    if k == 60:\n        return 60\n    if k == 61:\n        return 61\n    if k == 62:\n        return 62\n    if k == 63:\n        return 63\n    if k == 64:\n        return 64\n    if k == 65:\n        return 65\n    if k == 66:\n        return 66\n    if k == 67:\n        return 67\n    if k == 68:\n        return 68\n    if k == 69:\n        return 69\n    if k == 70:\n        return 70\n    if k == 71:\n        return 71\n    if k == 72:\n        return 72\n    if k == 73:\n        return 73\n    if k == 74:\n        return 74\n    if k == 75:\n        return 75\n    if k == 76:\n        return 76\n    if k == 77:\n        return 77\n    if k == 78:\n        return 78\n    if k == 79:\n        return 79\n    if k == 80:\n        return 80\n    if k == 81:\n        return 81\n    if k == 82:\n        return 82\n    if k == 83:\n        return 83\n    if k == 84:\n        return 84\n    if k == 85:\n        return 85\n    if k == 86:\n        return 86\n    if k == 87:\n        return 87\n    if k == 88:\n        return 88\n    if k == 89:\n        return 89\n    if k == 90:\n        return 90\n    if k == 91:\n        return 91\n    if k == 92:\n        return 92\n    if k == 93:\n        return 93\n    if k == 94:\n        return 94\n    if k == 95:\n        return 95\n    if k == 96:\n        return 96\n    if k == 97:\n        return 97\n    if k == 98:\n        return 98\n    if k == 99:\n        return 99\n    if k == 100:\n        return 100\n    if k == 101:\n        return 101\n    if k == 102:\n        return 102\n    if k == 103:\n        return 103\n    if k == 104:\n        return 104\n    if k == 105:\n        return 105\n    if k == 106:\n        return 106\n    if k == 107:\n        return 107\n    if k == 108:\n        return 108\n    if k == 109:\n        return 109\n    if k == 110:\n        return 110\n    if k == 111:\n        return 111\n    if k == 112:\n        return 112\n    if k == 113:\n        return 113\n    if k == 114:\n        return 114\n    if k == 115:\n        return 115\n    if k == 116:\n        return 116\n    if k == 117:\n        return 117\n    if k == 118:\n        return 118\n    if k == 119:\n        return 119\n    if k == 120:\n        return 120\n    if k == 121:\n        return 121\n    if k == 122:\n        return 122\n    if k == 123:\n        return 123\n    if k == 124:\n        return 124\n    if k == 125:\n        return 125\n    if k == 126:\n        return 126\n    if k == 127:\n        return 127\n    if k == 128:\n        return 128\n    if k == 129:\n        return 129\n    if k == 130:\n        return 130\n    if k == 131:\n        return 131\n    if k == 132:\n        return 132\n    if k == 133:\n        return 133\n    if k == 134:\n        return 134\n    if k == 135:\n        return 135\n    if k == 136:\n        return 136\n    if k == 137:\n        return 137\n    if k == 138:\n        return 138\n    if k == 139:\n        return 139\n    if k == 140:\n        return 140\n    if k == 141:\n        return 141\n    if k == 142:\n        return 142\n    if k == 143:\n        return 143\n    if k == 144:\n        return 144\n    if k == 145:\n        return 145\n    if k == 146:\n        return 146\n    if k == 147:\n        return 147\n    if k == 148:\n        return 148\n    if k == 149:\n        return 149\n    if k == 150:\n        return 150\n    if k == 151:\n        return 151\n    if k == 152:\n        return 152\n    if k == 153:\n        return 153\n    if k == 154:\n        return 154\n    if k == 155:\n        return 155\n    if k == 156:\n        return 156\n    if k == 157:\n        return 157\n    if k == 158:\n        return 158\n    if k == 159:\n        return 159\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    if a * h < w:\n        return '-1'\n    return str(w / (a * h))\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pages = [int(x) for x in stdin.readline().split()]\n    k = int(stdin.readline())\n    pages.append(k)\n    pages.sort()\n    res = 0\n    for i in range(1, n + 1):\n        if pages[i] - pages[i - 1] > 1:\n            res += pages[i] - pages[i - 1] - 1\n    return res"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    for i in range(len(banner)):\n        if banner[i:i+7] == 'CODEFORCES':\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    for i in range(n):\n        if c[i] > a:\n            return str(c[i - 1])\n    return '-1'"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    encoding = list(map(int, stdin.split()))\n    if x == sum(encoding):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split(' ')]\n    dp = [0] * (s + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(s, 0, -1):\n            if j - i >= 0:\n                dp[j] += dp[j - i]\n    return str(dp[s])"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    white_pieces = 0\n    black_pieces = 0\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'Q':\n                white_pieces += 9\n            elif board[i][j] == 'R':\n                white_pieces += 5\n            elif board[i][j] == 'B':\n                white_pieces += 3\n            elif board[i][j] == 'N':\n                white_pieces += 3\n            elif board[i][j] == 'P':\n                white_pieces += 1\n            elif board[i][j] == 'K':\n                white_pieces += 0\n            elif board[i][j] == 'q':\n                black_pieces += 9\n            elif board[i][j] == 'r':\n                black_pieces += 5\n            elif board[i][j] == 'b':\n                black_pieces += 3\n            elif board[i][j] == 'n':\n                black_pieces += 3\n            elif board[i][j] == 'p':\n                black_pieces += 1\n            elif board[i][j] == 'k':\n                black_pieces += 0\n    if white_pieces > black_pieces:\n        return 'White'\n    elif white_pieces < black_pieces:\n        return 'Black'\n    else:\n        return 'Draw'"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    s = stdin.split('\\n')[1]\n    s = s[:n]\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('1', '1')\n    s = s.replace('0', '0')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    s = s.replace('1', '0')"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''11\n   ... -1 2\n   ... ''')\n    '3\n    >>> solution('''11\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... ''')\n    '7 4\n    >>> solution('''11\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -1 2\n   ... 7 4\n   ... 2 10\n   ... -"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 1:\n        return 8\n    elif m == 8:\n        return 54\n    else:\n        return -1\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split('\\n')[0].split())\n    x_2, y_2, r_2 = map(int, stdin.split('\\n')[1].split())\n    return str(math.sqrt(r_1 ** 2 + r_2 ** 2 - 2 * r_1 * r_2 * math.cos(math.pi / 4)))\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1\n   ... 3 1 3''')\n    4\n    >>> solution('''3\n   ... 1 1\n   ... 3 1 3''')\n    4\n    >>> solution('''3\n   ... 1 1\n   ... 3 1 3''')\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    roads = [int(x) for x in stdin.readline().split()]\n    citizens = [int(x) for x in stdin.readline().split()]\n    citizens.sort()\n    roads.sort()\n    caught = 0\n    for i in range(n):\n        caught += citizens[i]\n        if roads[i] == i + 1:\n            caught -= citizens[i]\n    return caught\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    return str(len(set(s + t) - set(s) - set(t)))"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 4 5\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 2 4\n   ... 1 7\n   ... 7 6\n   ... ''')\n    '93'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    banks = [int(x) for x in stdin.split('\\n')[1].split()]\n    dp = [0] * n\n    for u, v in [x.split() for x in stdin.split('\\n')[2:]]:\n        u, v = int(u) - 1, int(v) - 1\n        dp[u] += 1\n        dp[v] += 1\n    return str(max(dp))\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n // m)"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    return str(k // r)\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    puzzle = [list(stdin.split()[i]) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == '.':\n                puzzle[i][j] = 'X'\n                break\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                puzzle[i][j] = '.'\n                break\n    for i in range(n):\n        for j"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 100:\n        return \"NO\"\n    return \"YES\" if k == 2 else \"NO\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    n, m, q = map(int, stdin.split())\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    l = [map(int, stdin.split()[2:]) for _ in range(q)]\n    ans = []\n    for i in range(q):\n        l_i, r_i = l[i]\n        ans.append(s[l_i:r_i].count(t))\n    return \"\\n\".join(map(str, ans))"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return n * k * (k - 1) // 2 % 1000000007"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    brackets = stdin[:n]\n    ops = stdin[n:]\n    brackets = list(brackets)\n    ops = list(ops)\n    cursor = p - 1\n    while ops:\n        op = ops.pop(0)\n        if op == 'L':\n            cursor -= 1\n            if cursor < 0:\n                cursor = n - 1\n        elif op == 'R':\n            cursor += 1\n            if cursor > n - 1:\n                cursor = 0\n        elif op == 'D':\n            if cursor == 0:\n                brackets = brackets[1:]\n            elif cursor == n - 1:\n                brackets = brackets[:-1]\n            else:\n                brackets = brackets[:cursor - 1] + brackets[cursor + 1:]\n                cursor -= 1\n    return ''.join(brackets)\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    answers = []\n    for _ in range(n):\n        sign, x, answer = stdin.readline().split()\n        x = int(x)\n        if sign == '>':\n            answers.append(x)\n        elif sign == '<':\n            answers.append(-x)\n        elif sign == '>=':\n            answers.append(x + 1)\n        elif sign == '<=':\n            answers.append(-x - 1)\n    answers.sort()\n    for answer in answers:\n        if answer >= -2 ** 31 and answer <= 2 ** 31 - 1:\n            return str(answer)\n    return 'Impossible'\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a + b - 1"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    for i in range(n - k + 1):\n        if s[i] == \"YES\":\n            print(f\"{chr(i + 65)}{chr(i + 65 + k - 1)}\", end=\" \")\n    return \"\"\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0 and b % 2 == 0:\n        return 0\n    elif a % 3 == 0 and b % 3 == 0:\n        return 1\n    elif a % 5 == 0 and b % 5 == 0:\n        return 2\n    else:\n        return -1"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    colors = [int(x) for x in stdin.split()]\n    cost = 0\n    for i in range(n):\n        if colors[i] == 0:\n            cost += a\n        elif colors[i] == 1:\n            cost += b\n        else:\n            cost += a\n    if cost % 2 == 0:\n        return cost\n    else:\n        return -1"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 100:\n        return -1\n    \n    def paint(matrix: list, color: str) -> list:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == color:\n                    matrix[i][j] = 'w'\n                else:\n                    matrix[i][j] = 'b'\n        return matrix\n    \n    def check(matrix: list) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n                else:\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n        return True\n    \n    def paint_layer(matrix: list, color: str) -> list:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    matrix[i][j] = color\n                else:\n                    matrix[i][j] = color\n        return matrix\n    \n    def check_layer(matrix: list) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n                else:\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n        return True\n    \n    def paint_all(matrix: list, color: str) -> list:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    matrix[i][j] = color\n                else:\n                    matrix[i][j] = color\n        return matrix\n    \n    def check_all(matrix: list) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n                else:\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n        return True\n    \n    def paint_all_layer(matrix: list, color: str) -> list:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    matrix[i][j] = color\n                else:\n                    matrix[i][j] = color\n        return matrix\n    \n    def check_all_layer(matrix: list) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n                else:\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n        return True\n    \n    def paint_all_layer_2(matrix: list, color: str) -> list:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    matrix[i][j] = color\n                else:\n                    matrix[i][j] = color\n        return matrix\n    \n    def check_all_layer_2(matrix: list) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n                else:\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n        return True\n    \n    def paint_all_layer_3(matrix: list, color: str) -> list:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    matrix[i][j] = color\n                else:\n                    matrix[i][j] = color\n        return matrix\n    \n    def check_all_layer_3(matrix: list) -> bool:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n                else:\n                    if matrix[i][j]!= matrix[i][j+1] and matrix[i][j]!= matrix[i+1][j] and matrix[i][j]!= matrix[i+1][j+1]:\n                        return False\n        return True\n    \n    def paint_all_layer_4(matrix: list, color: str) -> list:\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                if matrix[i][j] == 'w':\n                    matrix[i][j] = color\n                "
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1)"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seating = stdin\n    if n == 2:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" else \"No\"\n    if n == 1:\n        return \"Yes\" if seating[0] == \"0\" else \"No\"\n    if n == 3:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" else \"No\"\n    if n == 4:\n        return \"No\"\n    if n == 5:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" else \"No\"\n    if n == 6:\n        return \"No\"\n    if n == 7:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" else \"No\"\n    if n == 8:\n        return \"No\"\n    if n == 9:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" else \"No\"\n    if n == 10:\n        return \"No\"\n    if n == 11:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" else \"No\"\n    if n == 12:\n        return \"No\"\n    if n == 13:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" else \"No\"\n    if n == 14:\n        return \"No\"\n    if n == 15:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" and seating[8] == \"0\" else \"No\"\n    if n == 16:\n        return \"No\"\n    if n == 17:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" and seating[8] == \"0\" and seating[9] == \"0\" else \"No\"\n    if n == 18:\n        return \"No\"\n    if n == 19:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" and seating[8] == \"0\" and seating[9] == \"0\" and seating[10] == \"0\" else \"No\"\n    if n == 20:\n        return \"No\"\n    if n == 21:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" and seating[8] == \"0\" and seating[9] == \"0\" and seating[10] == \"0\" and seating[11] == \"0\" else \"No\"\n    if n == 22:\n        return \"No\"\n    if n == 23:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" and seating[8] == \"0\" and seating[9] == \"0\" and seating[10] == \"0\" and seating[11] == \"0\" and seating[12] == \"0\" else \"No\"\n    if n == 24:\n        return \"No\"\n    if n == 25:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" and seating[8] == \"0\" and seating[9] == \"0\" and seating[10] == \"0\" and seating[11] == \"0\" and seating[12] == \"0\" and seating[13] == \"0\" else \"No\"\n    if n == 26:\n        return \"No\"\n    if n == 27:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" and seating[8] == \"0\" and seating[9] == \"0\" and seating[10] == \"0\" and seating[11] == \"0\" and seating[12] == \"0\" and seating[13] == \"0\" and seating[14] == \"0\" else \"No\"\n    if n == 28:\n        return \"No\"\n    if n == 29:\n        return \"Yes\" if seating[0] == \"0\" and seating[1] == \"0\" and seating[2] == \"0\" and seating[3] == \"0\" and seating[4] == \"0\" and seating[5] == \"0\" and seating[6] == \"0\" and seating[7] == \"0\" and seating[8] == \"0\" and seating[9] == \"0\" and seating[10] == \"0\" and seating[11] == \"0\" and seating[12] == \"0\" and seating[13] == \"0\" and seating[14] == \"0\" and seating[15] == \"0\" else \"No\"\n    if n == 30:\n        return \"No\"\n    if n == 31:\n        return \"Yes"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(1, n + 1):\n        if a[i - 1] == a[i - 1] + a[i - 1] - a[i - 1]:\n            k = i\n    return str(k)\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sum(sorted(map(int, stdin.split()))[::2]) == sum(sorted(map(int, stdin.split()))[1::2]) else \"NO\"\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(sum(1 for i in range(l, r + 1) if i == 2 ** i * 3 ** i))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return n - k"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(stdin.split())) == 3 else \"NO\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x + y < 2:\n        return \"No\"\n    if x < y:\n        return \"No\"\n    if x == y:\n        return \"Yes\"\n    if x % y == 0:\n        return \"Yes\"\n    return \"No\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    skills.sort()\n    skills.reverse()\n    if k >= n:\n        return sum(skills)\n    else:\n        return sum(skills[:k])"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = set(map(int, stdin.split('\\n')[1].split(' ')))\n    b = set(map(int, stdin.split('\\n')[2].split(' ')))\n    return min(i for i in range(1, 10 ** 9) if (i in a) or (i in b))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k // 5))"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bumpers = stdin.split('\\n')[0]\n    bumpers = list(bumpers)\n    count = 0\n    for i in range(n):\n        if bumpers[i] == '<':\n            count += 1\n        elif bumpers[i] == '>':\n            count -= 1\n        if count < 0:\n            break\n    if count < 0:\n        return 0\n    return count\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l.sort()\n    l.reverse()\n    s = 0\n    for i in range(n):\n        s += l[i] * (i + 1)\n    return s"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [stdin[i] for i in range(n)]\n    for i in range(n):\n        if s[i] == 'a':\n            s[i] = '1'\n        elif s[i] == 'b':\n            s[i] = '2'\n        elif s[i] == 'c':\n            s[i] = '3'\n        elif s[i] == 'd':\n            s[i] = '4'\n        elif s[i] == 'e':\n            s[i] = '5'\n        elif s[i] == 'f':\n            s[i] = '6'\n        elif s[i] == 'g':\n            s[i] = '7'\n        elif s[i] == 'h':\n            s[i] = '8'\n        elif s[i] == 'i':\n            s[i] = '9'\n        elif s[i] == 'j':\n            s[i] = '10'\n    return ''.join(s)"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"AB\") == 1 and stdin.count(\"BA\") == 1 else \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    if a[0] < b[0]:\n        return \"NO\"\n    for i in range(k):\n        if a[i] < b[i]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\")\n    'Yes'\n    >>> solution(\"2 1\\n1 0\\n2 2\\n3 1\")\n    'No'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m - n + 1)\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    r = [int(x) for x in stdin.readline().split()]\n    r.sort()\n    max_count = 0\n    count = 0\n    for i in range(n):\n        if r[i] > 100 * n:\n            break\n        count += 1\n        if count > max_count:\n            max_count = count\n    return max_count"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n    if k == 0:\n        return \"YES\" if s.count(\"?\") == 0 else \"NO\"\n    return \"YES\" if s.count(\"?\") <= k else \"NO\""
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = []\n    for i in range(n):\n        scores.append(stdin.split())\n    scores.sort(key=lambda x: int(x[1]))\n    for i in range(n):\n        if int(scores[i][1]) >= 2400:\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin, 2))\n\"\"\"\n\ndef"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    matrix_mirror = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix_mirror[i][j] = matrix[i][m - j - 1]\n    return str(min(n, m) - 1)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 4 7\n   ... 2 5\n   ... 1 3\n   ... 6 8\n   ... ''')\n    '2'\n    >>> solution('''6\n   ... 4 8\n   ... 1 5\n   ... 4 7\n   ... 2 5\n   ... 1 3\n   ... 6 8\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    orders = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        orders.append((l, r))\n    orders.sort()\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if orders[i][0] >= orders[count][1]:\n            count += 1\n            max_count = max(max_count, count)\n    return str(max_count)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()))\n    formulas = list(map(int, stdin.split()))\n    tables.sort()\n    formulas.sort()\n    if n * k >= sum(tables) + sum(formulas):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    polynomial = [0] * (n + 1)\n    for i in range(n):\n        polynomial[i] = int(stdin[i])\n    polynomial[n] = k\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial[i] == 0:\n            polynomial[i - 1] = 0\n        else:\n            break\n    for i in range(n, 0, -1):\n        if polynomial["
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if p == 0:\n        return str(1) if n == 1 else str(-1)\n    if p == -1:\n        return str(1) if n == 1 else str(2)\n    if p == 1:\n        return str(1) if n == 1 else str(2)\n    if p == 2:\n        return str(1) if n == 1 else str(2)\n    if p == 3:\n        return str(1) if n == 1 else str(2)\n    if p == 4:\n        return str(1) if n == 1 else str(2)\n    if p == 5:\n        return str(1) if n == 1 else str(2)\n    if p == 6:\n        return str(1) if n == 1 else str(2)\n    if p == 7:\n        return str(1) if n == 1 else str(2)\n    if p == 8:\n        return str(1) if n == 1 else str(2)\n    if p == 9:\n        return str(1) if n == 1 else str(2)\n    if p == 10:\n        return str(1) if n == 1 else str(2)\n    if p == 11:\n        return str(1) if n == 1 else str(2)\n    if p == 12:\n        return str(1) if n == 1 else str(2)\n    if p == 13:\n        return str(1) if n == 1 else str(2)\n    if p == 14:\n        return str(1) if n == 1 else str(2)\n    if p == 15:\n        return str(1) if n == 1 else str(2)\n    if p == 16:\n        return str(1) if n == 1 else str(2)\n    if p == 17:\n        return str(1) if n == 1 else str(2)\n    if p == 18:\n        return str(1) if n == 1 else str(2)\n    if p == 19:\n        return str(1) if n == 1 else str(2)\n    if p == 20:\n        return str(1) if n == 1 else str(2)\n    if p == 21:\n        return str(1) if n == 1 else str(2)\n    if p == 22:\n        return str(1) if n == 1 else str(2)\n    if p == 23:\n        return str(1) if n == 1 else str(2)\n    if p == 24:\n        return str(1) if n == 1 else str(2)\n    if p == 25:\n        return str(1) if n == 1 else str(2)\n    if p == 26:\n        return str(1) if n == 1 else str(2)\n    if p == 27:\n        return str(1) if n == 1 else str(2)\n    if p == 28:\n        return str(1) if n == 1 else str(2)\n    if p == 29:\n        return str(1) if n == 1 else str(2)\n    if p == 30:\n        return str(1) if n == 1 else str(2)\n    if p == 31:\n        return str(1) if n == 1 else str(2)\n    if p == 32:\n        return str(1) if n == 1 else str(2)\n    if p == 33:\n        return str(1) if n == 1 else str(2)\n    if p == 34:\n        return str(1) if n == 1 else str(2)\n    if p == 35:\n        return str(1) if n == 1 else str(2)\n    if p == 36:\n        return str(1) if n == 1 else str(2)\n    if p == 37:\n        return str(1) if n == 1 else str(2)\n    if p == 38:\n        return str(1) if n == 1 else str(2)\n    if p == 39:\n        return str(1) if n == 1 else str(2)\n    if p == 40:\n        return str(1) if n == 1 else str(2)\n    if p == 41:\n        return str(1) if n == 1 else str(2)\n    if p == 42:\n        return str(1) if n == 1 else str(2)\n    if p == 43:\n        return str(1) if n == 1 else str(2)\n    if p == 44:\n        return str(1) if n == 1 else str(2)\n    if p == 45:\n        return str(1) if n == 1 else str(2)\n    if p == 46:\n        return str(1) if n == 1 else str(2)\n    if p == 47:\n        return str(1) if n == 1 else str(2)\n    if p == 48:\n        return str(1) if n == 1 else str(2)\n    if p == 49:\n        return str(1) if n == 1 else str(2)\n    if p == 50:\n        return str(1) if n == 1 else str(2)\n    if p == 51:\n        return str(1) if n == 1 else str(2)\n    if p == 52:\n        return str(1) if n == 1 else str(2)\n    if p == 53:\n        return str(1) if n == 1 else str(2)\n    if p == 54:\n        return str(1) if n == 1 else str(2)\n    if p == 55:\n        return str(1) if n == 1 else str(2)\n    if p == 56:\n        return str(1) if n == 1 else str(2)\n    if p == 57:\n        return str(1) if n == 1 else str(2)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    s = s[::-1]\n    s = list(s)\n    for i in range(k):\n        if s[i] == '0':\n            s[i] = '1'\n        else:\n            s[i] = '0'\n    s = s[::-1]\n    s = ''.join(s)\n    s = s[::-1]\n    return s"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    if cnt_1 == 0 or cnt_2 == 0:\n        return 0\n    if cnt_1 == 1:\n        return cnt_2\n    if cnt_2 == 1:\n        return cnt_1\n    if x == y:\n        return cnt_1 + cnt_2\n    if x > y:\n        x, y = y, x\n    if y % x == 0:\n        return cnt_1 + cnt_2\n    if y % x == 1:\n        return cnt_1 + cnt_2 - 1\n    if y % x == 2:\n        return cnt_1 + cnt_2 - 2\n    if y % x == 3:\n        return cnt_1 + cnt_2 - 3\n    if y % x == 4:\n        return cnt_1 + cnt_2 - 4\n    if y % x == 5:\n        return cnt_1 + cnt_2 - 5\n    if y % x == 6:\n        return cnt_1 + cnt_2 - 6\n    if y % x == 7:\n        return cnt_1 + cnt_2 - 7\n    if y % x == 8:\n        return cnt_1 + cnt_2 - 8\n    if y % x == 9:\n        return cnt_1 + cnt_2 - 9\n    if y % x == 10:\n        return cnt_1 + cnt_2 - 10\n    if y % x == 11:\n        return cnt_1 + cnt_2 - 11\n    if y % x == 12:\n        return cnt_1 + cnt_2 - 12\n    if y % x == 13:\n        return cnt_1 + cnt_2 - 13\n    if y % x == 14:\n        return cnt_1 + cnt_2 - 14\n    if y % x == 15:\n        return cnt_1 + cnt_2 - 15\n    if y % x == 16:\n        return cnt_1 + cnt_2 - 16\n    if y % x == 17:\n        return cnt_1 + cnt_2 - 17\n    if y % x == 18:\n        return cnt_1 + cnt_2 - 18\n    if y % x == 19:\n        return cnt_1 + cnt_2 - 19\n    if y % x == 20:\n        return cnt_1 + cnt_2 - 20\n    if y % x == 21:\n        return cnt_1 + cnt_2 - 21\n    if y % x == 22:\n        return cnt_1 + cnt_2 - 22\n    if y % x == 23:\n        return cnt_1 + cnt_2 - 23\n    if y % x == 24:\n        return cnt_1 + cnt_2 - 24\n    if y % x == 25:\n        return cnt_1 + cnt_2 - 25\n    if y % x == 26:\n        return cnt_1 + cnt_2 - 26\n    if y % x == 27:\n        return cnt_1 + cnt_2 - 27\n    if y % x == 28:\n        return cnt_1 + cnt_2 - 28\n    if y % x == 29:\n        return cnt_1 + cnt_2 - 29\n    if y % x == 30:\n        return cnt_1 + cnt_2 - 30\n    if y % x == 31:\n        return cnt_1 + cnt_2 - 31\n    if y % x == 32:\n        return cnt_1 + cnt_2 - 32\n    if y % x == 33:\n        return cnt_1 + cnt_2 - 33\n    if y % x == 34:\n        return cnt_1 + cnt_2 - 34\n    if y % x == 35:\n        return cnt_1 + cnt_2 - 35\n    if y % x == 36:\n        return cnt_1 + cnt_2 - 36\n    if y % x == 37:\n        return cnt_1 + cnt_2 - 37\n    if y % x == 38:\n        return cnt_1 + cnt_2 - 38\n    if y % x == 39:\n        return cnt_1 + cnt_2 - 39\n    if y % x == 40:\n        return cnt_1 + cnt_2 - 40\n    if y % x == 41:\n        return cnt_1 + cnt_2 - 41\n    if y % x == 42:\n        return cnt_1 + cnt_2 - 42\n    if y % x == 43:\n        return cnt_1 + cnt_2 - 43\n    if y % x == 44:\n        return cnt_1 + cnt_2 - 44\n    if y % x == 45:\n        return cnt_1 + cnt_2 - 45\n    if y % x == 46:\n        return cnt_1 + cnt_2 - 46\n    if y % x == 47:\n        return cnt_1 + cnt_2 - 47\n    if y % x == 48:\n        return cnt_1 + cnt_2 - 48\n    if y % x == 49:\n        return cnt_1 + cnt_2 - 49\n    if y % x == 50:\n        return cnt_1 + cnt_2 - 50\n    if y % x == 51:\n        return cnt_1 + cnt_2 - 51\n    if y % x == 52:\n        return cnt_1 + cnt_2 - 52\n    if y % x == 53:\n        return cnt_1 + cnt_2 - 53\n    if y % x == 54:\n        return cnt_1 + cnt_2 - 54\n    if y % x == 55:\n        return cnt_1 + cnt_2 - 55\n    if y % x == 56:\n        return cnt_1 + cnt_2 - 56\n    if y % x == 57:\n        return cnt_1 + cnt_2 - 57\n    if y % x == 58:\n        return cnt_1 + cnt_2 - 58\n    if y % x == 59:\n        return cnt_1 + cnt_2 - 59\n    if y % x == 60:\n        return cnt_1 + cnt_2 - 60\n    if y % x == 61:\n        return cnt_1 + cnt_2 - 61\n    if y % x == 62:\n        return cnt_1 + cnt_2 - 62\n    if y % x == 63:\n        return cnt_"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split()]\n    x, y = sx, sy\n    for _ in range(t):\n        x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('?', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\"\"\"\n\ndef"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) % 2 == 0 else \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    a = [0] + list(map(int, stdin.split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + c[i - 1]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if a[j] == i:\n                dp[i] = min(dp[i], dp[j - 1] + c[j - 1])\n    return dp[-1]\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a < 0:\n        a = abs(a)\n        if b < 0:\n            b = abs(b)\n            if a > b:\n                return n - b\n            else:\n                return n - a\n        else:\n            if a > b:\n                return n - b\n            else:\n                return n - a\n    else:\n        if b < 0:\n            b = abs(b)\n            if a > b:\n                return n - b\n            else:\n                return n - a\n        else:\n            if a > b:\n                return n - b\n            else:\n                return n - a"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\n8 6 4 2 1 4 7 10 2\\n\")\n    3\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    a = [i for i in a if i!= -1]\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] - a[j] == i - j:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j + 1].count('a') == s[i:j + 1].count('b'):\n                ans = max(ans, j - i + 1)\n    return ans"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] < n // 2:\n            i += 1\n        else:\n            break\n    if i == n:\n        return '0'\n    return str(i) +'' +''.join(map(str, range(1, i + 1)))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1.0 * n / (n - 1))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m % (2 ** n))"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nweird\")\n    'werd'\n    >>> solution(\"4\\nword\")\n    'word'\n    >>> solution(\"5\\naaeaa\")\n    'a'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    vowels = \"aeiouy\"\n    vowel_count = 0\n    for i in range(n):\n        if s[i] in vowels:\n            vowel_count += 1\n        if vowel_count > 1:\n            vowel_count -= 1\n            continue\n        if vowel_count == 1:\n            if i + 1 < n and s[i + 1] in vowels:\n                continue\n            else:\n                return s[:i] + s[i + 1:]\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    for x in range(1, r):\n        for y in range(1, r):\n            if x ** 2 + 2 * x * y + x + 1 == r:\n                return f\"{x} {y}\"\n    return \"NO\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if sum(a) % 2!= 0:\n        return \"-1\"\n    if n == 1:\n        return \"1 1\"\n    a.sort()\n    if a[0] == a[-1]:\n        return \"-1\"\n    if a[0] == a[1]:\n        return \"1 1\"\n    if a[0] == a[2]:\n        return \"1 2\"\n    if a[0] == a[3]:\n        return \"1 3\"\n    if a[0] == a[4]:\n        return \"1 4\"\n    if a[0] == a[5]:\n        return \"1 5\"\n    if a[0] == a[6]:\n        return \"1 6\"\n    if a[0] == a[7]:\n        return \"1 7\"\n    if a[0] == a[8]:\n        return \"1 8\"\n    if a[0] == a[9]:\n        return \"1 9\"\n    if a[0] == a[10]:\n        return \"1 10\"\n    if a[0] == a[11]:\n        return \"1 11\"\n    if a[0] == a[12]:\n        return \"1 12\"\n    if a[0] == a[13]:\n        return \"1 13\"\n    if a[0] == a[14]:\n        return \"1 14\"\n    if a[0] == a[15]:\n        return \"1 15\"\n    if a[0] == a[16]:\n        return \"1 16\"\n    if a[0] == a[17]:\n        return \"1 17\"\n    if a[0] == a[18]:\n        return \"1 18\"\n    if a[0] == a[19]:\n        return \"1 19\"\n    if a[0] == a[20]:\n        return \"1 20\"\n    if a[0] == a[21]:\n        return \"1 21\"\n    if a[0] == a[22]:\n        return \"1 22\"\n    if a[0] == a[23]:\n        return \"1 23\"\n    if a[0] == a[24]:\n        return \"1 24\"\n    if a[0] == a[25]:\n        return \"1 25\"\n    if a[0] == a[26]:\n        return \"1 26\"\n    if a[0] == a[27]:\n        return \"1 27\"\n    if a[0] == a[28]:\n        return \"1 28\"\n    if a[0] == a[29]:\n        return \"1 29\"\n    if a[0] == a[30]:\n        return \"1 30\"\n    if a[0] == a[31]:\n        return \"1 31\"\n    if a[0] == a[32]:\n        return \"1 32\"\n    if a[0] == a[33]:\n        return \"1 33\"\n    if a[0] == a[34]:\n        return \"1 34\"\n    if a[0] == a[35]:\n        return \"1 35\"\n    if a[0] == a[36]:\n        return \"1 36\"\n    if a[0] == a[37]:\n        return \"1 37\"\n    if a[0] == a[38]:\n        return \"1 38\"\n    if a[0] == a[39]:\n        return \"1 39\"\n    if a[0] == a[40]:\n        return \"1 40\"\n    if a[0] == a[41]:\n        return \"1 41\"\n    if a[0] == a[42]:\n        return \"1 42\"\n    if a[0] == a[43]:\n        return \"1 43\"\n    if a[0] == a[44]:\n        return \"1 44\"\n    if a[0] == a[45]:\n        return \"1 45\"\n    if a[0] == a[46]:\n        return \"1 46\"\n    if a[0] == a[47]:\n        return \"1 47\"\n    if a[0] == a[48]:\n        return \"1 48\"\n    if a[0] == a[49]:\n        return \"1 49\"\n    if a[0] == a[50]:\n        return \"1 50\"\n    if a[0] == a[51]:\n        return \"1 51\"\n    if a[0] == a[52]:\n        return \"1 52\"\n    if a[0] == a[53]:\n        return \"1 53\"\n    if a[0] == a[54]:\n        return \"1 54\"\n    if a[0] == a[55]:\n        return \"1 55\"\n    if a[0] == a[56]:\n        return \"1 56\"\n    if a[0] == a[57]:\n        return \"1 57\"\n    if a[0] == a[58]:\n        return \"1 58\"\n    if a[0] == a[59]:\n        return \"1 59\"\n    if a[0] == a[60]:\n        return \"1 60\"\n    if a[0] == a[61]:\n        return \"1 61\"\n    if a[0] == a[62]:\n        return \"1 62\"\n    if a[0] == a[63]:\n        return \"1 63\"\n    if a[0] == a[64]:\n        return \"1 64\"\n    if a[0] == a[65]:\n        return \"1 65\"\n    if a[0] == a[66]:\n        return \"1 66\"\n    if a[0] == a[67]:\n        return \"1 67\"\n    if a[0] == a[68]:\n        return \"1 68\"\n    if a[0] == a[69]:\n        return \"1 69\"\n    if a[0] == a[70]:\n        return \"1 70\"\n    if a[0] == a[71]:\n        return \"1 71\"\n    if a[0] == a[72]:\n        return \"1 72\"\n    if a[0] == a[73]:\n        return \"1 73\"\n    if a[0] == a[74]:\n        return \"1 74\"\n    if a[0] == a[75]:\n        return \"1 75\"\n    if a[0] == a[76]:\n        return \"1 76\"\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while n > 0:\n        n -= k\n        k += 1\n    return str(k - 1) + \" \" + str(k - 1) * (k - 1)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n    if len(b) == 0:\n        return 1\n    else:\n        return len(b)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while n > 1:\n        if n % 2 == 1:\n            k += 1\n            n = n // 2\n        else:\n            n = n // 2\n            k += 1\n    return k\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    a = int(stdin)\n    b = int(stdin)\n    count = 0\n    for i in range(a, b + 1):\n        if i % m == 0:\n            count += 1\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    i = 0\n    while len(a) > 1:\n        if i + m >= len(a):\n            i = 0\n        else:\n            i += m\n        a.pop(i)\n    return str(a[0])"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(factorial(n) // factorial(n - k) % 1000000007)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    c = stdin.split()\n    if k > n:\n        return -1\n    if k == n:\n        return sum(b)\n    if k == 1:\n        return max(b)\n    if k == 2:\n        return max(b)\n    if k == 3:\n        return max(b)\n    if k == 4:\n        return max(b)\n    if k == 5:\n        return max(b)\n    if k == 6:\n        return max(b)\n    if k == 7:\n        return max(b)\n    if k == 8:\n        return max(b)\n    if k == 9:\n        return max(b)\n    if k == 10:\n        return max(b)\n    if k == 11:\n        return max(b)\n    if k == 12:\n        return max(b)\n    if k == 13:\n        return max(b)\n    if k == 14:\n        return max(b)\n    if k == 15:\n        return max(b)\n    if k == 16:\n        return max(b)\n    if k == 17:\n        return max(b)\n    if k == 18:\n        return max(b)\n    if k == 19:\n        return max(b)\n    if k == 20:\n        return max(b)\n    if k == 21:\n        return max(b)\n    if k == 22:\n        return max(b)\n    if k == 23:\n        return max(b)\n    if k == 24:\n        return max(b)\n    if k == 25:\n        return max(b)\n    if k == 26:\n        return max(b)\n    if k == 27:\n        return max(b)\n    if k == 28:\n        return max(b)\n    if k == 29:\n        return max(b)\n    if k == 30:\n        return max(b)\n    if k == 31:\n        return max(b)\n    if k == 32:\n        return max(b)\n    if k == 33:\n        return max(b)\n    if k == 34:\n        return max(b)\n    if k == 35:\n        return max(b)\n    if k == 36:\n        return max(b)\n    if k == 37:\n        return max(b)\n    if k == 38:\n        return max(b)\n    if k == 39:\n        return max(b)\n    if k == 40:\n        return max(b)\n    if k == 41:\n        return max(b)\n    if k == 42:\n        return max(b)\n    if k == 43:\n        return max(b)\n    if k == 44:\n        return max(b)\n    if k == 45:\n        return max(b)\n    if k == 46:\n        return max(b)\n    if k == 47:\n        return max(b)\n    if k == 48:\n        return max(b)\n    if k == 49:\n        return max(b)\n    if k == 50:\n        return max(b)\n    if k == 51:\n        return max(b)\n    if k == 52:\n        return max(b)\n    if k == 53:\n        return max(b)\n    if k == 54:\n        return max(b)\n    if k == 55:\n        return max(b)\n    if k == 56:\n        return max(b)\n    if k == 57:\n        return max(b)\n    if k == 58:\n        return max(b)\n    if k == 59:\n        return max(b)\n    if k == 60:\n        return max(b)\n    if k == 61:\n        return max(b)\n    if k == 62:\n        return max(b)\n    if k == 63:\n        return max(b)\n    if k == 64:\n        return max(b)\n    if k == 65:\n        return max(b)\n    if k == 66:\n        return max(b)\n    if k == 67:\n        return max(b)\n    if k == 68:\n        return max(b)\n    if k == 69:\n        return max(b)\n    if k == 70:\n        return max(b)\n    if k == 71:\n        return max(b)\n    if k == 72:\n        return max(b)\n    if k == 73:\n        return max(b)\n    if k == 74:\n        return max(b)\n    if k == 75:\n        return max(b)\n    if k == 76:\n        return max(b)\n    if k == 77:\n        return max(b)\n    if k == 78:\n        return max(b)\n    if k == 79:\n        return max(b)\n    if k == 80:\n        return max(b)\n    if k == 81:\n        return max(b)\n    if k == 82:\n        return max(b)\n    if k == 83:\n        return max(b)\n    if k == 84:\n        return max(b)\n    if k == 85:\n        return max(b)\n    if k == 86:\n        return max(b)\n    if k == 87:\n        return max(b)\n    if k == 88:\n        return max(b)\n    if k == 89:\n        return max(b)\n    if k == 90:\n        return max(b)\n    if k == 91:\n        return max(b)\n    if k == 92:\n        return max(b)\n    if k == 93:\n        return max(b)\n    if k == 94:\n        return max(b)\n    if k == 95:\n        return max(b)\n    if k == 96:\n        return max(b)\n    if k == 97:\n        return max(b)\n    if k == 98:\n        return max(b)\n    if k == 99:\n        return max(b)\n    if k == 100:\n        return max(b)\n    if k == 101:\n        return"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = a[::-1]\n    a.append(p // q)\n    a = a[::-1]\n    print(a)\n    return \"YES\" if a[0] == p / q else \"NO\""
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split('=')\n    left = expression[0].split('+')\n    right = expression[1].split('+')\n    left_sum = 0\n    right_sum = 0\n    for i in left:\n        left_sum += int(i.split('|')[0])\n    for i in right:\n        right_sum += int(i.split('|')[0])\n    if left_sum == right_sum:\n        return '='.join(expression)\n    else:\n        return 'Impossible'"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(factorial(n) // factorial(n - k) % (10 ** 9 + 7))\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n-1 0\\n0 3\\n2 -1\")\n    '2\\n1 2\\nRL\\nUU'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    points = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    m = 0\n    d = [0] * n\n    w = [\"\"] * n\n    for i in range(n):\n        x, y = points[i]\n        if i == 0:\n            m += 1\n            d[0] = abs(x)\n            w[0] = \"R\" if x < 0 else \"L\"\n        else:\n            m += 1\n            d[i] = abs(x - points[i - 1][0])\n            w[i] = \"R\" if x - points[i - 1][0] < 0 else \"L\"\n    return str(m) + \"\\n\" + \" \".join(map(str, d)) + \"\\n\" + \" \".join(w)\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    filler = []\n    for i in range(n):\n        if s[i] == 'o' and s[i+1] == 'g' and s[i+2] == 'o':\n            filler.append(i)\n    for i in filler:\n        s = s[:i] + '***' + s[i+3:]\n    return s\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    return str(x * n % (10 ** 9 + 7))\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = lambda x: sum(int(i) for i in str(x))\n    def f(x):\n        return a * s(x) ** b + c\n    def g(x):\n        return b * s(x) ** a + c\n    def h(x):\n        return a * s(x) ** b\n    def i(x):\n        return b * s(x) ** a\n    def j(x):\n        return a * s(x) ** b\n    def k(x):\n        return b * s(x) ** a\n    def l(x):\n        return a * s(x) ** b\n    def m(x):\n        return b * s(x) ** a\n    def n(x):\n        return a * s(x) ** b\n    def o(x):\n        return b * s(x) ** a\n    def p(x):\n        return a * s(x) ** b\n    def q(x):\n        return b * s(x) ** a\n    def r(x):\n        return a * s(x) ** b\n    def s(x):\n        return b * s(x) ** a\n    def t(x):\n        return a * s(x) ** b\n    def u(x):\n        return b * s(x) ** a\n    def v(x):\n        return a * s(x) ** b\n    def w(x):\n        return b * s(x) ** a\n    def x(x):\n        return a * s(x) ** b\n    def y(x):\n        return b * s(x) ** a\n    def z(x):\n        return a * s(x) ** b\n    def a(x):\n        return b * s(x) ** a\n    def b(x):\n        return a * s(x) ** b\n    def c(x):\n        return a * s(x) ** b\n    def d(x):\n        return b * s(x) ** a\n    def e(x):\n        return a * s(x) ** b\n    def f(x):\n        return b * s(x) ** a\n    def g(x):\n        return a * s(x) ** b\n    def h(x):\n        return b * s(x) ** a\n    def i(x):\n        return a * s(x) ** b\n    def j(x):\n        return b * s(x) ** a\n    def k(x):\n        return a * s(x) ** b\n    def l(x):\n        return b * s(x) ** a\n    def m(x):\n        return a * s(x) ** b\n    def n(x):\n        return b * s(x) ** a\n    def o(x):\n        return a * s(x) ** b\n    def p(x):\n        return b * s(x) ** a\n    def q(x):\n        return a * s(x) ** b\n    def r(x):\n        return b * s(x) ** a\n    def s(x):\n        return a * s(x) ** b\n    def t(x):\n        return a * s(x) ** b\n    def u(x):\n        return b * s(x) ** a\n    def v(x):\n        return a * s(x) ** b\n    def w(x):\n        return b * s(x) ** a\n    def x(x):\n        return a * s(x) ** b\n    def y(x):\n        return b * s(x) ** a\n    def z(x):\n        return a * s(x) ** b\n    def b(x):\n        return a * s(x) ** b\n    def c(x):\n        return a * s(x) ** b\n    def d(x):\n        return b * s(x) ** a\n    def e(x):\n        return a * s(x) ** b\n    def f(x):\n        return b * s(x) ** a\n    def g(x):\n        return a * s(x) ** b\n    def h(x):\n        return b * s(x) ** a\n    def i(x):\n        return a * s(x) ** b\n    def j(x):\n        return b * s(x) ** a\n    def k(x):\n        return a * s(x) ** b\n    def l(x):\n        return b * s(x) ** a\n    def m(x):\n        return a * s(x) ** b\n    def n(x):\n        return b * s(x) ** a\n    def o(x):\n        return a * s(x) ** b\n    def p(x):\n        return b * s(x) ** a\n    def q(x):\n        return a * s(x) ** b\n    def r(x):\n        return b * s(x) ** a\n    def s(x):\n        return a * s(x) ** b\n    def t(x):\n        return a * s(x) ** b\n    def u(x):\n        return b * s(x) ** a\n    def v(x):\n        return a * s(x) ** b\n    def w(x):\n        return b * s(x) ** a\n    def x(x):\n        return a * s(x) ** b\n    def y(x):\n        return b * s(x) ** a\n    def z(x):\n        return a * s(x) ** b\n    def a(x):\n        return b * s(x) ** a\n    def b(x):\n        return a * s(x) ** b\n    def c(x):\n        return a * s(x) ** b\n    def d(x):\n        return b * s(x) ** a\n    def e(x):\n        return a * s(x) ** b\n    def f(x):\n        return b * s(x) ** a\n    def g(x):\n        return a * s(x) ** b\n    def h(x):\n        return b * s(x) ** a\n    def i(x):\n        return a * s(x) ** b\n    def j(x):\n        return b * s(x) ** a\n    def k(x):\n        return a * s(x) ** b\n    def l(x):\n        return b * s(x) ** a\n    def m(x):\n        return a * s(x) ** b\n    def n(x):\n        return b * s(x) ** a\n    def o(x):\n        return a * s(x) ** b\n    def p(x):\n        return b * s(x) ** a\n    def q(x):\n        return a * s(x) ** b\n    def r(x):\n        return b * s(x) ** a\n    def s(x):\n        return a * s(x) ** b\n    def t(x):\n        return a * s(x) ** b\n    def u(x):\n        return b * s(x) ** a\n    def v(x):\n        return a * s(x) ** b\n    def w"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(stdin[0]) == 4 else \"NO\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    i = (p // 50) % 475\n    for _ in range(25):\n        i = (i * 96 + 42) % 475\n        print(26 + i)\n    return ''"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b, c = [int(x) for x in stdin.readline().split()]\n    return str(min(a, b, c) * n)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split())\n    return str(min(x1, x2, x3) + max(x1, x2, x3) - max(x1, x2, x3))\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] & x == a[j] & x:\n                count += 1\n    return count if count > 0 else -1\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    matrix = [list(stdin) for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == '*':\n                if j == 0 or j == w - 1:\n                    if matrix[i][j - 1] == '*' and matrix[i][j + 1] == '*':\n                        continue\n                    else:\n                        return 'NO'\n                else:\n                    if matrix[i][j - 1] == '*' and matrix[i][j + 1] == '*':\n                        continue\n                    else:\n                        return 'NO'\n    return 'YES'"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    if a > n or b > n:\n        return \"NO\"\n    if a == 1 and b == 1:\n        return \"YES\"\n    if a == 1:\n        return \"YES\" + \"\".join([\"1\" if i == j else \"0\" for i in range(n) for j in range(n)])\n    if b == 1:\n        return \"YES\" + \"\".join([\"0\" if i == j else \"1\" for i in range(n) for j in range(n)])\n    return \"YES\" + \"\".join([\"1\" if i == j else \"0\" for i in range(n) for j in range(n)])\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = [int(x) for x in stdin.split()]\n    return str(min(n * m, c * n + d * m - k * n * m))"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\")\n    'YXWVUTGHIJKLM'\n    >>> solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\")\n    'Impossible'\n    \"\"\"\n    grid = [\n        [None for _ in range(13)]\n        for _ in range(2)\n    ]\n    for i, c in enumerate(stdin):\n        if i % 2 == 0:\n            grid[0][i // 2] = c\n        else:\n            grid[1][i // 2] = c\n    return find_path(grid)\n\n\ndef"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return '<' if x ** y < y ** x else '>' if x ** y > y ** x else '='\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return r * h // 2\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3 7 3 20\")\n    26\n    >>> solution(\"7 9 3 1 8\")\n    28\n    >>> solution(\"10 10 10 10 10\")\n    20\n    \"\"\"\n    cards = [int(x) for x in stdin.split()]\n    cards.sort()\n    cards.reverse()\n    sum_cards = sum(cards)\n    while len(cards) > 1:\n        if len(cards) == 2:\n            if cards[0] == cards[1]:\n                sum_cards -= cards[0]\n                break\n            else:\n                sum_cards -= cards[0]\n                sum_cards -= cards[1]\n                break\n        if len(cards) == 3:\n            if cards[0] == cards[1] == cards[2]:\n                sum_cards -= cards[0]\n                sum_cards -= cards[1]\n                sum_cards -= cards[2]\n                break\n            elif cards[0] == cards[1] or cards[0] == cards[2]:\n                sum_cards -= cards[0]\n                sum_cards -= cards[1]\n                break\n            elif cards[1] == cards[2]:\n                sum_cards -= cards[1]\n                sum_cards -= cards[2]\n                break\n            else:\n                sum_cards -= cards[0]\n                sum_cards -= cards[1]\n                sum_cards -= cards[2]\n                break\n        if len(cards) > 3:\n            if cards[0] == cards[1] == cards[2]:\n                sum_cards -= cards[0]\n                sum_cards -= cards[1]\n                sum_cards -= cards[2]\n                sum_cards -= cards[3]\n                break\n            elif cards[0] == cards[1] or cards[0] == cards[2]:\n                sum_cards -= cards[0]\n                sum_cards -= cards[1]\n                sum_cards -= cards[2]\n                sum_cards -= cards[3]\n                break\n            elif cards[1] == cards[2]:\n                sum_cards -= cards[1]\n                sum_cards -= cards[2]\n                sum_cards -= cards[3]\n                break\n            elif cards[0] == cards[3]:\n                sum_cards -= cards[0]\n                sum_cards -= cards[3]\n                break\n            elif cards[1] == cards[3]:\n                sum_cards -= cards[1]\n                sum_cards -= cards[3]\n                break\n            elif cards[2] == cards[3]:\n                sum_cards -= cards[2]\n                sum_cards -= cards[3]\n                break\n            else:\n                sum_cards -= cards[0]\n                sum_cards -= cards[1]\n                sum_cards -= cards[2]\n                sum_cards -= cards[3]\n                break\n    return sum_cards\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    return str(sum(abs(x[i] - x[i - 1]) for i in range(1, n)))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return -1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return -1\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(':')\n    t = stdin.split(':')\n    h = int(s[0])\n    m = int(s[1])\n    h1 = int(t[0])\n    m1 = int(t[1])\n    if m1 > m:\n        h1 += 1\n    if h1 > h:\n        h1 = h1 - h\n    if h1 < 0:\n        h1 = 24 + h1\n    return str(h1) + ':' + str(m1)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()[1].split(',')))"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(stdin)"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) == int(stdin[::-1]) else \"NO\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = [int(x) for x in stdin.split()]\n    if i + a < 1 or i + a > n or j + b < 1 or j + b > m:\n        return \"Poor Inna and pony!\"\n    return min(abs(i - 1 - i + a), abs(j - 1 - j + b), abs(i - 1 - i + a), abs(j - 1 - j + b))\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 1\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = 1\n    return dp[0][n - 1]\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    denominations = list(map(int, stdin.split()))\n    denominations.sort()\n    q = int(stdin.split()[-1])\n    for _ in range(q):\n        x = int(stdin.split()[-1])\n        count = 0\n        for i in range(n):\n            if denominations[i] > x:\n                break\n            count += x // denominations[i]\n        print(count)\n    return ''\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2, p, d = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    if p == d:\n        return t_1\n    elif p == 1:\n        return t_2\n    elif p == s - 1:\n        return t_2 + (s - x_1) * t_1\n    else:\n        return t_2 + (s - x_1) * t_1 + (x_2 - s) * t_2\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    s = s[:k]\n    l = len(s)\n    while True:\n        if n <= l:\n            break\n        s += s[:l]\n        l += 1\n    return s[:n]\n\nprint(solution(input()))\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    l = stdin.split('\\n')[1]\n    x = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n    x.sort()\n    if l[0] == 'L':\n        x = x[::-1]\n    for i in range(n):\n        if x[i] == x[i + 1]:\n            return str(x[i])\n    return '-1'"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\")\n    '1 1'\n    >>> solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\")\n    '0 3'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(map(lambda x: int(x), str(n))))\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = max(a)\n    while True:\n        if sum(a) < k:\n            k -= 1\n        else:\n            break\n    return str(k)\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - int(stdin[:-1]))\n\ndef"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    start, end = stdin.split(' ')\n    start = start[0]\n    end = end[0]\n    n = int(stdin.split(' ')[1])\n    if start == '^':\n        if end == 'v':\n            return 'cw'\n        elif end == '<':\n            return 'ccw'\n        elif end == '>':\n            return 'undefined'\n    elif start == '<':\n        if end == '^':\n            return 'ccw'\n        elif end == 'v':\n            return 'cw'\n        elif end == '>':\n            return 'undefined'\n    elif start == '>':\n        if end == '^':\n            return 'cw'\n        elif end == '<':\n            return 'ccw'\n        elif end == 'v':\n            return 'undefined'\n    elif start == 'v':\n        if end == '^':\n            return 'ccw'\n        elif end == '<':\n            return 'cw'\n        elif end == '>':\n            return 'undefined'\n    return 'undefined'\n\nprint(solution(input()))\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    leaders = list(map(int, stdin.split()))\n    permutation = [0] * n\n    for i in range(m):\n        permutation[leaders[i] - 1] = i + 1\n    for i in range(n):\n        if permutation[i] == 0:\n            permutation[i] = i + 1\n            for j in range(i + 1, n):\n                if permutation[j] == 0:\n                    permutation[j] = j + 1\n                    break\n    if permutation == [i + 1 for i in range(n)]:\n        return''.join(map(str, permutation))\n    return -1\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split()\n    a = int(a)\n    k = int(k)\n    if k == 0:\n        return str(a)\n    if k == 1:\n        return str(a + 1)\n    if k == 2:\n        return str(a + 2)\n    if k == 3:\n        return str(a + 3)\n    if k == 4:\n        return str(a + 4)\n    if k == 5:\n        return str(a + 5)\n    if k == 6:\n        return str(a + 6)\n    if k == 7:\n        return str(a + 7)\n    if k == 8:\n        return str(a + 8)\n    if k == 9:\n        return str(a + 9)\n    if k == 10:\n        return str(a + 10)\n    if k == 11:\n        return str(a + 11)\n    if k == 12:\n        return str(a + 12)\n    if k == 13:\n        return str(a + 13)\n    if k == 14:\n        return str(a + 14)\n    if k == 15:\n        return str(a + 15)\n    if k == 16:\n        return str(a + 16)\n    if k == 17:\n        return str(a + 17)\n    if k == 18:\n        return str(a + 18)\n    if k == 19:\n        return str(a + 19)\n    if k == 20:\n        return str(a + 20)\n    if k == 21:\n        return str(a + 21)\n    if k == 22:\n        return str(a + 22)\n    if k == 23:\n        return str(a + 23)\n    if k == 24:\n        return str(a + 24)\n    if k == 25:\n        return str(a + 25)\n    if k == 26:\n        return str(a + 26)\n    if k == 27:\n        return str(a + 27)\n    if k == 28:\n        return str(a + 28)\n    if k == 29:\n        return str(a + 29)\n    if k == 30:\n        return str(a + 30)\n    if k == 31:\n        return str(a + 31)\n    if k == 32:\n        return str(a + 32)\n    if k == 33:\n        return str(a + 33)\n    if k == 34:\n        return str(a + 34)\n    if k == 35:\n        return str(a + 35)\n    if k == 36:\n        return str(a + 36)\n    if k == 37:\n        return str(a + 37)\n    if k == 38:\n        return str(a + 38)\n    if k == 39:\n        return str(a + 39)\n    if k == 40:\n        return str(a + 40)\n    if k == 41:\n        return str(a + 41)\n    if k == 42:\n        return str(a + 42)\n    if k == 43:\n        return str(a + 43)\n    if k == 44:\n        return str(a + 44)\n    if k == 45:\n        return str(a + 45)\n    if k == 46:\n        return str(a + 46)\n    if k == 47:\n        return str(a + 47)\n    if k == 48:\n        return str(a + 48)\n    if k == 49:\n        return str(a + 49)\n    if k == 50:\n        return str(a + 50)\n    if k == 51:\n        return str(a + 51)\n    if k == 52:\n        return str(a + 52)\n    if k == 53:\n        return str(a + 53)\n    if k == 54:\n        return str(a + 54)\n    if k == 55:\n        return str(a + 55)\n    if k == 56:\n        return str(a + 56)\n    if k == 57:\n        return str(a + 57)\n    if k == 58:\n        return str(a + 58)\n    if k == 59:\n        return str(a + 59)\n    if k == 60:\n        return str(a + 60)\n    if k == 61:\n        return str(a + 61)\n    if k == 62:\n        return str(a + 62)\n    if k == 63:\n        return str(a + 63)\n    if k == 64:\n        return str(a + 64)\n    if k == 65:\n        return str(a + 65)\n    if k == 66:\n        return str(a + 66)\n    if k == 67:\n        return str(a + 67)\n    if k == 68:\n        return str(a + 68)\n    if k == 69:\n        return str(a + 69)\n    if k == 70:\n        return str(a + 70)\n    if k == 71:\n        return str(a + 71)\n    if k == 72:\n        return str(a + 72)\n    if k == 73:\n        return str(a + 73)\n    if k == 74:\n        return str(a + 74)\n    if k == 75:\n        return str(a + 75)\n    if k == 76:\n        return str(a + 76)\n    if k == 77:\n        return str(a + 77)\n    if k == 78:\n        return str(a + 78)\n    if k == 79:\n        return str(a + 79)\n    if k == 80:\n        return str(a + 80)\n    if k == 81:\n        return str(a + 81)\n    if k == 82:\n        return str(a + 82)\n    if k == 83:\n        return str(a + 83)\n    if k == 84:\n        return str(a + 84)\n    if k == 85:\n        return str(a + 85)\n    if k == 86:\n        return str(a + 86)\n    if k == 87:\n        return str(a + 87)\n    if k == 88:\n        return str(a + 88)\n    if k == 89:\n        return str(a + 89)\n    if k == 90:\n        return str(a + 90)\n    if k == 91:\n        return str(a + 91)\n    if k == 92:\n        return str(a + 92)\n    if k == 93:\n        return str(a + 93)\n    if k == 94:\n        return str(a + 94)\n    if k == 95:\n        return str(a + 95)\n    if k == 96:\n        return str(a + 96)\n    if k == 97:\n        return str(a + 97)\n    if k == 98:\n        return str(a + 98)\n    if k == 99:\n        return str(a + 99)\n    if k == 100:\n        return str(a + 100)\n    return str(a + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a == b == c == d:\n        return 42\n    if a == b:\n        return c\n    if b == c:\n        return d\n    if a == c:\n        return b\n    if a == d:\n        return b\n    if b == d:\n        return c\n    if c == d:\n        return a\n    return 42\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 2 3\n   ... ''')\n    '4'\n    >>> solution('''3\n   ... 1 2 1\n   ... ''')\n    '1'\n    >>> solution('''7\n   ... 1 1 3 1 1 1 1\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    houses = list(map(int, stdin.readline().split()))\n    houses.sort()\n    return str(houses[-1] - houses[0])\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k % m == 0:\n        return str(n) + \" \" + str(k // m) + \" R\"\n    else:\n        return str(n) + \" \" + str(k // m + 1) + \" L\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"B\"\n    if n == 2:\n        return \"G\"\n    if n == 3:\n        return \"R\"\n    if n == 4:\n        return \"B\"\n    if n == 5:\n        return \"G\"\n    if n == 6:\n        return \"R\"\n    if n == 7:\n        return \"B\"\n    if n == 8:\n        return \"G\"\n    if n == 9:\n        return \"R\"\n    if n == 10:\n        return \"B\"\n    if n == 11:\n        return \"G\"\n    if n == 12:\n        return \"R\"\n    if n == 13:\n        return \"B\"\n    if n == 14:\n        return \"G\"\n    if n == 15:\n        return \"R\"\n    if n == 16:\n        return \"B\"\n    if n == 17:\n        return \"G\"\n    if n == 18:\n        return \"R\"\n    if n == 19:\n        return \"B\"\n    if n == 20:\n        return \"G\"\n    if n == 21:\n        return \"R\"\n    if n == 22:\n        return \"B\"\n    if n == 23:\n        return \"G\"\n    if n == 24:\n        return \"R\"\n    if n == 25:\n        return \"B\"\n    if n == 26:\n        return \"G\"\n    if n == 27:\n        return \"R\"\n    if n == 28:\n        return \"B\"\n    if n == 29:\n        return \"G\"\n    if n == 30:\n        return \"R\"\n    if n == 31:\n        return \"B\"\n    if n == 32:\n        return \"G\"\n    if n == 33:\n        return \"R\"\n    if n == 34:\n        return \"B\"\n    if n == 35:\n        return \"G\"\n    if n == 36:\n        return \"R\"\n    if n == 37:\n        return \"B\"\n    if n == 38:\n        return \"G\"\n    if n == 39:\n        return \"R\"\n    if n == 40:\n        return \"B\"\n    if n == 41:\n        return \"G\"\n    if n == 42:\n        return \"R\"\n    if n == 43:\n        return \"B\"\n    if n == 44:\n        return \"G\"\n    if n == 45:\n        return \"R\"\n    if n == 46:\n        return \"B\"\n    if n == 47:\n        return \"G\"\n    if n == 48:\n        return \"R\"\n    if n == 49:\n        return \"B\"\n    if n == 50:\n        return \"G\"\n    if n == 51:\n        return \"R\"\n    if n == 52:\n        return \"B\"\n    if n == 53:\n        return \"G\"\n    if n == 54:\n        return \"R\"\n    if n == 55:\n        return \"B\"\n    if n == 56:\n        return \"G\"\n    if n == 57:\n        return \"R\"\n    if n == 58:\n        return \"B\"\n    if n == 59:\n        return \"G\"\n    if n == 60:\n        return \"R\"\n    if n == 61:\n        return \"B\"\n    if n == 62:\n        return \"G\"\n    if n == 63:\n        return \"R\"\n    if n == 64:\n        return \"B\"\n    if n == 65:\n        return \"G\"\n    if n == 66:\n        return \"R\"\n    if n == 67:\n        return \"B\"\n    if n == 68:\n        return \"G\"\n    if n == 69:\n        return \"R\"\n    if n == 70:\n        return \"B\"\n    if n == 71:\n        return \"G\"\n    if n == 72:\n        return \"R\"\n    if n == 73:\n        return \"B\"\n    if n == 74:\n        return \"G\"\n    if n == 75:\n        return \"R\"\n    if n == 76:\n        return \"B\"\n    if n == 77:\n        return \"G\"\n    if n == 78:\n        return \"R\"\n    if n == 79:\n        return \"B\"\n    if n == 80:\n        return \"G\"\n    if n == 81:\n        return \"R\"\n    if n == 82:\n        return \"B\"\n    if n == 83:\n        return \"G\"\n    if n == 84:\n        return \"R\"\n    if n == 85:\n        return \"B\"\n    if n == 86:\n        return \"G\"\n    if n == 87:\n        return \"R\"\n    if n == 88:\n        return \"B\"\n    if n == 89:\n        return \"G\"\n    if n == 90:\n        return \"R\"\n    if n == 91:\n        return \"B\"\n    if n == 92:\n        return \"G\"\n    if n == 93:\n        return \"R\"\n    if n == 94:\n        return \"B\"\n    if n == 95:\n        return \"G\"\n    if n == 96:\n        return \"R\"\n    if n == 97:\n        return \"B\"\n    if n == 98:\n        return \"G\"\n    if n == 99:\n        return \"R\"\n    if n == 100:\n        return \"B\"\n    if n == 101:\n        return \"G\"\n    if n == 102:\n        return \"R\"\n    if n == 103:\n        return \"B\"\n    if n == 104:\n        return \"G\"\n    if n == 105:\n        return \"R\"\n    if n == 106:\n        return \"B\"\n    if n == 107:\n        return \"G\"\n    if n == 108:\n        return \"R\"\n    if n == 109:\n        return \"B\"\n    if n == 110:\n        return \"G\"\n    if n == 111:\n        return \"R\"\n    if n == 112:\n        return \"B\"\n    if n == 113:\n        return \"G\"\n    if n == 114:\n        return \"R\"\n    if n == 115:\n        return \"B\"\n    if n == 116:\n        return \"G\"\n    if n == 117:\n        return \"R\"\n    if n == 118:\n        return \"B\"\n    if n == 119:\n        return \"G\"\n    if n == 120:\n        return \"R\"\n    if n == 121:\n        return \"B\"\n    if n == 122:\n        return \"G\"\n    if n == 123:\n        return \"R\"\n    if n == 124:\n        return \"B\""
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return sum(i for i in range(l, r + 1) if i % 2)"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [list(map(int, stdin.split()))]\n    if a[0] == b[0] == c[0] or a[1] == b[1] == c[1]:\n        return \"Yes\"\n    if a[0] == b[0] and a[1] == c[1]:\n        return \"Yes\"\n    if a[0] == c[0] and a[1] == b[1]:\n        return \"Yes\"\n    if b[0] == c[0] and b[1] == a[1]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if a[i] * k == a[j] * a[k]))\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    creatures = []\n    for _ in range(n):\n        creatures.append(list(map(int, stdin.split())))\n    creatures.sort(key=lambda x: x[1], reverse=True)\n    hp = 0\n    dmg = 0\n    for i in range(n):\n        if a > 0:\n            hp += creatures[i][1] * 2\n            a -= 1\n        if b > 0:\n            dmg += creatures[i][1]\n            b -= 1\n    return hp + dmg\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    maze = [list(stdin.split()[i]) for i in range(n)]\n    \n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m\n    \n    def is_valid_and_empty(x, y):\n        return is_valid(x, y) and maze[x][y] == '.'\n    \n    def is_valid_and_not_obstacle(x, y):\n        return is_valid(x, y) and maze[x][y]!= '*'\n    \n    def is_valid_and_not_visited(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0\n    \n    def is_valid_and_not_visited_and_empty(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y] == '.'\n    \n    def is_valid_and_not_visited_and_not_obstacle(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*'\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x][y] == 0\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited_and_empty(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x][y] == 0 and maze[x][y] == '.'\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited_and_not_empty(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x][y] == 0 and maze[x][y]!= '.'\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited_and_not_empty_and_not_visited(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x][y] == 0 and maze[x][y]!= '.' and visited[x][y] == 0\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited_and_not_empty_and_not_visited_and_not_empty(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x][y] == 0 and maze[x][y]!= '.' and visited[x][y] == 0 and maze[x][y]!= '.'\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited_and_not_empty_and_not_visited_and_not_empty_and_not_visited(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x][y] == 0 and maze[x][y]!= '.' and visited[x][y] == 0 and maze[x][y]!= '.'\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited_and_not_empty_and_not_visited_and_not_empty_and_not_visited_and_not_empty(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x][y] == 0 and maze[x][y]!= '.' and visited[x][y] == 0 and maze[x][y]!= '.'\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited_and_not_empty_and_not_visited_and_not_empty_and_not_visited_and_not_empty_and_not_visited(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x][y] == 0 and maze[x][y]!= '.' and visited[x][y] == 0 and maze[x][y]!= '.'\n    \n    def is_valid_and_not_visited_and_not_obstacle_and_not_visited_and_not_empty_and_not_visited_and_not_empty_and_not_visited_and_not_empty_and_not_visited_and_not_empty_and_not_visited(x, y):\n        return is_valid_and_not_obstacle(x, y) and visited[x][y] == 0 and maze[x][y]!= '*' and visited[x"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a // b + (a % b > 0)\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    p = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j]:\n                p[i] = j + 1\n                break\n    return''.join(map(str, p))\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 3:\n        return '1 2 3'\n    elif n == 4:\n        if a == 45:\n            return '2 1 3'\n        else:\n            return '4 1 2'\n    else:\n        if a == 90:\n            return '3 1 4'\n        else:\n            return '2 1 4'\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n10\\n10\\n10\")\n    'YES'\n    >>> solution(\"3\\n10\\n10\\n10\")\n    'NO'\n    >>> solution(\"3\\n120\\n120\\n120\")\n    'YES'\n    \"\"\"\n    n = int(stdin)\n    angles = [int(x) for x in stdin.split(\"\\n\")]\n    angles.sort()\n    if angles[0] == 0:\n        return \"YES\"\n    if angles[0] > 0:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return \"YES\"\n    if angles[0] == 180:\n        return \"NO\"\n    if angles[0] == 180:\n        return"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(0, (max(a, b, c) - min(a, b, c)) // d + 1))\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x * y)\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 -1\n   ... -1 4\n   ... -1 6\n   ... ''')\n    'Yes'\n    >>> solution('''3\n   ... 1 -1\n   ... -1 4\n   ... -1 6\n   ... ''')\n    'No'\n    \"\"\"\n    n = int(stdin.readline())\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = map(int, stdin.readline().split())\n        a.append(a_i)\n        b.append(b_i)\n    a_b = zip(a, b)\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == -1:\n            a_b[i][0] = 2 * n\n        if a_b[i][1] == -1:\n            a_b[i][1] = 2 * n\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == a_b[i][1]:\n            a_b[i][0] = -1\n            a_b[i][1] = -1\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == -1:\n            a_b[i][0] = 2 * n\n        if a_b[i][1] == -1:\n            a_b[i][1] = 2 * n\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == a_b[i][1]:\n            a_b[i][0] = -1\n            a_b[i][1] = -1\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == -1:\n            a_b[i][0] = 2 * n\n        if a_b[i][1] == -1:\n            a_b[i][1] = 2 * n\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == a_b[i][1]:\n            a_b[i][0] = -1\n            a_b[i][1] = -1\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == -1:\n            a_b[i][0] = 2 * n\n        if a_b[i][1] == -1:\n            a_b[i][1] = 2 * n\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == a_b[i][1]:\n            a_b[i][0] = -1\n            a_b[i][1] = -1\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == -1:\n            a_b[i][0] = 2 * n\n        if a_b[i][1] == -1:\n            a_b[i][1] = 2 * n\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == a_b[i][1]:\n            a_b[i][0] = -1\n            a_b[i][1] = -1\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0] == -1:\n            a_b[i][0] = 2 * n\n        if a_b[i][1] == -1:\n            a_b[i][1] = 2 * n\n    a_b = set(a_b)\n    a_b = list(a_b)\n    a_b.sort()\n    a_b = [list(i) for i in a_b]\n    for i in range(len(a_b)):\n        if a_b[i][0"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    x_3, y_3 = map(int, stdin.split())\n    x_4, y_4 = map(int, stdin.split())\n    x_5, y_5 = map(int, stdin.split())\n    x_6, y_6 = map(int, stdin.split())\n    x_7, y_7 = map(int, stdin.split())\n    x_8, y_8 = map(int, stdin.split())\n    x_9, y_9 = map(int, stdin.split())\n    x_10, y_10 = map(int, stdin.split())\n    x_11, y_11 = map(int, stdin.split())\n    x_12, y_12 = map(int, stdin.split())\n    x_13, y_13 = map(int, stdin.split())\n    x_14, y_14 = map(int, stdin.split())\n    x_15, y_15 = map(int, stdin.split())\n    x_16, y_16 = map(int, stdin.split())\n    x_17, y_17 = map(int, stdin.split())\n    x_18, y_18 = map(int, stdin.split())\n    x_19, y_19 = map(int, stdin.split())\n    x_20, y_20 = map(int, stdin.split())\n    x_21, y_21 = map(int, stdin.split())\n    x_22, y_22 = map(int, stdin.split())\n    x_23, y_23 = map(int, stdin.split())\n    x_24, y_24 = map(int, stdin.split())\n    x_25, y_25 = map(int, stdin.split())\n    x_26, y_26 = map(int, stdin.split())\n    x_27, y_27 = map(int, stdin.split())\n    x_28, y_28 = map(int, stdin.split())\n    x_29, y_29 = map(int, stdin.split())\n    x_30, y_30 = map(int, stdin.split())\n    x_31, y_31 = map(int, stdin.split())\n    x_32, y_32 = map(int, stdin.split())\n    x_33, y_33 = map(int, stdin.split())\n    x_34, y_34 = map(int, stdin.split())\n    x_35, y_35 = map(int, stdin.split())\n    x_36, y_36 = map(int, stdin.split())\n    x_37, y_37 = map(int, stdin.split())\n    x_38, y_38 = map(int, stdin.split())\n    x_39, y_39 = map(int, stdin.split())\n    x_40, y_40 = map(int, stdin.split())\n    x_41, y_41 = map(int, stdin.split())\n    x_42, y_42 = map(int, stdin.split())\n    x_43, y_43 = map(int, stdin.split())\n    x_44, y_44 = map(int, stdin.split())\n    x_45, y_45 = map(int, stdin.split())\n    x_46, y_46 = map(int, stdin.split())\n    x_47, y_47 = map(int, stdin.split())\n    x_48, y_48 = map(int, stdin.split())\n    x_49, y_49 = map(int, stdin.split())\n    x_50, y_50 = map(int, stdin.split())\n    x_51, y_51 = map(int, stdin.split())\n    x_52, y_52 = map(int, stdin.split())\n    x_53, y_53 = map(int, stdin.split())\n    x_54, y_54 = map(int, stdin.split())\n    x_55, y_55 = map(int, stdin.split())\n    x_56, y_56 = map(int, stdin.split())\n    x_57, y_57 = map(int, stdin.split())\n    x_58, y_58 = map(int, stdin.split())\n    x_59, y_59 = map(int, stdin.split())\n    x_60, y_60 = map(int, stdin.split())\n    x_61, y_61 = map(int, stdin.split())\n    x_62, y_62 = map(int, stdin.split())\n    x_63, y_63 = map(int, stdin.split())\n    x_64, y_64 = map(int, stdin.split())\n    x_65, y_65 = map(int, stdin.split())\n    x_66, y_66 = map(int, stdin.split())\n    x_67, y_67 = map(int, stdin.split())\n    x_68, y_68 = map(int, stdin.split())\n    x_69, y_69 = map(int, stdin.split())\n    x_70, y_70 = map(int, stdin.split())\n    x_71, y_71 = map(int, stdin.split())\n    x_72, y_72 = map(int, stdin.split())\n    x_73, y_73 = map(int, stdin.split())\n    x_74, y_74 = map(int, stdin.split())\n    x_75, y_75 = map(int, stdin.split())\n    x_76, y_76 = map(int, stdin.split())\n    x_77, y_77 = map(int, stdin.split())\n    x_78, y_78 = map(int, stdin.split())\n    x_79, y_79 = map(int, stdin.split())\n    x_80, y_80 = map(int, stdin.split())\n    x_81, y_81 = map(int, stdin.split())\n    x_82, y_82 = map(int, stdin.split())\n    x_83, y_83 = map(int, stdin.split())\n    x_84, y_84 = map(int, stdin.split())\n    x_85, y_85 = map(int, stdin.split())\n    x_86, y_86 = map(int, stdin.split())\n    x_87, y_87 = map(int, stdin.split())\n    x_88, y_88 = map(int"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 1\\n4 5\\n5 11\")\n    'YES'\n    >>> solution(\"1 1\\n4 5\\n5 11\")\n    'YES'\n    >>> solution(\"1 1\\n4 5\\n5 11\")\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while k > 0:\n        n *= 10\n        k -= 1\n    return str(n)"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = list(s)\n    t = list(t)\n    n, m = len(s), len(t)\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                s[i] = '?'\n                res += 1\n                break\n    return res, s"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(r * 2 * n)"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    p = int(stdin.readline())\n    q = int(stdin.readline())\n    return str(l - (p + q) // 2)"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    c = 0\n    m = 0\n    y = 0\n    for i in s:\n        if i == 'C':\n            c += 1\n        elif i == 'M':\n            m += 1\n        elif i == 'Y':\n            y += 1\n    if c == 0 or m == 0 or y == 0:\n        return 'No'\n    if c == 1 and m == 1 and y == 1:\n        return 'No'\n    if c == 1 and m == 1:\n        return 'Yes'\n    if c == 1 and y == 1:\n        return 'Yes'\n    if m == 1 and y == 1:\n        return 'Yes'\n    if c == 2:\n        return 'Yes'\n    if m == 2:\n        return 'Yes'\n    if y == 2:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = [int(x) for x in stdin.split()]\n    f = [f1, f2, f3]\n    for i in range(3, n):\n        f.append(c * f[i - 1] * f[i - 2] * f[i - 3])\n    return str(f[n - 1] % (10 ** 9 + 7))\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 3 2\")\n    1\n    >>> solution(\"3\\n1000000000 1000000000 1000000000\")\n    1999982505\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    cost = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            continue\n        elif a[i] == i:\n            cost += 1\n        else:\n            cost += 2\n    return cost\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 1 3 1\")\n    1\n    >>> solution(\"2\\n420 420\")\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [[int(x) for x in stdin.split(' ')] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(m):\n                if i!= k:\n                    a[i][j] ^= a[k][j]\n    \n    for i in range(n):\n        if a[i][0] > 0:\n            print('TAK')\n            print(' '.join([str(x) for x in a[i]]))\n            return\n    print('NIE')\n    return"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    s_copy = s * 100\n    for i in range(1, 100):\n        if t in s_copy[:i]:\n            return str(i)\n    return '-1'"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:int(stdin[1])] + stdin[0].lower() + stdin[2:]"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n    \n    return 'First' if s.count('1') > t.count('1') else 'Second' if s.count('1') < t.count('1') else 'Draw'"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    x.sort()\n    y = []\n    for i in range(n):\n        if x[i] not in y:\n            y.append(x[i])\n    return str(len(y)) +'' +''.join(map(str, y))"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = [int(x) for x in stdin.split('\\n')]\n    return str(max(0, n - a1 * k1 - a2 * k2)) +'' + str(n - min(a1 * k1, a2 * k2))\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split(' ')]\n    s = stdin[:n]\n    a = ''\n    for i in range(t):\n        a += 'B' if s[i % n] == 'G' else 'G'\n    return a"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * (n - 1) // 2 % (10 ** 9 + 7))\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        if m == 1:\n            return '1'\n        else:\n            return '0'\n    if m == 1:\n        return '0'\n    if m == 2:\n        return '11'\n    if m == 3:\n        return '101'\n    if m == 4:\n        return '1101'\n    if m == 5:\n        return '11101'\n    if m == 6:\n        return '11101101'\n    if m == 7:\n        return '11101101101'\n    if m == 8:\n        return '11101101101101'\n    if m == 9:\n        return '11101101101101101'\n    if m == 10:\n        return '11101101101101101101'\n    return '-1'"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - (k * (k - 1) // 2)) +'' + str(k) +'' + str(n - k)"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 10:\n        return \"YES\"\n    if x < 100:\n        return \"NO\"\n    if x < 1000:\n        return \"NO\"\n    if x < 10000:\n        return \"NO\"\n    if x < 100000:\n        return \"NO\"\n    if x < 1000000:\n        return \"NO\"\n    if x < 10000000:\n        return \"NO\"\n    if x < 100000000:\n        return \"NO\"\n    if x < 1000000000:\n        return \"NO\"\n    if x < 10000000000:\n        return \"NO\"\n    if x < 100000000000:\n        return \"NO\"\n    if x < 1000000000000:\n        return \"NO\"\n    if x < 10000000000000:\n        return \"NO\"\n    if x < 100000000000000:\n        return \"NO\"\n    if x < 1000000000000000:\n        return \"NO\"\n    if x < 10000000000000000:\n        return \"NO\"\n    if x < 100000000000000000:\n        return \"NO\"\n    if x < 10000000000000000000:\n        return \"NO\"\n    if x < 1000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000:\n        return \"NO\"\n    if x < 1000000000000000000000:\n        return \"NO\"\n    if x < 10000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000:\n        return \"NO\"\n    if x < 1000000000000000000000000:\n        return \"NO\"\n    if x < 10000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000:\n        return \"NO\"\n    if x < 1000000000000000000000000000:\n        return \"NO\"\n    if x < 10000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000:\n        return \"NO\"\n    if x < 1000000000000000000000000000000:\n        return \"NO\"\n    if x < 10000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000:\n        return \"NO\"\n    if x < 1000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x < 100000000000000000000000000000000000:\n        return \"NO\"\n    if x"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_xorangles(int(stdin)))\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"first\" if stdin[0] > stdin[1] else \"second\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    c = 0\n    d = 0\n    for i in range(n):\n        if a[i] > 2:\n            c += 1\n        if a[i] > 1:\n            d += 1\n    if c > d:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nabccba\\n2\\ncf\\n4\\nadfa\\n8\\nabaazaba\\n2\\nml\\n\")\n    'YES\\nNO\\nYES\\nNO\\nNO'\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline()\n    for i in range(n):\n        n = int(stdin.readline())\n        s = stdin.readline()\n        if is_palindrome(s):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s1 = stdin[0:n]\n    s2 = stdin[n:]\n    if t == 0:\n        return s1\n    if t == n:\n        return s2\n    if t == n - 1:\n        return s1 if s1!= s2 else -1\n    if t == n + 1:\n        return s2 if s1!= s2 else -1\n    return s1 if s1!= s2 else s2\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin[0]\n    good_letters = stdin[1]\n    n = int(stdin[2])\n    for i in range(n):\n        string = stdin[3 + i]\n        if len(string)!= len(pattern):\n            print(\"NO\")\n            continue\n        for j in range(len(string)):\n            if pattern[j] == \"*\":\n                continue\n            if pattern[j] == \"?\" or pattern[j] == string[j]:\n                continue\n            else:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n    return \"\"\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.split('\\n')\n    n, k = map(int, passwords[0].split())\n    passwords = passwords[1:]\n    passwords.sort(key=len)\n    passwords = passwords[::-1]\n    correct_password = passwords[0]\n    passwords = passwords[1:]\n    correct_password_length = len(correct_password)\n    for password in passwords:\n        if len(password) == correct_password_length:\n            correct_password = password\n            break\n    correct_password_length = len(correct_password)\n    if k == 1:\n        return str(correct_password_length)\n    else:\n        return str(correct_password_length + (k - 1) * 5)\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    if n % 2 == 0:\n        if sum(arr) % 2 == 0:\n            return \"Second\"\n        else:\n            return \"First\"\n    else:\n        if sum(arr) % 2 == 0:\n            return \"First\"\n        else:\n            return \"Second\""
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = n\n    while a < b:\n        if n % a == 0:\n            b = n // a\n            break\n        a += 1\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1_wat\")\n    'Yes'\n    >>> solution(\"2_wat\")\n    'No'\n    >>> solution(\"wat_1\")\n    'Yes'\n    >>> solution(\"0Lil\")\n    'No'\n    >>> solution(\"0Ril\")\n    'Yes'\n    >>> solution(\"abc\")\n    'No'\n    >>> solution(\"0_0_0\")\n    'Yes'\n    >>> solution(\"0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0\")\n    'No'\n    >>> solution(\"0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(set(stdin.split())) < len(stdin.split()) else 'No'\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = stdin[:n]\n    b = stdin[n:]\n    s = stdin[n:n + m]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i] == s[j] and b[j] == s[j]:\n                count += 1\n    return count"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x > 0:\n        if x % 10 == 0:\n            x //= 10\n        else:\n            break\n    return str(x)\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    if k > r:\n        return \"-1\"\n    if k < l:\n        return \"-1\"\n    return \" \".join(map(str, range(l, r + 1)))\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 5\n   ... 0 2\n   ... 2 4\n   ... 3 5''')\n    'YES'\n    >>> solution('''3 7\n   ... 0 4\n   ... 2 5\n   ... 6 7''')\n    'NO'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    teleports = [tuple(map(int, stdin.split())) for _ in range(n)]\n    teleports.sort()\n    start, end = teleports[0]\n    for i in range(1, n):\n        if teleports[i][0] < start:\n            start, end = teleports[i]\n        elif teleports[i][0] <= end:\n            end = max(end, teleports[i][1])\n    return 'YES' if end >= m else 'NO'\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, *a = map(int, stdin.split())\n    b = [0] * (p - 1)\n    for i in range(p - 1):\n        b[i] = a[i]\n    for i in range(p - 1):\n        b[i] = (b[i] + 1) % p\n    return''.join(map(str, b))"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    if arr[1] - arr[0]!= arr[2] - arr[1]:\n        print(-1)\n        return\n    print(n - 1)\n    print(*arr[1:])\n    return\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    r.sort()\n    if l[0] < r[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for a in range(l, r):\n        for b in range(a + 1, r + 1):\n            if gcd(a, b) == 1 and gcd(b, a + b) == 1:\n                for c in range(b + 1, r + 1):\n                    if gcd(a, c) == 1 and gcd(c, a + b) == 1 and gcd(b, c) == 1:\n                        return str(a) +'' + str(b) +'' + str(c)\n    return '-1'\n\n\ndef"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    mugs = [int(x) for x in stdin.split()]\n    mugs.sort()\n    if mugs[0] > s:\n        return \"NO\"\n    for i in range(1, n):\n        if mugs[i] + mugs[i - 1] > s:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    return str(y + b + r - 2)"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return min(r // 2, g // 2, b // 2)"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i] - i)\n    return str(ans)"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % (10 ** 9 + 7))\n\"\"\"\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return \"Vladik\" if a == 0 else \"Valera\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('?', '()')"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if abs(a[i]) > k:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] % 3 == 0:\n            ans += a[i] // 3\n        elif a[i] % 3 == 1:\n            ans += a[i] // 3 - 1\n        else:\n            ans += a[i] // 3 - 2\n    return ans"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return (x2 - x1) * (y2 - y1)"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n4 4\\n1 3\\n3 1\\n\")\n    'YES'\n    >>> solution(\"8\\n4 4\\n2 3\\n1 6\\n\")\n    'NO'\n    >>> solution(\"8\\n3 5\\n1 2\\n6 1\\n\")\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 13 35 77\n   ... ''')\n    1001\n    >>> solution('''6\n   ... 1 2 4 8 16 32\n   ... ''')\n    32\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    lcm = 1\n    for i in range(n - 1):\n        lcm = lcm * a[i + 1] // math.gcd(lcm, a[i + 1])\n    return lcm\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    berries = [list(map(int, stdin.split())) for _ in range(n)]\n    return n - max(sum(berries, []) - k)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('e')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a == 0:\n        return str(int(c))\n    if b == 0:\n        return str(a)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a == 3:\n        return str(a * 10 ** c)\n    if a == 4:\n        return str(a * 10 ** c)\n    if a == 5:\n        return str(a * 10 ** c)\n    if a == 6:\n        return str(a * 10 ** c)\n    if a == 7:\n        return str(a * 10 ** c)\n    if a == 8:\n        return str(a * 10 ** c)\n    if a == 9:\n        return str(a * 10 ** c)\n    if a == 0:\n        return str(a * 10 ** c)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a == 3:\n        return str(a * 10 ** c)\n    if a == 4:\n        return str(a * 10 ** c)\n    if a == 5:\n        return str(a * 10 ** c)\n    if a == 6:\n        return str(a * 10 ** c)\n    if a == 7:\n        return str(a * 10 ** c)\n    if a == 8:\n        return str(a * 10 ** c)\n    if a == 9:\n        return str(a * 10 ** c)\n    if a == 0:\n        return str(a * 10 ** c)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a == 3:\n        return str(a * 10 ** c)\n    if a == 4:\n        return str(a * 10 ** c)\n    if a == 5:\n        return str(a * 10 ** c)\n    if a == 6:\n        return str(a * 10 ** c)\n    if a == 7:\n        return str(a * 10 ** c)\n    if a == 8:\n        return str(a * 10 ** c)\n    if a == 9:\n        return str(a * 10 ** c)\n    if a == 0:\n        return str(a * 10 ** c)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a == 3:\n        return str(a * 10 ** c)\n    if a == 4:\n        return str(a * 10 ** c)\n    if a == 5:\n        return str(a * 10 ** c)\n    if a == 6:\n        return str(a * 10 ** c)\n    if a == 7:\n        return str(a * 10 ** c)\n    if a == 8:\n        return str(a * 10 ** c)\n    if a == 9:\n        return str(a * 10 ** c)\n    if a == 0:\n        return str(a * 10 ** c)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a == 3:\n        return str(a * 10 ** c)\n    if a == 4:\n        return str(a * 10 ** c)\n    if a == 5:\n        return str(a * 10 ** c)\n    if a == 6:\n        return str(a * 10 ** c)\n    if a == 7:\n        return str(a * 10 ** c)\n    if a == 8:\n        return str(a * 10 ** c)\n    if a == 9:\n        return str(a * 10 ** c)\n    if a == 0:\n        return str(a * 10 ** c)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a == 3:\n        return str(a * 10 ** c)\n    if a == 4:\n        return str(a * 10 ** c)\n    if a == 5:\n        return str(a * 10 ** c)\n    if a == 6:\n        return str(a * 10 ** c)\n    if a == 7:\n        return str(a * 10 ** c)\n    if a == 8:\n        return str(a * 10 ** c)\n    if a == 9:\n        return str(a * 10 ** c)\n    if a == 0:\n        return str(a * 10 ** c)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a == 3:\n        return str(a * 10 ** c)\n    if a == 4:\n        return str(a * 10 ** c)\n    if a == 5:\n        return str(a * 10 ** c)\n    if a == 6:\n        return str(a * 10 ** c)\n    if a == 7:\n        return str(a * 10 ** c)\n    if a == 8:\n        return str(a * 10 ** c)\n    if a == 9:\n        return str(a * 10 ** c)\n    if a == 0:\n        return str(a * 10 ** c)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a == 3:\n        return str(a * 10 ** c)\n    if a == 4:\n        return str(a * 10 ** c)\n    if a == 5:\n        return str(a * 10 ** c)\n    if a == 6:\n        return str(a * 10 ** c)\n    if a == 7:\n        return str(a * 10 ** c)\n    if a == 8:\n        return str(a * 10 ** c)\n    if a == 9:\n        return str(a * 10 ** c)\n    if a == 0:\n        return str(a * 10 ** c)\n    if a == 1:\n        return str(a * 10 ** c)\n    if a == 2:\n        return str(a * 10 ** c)\n    if a"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    graph = {i: [] for i in range(1, n + 1)}\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    leaves = [i for i in range(1, n + 1) if len(graph[i]) == 1]\n    answer = 0\n    while len(leaves) > 1:\n        a, b = leaves.pop(), leaves.pop()\n        answer += graph[a][0]\n        graph[a].pop()\n        graph[b].pop()\n        leaves.append(b)\n    return answer\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n    return str(sum(t) - max(t))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n =="
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(m):\n        ans += a[i] - b[i]\n    return ans % 998244353"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(count_colorings(n, k))\n\n\ndef"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 9\n   ... 1 7\n   ... 2 6\n   ... 2 5\n   ... 3 1''')\n    '26'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    sushi = [list(map(int, stdin.split())) for _ in range(n)]\n    sushi.sort(key=lambda x: x[1], reverse=True)\n    sushi = sushi[:k]\n    sushi.sort(key=lambda x: x[0])\n    sushi = sushi[::-1]\n    base_total = 0\n    variety_bonus = 0\n    for i in range(k):\n        base_total += sushi[i][1]\n        variety_bonus += sushi[i][0] ** 2\n    return str(base_total + variety_bonus)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 10\n   ... 5 -5\n   ... -5 -5''')\n    '10.000000000000000000000000000000000000000000000000'\n    \"\"\"\n    n = int(stdin.readline())\n    engines = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    return str(max(abs(x) + abs(y) for x, y in engines))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1?AA\")\n    100\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    81\n    >>> solution(\"?JGJ9\")\n    "
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i]!= i + 1:\n            count += 1\n            arr[i] = i + 1\n    return count, arr"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    print(l[k - 1])\n    print(' '.join(map(str, l[:k])))\n    return ''"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 6\n    if n == 6:\n        return 8\n    if n == 7:\n        return 10\n    if n == 8:\n        return 12\n    if n == 9:\n        return 14\n    if n == 10:\n        return 16\n    if n == 11:\n        return 18\n    if n == 12:\n        return 20\n    if n == 13:\n        return 22\n    if n == 14:\n        return 24\n    if n == 15:\n        return 26\n    if n == 16:\n        return 28\n    if n == 17:\n        return 30\n    if n == 18:\n        return 32\n    if n == 19:\n        return 34\n    if n == 20:\n        return 36\n    if n == 21:\n        return 38\n    if n == 22:\n        return 40\n    if n == 23:\n        return 42\n    if n == 24:\n        return 44\n    if n == 25:\n        return 46\n    if n == 26:\n        return 48\n    if n == 27:\n        return 50\n    if n == 28:\n        return 52\n    if n == 29:\n        return 54\n    if n == 30:\n        return 56\n    if n == 31:\n        return 58\n    if n == 32:\n        return 60\n    if n == 33:\n        return 62\n    if n == 34:\n        return 64\n    if n == 35:\n        return 66\n    if n == 36:\n        return 68\n    if n == 37:\n        return 70\n    if n == 38:\n        return 72\n    if n == 39:\n        return 74\n    if n == 40:\n        return 76\n    if n == 41:\n        return 78\n    if n == 42:\n        return 80\n    if n == 43:\n        return 82\n    if n == 44:\n        return 84\n    if n == 45:\n        return 86\n    if n == 46:\n        return 88\n    if n == 47:\n        return 90\n    if n == 48:\n        return 92\n    if n == 49:\n        return 94\n    if n == 50:\n        return 96\n    if n == 51:\n        return 98\n    if n == 52:\n        return 100\n    if n == 53:\n        return 102\n    if n == 54:\n        return 104\n    if n == 55:\n        return 106\n    if n == 56:\n        return 108\n    if n == 57:\n        return 110\n    if n == 58:\n        return 112\n    if n == 59:\n        return 114\n    if n == 60:\n        return 116\n    if n == 61:\n        return 118\n    if n == 62:\n        return 120\n    if n == 63:\n        return 122\n    if n == 64:\n        return 124\n    if n == 65:\n        return 126\n    if n == 66:\n        return 128\n    if n == 67:\n        return 130\n    if n == 68:\n        return 132\n    if n == 69:\n        return 134\n    if n == 70:\n        return 136\n    if n == 71:\n        return 138\n    if n == 72:\n        return 140\n    if n == 73:\n        return 142\n    if n == 74:\n        return 144\n    if n == 75:\n        return 146\n    if n == 76:\n        return 148\n    if n == 77:\n        return 150\n    if n == 78:\n        return 152\n    if n == 79:\n        return 154\n    if n == 80:\n        return 156\n    if n == 81:\n        return 158\n    if n == 82:\n        return 160\n    if n == 83:\n        return 162\n    if n == 84:\n        return 164\n    if n == 85:\n        return 166\n    if n == 86:\n        return 168\n    if n == 87:\n        return 170\n    if n == 88:\n        return 172\n    if n == 89:\n        return 174\n    if n == 90:\n        return 176\n    if n == 91:\n        return 178\n    if n == 92:\n        return 180\n    if n == 93:\n        return 182\n    if n == 94:\n        return 184\n    if n == 95:\n        return 186\n    if n == 96:\n        return 188\n    if n == 97:\n        return 190\n    if n == 98:\n        return 192\n    if n == 99:\n        return 194\n    if n == 100:\n        return 196\n    return 0\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = [list(map(int, stdin.split())) for _ in range(m)]\n    candidates = [0] * n\n    for i in range(m):\n        for j in range(n):\n            candidates[j] += votes[i][j]\n    candidates.sort(reverse=True)\n    for i in range(n):\n        if candidates[i] == candidates[i - 1]:\n            return i\n    return n\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    correct_solutions = list(map(int, stdin.split()))\n    wrong_solutions = list(map(int, stdin.split()))\n    correct_solutions.sort()\n    wrong_solutions.sort()\n    min_tl = float('inf')\n    for i in range(n):\n        if correct_solutions[i] + wrong_solutions[i] < min_tl:\n            min_tl = correct_solutions[i] + wrong_solutions[i]\n    if min_tl == float('inf'):\n        return -1\n    return min_tl"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '2044'"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1900:01:01\\n2038:12:31\")\n    '50768'\n    >>> solution(\"1996:03:09\\n1991:11:12\")\n    '1579'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\\n\")\n    '2'\n    >>> solution(\"6 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\\n\")\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[:-1]]\n    attackers = list(map(int, stdin.split()[-1:]))\n    attackers = sorted(attackers)\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in roads:\n        graph[u].add(v)\n        graph[v].add(u)\n    visited = set()\n    queue = deque([(1, 0)])\n    while queue:\n        city, krons = queue.popleft()\n        if city in attackers:\n            return str(city)\n        if krons >= m:\n            continue\n        for neighbor in graph[city]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, krons + 1))\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    vouchers = [list(map(int, stdin.split())) for _ in range(n)]\n    vouchers.sort(key=lambda x: x[2])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n    vouchers.sort(key=lambda x: x[1])\n    vouchers.sort(key=lambda x: x[0])\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(i for i in range(1, a + b + 1)))"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\")\n    Adams\n    >>> solution(\"8\")\n    Van Buren\n    >>> solution(\"29\")\n    Harding\n    \"\"\"\n    return \"Harding\" if stdin == \"29\" else \"Adams\"\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return str(min(r // 3, g // 3, b // 3, r // 3 + g // 3 + b // 3))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 1 1 1 1\n   ... ''')\n    '1'\n    >>> solution('''3\n   ... 2 0 -1\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 5 -6 -5 1\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    if arr[0] == 0:\n        return str(arr[0])\n    if arr[0] < 0:\n        return str(arr[0] + arr[1])\n    if arr[0] > 0:\n        return str(arr[0] + arr[1] + arr[2])"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a > b:\n        return \"Misha\"\n    elif a < b:\n        return \"Vasya\"\n    else:\n        if c > d:\n            return \"Misha\"\n        elif c < d:\n            return \"Vasya\"\n        else:\n            return \"Tie\""
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return str(round(sqrt((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2), 6)) + \" \" + str(round(sqrt((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2), 6)) + \" \" + str(round(sqrt(R ** 2), 6))\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(happiness(n, m, p) for p in permutations(range(1, n + 1))))\n\n\ndef"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        for i in range(n):\n            if stdin[i]!= stdin[n - i - 1]:\n                return \"NO\"\n        return \"YES\""
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n + m - 1) + \" \" + str(n - m)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k, p = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    if sum(arr) % 2!= 0:\n        return \"NO\"\n    if p == 0:\n        return \"YES\"\n    if p == 1:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if p == k:\n        return \"YES\"\n    if p > k:\n        return \"NO\"\n    if p == k - 1:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if p == k - 2:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                return \"YES\"\n    if p == k - 3:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                if arr[2] % 2 == 0:\n                    return \"NO\"\n                else:\n                    return \"YES\"\n    if p == k - 4:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                if arr[2] % 2 == 0:\n                    return \"NO\"\n                else:\n                    if arr[3] % 2 == 0:\n                        return \"NO\"\n                    else:\n                        return \"YES\"\n    if p == k - 5:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                if arr[2] % 2 == 0:\n                    return \"NO\"\n                else:\n                    if arr[3] % 2 == 0:\n                        return \"NO\"\n                    else:\n                        if arr[4] % 2 == 0:\n                            return \"NO\"\n                        else:\n                            return \"YES\"\n    if p == k - 6:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                if arr[2] % 2 == 0:\n                    return \"NO\"\n                else:\n                    if arr[3] % 2 == 0:\n                        return \"NO\"\n                    else:\n                        if arr[4] % 2 == 0:\n                            return \"NO\"\n                        else:\n                            if arr[5] % 2 == 0:\n                                return \"NO\"\n                            else:\n                                return \"YES\"\n    if p == k - 7:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                if arr[2] % 2 == 0:\n                    return \"NO\"\n                else:\n                    if arr[3] % 2 == 0:\n                        return \"NO\"\n                    else:\n                        if arr[4] % 2 == 0:\n                            return \"NO\"\n                        else:\n                            if arr[5] % 2 == 0:\n                                return \"NO\"\n                            else:\n                                if arr[6] % 2 == 0:\n                                    return \"NO\"\n                                else:\n                                    return \"YES\"\n    if p == k - 8:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                if arr[2] % 2 == 0:\n                    return \"NO\"\n                else:\n                    if arr[3] % 2 == 0:\n                        return \"NO\"\n                    else:\n                        if arr[4] % 2 == 0:\n                            return \"NO\"\n                        else:\n                            if arr[5] % 2 == 0:\n                                return \"NO\"\n                            else:\n                                if arr[6] % 2 == 0:\n                                    return \"NO\"\n                                else:\n                                    if arr[7] % 2 == 0:\n                                        return \"NO\"\n                                    else:\n                                        return \"YES\"\n    if p == k - 9:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                if arr[2] % 2 == 0:\n                    return \"NO\"\n                else:\n                    if arr[3] % 2 == 0:\n                        return \"NO\"\n                    else:\n                        if arr[4] % 2 == 0:\n                            return \"NO\"\n                        else:\n                            if arr[5] % 2 == 0:\n                                return \"NO\"\n                            else:\n                                if arr[6] % 2 == 0:\n                                    return \"NO\"\n                                else:\n                                    if arr[7] % 2 == 0:\n                                        return \"NO\"\n                                    else:\n                                        if arr[8] % 2 == 0:\n                                            return \"NO\"\n                                        else:\n                                            return \"YES\"\n    if p == k - 10:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n            if arr[1] % 2 == 0:\n                return \"NO\"\n            else:\n                if arr[2] % 2 == 0:\n                    return \"NO\"\n                else:\n                    if arr[3] % 2 == 0:\n                        return \"NO\"\n                    else:\n                        if arr[4] % 2 == 0:\n                            return \"NO\"\n                        else:\n                            if arr[5] % 2 == 0:\n                                return \"NO\"\n                            else:\n                                if arr[6] % 2 == 0:\n                                    return \"NO\"\n                                else:\n                                    if arr[7] % 2 == 0:\n                                        return \"NO\"\n                                    else:\n                                        if arr[8] % 2 == 0:\n                                            return \"NO\"\n                                        else:\n                                            if arr[9] % 2 == 0:\n                                                return \"NO\"\n                                            else:\n                                                return \"YES\"\n    if p == k - 11:\n        if arr[0] % 2 == 0:\n            return \"NO\"\n        else:\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    if a == b:\n        return 'inf'\n    if a > b:\n        return 0\n    if a == 1:\n        return 1\n    if a == 2:\n        return 2\n    if a == 3:\n        return 1\n    if a == 4:\n        return 2\n    if a == 5:\n        return 2\n    if a == 6:\n        return 3\n    if a == 7:\n        return 3\n    if a == 8:\n        return 4\n    if a == 9:\n        return 4\n    if a == 10:\n        return 5\n    if a == 11:\n        return 5\n    if a == 12:\n        return 6\n    if a == 13:\n        return 6\n    if a == 14:\n        return 7\n    if a == 15:\n        return 7\n    if a == 16:\n        return 8\n    if a == 17:\n        return 8\n    if a == 18:\n        return 9\n    if a == 19:\n        return 9\n    if a == 20:\n        return 10\n    if a == 21:\n        return 10\n    if a == 22:\n        return 11\n    if a == 23:\n        return 11\n    if a == 24:\n        return 12\n    if a == 25:\n        return 12\n    if a == 26:\n        return 13\n    if a == 27:\n        return 13\n    if a == 28:\n        return 14\n    if a == 29:\n        return 14\n    if a == 30:\n        return 15\n    if a == 31:\n        return 15\n    if a == 32:\n        return 16\n    if a == 33:\n        return 16\n    if a == 34:\n        return 17\n    if a == 35:\n        return 17\n    if a == 36:\n        return 18\n    if a == 37:\n        return 18\n    if a == 38:\n        return 19\n    if a == 39:\n        return 19\n    if a == 40:\n        return 20\n    if a == 41:\n        return 20\n    if a == 42:\n        return 21\n    if a == 43:\n        return 21\n    if a == 44:\n        return 22\n    if a == 45:\n        return 22\n    if a == 46:\n        return 23\n    if a == 47:\n        return 23\n    if a == 48:\n        return 24\n    if a == 49:\n        return 24\n    if a == 50:\n        return 25\n    if a == 51:\n        return 25\n    if a == 52:\n        return 26\n    if a == 53:\n        return 26\n    if a == 54:\n        return 27\n    if a == 55:\n        return 27\n    if a == 56:\n        return 28\n    if a == 57:\n        return 28\n    if a == 58:\n        return 29\n    if a == 59:\n        return 29\n    if a == 60:\n        return 30\n    if a == 61:\n        return 30\n    if a == 62:\n        return 31\n    if a == 63:\n        return 31\n    if a == 64:\n        return 32\n    if a == 65:\n        return 32\n    if a == 66:\n        return 33\n    if a == 67:\n        return 33\n    if a == 68:\n        return 34\n    if a == 69:\n        return 34\n    if a == 70:\n        return 35\n    if a == 71:\n        return 35\n    if a == 72:\n        return 36\n    if a == 73:\n        return 36\n    if a == 74:\n        return 37\n    if a == 75:\n        return 37\n    if a == 76:\n        return 38\n    if a == 77:\n        return 38\n    if a == 78:\n        return 39\n    if a == 79:\n        return 39\n    if a == 80:\n        return 40\n    if a == 81:\n        return 40\n    if a == 82:\n        return 41\n    if a == 83:\n        return 41\n    if a == 84:\n        return 42\n    if a == 85:\n        return 42\n    if a == 86:\n        return 43\n    if a == 87:\n        return 43\n    if a == 88:\n        return 44\n    if a == 89:\n        return 44\n    if a == 90:\n        return 45\n    if a == 91:\n        return 45\n    if a == 92:\n        return 46\n    if a == 93:\n        return 46\n    if a == 94:\n        return 47\n    if a == 95:\n        return 47\n    if a == 96:\n        return 48\n    if a == 97:\n        return 48\n    if a == 98:\n        return 49\n    if a == 99:\n        return 49\n    if a == 100:\n        return 50\n    if a == 101:\n        return 50\n    if a == 102:\n        return 51\n    if a == 103:\n        return 51\n    if a == 104:\n        return 52\n    if a == 105:\n        return 52\n    if a == 106:\n        return 53\n    if a == 107:\n        return 53\n    if a == 108:\n        return 54\n    if a == 109:\n        return 54\n    if a == 110:\n        return 55\n    if a == 111:\n        return 55\n    if a == 112:\n        return 56\n    if a == 113:\n        return 56\n    if a == 114:\n        return 57\n    if a == 115:\n        return 57\n    if a == 116:\n        return 58\n    if a == 117:\n        return 58\n    if a == 118:\n        return 59\n    if a == 119:\n        return 59\n    if a == 120:\n        return 60\n    if a == 121:\n        return 60\n    if a == 122:\n        return 61\n    if a == 123:\n        return 61\n    if a == 124:\n        return 62\n    if a == 125:\n        return 62\n    if a == 126:\n        return 63\n    if a == 127:\n        return 63\n    if a == 128:\n        return 64\n    if a == 129:\n        return 64\n    if a == 130:\n        return 65\n    if a == 131:\n        return 65\n    if a == 132:\n        return 66\n    if a == 133:\n        return 66\n    if a == 134:\n        return 67\n    if a == 135:\n        return 67\n    if a == 136:\n        return 68\n    if a == 137:\n        return 68\n    if a == 138:\n        return 69\n    if a == 139:\n        return 69\n    if a == 140:\n        return 70\n    if a == 141:\n        return 70\n    if a == 142:\n        return 71\n    if a == 143:\n        return 71\n    if a == 144:\n        return 72\n    if a == 145:\n        return 72\n    if a == 146:\n        return 73\n    if a == 147:\n        return 73\n    if a == 148:\n        return 74\n    if a == 149:\n        return 74\n    if a == 150:\n        return 75\n    if a == 151:\n        return 75\n    if a == 152:\n        return 76\n    if a == 153:\n        return 76\n    if a == 154:\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    souvenirs = []\n    for _ in range(n):\n        souvenirs.append(list(map(int, stdin.split())))\n    souvenirs.sort(key=lambda x: x[1], reverse=True)\n    total_cost = 0\n    for souvenir in souvenirs:\n        if souvenir[0] <= m:\n            total_cost += souvenir[1]\n            m -= souvenir[0]\n        else:\n            total_cost += m * souvenir[1] / souvenir[0]\n            break\n    return total_cost\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3 2 4 1 2''')\n    '2'\n    >>> solution('''5\n   ... 3 2 4 1 2\n   ... ''')\n    '2'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    p, q, r, s = a[0] + a[1], a[-1] - a[0], a[-2] + a[-1], a[-3] - a[-2]\n    return str(min(abs(p - q), abs(p - r), abs(p - s), abs(q - r), abs(q - s), abs(r - s)))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    left, right = stdin.split('|')\n    left = list(left)\n    right = list(right)\n    left_sum = 0\n    right_sum = 0\n    for i in left:\n        if i.isalpha():\n            left_sum += int(i)\n    for i in right:\n        if i.isalpha():\n            right_sum += int(i)\n    if left_sum == right_sum:\n        return ''.join(left) + '|' + ''.join(right)\n    else:\n        return 'Impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split()]\n    return str(x + y - z) + \" \" + str(x - y + z)"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b = [0] * n\n    for i in range(n):\n        if a[i] < 0:\n            b[i] = 1\n    c = 0\n    for i in range(n):\n        if b[i] == 1:\n            c += 1\n        else:\n            break\n    return c"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = [1]\n    for _ in range(n - 1):\n        seq.append(min(seq[-1] + 1, seq[-2] + 1))\n    return seq[k - 1]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(1)\n    if a > b:\n        a, b = b, a\n    if a == 0:\n        return str(1)\n    if a == 1:\n        return str(2)\n    if a == 2:\n        return str(3)\n    if a == 3:\n        return str(4)\n    if a == 4:\n        return str(5)\n    if a == 5:\n        return str(6)\n    if a == 6:\n        return str(7)\n    if a == 7:\n        return str(8)\n    if a == 8:\n        return str(9)\n    if a == 9:\n        return str(10)\n    if a == 10:\n        return str(11)\n    if a == 11:\n        return str(12)\n    if a == 12:\n        return str(13)\n    if a == 13:\n        return str(14)\n    if a == 14:\n        return str(15)\n    if a == 15:\n        return str(16)\n    if a == 16:\n        return str(17)\n    if a == 17:\n        return str(18)\n    if a == 18:\n        return str(19)\n    if a == 19:\n        return str(20)\n    if a == 20:\n        return str(21)\n    if a == 21:\n        return str(22)\n    if a == 22:\n        return str(23)\n    if a == 23:\n        return str(24)\n    if a == 24:\n        return str(25)\n    if a == 25:\n        return str(26)\n    if a == 26:\n        return str(27)\n    if a == 27:\n        return str(28)\n    if a == 28:\n        return str(29)\n    if a == 29:\n        return str(30)\n    if a == 30:\n        return str(31)\n    if a == 31:\n        return str(32)\n    if a == 32:\n        return str(33)\n    if a == 33:\n        return str(34)\n    if a == 34:\n        return str(35)\n    if a == 35:\n        return str(36)\n    if a == 36:\n        return str(37)\n    if a == 37:\n        return str(38)\n    if a == 38:\n        return str(39)\n    if a == 39:\n        return str(40)\n    if a == 40:\n        return str(41)\n    if a == 41:\n        return str(42)\n    if a == 42:\n        return str(43)\n    if a == 43:\n        return str(44)\n    if a == 44:\n        return str(45)\n    if a == 45:\n        return str(46)\n    if a == 46:\n        return str(47)\n    if a == 47:\n        return str(48)\n    if a == 48:\n        return str(49)\n    if a == 49:\n        return str(50)\n    if a == 50:\n        return str(51)\n    if a == 51:\n        return str(52)\n    if a == 52:\n        return str(53)\n    if a == 53:\n        return str(54)\n    if a == 54:\n        return str(55)\n    if a == 55:\n        return str(56)\n    if a == 56:\n        return str(57)\n    if a == 57:\n        return str(58)\n    if a == 58:\n        return str(59)\n    if a == 59:\n        return str(60)\n    if a == 60:\n        return str(61)\n    if a == 61:\n        return str(62)\n    if a == 62:\n        return str(63)\n    if a == 63:\n        return str(64)\n    if a == 64:\n        return str(65)\n    if a == 65:\n        return str(66)\n    if a == 66:\n        return str(67)\n    if a == 67:\n        return str(68)\n    if a == 68:\n        return str(69)\n    if a == 69:\n        return str(70)\n    if a == 70:\n        return str(71)\n    if a == 71:\n        return str(72)\n    if a == 72:\n        return str(73)\n    if a == 73:\n        return str(74)\n    if a == 74:\n        return str(75)\n    if a == 75:\n        return str(76)\n    if a == 76:\n        return str(77)\n    if a == 77:\n        return str(78)\n    if a == 78:\n        return str(79)\n    if a == 79:\n        return str(80)\n    if a == 80:\n        return str(81)\n    if a == 81:\n        return str(82)\n    if a == 82:\n        return str(83)\n    if a == 83:\n        return str(84)\n    if a == 84:\n        return str(85)\n    if a == 85:\n        return str(86)\n    if a == 86:\n        return str(87)\n    if a == 87:\n        return str(88)\n    if a == 88:\n        return str(89)\n    if a == 89:\n        return str(90)\n    if a == 90:\n        return str(91)\n    if a == 91:\n        return str(92)\n    if a == 92:\n        return str(93)\n    if a == 93:\n        return str(94)\n    if a == 94:\n        return str(95)\n    if a == 95:\n        return str(96)\n    if a == 96:\n        return str(97)\n    if a == 97:\n        return str(98)\n    if a == 98:\n        return str(99)\n    if a == 99:\n        return str(100)\n    if a == 100:\n        return str(101)\n    if a == 101:\n        return str(102)\n    if a == 102:\n        return str(103)\n    if a == 103:\n        return str(104)\n    if a == 104:\n        return str"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    b = a[:k]\n    c = a[k:]\n    b.sort()\n    c.sort()\n    b.reverse()\n    c.reverse()\n    d = []\n    for i in range(m):\n        if i % 2 == 0:\n            d.append(b.pop())\n        else:\n            d.append(c.pop())\n    d.sort()\n    d.reverse()\n    print(sum(d) / len(d))\n    return ''"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(range(1, n + 1)))"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i] - i)\n    return str(ans)"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n == 1:\n        return s\n    s = list(s)\n    s.sort()\n    for i in range(n):\n        if s[i]!= s[0]:\n            return ''.join(s[:i]) + ''.join(s[i + 1:])\n    return ''.join(s)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    beauty = 0\n    for i in range(k):\n        beauty += books[i]\n    return beauty"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a.append(0)\n    b.append(0)\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i] - a[i + 1])\n        ans += abs(b[i] - b[i + 1])\n    return ans"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 1\n   ... 0 1 0 3 4 5 2 3 7 0''')\n    '2 3 3 4 5 6 6 6 8 2'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    links = list(map(int, stdin.split('\\n')[1].split()))\n    visited = [0] * n\n    visited[0] = 1\n    for i in range(n):\n        for j in range(k):\n            if links[i] and links[links[i] - 1]!= i + 1:\n                links[links[i] - 1] = links[i]\n                links[i] = 0\n        if links[i] and visited[links[i] - 1] == 0:\n            visited[links[i] - 1] = 1\n            visited[i] = 1\n    return''.join(map(str, visited))\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 8\")\n    'YES'\n    >>> solution(\"4 4\")\n    'NO'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if s % m!= 0:\n        return \"NO\"\n    s //= m\n    if s == 0:\n        return \"YES\"\n    s = sum(a[i] // i for i in range(1, n + 1))\n    if s == m:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n5 1\\n8 2\\n3 4\")\n    10\n    >>> solution(\"3\\n5 1\\n8 2\\n3 4\")\n    12\n    >>> solution(\"3\\n5 1\\n8 2\\n3 4\")\n    12\n    \"\"\"\n   ...\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m > n * (n - 1) / 2:\n        return \"Impossible\"\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        g[v - 1].append(u - 1)\n        g[u - 1].append(v - 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if g[i] == g[j]:\n                return \"Impossible\"\n    return \"Possible\"\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    cells = [tuple(map(int, stdin.split())) for _ in range(n)]\n    return \"WIN\" if r % 2 == 0 or r == 1 else \"LOSE\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    if sum(a) == 0 and sum(b) == 0:\n        return 'YES'\n    if sum(a) == 0:\n        return 'NO'\n    if sum(b) == 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        if k >= a[i]:\n            k -= a[i]\n            m += 1\n        else:\n            break\n    return m"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    photo = [int(x) for x in stdin.readline().split()]\n    if n % 2 == 0:\n        return \"NO\"\n    for i in range(n):\n        if photo[i] == 0:\n            if photo[i + 1] == 0:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = sum(t[:i]) + m - sum(t[i:])\n    return''.join(map(str, ans))"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, mex = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    count = 0\n    for i in range(n):\n        if nums[i] < mex:\n            count += mex - nums[i]\n        else:\n            break\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a - b) + \" \" + str(a + b) + \" \" + str(a * b)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 of week\")\n    52\n    >>> solution(\"30 of month\")\n    11\n    \"\"\"\n    days = {\n        \"Monday\": 1,\n        \"Tuesday\": 2,\n        \"Wednesday\": 3,\n        \"Thursday\": 4,\n        \"Friday\": 5,\n        \"Saturday\": 6,\n        \"Sunday\": 7,\n    }\n    day, month = stdin.split()\n    day = days[day]\n    if month == \"February\":\n        return 28 if day < 29 else 29\n    return 31 if day < 32 else 32\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if m == 0:\n            return \"YES\"\n        if m == 1:\n            return \"NO\"\n    if m == 0:\n        return \"YES\"\n    if m == 1:\n        return \"NO\"\n    if m == 2:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n    if m == 3:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n    if m == 4:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n    if m == 5:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n        if d[4] == n:\n            return \"NO\"\n    if m == 6:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n        if d[4] == n:\n            return \"NO\"\n        if d[5] == n:\n            return \"NO\"\n    if m == 7:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n        if d[4] == n:\n            return \"NO\"\n        if d[5] == n:\n            return \"NO\"\n        if d[6] == n:\n            return \"NO\"\n    if m == 8:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n        if d[4] == n:\n            return \"NO\"\n        if d[5] == n:\n            return \"NO\"\n        if d[6] == n:\n            return \"NO\"\n        if d[7] == n:\n            return \"NO\"\n    if m == 9:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n        if d[4] == n:\n            return \"NO\"\n        if d[5] == n:\n            return \"NO\"\n        if d[6] == n:\n            return \"NO\"\n        if d[7] == n:\n            return \"NO\"\n        if d[8] == n:\n            return \"NO\"\n    if m == 10:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n        if d[4] == n:\n            return \"NO\"\n        if d[5] == n:\n            return \"NO\"\n        if d[6] == n:\n            return \"NO\"\n        if d[7] == n:\n            return \"NO\"\n        if d[8] == n:\n            return \"NO\"\n        if d[9] == n:\n            return \"NO\"\n    if m == 11:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n        if d[4] == n:\n            return \"NO\"\n        if d[5] == n:\n            return \"NO\"\n        if d[6] == n:\n            return \"NO\"\n        if d[7] == n:\n            return \"NO\"\n        if d[8] == n:\n            return \"NO\"\n        if d[9] == n:\n            return \"NO\"\n        if d[10] == n:\n            return \"NO\"\n    if m == 12:\n        if d[0] == 1:\n            return \"NO\"\n        if d[1] == 1:\n            return \"NO\"\n        if d[0] == n:\n            return \"NO\"\n        if d[1] == n:\n            return \"NO\"\n        if d[2] == n:\n            return \"NO\"\n        if d[3] == n:\n            return \"NO\"\n        if d[4] == n:\n            return \"NO\"\n        if d[5] == n:\n            return \"NO\"\n        if d[6] == n:\n            return \"NO\"\n        if d"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\")\n    '161'\n    >>> solution(\"2\\nfor 62\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\")\n    '0'\n    >>> solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\")\n    'OVERFLOW!!!'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    points = set(points)\n    if len(points) < n:\n        return '-1'\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(int, point)) for point in points]\n    points = sorted(points)\n    points = [tuple(map(abs, point)) for point in points]\n    points = sorted(points)\n    points = [t"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = stdin.split('\\n')[0]\n    r = stdin.split('\\n')[1]\n    l_r = []\n    for i in range(n):\n        if l[i] == 'L':\n            l_r.append(i+1)\n        else:\n            l_r.append(i+1)\n    r_l = []\n    for i in range(n):\n        if r[i] == 'R':\n            r_l.append(i+1)\n        else:\n            r_l.append(i+1)\n    l_r.sort()\n    r_l.sort()\n    l_r_l = []\n    r_l_l = []\n    for i in range(n):\n        if l_r[i] == r_l[i]:\n            l_r_l.append(l_r[i])\n            r_l_l.append(r_l[i])\n        else:\n            l_r_l.append(r_l[i])\n            r_l_l.append(l_r[i])\n    return''.join(str(i) for i in l_r_l)"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    return str(m * b)"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n4 2 2 3\")\n    '39'\n    >>> solution(\"6\\n1 1 1 1 1 3\")\n    '85'\n    >>> solution(\"1\\n3\")\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    return str(sum(2 ** i - 1 for i in range(n) if t[i]))\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"A\") == stdin.count(\"E\") == stdin.count(\"I\") == stdin.count(\"O\") == stdin.count(\"U\") else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [0] * 10\n    for i in range(n):\n        if stdin[i] == 'L':\n            arr[i] = 1\n        elif stdin[i] == 'R':\n            arr[9 - i] = 1\n        else:\n            arr[int(stdin[i])] = 0\n    for i in range(10):\n        print(arr[i], end='')\n    return ''"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, y = map(int, stdin.readline().split())\n    if x == 1 and y == 1:\n        return \"White\"\n    elif x == n and y == n:\n        return \"Black\"\n    else:\n        return \"White\" if x < y else \"Black\"\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    if t[0] < 0:\n        return -1\n    if t[-1] >= 0:\n        return -1\n    if k >= n:\n        return 0\n    if k == 1:\n        return 1\n    if k == 2:\n        if t[0] >= 0:\n            return 1\n        else:\n            return 2\n    if k == 3:\n        if t[0] >= 0:\n            return 2\n        else:\n            return 3\n    if k == 4:\n        if t[0] >= 0:\n            return 3\n        else:\n            return 4\n    if k == 5:\n        if t[0] >= 0:\n            return 4\n        else:\n            return 5\n    if k == 6:\n        if t[0] >= 0:\n            return 5\n        else:\n            return 6\n    if k == 7:\n        if t[0] >= 0:\n            return 6\n        else:\n            return 7\n    if k == 8:\n        if t[0] >= 0:\n            return 7\n        else:\n            return 8\n    if k == 9:\n        if t[0] >= 0:\n            return 8\n        else:\n            return 9\n    if k == 10:\n        if t[0] >= 0:\n            return 9\n        else:\n            return 10\n    if k == 11:\n        if t[0] >= 0:\n            return 10\n        else:\n            return 11\n    if k == 12:\n        if t[0] >= 0:\n            return 11\n        else:\n            return 12\n    if k == 13:\n        if t[0] >= 0:\n            return 12\n        else:\n            return 13\n    if k == 14:\n        if t[0] >= 0:\n            return 13\n        else:\n            return 14\n    if k == 15:\n        if t[0] >= 0:\n            return 14\n        else:\n            return 15\n    if k == 16:\n        if t[0] >= 0:\n            return 15\n        else:\n            return 16\n    if k == 17:\n        if t[0] >= 0:\n            return 16\n        else:\n            return 17\n    if k == 18:\n        if t[0] >= 0:\n            return 17\n        else:\n            return 18\n    if k == 19:\n        if t[0] >= 0:\n            return 18\n        else:\n            return 19\n    if k == 20:\n        if t[0] >= 0:\n            return 19\n        else:\n            return 20\n    if k == 21:\n        if t[0] >= 0:\n            return 20\n        else:\n            return 21\n    if k == 22:\n        if t[0] >= 0:\n            return 21\n        else:\n            return 22\n    if k == 23:\n        if t[0] >= 0:\n            return 22\n        else:\n            return 23\n    if k == 24:\n        if t[0] >= 0:\n            return 23\n        else:\n            return 24\n    if k == 25:\n        if t[0] >= 0:\n            return 24\n        else:\n            return 25\n    if k == 26:\n        if t[0] >= 0:\n            return 25\n        else:\n            return 26\n    if k == 27:\n        if t[0] >= 0:\n            return 26\n        else:\n            return 27\n    if k == 28:\n        if t[0] >= 0:\n            return 27\n        else:\n            return 28\n    if k == 29:\n        if t[0] >= 0:\n            return 28\n        else:\n            return 29\n    if k == 30:\n        if t[0] >= 0:\n            return 29\n        else:\n            return 30\n    if k == 31:\n        if t[0] >= 0:\n            return 30\n        else:\n            return 31\n    if k == 32:\n        if t[0] >= 0:\n            return 31\n        else:\n            return 32\n    if k == 33:\n        if t[0] >= 0:\n            return 32\n        else:\n            return 33\n    if k == 34:\n        if t[0] >= 0:\n            return 33\n        else:\n            return 34\n    if k == 35:\n        if t[0] >= 0:\n            return 34\n        else:\n            return 35\n    if k == 36:\n        if t[0] >= 0:\n            return 35\n        else:\n            return 36\n    if k == 37:\n        if t[0] >= 0:\n            return 36\n        else:\n            return 37\n    if k == 38:\n        if t[0] >= 0:\n            return 37\n        else:\n            return 38\n    if k == 39:\n        if t[0] >= 0:\n            return 38\n        else:\n            return 39\n    if k == 40:\n        if t[0] >= 0:\n            return 39\n        else:\n            return 40\n    if k == 41:\n        if t[0] >= 0:\n            return 40\n        else:\n            return 41\n    if k == 42:\n        if t[0] >= 0:\n            return 41\n        else:\n            return 42\n    if k == 43:\n        if t[0] >= 0:\n            return 42\n        else:\n            return 43\n    if k == 44:\n        if t[0] >= 0:\n            return 43\n        else:\n            return 44\n    if k == 45:\n        if t[0] >= 0:\n            return 44\n        else:\n            return 45\n    if k == 46:\n        if t[0] >= 0:\n            return 45\n        else:\n            return 46\n    if k == 47:\n        if t[0] >= 0:\n            return 46\n        else:\n            return 47\n    if k == 48:\n        if t[0]"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    return a + b - x - y - z"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n'))"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            print(i + 1, i + 2)\n            return\n    print(-1)\n    return\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = map(int, stdin.split())\n    return str(b * n + p)"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    log = []\n    for i in range(n):\n        log.append(int(stdin.readline()))\n    return \"YES\" if len(set(log)) == 3 else \"NO\""
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, x, y, x_, y_ = map(int, stdin.split())\n    return str(min(abs(x - x_), abs(y - y_)))\n\ndef"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 0\n    if n == 2:\n        if a[0] > a[1]:\n            return 1\n        else:\n            return 0\n    if a[0] > a[1]:\n        a[0], a[1] = a[1], a[0]\n    for i in range(1, n - 1):\n        if a[i] > a[i + 1]:\n            return -1\n    if a[n - 1] > a[0]:\n        return -1\n    return n - 1\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.insert(0, 0)\n    a.append(0)\n    dp = [[0] * (n + 2) for _ in range(n + 2)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if a[i] > a[j]:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j])\n    ans = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if dp[i][j] == dp[i][j - 1] + a[j]:\n                ans.append([i, j])\n    if ans:\n        ans.sort(key=lambda x: x[0])\n        for i in ans:\n            print(*i)\n        return\n    print(-1)\n    return"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    for i in range(n):\n        s += a[i]\n        s %= m\n    return s"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    return str(abs(a * x1 + b * y1 + c) / max(abs(b), 1))\n\ndef"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[int(stdin[0]) - 1]\n\ndef"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return '0'\n    elif a % b == 1:\n        return '1'\n    else:\n        return 'infinity'\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n + (k - n % k) % k)\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nmail\\nai\\nlru\\ncf\")\n    'cfmailru'\n    >>> solution(\"3\\nkek\\npreceq\\ncheburek\")\n    'NO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, t, r = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    ans = 0\n    for i in range(m):\n        if w[i] - 1 < t:\n            ans += 1\n        else:\n            break\n    if ans >= r:\n        return str(ans)\n    else:\n        return str(-1)"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1\\n1\\n1\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'NO'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4\\n1\\n1\\n3\\n\")\n    'YES'\n    >>> solution(\"4"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.count('.') >= 3 else 'No'\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\")\n    5\n    \"\"\"\n    n, m = map(int, stdin.split())\n    return f\"{math.comb(n + m, n) % 1000000007}\"\n"
    },
    {
        "number": 682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r1, c1, r2, c2 = map(int, stdin.split())\n    if r1 == r2 and c1 == c2:\n        return '0 0 0'\n    if r1 == r2:\n        return '0 1 0'\n    if c1 == c2:\n        return '0 0 1'\n    return '1 0 1'\n"
    },
    {
        "number": 683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 ** int(stdin))\n"
    },
    {
        "number": 684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = a\n    y = b\n    z = c\n    while x <= y <= z:\n        if x * x + y * y == z * z:\n            return str(x) +'' + str(y) +'' + str(z)\n        x += 1\n        y += 1\n        z += 1\n    return '-1 -1 -1'\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 2 5\n   ... 7 9\n   ... 10 11''')\n    10\n    >>> solution('''5 10\n   ... 5 7\n   ... 11 12\n   ... 16 20\n   ... 25 26\n   ... 30 33''')\n    18\n    >>> solution('''1 1000000000\n   ... 1 1000000000''')\n    1999999999\n    \"\"\"\n    n, h = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        x1, x2 = map(int, stdin.split())\n        segments.append((x1, x2))\n    segments.sort()\n    x1, x2 = segments[0]\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 = x2, x1\n    if x1 == x2:\n        return x1\n    x1, x2 ="
    },
    {
        "number": 686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n100 98\\n42 32\\n1000000000000000000 1\\n41 40\")\n    'YES\\nYES\\nYES\\nNO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1:\n        return str(b)\n    if b == 1:\n        return str(a)\n    if a == b:\n        return str(a + 1)\n    if a > b:\n        return str(-1)\n    if a < b:\n        return str(a + 1)\n"
    },
    {
        "number": 688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    soroban = []\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(9):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i in range(5):\n        soroban.append('O')\n    for i in range(4):\n        soroban.append('-')\n    soroban.append('|')\n    for i"
    },
    {
        "number": 691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    if x > 10 ** 6:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if x == 1:\n            return \"YES\"\n        return \"NO\"\n    if x == 1:\n        return \"YES\"\n    if x == 2:\n        return \"1 2\"\n    if x == 3:\n        return \"1 2 5\"\n    if x == 4:\n        return \"1 2 4 5\"\n    if x == 5:\n        return \"1 2 4 5 7\"\n    if x == 6:\n        return \"1 2 5\"\n    if x == 7:\n        return \"1 2 4 7\"\n    if x == 8:\n        return \"1 2 4 5 7\"\n    if x == 9:\n        return \"1 2 4 5 6 7\"\n    if x == 10:\n        return \"1 2 4 5 6 7 10\"\n    if x == 11:\n        return \"1 2 4 5 6 7 10 11\"\n    if x == 12:\n        return \"1 2 4 5 6 7 10 11 12\"\n    if x == 13:\n        return \"1 2 4 5 6 7 10 11 12 13\"\n    if x == 14:\n        return \"1 2 4 5 6 7 10 11 12 13 14\"\n    if x == 15:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15\"\n    if x == 16:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16\"\n    if x == 17:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17\"\n    if x == 18:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18\"\n    if x == 19:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19\"\n    if x == 20:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20\"\n    if x == 21:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21\"\n    if x == 22:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n    if x == 23:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    if x == 24:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n    if x == 25:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n    if x == 26:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n    if x == 27:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n    if x == 28:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n    if x == 29:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n    if x == 30:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\n    if x == 31:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\n    if x == 32:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\n    if x == 33:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n    if x == 34:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\"\n    if x == 35:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\"\n    if x == 36:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\"\n    if x == 37:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\"\n    if x == 38:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\"\n    if x == 39:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\"\n    if x == 40:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    if x == 41:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\"\n    if x == 42:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\"\n    if x == 43:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\"\n    if x == 44:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\"\n    if x == 45:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\"\n    if x == 46:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\"\n    if x == 47:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\"\n    if x == 48:\n        return \"1 2 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22"
    },
    {
        "number": 692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    colors = list(map(int, stdin.split(' ')))\n    k = list(map(int, stdin.split(' ')))\n    colors.sort()\n    k.sort()\n    if k[0] > n:\n        return -1\n    else:\n        return n - k[0]"
    },
    {
        "number": 694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    public_key = int(stdin.split('\\n')[0])\n    a, b = map(int, stdin.split('\\n')[1].split(' '))\n    if public_key % a == 0:\n        return 'YES\\n' + str(public_key // a) + '\\n' + str(public_key % a)\n    if public_key % b == 0:\n        return 'YES\\n' + str(public_key // b) + '\\n' + str(public_key % b)\n    return 'NO'"
    },
    {
        "number": 695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return int(a & b == 0)"
    },
    {
        "number": 696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(n + m - i for i in range(n + m + 1)) % (10 ** 3))\n"
    },
    {
        "number": 698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    rounds = []\n    for _ in range(k):\n        rounds.append(tuple(map(int, stdin.split())))\n    rounds.sort(key=lambda x: x[0])\n    rounds.sort(key=lambda x: x[1])\n    rounds = [x[0] for x in rounds]\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds = set(rounds)\n    rounds = list(rounds)\n    rounds.sort()\n    rounds = [x for x in range(1, x + 1)]\n    rounds ="
    },
    {
        "number": 699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, k, n = map(int, stdin.split())\n    if n % k!= 0:\n        return '-1'\n    return''.join(map(str, range(1, n // k + 1)))\n"
    },
    {
        "number": 700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == n and all(len(row) == n for row in stdin) else 'NO'"
    },
    {
        "number": 703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b, v = map(int, stdin.split())\n    return k - (a - 1) // (v - 1) - (b - 1) // (v - 1)"
    },
    {
        "number": 704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n    return 'Koyomi' if sum(x[i] ^ y[i] for i in range(n)) % 2 == 0 else 'Karen'\n"
    },
    {
        "number": 706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, n, x = map(int, stdin.split())\n    if n == 1:\n        return x\n    else:\n        return (A * (solution(stdin, n - 1) ** 2) + B * solution(stdin, n - 1)) % (10 ** 9 + 7)\n"
    },
    {
        "number": 707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    x = list(map(int, stdin.split(' ')))\n    p = list(map(int, stdin.split(' ')))\n    x.sort()\n    p.sort()\n    if n!= len(x) or m!= len(p):\n        return 'NO'\n    for i in range(m):\n        if p[i] < 1 or p[i] > x[-1]:\n            return 'NO'\n    for i in range(n):\n        if x[i] < 1 or x[i] > 10 ** 18:\n            return 'NO'\n    for i in range(n):\n        if x[i] + p[0] > x[i + 1]:\n            return 'NO'\n    for i in range(m):\n        if p[i] + p[i + 1] > x[-1]:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n < 4:\n        return 0\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 5\n    if n == 9:\n        return 6\n    if n == 10:\n        return 7\n    if n == 11:\n        return 8\n    if n == 12:\n        return 9\n    if n == 13:\n        return 10\n    if n == 14:\n        return 11\n    if n == 15:\n        return 12\n    if n == 16:\n        return 13\n    if n == 17:\n        return 14\n    if n == 18:\n        return 15\n    if n == 19:\n        return 16\n    if n == 20:\n        return 17\n    if n == 21:\n        return 18\n    if n == 22:\n        return 19\n    if n == 23:\n        return 20\n    if n == 24:\n        return 21\n    if n == 25:\n        return 22\n    if n == 26:\n        return 23\n    if n == 27:\n        return 24\n    if n == 28:\n        return 25\n    if n == 29:\n        return 26\n    if n == 30:\n        return 27\n    if n == 31:\n        return 28\n    if n == 32:\n        return 29\n    if n == 33:\n        return 30\n    if n == 34:\n        return 31\n    if n == 35:\n        return 32\n    if n == 36:\n        return 33\n    if n == 37:\n        return 34\n    if n == 38:\n        return 35\n    if n == 39:\n        return 36\n    if n == 40:\n        return 37\n    if n == 41:\n        return 38\n    if n == 42:\n        return 39\n    if n == 43:\n        return 40\n    if n == 44:\n        return 41\n    if n == 45:\n        return 42\n    if n == 46:\n        return 43\n    if n == 47:\n        return 44\n    if n == 48:\n        return 45\n    if n == 49:\n        return 46\n    if n == 50:\n        return 47\n    return 0"
    },
    {
        "number": 711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(binomial_coefficient(n, m))\n\ndef"
    },
    {
        "number": 712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, t = map(float, stdin.split())\n    return str(round(n * p ** t, 6))"
    },
    {
        "number": 713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(len(beautiful_set(n, m)))\n\n\ndef"
    },
    {
        "number": 714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = [int(x) for x in stdin.split()]\n    cards.sort()\n    print(cards)\n    return \"\""
    },
    {
        "number": 715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[0]\n    b = stdin.split('\\n')[1]\n    c = stdin.split('\\n')[2]\n    d = stdin.split('\\n')[3]\n    a_len = len(a)\n    b_len = len(b)\n    c_len = len(c)\n    d_len = len(d)\n    if a_len < b_len and a_len < c_len and a_len < d_len:\n        return 'A'\n    elif b_len < a_len and b_len < c_len and b_len < d_len:\n        return 'B'\n    elif c_len < a_len and c_len < b_len and c_len < d_len:\n        return 'C'\n    elif d_len < a_len and d_len < b_len and d_len < c_len:\n        return 'D'\n    elif a_len == b_len and a_len == c_len and a_len == d_len:\n        return 'C'\n    elif a_len == b_len and a_len == c_len and a_len!= d_len:\n        return 'B'\n    elif a_len == b_len and a_len!= c_len and a_len == d_len:\n        return 'A'\n    elif a_len == b_len and a_len!= c_len and a_len!= d_len:\n        return 'D'\n    elif a_len!= b_len and a_len!= c_len and a_len == d_len:\n        return 'C'\n    elif a_len!= b_len and a_len!= c_len and a_len!= d_len:\n        return 'A'\n    elif a_len == b_len and a_len!= c_len and a_len!= d_len:\n        return 'B'\n    elif a_len!= b_len and a_len == c_len and a_len!= d_len:\n        return 'A'\n    elif a_len!= b_len and a_len!= c_len and a_len == d_len:\n        return 'D'\n    elif a_len!= b_len and a_len!= c_len and a_len!= d_len:\n        return 'C'\n    else:\n        return 'C'\n\nprint(solution(input()))\n"
    },
    {
        "number": 716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    if arr[0] == a:\n        return 0\n    if arr[0] == b:\n        return abs(arr[0] - arr[1])\n    return abs(arr[0] - arr[1]) + abs(arr[0] - arr[2])"
    },
    {
        "number": 717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    days = []\n    for i in range(n):\n        s, d = map(int, stdin.readline().split())\n        days.append((s, d))\n    days.sort(key=lambda x: x[0])\n    s, d = days[0]\n    ans = s\n    for i in range(1, n):\n        s, d = days[i]\n        if s - ans > d:\n            ans = s - d\n    return ans\n"
    },
    {
        "number": 718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sorted(filter(lambda x: sum(map(int, str(x))) == 10, range(1, 10001)))[int(stdin) - 1])\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = int(stdin)\n    a.sort()\n    ans = 0\n    for i in range(m):\n        if a[i] > d:\n            ans += a[i] - d\n    return ans"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"IAO'15\\nIAO'2015\\nIAO'1\\nIAO'9\\nIAO'0\")\n    '2015'\n    >>> solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\")\n    '1999'\n    >>> solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\\nIAO'0\")\n    '2999'\n    >>> solution(\"IAO'9\\nIAO'99\\nIAO'999\\nIAO'9999\\nIAO'0\\nIAO'0\")\n    '9999'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [stdin.split() for _ in range(n)]\n    for row in matrix:\n        if len(set(row))!= 1:\n            return \"#Color\"\n    return \"#Black&White\"\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4 4 2 2 100 100 100\")\n    3\n    >>> solution(\"5 6 3 4 1 5\")\n    5\n    >>> solution(\"8 4 4 2 2 100 100 100\")\n    3\n    >>> solution(\"6 10 50 10 50 50\")\n    4\n    >>> solution(\"10 10 50 10 50 50\")\n    4\n    >>> solution(\"6 10 10 10 10 10\")\n    5\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    while len(a) > 0:\n        max_len = 0\n        for i in range(len(a)):\n            if a[i] == a[i - 1] + 1:\n                max_len = max(max_len, i - 1)\n            else:\n                break\n        if max_len > 0:\n            a = a[:max_len] + a[max_len + 1:]\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = [int(x) for x in stdin.split()]\n    votes.sort()\n    if votes[0] > sum(votes[1:]):\n        return 0\n    return sum(votes[:n - 1]) - sum(votes[1:])\n\nprint(solution(input()))\n"
    },
    {
        "number": 729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m, k = map(int, stdin.split())\n    return str(w * k - m)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i < 10:\n            count += 1\n        elif i < 100:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]):\n                count += 1\n        elif i < 1000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]):\n                count += 1\n        elif i < 10000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]):\n                count += 1\n        elif i < 100000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]):\n                count += 1\n        elif i < 1000000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]) and int(str(i)[6])!= int(str(i)[5]):\n                count += 1\n        elif i < 10000000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]) and int(str(i)[6])!= int(str(i)[5]) and int(str(i)[7])!= int(str(i)[6]):\n                count += 1\n        elif i < 100000000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]) and int(str(i)[6])!= int(str(i)[5]) and int(str(i)[7])!= int(str(i)[6]) and int(str(i)[8])!= int(str(i)[7]):\n                count += 1\n        elif i < 1000000000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]) and int(str(i)[6])!= int(str(i)[5]) and int(str(i)[7])!= int(str(i)[6]) and int(str(i)[8])!= int(str(i)[7]) and int(str(i)[9])!= int(str(i)[8]):\n                count += 1\n        elif i < 10000000000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]) and int(str(i)[6])!= int(str(i)[5]) and int(str(i)[7])!= int(str(i)[6]) and int(str(i)[8])!= int(str(i)[7]) and int(str(i)[9])!= int(str(i)[8]) and int(str(i)[10])!= int(str(i)[9]):\n                count += 1\n        elif i < 100000000000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]) and int(str(i)[6])!= int(str(i)[5]) and int(str(i)[7])!= int(str(i)[6]) and int(str(i)[8])!= int(str(i)[7]) and int(str(i)[9])!= int(str(i)[8]) and int(str(i)[10])!= int(str(i)[9]) and int(str(i)[11])!= int(str(i)[10]):\n                count += 1\n        elif i < 1000000000000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]) and int(str(i)[6])!= int(str(i)[5]) and int(str(i)[7])!= int(str(i)[6]) and int(str(i)[8])!= int(str(i)[7]) and int(str(i)[9])!= int(str(i)[8]) and int(str(i)[10])!= int(str(i)[9]) and int(str(i)[11])!= int(str(i)[10]) and int(str(i)[12])!= int(str(i)[11]):\n                count += 1\n        elif i < 10000000000000:\n            if int(str(i)[1])!= int(str(i)[0]) and int(str(i)[2])!= int(str(i)[1]) and int(str(i)[3])!= int(str(i)[2]) and int(str(i)[4])!= int(str(i)[3]) and int(str(i)[5])!= int(str(i)[4]) and int(str(i)[6])!= int(str(i)[5]) and int(str(i)[7])!= int(str(i)[6]) and int(str"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = map(int, stdin.split())\n    return str(sum(1 for i in range(a, b + 1) if i % x == 0 or i % y == 0))"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    return sum(a[:m])"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % m == 0:\n        return n // m\n    return -1"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    return str(sum(1 for x in range(A, B + 1) for y in range(C, D + 1) if x <= y))\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A, B, M = [int(x) for x in stdin.split()]\n    return str(sum(A + B * i for i in range(L)) % M)"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n_1, n_2, n_3, t_1, t_2, t_3 = [int(x) for x in stdin.split()]\n    return str(k * t_1 + t_2 + t_3)\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(m)\n    a.insert(0, 0)\n    ans = 0\n    for i in range(1, len(a)):\n        ans += a[i] - a[i - 1]\n    return ans"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1\\n2\\n4 1 3\\n3\\n4 1 3\")\n    1 2\n    -1\n    4 5 1 2 3 6\n    -1\n    1 3 5 6 7 9 2 4 8 10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums.sort()\n    res = nums[0]\n    for i in range(1, n):\n        res = min(res, nums[i] - nums[i - 1])\n    return str(res)"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"S\") > stdin.count(\"F\") else \"NO\"\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(factorial(n) // (factorial(k) * factorial(n - k)))\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = int(stdin)\n    return str(min(sum(map(lambda x: x[0] / x[1], zip(range(1, n + 1), range(1, n + 1)))) - b, a - b))\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 0 2 4\n   ... 1 3 1\n   ... 0 8 3\n   ... 0 20 10\n   ... 1 5 5''')\n    4\n    \"\"\"\n    n, x = map(int, stdin.split())\n    candy_list = []\n    for _ in range(n):\n        t, h, m = map(int, stdin.split())\n        candy_list.append((t, h, m))\n    candy_list.sort(key=lambda x: x[2])\n    candy_list.sort(key=lambda x: x[1])\n    candy_list.sort(key=lambda x: x[0])\n    candy_list.sort(key=lambda x: x[0] * x[1])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2])\n    candy_list.sort(key=lambda x: x[0] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x[2] * x[1] + x["
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3!= 0:\n        return -1\n    else:\n        return n // 3\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return min(len(stdin) - i for i in range(len(stdin)) if stdin[i] in set(stdin[i:i + 3]))"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * k // 2)"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    for i in range(n):\n        b.append(a[i] // 30)\n    b.sort()\n    c = []\n    for i in range(n):\n        c.append(a[i] % 30)\n    c.sort()\n    d = []\n    for i in range(n):\n        d.append(b[i] * 30 + c[i])\n    d.sort()\n    e = []\n    for i in range(n):\n        e.append(d[i] - a[i])\n    e.sort()\n    f = []\n    for i in range(n):\n        f.append(e[i] // m)\n    f.sort()\n    g = []\n    for i in range(n):\n        g.append(e[i] % m)\n    g.sort()\n    h = []\n    for i in range(n):\n        h.append(f[i] * m + g[i])\n    h.sort()\n    i = 0\n    while i < n:\n        if h[i]!= d[i]:\n            break\n        i += 1\n    return i\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(a * d // b // c)\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 0\n    elif n == 2:\n        if s[0] == s[1]:\n            return 0\n        else:\n            return 1\n    else:\n        if s[0] == s[1]:\n            return solution(stdin[1:])\n        elif s[0] == s[2]:\n            return solution(stdin[1:]) + 1\n        elif s[1] == s[2]:\n            return solution(stdin[1:]) + 1\n        else:\n            return solution(stdin[1:]) + 2\n\nprint(solution(input()))\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 5:\n        return str(x)\n    else:\n        return str(x - 5)"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    t.sort()\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += t[i]\n        else:\n            if t[i] - t[i - 1] == 1:\n                count += 1\n            else:\n                break\n    return str(count)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    sockets = list(map(int, stdin.split()))\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:k]\n    sockets.reverse()\n    sockets.sort()\n    sockets.reverse()\n    sockets = sockets[:"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    while s.count('B') > 0:\n        if s[0] == 'B':\n            s = s[1:]\n            count += 1\n        else:\n            s = s[1:] + s[0]\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    H, D, C, N = map(int, stdin.split())\n    if h == 0:\n        h = 24\n    if m == 0:\n        m = 60\n    if h == 20 and m == 0:\n        h = 0\n    if h == 20 and m == 1:\n        m = 0\n    if h == 20 and m == 20:\n        h = 0\n    if h == 20 and m == 21:\n        m = 0\n    if h == 20 and m == 22:\n        m = 0\n    if h == 20 and m == 23:\n        h = 0\n    if h == 21 and m == 0:\n        h = 0\n    if h == 21 and m == 1:\n        m = 0\n    if h == 21 and m == 20:\n        h = 0\n    if h == 21 and m == 21:\n        h = 0\n    if h == 21 and m == 22:\n        m = 0\n    if h == 21 and m == 23:\n        h = 0\n    if h == 22 and m == 0:\n        h = 0\n    if h == 22 and m == 1:\n        m = 0\n    if h == 22 and m == 20:\n        h = 0\n    if h == 22 and m == 21:\n        h = 0\n    if h == 22 and m == 22:\n        h = 0\n    if h == 22 and m == 23:\n        h = 0\n    if h == 23 and m == 0:\n        h = 0\n    if h == 23 and m == 1:\n        m = 0\n    if h == 23 and m == 20:\n        h = 0\n    if h == 23 and m == 21:\n        h = 0\n    if h == 23 and m == 22:\n        h = 0\n    if h == 23 and m == 23:\n        h = 0\n    if h == 0 and m == 0:\n        h = 24\n    if h == 0 and m == 1:\n        m = 60\n    if h == 0 and m == 20:\n        h = 24\n    if h == 0 and m == 21:\n        h = 24\n    if h == 0 and m == 22:\n        h = 24\n    if h == 0 and m == 23:\n        h = 24\n    if h == 1 and m == 0:\n        h = 0\n    if h == 1 and m == 1:\n        h = 0\n    if h == 1 and m == 20:\n        h = 0\n    if h == 1 and m == 21:\n        h = 0\n    if h == 1 and m == 22:\n        h = 0\n    if h == 1 and m == 23:\n        h = 0\n    if h == 2 and m == 0:\n        h = 0\n    if h == 2 and m == 1:\n        h = 0\n    if h == 2 and m == 20:\n        h = 0\n    if h == 2 and m == 21:\n        h = 0\n    if h == 2 and m == 22:\n        h = 0\n    if h == 2 and m == 23:\n        h = 0\n    if h == 3 and m == 0:\n        h = 0\n    if h == 3 and m == 1:\n        h = 0\n    if h == 3 and m == 20:\n        h = 0\n    if h == 3 and m == 21:\n        h = 0\n    if h == 3 and m == 22:\n        h = 0\n    if h == 3 and m == 23:\n        h = 0\n    if h == 4 and m == 0:\n        h = 0\n    if h == 4 and m == 1:\n        h = 0\n    if h == 4 and m == 20:\n        h = 0\n    if h == 4 and m == 21:\n        h = 0\n    if h == 4 and m == 22:\n        h = 0\n    if h == 4 and m == 23:\n        h = 0\n    if h == 5 and m == 0:\n        h = 0\n    if h == 5 and m == 1:\n        h = 0\n    if h == 5 and m == 20:\n        h = 0\n    if h == 5 and m == 21:\n        h = 0\n    if h == 5 and m == 22:\n        h = 0\n    if h == 5 and m == 23:\n        h = 0\n    if h == 6 and m == 0:\n        h = 0\n    if h == 6 and m == 1:\n        h = 0\n    if h == 6 and m == 20:\n        h = 0\n    if h == 6 and m == 21:\n        h = 0\n    if h == 6 and m == 22:\n        h = 0\n    if h == 6 and m == 23:\n        h = 0\n    if h == 7 and m == 0:\n        h = 0\n    if h == 7 and m == 1:\n        h = 0\n    if h == 7 and m == 20:\n        h = 0\n    if h == 7 and m == 21:\n        h = 0\n    if h == 7 and m == 22:\n        h = 0\n    if h == 7 and m == 23:\n        h = 0\n    if h == 8 and m == 0:\n        h = 0\n    if h == 8 and m == 1:\n        h = 0\n    if h == 8 and m == 20:\n        h = 0\n    if h == 8 and m == 21:\n        h = 0\n    if h == 8 and m == 22:\n        h = 0\n    if h == 8 and m == 23:\n        h = 0\n    if h == 9 and m == 0:\n        h = 0\n    if h == 9 and m == 1:\n        h = 0\n    if h == 9 and m == 20:\n        h = 0\n    if h == 9 and m == 21:\n        h = 0\n    if h == 9 and m == 22:\n        h = 0\n    if h == 9 and m == 23:\n        h = 0\n    if h == 10 and m == 0:\n        h = 0\n    if h == 10 and m == 1:\n        h = 0\n    if h == 10 and m == 20:\n        h = 0\n    if h == 10 and m == 21:\n        h = 0\n    if h == 10 and m == 22:\n        h = 0\n    if h == 10 and m == 23:\n        h = 0\n    if h == 11 and m == 0:\n        h = 0\n    if h == 11 and m == 1:\n        h = 0\n    if h == 11 and"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    slimes = [int(x) for x in stdin.readline().split()]\n    slimes.insert(0, 0)\n    slimes.append(0)\n    dp = [0] * (n + 2)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1] + slimes[i], slimes[i])\n    return dp[n]\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 4\n   ... 1 2 5 10 15 20\n   ... ''')\n    '1'\n    >>> solution('''4 10\n   ... 1 3 2 4\n   ... ''')\n    '0'\n    >>> solution('''6 100\n   ... 1 2 3 4 5 6\n   ... ''')\n    '2'\n    \"\"\"\n    n, B = [int(x) for x in stdin.split('\\n')[:2]]\n    a = [int(x) for x in stdin.split('\\n')[2].split()]\n    odd = 0\n    even = 0\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if B < even:\n        return '0'\n    if B % 2 == 0:\n        return B // 2\n    else:\n        return B // 2 + 1\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1010\")\n    3\n    \"\"\"\n    n = int(stdin)\n    y = stdin\n    count = 0\n    for i in range(n):\n        if y[i:] + y[:i] == y:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, S, q = map(int, stdin.split())\n    return str(T // (S + q - 1))\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.count(stdin[0]) == len(stdin) else 'No'"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, z = map(int, stdin.split('\\n')[0].split())\n    points = list(map(int, stdin.split('\\n')[1].split()))\n    points.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(points[i] - points[j]) >= z:\n                res += 1\n    return str(res)"
    },
    {
        "number": 768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c in str(a / b):\n        return str(str(a / b).find(str(c)))\n    else:\n        return '-1'\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    letters = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if letters[i] == 0:\n            count += 1\n    return count"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if k > n:\n        return 'No'\n    if m == 1:\n        return 'Yes'\n    if m == 2:\n        if k == 1:\n            return 'Yes'\n        if k == 2:\n            if a[0] % 2 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n    if m == 3:\n        if k == 1:\n            return 'Yes'\n        if k == 2:\n            if a[0] % 3 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 3:\n            if a[0] % 3 == 0 and a[1] % 5 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n    if m == 4:\n        if k == 1:\n            return 'Yes'\n        if k == 2:\n            if a[0] % 4 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 3:\n            if a[0] % 4 == 0 and a[1] % 5 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 4:\n            if a[0] % 4 == 0 and a[1] % 5 == 0 and a[2] % 7 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n    if m == 5:\n        if k == 1:\n            return 'Yes'\n        if k == 2:\n            if a[0] % 5 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 3:\n            if a[0] % 5 == 0 and a[1] % 7 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 4:\n            if a[0] % 5 == 0 and a[1] % 7 == 0 and a[2] % 11 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 5:\n            if a[0] % 5 == 0 and a[1] % 7 == 0 and a[2] % 11 == 0 and a[3] % 13 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n    if m == 6:\n        if k == 1:\n            return 'Yes'\n        if k == 2:\n            if a[0] % 6 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 3:\n            if a[0] % 6 == 0 and a[1] % 7 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 4:\n            if a[0] % 6 == 0 and a[1] % 7 == 0 and a[2] % 11 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 5:\n            if a[0] % 6 == 0 and a[1] % 7 == 0 and a[2] % 11 == 0 and a[3] % 13 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 6:\n            if a[0] % 6 == 0 and a[1] % 7 == 0 and a[2] % 11 == 0 and a[3] % 13 == 0 and a[4] % 17 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n    if m == 7:\n        if k == 1:\n            return 'Yes'\n        if k == 2:\n            if a[0] % 7 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 3:\n            if a[0] % 7 == 0 and a[1] % 11 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 4:\n            if a[0] % 7 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 5:\n            if a[0] % 7 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0 and a[3] % 17 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 6:\n            if a[0] % 7 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0 and a[3] % 17 == 0 and a[4] % 19 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 7:\n            if a[0] % 7 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0 and a[3] % 17 == 0 and a[4] % 19 == 0 and a[5] % 23 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n    if m == 8:\n        if k == 1:\n            return 'Yes'\n        if k == 2:\n            if a[0] % 8 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 3:\n            if a[0] % 8 == 0 and a[1] % 11 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 4:\n            if a[0] % 8 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 5:\n            if a[0] % 8 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0 and a[3] % 17 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 6:\n            if a[0] % 8 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0 and a[3] % 17 == 0 and a[4] % 19 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 7:\n            if a[0] % 8 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0 and a[3] % 17 == 0 and a[4] % 19 == 0 and a[5] % 23 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        if k == 8:\n            if a[0] % 8 == 0 and a[1] % 11 == 0 and a[2] % 13 == 0 and a[3] % 17 == 0 and a[4] % 19 == 0 and a[5] % 23 == 0 and a[6] % 29 == 0:\n                return 'Yes'"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    for i in range(3):\n        for j in range(3):\n            if grid[i][j] % 2 == 1:\n                grid[i][j] = 1\n            else:\n                grid[i][j] = 0\n    for i in range(3):\n        print(''.join(map(str, grid[i])))\n    return ''\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    arr = [0] * n\n    for _ in range(q):\n        t, l, r, v = map(int, stdin.split())\n        for i in range(l - 1, r):\n            arr[i] += v\n    return str(sum(i ** 2 for i in arr))"
    },
    {
        "number": 774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    return str(x // y) + \"/\" + str(n // y)"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('a') * stdin.count('b') * stdin.count('c') * stdin.count('d') * stdin.count('e') * stdin.count('f') * stdin.count('g') * stdin.count('h') * stdin.count('i') * stdin.count('j') * stdin.count('k') * stdin.count('l') * stdin.count('m') * stdin.count('n') * stdin.count('o') * stdin.count('p') * stdin.count('q') * stdin.count('r') * stdin.count('s') * stdin.count('t') * stdin.count('u') * stdin.count('v') * stdin.count('w') * stdin.count('x') * stdin.count('y') * stdin.count('z')\n\ndef"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    requirements = []\n    for _ in range(k):\n        requirements.append([int(x) for x in stdin.split()])\n    return str(solve(n, k, requirements))\n\n\ndef"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0840\")\n    '17 7 7 7 -1 2 17 2 7'\n    \"\"\"\n    s = stdin\n    n = len(s)\n    m = 10\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = -1\n            elif j == 0:\n                dp[i][j] = 1\n            elif s[i] == \"0\":\n                dp[i][j] = dp[i - 1][j]\n            elif s[i] == \"1\":\n                dp[i][j] = dp[i - 1][j - 1]\n            elif s[i] == \"2\":\n                dp[i][j] = dp[i - 1][j] + 1\n            elif s[i] == \"3\":\n                dp[i][j] = dp[i - 1][j] + 1\n            elif s[i] == \"4\":\n                dp[i][j] = dp[i - 1][j] + 1\n            elif s[i] == \"5\":\n                dp[i][j] = dp[i - 1][j] + 1\n            elif s[i] == \"6\":\n                dp[i][j] = dp[i - 1][j] + 1\n            elif s[i] == \"7\":\n                dp[i][j] = dp[i - 1][j] + 1\n            elif s[i] == \"8\":\n                dp[i][j] = dp[i - 1][j] + 1\n            elif s[i] == \"9\":\n                dp[i][j] = dp[i - 1][j] + 1\n    return \"\\n\".join([\" \".join(map(str, row)) for row in dp])\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    for i in range(len(board)):\n        board[i] = list(board[i])\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'W':\n                board[i][j] = 'B'\n            else:\n                board[i][j] = 'W'\n    for i in range(len(board)):\n        if board[i][0]!= 'W':\n            return 'NO'\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j]!= board[i][j-1]:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 4 6 12\")\n    3\n    4 6 12\n    >>> solution(\"2\\n2 3\")\n    -1\n    \"\"\"\n    n = int(stdin)\n    s = [int(x) for x in stdin.split()]\n    s.sort()\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[j] % s[i] == 0:\n                ans.append(s[j])\n                break\n    if ans:\n        print(len(ans))\n        print(*ans)\n    else:\n        print(-1)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 1 2\n   ... ''')\n    '3 2 0 2 0'\n    \"\"\"\n    n = int(stdin.readline())\n    houses = list(map(int, stdin.readline().split()))\n    houses.sort()\n    res = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if houses[j] > houses[i]:\n                res[i] = j - i\n                break\n    return''.join(map(str, res))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"YES\\n1\\n{}\".format(a)\n    if a > b:\n        return \"NO\"\n    if a % 2 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 9:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 8:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 7:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 6:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 5:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 4:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 3:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 2:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 9:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 8:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 7:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 6:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 5:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 4:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 3:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 2:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 9:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 8:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 7:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 6:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 5:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 4:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 3:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 2:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 9:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 8:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 7:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 6:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 5:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 4:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 3:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 2:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 9:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 8:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 7:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 6:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 5:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 4:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 3:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 2:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 10 == 0:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2 == 1:\n        return \"YES\\n2\\n{}\".format(a)\n    if a % 2"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a * b >= 6 * n:\n        return str(a * b) +'' + str(a) +'' + str(b)\n    else:\n        a_1 = a\n        b_1 = b\n        while a_1 * b_1 < 6 * n:\n            if a_1 * b_1 > a * b:\n                a_1 -= 1\n            else:\n                b_1 -= 1\n        return str(a_1 * b_1) +'' + str(a_1) +'' + str(b_1)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ratings = []\n    for _ in range(n):\n        c, d = map(int, stdin.readline().split())\n        ratings.append((c, d))\n    ratings.sort()\n    curr_rating = 1900\n    curr_division = 1\n    for c, d in ratings:\n        if curr_rating < 1900 and c < 0:\n            curr_rating = 1900\n            curr_division = 2\n        if curr_rating < 1900 and c > 0:\n            curr_rating += c\n            curr_division = d\n        if curr_rating >= 1900 and d == 1:\n            curr_rating += c\n        if curr_rating >= 1900 and d == 2:\n            curr_rating += c\n            curr_rating = 1900\n    if curr_rating < 1900:\n        return \"Infinity\"\n    return str(curr_rating)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    q = stdin\n    if k == 1:\n        return \"YES\"\n    if k == 2:\n        return \"YES\" if len(q) == 2 else \"NO\"\n    if k == 3:\n        return \"YES\" if len(q) == 3 else \"NO\"\n    if k == 4:\n        return \"YES\" if len(q) == 4 else \"NO\"\n    if k == 5:\n        return \"YES\" if len(q) == 5 else \"NO\"\n    if k == 6:\n        return \"YES\" if len(q) == 6 else \"NO\"\n    if k == 7:\n        return \"YES\" if len(q) == 7 else \"NO\"\n    if k == 8:\n        return \"YES\" if len(q) == 8 else \"NO\"\n    if k == 9:\n        return \"YES\" if len(q) == 9 else \"NO\"\n    if k == 10:\n        return \"YES\" if len(q) == 10 else \"NO\"\n    if k == 11:\n        return \"YES\" if len(q) == 11 else \"NO\"\n    if k == 12:\n        return \"YES\" if len(q) == 12 else \"NO\"\n    if k == 13:\n        return \"YES\" if len(q) == 13 else \"NO\"\n    if k == 14:\n        return \"YES\" if len(q) == 14 else \"NO\"\n    if k == 15:\n        return \"YES\" if len(q) == 15 else \"NO\"\n    if k == 16:\n        return \"YES\" if len(q) == 16 else \"NO\"\n    if k == 17:\n        return \"YES\" if len(q) == 17 else \"NO\"\n    if k == 18:\n        return \"YES\" if len(q) == 18 else \"NO\"\n    if k == 19:\n        return \"YES\" if len(q) == 19 else \"NO\"\n    if k == 20:\n        return \"YES\" if len(q) == 20 else \"NO\"\n    if k == 21:\n        return \"YES\" if len(q) == 21 else \"NO\"\n    if k == 22:\n        return \"YES\" if len(q) == 22 else \"NO\"\n    if k == 23:\n        return \"YES\" if len(q) == 23 else \"NO\"\n    if k == 24:\n        return \"YES\" if len(q) == 24 else \"NO\"\n    if k == 25:\n        return \"YES\" if len(q) == 25 else \"NO\"\n    if k == 26:\n        return \"YES\" if len(q) == 26 else \"NO\"\n    return \"NO\""
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin[1:3])"
    },
    {
        "number": 789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 1\n   ... 5 6 7 8 10 2\n   ... 3 5 6 7 1 10''')\n    '35'\n    \"\"\"\n    n, k, *a = map(int, stdin.split())\n    d = [0] + list(accumulate(a))\n    ans = 0\n    for i in range(1, n + 1):\n        ans = max(ans, d[i] - d[i - 1] - k)\n    return str(ans)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = s[::-1]\n    s = s[:n]\n    s = s[::-1]\n    print(s)\n    return s"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if a[0] < 0:\n            return -1\n        else:\n            return 0\n    if d < 0:\n        return -1\n    if d == 0:\n        if a[0] == 0:\n            return 0\n        else:\n            return -1\n    if d < a[0]:\n        return -1\n    if d == a[0]:\n        return 1\n    if d > a[0]:\n        return 1\n    if d < 0:\n        return -1\n    if d > 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n        return 1\n    if d == 0:\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    s = sum(a[:n])\n    if s == sum(a[n:]):\n        return''.join(map(str, a))\n    return '-1'\n"
    },
    {
        "number": 795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(a, n + 1):\n            c = math.sqrt(a ** 2 + b ** 2)\n            if c.is_integer() and a + b + c <= n:\n                count += 1\n    return count\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(comb(n, k))\n\n\ndef"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split()]\n    g0, x, y, z = [int(x) for x in stdin.split()]\n    g = [g0]\n    for i in range(1, n):\n        g.append((g[i - 1] * x + y) % z)\n    ans = 0\n    for i in range(a):\n        for j in range(b):\n            ans += min(g[i * m + j], g[(i - 1) * m + j - 1])\n    return str(ans)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Impossible\"\n    if a == b:\n        return \"1 1 1\"\n    if a == c:\n        return \"1 2 1\"\n    if b == c:\n        return \"2 1 1\"\n    if a + b == c:\n        return \"1 1 2\"\n    if a + c == b:\n        return \"1 2 1\"\n    if b + c == a:\n        return \"2 1 1\"\n    if a + b + c == 2 * max(a, b, c):\n        return \"1 1 1\"\n    return \"Impossible\"\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    welfare = list(map(int, stdin.readline().split()))\n    welfare.sort()\n    s = 0\n    for i in range(n):\n        s += welfare[i]\n        if s > n:\n            return str(i)\n    return str(n)"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    mex = 0\n    for i in range(n):\n        for j in range(i, n):\n            mex = max(mex, min(a[i:j+1]))\n    return mex"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin)\n    if len(s) < k:\n        return 'impossible'\n    else:\n        return len(s) - len(set(s))\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n0 10\\n1 5\\n7 15\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    r.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1]) - max(l[i], r[i + 1])\n    return ans\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split(' ')]\n    return str(sum([1 for i in range(l, r + 1) if i % 3 == 0]) % (10 ** 9 + 7))\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    honey = list(map(int, stdin.split()))\n    dp = [0] * n\n    dp[0] = honey[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + honey[i], honey[i])\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + honey[i] - c, honey[i])\n    return max(dp)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = x.replace('.', '')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('+', '')\n    x = x.replace('-', '')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E0', 'E')\n    x = x.replace('e0', 'e')\n    x = x.replace('E', 'E0')\n    x = x.replace('e', 'E0')\n    x = x.replace('0', '')\n    x = x.replace('E"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = [int(x) for x in stdin.split()]\n    if a + b == n:\n        if k == 0:\n            return \"NO\"\n        if k == 1:\n            return \"GB\" * n\n        if k == 2:\n            return \"GB\" * n + \"GB\"\n        if k == 3:\n            return \"GB\" * n + \"GB\" + \"GB\"\n        if k == 4:\n            return \"GB\" * n + \"GB\" + \"GB\" + \"GB\"\n        if k == 5:\n            return \"GB\" * n + \"GB\" + \"GB\" + \"GB\" + \"GB\"\n        if k == 6:\n            return \"GB\" * n + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\"\n        if k == 7:\n            return \"GB\" * n + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\"\n        if k == 8:\n            return \"GB\" * n + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\"\n        if k == 9:\n            return \"GB\" * n + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\"\n        if k == 10:\n            return \"GB\" * n + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\" + \"GB\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(x) for x in stdin.split()]\n    return str(sum(sum(int(x) for x in str(i)) for i in range(a, b + 1)) % 1000000007)\n"
    },
    {
        "number": 811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 6 8 7 4\n   ... ''')\n    4\n    >>> solution('''8\n   ... 1 2 3 4 5 6 7 8\n   ... ''')\n    1\n    >>> solution('''4\n   ... 1 2 4 8\n   ... ''')\n    -1\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        if a[i] - a[0] == i * (a[-1] - a[0]) // (n - 1):\n            return str(i)\n    return '-1'\n"
    },
    {
        "number": 813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    arthur = [int(x) for x in stdin.split()[1:]]\n    alex = [int(x) for x in stdin.split()[2:]]\n    arthur_count = 0\n    alex_count = 0\n    for i in range(n):\n        if i in arthur:\n            arthur_count += 1\n        if i in alex:\n            alex_count += 1\n    return''.join([str(arthur_count) if i in arthur else str(alex_count) for i in range(1, n + 1)])\n"
    },
    {
        "number": 814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, v3, m = map(int, stdin.split())\n    if v1 < v2 < v3:\n        return str(v1) + '\\n' + str(v2) + '\\n' + str(v3)\n    elif v1 < v3 < v2:\n        return str(v1) + '\\n' + str(v3) + '\\n' + str(v2)\n    elif v2 < v1 < v3:\n        return str(v2) + '\\n' + str(v1) + '\\n' + str(v3)\n    elif v2 < v3 < v1:\n        return str(v2) + '\\n' + str(v3) + '\\n' + str(v1)\n    elif v3 < v1 < v2:\n        return str(v3) + '\\n' + str(v1) + '\\n' + str(v2)\n    elif v3 < v2 < v1:\n        return str(v3) + '\\n' + str(v2) + '\\n' + str(v1)\n    else:\n        return '-1'"
    },
    {
        "number": 816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(2) * n\n    if n % 3 == 0:\n        return str(3) * n\n    if n % 5 == 0:\n        return str(5) * n\n    if n % 7 == 0:\n        return str(7) * n\n    return \"-1\"\n"
    },
    {
        "number": 819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, v_1, v_2, t_1, t_2 = [int(x) for x in stdin.split()]\n    if v_1 < v_2:\n        if t_1 < t_2:\n            return \"First\"\n        elif t_1 > t_2:\n            return \"Second\"\n        else:\n            return \"Friendship\"\n    elif v_1 > v_2:\n        if t_1 < t_2:\n            return \"Second\"\n        elif t_1 > t_2:\n            return \"First\"\n        else:\n            return \"Friendship\"\n    else:\n        if t_1 < t_2:\n            return \"Friendship\"\n        elif t_1 > t_2:\n            return \"Friendship\"\n        else:\n            return \"Friendship\"\n"
    },
    {
        "number": 822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, z = [int(x) for x in stdin.split()]\n    return str(z // m)"
    },
    {
        "number": 823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return 0\n    if x == 0:\n        return 2\n    if y == 0:\n        return 1\n    if x > 0 and y > 0:\n        return 2\n    if x < 0 and y > 0:\n        return 3\n    if x < 0 and y < 0:\n        return 4\n    if x > 0 and y < 0:\n        return 5\n    return 6\n\nprint(solution(input()))\n"
    },
    {
        "number": 824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        z = 2\n        while z < n:\n            if n % z == 0:\n                n /= z\n                count += 1\n                break\n            z += 1\n        else:\n            count += 1\n            n /= z\n    return str(count)\n"
    },
    {
        "number": 826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n - 1"
    },
    {
        "number": 827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n    count = 0\n    for i in range(n):\n        if t[i:i+3] == '110':\n            count += 1\n    return str(count)"
    },
    {
        "number": 828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    workers = [0] * n\n    for i in range(n):\n        workers[i] = list(map(int, stdin.split()))\n    workers[s - 1][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if workers[j][0] > workers[i][0] and workers[j][1] > workers[i][1]:\n                workers[i][0] += 1\n    return str(workers.count(0))\n"
    },
    {
        "number": 829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    n = int(stdin)\n    s = []\n    a = []\n    for i in range(n):\n        s.append(stdin)\n        a.append(int(stdin))\n        stdin = stdin.split()\n    a.sort()\n    a.reverse()\n    s.sort()\n    s.reverse()\n    suma = 0\n    for i in range(n):\n        suma += a[i] * i\n    for i in range(n):\n        for j in range(a[i]):\n            if t[j] == s[i][j]:\n                suma += i\n            else:\n                suma += i + 1\n    return suma"
    },
    {
        "number": 832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2\n   ... 2 4\n   ... 3 4''')\n    '1'\n    >>> solution('''4\n   ... 100 42\n   ... 42 100\n   ... 5 42\n   ... 100 5''')\n    '5'\n    >>> solution('''2\n   ... 1 2\n   ... 1 2''')\n    '0'\n    \"\"\"\n    n = int(stdin.readline())\n    teams = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    return str(sum(h1!= g1 and h1!= g2 and h2!= g1 and h2!= g2 for h1, g1, h2, g2 in combinations(teams, 4)))\n"
    },
    {
        "number": 833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = [int(x) for x in stdin.split()]\n    k = 1\n    while True:\n        if all(f[i] == f[i - k] for i in range(k, n)):\n            return str(k)\n        k += 1\n"
    },
    {
        "number": 835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    houses = [x for x in stdin]\n    houses = [x for x in houses if x!= '.']\n    houses = [int(x) for x in houses]\n    houses.sort()\n    houses.append(0)\n    houses.append(n)\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses = ''.join(houses)\n    houses = houses.split('.')\n    houses = [int(x) for x in houses]\n    houses = [x for x in houses if x!= 0]\n    houses.sort()\n    houses = [str(x) for x in houses]\n    houses"
    },
    {
        "number": 837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(' ')]\n    return str(n * x + n * y)\n"
    },
    {
        "number": 838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(sum(sum(row) for row in matrix))\n"
    },
    {
        "number": 839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 43 21 18 2\\n3 0 21 11 65\\n5 2 0 1 4\\n54 62 12 0 99\\n87 64 81 33 0\")\n    620\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    stdin = [list(map(int, line.split())) for line in stdin]\n    stdin = [list(i) for i in zip(*stdin)]\n    stdin = [sum(i) for i in stdin]\n    return str(max(stdin))\n"
    },
    {
        "number": 840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if a[i] <= b[j]:\n            i += 1\n        j += 1\n    return j\n"
    },
    {
        "number": 841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1\")\n    113337\n    >>> solution(\"6\\n2\")\n    1337\n    \"\"\"\n    n = int(stdin)\n    s = \"\"\n    while len(s) < n:\n        s += \"1337\"\n    return s[:n]\n"
    },
    {
        "number": 842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    d = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n    if n == 1:\n        return 'FINITE'\n    if s[0] == '>':\n        if d[0] == 1:\n            return 'INFINITE'\n        else:\n            return 'FINITE'\n    else:\n        if d[0] == 1:\n            return 'FINITE'\n        else:\n            return 'INFINITE'\n"
    },
    {
        "number": 844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(';', '')"
    },
    {
        "number": 846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    b.sort()\n    ans = []\n    for i in range(1, n + 1):\n        if i not in b:\n            ans.append(i)\n    return''.join(map(str, ans))"
    },
    {
        "number": 847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n    left, right = 0, len(cards) - 1\n    while left < right:\n        if cards[left] + cards[right] == 0:\n            return str(right - left)\n        elif cards[left] + cards[right] < 0:\n            left += 1\n        else:\n            right -= 1\n    return str(right - left)\n"
    },
    {
        "number": 848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matches = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i + j) % k == 0:\n                matches.append((i + 1, j + 1))\n    if len(matches) == 0:\n        return '-1'\n    return '\\n'.join(map(lambda x:''.join(map(str, x)), matches))\n"
    },
    {
        "number": 849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(a / b / c / d)"
    },
    {
        "number": 850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums.sort()\n    nums.reverse()\n    nums = nums[:k]\n    nums.sort()\n    nums.reverse()\n    print(nums)\n    return str(nums[0]) +'' + str(nums[1])"
    },
    {
        "number": 851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(i) for i in stdin]\n    arr.insert(0, 0)\n    arr.append(0)\n    res = 0\n    for i in range(1, n + 1):\n        if arr[i] == 1:\n            res = max(res, i - k)\n        else:\n            res = max(res, i - k + 1)\n    return res"
    },
    {
        "number": 852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 1 1\\n1 0\\n5 2 3\\n1 2 3 2 2\\n4 3 4\\n0 2 4 3\\n2 3 5\\n3 0\\n7 2 3\\n3 0 2 1 3 0 1\\n7 1 4\\n4 4 3 0 2 4 2\\n5 2 3\\n1 2 3 2 2\\n\")\n    Yes\n    \"\"\"\n    n, k, l = map(int, stdin.split(\"\\n\")[0].split())\n    p = [0] + [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    d = [int(i) for i in stdin.split(\"\\n\")[2].split()]\n    x = 0\n    for t in range(k):\n        x = (x + p[t % 2 * 2 * k]) % n\n        d[x] += 1\n        if d[x] > l:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n5 0 5 0\")\n    0\n    >>> solution(\"11\\n5 5 5 5 5 5 5 5 5 0 5 5\")\n    5555555550\n    \"\"\"\n    n = int(stdin.readline())\n    cards = [int(x) for x in stdin.readline().split()]\n    cards.sort()\n    max_number = 0\n    for card in cards:\n        if card == 0:\n            continue\n        max_number = max(max_number, card * 9)\n    if max_number == 0:\n        return -1\n    return max_number\n"
    },
    {
        "number": 854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    burles = T\n    candy = 0\n    for i in range(n):\n        if burles >= prices[i]:\n            burles -= prices[i]\n            candy += 1\n        else:\n            break\n    return candy"
    },
    {
        "number": 855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    alice = [int(x) for x in stdin.split()]\n    bob = [int(x) for x in stdin.split()]\n    alice_score = 0\n    bob_score = 0\n    for i in range(k):\n        if alice[i] == a:\n            alice_score += 1\n        if bob[i] == b:\n            bob_score += 1\n    return str(alice_score) + \" \" + str(bob_score)"
    },
    {
        "number": 856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 1\\n-199 192\\n5 19\\n5 -1 4 2 0\\n1 2\\n69\")\n    '391 0\\n0 6 1 3 5'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    keys = list(map(int, stdin.split()))\n    keys.sort()\n    keys = [str(i) for i in keys]\n    seq.sort()\n    seq = [str(i) for i in seq]\n    for i in range(len(seq)):\n        if seq[i] in keys:\n            seq[i] = '1'\n        else:\n            seq[i] = '0'\n    return''.join(seq)"
    },
    {
        "number": 858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(0.5)\n"
    },
    {
        "number": 860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if a[0] == 0:\n        return \"Impossible\"\n    if a[0] == 1:\n        return \"Possible\"\n    if a[0] == 2:\n        return \"Possible\"\n    if a[0] == 3:\n        return \"Possible\"\n    if a[0] == 4:\n        return \"Possible\"\n    if a[0] == 5:\n        return \"Possible\"\n    if a[0] == 6:\n        return \"Possible\"\n    if a[0] == 7:\n        return \"Possible\"\n    if a[0] == 8:\n        return \"Possible\"\n    if a[0] == 9:\n        return \"Possible\"\n    return \"Impossible\""
    },
    {
        "number": 861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, R = map(int, stdin.split())\n    return str(2 * R * m - R)\n"
    },
    {
        "number": 862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3 2 0\")\n    3\n    >>> solution(\"2\\n10 10\")\n    1\n    >>> solution(\"6\\n5 2 6 5 7 4\")\n    6\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    a.sort()\n    a.reverse()\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            a.pop(i)\n            n -= 1\n        else:\n            i += 1\n    return a.index(0) + 1\n"
    },
    {
        "number": 863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, t_a = map(int, stdin.split())\n    b, t_b = map(int, stdin.split())\n    departure = stdin.split()[-1]\n    departure = int(departure[:2]) * 60 + int(departure[3:])\n    arrival = departure + t_a\n    while arrival % b!= 0:\n        arrival += 1\n    return arrival // b - 1\n"
    },
    {
        "number": 864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    food_types = list(map(int, stdin.split()))\n    food_types.sort()\n    food_types.reverse()\n    days = 0\n    for i in range(n):\n        if food_types[i] == m:\n            days += 1\n        else:\n            break\n    return days"
    },
    {
        "number": 865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(pow(1378, n, 10))[-1]\n"
    },
    {
        "number": 869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a, b) - min(a, b)) +'' + str(max(a, b) // min(a, b))\n\ndef"
    },
    {
        "number": 870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, L, v_1, v_2 = map(int, stdin.split())\n    return str(round(L / (v_1 + v_2) - d / (v_1 - v_2), 6))\n"
    },
    {
        "number": 871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    landings = int(stdin.split()[0])\n    min_gap = int(stdin.split()[1])\n    landings_times = [int(x) for x in stdin.split()[2:]]\n    landings_times.sort()\n    landings_times.append(24 * 60)\n    landings_times.append(0)\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.append(0)\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.append(24 * 60)\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.append(0)\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 0]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!= 24 * 60]\n    landings_times.sort()\n    landings_times = [x for x in landings_times if x!="
    },
    {
        "number": 872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] % 2 == 1:\n                a[i], a[j] = a[j], a[i]\n                break\n    return''.join(map(str, a))\n"
    },
    {
        "number": 873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        return -1\n    \n    for i in range(1, n + 1):\n        if i == n:\n            return''.join(map(str, range(1, n + 1)))\n        else:\n            return''.join(map(str, range(1, n + 1)))"
    },
    {
        "number": 875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stones = [int(x) for x in stdin.readline().split()]\n    stones_set = set(stones)\n    if len(stones_set) < 3:\n        return '-1'\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'\n    stones_set = set(stones)\n    stones_set.remove(1)\n    stones_set.remove(2)\n    stones_set.remove(3)\n    if len(stones_set) > 0:\n        return '-1'"
    },
    {
        "number": 876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    i = 0\n    while arr[i] < k:\n        i += 1\n    return i\n"
    },
    {
        "number": 877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"Finite\"\n    if n == 2:\n        return \"Infinite\"\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return \"Infinite\"\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            return \"Finite\"\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return \"Infinite\"\n        if a[0] == a[1] == a[2] or a[0] == a[1] == a[3] or a[0] == a[2] == a[3] or a[1] == a[2] == a[3]:\n            return \"Finite\"\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4]:\n            return \"Infinite\"\n        if a[0] == a[1] == a[2] == a[3] or a[0] == a[1] == a[2] == a[4] or a[0] == a[1] == a[3] == a[4] or a[0] == a[1] == a[3] == a[4] or a[0] == a[2] == a[3] == a[4] or a[1] == a[2] == a[3] == a[4]:\n            return \"Finite\"\n    if n == 6:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5]:\n            return \"Infinite\"\n        if a[0] == a[1] == a[2] == a[3] == a[5] or a[0] == a[1] == a[2] == a[4] == a[5] or a[0] == a[1] == a[3] == a[4] == a[5] or a[0] == a[1] == a[3] == a[4] == a[5] or a[0] == a[1] == a[4] == a[5] or a[0] == a[2] == a[3] == a[4] == a[5] or a[1] == a[2] == a[3] == a[4] == a[5]:\n            return \"Finite\"\n    if n == 7:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6]:\n            return \"Infinite\"\n        if a[0] == a[1] == a[2] == a[3] == a[5] == a[6] or a[0] == a[1] == a[2] == a[4] == a[6] or a[0] == a[1] == a[3] == a[4] == a[6] or a[0] == a[1] == a[4] == a[6] or a[0] == a[2] == a[3] == a[4] == a[6] or a[0] == a[2] == a[4] == a[6] or a[0] == a[3] == a[4] == a[6] or a[1] == a[2] == a[3] == a[4] == a[6] or a[1] == a[2] == a[4] == a[6] or a[1] == a[3] == a[4] == a[6] or a[2] == a[3] == a[4] == a[6]:\n            return \"Finite\"\n    if n == 8:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7]:\n            return \"Infinite\"\n        if a[0] == a[1] == a[2] == a[3] == a[5] == a[6] == a[7] or a[0] == a[1] == a[2] == a[4] == a[7] or a[0] == a[1] == a[3] == a[4] == a[7] or a[0] == a[1] == a[4] == a[7] or a[0] == a[2] == a[3] == a[4] == a[7] or a[0] == a[2] == a[4] == a[7] or a[0] == a[3] == a[4] == a[7] or a[1] == a[2] == a[3] == a[4] == a[7] or a[1] == a[2] == a[4] == a[7] or a[1] == a[3] == a[4] == a[7] or a[2] == a[3] == a[4] == a[7]:\n            return \"Finite\"\n    if n == 9:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8]:\n            return \"Infinite\"\n        if a[0] == a[1] == a[2] == a[3] == a[5] == a[6] == a[7] == a[8] or a[0] == a[1] =="
    },
    {
        "number": 879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p.insert(0, 0)\n    p.append(n)\n    res = []\n    for i in range(1, n + 1):\n        res.append(p[i])\n        while p[i]!= p[p[i]]:\n            p[i] = p[p[i]]\n            res.append(p[i])\n    return''.join(map(str, res))\n"
    },
    {
        "number": 880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i = 0\n    while i < n - 1:\n        if a[i] == a[i + 1]:\n            a[i] = a[i] + 1\n            a.pop(i + 1)\n            n -= 1\n        else:\n            i += 1\n    return str(n)"
    },
    {
        "number": 882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace('?', 'a')\n    t = stdin.replace('?', 'b')\n    return s.count('a') * t.count('b')\n\nprint(solution(input()))\n"
    },
    {
        "number": 883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    fingers = [int(x) for x in stdin.readline().split()]\n    fingers.sort()\n    count = 0\n    for i in range(n):\n        count += fingers[i]\n    return count"
    },
    {
        "number": 884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(pow(2, a) * pow(2, b) * pow(2, c))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n - 1)\n    else:\n        n = str(n)\n        for i in range(len(n) - 1):\n            for j in range(i + 1, len(n)):\n                if int(n[i]) > int(n[j]):\n                    n = n[:i] + n[j] + n[i] + n[j + 1:]\n                    break\n        return n\n"
    },
    {
        "number": 887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    buttons = list(map(int, stdin.readline().split()))\n    if sum(buttons) == 1:\n        return \"YES\"\n    if sum(buttons) == 0:\n        return \"NO\"\n    if sum(buttons) == 2:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 3:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 4:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 5:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 6:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 7:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 8:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 9:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 10:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 11:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 12:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 13:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 14:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 15:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 16:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 17:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 18:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 19:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 20:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 21:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 22:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 23:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 24:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 25:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 26:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 27:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 28:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 29:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 30:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 31:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 32:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 33:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 34:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 35:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 36:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 37:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 38:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 39:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 40:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 41:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 42:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 43:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 44:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 45:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 46:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 47:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons) == 48:\n        if buttons[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if sum(buttons"
    },
    {
        "number": 888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    s = list(map(int, stdin.readline().split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] == s[j]:\n                dp[i][j] = dp[i][j - 1] + 1\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1\n    print(dp[0][n - 1])\n    print(dp[0][n - 1] + dp[1][n - 1])\n    for i in range(n - 1):\n        print(i + 1, n - 1)\n    return ''"
    },
    {
        "number": 889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, l, r, x):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1 if l <= 1 <= r else 0\n        if l <= 1 <= r:\n            return 1\n        if l > r:\n            return 0\n        return solve(n - 1, l, r, x) + solve(n - 1, l - 1, r, x)\n\n    n, l, r, x = map(int, stdin.split())\n    return solve(n, l, r, x)\n"
    },
    {
        "number": 891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(stdin)\n    for _ in range(k):\n        for i in range(1, n):\n            if arr[i - 1] == 'W' and arr[i] == 'B' and arr[(i + 1) % n] == 'W':\n                arr[i] = 'W'\n            elif arr[i - 1] == 'B' and arr[i] == 'W' and arr[(i + 1) % n] == 'B':\n                arr[i] = 'B'\n    return ''.join(arr)\n"
    },
    {
        "number": 892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x) + \" \" + str(y) + \" \" + str(x) + \" \" + str(y)"
    },
    {
        "number": 895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = map(int, stdin.split())\n    t = int(stdin.split()[-1])\n    times.sort()\n    print(times)\n    return len(times) - bisect.bisect(times, t)"
    },
    {
        "number": 896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if n!= len(a) or m!= len(b):\n        return \"NO\"\n    matrix = []\n    for i in range(n):\n        matrix.append(a[i] ^ b[i])\n    return \"YES\\n\" + \"\\n\".join(map(str, matrix))\n"
    },
    {
        "number": 897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2\\n0\\n1\")\n    '500000004'\n    >>> solution(\"1 2\\n1\\n0\")\n    '0'\n    >>> solution(\"7 26\\n0 15 12 9 13 0 14\\n11 1 0 13 15 12 0\")\n    '230769233'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    a_set = set(a)\n    b_set = set(b)\n    a_set.discard(0)\n    b_set.discard(0)\n    a_set = list(a_set)\n    b_set = list(b_set)\n    a_set.sort()\n    b_set.sort()\n    a_set_dict = {a_set[i]: i + 1 for i in range(len(a_set))}\n    b_set_dict = {b_set[i]: i + 1 for i in range(len(b_set))}\n    a_set_dict_inv = {v: k for k, v in a_set_dict.items()}\n    b_set_dict_inv = {v: k for k, v in b_set_dict.items()}\n    a_set_dict_inv_inv = {v: k for k, v in a_set_dict_inv.items()}\n    b_set_dict_inv_inv = {v: k for k, v in b_set_dict_inv.items()}\n    a_set_dict_inv_inv_inv = {v: k for k, v in a_set_dict_inv_inv.items()}\n    b_set_dict_inv_inv_inv = {v: k for k, v in b_set_dict_inv_inv.items()}\n    a_set_dict_inv_inv_inv_inv = {v: k for k, v in a_set_dict_inv_inv_inv.items()}\n    b_set_dict_inv_inv_inv_inv = {v: k for k, v in b_set_dict_inv_inv_inv.items()}\n    a_set_dict_inv_inv_inv_inv_inv = {v: k for k, v in a_set_dict_inv_inv_inv_inv.items()}\n    b_set_dict_inv_inv_inv_inv_inv = {v: k for k, v in b_set_dict_inv_inv_inv_inv.items()}\n    a_set_dict_inv_inv_inv_inv_inv_inv = {v: k for k, v in a_set_dict_inv_inv_inv_inv_inv.items()}\n    b_set_dict_inv_inv_inv_inv_inv_inv = {v: k for k, v in b_set_dict_inv_inv_inv_inv_inv.items()}\n    a_set_dict_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in a_set_dict_inv_inv_inv_inv_inv_inv.items()}\n    b_set_dict_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in b_set_dict_inv_inv_inv_inv_inv_inv.items()}\n    a_set_dict_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in a_set_dict_inv_inv_inv_inv_inv_inv_inv.items()}\n    b_set_dict_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in b_set_dict_inv_inv_inv_inv_inv_inv_inv.items()}\n    a_set_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in a_set_dict_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    b_set_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in b_set_dict_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    a_set_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in a_set_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    b_set_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = {v: k for k, v in b_set_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv.items()}\n    a_set_dict_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_"
    },
    {
        "number": 898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    gcd = 1\n    for i in range(n):\n        gcd = gcd * a[i] // math.gcd(gcd, a[i])\n    return gcd"
    },
    {
        "number": 899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    edges = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')[1:]]\n    edges.sort(key=lambda x: x[2])\n    edges = [edges[0]] + [edge for edge in edges if edge[0]!= edges[0][0] and edge[0]!= edges[0][1] and edge[1]!= edges[0][0] and edge[1]!= edges[0][1]]\n    print(edges)\n    return str(len(edges))"
    },
    {
        "number": 900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    groups = []\n    for _ in range(m):\n        k, *members = map(int, stdin.split())\n        groups.append(members)\n    \n    traitors = set()\n    for group in groups:\n        for member in group:\n            if member < 0:\n                traitors.add(abs(member))\n    \n    if len(traitors) == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    return a[k - 1]"
    },
    {
        "number": 903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n % 2 == 0:\n        median = (a[n // 2] + a[n // 2 - 1]) // 2\n    else:\n        median = a[n // 2]\n    for i in range(k):\n        if n % 2 == 0:\n            a[n // 2] += 1\n        else:\n            a[n // 2] += 1\n            a[n // 2 - 1] += 1\n        a.sort()\n        if n % 2 == 0:\n            median = (a[n // 2] + a[n // 2 - 1]) // 2\n        else:\n            median = a[n // 2]\n    return str(median)\n"
    },
    {
        "number": 904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(stdin.split(), key=len)))\n\ndef"
    },
    {
        "number": 905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    cakes = []\n    for _ in range(n):\n        cakes.append(list(map(int, stdin.split())))\n    cakes.sort(key=lambda x: x[0])\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    sugar = 0\n    for cake in cakes:\n        if cake[0] > s:\n            return -1\n        s -= cake[0]\n        sugar += cake[1]\n    return sugar\n"
    },
    {
        "number": 906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n * m * (k + 1) * (k - 1) // 2 % 1000000007)"
    },
    {
        "number": 907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = [tuple(map(int, stdin.split())) for _ in range(m)]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    x = 1\n    y = n\n    for a, b in pairs:\n        if a < x:\n            x = a\n        if b > y:\n            y = b\n    return \"YES\" if x < y else \"NO\"\n"
    },
    {
        "number": 908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    s = stdin.readline().split()\n    c.sort()\n    ans = 0\n    for i in range(n):\n        if c[i] < 0:\n            ans += c[i]\n            c[i] = 0\n    for i in range(n):\n        if c[i] > 0:\n            ans += c[i]\n            c[i] = 0\n    if ans == 0:\n        return '0'\n    return str(ans)"
    },
    {
        "number": 909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return str(max(a + b * c, a * (b + c), a * b * c))\n"
    },
    {
        "number": 910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n % 2 == 0:\n        return '-1'\n    if a % 2 == 0:\n        return '-1'\n    if b % 2 == 0:\n        return '-1'\n    if a < b:\n        return '-1'\n    if a > b:\n        return '-1'\n    if a == b:\n        return '0'\n    if a == 1:\n        return '1'\n    if b == 1:\n        return '2'\n    if a == 2:\n        return '3'\n    if b == 2:\n        return '4'\n    if a == 3:\n        return '5'\n    if b == 3:\n        return '6'\n    if a == 4:\n        return '7'\n    if b == 4:\n        return '8'\n    if a == 5:\n        return '9'\n    if b == 5:\n        return '10'\n    if a == 6:\n        return '11'\n    if b == 6:\n        return '12'\n    if a == 7:\n        return '13'\n    if b == 7:\n        return '14'\n    if a == 8:\n        return '15'\n    if b == 8:\n        return '16'\n    if a == 9:\n        return '17'\n    if b == 9:\n        return '18'\n    if a == 10:\n        return '19'\n    if b == 10:\n        return '20'\n    if a == 11:\n        return '21'\n    if b == 11:\n        return '22'\n    if a == 12:\n        return '23'\n    if b == 12:\n        return '24'\n    if a == 13:\n        return '25'\n    if b == 13:\n        return '26'\n    if a == 14:\n        return '27'\n    if b == 14:\n        return '28'\n    if a == 15:\n        return '29'\n    if b == 15:\n        return '30'\n    if a == 16:\n        return '31'\n    if b == 16:\n        return '32'\n    if a == 17:\n        return '33'\n    if b == 17:\n        return '34'\n    if a == 18:\n        return '35'\n    if b == 18:\n        return '36'\n    if a == 19:\n        return '37'\n    if b == 19:\n        return '38'\n    if a == 20:\n        return '39'\n    if b == 20:\n        return '40'\n    if a == 21:\n        return '41'\n    if b == 21:\n        return '42'\n    if a == 22:\n        return '43'\n    if b == 22:\n        return '44'\n    if a == 23:\n        return '45'\n    if b == 23:\n        return '46'\n    if a == 24:\n        return '47'\n    if b == 24:\n        return '48'\n    if a == 25:\n        return '49'\n    if b == 25:\n        return '50'\n    if a == 26:\n        return '51'\n    if b == 26:\n        return '52'\n    if a == 27:\n        return '53'\n    if b == 27:\n        return '54'\n    if a == 28:\n        return '55'\n    if b == 28:\n        return '56'\n    if a == 29:\n        return '57'\n    if b == 29:\n        return '58'\n    if a == 30:\n        return '59'\n    if b == 30:\n        return '60'\n    if a == 31:\n        return '61'\n    if b == 31:\n        return '62'\n    if a == 32:\n        return '63'\n    if b == 32:\n        return '64'\n    if a == 33:\n        return '65'\n    if b == 33:\n        return '66'\n    if a == 34:\n        return '67'\n    if b == 34:\n        return '68'\n    if a == 35:\n        return '69'\n    if b == 35:\n        return '70'\n    if a == 36:\n        return '71'\n    if b == 36:\n        return '72'\n    if a == 37:\n        return '73'\n    if b == 37:\n        return '74'\n    if a == 38:\n        return '75'\n    if b == 38:\n        return '76'\n    if a == 39:\n        return '77'\n    if b == 39:\n        return '78'\n    if a == 40:\n        return '79'\n    if b == 40:\n        return '80'\n    if a == 41:\n        return '81'\n    if b == 41:\n        return '82'\n    if a == 42:\n        return '83'\n    if b == 42:\n        return '84'\n    if a == 43:\n        return '85'\n    if b == 43:\n        return '86'\n    if a == 44:\n        return '87'\n    if b == 44:\n        return '88'\n    if a == 45:\n        return '89'\n    if b == 45:\n        return '90'\n    if a == 46:\n        return '91'\n    if b == 46:\n        return '92'\n    if a == 47:\n        return '93'\n    if b == 47:\n        return '94'\n    if a == 48:\n        return '95'\n    if b == 48:\n        return '96'\n    if a == 49:\n        return '97'\n    if b == 49:\n        return '98'\n    if a == 50:\n        return '99'\n    if b == 50:\n        return '100'\n    if a == 51:\n        return '101'\n    if b == 51:\n        return '102'\n    if a == 52:\n        return '103'\n    if b == 52:\n        return '104'\n    if a == 53:\n        return '105'\n    if b == 53:\n        return '106'\n    if a == 54:\n        return '107'\n    if b == 54:\n        return '108'\n    if a == 55:\n        return '109'\n    if b == 55:\n        return '110'\n    if a == 56:\n        return '"
    },
    {
        "number": 911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    p.sort()\n    t.sort()\n    p.reverse()\n    t.reverse()\n    sum_p = sum(p)\n    sum_t = sum(t)\n    if sum_p < sum_t:\n        return \"Radewoosh\"\n    elif sum_p > sum_t:\n        return \"Limak\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '0'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '4'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '0'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '4'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ... 1 2 3\n   ... 4 3 3\n   ... 4 1 2\n   ... 10 2 6\n   ... 1 2 3 4 5 7\n   ... 2 1 1\n   ... 2''')\n    '2'\n    >>> solution('''5 2 3\n   ..."
    },
    {
        "number": 913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    r = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    r.sort()\n    b.sort()\n    if r[0] > b[0]:\n        return -1\n    return n - r.index(1)"
    },
    {
        "number": 914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return 'codeforces'"
    },
    {
        "number": 916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    apples = [int(x) for x in stdin.readline().split()]\n    parents = [int(x) for x in stdin.readline().split()]\n    swaps = 0\n    for i in range(n):\n        if parents[i] == i + 1:\n            swaps += 1\n    if swaps % 2 == 0:\n        print(0)\n        return\n    print(n - 1)\n    return"
    },
    {
        "number": 917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    regions = {}\n    for i in range(n):\n        surname, region, points = stdin.split()\n        regions[surname] = region\n        if points > 800:\n            points = 800\n        if points < 0:\n            points = 0\n        if points in regions:\n            regions[points].append(surname)\n        else:\n            regions[points] = [surname]\n    for i in range(m):\n        if len(regions[i]) == 1:\n            print(regions[i][0])\n        else:\n            print('?')\n    return ''"
    },
    {
        "number": 919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if k > n:\n        return -1\n    if k == n:\n        return sum(ord(c) - 96 for c in s)\n    if k == 1:\n        return sum(ord(c) - 96 for c in s) - 26 * (n - 1)\n    if k == 2:\n        return sum(ord(c) - 96 for c in s) - 26 * (n - 1) - 26\n    return sum(ord(c) - 96 for c in s) - 26 * (n - 1) - 26 - 26\n"
    },
    {
        "number": 920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b, c, d = [int(x) for x in stdin.readline().split()]\n    if n < a + b + c + d:\n        print(-1)\n    else:\n        print(1, a, b)"
    },
    {
        "number": 921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] > w:\n            break\n        ans += w // a[i]\n        w %= a[i]\n    if w > 0:\n        ans = -1\n    return ans\n"
    },
    {
        "number": 922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gears = [int(x) for x in stdin.split()]\n    gears.sort()\n    if gears[0]!= 0:\n        return \"No\"\n    for i in range(1, n):\n        if gears[i]!= i:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_a, r_a, t_a = map(int, stdin.split())\n    l_b, r_b, t_b = map(int, stdin.split())\n    l_a, r_a, t_a = l_a * t_a, r_a * t_a, t_a * t_a\n    l_b, r_b, t_b = l_b * t_b, r_b * t_b, t_b * t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a, r_a, l_b, r_b = l_a + t_a, r_a + t_a, l_b + t_b, r_b + t_b\n    l_a,"
    },
    {
        "number": 925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"89\")\n    2\n    >>> solution(\"00\")\n    4\n    >>> solution(\"73\")\n    15\n    \"\"\"\n    n = stdin\n    n = int(n)\n    good_numbers = 0\n    for i in range(0, 100):\n        if i < 10:\n            if n == i:\n                good_numbers += 1\n        else:\n            if n == i or n == i // 10:\n                good_numbers += 1\n    return good_numbers\n"
    },
    {
        "number": 926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stones = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    stones.sort(key=lambda x: x[0] * x[1] * x[2])\n    stones.sort(key=lambda x: x[0] * x[1], reverse=True)\n    stones.sort(key=lambda x: x[0] * x[2], reverse=True)\n    stones.sort(key=lambda x: x[0] * x[2], reverse=True)\n    stones.sort(key=lambda x: x[1] * x[2], reverse=True)\n    stones.sort(key=lambda x: x[1] * x[2], reverse=True)\n    stones.sort(key=lambda x: x[2], reverse=True)\n    stones.sort(key=lambda x: x[2], reverse=True)\n    return str(len(stones)) + '\\n' +''.join(map(str, stones))"
    },
    {
        "number": 927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(m):\n        ans += a[i] * (9 - i)\n    return str(ans)"
    },
    {
        "number": 928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n    '3\n    >>> solution('''2 3\n   ... 1 2 3\n   ... 0 1 1''')\n"
    },
    {
        "number": 930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, z, p = [int(x) for x in stdin.split()]\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(p):\n        x, y = [int(x) for x in stdin.split()]\n        matrix[x - 1][y - 1] = 1\n    for _ in range(x):\n        matrix = rotate_matrix(matrix)\n    for _ in range(y):\n        matrix = rotate_matrix(matrix, True)\n    for _ in range(z):\n        matrix = rotate_matrix(matrix, True)\n    for i in range(n):\n        for j in range(m):\n            print(matrix[i][j], end=' ')\n        print()\n\n\ndef"
    },
    {
        "number": 932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(m)]\n    matrix_or = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            matrix_or[i][j] = 1 if matrix[i][j] == 1 else 0\n            for k in range(m):\n                matrix_or[i][j] |= matrix[i][k]\n            for k in range(n):\n                matrix_or[i][j] |= matrix[k][j]\n    for i in range(m):\n        for j in range(n):\n            if matrix_or[i][j] == 1:\n                print(' '.join(map(str, matrix[i])))\n                return\n    return 'NO'\n"
    },
    {
        "number": 933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    table = stdin[0]\n    hand = stdin[1:]\n    hand = [card[0] + card[1] for card in hand]\n    hand = sorted(hand)\n    table = [card[0] + card[1] for card in table]\n    table = sorted(table)\n    for card in hand:\n        if card in table:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"Akshat\"\n    return \"Malvika\"\n"
    },
    {
        "number": 936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    likes = int(stdin)\n    likes_list = [int(x) for x in stdin.split()]\n    likes_list.sort()\n    likes_list.reverse()\n    return str(likes_list[0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    print(sum(a[i] for i in range(k, n) if t[i] == 1))"
    },
    {
        "number": 938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = a // 2\n    m = b // 2\n    if n > m:\n        n, m = m, n\n    return n, m, n + m"
    },
    {
        "number": 939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dancers = [list(map(int, stdin.split())) for _ in range(m)]\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers.sort(key=lambda x: x[1])\n    dancers.sort(key=lambda x: x[2])\n    dancers.sort(key=lambda x: x[0])\n    dancers"
    },
    {
        "number": 940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(0, a + b + c - max(a, b, c) - min(a, b, c)))\n"
    },
    {
        "number": 941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    n = 0\n    for i in range(k):\n        n += a[i] * (b ** (k - i - 1))\n    if n % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] - i\n    b.sort()\n    if b[0] < 0:\n        return \"Impossible\"\n    else:\n        return \" \".join([str(x) for x in b])"
    },
    {
        "number": 943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    res = 0\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            res += nums[i]\n    return res"
    },
    {
        "number": 944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n0 10 5 15\\n\")\n    'yes'\n    >>> solution(\"4\\n0 15 5 10\\n\")\n    'no'\n    \"\"\"\n    n = int(stdin.readline())\n    points = [int(x) for x in stdin.readline().split()]\n    points.sort()\n    for i in range(n - 1):\n        if points[i + 1] - points[i] < 0:\n            return \"no\"\n    return \"yes\"\n"
    },
    {
        "number": 946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = stdin.readline().split()\n    if ans.count('1') >= 1:\n        return 'HARD'\n    return 'EASY'"
    },
    {
        "number": 947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n6\")\n    '2 2'\n    >>> solution(\"9\")\n    '3 3'\n    >>> solution(\"1\")\n    '1 1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [stdin.split() for _ in range(n)]\n    count = 0\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if matrix[i][j] == matrix[i][j + 1] == matrix[i + 1][j] == matrix[i + 1][j + 1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(a)\n    if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return str(a)\n"
    },
    {
        "number": 950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    passwords = [stdin.split()[i] for i in range(n)]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(int, i)) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords = [''.join(i) for i in passwords]\n    passwords = [list(i) for i in passwords]\n    passwords = [list(map(str, i)) for i in passwords]\n    passwords ="
    },
    {
        "number": 951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = int(stdin)\n    while n > 0:\n        n = n // 10\n    return k - n"
    },
    {
        "number": 952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 2 1 1\n   ... 5 2 6\n   ... 2 3 2\n   ... 3 4 3\n   ... 4 5 5\n   ... 1 5 4''')\n    '2 2'\n    >>> solution('''5 7\n   ... 2 1 5\n   ... 3 2 3\n   ... 1 3 3\n   ... 2 4 1\n   ... 4 3 5\n   ... 5 4 1\n   ... 1 5 3''')\n    '3 3'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    roads = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    roads.sort(key=lambda x: x[2])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[2])\n    roads = [roads[0]] + roads[1:]\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n"
    },
    {
        "number": 953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n5 2 4 3 6 7 1\\n0001001\\n0000000\\n0000010\\n1000001\\n0000000\\n0010000\\n1001000\")\n    '1 2 4 3 6 7 5'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    p = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    A = []\n    for i in range(n):\n        A.append([int(j) for j in stdin.split(\"\\n\")[i + 2].split(\" \")])\n    A = np.array(A)\n    A = A.T\n    A = A.tolist()\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A = [i for i in A if i!= [1] * n]\n    A = [i for i in A if i!= [0] * n]\n    A ="
    },
    {
        "number": 954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prices = [int(stdin) for _ in range(n)]\n    vitamins = [set(stdin) for _ in range(n)]\n    vitamin_a = set()\n    vitamin_b = set()\n    vitamin_c = set()\n    for i in range(n):\n        vitamin_a.add(vitamins[i].pop())\n        vitamin_b.add(vitamins[i].pop())\n        vitamin_c.add(vitamins[i].pop())\n    vitamin_a = list(vitamin_a)\n    vitamin_b = list(vitamin_b)\n    vitamin_c = list(vitamin_c)\n    vitamin_a.sort()\n    vitamin_b.sort()\n    vitamin_c.sort()\n    vitamin_a.reverse()\n    vitamin_b.reverse()\n    vitamin_c.reverse()\n    vitamin_a = ''.join(vitamin_a)\n    vitamin_b = ''.join(vitamin_b)\n    vitamin_c = ''.join(vitamin_c)\n    vitamin_a = int(vitamin_a)\n    vitamin_b = int(vitamin_b)\n    vitamin_c = int(vitamin_c)\n    if vitamin_a == 0 or vitamin_b == 0 or vitamin_c == 0:\n        return -1\n    else:\n        return sum(prices) + min(vitamin_a, vitamin_b, vitamin_c)"
    },
    {
        "number": 957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"hiedi\" in stdin else \"NO\"\n"
    },
    {
        "number": 958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0:n]\n    if k > 26 * n:\n        return '-1'\n    for i in range(n):\n        for j in range(n):\n            if i!= j and s[i]!= s[j] and abs(ord(s[i]) - ord(s[j])) == k:\n                return s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n    return '-1'\n"
    },
    {
        "number": 959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * k - n * (n - 1) // k)\n"
    },
    {
        "number": 961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ans ^= arr[i]\n    return str(ans)"
    },
    {
        "number": 962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 4 1\n   ... 4 3''')\n    '3\\n1\\n2\\n4\\n'\n    >>> solution('''4 5\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 4 1\n   ... 4 3\n   ... 1 3''')\n    '3\\n1\\n2\\n4\\n'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {v: set() for v in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    for v in range(1, n + 1):\n        if len(graph[v])!= 1:\n            return '-1'\n    return '\\n'.join(map(str, range(1, n + 1)))\n"
    },
    {
        "number": 963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 1 1\n   ... 3 4\n   ... ''')\n    '4'\n    >>> solution('''5 2\n   ... 1 1\n   ... 3 4\n   ... 5 5\n   ... ''')\n    '0'\n    >>> solution('''5 2\n   ... 1 1\n   ... 3 4\n   ... 5 5\n   ... 6 6\n   ... ''')\n    '0'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    segments = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0], segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] - 1, segment[1]] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0], segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] - 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0], segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] - 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] - 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment[0] + 1, segment[1] - 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[0])\n    segments = [\n        [segment[0] + 1, segment[1] + 1] for segment in segments\n    ]\n    segments.sort(key=lambda x: x[1])\n    segments = [\n        [segment["
    },
    {
        "number": 964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = [int(i) for i in stdin.split()]\n    if x1 == x2 == x3:\n        return str(x1)\n    if y1 == y2 == y3:\n        return str(y1)\n    if x1 == y1 == x2 == y2:\n        return str(x1)\n    if x1 == y1 == x3 == y3:\n        return str(x1)\n    if x2 == y2 == x3 == y3:\n        return str(x2)\n    if x1 == y2 == x3 == y3:\n        return str(x1)\n    if x1 == x2 == y1 == y2:\n        return str(y1)\n    if x2 == x3 == y1 == y2:\n        return str(y2)\n    if x1 == x2 == y3 == y1:\n        return str(y1)\n    if x1 == x2 == y3 == y1:\n        return str(y1)\n    if x3 == y2 == x1 == y1:\n        return str(y1)\n    if x3 == y2 == x2 == y1:\n        return str(y2)\n    if x3 == y1 == x1 == y2:\n        return str(y1)\n    if x3 == y1 == x2 == y2:\n        return str(y2)\n    return \"-1\""
    },
    {
        "number": 965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split('F')))"
    },
    {
        "number": 966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    while True:\n        year += 1\n        if len(set(str(year))) == len(str(year)):\n            return year"
    },
    {
        "number": 967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i]!= i + 1:\n            ans += 1\n    return ans"
    },
    {
        "number": 968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    names = []\n    for _ in range(n):\n        names.append(stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    names.sort()\n    for i in range(n):\n        if p[i]!= i + 1:\n            return \"NO\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if names[i][0] > names[j][0] or (names[i][0] == names[j][0] and names[i][1] > names[j][1]):\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n"
    },
    {
        "number": 971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin[i:i + m]) for i in range(0, n * m, m)]\n    return \"YES\" if is_convex(grid) else \"NO\"\n\n\ndef"
    },
    {
        "number": 973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    matrix = [list(stdin[i:i + c]) for i in range(0, len(stdin), c)]\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == 'S':\n                matrix[i][j] = '.'\n                break\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = '.'\n                break\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == 'D':\n                matrix[i][j] = '.'\n                break\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == 'S':\n                matrix[i][j] = 'S'\n                break\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == 'W':\n                matrix[i][j] = 'W'\n                break\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == 'D':\n                matrix[i][j] = 'D'\n                break\n    for i in range(r):\n        print(''.join(matrix[i]))\n    return ''\n"
    },
    {
        "number": 974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, [0, 0]))\n"
    },
    {
        "number": 976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = []\n    for _ in range(n):\n        l.append(list(map(int, stdin.split())))\n    l.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n):\n        ans += l[i][0] - l[i][1] + 1\n        if ans > x:\n            return ans - x\n    return ans\n"
    },
    {
        "number": 977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    good = []\n    for x in range(1, n + 1):\n        if x <= 2:\n            good.append(0)\n        elif x % p == 0:\n            good.append(0)\n        else:\n            good.append(sum(1 for ai in a if ai % x == 0))\n    print(sum(1 for x in good if x))\n    print(' '.join(map(str, [x for x in range(1, n + 1) if good[x - 1]!= 0])))\n    return ''"
    },
    {
        "number": 978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split('\\n')[0])\n    table = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    table = sorted(table, key=lambda x: x[0])\n    table = sorted(table, key=lambda x: x[1])\n    table = sorted(table, key=lambda x: x[2])\n    table = sorted(table, key=lambda x: x[3])\n    table = sorted(table, key=lambda x: x[4])\n    table = sorted(table, key=lambda x: x[5])\n    table = sorted(table, key=lambda x: x[6])\n    table = sorted(table, key=lambda x: x[7])\n    table = sorted(table, key=lambda x: x[8])\n    table = sorted(table, key=lambda x: x[9])\n    table = sorted(table, key=lambda x: x[10])\n    table = sorted(table, key=lambda x: x[11])\n    table = sorted(table, key=lambda x: x[12])\n    table = sorted(table, key=lambda x: x[13])\n    table = sorted(table, key=lambda x: x[14])\n    table = sorted(table, key=lambda x: x[15])\n    table = sorted(table, key=lambda x: x[16])\n    table = sorted(table, key=lambda x: x[17])\n    table = sorted(table, key=lambda x: x[18])\n    table = sorted(table, key=lambda x: x[19])\n    table = sorted(table, key=lambda x: x[20])\n    table = sorted(table, key=lambda x: x[21])\n    table = sorted(table, key=lambda x: x[22])\n    table = sorted(table, key=lambda x: x[23])\n    table = sorted(table, key=lambda x: x[24])\n    table = sorted(table, key=lambda x: x[25])\n    table = sorted(table, key=lambda x: x[26])\n    table = sorted(table, key=lambda x: x[27])\n    table = sorted(table, key=lambda x: x[28])\n    table = sorted(table, key=lambda x: x[29])\n    table = sorted(table, key=lambda x: x[30])\n    table = sorted(table, key=lambda x: x[31])\n    table = sorted(table, key=lambda x: x[32])\n    table = sorted(table, key=lambda x: x[33])\n    table = sorted(table, key=lambda x: x[34])\n    table = sorted(table, key=lambda x: x[35])\n    table = sorted(table, key=lambda x: x[36])\n    table = sorted(table, key=lambda x: x[37])\n    table = sorted(table, key=lambda x: x[38])\n    table = sorted(table, key=lambda x: x[39])\n    table = sorted(table, key=lambda x: x[40])\n    table = sorted(table, key=lambda x: x[41])\n    table = sorted(table, key=lambda x: x[42])\n    table = sorted(table, key=lambda x: x[43])\n    table = sorted(table, key=lambda x: x[44])\n    table = sorted(table, key=lambda x: x[45])\n    table = sorted(table, key=lambda x: x[46])\n    table = sorted(table, key=lambda x: x[47])\n    table = sorted(table, key=lambda x: x[48])\n    table = sorted(table, key=lambda x: x[49])\n    table = sorted(table, key=lambda x: x[50])\n    table = sorted(table, key=lambda x: x[51])\n    table = sorted(table, key=lambda x: x[52])\n    table = sorted(table, key=lambda x: x[53])\n    table = sorted(table, key=lambda x: x[54])\n    table = sorted(table, key=lambda x: x[55])\n    table = sorted(table, key=lambda x: x[56])\n    table = sorted(table, key=lambda x: x[57])\n    table = sorted(table, key=lambda x: x[58])\n    table = sorted(table, key=lambda x: x[59])\n    table = sorted(table, key=lambda x: x[60])\n    table = sorted(table, key=lambda x: x[61])\n    table = sorted(table, key=lambda x: x[62])\n    table = sorted(table, key=lambda x: x[63])\n    table = sorted(table, key=lambda x: x[64])\n    table = sorted(table, key=lambda x: x[65])\n    table = sorted(table, key=lambda x: x[66])\n    table = sorted(table, key=lambda x: x[67])\n    table = sorted(table, key=lambda x: x[68])\n    table = sorted(table, key=lambda x: x[69])\n    table = sorted(table, key=lambda x: x[70])\n    table = sorted(table, key=lambda x: x[71])\n    table = sorted(table, key=lambda x: x[72])\n    table = sorted(table, key=lambda x: x[73])\n    table = sorted(table, key=lambda x: x[74])\n    table = sorted(table, key=lambda x: x[75])\n    table = sorted(table, key=lambda x: x[76])\n    table = sorted(table, key=lambda x: x[77])\n    table = sorted(table, key=lambda x: x[78])\n    table = sorted(table, key=lambda x: x[79])\n    table = sorted(table, key=lambda x: x[80])\n    table = sorted(table, key=lambda x: x[81])\n    table = sorted(table, key=lambda x: x[82])\n    table = sorted(table, key=lambda x: x[83])\n    table = sorted(table, key=lambda x: x[84])\n    table = sorted(table, key=lambda x: x[85])\n    table = sorted(table, key=lambda x: x[86])\n    table = sorted(table, key=lambda x: x[87])\n    table = sorted(table, key=lambda x: x[88])\n    table = sorted(table, key=lambda x: x[89])\n    table = sorted(table, key="
    },
    {
        "number": 979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    return str(sum(abs(a[i] - a[j]) for i in range(n) for j in range(i + 1, n)) % m)\n"
    },
    {
        "number": 980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    s = [stdin.split()[i] for i in range(k)]\n    for i in range(k):\n        for j in range(n):\n            if s[i][j]!= s[i][n - j - 1]:\n                s[i] = s[i][:j] + s[i][j + 1:]\n                break\n    if s[0] == s[1] == s[2]:\n        return -1\n    return ''.join(s)\n"
    },
    {
        "number": 981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n5 4 3 2 1 2 3 4 5\\n\")\n    '55555'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q, r = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                ans = max(ans, p * arr[i] + q * arr[j] + r * arr[k])\n    return ans\n"
    },
    {
        "number": 984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    books = [int(x) for x in stdin.split(' ')]\n    books.sort()\n    cost = 0\n    for i in range(n):\n        if books[i] > k:\n            cost += books[i] - k\n            books[i] = k\n        else:\n            books[i] = 0\n    return cost"
    },
    {
        "number": 987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        p[a - 1], p[b - 1] = p[b - 1], p[a - 1]\n    return''.join(map(str, p))\n"
    },
    {
        "number": 988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-..\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-..\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\n**-**-**'\n    >>> solution(\"**-**-**\\n**-**-**\\n..-**-.*\\n**-**-**\\n..-**-..\\n**-**-**\")\n    '**-**-**\\n**-**-**\\n..-**-.*\\n**-**-P\\n..-**-P\\"
    },
    {
        "number": 989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    diff = a[-1] - a[0]\n    for i in range(k):\n        if a[-1] - a[0] > diff:\n            break\n        if a[0] == a[-1]:\n            break\n        if a[0] == a[-2]:\n            a[0] += 1\n        elif a[-1] == a[1]:\n            a[-1] -= 1\n        else:\n            a[0] += 1\n            a[-1] -= 1\n        a.sort()\n        diff = min(diff, a[-1] - a[0])\n    return str(diff)"
    },
    {
        "number": 990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    edges = []\n    for _ in range(n - 1):\n        edges.append(list(map(int, stdin.readline().split())))\n    m = int(stdin.readline())\n    restrictions = []\n    for _ in range(m):\n        restrictions.append(list(map(int, stdin.readline().split())))\n    \n    # print(edges)\n    # print(restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)\n    \n    # print(n, edges, m, restrictions)"
    },
    {
        "number": 991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2 1\n   ... 1 2 1 2\n   ... 1 3 2 4\n   ... 1 11\n   ... 1 2\n   ... 2 5\n   ... ''')\n    '2\\n14'\n    \"\"\"\n    n, m, s = map(int, stdin.split())\n    cities = [list(map(int, stdin.splitlines()[i].split())) for i in range(n)]\n    cities.insert(0, [0, 0, 0, 0])\n    cities.append([0, 0, 0, 0])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i - 1][0] + cities[i - 1][2])\n        cities[i].append(cities[i - 1][1] + cities[i - 1][3])\n    for i in range(1, n + 1):\n        cities[i].append(cities[i"
    },
    {
        "number": 992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 2 2 4\n   ... ''')\n    '6'\n    \"\"\"\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1 << n):\n        t = []\n        for j in range(n):\n            if i & (1 << j):\n                t.append(a[j])\n        if sum(t) == s:\n            ans += 1\n    return str(ans % 998244353)\n"
    },
    {
        "number": 993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 4 1 5''')\n    3\n    \"\"\"\n    n, m = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(candies[i:j + 1]) % m == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    notes = []\n    for _ in range(m):\n        d, h = map(int, stdin.split())\n        notes.append((d, h))\n    notes.sort()\n    max_h = 0\n    for i in range(m - 1):\n        if notes[i][0] + 1!= notes[i + 1][0]:\n            return 'IMPOSSIBLE'\n        if abs(notes[i][1] - notes[i + 1][1]) > 1:\n            return 'IMPOSSIBLE'\n        max_h = max(max_h, notes[i][1])\n    return max_h\n"
    },
    {
        "number": 995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    layers = [list(map(int, stdin.split())) for _ in range(n)]\n    critical = 0\n    for i in range(n):\n        for j in range(m):\n            for l in range(k):\n                if layers[i][j] == 1:\n                    if layers[i][j + 1] == 1:\n                        if layers[i + 1][j] == 1:\n                            critical += 1\n                    if layers[i][j + 1] == 1:\n                        if layers[i + 1][j] == 1:\n                            critical += 1\n                    if layers[i + 1][j] == 1:\n                        if layers[i + 1][j + 1] == 1:\n                            critical += 1\n    return critical"
    },
    {
        "number": 997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aba,123;1a;0\")\n    '123,0'\n    >>> solution(\"1;;01,a0,;\")\n    '1'\n    >>> solution(\"1\")\n    '1'\n    >>> solution(\"a\")\n    'a'\n    \"\"\"\n    return ','.join(\n        [\n            '-'\n            if not word.isdigit()\n            else word\n            for word in stdin.split(';')\n            if word.isdigit()\n        ]\n    )\n"
    },
    {
        "number": 998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    return str(max(len(bin(x)[2:]) - bin(x).count(\"0\"), len(bin(x)[2:]) - bin(x).count(\"1\")))\n"
    },
    {
        "number": 999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    chess_classes = [map(int, stdin.split('\\n')[i].split()) for i in range(1, n + 1)]\n    programming_classes = [map(int, stdin.split('\\n')[i].split()) for i in range(n + 2, n + m + 2)]\n    chess_classes.sort(key=lambda x: x[0])\n    programming_classes.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(len(chess_classes)):\n        for j in range(len(programming_classes)):\n            if i == j:\n                continue\n            ans = max(ans, abs(chess_classes[i][0] - programming_classes[j][0]))\n    return str(ans)\n"
    },
    {
        "number": 1000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stickers = [int(i) for i in stdin.split()]\n    petya = 0\n    gena = 0\n    for i in range(n):\n        if i % 2 == 0:\n            petya += stickers[i]\n        else:\n            gena += stickers[i]\n    return petya - gena"
    },
    {
        "number": 1002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    j = 0\n    for i in range(n):\n        if t[i] > d:\n            return -1\n        if t[i] > 0:\n            j += 1\n    return j\n\nprint(solution(input()))\n"
    },
    {
        "number": 1003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return n + (m - 1) // m\n"
    },
    {
        "number": 1004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 7 -7 3 -1 -3\")\n    1\n    >>> solution(\"8\\n1 -1 1 2 -1 -2 3 -3\")\n    2\n    >>> solution(\"6\\n2 5 -5 5 -5 -2\")\n    -1\n    >>> solution(\"3\\n-8 1 1\")\n    -1\n    \"\"\"\n    n = int(stdin.readline())\n    events = [int(x) for x in stdin.readline().split()]\n    events.sort()\n    if events[0] < 0:\n        return -1\n    if events[-1] > 0:\n        return -1\n    if len(set(events))!= len(events):\n        return -1\n    if len(events) == 1:\n        return 1\n    if len(events) == 2:\n        return 2\n    if len(events) == 3:\n        return 3\n    if len(events) == 4:\n        return 4\n    if len(events) == 5:\n        return 5\n    if len(events) == 6:\n        return 6\n    if len(events) == 7:\n        return 7\n    if len(events) == 8:\n        return 8\n    if len(events) == 9:\n        return 9\n    if len(events) == 10:\n        return 10\n    return -1\n"
    },
    {
        "number": 1005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    board = [list(stdin.readline()) for _ in range(n)]\n    crosses = []\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                crosses.append((i, j))\n    if len(crosses) < 5:\n        return 'NO'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '.':\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n                    continue\n                if (i, j) in crosses:\n"
    },
    {
        "number": 1007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, p = map(int, stdin.split())\n    return sum(i for i in range(k) if is_zcy(i, p)) % p\n\n\ndef"
    },
    {
        "number": 1008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) % 2 == 0 and stdin == stdin[::-1] else \"NO\"\n\ndef"
    },
    {
        "number": 1009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    chocolate = [int(x) for x in stdin.readline().split()]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if chocolate[j] == 0 and chocolate[i - 1] == 1:\n                dp[i] += dp[j]\n    print(dp[n])\n    return ''\n"
    },
    {
        "number": 1011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... 2\n   ... 5 6\n   ... ''')\n    '9:6'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    m = int(stdin.split('\\n')[2])\n    b = list(map(int, stdin.split('\\n')[3].split()))\n    a.sort()\n    b.sort()\n    a_b = []\n    for i in range(n):\n        a_b.append(a[i] - b[i])\n    a_b.sort()\n    return f'{a_b[-1]}:{a_b[-2]}'\n"
    },
    {
        "number": 1012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aa\\nabacaba\\nxdd\")\n    abaacba\n    >>> solution(\"abacaba\\nxdd\")\n    abaacba\n    >>> solution(\"aa\\nabacaba\\nxdd\")\n    -1\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        s = stdin.readline()\n        if s == s[::-1]:\n            print(-1)\n        else:\n            for i in range(1, len(s)):\n                if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                    print(s[:i] + s[i:])\n                    break\n            else:\n                print(-1)\n"
    },
    {
        "number": 1013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [list(map(int, stdin.split())) for _ in range(n)]\n    good_cells = set()\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 1:\n                good_cells.add((i, j))\n    good_corners = {(1, 1), (n, 1), (1, m), (n, m)}\n    good_cells = good_cells - good_corners\n    if not good_cells:\n        return 0\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x[1])\n    good_cells = [good_cells[0]] + [good_cells[-1]]\n    good_cells = set(good_cells)\n    good_cells = list(good_cells)\n    good_cells.sort(key=lambda x: x[0])\n    good_cells.sort(key=lambda x: x"
    },
    {
        "number": 1014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"white\"\n    else:\n        return \"black\"\n"
    },
    {
        "number": 1015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    res = [0] * (n * (n - 1) // 2 + 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == 0 and a[j] == 0:\n                res[i + j] += 1\n            if a[i] == 1 and a[j] == 0:\n                res[i + j] += 1\n            if a[i] == 0 and a[j] == 1:\n                res[i + j] += 1\n    return''.join(map(str, res))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    chemicals = [list(map(int, stdin.split())) for _ in range(m)]\n    chemicals.sort(key=lambda x: x[0])\n    chemicals.sort(key=lambda x: x[1])\n    danger = 1\n    for i in range(m):\n        if chemicals[i][0] > chemicals[i][1]:\n            danger *= 2\n    return danger\n"
    },
    {
        "number": 1017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 1018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.insert(0, 0)\n    a.append(0)\n    ans = 0\n    for i in range(1, n + 1):\n        if a[i] < a[i - 1]:\n            ans = i\n            break\n    return str(ans)"
    },
    {
        "number": 1019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = n\n    while a < b:\n        if n % a == 0 and n % b == 0:\n            return str(a) + \" \" + str(b)\n        a += 1\n        b -= 1\n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 1020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, k = map(int, stdin.split())\n    return str(w * h - (k - 1) * (w - 4 * (k - 1)) - (k - 1) * (h - 4 * (k - 1)))\n"
    },
    {
        "number": 1021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grigory = [int(x) for x in stdin.readline().split()]\n    andrew = [int(x) for x in stdin.readline().split()]\n    grigory.sort()\n    andrew.sort()\n    if grigory == andrew:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 1022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    r = list(map(int, stdin.readline().split()))\n    l.sort()\n    r.sort()\n    if l[0] > r[0]:\n        return \"NO\"\n    if l[-1] < r[-1]:\n        return \"NO\"\n    for i in range(1, n):\n        if l[i] > r[i - 1]:\n            return \"NO\"\n    return \"YES\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 1023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t_a, t_b, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    c = []\n    for i in range(m):\n        c.append(b[i] - a[i] - t_a)\n    c.sort()\n    if k >= m:\n        return str(c[k - 1])\n    else:\n        return str(-1)\n"
    },
    {
        "number": 1024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                ans += 1\n    return str(ans / (n * (n - 1) / 2))"
    },
    {
        "number": 1025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 0\n   ... 1 1\n   ... 2 0\n   ... 2 2''')\n    3\n    >>> solution('''3\n   ... 0 0\n   ... 1 1\n   ... 2 0''')\n    1\n    >>> solution('''1\n   ... 1 1''')\n    0\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    c = [1]\n    for i in range(1, n):\n        if b[i] - b[i - 1] > 1:\n            c.append(i + 1)\n    c.append(n)\n    return str(sum(b[i] for i in c))\n"
    },
    {
        "number": 1027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * (n - 1) // 2) +'' + str(m * (m - 1) // 2)"
    },
    {
        "number": 1029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    if p == 1:\n        print('<<', end='')\n        for i in range(1, k + 1):\n            print(i, end=' ')\n        print('>>')\n    elif p == n:\n        print('<<', end='')\n        for i in range(n - k, n):\n            print(i, end=' ')\n        print('>>')\n    else:\n        print('<<', end='')\n        for i in range(1, k + 1):\n            print(i, end=' ')\n        print('>>', end='')\n        print(' <<', end='')\n        for i in range(p - k, p):\n            print(i, end=' ')\n        print('>>')\n    return ''"
    },
    {
        "number": 1031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a.insert(0, 0)\n    a.sort()\n    a.append(0)\n    a."
    },
    {
        "number": 1032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    good = []\n    for x in range(1, n + 1):\n        if x <= 2:\n            good.append(0)\n        elif x % p == 0:\n            good.append(0)\n        else:\n            good.append(sum(1 for ai in a if ai % x == 0))\n    return str(sum(1 for x in good if x)) + '\\n' +''.join(map(str, range(1, n + 1)))\n"
    },
    {
        "number": 1033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2 2 8\\n4 6\\n1 5\\n3 8\")\n    19\n    17\n    15\n    14\n    13\n    12\n    10\n    8\n    \"\"\"\n    X, Y, Z, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()[1::3]))\n    B = list(map(int, stdin.split()[2::3]))\n    C = list(map(int, stdin.split()[3::3]))\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    C.sort(reverse=True)\n    ans = []\n    for i in range(K):\n        ans.append(A[i] + B[i] + C[i])\n    ans.sort(reverse=True)\n    for i in range(K):\n        print(ans[i])\n"
    },
    {
        "number": 1035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b // gcd(a, b))"
    },
    {
        "number": 1036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin.split('\\n')[1]\n    return s[(n - 1) % n]\n"
    },
    {
        "number": 1037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 1038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return bin(a ^ b)[2:]"
    },
    {
        "number": 1039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 1\n   ... 1 3 1\n   ... 2 4 1\n   ... 3 5 1\n   ... 3 1\n   ... 2 4\n   ... 2 3\n   ... 4 5''')\n    3\n    2\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()[:n - 1]]\n    m = int(stdin.readline())\n    queries = [tuple(map(int, line.split())) for line in stdin.readlines()[n - 1:]]\n    graph = {i: {} for i in range(1, n + 1)}\n    for u, v, w in edges:\n        graph[u][v] = w\n        graph[v][u] = w\n    for u, v in queries:\n        if u == v:\n            print(0)\n        else:\n            print(graph[u][v] if u in graph[v] else -1)\n"
    },
    {
        "number": 1040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    return n - len(s.split('fox')[0])"
    },
    {
        "number": 1041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    k = 1\n    while True:\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        s = s.replace('1', '0')\n        s = s.replace('1', '1')\n        s = s.replace('0', '1')\n        "
    },
    {
        "number": 1042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y:\n        return str(1)\n    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        return str(0)\n    if y % 2 == 0:\n        return str(0)\n    if x % 3 == 0:\n        return str(0)\n    if y % 3 == 0:\n        return str(0)\n    if x % 5 == 0:\n        return str(0)\n    if y % 5 == 0:\n        return str(0)\n    if x % 7 == 0:\n        return str(0)\n    if y % 7 == 0:\n        return str(0)\n    if x % 11 == 0:\n        return str(0)\n    if y % 11 == 0:\n        return str(0)\n    if x % 13 == 0:\n        return str(0)\n    if y % 13 == 0:\n        return str(0)\n    if x % 17 == 0:\n        return str(0)\n    if y % 17 == 0:\n        return str(0)\n    if x % 19 == 0:\n        return str(0)\n    if y % 19 == 0:\n        return str(0)\n    if x % 23 == 0:\n        return str(0)\n    if y % 23 == 0:\n        return str(0)\n    if x % 29 == 0:\n        return str(0)\n    if y % 29 == 0:\n        return str(0)\n    if x % 31 == 0:\n        return str(0)\n    if y % 31 == 0:\n        return str(0)\n    if x % 37 == 0:\n        return str(0)\n    if y % 37 == 0:\n        return str(0)\n    if x % 41 == 0:\n        return str(0)\n    if y % 41 == 0:\n        return str(0)\n    if x % 43 == 0:\n        return str(0)\n    if y % 43 == 0:\n        return str(0)\n    if x % 47 == 0:\n        return str(0)\n    if y % 47 == 0:\n        return str(0)\n    if x % 53 == 0:\n        return str(0)\n    if y % 53 == 0:\n        return str(0)\n    if x % 59 == 0:\n        return str(0)\n    if y % 59 == 0:\n        return str(0)\n    if x % 61 == 0:\n        return str(0)\n    if y % 61 == 0:\n        return str(0)\n    if x % 67 == 0:\n        return str(0)\n    if y % 67 == 0:\n        return str(0)\n    if x % 71 == 0:\n        return str(0)\n    if y % 71 == 0:\n        return str(0)\n    if x % 73 == 0:\n        return str(0)\n    if y % 73 == 0:\n        return str(0)\n    if x % 79 == 0:\n        return str(0)\n    if y % 79 == 0:\n        return str(0)\n    if x % 83 == 0:\n        return str(0)\n    if y % 83 == 0:\n        return str(0)\n    if x % 89 == 0:\n        return str(0)\n    if y % 89 == 0:\n        return str(0)\n    if x % 97 == 0:\n        return str(0)\n    if y % 97 == 0:\n        return str(0)\n    if x % 101 == 0:\n        return str(0)\n    if y % 101 == 0:\n        return str(0)\n    if x % 103 == 0:\n        return str(0)\n    if y % 103 == 0:\n        return str(0)\n    if x % 107 == 0:\n        return str(0)\n    if y % 107 == 0:\n        return str(0)\n    if x % 109 == 0:\n        return str(0)\n    if y % 109 == 0:\n        return str(0)\n    if x % 113 == 0:\n        return str(0)\n    if y % 113 == 0:\n        return str(0)\n    if x % 127 == 0:\n        return str(0)\n    if y % 127 == 0:\n        return str(0)\n    if x % 131 == 0:\n        return str(0)\n    if y % 131 == 0:\n        return str(0)\n    if x % 137 == 0:\n        return str(0)\n    if y % 137 == 0:\n        return str(0)\n    if x % 139 == 0:\n        return str(0)\n    if y % 139 == 0:\n        return str(0)\n    if x % 149 == 0:\n        return str(0)\n    if y % 149 == 0:\n        return str(0)\n    if x % 151 == 0:\n        return str(0)\n    if y % 151 == 0:\n        return str(0)\n    if x % 157 == 0:\n        return str(0)\n    if y % 157 == 0:\n        return str(0)\n    if x % 163 == 0:\n        return str(0)\n    if y % 163 == 0:\n        return str(0)\n    if x % 167 == 0:\n        return str(0)\n    if y % 167 == 0:\n        return str(0)\n    if x % 173 == 0:\n        return str(0)\n    if y % 173 == 0:\n        return str(0)\n    if x % 179 == 0:\n        return str(0)\n    if y % 179 == 0:\n        return str(0)\n    if x % 181 == 0:\n        return str(0)\n    if y % 181 == 0:\n        return str(0)\n    if x % 191 == 0:\n        return str(0)\n    if y % 191 == 0:\n        return str(0)\n    if x % 193 == 0:\n        return str(0)\n    if y % 193 == 0:\n        return str(0)\n    if x % 197 == 0:\n        return str(0)\n    if y % 197 == 0:\n        return str(0)\n    if x % 199 == 0:\n        return str(0)\n    if y % 199 == 0:\n        return str(0)\n    if x % 211 == 0:\n        return str(0)\n    if y % 211 == 0:\n        return str(0)\n    if x % 223 == 0:\n        return str(0)\n    if y % 223 == 0:\n        return str(0)\n    if x % 227 == 0:\n        return str(0)\n    if y % 227 == 0:\n        return str(0)\n    if x % 229 == 0:\n        return str(0)\n    if y % 229 == 0:\n        return str(0)\n    if x % 233 == 0:\n        return str(0)\n    if y % 233 == 0:\n        return str(0)\n    if x % 239 == 0:\n        return str(0)\n    if y % 239 == 0:\n        return str(0)\n    if x % 241 == 0:\n        return str(0)\n    if y % 241 == 0:\n        return str(0)\n    if x % 251 == 0:\n        return str(0)\n    if y % 251 == 0:\n        return str(0)\n    if x % 257 == 0:\n        return str(0)\n    if y % 257 == 0:\n        return str(0)\n    if x % 263 == 0"
    },
    {
        "number": 1043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    b = [0] * n\n    for i in range(n):\n        if a[i] == -1:\n            b[i] = -1\n        else:\n            b[i] = a[i]\n    dp = [0] * n\n    for i in range(n):\n        if b[i] == -1:\n            dp[i] = 0\n        else:\n            dp[i] = dp[i - 1] + b[i]\n    dp.sort()\n    ans = dp[n // 2]\n    return str(ans)\n"
    },
    {
        "number": 1044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 1 5 1 1\")\n    2\n    >>> solution(\"5\\n1 1 5 1 1\")\n    2\n    >>> solution(\"5\\n1 1 5 1 1\")\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    cycles = [int(x) for x in stdin.readline().split()]\n    first = 0\n    second = 0\n    for i in range(n):\n        if cycles[i] > 1:\n            first += 1\n        else:\n            second += 1\n    if first > second:\n        print(1)\n    elif first < second:\n        print(2)\n    else:\n        print(1)\n"
    },
    {
        "number": 1045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin)))\n\ndef"
    },
    {
        "number": 1046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count += 1\n        else:\n            break\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 0:\n            count += 1\n        else:\n            break\n    if count == n:\n        return -1\n    else:\n        return count\n"
    },
    {
        "number": 1047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            k += 1\n        else:\n            n -= 1\n            k += 1\n    return k\n"
    },
    {
        "number": 1048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    commands = stdin.split()[1]\n    \n    return commands.count('L') + commands.count('R') + commands.count('U') + commands.count('D')"
    },
    {
        "number": 1049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    schedule = [list(map(int, stdin.split())) for _ in range(d)]\n    return max(sum(schedule[i][j] == 0 for i in range(d)) for j in range(n))\n"
    },
    {
        "number": 1050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if m >= n:\n        return \"Yes\"\n    if k >= n:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 1051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(math.factorial(n) // math.factorial(n - k))\n"
    },
    {
        "number": 1053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 1055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split(' ')]\n    arr.sort()\n    return str(arr[0])"
    },
    {
        "number": 1056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''0 0 0 0 0 0 0 0 0\n   ... 0 0 0 0 0 0 0 0 0\n   ... 0 0 0 0 0 0 0 0 0\n   ... 0 0 0 0 0 0 0 0 0\n   ... 0 0 3 0 0 4 0 0 0\n   ... 0 0 0 0 0 0 0 0 0\n   ... 0 0 0 0 0 0 0 0 0\n   ... 0 0 0 0 0 0 0 0 0\n   ... 0 0 0 0 0 0 0 0 0\n   ... 0 0 0 0 0 0 0 0 0\n   ... ''')\n    '33.0476190476'\n    \"\"\"\n    board = [list(map(int, line.split())) for line in stdin.splitlines()]\n    board = [[0] * len(board[0])] + board + [[0] * len(board[0])]\n    path = [[0] * len(board[0]) for _ in range(len(board))]\n    for i in range(1, len(board) - 1):\n        for j in range(1, len(board[0]) - 1):\n            if board[i][j] == 0:\n                continue\n            path[i][j] = board[i][j]\n            if i - board[i][j] >= 1:\n                path[i][j] = min(path[i][j], path[i - board[i][j]][j])\n            if j - board[i][j] >= 1:\n                path[i][j] = min(path[i][j], path[i][j - board[i][j]])\n    for i in range(1, len(board) - 1):\n        for j in range(1, len(board[0]) - 1):\n            if board[i][j] == 0:\n                continue\n            path[i][j] = board[i][j]\n            if i - board[i][j] >= 1:\n"
    },
    {
        "number": 1057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abaa\")\n    6\n    >>> solution(\"aacdeee\")\n    6\n    >>> solution(\"az\")\n    3\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n    s = \"\".join(s)\n    s = list(s)\n    s.sort()\n"
    },
    {
        "number": 1058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 2 1 4\n   ... 1 2 4\n   ... 3 4 4\n   ... 2 8 3\n   ... 3 16 3\n   ... 1 32 2\n   ... ''')\n    '63'\n    >>> solution('''7\n   ... 1 100000 1\n   ... 1 100000 2\n   ... 1 100000 2\n   ... 4 50000 3\n   ... 3 50000 4\n   ... 4 50000 4\n   ... 3 50000 3\n   ... ''')\n    '300000'\n    >>> solution('''4\n   ... 1 1000 1\n   ... 2 500 2\n   ... 3 250 3\n   ... 4 125 4\n   ... ''')\n    '1000'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    vowels = 'aeiou'\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            if i * j == k:\n                if vowels in str(i) + str(j) + str(k):\n                    return str(i) + str(j) + str(k)\n    return -1\n"
    },
    {
        "number": 1060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(map(int, stdin.split())) for _ in range(5)]\n    n = 0\n    for i in range(5):\n        for j in range(5):\n            if matrix[i][j] == 1:\n                n += abs(i - 2) + abs(j - 2)\n    return n\n"
    },
    {
        "number": 1062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = []\n    for _ in range(n):\n        seq.append(stdin.readline().strip())\n    seq.sort()\n    for i in range(n):\n        if seq[i].count('?') == 0:\n            continue\n        else:\n            for j in range(len(seq[i])):\n                if seq[i][j] == '?':\n                    seq[i] = seq[i][:j] + str(seq[i][j + 1:])\n                    break\n    for i in range(n):\n        print(seq[i])\n    return ''\n"
    },
    {
        "number": 1064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    blocked = [int(x) for x in stdin.split('\\n')[1].split()]\n    costs = [int(x) for x in stdin.split('\\n')[2].split()]\n    if m > n:\n        return -1\n    if m == 0:\n        return 0\n    if k == 1:\n        return sum(costs)\n    if k == n:\n        return max(costs)\n    if m == 1:\n        return max(costs)\n    if m == n:\n        return max(costs)\n    if m == n - 1:\n        return max(costs)\n    if m == n - 2:\n        return max(costs)\n    if m == n - 3:\n        return max(costs)\n    if m == n - 4:\n        return max(costs)\n    if m == n - 5:\n        return max(costs)\n    if m == n - 6:\n        return max(costs)\n    if m == n - 7:\n        return max(costs)\n    if m == n - 8:\n        return max(costs)\n    if m == n - 9:\n        return max(costs)\n    if m == n - 10:\n        return max(costs)\n    if m == n - 11:\n        return max(costs)\n    if m == n - 12:\n        return max(costs)\n    if m == n - 13:\n        return max(costs)\n    if m == n - 14:\n        return max(costs)\n    if m == n - 15:\n        return max(costs)\n    if m == n - 16:\n        return max(costs)\n    if m == n - 17:\n        return max(costs)\n    if m == n - 18:\n        return max(costs)\n    if m == n - 19:\n        return max(costs)\n    if m == n - 20:\n        return max(costs)\n    if m == n - 21:\n        return max(costs)\n    if m == n - 22:\n        return max(costs)\n    if m == n - 23:\n        return max(costs)\n    if m == n - 24:\n        return max(costs)\n    if m == n - 25:\n        return max(costs)\n    if m == n - 26:\n        return max(costs)\n    if m == n - 27:\n        return max(costs)\n    if m == n - 28:\n        return max(costs)\n    if m == n - 29:\n        return max(costs)\n    if m == n - 30:\n        return max(costs)\n    if m == n - 31:\n        return max(costs)\n    if m == n - 32:\n        return max(costs)\n    if m == n - 33:\n        return max(costs)\n    if m == n - 34:\n        return max(costs)\n    if m == n - 35:\n        return max(costs)\n    if m == n - 36:\n        return max(costs)\n    if m == n - 37:\n        return max(costs)\n    if m == n - 38:\n        return max(costs)\n    if m == n - 39:\n        return max(costs)\n    if m == n - 40:\n        return max(costs)\n    if m == n - 41:\n        return max(costs)\n    if m == n - 42:\n        return max(costs)\n    if m == n - 43:\n        return max(costs)\n    if m == n - 44:\n        return max(costs)\n    if m == n - 45:\n        return max(costs)\n    if m == n - 46:\n        return max(costs)\n    if m == n - 47:\n        return max(costs)\n    if m == n - 48:\n        return max(costs)\n    if m == n - 49:\n        return max(costs)\n    if m == n - 50:\n        return max(costs)\n    if m == n - 51:\n        return max(costs)\n    if m == n - 52:\n        return max(costs)\n    if m == n - 53:\n        return max(costs)\n    if m == n - 54:\n        return max(costs)\n    if m == n - 55:\n        return max(costs)\n    if m == n - 56:\n        return max(costs)\n    if m == n - 57:\n        return max(costs)\n    if m == n - 58:\n        return max(costs)\n    if m == n - 59:\n        return max(costs)\n    if m == n - 60:\n        return max(costs)\n    if m == n - 61:\n        return max(costs)\n    if m == n - 62:\n        return max(costs)\n    if m == n - 63:\n        return max(costs)\n    if m == n - 64:\n        return max(costs)\n    if m == n - 65:\n        return max(costs)\n    if m == n - 66:\n        return max(costs)\n    if m == n - 67:\n        return max(costs)\n    if m == n - 68:\n        return max(costs)\n    if m == n - 69:\n        return max(costs)\n    if m == n - 70:\n        return max(costs)\n    if m == n - 71:\n        return max(costs)\n    if m == n - 72:\n        return max(costs)\n    if m == n - 73:\n        return"
    },
    {
        "number": 1065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, d = map(int, stdin.split())\n    return n - (k - 1) * m + d * (k - 1)"
    },
    {
        "number": 1066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - k + 1)\n"
    },
    {
        "number": 1067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    min_cost = 0\n    for i in range(n):\n        if nums[i] == 0:\n            min_cost += 1\n        else:\n            min_cost += nums[i]\n    return min_cost"
    },
    {
        "number": 1068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"12345168\")\n    '123+45=168'\n    >>> solution(\"099\")\n    '0+9=9'\n    >>> solution(\"199100\")\n    '1+99=100'\n    >>> solution(\"123123123456456456579579579\")\n    '123123123+456456456=579579579'\n    \"\"\"\n    stdin = stdin.replace(\"+\", \"\")\n    stdin = stdin.replace(\"=\", \"+\")\n    return stdin\n"
    },
    {
        "number": 1069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 5)\n\ndef"
    },
    {
        "number": 1070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    houses = list(map(int, stdin.split(' ')))\n    houses.sort()\n    max_len = 0\n    for i in range(n):\n        if i == 0:\n            max_len = max(max_len, houses[i] - houses[i] + 1)\n        else:\n            max_len = max(max_len, houses[i] - houses[i - 1] - 1)\n    return max_len"
    },
    {
        "number": 1071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    n = int(stdin)\n    if n > 10:\n        return \"NO\"\n    if n > 5:\n        if a > 0:\n            if b > 0:\n                if c > 0:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        if a > 0:\n            if b > 0:\n                if c > 0:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\""
    },
    {
        "number": 1072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"RL\")"
    },
    {
        "number": 1074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 1075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return '-1'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '0 1'\n    if n == 3:\n        return '0 1 3 2'\n    if n == 4:\n        return '0 1 3 2 0'\n    if n == 5:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 6:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 7:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 8:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 9:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 10:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 11:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 12:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 13:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 14:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 15:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 16:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 17:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 18:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 19:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 20:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 21:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 22:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 23:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 24:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 25:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 26:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 27:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 28:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 29:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 30:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 31:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 32:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 33:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 34:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 35:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 36:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 37:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 38:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 39:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 40:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 41:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 42:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 43:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 44:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 45:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 46:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 47:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 48:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 49:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 50:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 51:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 52:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 53:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 54:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 55:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 56:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 57:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 58:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 59:\n        return '0 1 3 2 4 9 3 6 13 10 5 11 7 15 14 12 8 0'\n    if n == 60:\n        return"
    },
    {
        "number": 1076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(int(n * m ** -1))\n"
    },
    {
        "number": 1077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    b = [0] * n\n    for i in range(n):\n        b[i] = int(a[i] / 2)\n    return''.join([str(x) for x in b])\n"
    },
    {
        "number": 1079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 1080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0] == 0:\n        return \"YES\"\n    if a[-1] == 0:\n        return \"YES\"\n    if a[0] == 1:\n        return \"NO\"\n    if a[-1] == n:\n        return \"NO\"\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 1 4\")\n    0\n    >>> solution(\"2\\n1 1\")\n    1\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    s = sum(a)\n    d = s // 2\n    ans = s\n    for i in range(n // 2):\n        s -= a[i]\n        ans = min(ans, abs(s - d))\n    print(ans)\n    print(\" \".join(map(str, a[:n // 2])))\n    print(\" \".join(map(str, a[n // 2:])))\n"
    },
    {
        "number": 1084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(n)]\n    return \"Yes\" if grid == [['#'] * m] * n else \"No\""
    },
    {
        "number": 1085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 2\n    while n > 1:\n        if n % k == 0:\n            n = n // k\n        else:\n            n -= k\n        k += 1\n    return str(k - 2)\n"
    },
    {
        "number": 1086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2\n   ... 1 2\n   ... 3 4\n   ... 3 4\n   ... 2 1''')\n    0\n    \"\"\"\n    h, w = map(int, stdin.split())\n    a = [list(map(int, stdin.splitlines()[1:h + 1]))]\n    b = [list(map(int, stdin.splitlines()[h + 1:]))]\n    a.append(b)\n    b.append(a)\n    return str(abs(sum(a[0][0]) - sum(a[0][1])))\n"
    },
    {
        "number": 1087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    # get max value\n    max_value = 0\n    for i in range(k):\n        max_value = max(max_value, sum([a[j] ^ i for j in range(n)]))\n\n    # return max value\n    return max_value"
    },
    {
        "number": 1088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m, k = map(int, stdin.split())\n    return str(sum(sum(abs(i - j) for j in range(1, m + 1)) for i in range(1, n + 1)))"
    },
    {
        "number": 1090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0:n]\n    l, r = 0, 0\n    for i in range(n):\n        if s[i] == 'L':\n            l += 1\n        else:\n            r += 1\n    if l == r:\n        return l\n    for _ in range(k):\n        l, r = 0, 0\n        for i in range(n):\n            if s[i] == 'L':\n                l += 1\n            else:\n                r += 1\n        if l == r:\n            return l\n        s = s[-1] + s[:-1]\n    return l"
    },
    {
        "number": 1091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    prices.sort()\n    return str(prices.index(prices[-1]) + 1) +'' + str(prices[-1])\n"
    },
    {
        "number": 1092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = list(map(int, stdin.split()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if lights[i - 1] == 1:\n            dp[i] = (dp[i] + dp[i - 2]) % 1000000007\n    return dp[n]\n"
    },
    {
        "number": 1094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]"
    },
    {
        "number": 1095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '8'"
    },
    {
        "number": 1097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if sum(a)!= n - 1:\n        return -1\n    if k == 1:\n        return n\n    if t == 1:\n        return n - 1\n    if t == n - 1:\n        return n\n    if t == n - 2:\n        return n - 1\n    if t == n - 3:\n        return n - 2\n    if t == n - 4:\n        return n - 3\n    if t == n - 5:\n        return n - 4\n    if t == n - 6:\n        return n - 5\n    if t == n - 7:\n        return n - 6\n    if t == n - 8:\n        return n - 7\n    if t == n - 9:\n        return n - 8\n    if t == n - 10:\n        return n - 9\n    if t == n - 11:\n        return n - 10\n    if t == n - 12:\n        return n - 11\n    if t == n - 13:\n        return n - 12\n    if t == n - 14:\n        return n - 13\n    if t == n - 15:\n        return n - 14\n    if t == n - 16:\n        return n - 15\n    if t == n - 17:\n        return n - 16\n    if t == n - 18:\n        return n - 17\n    if t == n - 19:\n        return n - 18\n    if t == n - 20:\n        return n - 19\n    if t == n - 21:\n        return n - 20\n    if t == n - 22:\n        return n - 21\n    if t == n - 23:\n        return n - 22\n    if t == n - 24:\n        return n - 23\n    if t == n - 25:\n        return n - 24\n    if t == n - 26:\n        return n - 25\n    if t == n - 27:\n        return n - 26\n    if t == n - 28:\n        return n - 27\n    if t == n - 29:\n        return n - 28\n    if t == n - 30:\n        return n - 29\n    if t == n - 31:\n        return n - 30\n    if t == n - 32:\n        return n - 31\n    if t == n - 33:\n        return n - 32\n    if t == n - 34:\n        return n - 33\n    if t == n - 35:\n        return n - 34\n    if t == n - 36:\n        return n - 35\n    if t == n - 37:\n        return n - 36\n    if t == n - 38:\n        return n - 37\n    if t == n - 39:\n        return n - 38\n    if t == n - 40:\n        return n - 39\n    if t == n - 41:\n        return n - 40\n    if t == n - 42:\n        return n - 41\n    if t == n - 43:\n        return n - 42\n    if t == n - 44:\n        return n - 43\n    if t == n - 45:\n        return n - 44\n    if t == n - 46:\n        return n - 45\n    if t == n - 47:\n        return n - 46\n    if t == n - 48:\n        return n - 47\n    if t == n - 49:\n        return n - 48\n    if t == n - 50:\n        return n - 49\n    if t == n - 51:\n        return n - 50\n    if t == n - 52:\n        return n - 51\n    if t == n - 53:\n        return n - 52\n    if t == n - 54:\n        return n - 53\n    if t == n - 55:\n        return n - 54\n    if t == n - 56:\n        return n - 55\n    if t == n - 57:\n        return n - 56\n    if t == n - 58:\n        return n - 57\n    if t == n - 59:\n        return n - 58\n    if t == n - 60:\n        return n - 59\n    if t == n - 61:\n        return n - 60\n    if t == n - 62:\n        return n - 61\n    if t == n - 63:\n        return n - 62\n    if t == n - 64:\n        return n - 63\n    if t == n - 65:\n        return n - 64\n    if t == n - 66:\n        return n - 65\n    if t == n - 67:\n        return n - 66\n    if t == n - 68:\n        return n - 67\n    if t == n - 69:\n        return n - 68\n    if t == n - 70:\n        return n - 69\n    if t == n - 71:\n        return n - 70\n    if t == n - 72:\n        return n - 71\n    if t == n - 73:\n        return n - 72\n    if t == n - 74:\n        return n - 73\n    if t == n - 75:\n        return n - 74\n    if t == n - 76:\n        return n - 75\n    if t == n - 77:\n        return n - 76\n    if t == n - 78:\n        return n - 77\n    if t == n - 79:\n        return n - 78\n    if t == n - 80:\n        return n - 79\n    if t == n - 81:\n        return n - 80\n    if t == n - 82:\n        return n - 81\n    if t == n - 83:\n        return n - 82\n    if t == n - 84:\n        return n - 83\n    if t == n - 85:\n        return n - 84\n    if t == n - 86:\n        return n - 85\n    if t == n - 87:\n        return n - 86\n    if t == n - 88:\n        return n -"
    },
    {
        "number": 1098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alarms = []\n    for i in range(n):\n        alarms.append(stdin)\n    return stdin"
    },
    {
        "number": 1099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\")\n    1\n    >>> solution(\"4 5\\n2 6\\n3 2\\n1 2\\n2 4\")\n    0\n    \"\"\"\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    edges.sort(key=lambda x: x[2])\n    count = 0\n    for u, v, _ in edges:\n        if u!= v:\n            count += 1\n            if count == n - 1:\n                return count\n            edges.remove((u, v, _))\n            edges.append((u, v, 0))\n    return count\n"
    },
    {
        "number": 1100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 1102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    return str(sum(t[:a]))"
    },
    {
        "number": 1103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    t = [0] * n\n    for i in range(n - 1):\n        t[i] = (a[i] | b[i])\n        if t[i]!= a[i] or t[i]!= b[i]:\n            return \"NO\"\n    t[n - 1] = (a[n - 1] | b[n - 1])\n    if t[n - 1]!= a[n - 1] or t[n - 1]!= b[n - 1]:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    solutions = []\n    for _ in range(n):\n        solutions.append(tuple(map(int, stdin.readline().split())))\n    solutions.sort()\n    for i in range(1, n):\n        if solutions[i][0] < solutions[i - 1][0] or solutions[i][1] < solutions[i - 1][1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    moves = stdin.split('\\n')[1]\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0445\u043e\u0434\u0430\n    counts = {}\n    for move in moves:\n        counts[move] = counts.get(move, 0) + 1\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0445\u043e\u0434\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432\n    counts_list = []\n    for move in moves:\n        counts_list.append(counts[move])\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0445\u043e\u0434\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432\n    counts_list_2 = []\n    for i in range(len(counts_list)):\n        counts_list_2.append(counts_list[i] + counts_list_2[i - 1] if i > 0 else counts_list[i])\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0445\u043e\u0434\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432\n    counts_list_3 = []\n    for i in range(len(counts_list)):\n        counts_list_3.append(counts_list_2[i] + counts_list_3[i - 1] if i > 0 else counts_list_2[i])\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0445\u043e\u0434\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432\n    counts_list_4 = []\n    for i in range(len(counts_list)):\n        counts_list_4.append(counts_list_3[i] + counts_list_4[i - 1] if i > 0 else counts_list_3[i])\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0445\u043e\u0434\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432\n    counts_list_5 = []\n    for i in range(len(counts_list)):\n        counts_list_5.append(counts_list_4[i] + counts_list_5[i - 1] if i > 0 else counts_list_4[i])\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0445\u043e\u0434\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432\n    counts_list_6 = []\n    for i in range(len(counts_list)):\n        counts_list_6.append(counts_list_5[i] + counts_list_6[i - 1] if i > 0 else counts_list_5[i])\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0445\u043e\u0434\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0445\u043e\u0434\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441"
    },
    {
        "number": 1108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 1109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n % k == 0:\n        return 0\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 2\n            break\n    for i in range(n):\n        if a[i] == 2:\n            a[i] = 1\n            break\n    return len(a) - n // k\n"
    },
    {
        "number": 1110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)\n"
    },
    {
        "number": 1111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    weights = list(map(int, stdin.split(' ')))\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j - weights[i - 1] >= 0:\n                dp[i][j] += dp[i - 1][j - weights[i - 1]]\n    print(sum(dp[n]) % (10 ** 9 + 7))\n    return ''\n"
    },
    {
        "number": 1112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 1 1\\n1 0 1\\n1 1 0\")\n    1 1 1\n    1 1 1\n    1 1 1\n    \"\"\"\n    nums = [int(x) for x in stdin.split()]\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == 0:\n            nums[i] = n * n\n    nums = [nums[i:i + n] for i in range(0, n * n, n)]\n    for i in range(n):\n        for j in range(n):\n            nums[i][j] = nums[j][i]\n    for i in range(n):\n        for j in range(n):\n            nums[i][j] = min(nums[i][j], n * n)\n    for i in range(n):\n        for j in range(n):\n            nums[i][j] = max(nums[i][j], 1)\n    return \"\\n\".join([\" \".join([str(x) for x in row]) for row in nums])\n"
    },
    {
        "number": 1113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    mex = [0] * n\n    for i in range(n):\n        mex[i] = max(arr[:i + 1])\n    for i in range(n):\n        if arr[i]!= mex[i]:\n            return str(i + 1)\n    return '-1'\n"
    },
    {
        "number": 1114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    f = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if n!= len(f) or m!= len(b):\n        return \"Impossible\"\n    for i in range(n):\n        if f[i]!= b[i]:\n            return \"Impossible\"\n    return \"Possible\""
    },
    {
        "number": 1115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    m, *l = map(int, stdin.split())\n    a.sort()\n    l.sort()\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if a[i] <= l[j][0]:\n            i += 1\n        elif a[i] >= l[j][1]:\n            j += 1\n        else:\n            break\n    if i == n and j == m:\n        return str(max(a))\n    return '-1'"
    },
    {
        "number": 1116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'REBEL' if stdin[0] % 2 == 0 else 'OBEY'"
    },
    {
        "number": 1117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rectangles = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    rectangles.sort(key=lambda x: x[1])\n    for i in range(1, n):\n        if rectangles[i][0] > rectangles[i - 1][1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, p_a, p_b = [int(x) for x in stdin.split(' ')]\n    return str(pow(p_a, p_b, 10 ** 9 + 7))"
    },
    {
        "number": 1120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 1121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [['A' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                table[i][j] = 'A'\n            elif i == 0:\n                table[i][j] = 'A' + table[i][j - 1]\n            elif j == 0:\n                table[i][j] = table[i - 1][j] + 'A'\n            else:\n                table[i][j] = min(table[i - 1][j], table[i][j - 1]) + 'A'\n    return ''.join(table[-1])\n"
    },
    {
        "number": 1122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 1123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 2 6 6\n   ... '''"
    },
    {
        "number": 1125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    if a[0] - 1 > a[1]:\n        return str(a[0] - 1)\n    return '-1'"
    },
    {
        "number": 1126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, M = map(int, stdin.split())\n    A = [X]\n    for i in range(1, N):\n        A.append(f(A[i - 1] ** 2, M))\n    return sum(A)\n"
    },
    {
        "number": 1127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1\n   ... 2\n   ... 1\n   ... 3\n   ... 3\n   ... 102\n   ... 4\n   ... 2069\n   ... ''')\n    '2 1 1 2'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        nums = [int(x) for x in stdin.readline().split()]\n        r = 0\n        b = 0\n        for i in range(n):\n            if nums[i] % 2 == 0:\n                b += 1\n            else:\n                r += 1\n        if r == 0:\n            print(2)\n        elif b == 0:\n            print(1)\n        else:\n            print(1 if r > b else 2)\n"
    },
    {
        "number": 1128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, m = [int(x) for x in stdin.split()]\n    if a % m == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]))"
    },
    {
        "number": 1130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    timetable = [list(map(int, stdin.split())) for _ in range(n)]\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key=lambda x: x[1])\n    timetable = sorted(timetable, key=lambda x: x[0])\n    timetable = sorted(timetable, key"
    },
    {
        "number": 1131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, w, x, c = [int(x) for x in stdin.split()]\n    if c <= a:\n        return 0\n    else:\n        return b - x + 1 + (c - a - 1) * (w - x)\n"
    },
    {
        "number": 1132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n\")\n    'bus topology'\n    >>> solution(\"4 4\\n1 2\\n2 3\\n3 1\\n1 4\\n\")\n    'ring topology'\n    >>> solution(\"4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n\")\n   'star topology'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    if len(graph) == 1:\n        return \"bus topology\"\n    elif len(graph) == n:\n        return \"star topology\"\n    else:\n        return \"unknown topology\"\n"
    },
    {
        "number": 1133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n    words.sort(key=lambda x: len(x), reverse=True)\n    print(len(words[0]))\n    return words[0]"
    },
    {
        "number": 1134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 1135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    while len(s) > 1:\n        s = s[1:-1]\n    return s"
    },
    {
        "number": 1136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(range(n, m + 1)) % (10 ** 9 + 7))\n"
    },
    {
        "number": 1137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    s = stdin[:n]\n    t = stdin[n:n + m]\n    k = min(k, 10)\n    return max(len(s) + len(t) - k * 2, 0)"
    },
    {
        "number": 1138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\n2\\n1 2\\n3 5\\n2\\n1 3\\n4 5\\n3\\n1 1\\n2 4\\n5 5\\n3\\n1 1\\n2 2\\n3 5\")\n    36\n    \"\"\"\n    n, m = map(int, stdin.split())\n    intervals = [list(map(int, stdin.split())) for _ in range(n)]\n    intervals.sort(key=lambda x: x[0])\n    dp = [0] * (m + 1)\n    for i in range(n):\n        for j in range(intervals[i][0], intervals[i][1]):\n            dp[j] += 1\n    return max(dp) ** 2\n"
    },
    {
        "number": 1140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()[1]\n    for _ in range(m):\n        l, r, c_1, c_2 = map(str, stdin.split()[1:])\n        l, r, c_1, c_2 = int(l), int(r), c_1, c_2\n        s = s[:l - 1] + c_2 + s[r:]\n    return s\n"
    },
    {
        "number": 1142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    waves = []\n    for _ in range(n):\n        l, r, a = map(int, stdin.split())\n        waves.append((l, r, a))\n    waves.sort()\n    bullets = k\n    for l, r, a in waves:\n        bullets -= a\n        if bullets < 0:\n            return '-1'\n        bullets += r - l\n    return str(bullets)\n"
    },
    {
        "number": 1143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    days = [0] * 13\n    for _ in range(n):\n        m, d, p, t = map(int, stdin.readline().split())\n        days[m - 1] += p\n        days[m + 12 - 1] -= p\n    days = [d for d in days if d > 0]\n    return len(days)\n"
    },
    {
        "number": 1144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    m = int(stdin.readline())\n    t = stdin.readline().strip()\n    return str(n - m + 1)"
    },
    {
        "number": 1145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] > a[i]:\n                ans += a[j] - a[i]\n                break\n    return ans\n"
    },
    {
        "number": 1146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lamps = [set() for _ in range(m)]\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        lamps[x].add(y)\n    for i in range(m):\n        if lamps[i] == set():\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] <= a[j] and a[j] % x == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 1148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 4 2 3 3\n   ... ''')\n    '12'\n    >>> solution('''3\n   ... 5 5 5\n   ... ''')\n    '15'\n    >>> solution('''6\n   ... 10 10 10 1 10 10\n   ... ''')\n    '11'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (i + 1)\n    return str(ans)\n"
    },
    {
        "number": 1149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, *a = map(int, stdin.split())\n    q, *b = map(int, stdin.split())\n    if p == 0 or q == 0:\n        return \"Oh, my keyboard!\"\n    if p == n:\n        return \"I become the guy.\"\n    if q == n:\n        return \"Oh, my keyboard!\"\n    if p == q:\n        return \"Oh, my keyboard!\"\n    if p + q == n:\n        return \"I become the guy.\"\n    return \"Oh, my keyboard!\"\n"
    },
    {
        "number": 1150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, U = [int(x) for x in stdin.split(' ')]\n    E = [int(x) for x in stdin.split(' ')]\n    E.sort()\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)\n    E.insert(0, 0)\n    E.append(E[-1] + U)"
    },
    {
        "number": 1152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 6\n   ... 2 5 3 1 11 4 4\n   ... 7 8 2 4 1 8\n   ... ''')\n    3\n    >>> solution('''3 3\n   ... 1 10 100\n   ... 1 100 10\n   ... ''')\n    2\n    >>> solution('''1 4\n   ... 4\n   ... 1 1 1 1\n   ... ''')\n    1\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    x = list(map(int, stdin.split('\\n')[2].split()))\n    y = list(map(int, stdin.split('\\n')[3].split()))\n    x.sort()\n    y.sort()\n    if x[-1] > y[-1]:\n        return str(x[-1] - y[-1] + 1)\n    else:\n        return str(x[-1] - x[0] + 1)\n"
    },
    {
        "number": 1154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > h:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 1155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = [map(int, stdin.split()) for _ in range(n)]\n    prices = sorted(prices, key=lambda x: x[1])\n    total = 0\n    for i in range(m):\n        total += prices[i][0] * prices[i][1]\n    return str(total / m)\n"
    },
    {
        "number": 1156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = stdin.readline().strip()\n    l, r = 0, 10 ** 9\n    for i in range(n):\n        if b[i] == '0':\n            if a[i] < l:\n                l = a[i]\n            if a[i] > r:\n                r = a[i]\n    return str(l) +'' + str(r)\n"
    },
    {
        "number": 1157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count_neg = 0\n    count_pos = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] < 0:\n                count_neg += 1\n            elif a[i] * a[j] > 0:\n                count_pos += 1\n    return str(count_neg) +'' + str(count_pos)"
    },
    {
        "number": 1158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    arr.reverse()\n    count = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 1159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return -1\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 17\n    if n == 6:\n        return 19\n    if n == 7:\n        return 23\n    if n == 8:\n        return 29\n    if n == 9:\n        return 31\n    if n == 10:\n        return 37\n    if n == 11:\n        return 41\n    if n == 12:\n        return 43\n    if n == 13:\n        return 47\n    if n == 14:\n        return 53\n    if n == 15:\n        return 59\n    if n == 16:\n        return 61\n    if n == 17:\n        return 67\n    if n == 18:\n        return 71\n    if n == 19:\n        return 73\n    if n == 20:\n        return 79\n    if n == 21:\n        return 83\n    if n == 22:\n        return 89\n    if n == 23:\n        return 97\n    if n == 24:\n        return 101\n    if n == 25:\n        return 103\n    if n == 26:\n        return 107\n    if n == 27:\n        return 109\n    if n == 28:\n        return 113\n    if n == 29:\n        return 127\n    if n == 30:\n        return 131\n    if n == 31:\n        return 137\n    if n == 32:\n        return 139\n    if n == 33:\n        return 149\n    if n == 34:\n        return 151\n    if n == 35:\n        return 157\n    if n == 36:\n        return 163\n    if n == 37:\n        return 167\n    if n == 38:\n        return 173\n    if n == 39:\n        return 179\n    if n == 40:\n        return 181\n    if n == 41:\n        return 191\n    if n == 42:\n        return 193\n    if n == 43:\n        return 197\n    if n == 44:\n        return 199\n    if n == 45:\n        return 211\n    if n == 46:\n        return 223\n    if n == 47:\n        return 227\n    if n == 48:\n        return 229\n    if n == 49:\n        return 233\n    if n == 50:\n        return 239\n    if n == 51:\n        return 241\n    if n == 52:\n        return 251\n    if n == 53:\n        return 257\n    if n == 54:\n        return 263\n    if n == 55:\n        return 269\n    if n == 56:\n        return 271\n    if n == 57:\n        return 277\n    if n == 58:\n        return 281\n    if n == 59:\n        return 283\n    if n == 60:\n        return 293\n    if n == 61:\n        return 307\n    if n == 62:\n        return 311\n    if n == 63:\n        return 313\n    if n == 64:\n        return 317\n    if n == 65:\n        return 331\n    if n == 66:\n        return 337\n    if n == 67:\n        return 347\n    if n == 68:\n        return 349\n    if n == 69:\n        return 353\n    if n == 70:\n        return 359\n    if n == 71:\n        return 367\n    if n == 72:\n        return 373\n    if n == 73:\n        return 379\n    if n == 74:\n        return 383\n    if n == 75:\n        return 389\n    if n == 76:\n        return 397\n    if n == 77:\n        return 401\n    if n == 78:\n        return 409\n    if n == 79:\n        return 419\n    if n == 80:\n        return 421\n    if n == 81:\n        return 431\n    if n == 82:\n        return 433\n    if n == 83:\n        return 439\n    if n == 84:\n        return 443\n    if n == 85:\n        return 449\n    if n == 86:\n        return 457\n    if n == 87:\n        return 461\n    if n == 88:\n        return 463\n    if n == 89:\n        return 467\n    if n == 90:\n        return 479\n    if n == 91:\n        return 487\n    if n == 92:\n        return 491\n    if n == 93:\n        return 499\n    if n == 94:\n        return 503\n    if n == 95:\n        return 509\n    if n == 96:\n        return 521\n    if n == 97:\n        return 523\n    if n == 98:\n        return 541\n    if n == 99:\n        return 547\n    if n == 100:\n        return 557\n    if n == 101:\n        return 563\n    if n == 102:\n        return 569\n    if n == 103:\n        return 571\n    if n == 104:\n        return 577\n    if n == 105:\n        return 581\n    if n == 106:\n        return 583\n    if n == 107:\n        return 589\n    if n == 108:\n        return 593\n    if n == 109:\n        return 599\n    if n == 110:\n        return 601\n    if n == 111:\n        return 607\n    if n == 112:\n        return 613\n    if n == 113:\n        return 617\n    if n == 114:\n        return 619\n    if n == 115:\n        return 631\n    if n == 116:\n        return 643\n    if n == 117:\n        return 647\n    if n == 118:\n        return 653\n    if n == 119:\n        return 659\n    if n == 120:\n        return 661\n    if n == 121:\n        return 673\n    "
    },
    {
        "number": 1160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 1 0 1 1 0\\n3\\nXL\\nS,M\\nXL,XXL\")\n    'YES\\nXL\\nM\\nXXL'\n    \"\"\"\n    n = int(stdin.split()[1])\n    sizes = [int(x) for x in stdin.split()[2:]]\n    sizes.sort()\n    sizes = [str(x) for x in sizes]\n    sizes = \",\".join(sizes)\n    if n == 1:\n        return \"YES\\n\" + sizes\n    if n == 2:\n        return \"YES\\n\" + sizes + \"\\n\" + sizes\n    return \"NO\"\n"
    },
    {
        "number": 1161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Impossible' if stdin.count('<')!= stdin.count('>') or stdin.count('{')!= stdin.count('}') or stdin.count('[')!= stdin.count(']') else len(stdin) - max(stdin.count('<'), stdin.count('>'), stdin.count('{'), stdin.count('}'), stdin.count('['), stdin.count(']'))"
    },
    {
        "number": 1162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, s, r = map(int, stdin.split())\n    return str(p * (s - r) % 998244353)\n"
    },
    {
        "number": 1163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return ''.join(['B' if i % 2 == 0 else 'G' for i in range(1, n + m + 1)])\n"
    },
    {
        "number": 1164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"chipsy48.32televizor12.390\")\n    '12.438.32'\n    >>> solution(\"a1b2c3.38\")\n    '6.38'\n    >>> solution(\"aa0.01t0.03\")\n    '0.04'\n    \"\"\"\n    return \".\".join(\n        [\n            \"{:.2f}\".format(sum(int(i) for i in p.split(\".\")) / 100)\n            for p in stdin.split(\".\")\n        ]\n    )\n"
    },
    {
        "number": 1165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1].split(' ')]\n    a.sort()\n    s = ''\n    for i in range(n):\n        if i % 2 == 0:\n            s += 'A'\n        else:\n            s += 'B'\n    return s"
    },
    {
        "number": 1167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 5 4 5 8\\n7 5 4 5 2\")\n    7 1\n    >>> solution(\"20 53 45 26 4\")\n    1 3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n    h.sort()\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if h[i] | h[j] > h[i] and h[i] | h[j] > h[j] and h[i] | h[j] > h[i] | h[j]:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 1169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n - max(m - n + 1, 0)) + \" \" + str(n - min(m - n + 1, 0))\n"
    },
    {
        "number": 1170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"A??C\")\n    8\n    \"\"\"\n    s = stdin\n    Q = s.count(\"?\")\n    return sum(3 ** i for i in range(Q)) % (10 ** 9 + 7)\n"
    },
    {
        "number": 1173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 3\n   ... 1 3\n   ... 1 2\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    matches = []\n    for _ in range(n):\n        matches.append(list(map(int, stdin.readline().split())))\n    matches.sort()\n    matches.sort(key=lambda x: x[1])\n    days = 0\n    i = 0\n    while i < len(matches):\n        j = i + 1\n        while j < len(matches) and matches[j][0] <= matches[i][1]:\n            j += 1\n        days = max(days, j - i)\n        i = j\n    return days if days > 0 else -1\n"
    },
    {
        "number": 1174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] // 2 ** m\n        m -= 1\n    return str(ans)"
    },
    {
        "number": 1175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str(sum(1 for x in range(L, R + 1) for y in range(L, R + 1) if x ^ y == y))"
    },
    {
        "number": 1176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... -10 5 -4\n   ... ''')\n    '19'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    b[0] = a[0]\n    b[1] = a[0] + a[1]\n    for i in range(2, n):\n        b[i] = max(b[i - 1], b[i - 2] + a[i])\n    return str(b[-1])\n"
    },
    {
        "number": 1177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 2 2 4''')\n    5\n    \"\"\"\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    f = [[0] * n for _ in range(n)]\n    for i in range(n):\n        f[i][i] = 1\n    for i in range(n - 1):\n        f[i][i + 1] = 1\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            f[i][j] = f[i + 1][j] + f[i][i]\n            if a[i] + a[j] == s:\n                f[i][j] += 1\n    return sum(f[0][n - 1]) % 998244353\n"
    },
    {
        "number": 1178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4 1\n   ... 2 3 4 1''')\n    '3'\n    >>> solution('''4"
    },
    {
        "number": 1179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    return seq[k - 1]\n"
    },
    {
        "number": 1180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    res = 0\n    for i in range(n - k + 1):\n        res += int(s[i:i + k])\n    return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 1181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(m - 1):\n        ans += abs(a[i] - a[i + 1])\n    return ans"
    },
    {
        "number": 1182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, n, k = map(int, stdin.split())\n    v = []\n    for _ in range(n):\n        v.append(list(map(int, stdin.split())))\n    v = sorted(v, key=lambda x: x[0])\n    v = sorted(v, key=lambda x: x[1])\n    v = sorted(v, key=lambda x: x[0] * x[1])\n    return v[k - 1][0] * v[k - 1][1]\n"
    },
    {
        "number": 1183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(',') + 1"
    },
    {
        "number": 1185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"NO\"\n    \n    # find all possible permutations\n    permutations = []\n    for i in range(1, n + 1):\n        if i & i == 0:\n            permutations.append(i)\n    \n    # check if any of the permutations is the answer\n    for permutation in permutations:\n        if permutation & 1 == 0:\n            return \"YES\"\n    \n    # if no permutation is the answer, return the first one\n    return \" \".join(map(str, permutations[0:2]))\n"
    },
    {
        "number": 1187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... 1 2\n   ... 1 3\n   ... 3 4\n   ... 2 4\n   ... 1 4\n   ... ''')\n    '1'\n    >>> solution('''3 3\n   ... 1 2\n   ... 2 3\n   ... 3 1\n   ... ''')\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges = list(set(edges))\n    edges.sort()\n    colors = [0] * m\n    for i in range(m):\n        colors[i] = 1\n        for j in range(i):\n            if edges[i][0] == edges[j][1] or edges[i][1] == edges[j][0]:\n                colors[i] = max(colors[i], colors[j] + 1)\n    return str(max(colors))\n"
    },
    {
        "number": 1188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        if a[i] == 1:\n            m += 1\n        else:\n            break\n    if m == 0:\n        print(-1)\n    else:\n        print(m)\n        for i in range(m):\n            print(1, end=' ')\n        print(1)\n        for i in range(m, n):\n            print(2, end=' ')\n        print(2)\n        for i in range(m, n):\n            print(4, end=' ')\n        print(4)\n        for i in range(m, n):\n            print(8, end=' ')\n        print(8)\n        for i in range(m, n):\n            print(16, end=' ')\n        print(16)\n        for i in range(m, n):\n            print(32, end=' ')\n        print(32)\n        for i in range(m, n):\n            print(64, end=' ')\n        print(64)\n        for i in range(m, n):\n            print(128, end=' ')\n        print(128)\n        for i in range(m, n):\n            print(256, end=' ')\n        print(256)\n        for i in range(m, n):\n            print(512, end=' ')\n        print(512)\n        for i in range(m, n):\n            print(1024, end=' ')\n        print(1024)\n        for i in range(m, n):\n            print(2048, end=' ')\n        print(2048)\n        for i in range(m, n):\n            print(4096, end=' ')\n        print(4096)\n        for i in range(m, n):\n            print(8192, end=' ')\n        print(8192)\n        for i in range(m, n):\n            print(16384, end=' ')\n        print(16384)\n        for i in range(m, n):\n            print(32768, end=' ')\n        print(32768)\n        for i in range(m, n):\n            print(65536, end=' ')\n        print(65536)\n        for i in range(m, n):\n            print(131072, end=' ')\n        print(131072)\n        for i in range(m, n):\n            print(262144, end=' ')\n        print(262144)\n        for i in range(m, n):\n            print(524288, end=' ')\n        print(524288)\n        for i in range(m, n):\n            print(1048576, end=' ')\n        print(1048576)\n        for i in range(m, n):\n            print(2097152, end=' ')\n        print(2097152)\n        for i in range(m, n):\n            print(4194304, end=' ')\n        print(4194304)\n        for i in range(m, n):\n            print(8388608, end=' ')\n        print(8388608)\n        for i in range(m, n):\n            print(16777216, end=' ')\n        print(16777216)\n        for i in range(m, n):\n            print(33554432, end=' ')\n        print(33554432)\n        for i in range(m, n):\n            print(67108864, end=' ')\n        print(67108864)\n        for i in range(m, n):\n            print(134217728, end=' ')\n        print(134217728)\n        for i in range(m, n):\n            print(268435456, end=' ')\n        print(268435456)\n        for i in range(m, n):\n            print(536870912, end=' ')\n        print(536870912)\n        for i in range(m, n):\n            print(1099511627776, end=' ')\n        print(1099511627776)\n        for i in range(m, n):\n            print(2199023255552, end=' ')\n        print(2199023255552)\n        for i in range(m, n):\n            print(4398046511104, end=' ')\n        print(4398046511104)\n        for i in range(m, n):\n            print(8796093022208, end=' ')\n        print(8796093022208)\n        for i in range(m, n):\n            print(17592186044416, end=' ')\n        print(17592186044416)\n        for i in range(m, n):\n            print(35184372088832, end=' ')\n        print(35184372088832)\n        for i in range(m, n):\n            print(70368744177664, end=' ')\n        print(70368744177664)\n        for i in range(m, n):\n            print(140737488355328, end=' ')\n        print(140737488355328)\n        for i in range(m, n):\n            print(281474976710656, end=' ')\n        print(281474976710656)\n        for i in range(m, n):\n            print(562949953421312, end=' ')\n        print(562949953421312)\n        for i in range(m, n):\n            print(1125899906842624, end=' ')\n        print(1125899906842624)\n        for i in range(m, n):\n            print(2251799813685248, end=' ')\n        print(2251799813685248)\n        for i in range(m, n):\n            print(4503599627370496, end=' ')\n        print(4503599627370496)\n        for i in range(m, n):\n            print(9007199254740992, end=' ')\n        print(9007199254740992)\n        for i in range(m, n):\n            print(18014398509481984, end=' ')\n        print(18014398509481984)\n        "
    },
    {
        "number": 1189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    return str(n * c * (n + 1) // 2 % (10 ** 6 + 3))\n"
    },
    {
        "number": 1190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w1, h1, w2, h2 = map(int, stdin.split())\n    return w1 * h1 + w2 * h2"
    },
    {
        "number": 1191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    powers = list(map(int, stdin.split(' ')))\n    coins = list(map(int, stdin.split(' ')))\n    powers.sort()\n    coins.sort()\n    powers.reverse()\n    coins.reverse()\n    max_coins = 0\n    for i in range(n):\n        if i < k:\n            max_coins += coins[i]\n        else:\n            max_coins += coins[i] - powers[i - k]\n    return str(max_coins)"
    },
    {
        "number": 1192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    return arr[k - 1]"
    },
    {
        "number": 1194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    p.sort()\n    q.sort()\n    ans = []\n    for i in range(n):\n        if p[i] < q[i]:\n            ans.append(p[i])\n        else:\n            ans.append(q[i])\n    return''.join(map(str, ans))"
    },
    {
        "number": 1195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 1196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n3-a 2-b 4-c 3-a 2-c\\n2-a 2-b 1-c\")\n    1\n    >>> solution(\"6 1\\n3-a 6-b 7-a 4-c 8-e 2-a\\n3-a\")\n    6\n    >>> solution(\"5 5\\n1-h 1-e 1-l 1-l 1-o\\n1-w 1-o 1-r 1-l 1-d\")\n    0\n    \"\"\"\n    n, m = map(int, stdin.split())\n    t = stdin.split(\"\\n\")[0]\n    s = stdin.split(\"\\n\")[1]\n    t = t.split(\" \")\n    s = s.split(\" \")\n    t = [int(i) for i in t]\n    s = [int(i) for i in s]\n    t = \"\".join([chr(i) for i in t])\n    s = \"\".join([chr(i) for i in s])\n    t = t.split(s)\n    t = [i for i in t if i]\n    return len(t)\n"
    },
    {
        "number": 1197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    children = list(map(int, stdin.split()))\n    children.sort()\n    distinct_colors = 0\n    for i in range(n):\n        if children[i]!= i + 1:\n            distinct_colors += 1\n    if distinct_colors == 0:\n        return str(n)\n    if distinct_colors == 1:\n        return str(1)\n    if distinct_colors == 2:\n        return str(2)\n    if distinct_colors == 3:\n        return str(3)\n    if distinct_colors == 4:\n        return str(4)\n    if distinct_colors == 5:\n        return str(5)\n    if distinct_colors == 6:\n        return str(6)\n    if distinct_colors == 7:\n        return str(7)\n    if distinct_colors == 8:\n        return str(8)\n    if distinct_colors == 9:\n        return str(9)\n    if distinct_colors == 10:\n        return str(10)\n    if distinct_colors == 11:\n        return str(11)\n    if distinct_colors == 12:\n        return str(12)\n    if distinct_colors == 13:\n        return str(13)\n    if distinct_colors == 14:\n        return str(14)\n    if distinct_colors == 15:\n        return str(15)\n    if distinct_colors == 16:\n        return str(16)\n    if distinct_colors == 17:\n        return str(17)\n    if distinct_colors == 18:\n        return str(18)\n    if distinct_colors == 19:\n        return str(19)\n    if distinct_colors == 20:\n        return str(20)\n    if distinct_colors == 21:\n        return str(21)\n    if distinct_colors == 22:\n        return str(22)\n    if distinct_colors == 23:\n        return str(23)\n    if distinct_colors == 24:\n        return str(24)\n    if distinct_colors == 25:\n        return str(25)\n    if distinct_colors == 26:\n        return str(26)\n    if distinct_colors == 27:\n        return str(27)\n    if distinct_colors == 28:\n        return str(28)\n    if distinct_colors == 29:\n        return str(29)\n    if distinct_colors == 30:\n        return str(30)\n    if distinct_colors == 31:\n        return str(31)\n    if distinct_colors == 32:\n        return str(32)\n    if distinct_colors == 33:\n        return str(33)\n    if distinct_colors == 34:\n        return str(34)\n    if distinct_colors == 35:\n        return str(35)\n    if distinct_colors == 36:\n        return str(36)\n    if distinct_colors == 37:\n        return str(37)\n    if distinct_colors == 38:\n        return str(38)\n    if distinct_colors == 39:\n        return str(39)\n    if distinct_colors == 40:\n        return str(40)\n    if distinct_colors == 41:\n        return str(41)\n    if distinct_colors == 42:\n        return str(42)\n    if distinct_colors == 43:\n        return str(43)\n    if distinct_colors == 44:\n        return str(44)\n    if distinct_colors == 45:\n        return str(45)\n    if distinct_colors == 46:\n        return str(46)\n    if distinct_colors == 47:\n        return str(47)\n    if distinct_colors == 48:\n        return str(48)\n    if distinct_colors == 49:\n        return str(49)\n    if distinct_colors == 50:\n        return str(50)\n    if distinct_colors == 51:\n        return str(51)\n    if distinct_colors == 52:\n        return str(52)\n    if distinct_colors == 53:\n        return str(53)\n    if distinct_colors == 54:\n        return str(54)\n    if distinct_colors == 55:\n        return str(55)\n    if distinct_colors == 56:\n        return str(56)\n    if distinct_colors == 57:\n        return str(57)\n    if distinct_colors == 58:\n        return str(58)\n    if distinct_colors == 59:\n        return str(59)\n    if distinct_colors == 60:\n        return str(60)\n    if distinct_colors == 61:\n        return str(61)\n    if distinct_colors == 62:\n        return str(62)\n    if distinct_colors == 63:\n        return str(63)\n    if distinct_colors == 64:\n        return str(64)\n    if distinct_colors == 65:\n        return str(65)\n    if distinct_colors == 66:\n        return str(66)\n    if distinct_colors == 67:\n        return str(67)\n    if distinct_colors == 68:\n        return str(68)\n    if distinct_colors == 69:\n        return str(69)\n    if distinct_colors == 70:\n        return str(70)\n    if distinct_colors == 71:\n        return str(71)\n    if distinct_colors == 72:\n        return str(72)\n    if distinct_colors == 73:\n        return str(73)\n    if distinct_colors == 74:\n        return str(74)\n    if distinct_colors == 75:\n        return str(75)\n    if distinct_colors == 76:\n        return str(76)\n    if distinct_colors == 77:\n        return str(77)\n    if distinct_colors == 78:\n        return str(78)\n    if distinct_colors == 79:\n        return str(79)\n    if distinct_colors == 80:\n        return str(80)\n    if distinct_colors == 81:"
    },
    {
        "number": 1200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... -5 10 5\n   ... ''')\n    '1'\n    >>> solution('''6\n   ... 100 200 400 300 600 500\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... 10 9 0 -1\n   ... ''')\n    '8'\n    \"\"\"\n   ..."
    },
    {
        "number": 1201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 7 4\n   ... 2 6 5\n   ... 3 7 6''')\n    11\n    >>> solution('''2\n   ... 5 6 1\n   ... 3 3 5''')\n    1\n    >>> solution('''2\n   ... 5 6 1\n   ... 3 3 5''')\n    1\n    \"\"\"\n    n = int(stdin.readline())\n    items = []\n    for i in range(n):\n        t, d, p = map(int, stdin.readline().split())\n        items.append((t, d, p))\n    items.sort()\n    t, d, p = items[0]\n    ans = p\n    for i in range(1, n):\n        if items[i][0] >= d:\n            ans += items[i][2]\n            d = items[i][1]\n    return ans\n"
    },
    {
        "number": 1202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [a[i + 1] - a[i] for i in range(n - 1)]\n    b.sort()\n    return '1' * n if b[0] == 0 else '0' * n\n"
    },
    {
        "number": 1203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, l = map(int, stdin.split())\n    return str(round(l / h, 6))"
    },
    {
        "number": 1204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p, e = [0] * n, [0] * n\n    for i in range(n):\n        p[i], e[i] = map(int, stdin.split())\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j - p[i - 1] >= 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - p[i - 1]] + e[i - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][k] if dp[n][k]!= 0 else -1\n"
    },
    {
        "number": 1205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(m)]\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x"
    },
    {
        "number": 1208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [float(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    for i in range(n):\n        if a[i] % 1 == 0:\n            b[i] = int(a[i])\n        else:\n            b[i] = int(a[i] + 0.5)\n    return''.join(str(x) for x in b)\n"
    },
    {
        "number": 1210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    l = [map(int, stdin.split()) for _ in range(n)]\n    l = [list(i) for i in l]\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = sorted(l, key=lambda x: x[2])\n    l = sorted(l, key=lambda x: x[0])"
    },
    {
        "number": 1211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 1212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    l = [i for i in range(n)]\n    for i in range(n):\n        if s[i] == '.':\n            l[i] = '.'\n        elif s[i] == '!':\n            l[i] = '!'\n        elif s[i] == ',':\n            l[i] = ','\n        elif s[i] == '?':\n            l[i] = '?'\n    l[k] = '#'\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '.']\n    l = [i for i in l if i!= ',']\n    l = [i for i in l if i!= '!']\n    l = [i for i in l if i!= '?']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l = [i for i in l if i!= '#']\n    l ="
    },
    {
        "number": 1214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"No\"\n    else:\n        n = int(n / 2)\n        x = [int(i) for i in stdin.split()]\n        for i in range(n):\n            if x[i] % 2 == 1:\n                x[i] = x[i] + 1\n        for i in range(n):\n            for j in range(i + 1, n):\n                if x[i] + x[j] * x[j] == x[i] * x[i]:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n"
    },
    {
        "number": 1215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiouy\"\n    result = \"\"\n    for i in range(len(stdin)):\n        if i == 0:\n            result += stdin[i]\n        elif stdin[i] == stdin[i - 1]:\n            continue\n        elif stdin[i] in vowels and stdin[i - 1] in vowels:\n            result += stdin[i]\n        else:\n            result += stdin[i]\n    return result\n"
    },
    {
        "number": 1217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    res = []\n    for i in b:\n        res.append(len([x for x in a if x <= i]))\n    return''.join(map(str, res))\n"
    },
    {
        "number": 1218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return 1\n    if k == 1:\n        return -1\n    if k == n:\n        return 1\n    if k > n:\n        return -1\n    return n - k + 1"
    },
    {
        "number": 1219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 1 2\n   ... 3 4\n   ... 3 2\n   ... 4 2\n   ... 2 5''')\n    2\n    1 4\n    \"\"\"\n   ..."
    },
    {
        "number": 1221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    return str(a[0] * b[0])"
    },
    {
        "number": 1222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    # return the answer\n    "
    },
    {
        "number": 1223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    sum = 0\n    for i in range(n-1):\n        sum += arr[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 1224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n):\n        for b in range(1, n):\n            if 3**a + 5**b == n:\n                return f\"{a} {b}\"\n    return \"-1\""
    },
    {
        "number": 1225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H = int(stdin)\n    return str(math.ceil(math.log(H, 2)))"
    },
    {
        "number": 1226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(math.comb(n, a) * math.comb(n, b) % (10 ** 9 + 7))"
    },
    {
        "number": 1227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * (n + 1) // 2 - (n - k + 1) * (n - k + 2) // 2)"
    },
    {
        "number": 1228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 1229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    strings = [stdin.split()[i] for i in range(n)]\n    coins = [list(map(int, stdin.split()[i])) for i in range(n)]\n    \n    # coins[i][j] - \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u043d\u0435\u0442 \u0432 i-\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u043e\u043d\u0435\u0442 \u0432 j-\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435\n    # \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    coins = sorted(coins, key=lambda x: x[0])\n    coins = sorted(coins, key=lambda x: x[1])\n    \n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a"
    },
    {
        "number": 1230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3 3 3\")\n    '3'\n    >>> solution(\"4\\n1 1 1 1\")\n    '0 2 4'\n    >>> solution(\"35\\n21 26 18 4 28 2 15 13 16 25 6 32 11 5 31 17 9 3 24 33 14 27 29 1 20 4 12 7 10 30 34 8 19 23 22\")\n    '13 15 17 19 21'\n    \"\"\"\n    n = int(stdin.split()[0])\n    friends = [int(x) for x in stdin.split()[1:]]\n    friends.sort()\n    friends.append(0)\n    friends.append(n)\n    friends.sort()\n    ans = []\n    for i in range(len(friends) - 1):\n        ans.append(friends[i + 1] - friends[i] - 1)\n    if ans:\n        return''.join(map(str, ans))\n    else:\n        return '-1'\n"
    },
    {
        "number": 1231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0 and b % 2 == 0:\n        return \"YES\"\n    elif a % 2 == 1 and b % 2 == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_a, n_b = map(int, stdin.split())\n    k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    while i < n_a and j < n_b:\n        if a[i] < b[j]:\n            i += 1\n        else:\n            j += 1\n    if i < n_a:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 1233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    beauty = 0\n    for i in range(k):\n        beauty += a[n - 1 - i]\n    for i in range(k, n):\n        beauty -= a[n - 1 - i]\n    print(beauty)\n    print(' '.join([str(x) for x in a[:n - k]]))\n    return ''"
    },
    {
        "number": 1235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    B = list(map(int, stdin.readline().split()))\n    A.sort()\n    B.sort()\n    for a in A:\n        for b in B:\n            if a + b not in A and a + b not in B:\n                return str(a) + \" \" + str(b)"
    },
    {
        "number": 1236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    population = list(map(int, stdin.split()))\n    if sum(population) % 2 == 0:\n        return \"Daenerys\"\n    else:\n        return \"Stannis\""
    },
    {
        "number": 1237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 10 13 12 8''')\n    '2'\n    >>> solution('''5\n   ... 7 5 6 4 8''')\n    '0'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    a.sort()\n    x = a[0]\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            x = a[i] - 1\n            break\n    return str(x)\n"
    },
    {
        "number": 1239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 5 6\n   ... 8 9\n   ... 10 3''')\n    3\n    >>> solution('''2\n   ... 6 5\n   ... 5 6''')\n    1\n    >>> solution('''6\n   ... 5 9\n   ... 1 3\n   ... 4 8\n   ... 4 5\n   ... 23 54\n   ... 12 32''')\n    0\n    \"\"\"\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    r.sort()\n    res = 0\n    for i in range(n):\n        res = max(res, abs(l[i] - r[i]))\n    return str(res)\n"
    },
    {
        "number": 1241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    f = [0] * n\n    f[0] = 1\n    for i in range(1, n):\n        if a[i] == 0:\n            f[i] = f[i - 1] + 1\n        else:\n            f[i] = f[i - 1]\n    for i in range(k):\n        if a[i] == 0:\n            f[i] = max(f[i], f[i - 1] + 1)\n    for i in range(k, n):\n        if a[i] == 0:\n            f[i] = max(f[i], f[i - 1] + 1)\n    print(max(f))\n    print(*a)\n    return ''\n"
    },
    {
        "number": 1242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 1244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"YES\"\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    r = [int(x) for x in stdin.readline().split()]\n    l.sort()\n    r.sort()\n    if n % 2 == 0:\n        if l[0]!= 1 or r[0]!= 1:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"(\" * (n // 2) + \")\" * (n // 2)\n    else:\n        if l[0]!= 1 or r[0]!= 1:\n            return \"IMPOSSIBLE\"\n        else:\n            return \"(\" * (n // 2) + \")\" * (n // 2)\n"
    },
    {
        "number": 1246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heap = []\n    for _ in range(n):\n        command, *args = stdin.split()\n        if command == 'insert':\n            heap.append(int(args[0]))\n        elif command == 'getMin':\n            print(heap[0] if heap else -1)\n        elif command =='removeMin':\n            heap.pop(0)\n    return ''\n"
    },
    {
        "number": 1247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s == s[::-1]:\n        return \"First\"\n    return \"Second\""
    },
    {
        "number": 1248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d1, d2, d3 = [int(x) for x in stdin.split()]\n    return str(min(d1 + d2, d1 + d3, d2 + d3))"
    },
    {
        "number": 1249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k, n, s = [int(x) for x in stdin.split('\\n')[0].split()]\n    liana = [int(x) for x in stdin.split('\\n')[1].split()]\n    schematic = [int(x) for x in stdin.split('\\n')[2].split()]\n    liana_len = len(liana)\n    schematic_len = len(schematic)\n    if liana_len < n * k:\n        return '-1'\n    if s > k:\n        return '-1'\n    if s > liana_len:\n        return '-1'\n    if s > schematic_len:\n        return '-1'\n    if s == liana_len:\n        return '0'\n    if s == schematic_len:\n        return '0'\n    if s == liana_len and liana_len == schematic_len:\n        return '0'\n    if s == liana_len and liana_len!= schematic_len:\n        return '-1'\n    if s == schematic_len and liana_len!= schematic_len:\n        return '-1'\n    if s == schematic_len and liana_len!= schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s > schematic_len:\n        return '-1'\n    if s < schematic_len and s > liana_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    if s < liana_len and s < schematic_len:\n        return '-1'\n    "
    },
    {
        "number": 1250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 50:\n        return -1\n    a = [1] * n\n    for i in range(1, n):\n        for j in range(i, n):\n            if a[j] > a[j] + 1:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    return''.join(map(str, a))"
    },
    {
        "number": 1251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 2 1 2 1''')\n    3\n    >>> solution('''2\n   ... 2 2''')\n    2\n    >>> solution('''1\n   ... 5''')\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3 13\n   ... 1 2 5\n   ... 2 3 7\n   ... 2 4 8\n   ... ''')\n    '3'\n    >>> solution('''6 6 7\n   ... 1 2 2\n   ... 1 3 3\n   ... 3 6 3\n   ... 2 4 2\n   ... 4 6 2\n   ... 6 5 1\n   ... ''')\n    '4'\n    \"\"\"\n    n, m, t = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges.sort(key=lambda x: x[2])\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges = [x for x in edges if x[0]!= x[1]]\n    edges ="
    },
    {
        "number": 1253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    arr = arr[::-1]\n    print(arr)\n    print(k)\n    print(arr[:k])\n    print(arr[k:])\n    print(arr[:k] + arr[k:][::-1])\n    print(sum(arr[:k]) + sum(arr[k:][::-1]))\n    return str(sum(arr[:k]) + sum(arr[k:][::-1]))"
    },
    {
        "number": 1254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 0\n    for i in range(n):\n        s, r = map(int, stdin.split())\n        res += r if s == m else 0\n    return str(res)"
    },
    {
        "number": 1255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.readline().split())))\n    arr.sort()\n    cash = 1\n    for i in range(1, n):\n        if arr[i][0] >= arr[i - 1][1]:\n            cash += 1\n    return cash\n"
    },
    {
        "number": 1256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    table = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = i * n + j + 1\n    for i in range(n):\n        for j in range(n):\n"
    },
    {
        "number": 1258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = []\n    for _ in range(n - 2):\n        q.append(list(map(int, stdin.readline().split())))\n    q.sort()\n    p = [q[0][0], q[0][1], q[0][2]]\n    for i in range(1, n - 2):\n        if q[i][0]!= p[0] and q[i][1]!= p[1] and q[i][2]!= p[2]:\n            p = [q[i][0], q[i][1], q[i][2]]\n        elif q[i][0]!= p[0] and q[i][1] == p[1] and q[i][2] == p[2]:\n            p = [q[i][0], q[i][1], q[i][2]]\n        elif q[i][0] == p[0] and q[i][1]!= p[1] and q[i][2] == p[2]:\n            p = [q[i][0], q[i][1], q[i][2]]\n        elif q[i][0] == p[0] and q[i][1] == p[1] and q[i][2]!= p[2]:\n            p = [q[i][0], q[i][1], q[i][2]]\n        elif q[i][0] == p[0] and q[i][1] == p[1] and q[i][2] == p[2]:\n            p = [q[i][0], q[i][1], q[i][2]]\n        elif q[i][0]!= p[0] and q[i][1]!= p[1] and q[i][2] == p[2]:\n            p = [q[i][0], q[i][1], q[i][2]]\n        elif q[i][0]!= p[0] and q[i][1] == p[1] and q[i][2]!= p[2]:\n            p = [q[i][0], q[i][1], q[i][2]]\n        elif q[i][0]!= p[0] and q[i][1]!= p[1] and q[i][2]!= p[2]:\n            p = [q[i][0], q[i][1], q[i][2]]\n    return''.join(map(str, p))"
    },
    {
        "number": 1259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\""
    },
    {
        "number": 1260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n5 -2 0 1 -3\")\n    '2 3\\n1 1 2\\n1 2 4\\n1 4 5\\n'\n    >>> solution(\"5\\n5 2 0 4 0\")\n    '1 3 5\\n2 5\\n1 1 2\\n1 2 4\\n'\n    >>> solution(\"2\\n-1\")\n    '2 2\\n'\n    >>> solution(\"4\\n0 0 0 0\")\n    '1 1 2\\n1 2 3\\n1 3 4\\n'\n    >>> solution(\"4\\n0 0 0 0\")\n    '1 1 2\\n1 2 3\\n1 3 4\\n'\n    >>> solution(\"4\\n0 0 0 0\")\n    '1 1 2\\n1 2 3\\n1 3 4\\n'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a.reverse()\n    ans = []\n    for i in range(n - 1):\n        if a[i] == 0:\n            ans.append(1)\n            ans.append(i + 1)\n            ans.append(i + 2)\n            break\n        if a[i] == a[i + 1]:\n            ans.append(2)\n            ans.append(i + 1)\n            break\n    ans.append(3)\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 1261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    for i in range(n):\n        result.append(gcd(result))\n    return''.join(map(str, result))\n\ndef"
    },
    {
        "number": 1262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 1\n   ... 1 2\n   ... 3 3\n   ... 23 2 23\n   ... 3 2 3''')\n    '8'\n    >>> solution('''3\n   ... 2 1\n   ... 1 2\n   ... 3 3\n   ... 23 2 23\n   ... 3 2 3''')\n    '27'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    cities = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:1 + n]]\n    costs = [int(line.split()[0]) for line in stdin.split('\\n')[1 + n:1 + 2 * n]]\n    connections = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1 + 2 * n:]]\n    return str(sum(costs) + sum(\n        min(\n            abs(cities[a][0] - cities[b][0]) + abs(cities[a][1] - cities[b][1]),\n            abs(cities[a][0] - cities[b][0]) + abs(cities[a][1] - cities[b][1]) + 1,\n            abs(cities[a][0] - cities[b][0]) + abs(cities[a][1] - cities[b][1]) + 2,\n        )\n        for a, b in connections\n    ))\n"
    },
    {
        "number": 1263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if a[-1] / b[-1] < k:\n        return -1\n    else:\n        return sum(a) - sum(b) * k\n"
    },
    {
        "number": 1264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    ones = 0\n    for i in range(n):\n        for j in range(i, n):\n            if nums[i] == 1:\n                ones += 1\n            nums[i], nums[j] = nums[j], nums[i]\n            if nums[i] == 1:\n                ones += 1\n    return ones"
    },
    {
        "number": 1265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    if len(a)!= len(b):\n        return \"NO\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            if a[i] == \"1\" and b[i] == \"0\":\n                return \"NO\"\n            if a[i] == \"0\" and b[i] == \"1\":\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 1267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    scores = list(map(int, stdin.readline().split()))\n    dp = [0] * (600 + 1)\n    dp[0] = 1\n    for score in scores:\n        for i in range(600, score - 1, -1):\n            dp[i] += dp[i - score]\n    print(dp[600])\n    return ''"
    },
    {
        "number": 1268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        return \"NO\"\n    if a[-1] > b[-1]:\n        return \"NO\"\n    for i in range(n):\n        if a[i] > b[i]:\n            return \"NO\"\n    return \"YES\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return str(count_pairs(n, m, c))\n\ndef"
    },
    {
        "number": 1270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    primes = [2]\n    for i in range(3, n + 1, 2):\n        if is_prime(i):\n            primes.append(i)\n    if len(primes) == 1:\n        return 1\n    for i in range(1, len(primes)):\n        for j in range(i, len(primes)):\n            if primes[i] + primes[j] == n:\n                return i + 1\n    return 1\n\n\ndef"
    },
    {
        "number": 1271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    c = stdin.split()\n    if k > sum(r):\n        return \"-1\"\n    if k == sum(r):\n        return str(0)\n    if k == 1:\n        return str(n)\n    if k == 2:\n        return str(n - 1)\n    if k == 3:\n        return str(n - 2)\n    if k == 4:\n        return str(n - 3)\n    if k == 5:\n        return str(n - 4)\n    if k == 6:\n        return str(n - 5)\n    if k == 7:\n        return str(n - 6)\n    if k == 8:\n        return str(n - 7)\n    if k == 9:\n        return str(n - 8)\n    if k == 10:\n        return str(n - 9)\n    if k == 11:\n        return str(n - 10)\n    if k == 12:\n        return str(n - 11)\n    if k == 13:\n        return str(n - 12)\n    if k == 14:\n        return str(n - 13)\n    if k == 15:\n        return str(n - 14)\n    if k == 16:\n        return str(n - 15)\n    if k == 17:\n        return str(n - 16)\n    if k == 18:\n        return str(n - 17)\n    if k == 19:\n        return str(n - 18)\n    if k == 20:\n        return str(n - 19)\n    if k == 21:\n        return str(n - 20)\n    if k == 22:\n        return str(n - 21)\n    if k == 23:\n        return str(n - 22)\n    if k == 24:\n        return str(n - 23)\n    if k == 25:\n        return str(n - 24)\n    if k == 26:\n        return str(n - 25)\n    if k == 27:\n        return str(n - 26)\n    if k == 28:\n        return str(n - 27)\n    if k == 29:\n        return str(n - 28)\n    if k == 30:\n        return str(n - 29)\n    if k == 31:\n        return str(n - 30)\n    if k == 32:\n        return str(n - 31)\n    if k == 33:\n        return str(n - 32)\n    if k == 34:\n        return str(n - 33)\n    if k == 35:\n        return str(n - 34)\n    if k == 36:\n        return str(n - 35)\n    if k == 37:\n        return str(n - 36)\n    if k == 38:\n        return str(n - 37)\n    if k == 39:\n        return str(n - 38)\n    if k == 40:\n        return str(n - 39)\n    if k == 41:\n        return str(n - 40)\n    if k == 42:\n        return str(n - 41)\n    if k == 43:\n        return str(n - 42)\n    if k == 44:\n        return str(n - 43)\n    if k == 45:\n        return str(n - 44)\n    if k == 46:\n        return str(n - 45)\n    if k == 47:\n        return str(n - 46)\n    if k == 48:\n        return str(n - 47)\n    if k == 49:\n        return str(n - 48)\n    if k == 50:\n        return str(n - 49)\n    if k == 51:\n        return str(n - 50)\n    if k == 52:\n        return str(n - 51)\n    if k == 53:\n        return str(n - 52)\n    if k == 54:\n        return str(n - 53)\n    if k == 55:\n        return str(n - 54)\n    if k == 56:\n        return str(n - 55)\n    if k == 57:\n        return str(n - 56)\n    if k == 58:\n        return str(n - 57)\n    if k == 59:\n        return str(n - 58)\n    if k == 60:\n        return str(n - 59)\n    if k == 61:\n        return str(n - 60)\n    if k == 62:\n        return str(n - 61)\n    if k == 63:\n        return str(n - 62)\n    if k == 64:\n        return str(n - 63)\n    if k == 65:\n        return str(n - 64)\n    if k == 66:\n        return str(n - 65)\n    if k == 67:\n        return str(n - 66)\n    if k == 68:\n        return str(n - 67)\n    if k == 69:\n        return str(n - 68)\n    if k == 70:\n        return str(n - 69)\n    if k == 71:\n        return str(n - 70)\n    if k == 72:\n        return str(n - 71)\n    if k == 73:\n        return str(n - 72)\n    if k == 74:\n        return str(n - 73)\n    if k == 75:\n        return str(n - 74)\n    if k == 76:\n        return str(n -"
    },
    {
        "number": 1272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... 1 2\n   ... 3 4\n   ... 1 3\n   ... 2 3\n   ... 1 4''')\n    '0'\n    >>> solution('''4 5\n   ... 1 2\n   ... 3 4\n   ... 1 3\n   ... 2 3\n   ... 1 4\n   ... 1 1''')\n    '0'\n    >>> solution('''4 5\n   ... 1 2\n   ... 3 4\n   ... 1 3\n   ... 2 3\n   ... 1 4\n   ... 1 1\n   ... 1 1''')\n    '4'\n    >>> solution('''4 5\n   ... 1 2\n   ... 3 4\n   ... 1 3\n   ... 2 3\n   ... 1 4\n   ... 1 1\n   ... 1 1\n   ... 1 1''')\n    '5'\n    >>> solution('''4 5\n   ... 1 2\n   ... 3 4\n   ... 1 3\n   ... 2 3\n   ... 1 4\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1''')\n    '6'\n    \"\"\"\n   ..."
    },
    {
        "number": 1273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n\n    # create graph\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        if edge[1] not in graph:\n            graph[edge[1]] = []\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n\n    # create coloring\n    coloring = {}\n    for vertex in graph:\n        coloring[vertex] = set()\n\n    # color graph\n    colors = 0\n    for vertex in graph:\n        if len(coloring[vertex]) == 0:\n            coloring[vertex].add(colors)\n            colors += 1\n        for neighbor in graph[vertex]:\n            if len(coloring[neighbor]) == 0:\n                coloring[neighbor].add(colors)\n                colors += 1\n            elif len(coloring[neighbor]) == 1:\n                coloring[neighbor].add(colors)\n                colors += 1\n            else:\n                coloring[neighbor].add(colors)\n                colors += 1\n\n    # print coloring\n    for vertex in coloring:\n        print(len(coloring[vertex]))\n\n    return ''\n"
    },
    {
        "number": 1274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 1276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if s[i]!= s[j] and s[i]!= s[k] and s[j]!= s[k]:\n                    if j - i!= k - j:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 1277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4 1\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 3 5''')\n    2\n    \"\"\"\n    n, u, v = map(int, stdin.split())\n    graph = {i: set() for i in range(1, n + 1)}\n    for i in range(1, n):\n        a, b = map(int, stdin.split(':')[1].split())\n        graph[a].add(b)\n        graph[b].add(a)\n    # print(graph)\n    # print(u, v)\n    # print(graph[u])\n    # print(graph[v])\n    # print(graph[u] & graph[v])\n    # print(graph[u] | graph[v])\n    # print(graph[u] - graph[v])\n    # print(graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    # print(graph[u] - graph[v] | graph[v] - graph[u])\n    "
    },
    {
        "number": 1278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    for i in range(n):\n        if i + x < n and a[i] < a[i + x]:\n            return i\n    return n\n"
    },
    {
        "number": 1279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(m):\n        if a[i] + b[i] % 2 == 1:\n            ans += 1\n    return ans"
    },
    {
        "number": 1280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin[-1])\n    s = s[:-1]\n    s = s.split('0')\n    s = [i for i in s if i]\n    s = [i.split('1') for i in s]\n    s = [i for j in s for i in j]\n    s = [i for i in s if len(i) > 1]\n    s = [i for i in s if len(set(i)) > 1]\n    s = [i for i in s if len(set(i)) <= k]\n    return len(s)"
    },
    {
        "number": 1281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr = [0] + arr\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j] + (arr[i] ^ arr[i - 1])\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            ans = max(ans, dp[i][j] - dp[i - 1][j])\n    return ans"
    },
    {
        "number": 1282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 7 10 2\n   ... ''')\n    '17'\n    >>> solution('''1\n   ... 4\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    nums = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    max_circular_value = 0\n    for i in range(n):\n        max_circular_value = max(max_circular_value, nums[i] + nums[(i + 1) % n] + nums[(i + 2) % n])\n    return str(max_circular_value)\n"
    },
    {
        "number": 1285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4!= 0:\n        return \"0\"\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.split(\"\\n\")[1:][0])\n    matrix = [list(map(lambda x: int(x, 16), row)) for row in matrix]\n    x = n // 4\n    for i in range(x, n + 1):\n        for j in range(x, n + 1):\n            if matrix[i][j]!= matrix[i // x][j // x]:\n                return str(i)\n"
    },
    {
        "number": 1286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 1\")\n    '0/1'\n    >>> solution(\"3\\n1 1 1\")\n    '0/1'\n    >>> solution(\"4\\n1 1 1 1\")\n    '0/1'\n    >>> solution(\"5\\n1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"6\\n1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"7\\n1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"8\\n1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"9\\n1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"10\\n1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"11\\n1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"12\\n1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"13\\n1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"14\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"15\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"16\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"17\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"18\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"19\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"20\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"21\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"22\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"23\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"24\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"25\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"26\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"27\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"28\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"29\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"30\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"31\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"32\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"33\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"34\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"35\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"36\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"37\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"38\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"39\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '0/1'\n    >>> solution(\"40\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(float, stdin.readline().split())) for _ in range(n)]\n    matrix = [[0] * n] + matrix\n    for i in range(1, n + 1):\n        matrix[i][i] = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            matrix[i][j] = matrix[i][j - 1] + matrix[j][i]\n    return str(matrix[1][n] / (matrix[1][n] + matrix[n][1]))"
    },
    {
        "number": 1288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 1 2 3 4\n   ... ''')\n    '1'\n    >>> solution('''4 3\n   ... 1 2 3 4\n   ... ''')\n    '2'\n    >>> solution('''5 3\n   ... 5 3 4 2 6\n   ... ''')\n    '2'\n    >>> solution('''6 4\n   ... 5 3 50 2 4 5\n   ... ''')\n    '3'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = set(a[:k])\n    cost = min(max(a[i]) for i in range(k) if i % 2)\n    cost = min(cost, max(a[i] for i in range(k) if not i % 2))\n    return str(cost)\n"
    },
    {
        "number": 1289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n2 3 5 7 11 13\\n5\\n3 4 5 5 6\\n\")\n    10\n    >>> solution(\"6\\n2 3 5 7 11 13\\n9\\n1 2 2 3 3 4 5 5 6\\n\")\n    16\n    >>> solution(\"3\\n10 200 300\\n4\\n1 2 2 3\\n\")\n    -1\n    >>> solution(\"3\\n10 200 300\\n4\\n1 2 2 3\\n\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    dist = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    stops = [int(x) for x in stdin.readline().split()]\n    stops.sort()\n    stops_set = set(stops)\n    stops_dict = {x: stops.count(x) for x in stops_set}\n    stops_dict = {k: v for k, v in sorted(stops_dict.items(), key=lambda item: item[1])}\n    stops_dict = {k: v for k, v in stops_dict.items() if v > 1}\n    if len(stops_dict) == 0:\n        return str(-1)\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items() if v == 1}\n    stops_dict = {k: v for k, v in stops_dict.items"
    },
    {
        "number": 1290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n    c.sort()\n    ans = 0\n    for i in range(m):\n        if c[i] == n:\n            ans += 1\n            n -= 1\n    return ans"
    },
    {
        "number": 1291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 3 4 5\")\n    5\n    >>> solution(\"4\\n1 2 2 1\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = [0] * n\n    for i in range(n):\n        a[i] = b[i] - i\n\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i] + 1\n        for j in range(i):\n            if a[j] + 1 < dp[i]:\n                dp[i] = a[j] + 1\n    return str(dp[-1])\n"
    },
    {
        "number": 1294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cities = list(map(int, stdin.split(' ')))\n    towers = list(map(int, stdin.split(' ')))\n    cities.sort()\n    towers.sort()\n    r = 0\n    for i in range(n):\n        if cities[i] > towers[0]:\n            r = max(r, abs(cities[i] - towers[0]))\n        else:\n            r = max(r, abs(cities[i] - towers[0]))\n            break\n    for i in range(m):\n        if towers[i] > cities[0]:\n            r = max(r, abs(towers[i] - cities[0]))\n        else:\n            r = max(r, abs(towers[i] - cities[0]))\n            break\n    return r"
    },
    {
        "number": 1296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    costs = list(map(int, stdin.split()))\n    costs.sort()\n    costs.reverse()\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append(0)\n    costs.append"
    },
    {
        "number": 1297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('T', 'A')\n\"\"\"\n\ndef"
    },
    {
        "number": 1298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - stdin.count('0') - stdin.count('1'))"
    },
    {
        "number": 1299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    left = 0\n    right = n - k + 1\n    min_sum = 10 ** 9\n    while left < right:\n        cur_sum = sum(arr[left:left + k]) + sum(arr[right:right + k])\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n            res = [left + 1, right + 1]\n        if cur_sum == min_sum:\n            res = [min(res[0], left + 1), max(res[1], right + 1)]\n        if cur_sum > min_sum:\n            right += 1\n        else:\n            left += 1\n    return''.join(map(str, res))"
    },
    {
        "number": 1300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    return str(max(0, sum(a) - c * n))"
    },
    {
        "number": 1301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'jolteon'"
    },
    {
        "number": 1302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return '-1'\n    elif k == n:\n        return''.join(map(str, range(1, n + 1)))\n    else:\n        return''.join(map(str, sorted(set(range(1, n + 1)) - set(range(1, k + 1)))))\n"
    },
    {
        "number": 1303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q, l, r = map(int, stdin.split())\n    a = [map(int, stdin.split()) for _ in range(p)]\n    b = [map(int, stdin.split()) for _ in range(q)]\n    c = [map(int, stdin.split()) for _ in range(p)]\n    d = [map(int, stdin.split()) for _ in range(q)]\n    cnt = 0\n    for i in range(p):\n        for j in range(q):\n            if l <= a[i][0] + b[j][0] <= r and l <= a[i][1] + b[j][1] <= r:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 1304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''xoo x.. x..\n   ... ooo... x\n   ... ooo... x\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n   ... ooo...\n   ...\n   ... xxx...\n   ... xox...\n"
    },
    {
        "number": 1305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bills = [int(x) for x in stdin.readline().split()]\n    bills.sort()\n    if bills[0] == 25:\n        if bills[1] == 25:\n            if bills[2] == 25:\n                if bills[3] == 25:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 1 1\n   ... ''')\n    '4'\n    \"\"\"\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n - 1):\n        l, r = i + 1, n - 1\n        while l < r:\n            if a[l] + a[r] == h:\n                ans += 1\n                l += 1\n                r -= 1\n            elif a[l] + a[r] < h:\n                l += 1\n            else:\n                r -= 1\n    return str(ans % 1000000007)\n"
    },
    {
        "number": 1307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Mahmoud\"\n    return \"Ehab\"\n"
    },
    {
        "number": 1308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 4\\nabacaba\\n1 1 1\\n1 4 2\\n2 1 3\\n2 4 3\")\n    'YES\\nYES\\nNO\\nYES'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    s = stdin.split()[1]\n    for _ in range(m):\n        x, y, l = map(int, stdin.split()[1:])\n        if s[x:x + l] == s[y:y + l]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 1309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    weights.sort()\n    tandem_weights = weights[::2]\n    single_weights = weights[1::2]\n    tandem_weights.sort()\n    single_weights.sort()\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    tandem_weights.append(0)\n    single_weights.append(0)\n    t"
    },
    {
        "number": 1310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    xor = 0\n    for i in range(n):\n        xor ^= arr[i]\n    return xor"
    },
    {
        "number": 1311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return''.join(map(str, [n // m] * m))"
    },
    {
        "number": 1313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2, k_1, k_2 = [int(x) for x in stdin.split()]\n    if n_1 % (k_1 + 1) == 0:\n        return \"First\"\n    if n_2 % (k_2 + 1) == 0:\n        return \"Second\"\n    return \"First\" if n_1 % (k_1 + 1) < n_2 % (k_2 + 1) else \"Second\"\n"
    },
    {
        "number": 1314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5\\n-6 4\\n7 -2\\n-1 -3\")\n    '1 2'\n    >>> solution(\"4 2\\n8 2\\n-7 0\\n-2 6\\n1 -14\\n16 -12\\n11 -18\\n7 -14\")\n    '9 -12'\n    \"\"\"\n    n = int(stdin.split()[0])\n    obelisk_coordinates = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:n + 1]]\n    clue_coordinates = [tuple(map(int, line.split())) for line in stdin.splitlines()[n + 1:]]\n    obelisk_coordinates.sort()\n    clue_coordinates.sort()\n    obelisk_coordinates_set = set(obelisk_coordinates)\n    clue_coordinates_set = set(clue_coordinates)\n    if obelisk_coordinates_set!= clue_coordinates_set:\n        return \"IMPOSSIBLE\"\n    obelisk_coordinates_set = list(obelisk_coordinates_set)\n    clue_coordinates_set = list(clue_coordinates_set)\n    obelisk_coordinates_set.sort()\n    clue_coordinates_set.sort()\n    obelisk_coordinates_set.append(obelisk_coordinates_set[0])\n    clue_coordinates_set.append(clue_coordinates_set[0])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[1])\n    clue_coordinates_set.append(clue_coordinates_set[1])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[2])\n    clue_coordinates_set.append(clue_coordinates_set[2])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[3])\n    clue_coordinates_set.append(clue_coordinates_set[3])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[4])\n    clue_coordinates_set.append(clue_coordinates_set[4])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[5])\n    clue_coordinates_set.append(clue_coordinates_set[5])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[6])\n    clue_coordinates_set.append(clue_coordinates_set[6])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[7])\n    clue_coordinates_set.append(clue_coordinates_set[7])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[8])\n    clue_coordinates_set.append(clue_coordinates_set[8])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[9])\n    clue_coordinates_set.append(clue_coordinates_set[9])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[10])\n    clue_coordinates_set.append(clue_coordinates_set[10])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[11])\n    clue_coordinates_set.append(clue_coordinates_set[11])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[12])\n    clue_coordinates_set.append(clue_coordinates_set[12])\n    obelisk_coordinates_set.append(obelisk_coordinates_set[13])\n    cl"
    },
    {
        "number": 1315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            i += 1\n            continue\n        if i + 1 < n and a[i] == a[i + 1]:\n            a[i] += 1\n            a[i + 1] = 0\n            i += 1\n        i += 1\n    print(*a)\n    return ''"
    },
    {
        "number": 1316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    return s.count(s[:k])"
    },
    {
        "number": 1317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * n - m + 1)\n"
    },
    {
        "number": 1318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10 50\n   ... 2 100\n   ... 5 30\n   ... 3\n   ... 4 6 9''')\n    '2 130'\n    \"\"\"\n    n = int(stdin.readline())\n    tables = list(map(int, stdin.readline().split()))\n    k = int(stdin.readline())\n    r = list(map(int, stdin.readline().split()))\n    tables.sort()\n    r.sort()\n    tables.reverse()\n    r.reverse()\n    tables_sum = 0\n    for i in range(n):\n        if tables[i] >= r[i]:\n            tables_sum += tables[i]\n            print(i + 1, r[i])\n    print(tables_sum)\n"
    },
    {
        "number": 1319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cake = []\n    for i in range(n):\n        cake.append(list(stdin[i]))\n    happiness = 0\n    for i in range(n):\n        for j in range(n):\n            if cake[i][j] == 'C':\n                if i == 0:\n                    if cake[i + 1][j] == 'C':\n                        happiness += 1\n                    if cake[i + 1][j + 1] == 'C':\n                        happiness += 1\n                elif i == n - 1:\n                    if cake[i - 1][j] == 'C':\n                        happiness += 1\n                    if cake[i - 1][j + 1] == 'C':\n                        happiness += 1\n                else:\n                    if cake[i - 1][j] == 'C':\n                        happiness += 1\n                    if cake[i - 1][j + 1] == 'C':\n                        happiness += 1\n                    if cake[i + 1][j] == 'C':\n                        happiness += 1\n                    if cake[i + 1][j + 1] == 'C':\n                        happiness += 1\n    return happiness"
    },
    {
        "number": 1321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 10\n   ... 5 5\n   ... 10 1''')\n    '75 110 60'\n    \"\"\"\n   ..."
    },
    {
        "number": 1322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(19)"
    },
    {
        "number": 1323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < m and j < n:\n        if a[i] < b[j]:\n            count += 1\n            i += 1\n        elif a[i] > b[j]:\n            count += 1\n            j += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n    return count\n"
    },
    {
        "number": 1324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    s = stdin\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            ans += a[0]\n        elif s[i] == \"2\":\n            ans += a[1]\n        elif s[i] == \"3\":\n            ans += a[2]\n        elif s[i] == \"4\":\n            ans += a[3]\n    return ans"
    },
    {
        "number": 1325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin[:n]\n    return s[:p - 1] + s[p - 1].upper() + s[p:]\n"
    },
    {
        "number": 1326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4)\n    23\n    \"\"\"\n    N = int(stdin)\n    ans = 0\n    for i in range(1, N + 1):\n        ans += i * (i - 1) // 2\n    return ans\n"
    },
    {
        "number": 1327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 3 1 4\n   ... 1 5 9\n   ... 2 6 5\n   ... 3 5 8\n   ... 9 7 9''')\n    '56'\n    \"\"\"\n    N, M = map(int, stdin.split())\n    cakes = [list(map(int, stdin.split())) for _ in range(N)]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda x: x[2], reverse=True)\n    cakes = cakes[:M]\n    cakes.sort(key=lambda x: x[0], reverse=True)\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    cakes.sort(key=lambda"
    },
    {
        "number": 1328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M_a, M_b = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [int(x) for x in stdin.split()]\n    b.sort()\n    c = [int(x) for x in stdin.split()]\n    c.sort()\n    if M_a == 1 and M_b == 1:\n        return str(sum(c))\n    if M_a == 1:\n        return str(sum(c) * M_b // gcd(M_b, M_a))\n    if M_b == 1:\n        return str(sum(c) * M_a // gcd(M_a, M_b))\n    if M_a == M_b:\n        return str(sum(c) * M_a // gcd(M_a, M_b))\n    if M_a > M_b:\n        return str(sum(c) * M_b // gcd(M_a, M_b))\n    if M_b > M_a:\n        return str(sum(c) * M_a // gcd(M_a, M_b))\n    return str(-1)"
    },
    {
        "number": 1329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(1 for i in range(1, n + 1) if n % i == 0) - 1)"
    },
    {
        "number": 1330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    potentials = list(map(int, stdin.readline().split()))\n    clubs = list(map(int, stdin.readline().split()))\n    d = int(stdin.readline())\n    res = [0] * d\n    for i in range(d):\n        res[i] = max(potentials[j] for j in range(n) if clubs[j] == i + 1)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 1331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.append(0)\n    a.append(10 ** 6)\n    a.sort()\n    ans = 0\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] >= m:\n            ans += 1\n            if a[i] - a[i - 1] >= m * k:\n                break\n    return ans"
    },
    {
        "number": 1332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    if a == b == c == d == e:\n        return '-1'\n    if a == b == c == 0:\n        return '-1'\n    if a == b == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1'\n    if e == 0:\n        return '-1'\n    if a == 0:\n        return '-1'\n    if b == 0:\n        return '-1'\n    if c == 0:\n        return '-1'\n    if d == 0:\n        return '-1"
    },
    {
        "number": 1333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % 2 == 0:\n        n += 1\n    if m % 2 == 0:\n        m += 1\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    if n > 50 or m > 50:\n        return 'Invalid'\n    if n % 2 == 0 or m % 2 == 0:\n        return 'Invalid'\n    if n < 3 or m < 3:\n        return 'Invalid'\n    "
    },
    {
        "number": 1334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    t = ''\n    for i in range(k):\n        t += min(s)\n        s = s.replace(min(s), '')\n    return t\n"
    },
    {
        "number": 1335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = round(100 * n / sum(a))\n    return str(sum(1 for i in range(n) if d <= i))\n"
    },
    {
        "number": 1336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 4 1\n   ... 4 2\n   ... 4 2\n   ... 2 1\n   ... 5 4\n   ... 6 4\n   ... 3 2''')\n    6\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    dolls = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    dolls.sort(key=lambda x: x[0])\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if dolls[i][0] > dolls[j][1]:\n                dp[i] += dp[j]\n    return dp[-1] % (10 ** 9 + 7)\n"
    },
    {
        "number": 1337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    languages = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    audio = [int(x) for x in stdin.readline().split()]\n    subtitles = [int(x) for x in stdin.readline().split()]\n    return str(solve(n, languages, m, audio, subtitles))\n\ndef"
    },
    {
        "number": 1338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 1339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.readline().split())))\n    segments.sort()\n    min_l = segments[0][0]\n    max_r = segments[0][1]\n    for i in range(1, n):\n        if min_l > segments[i][0]:\n            min_l = segments[i][0]\n        if max_r < segments[i][1]:\n            max_r = segments[i][1]\n    if min_l > max_r:\n        return -1\n    return n\n"
    },
    {
        "number": 1340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_pos = 0\n    t_pos = 0\n    while s_pos < len(s) and t_pos < len(t):\n        if s[s_pos] == t[t_pos]:\n            s_pos += 1\n            t_pos += 1\n        elif s[s_pos] == \"R\":\n            s_pos += 1\n        elif s[s_pos] == \"G\":\n            t_pos += 1\n        elif s[s_pos] == \"B\":\n            s_pos += 1\n            t_pos += 2\n    return str(s_pos + 1)\n"
    },
    {
        "number": 1342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    balls = list(map(int, stdin.readline().split()))\n    balls.sort()\n    sets = []\n    for i in range(n):\n        sets.append([balls[i]])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if balls[j] - balls[i] > 1:\n                break\n            sets[i].append(balls[j])\n    sets.sort(key=len)\n    return len(sets)"
    },
    {
        "number": 1343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4 2\\n1 2 5\\n1 2 3\\n2 3 4\\n1 4 10\\n1 5\\n\")\n    3\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1 : m + 1]]\n    storages = set(map(int, stdin.split()[m + 1 :]))\n    roads = {(u, v): l for u, v, l in roads}\n    min_cost = float(\"inf\")\n    for u in range(1, n + 1):\n        if u in storages:\n            for v in range(1, n + 1):\n                if v in storages:\n                    min_cost = min(min_cost, roads.get((u, v), 0) + roads.get((v, u), 0))\n    return min_cost if min_cost!= float(\"inf\") else -1\n"
    },
    {
        "number": 1344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 1345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    res = []\n    for i in range(n):\n        if arr[i] <= arr[i] + 1 <= 2 * arr[i]:\n            res.append(\"+\")\n        else:\n            res.append(\"-\")\n    return \"\".join(res)"
    },
    {
        "number": 1346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    \n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    def lcmm(*args):\n        return reduce(lcm, args)\n    \n    def gcdm(*args):\n        return reduce(gcd, args)\n    \n    def lcm_list(lst):\n        return reduce(lcmm, lst)\n    \n    def gcd_list(lst):\n        return reduce(gcdm, lst)\n    \n    def lcm_list_of_lists(lst):\n        return reduce(lcm_list, lst)\n    \n    def gcd_list_of_lists(lst):\n        return reduce(gcd_list, lst)\n    \n    def lcm_list_of_lists_of_lists(lst):\n        return reduce(lcm_list_of_lists, lst)\n    \n    def gcd_list_of_lists_of_lists(lst):\n        return reduce(gcd_list_of_lists, lst)\n    \n    def lcm_list_of_lists_of_lists_of_lists(lst):\n        return reduce(lcm_list_of_lists_of_lists, lst)\n    \n    def gcd_list_of_lists_of_lists_of_lists(lst):\n        return reduce(gcd_list_of_lists_of_lists, lst)\n    \n    def lcm_list_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(lcm_list_of_lists_of_lists_of_lists, lst)\n    \n    def gcd_list_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(gcd_list_of_lists_of_lists_of_lists, lst)\n    \n    def lcm_list_of_lists_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(lcm_list_of_lists_of_lists_of_lists_of_lists, lst)\n    \n    def gcd_list_of_lists_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(gcd_list_of_lists_of_lists_of_lists_of_lists, lst)\n    \n    def lcm_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(lcm_list_of_lists_of_lists_of_lists_of_lists_of_lists, lst)\n    \n    def gcd_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(gcd_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists, lst)\n    \n    def lcm_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(lcm_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists, lst)\n    \n    def gcd_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(gcd_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists, lst)\n    \n    def lcm_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists(lst):\n        return reduce(lcm_list_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists_of_lists, lst)\n    \n    def gcd_list_of_lists_of_lists_of_lists_of"
    },
    {
        "number": 1347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nRuruRu fedya\\n1\\nruruRU fedor\\n\")\n    '2 6'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    freq = [0] * 26\n    for c in s:\n        freq[ord(c) - ord('A')] += 1\n    ans = 0\n    for i in range(26):\n        if freq[i] == k:\n            ans = max(ans, k)\n        else:\n            ans = max(ans, k - freq[i])\n    return ans\n"
    },
    {
        "number": 1351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for i in range(l, r + 1):\n        if len(set(str(i))) == len(str(i)):\n            return i\n    return -1"
    },
    {
        "number": 1352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] >= x and a[i] <= x:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 1353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return str(n * a + m * b)"
    },
    {
        "number": 1354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - stdin.count('a')"
    },
    {
        "number": 1357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    ans = 0\n    for i in range(m):\n        ans += a[i] - i\n    return ans"
    },
    {
        "number": 1358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    strings = [stdin.split() for _ in range(k)]\n    return max(sum(map(int, s)) for s in product(*strings))\n"
    },
    {
        "number": 1359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    roads = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(m)]\n    graph = {i: [] for i in range(1, n + 1)}\n    for road in roads:\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n    count = 0\n    for i in range(1, n + 1):\n        if len(graph[i]) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 1360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.readline().split())))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ans = max(ans, arr[i][0])\n    return ans"
    },
    {
        "number": 1361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 4 6\\n\")\n    5\n    >>> solution(\"5\\n1 2 3 4 5\\n\")\n    2\n    >>> solution(\"5\\n1 2 3 7 8\\n\")\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    h.sort()\n    diff = [h[i + 1] - h[i] for i in range(n - 1)]\n    return max(diff)\n"
    },
    {
        "number": 1362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    days = []\n    for i in range(n):\n        d, t = map(int, stdin.split())\n        days.append((d, t))\n    days.sort()\n    ans = 0\n    for i in range(m):\n        d, t = days[i]\n        ans += t\n        if ans < 0:\n            break\n    return str(i + 1)"
    },
    {
        "number": 1364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin)\n    sushi = [int(x) for x in stdin.split()]\n    t = [0] * n\n    for i in range(n):\n        t[i] = sushi[i]\n    t.sort()\n    t = [0] + t + [0]\n    ans = 0\n    for i in range(1, n + 1):\n        if t[i] == t[i - 1]:\n            ans = max(ans, i)\n    return ans\n"
    },
    {
        "number": 1365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 0\\n1 2\\n\")\n    '1'\n    >>> solution(\"2 1\\n1 2\\n\")\n    '3'\n    >>> solution(\"4 1\\n1 2\\n2 3\\n1 4\\n4 5\\n1 6\\n6 7\\n\")\n    '9'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {u: set() for u in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    black = set()\n    for u in range(1, n + 1):\n        if u not in black:\n            stack = [u]\n            while stack:\n                v = stack.pop()\n                if v not in black:\n                    black.add(v)\n                    stack.extend(graph[v] - black)\n    return str(len(black) % (10 ** 9 + 7))\n"
    },
    {
        "number": 1366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, stdin.readline().split())))\n    lst.sort(key=lambda x: x[0])\n    lst.sort(key=lambda x: x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x: x[0] - x[1])\n    lst.sort(key=lambda x"
    },
    {
        "number": 1367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    for i in range(n - 1):\n        if a[i]!= i + 1:\n            return i + 1\n    return n + 1\n"
    },
    {
        "number": 1368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 2\n   ... 1 2 3 4 5\n   ... ''')\n    '4.500000\\n1'\n    \"\"\"\n    n, a, b = map(int, stdin.split())\n    items = [int(x) for x in stdin.split()[1:]]\n    items.sort()\n    max_mean = 0\n    max_mean_count = 0\n    for i in range(n - a + 1):\n        mean = sum(items[i:i + a]) / a\n        if mean > max_mean:\n            max_mean = mean\n            max_mean_count = 1\n        elif mean == max_mean:\n            max_mean_count += 1\n    return f'{max_mean:.6f}\\n{max_mean_count}'\n"
    },
    {
        "number": 1369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 0 0\n   ... 1 0''')\n    '0.500000000000000000'\n    >>> solution('''3\n   ... 0 0\n   ... 1 0\n   ... 2 0''')\n    '0.70710678118654752'\n    >>> solution('''4\n   ... 0 0\n   ... 1 0\n   ... 2 0\n   ... 3 0''')\n    '1.0'\n    \"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(float, line.split())) for line in stdin]\n    points = [complex(*point) for point in points]\n    points = set(points)\n    center = sum(points) / n\n    radius = min(abs(point - center) for point in points)\n    return str(radius)\n"
    },
    {
        "number": 1370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    S = [list(map(int, stdin.split())) for _ in range(H)]\n    dp = [[0] * (W + 1) for _ in range(H + 1)]\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + S[i - 1][j - 1]\n    return dp[H][W] - dp[H - K + 1][W] - dp[H][W - K + 1] + dp[H - K + 1][W - K + 1]"
    },
    {
        "number": 1371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    count = 0\n    for i in range(1, S):\n        for j in range(i, S):\n            if i + j == S:\n                count += 1\n    return count % (10 ** 9 + 7)"
    },
    {
        "number": 1372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split(' '))\n    A = list(map(int, stdin.split(' ')))\n    B = list(map(int, stdin.split(' ')))\n    A.sort()\n    B.sort()\n    cost = 0\n    for i in range(N):\n        cost += A[i] * B[i]\n    return cost"
    },
    {
        "number": 1373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 1374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10 30 20\n   ... ''')\n    '30'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    m = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            m.append(sorted(a[i:j])[(j - i) // 2])\n    return str(sorted(m)[(n + 1) // 2])\n"
    },
    {
        "number": 1375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    s = sum(a)\n    if s % 3!= 0:\n        return 0\n    s = s // 3\n    count = 0\n    for i in range(n - 2):\n        if a[i] == s:\n            count += 1\n    return count\n"
    },
    {
        "number": 1376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s > n:\n            break\n    return s"
    },
    {
        "number": 1377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if a[0] == 1:\n        return \"YES\"\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] % d == 0:\n            ans += 1\n    return ans"
    },
    {
        "number": 1380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    if k == 1:\n        return 0\n    \n    if k == 2:\n        return sum(a)\n    \n    if k == 3:\n        return max(a)\n    \n    if k == 4:\n        return max(a) - min(a)\n    \n    if k == 5:\n        return max(a) - min(a) + 1\n    \n    if k == 6:\n        return max(a) - min(a) + 1\n    \n    if k == 7:\n        return max(a) - min(a) + 1\n    \n    if k == 8:\n        return max(a) - min(a) + 1\n    \n    if k == 9:\n        return max(a) - min(a) + 1\n    \n    if k == 10:\n        return max(a) - min(a) + 1\n    \n    if k == 11:\n        return max(a) - min(a) + 1\n    \n    if k == 12:\n        return max(a) - min(a) + 1\n    \n    if k == 13:\n        return max(a) - min(a) + 1\n    \n    if k == 14:\n        return max(a) - min(a) + 1\n    \n    if k == 15:\n        return max(a) - min(a) + 1\n    \n    if k == 16:\n        return max(a) - min(a) + 1\n    \n    if k == 17:\n        return max(a) - min(a) + 1\n    \n    if k == 18:\n        return max(a) - min(a) + 1\n    \n    if k == 19:\n        return max(a) - min(a) + 1\n    \n    if k == 20:\n        return max(a) - min(a) + 1\n    \n    if k == 21:\n        return max(a) - min(a) + 1\n    \n    if k == 22:\n        return max(a) - min(a) + 1\n    \n    if k == 23:\n        return max(a) - min(a) + 1\n    \n    if k == 24:\n        return max(a) - min(a) + 1\n    \n    if k == 25:\n        return max(a) - min(a) + 1\n    \n    if k == 26:\n        return max(a) - min(a) + 1\n    \n    if k == 27:\n        return max(a) - min(a) + 1\n    \n    if k == 28:\n        return max(a) - min(a) + 1\n    \n    if k == 29:\n        return max(a) - min(a) + 1\n    \n    if k == 30:\n        return max(a) - min(a) + 1\n    \n    if k == 31:\n        return max(a) - min(a) + 1\n    \n    if k == 32:\n        return max(a) - min(a) + 1\n    \n    if k == 33:\n        return max(a) - min(a) + 1\n    \n    if k == 34:\n        return max(a) - min(a) + 1\n    \n    if k == 35:\n        return max(a) - min(a) + 1\n    \n    if k == 36:\n        return max(a) - min(a) + 1\n    \n    if k == 37:\n        return max(a) - min(a) + 1\n    \n    if k == 38:\n        return max(a) - min(a) + 1\n    \n    if k == 39:\n        return max(a) - min(a) + 1\n    \n    if k == 40:\n        return max(a) - min(a) + 1\n    \n    if k == 41:\n        return max(a) - min(a) + 1\n    \n    if k == 42:\n        return max(a) - min(a) + 1\n    \n    if k == 43:\n        return max(a) - min(a) + 1\n    \n    if k == 44:\n        return max(a) - min(a) + 1\n    \n    if k == 45:\n        return max(a) - min(a) + 1\n    \n    if k == 46:\n        return max(a) - min(a) + 1\n    \n    if k == 47:\n        return max(a) - min(a) + 1\n    \n    if k == 48:\n        return max(a) - min(a) + 1\n    \n    if k == 49:\n        return max(a) - min(a) + 1\n    \n    if k == 50:\n        return max(a) - min(a) + 1\n    \n    if k == 51:\n        return max(a) - min(a) + 1\n    \n    if k == 52:\n        return max(a) - min(a) + 1\n    \n    if k == 53:\n        return max(a) - min(a) + 1\n    \n    if k == 54:\n        return max(a) - min(a) + 1\n    \n    if k == 55:\n        return max(a) - min(a) + 1\n    \n    if k == 56:\n        return max(a) - min(a) + 1\n    \n    if k == 57:\n        return max(a) - min(a) + 1\n    \n    if k == 58:\n        return max(a) - min(a) + 1\n    \n    if k == 59:\n        return max(a) - min(a) + 1\n    \n    if k == 60:\n        return max(a) - min(a) + 1\n    \n    if k == 61:\n        return max(a) - min(a) + 1\n    \n    if k == 62:\n        return max(a) - min(a) + 1\n    \n    if k == 63:\n        return max(a) - min(a) + 1\n    \n    if k == 64:\n        return max(a) - min(a) + 1\n    \n    if k == 65:\n        return max(a) - min(a) + 1\n    \n    if k == 66:\n        return max(a) - min(a) + 1\n    \n    if k == 67:\n        return max(a) - min(a) + 1\n    \n    if k == 68:\n        return max(a) - min(a) + 1\n    \n    "
    },
    {
        "number": 1381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n, s, p = map(int, stdin.split())\n    return k // n + (k % n > 0)"
    },
    {
        "number": 1382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    x = 0\n    for i in range(n):\n        if a[i]!= b[i]:\n            x = (m - a[i]) * pow(m - b[i], -1, m)\n            break\n    return str(x)\n"
    },
    {
        "number": 1384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        if s[i] == 1:\n            res += 1\n        else:\n            res = 0\n        if res > n - i - 1:\n            break\n    return n - i - 1\n"
    },
    {
        "number": 1385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        f'<{lexeme}>'\n        for lexeme in stdin.split()\n    )\n"
    },
    {
        "number": 1386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2''')\n    16\n    >>> solution('''2 4''')\n    64\n    \"\"\"\n    w, h = map(int, stdin.split())\n    return (w * h) % 998244353\n"
    },
    {
        "number": 1387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 0 1\n   ... 20 1 0\n   ... 300 0 1\n   ... 4000 0 0\n   ... 50000 1 0\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 1 5''')\n    '4'\n    >>> solution('''2\n   ... 109 0 1\n   ... 205 0 1\n   ... 1 2''')\n    '-1'\n    \"\"\"\n    n = int(stdin.readline())\n    costs = [tuple(map(int, line.split())) for line in stdin]\n    graph = defaultdict(list)\n    for u, v, c in costs:\n        graph[u].append((v, c))\n    cost = 0\n    for u in range(1, n + 1):\n        cost += dfs(u, graph, set())\n    return str(cost) if cost!= float('inf') else '-1'\n\n\ndef"
    },
    {
        "number": 1389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(stdin.split()) for _ in range(n)]\n    prefix_sum = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + int(matrix[i - 1][j - 1])\n    return str(prefix_sum[n][m] - prefix_sum[n][m - 1] - prefix_sum[n - 1][m] + prefix_sum[n - 1][m - 1])"
    },
    {
        "number": 1390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    f = list(map(int, stdin.split()))\n    f.sort()\n    f = f[::-1]\n    diff = f[0] - f[1]\n    for i in range(1, m):\n        if f[i] - f[i - 1] < diff:\n            diff = f[i] - f[i - 1]\n    return diff\n"
    },
    {
        "number": 1391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    b.sort()\n    p.sort()\n    b.reverse()\n    p.reverse()\n    r = 0\n    s = 0\n    for i in range(n):\n        if a >= p[i]:\n            r += 1\n            a -= p[i]\n        else:\n            break\n    for i in range(r):\n        s += b[i]\n    return str(r) +'' + str(s)"
    },
    {
        "number": 1392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    count = 0\n    for i in a:\n        if i <= k:\n            count += 1\n    return count"
    },
    {
        "number": 1393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n    if n > m:\n        return '0 3'\n    elif n == m:\n        return '1 1'\n    else:\n        count = 0\n        for i in range(m - n + 1):\n            if s == t[i:i + n]:\n                count += 1\n        return str(count) +'' + str(m - n + 1 - count)\n"
    },
    {
        "number": 1394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 1396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    row = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if row[i] == x:\n            count += 1\n        elif row[i] == k:\n            count -= 1\n        if count >= 3:\n            break\n    return n - i - 1"
    },
    {
        "number": 1397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    visited = set()\n    res = 0\n    for i in range(m):\n        if i in visited:\n            continue\n        a, b = edges[i]\n        visited.add(i)\n        visited.add(i + 1)\n        res += 1\n        for j in range(i + 1, m):\n            if j in visited:\n                continue\n            if edges[j][0] == a:\n                visited.add(j)\n                visited.add(j + 1)\n                res += 1\n            elif edges[j][0] == b:\n                visited.add(j)\n                visited.add(j + 1)\n                res += 1\n    return res\n"
    },
    {
        "number": 1398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums.sort()\n    min_diff = nums[1] - nums[0]\n    max_diff = nums[-1] - nums[0]\n    if min_diff > 2 * max_diff:\n        return 0\n    else:\n        return 2\n"
    },
    {
        "number": 1399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = [int(x) for x in stdin.split(' ')]\n    t = [int(x) for x in stdin.split(' ')]\n    t.sort()\n    t = [x for x in t if x <= T]\n    t = [x for x in t if x!= 1]\n    t = [x for x in t if x!= 2]\n    t = [x for x in t if x!= 3]\n    t = [x for x in t if x!= 4]\n    t = [x for x in t if x!= 5]\n    t = [x for x in t if x!= 6]\n    t = [x for x in t if x!= 7]\n    t = [x for x in t if x!= 8]\n    t = [x for x in t if x!= 9]\n    t = [x for x in t if x!= 10]\n    t = [x for x in t if x!= 11]\n    t = [x for x in t if x!= 12]\n    t = [x for x in t if x!= 13]\n    t = [x for x in t if x!= 14]\n    t = [x for x in t if x!= 15]\n    t = [x for x in t if x!= 16]\n    t = [x for x in t if x!= 17]\n    t = [x for x in t if x!= 18]\n    t = [x for x in t if x!= 19]\n    t = [x for x in t if x!= 20]\n    t = [x for x in t if x!= 21]\n    t = [x for x in t if x!= 22]\n    t = [x for x in t if x!= 23]\n    t = [x for x in t if x!= 24]\n    t = [x for x in t if x!= 25]\n    t = [x for x in t if x!= 26]\n    t = [x for x in t if x!= 27]\n    t = [x for x in t if x!= 28]\n    t = [x for x in t if x!= 29]\n    t = [x for x in t if x!= 30]\n    t = [x for x in t if x!= 31]\n    t = [x for x in t if x!= 32]\n    t = [x for x in t if x!= 33]\n    t = [x for x in t if x!= 34]\n    t = [x for x in t if x!= 35]\n    t = [x for x in t if x!= 36]\n    t = [x for x in t if x!= 37]\n    t = [x for x in t if x!= 38]\n    t = [x for x in t if x!= 39]\n    t = [x for x in t if x!= 40]\n    t = [x for x in t if x!= 41]\n    t = [x for x in t if x!= 42]\n    t = [x for x in t if x!= 43]\n    t = [x for x in t if x!= 44]\n    t = [x for x in t if x!= 45]\n    t = [x for x in t if x!= 46]\n    t = [x for x in t if x!= 47]\n    t = [x for x in t if x!= 48]\n    t = [x for x in t if x!= 49]\n    t = [x for x in t if x!= 50]\n    t = [x for x in t if x!= 51]\n    t = [x for x in t if x!= 52]\n    t = [x for x in t if x!= 53]\n    t = [x for x in t if x!= 54]\n    t = [x for x in t if x!= 55]\n    t = [x for x in t if x!= 56]\n    t = [x for x in t if x!= 57]\n    t = [x for x in t if x!= 58]\n    t = [x for x in t if x!= 59]\n    t = [x for x in t if x!= 60]\n    t = [x for x in t if x!= 61]\n    t = [x for x in t if x!= 62]\n    t = [x for x in t if x!= 63]\n    t = [x for x in t if x!= 64]\n    t = [x for x in t if x!= 65]\n    t = [x for x in t if x!= 66]\n    t = [x for x in t if x!= 67]\n    t = [x for x in t if x!= 68]\n    t = [x for x in t if x!= 69]\n    t = [x for x in t if x!= 70]\n    t = [x for x in t if x!= 71]\n    t = [x for x in t if x!= 72]\n    t = [x for x in t if x!= 73]\n    t = [x for x in t if x!= 74]\n    t = [x for x in t if x!= 75]\n    t = [x for x in t if x!="
    },
    {
        "number": 1401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    w = stdin.readline()\n    s_template = s.replace('?', '0')\n    w_template = w.replace('?', '0')\n    s_template = int(s_template)\n    w_template = int(w_template)\n    if s_template > w_template:\n        return str(1)\n    else:\n        return str(0)\n"
    },
    {
        "number": 1403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j] + k:\n                ans += 1\n                break\n    return str(ans)"
    },
    {
        "number": 1404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.insert(0, -1)\n    a.append(-1)\n    dp = [0] * (n + 2)\n    dp[1] = 1\n    for i in range(1, n + 1):\n        for j in range(i - 1, i + 2):\n            if a[j] >= a[i] and dp[j] > 0:\n                dp[i] += dp[j]\n                dp[i] %= 998244353\n    return dp[n]\n"
    },
    {
        "number": 1405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    fib.sort()\n    for i in range(n):\n        if a[i] == fib[i]:\n            continue\n        else:\n            return i\n    return n"
    },
    {
        "number": 1406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def is_prime_matrix(matrix):\n        for row in matrix:\n            if not is_prime(row[0]):\n                return False\n        for col in zip(*matrix):\n            if not is_prime(col[0]):\n                return False\n        return True\n    \n    def get_prime_matrix(matrix):\n        for row in matrix:\n            for i in range(1, len(row)):\n                if is_prime(row[i]):\n                    row[i] += 1\n        for col in zip(*matrix):\n            for i in range(1, len(col)):\n                if is_prime(col[i]):\n                    col[i] += 1\n        return matrix\n    \n    def get_prime_matrix_count(matrix):\n        count = 0\n        for row in matrix:\n            for i in range(1, len(row)):\n                if is_prime(row[i]):\n                    count += 1\n        for col in zip(*matrix):\n            for i in range(1, len(col)):\n                if is_prime(col[i]):\n                    count += 1\n        return count\n    \n    prime_matrix = get_prime_matrix(matrix)\n    while not is_prime_matrix(prime_matrix):\n        prime_matrix = get_prime_matrix(prime_matrix)\n    return get_prime_matrix_count(prime_matrix)\n"
    },
    {
        "number": 1408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 12\n   ... 1 3\n   ... 2 15\n   ... 2 5\n   ... 2 1''')\n    5\n    \"\"\"\n    n = int(stdin.readline())\n    books = [tuple(map(int, line.split())) for line in stdin]\n    books.sort(key=lambda x: x[0])\n    t = 0\n    for i in range(n):\n        t += books[i][0]\n        if i > 0 and books[i][0] == books[i - 1][0]:\n            t += books[i][1] - books[i - 1][1]\n    return t\n"
    },
    {
        "number": 1409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    y = list(map(int, stdin.split()))\n    y.sort()\n    if n == 1:\n        return 0\n    if k == 1:\n        return 1\n    if k == 2:\n        return n - 1\n    if k == 3:\n        return n\n    if k == 4:\n        return n - 1\n    if k == 5:\n        return n - 2\n    return n - (k - 2)\n"
    },
    {
        "number": 1410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 3 2 3\n   ... 4 3 2\n   ... 3 1 3\n   ... 1 2\n   ... 2 3\n   ... 4 3''')\n    '6'\n    >>> solution('''5\n   ... 3 4 2 1 2\n   ... 4 2 1 5 4\n   ... 5 3 2 1 1\n   ... 1 2\n   ... 3 2\n   ... 4 3\n   ... 5 4''')\n    '-1'\n    >>> solution('''5\n   ... 3 4 2 1 2\n   ... 4 2 1 5 4\n   ... 5 3 2 1 1\n   ... 1 2\n   ... 3 2\n   ... 4 3\n   ... 5 4''')\n    '9'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1234\")\n    6\n    >>> solution(\"2244\")\n    10\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if int(s[i:j + 1]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 1414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [stdin[i:i + m] for i in range(0, len(stdin), m)]\n    if table[0][0] == 'D':\n        return 'Poor Dima!'\n    elif table[0][0] == 'I':\n        return 'Poor Inna!'\n    else:\n        for i in range(m):\n            if table[0][i] == 'D':\n                table[0][i] = 'I'\n                break\n        for i in range(m):\n            if table[0][i] == 'M':\n                table[0][i] = 'A'\n                break\n        for i in range(n):\n            if table[i][0] == 'D':\n                table[i][0] = 'M'\n                break\n        for i in range(n):\n            if table[i][0] == 'I':\n                table[i][0] = 'D'\n                break\n        for i in range(n):\n            for j in range(m):\n                if table[i][j] == 'A':\n                    table[i][j] = 'I'\n                    break\n        for i in range(m):\n            for j in range(n):\n                if table[j][i] == 'M':\n                    table[j][i] = 'D'\n                    break\n        for i in range(n):\n            for j in range(m):\n                if table[i][j] == 'I':\n                    table[i][j] = 'M'\n                    break\n        for i in range(m):\n            for j in range(n):\n                if table[j][i] == 'A':\n                    table[j][i] = 'D'\n                    break\n        return str(sum([table[i].count('D') for i in range(n)]))\n"
    },
    {
        "number": 1415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x_0, y_0 = [int(i) for i in stdin.split()]\n    s = stdin.split()[1]\n    x_0 -= 1\n    y_0 -= 1\n    x_0_min = x_0\n    y_0_min = y_0\n    x_0_max = x_0\n    y_0_max = y_0\n    x_0_min_max = x_0\n    y_0_min_max = y_0\n    x_0_max_max = x_0\n    y_0_max_max = y_0\n    for i in s:\n        if i == 'L':\n            y_0_min = max(y_0_min - 1, 0)\n            y_0_max = min(y_0_max + 1, y)\n        elif i == 'R':\n            y_0_min = max(y_0_min + 1, 0)\n            y_0_max = min(y_0_max - 1, y)\n        elif i == 'U':\n            x_0_min = max(x_0_min - 1, 0)\n            x_0_max = min(x_0_max + 1, x)\n        elif i == 'D':\n            x_0_min = max(x_0_min + 1, 0)\n            x_0_max = min(x_0_max - 1, x)\n        if x_0_min == x_0_max and y_0_min == y_0_max:\n            return '1 1 1 1'\n        if x_0_min_max!= x_0_min and x_0_min_max!= x_0_max and x_0_min_max!= x_0_max_max:\n            x_0_min_max = x_0_min\n            y_0_min_max = y_0_min\n            x_0_max_max = x_0_max\n            y_0_max_max = y_0_max\n        if x_0_min_max == x_0_min and x_0_min_max!= x_0_max and x_0_min_max!= x_0_max_max:\n            x_0_min_max = x_0_min\n            y_0_min_max = y_0_min\n            x_0_max_max = x_0_max\n            y_0_max_max = y_0_max\n        if x_0_min_max == x_0_min and x_0_min_max == x_0_max and x_0_min_max!= x_0_max_max:\n            x_0_min_max = x_0_min\n            y_0_min_max = y_0_min\n            x_0_max_max = x_0_max\n            y_0_max_max = y_0_max\n        if x_0_min_max == x_0_min and x_0_min_max == x_0_max and x_0_min_max == x_0_max_max:\n            return '1 1 1 1'\n    return '1 1 1 1'\n"
    },
    {
        "number": 1416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 1418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [1]\n    for i in range(2, n + 1):\n        a.append(i)\n        for j in range(2, i):\n            if gcd(i, j) == 1:\n                a[i] = min(a[i], a[j])\n    for i in range(2, n + 1):\n        if a[i] == i:\n            print(i, end=' ')\n    return ''\n"
    },
    {
        "number": 1419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(' ', '.')\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 1420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    d = 0\n    for i in range(n):\n        d = max(d, a[i] - a[i - 1])\n    return str(d)\n"
    },
    {
        "number": 1421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0000000101\\n2\")\n    'YES\\n8 10 8'\n    \"\"\"\n    weights = [int(c) for c in stdin]\n    m = int(stdin[0])\n    weights = [1 if c == \"1\" else 0 for c in stdin]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights = [0] + weights + [0]\n    weights ="
    },
    {
        "number": 1423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    p = [int(x) for x in stdin.split('\\n')[2].split()]\n    c = []\n    for i in range(n):\n        c.append(p[i] - (a[i] - l))\n    c.sort()\n    for i in range(n):\n        if c[i]!= i + l:\n            return '-1'\n    return''.join([str(x) for x in a])"
    },
    {
        "number": 1424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    print(arr)\n    return 0"
    },
    {
        "number": 1425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    if nums[0] >= nums[1] + nums[2]:\n        return \"NO\"\n    for i in range(n):\n        if nums[i] >= nums[(i + 1) % n] + nums[(i + 2) % n]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 1\n   ... 1 3''')\n    2\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    edges = [tuple(map(int, line.split(' ')[:2])) for line in stdin.split('\\n')[2:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    s, t = map(int, stdin.split('\\n')[-2].split(' '))\n    return bfs(graph, s, t)\n\n\ndef"
    },
    {
        "number": 1427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    b[0] = a[0]\n    for i in range(1, n):\n        b[i] = b[i - 1] * a[i]\n    return str(sum(b) % (10 ** 9 + 7))"
    },
    {
        "number": 1428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 0 1 1\n   ... 1 0 1\n   ... 1 4 0\n   ... 1 2\n   ... 3 3''')\n    '3'\n    \"\"\"\n    n, c = map(int, stdin.split())\n    d = [[int(x) for x in stdin.split(':')[1].split()] for _ in range(c)]\n    c = [int(x) for x in stdin.split(':')[2].split()]\n    d.append([int(x) for x in stdin.split(':')[3].split()])\n    d.append([int(x) for x in stdin.split(':')[4].split()])\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range(c)]\n    c = [c[i] for i in range(n)]\n    d = [[d[i][j] for i in range(c)] for j in range("
    },
    {
        "number": 1429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 AGCT\")\n    2\n    \"\"\"\n    n, s = stdin.split()\n    n, s = int(n), s.upper()\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j + 1] == s[i:j + 1][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 1430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 0 0\n   ... ''')\n    '1 1'\n    >>> solution('''3\n   ... 0 1 0\n   ... ''')\n    '1 1'\n    >>> solution('''3\n   ... 0 0 1\n   ... ''')\n    '1 1'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    m = 0\n    for i in range(1, n + 1):\n        m = (m + a[i - 1]) % 2\n    if m:\n        return -1\n    else:\n        return stdin.readline()\n"
    },
    {
        "number": 1432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 2 4''')\n    '4 0 4'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    a.append(a[0])\n    a.insert(0, 0)\n    a.sort()\n    a.reverse()\n    a = [a[i] - a[i + 1] for i in range(len(a) - 1)]\n    a.append(0)\n    a.reverse()\n    return''.join([str(x) for x in a])\n"
    },
    {
        "number": 1433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    plan = [list(map(int, stdin.split())) for _ in range(n)]\n    good_positions = 0\n    for i in range(n):\n        for j in range(m):\n            if plan[i][j] == 1:\n                if i == 0 or plan[i - 1][j] == 0:\n                    if j == 0 or plan[i][j - 1] == 0:\n                        good_positions += 1\n                if i == n - 1 or plan[i + 1][j] == 0:\n                    if j == m - 1 or plan[i][j + 1] == 0:\n                        good_positions += 1\n                if j == 0 or plan[i][j - 1] == 0:\n                    if i == 0 or plan[i - 1][j] == 0:\n                        good_positions += 1\n                if j == m - 1 or plan[i][j + 1] == 0:\n                    if i == n - 1 or plan[i + 1][j] == 0:\n                        good_positions += 1\n    return good_positions"
    },
    {
        "number": 1434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a\n    c = 0\n    while a > 0:\n        if a % 10 == 9:\n            c += 1\n        a = a // 10\n    print(c)\n    return str(b)"
    },
    {
        "number": 1436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n):\n        if lst[i] == -1:\n            count += 1\n        else:\n            count = 0\n        if count > 1:\n            break\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 1437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split('_')))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < n:\n        if a[i] <= b[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return count"
    },
    {
        "number": 1439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % m == 0:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 2 2 2\\n\")\n    3\n    >>> solution(\"3\\n1 1 1\\n\")\n    0\n    >>> solution(\"3\\n3 3 3\\n\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    sticks = [int(x) for x in stdin.readline().split()]\n    sticks.sort()\n    triangles = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sticks[i] + sticks[j] > sticks[j] + sticks[i]:\n                triangles += 1\n    return triangles\n"
    },
    {
        "number": 1441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 2 1 2\n   ... ''')\n    120\n    \"\"\"\n    n, *balls = map(int, stdin.split())\n    balls = [balls[i] for i in range(n)]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        dp[i + 1] = dp[i] * (balls[i] - i) % 1000000007\n    return dp[-1]\n"
    },
    {
        "number": 1442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 2\n   ... B 10 3\n   ... S 50 2\n   ... S 40 1\n   ... S 50 6\n   ... B 20 4\n   ... B 25 10\n   ... ''')\n    S 50 8\n    S 40 1\n    B 25 10\n    B 20 4\n    \"\"\"\n    n, s = map(int, stdin.split('\\n')[:2])\n    orders = [tuple(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    orders.sort(key=lambda x: x[0])\n    buy_orders = []\n    sell_orders = []\n    for price, volume in orders:\n        if volume > 0:\n            buy_orders.append((price, volume))\n        else:\n            sell_orders.append((price, -volume))\n    buy_orders.sort(key=lambda x: x[0], reverse=True)\n    sell_orders.sort(key=lambda x: x[0], reverse=True)\n    buy_orders = buy_orders[:s]\n    sell_orders = sell_orders[:s]\n    print('\\n'.join([' '.join(map(str, order)) for order in buy_orders]))\n    print('\\n'.join([' '.join(map(str, order)) for order in sell_orders]))\n    return ''\n"
    },
    {
        "number": 1443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 10\n   ... G''')\n    30\n    >>> solution('''2\n   ... 10 10\n   ... WL''')\n    40\n    >>> solution('''3\n   ... 10 10 10\n   ... GLW''')\n    80\n    \"\"\"\n   ..."
    },
    {
        "number": 1444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    for i in range(n):\n        if i % 2 == 0:\n            arr[i] = arr[n - i - 1]\n    return''.join([str(x) for x in arr])\n"
    },
    {
        "number": 1446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    d = [[-1] * k for _ in range(k)]\n    for _ in range(m):\n        u, v, x = [int(x) for x in stdin.split()]\n        d[u - 1][v - 1] = x\n    for i in range(k):\n        for j in range(k):\n            if d[i][j] == -1:\n                continue\n            for u in range(k):\n                if d[i][u] == -1:\n                    continue\n                for v in range(k):\n                    if d[u][j] == -1:\n                        continue\n                    if d[i][j] > d[i][u] + d[u][j]:\n                        d[i][j] = d[i][u] + d[u][j]\n    if d[0][k - 1] == -1:\n        return \"No\"\n    return \"\\n\".join([str(x) for x in d[0][:k]])\n"
    },
    {
        "number": 1447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m / (n + m))\n"
    },
    {
        "number": 1448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    m = int(stdin)\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        if x < d or x > n - d or y < d or y > n - d:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\""
    },
    {
        "number": 1449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lucky_numbers = set()\n    for i in range(n):\n        if len(set(stdin.split()[i])) <= k:\n            lucky_numbers.add(int(stdin.split()[i]))\n    return len(lucky_numbers)"
    },
    {
        "number": 1452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n0 3 1\\n0 2 3 0\")\n    2\n    >>> solution(\"1 1\\n0\\n1\\n\")\n    0\n    >>> solution(\"19 16\\n16 16 16 16 15 15 0 5 0 4 9 9 1 4 4 0 8 16 12\\n6 12 19 15 8 6 19 19 14 6 9 16 10 11 15 4\")\n    797922655\n    \"\"\"\n    h, w = map(int, stdin.split(\"\\n\")[0].split())\n    r = list(map(int, stdin.split(\"\\n\")[1].split()))\n    c = list(map(int, stdin.split(\"\\n\")[2].split()))\n    return str(solve(h, w, r, c))\n\n\ndef"
    },
    {
        "number": 1453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9 2\n   ... 6 19 3 4 4 2 6 7 8\n   ... ''')\n    '2 5 11 18 30 43 62 83 121'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j] + a[i - 1] * (i - 1)\n            for k in range(i):\n                dp[i][j] = min(dp[i][j], dp[k][j - 1] + dp[i - k - 1][j])\n    return''.join(map(str, dp[n][m]))\n"
    },
    {
        "number": 1454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] < matrix[i - 1][j] or matrix[i][j] < matrix[i][j - 1]:\n                return '-1'\n    return str(sum(map(sum, matrix)))\n"
    },
    {
        "number": 1455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while n > 0:\n        m += 1\n        n -= m\n    return str(m)"
    },
    {
        "number": 1456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [['.' for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if stdin[i * n + j] == 'o':\n                board[i][j] = 'o'\n    for i in range(n):\n        for j in range(n):\n            if stdin[i * n + j] == 'x':\n                board[i][j] = 'x'\n    for i in range(n):\n        for j in range(n):\n            if stdin[i * n + j] == '.':\n                board[i][j] = '.'\n    for i in range(n):\n        for j in range(n):\n            if stdin[i * n + j] == '.':\n                for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                    if 0 <= i + dx < n and 0 <= j + dy < n:\n                        if board[i + dx][j + dy] == 'o':\n                            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 1457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.replace('sir', '#').replace('apple', '#').replace('google', '#')))"
    },
    {
        "number": 1458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"NO\"\n    for i in range(1, n):\n        if s[:i] == s[i:2 * i]:\n            return \"YES\" + \" \" + str(i) + \" \" + str(2 * i)\n    return \"NO\"\n"
    },
    {
        "number": 1459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 1461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 1463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grid = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]!= 1:\n                for k in range(n):\n                    if grid[i][k] + grid[k][j] == grid[i][j]:\n                        break\n                else:\n                    return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 1464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 1466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3 2\n   ... 1 2 1\n   ... 3 2 1\n   ... 1 3 3\n   ... ''')\n    '2'\n    >>> solution('''4 5 2\n   ... 4 1 8\n   ... 2 4 1\n   ... 2 1 3\n   ... 3 4 9\n   ... 3 1 5\n   ... ''')\n    '2'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges.sort(key=lambda x: x[2])\n    good_edges = set()\n    for edge in edges:\n        if len(good_edges) < k:\n            good_edges.add(edge)\n        else:\n            break\n    return str(len(good_edges)) + '\\n' +''.join(map(str, sorted(good_edges)))\n"
    },
    {
        "number": 1467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n5 5 7 2\")\n    2\n    >>> solution(\"3\\n1 2 3\")\n    -1\n    >>> solution(\"3\\n3 1 10\")\n    3\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i] == 0:\n            res += 1\n        else:\n            break\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            res += 1\n        else:\n            break\n    return res\n"
    },
    {
        "number": 1468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hashtags = [stdin.split()[i] for i in range(n)]\n    hashtags.sort()\n    for i in range(n):\n        hashtags[i] = hashtags[i].replace('#', '')\n    return '\\n'.join(hashtags)"
    },
    {
        "number": 1469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ...\n   ... ''')\n    '8 10\\n1 2 0\\n2 3 0\\n3 4 0\\n1 5 0\\n2 6 0\\n3 7 0\\n4 8 0\\n5 6 1\\n6 7 1\\n7 8 1'\n    \"\"\"\n   ..."
    },
    {
        "number": 1470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x // 7)\n"
    },
    {
        "number": 1471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    edges.sort(key=lambda x: x[2])\n    colors = [0] * n\n    for u, v, w in edges:\n        if colors[u - 1] == colors[v - 1]:\n            if colors[u - 1] == 0:\n                colors[u - 1] = 1\n            else:\n                colors[v - 1] = 1\n    return '\\n'.join(map(str, colors))\n"
    },
    {
        "number": 1472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 1473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(stdin.split())"
    },
    {
        "number": 1474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 1000000007)"
    },
    {
        "number": 1475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156"
    },
    {
        "number": 1477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 0 1 0 1\n   ... 0 1\n   ... 1 2\n   ... 2 3\n   ... ''')\n    '2'\n    >>> solution('''4 3\n   ... 1 1 1 0\n   ... 0 1\n   ... 0 2\n   ... 3 0\n   ... ''')\n    '1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    graph = {i: set() for i in range(n)}\n    for edge in edges:\n        graph[edge[0]].add(edge[1])\n    coprocessor = set()\n    queue = [0]\n    while queue:\n        task = queue.pop()\n        if task not in coprocessor:\n            coprocessor.add(task)\n            queue.extend(graph[task])\n    return len(coprocessor) - 1\n"
    },
    {
        "number": 1478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    spider_map = [list(stdin[i]) for i in range(n)]\n    spider_map[0][0] = '*'\n    spider_map[0][-1] = '*'\n    spider_map[-1][0] = '*'\n    spider_map[-1][-1] = '*'\n    for i in range(1, n - 1):\n        spider_map[i][0] = '*'\n        spider_map[i][-1] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1][-2] = '*'\n    spider_map[-2][1] = '*'\n    spider_map[-2][-2] = '*'\n    spider_map[1][1] = '*'\n    spider_map[1]["
    },
    {
        "number": 1480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(k):\n        a[a[i] - 1] = 0\n    for i in range(n):\n        if a[i]!= 0:\n            print(i + 1)\n            break\n    return ''"
    },
    {
        "number": 1481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    board = []\n    for _ in range(n):\n        board.append(list(stdin.readline().strip()))\n    \n    def check_adjacent(board, row, col):\n        count = 0\n        for i in range(row - 1, row + 2):\n            for j in range(col - 1, col + 2):\n                if i >= 0 and i < n and j >= 0 and j < n:\n                    if board[i][j] == 'o':\n                        count += 1\n        return count\n    \n    for row in range(n):\n        for col in range(n):\n            if board[row][col] == 'o':\n                if check_adjacent(board, row, col) % 2!= 0:\n                    return 'NO'\n    return 'YES'"
    },
    {
        "number": 1482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = []\n    for i in range(k):\n        ans.append(a[i])\n    return''.join(map(str, ans))"
    },
    {
        "number": 1483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p.sort()\n    ans = []\n    for i in range(n):\n        ans.append(p[i])\n        ans.append(p[i])\n    return''.join(map(str, ans))"
    },
    {
        "number": 1484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] == -1:\n                for x in range(1, k + 1):\n                    if a[j] == x:\n                        ans += 1\n                        break\n            else:\n                if a[j] == a[i]:\n                    ans += 1\n                    break\n    return ans % 1000000007\n"
    },
    {
        "number": 1485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] <= m:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 1486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return \"impossible\"\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        if s[0] == t[0]:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 3:\n        if s[0] == t[0] and s[1] == t[1]:\n            return \"0\"\n        elif s[0] == t[1] and s[1] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 4:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n            return \"0\"\n        elif s[0] == t[2] and s[1] == t[1] and s[2] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 5:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n            return \"0\"\n        elif s[0] == t[3] and s[1] == t[2] and s[2] == t[1] and s[3] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 6:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n            return \"0\"\n        elif s[0] == t[4] and s[1] == t[3] and s[2] == t[2] and s[3] == t[1] and s[4] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 7:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n            return \"0\"\n        elif s[0] == t[5] and s[1] == t[4] and s[2] == t[3] and s[3] == t[2] and s[4] == t[1] and s[5] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 8:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n            return \"0\"\n        elif s[0] == t[6] and s[1] == t[5] and s[2] == t[4] and s[3] == t[3] and s[4] == t[2] and s[5] == t[1] and s[6] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 9:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n            return \"0\"\n        elif s[0] == t[7] and s[1] == t[6] and s[2] == t[5] and s[3] == t[4] and s[4] == t[3] and s[5] == t[2] and s[6] == t[1] and s[7] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 10:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n            return \"0\"\n        elif s[0] == t[8] and s[1] == t[7] and s[2] == t[6] and s[3] == t[5] and s[4] == t[4] and s[5] == t[3] and s[6] == t[2] and s[7] == t[1] and s[8] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 11:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n            return \"0\"\n        elif s[0] == t[9] and s[1] == t[8] and s[2] == t[7] and s[3] == t[6] and s[4] == t[5] and s[5] == t[4] and s[6] == t[3] and s[7] == t[2] and s[8] == t[1] and s[9] == t[0]:\n            return \"1\"\n        else:\n            return \"impossible\"\n    if n == 12:\n        if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n            return \"0\"\n        elif s[0] == t[10] and s[1] == t[9] and s[2] == t[8] and s[3] == t[7] and s[4] == t[6] and"
    },
    {
        "number": 1488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 3 5\")\n    '22 3'\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    total = 0\n    for i in range(n):\n        total += abs(a[i] - i)\n    return f\"{total // (n - 1):.0f}/{n - 1:.0f}\"\n"
    },
    {
        "number": 1489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    toys = list(map(int, stdin.split()))\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys = list(toys)\n    toys.sort()\n    toys.reverse()\n    toys = toys[:n]\n    toys = set(toys)\n    toys ="
    },
    {
        "number": 1491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n % 2 == 0:\n        if a[n // 2] ** 2 == a[n // 2 - 1] ** 2:\n            return str(n // 2)\n        else:\n            return str(n // 2 + 1)\n    else:\n        if a[n // 2] ** 2 == a[n // 2 - 1] ** 2:\n            return str(n // 2)\n        else:\n            return str(n // 2 + 1)"
    },
    {
        "number": 1492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    forest = [stdin.split() for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if forest[i][j] == 'X':\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return max(dp[-1])\n"
    },
    {
        "number": 1493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [list(stdin.split()[i]) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'B'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == '.':\n                board[i][j] = '-'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'B':\n                if j + 1 < m and board[i][j + 1] == 'B':\n                    board[i][j] = '-'\n                if i + 1 < n and board[i + 1][j] == 'B':\n                    board[i][j] = '-'\n            if board[i][j] == 'W':\n                if j + 1 < m and board[i][j + 1] == 'W':\n                    board[i][j] = '-'\n                if i + 1 < n and board[i + 1][j] == 'W':\n                    board[i][j] = '-'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'B':\n                board[i][j] = 'B'\n            elif board[i][j] == 'W':\n                board[i][j] = 'W'\n            else:\n                board[i][j] = '-'\n    for i in range(n):\n        print(''.join(board[i]))\n    return ''"
    },
    {
        "number": 1494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    p = stdin\n    ans = []\n    for i in range(len(s)):\n        ans.append(len(s) - i)\n        for j in range(len(p)):\n            if s[i + j]!= p[j]:\n                ans[i] -= 1\n                break\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 1495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums.sort()\n    res = 0\n    for i in range(n - 1):\n        res += abs(nums[i] - nums[i + 1])\n    return str(res)\n"
    },
    {
        "number": 1496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4 2 2\n   ... 1 2 3 2 1\n   ... 3 2 1 2 3\n   ... 1 1\n   ... 2 1\n   ... 1 2\n   ... 2 2\n   ... ''')\n    3\n    >>> solution('''4 3 1 1000000000\n   ... 900000 910000 940000 990000\n   ... 990000 999000 999900 999990\n   ... 1 87654\n   ... 2 76543\n   ... 1 65432\n   ... ''')\n    -1\n    \"\"\"\n   ..."
    },
    {
        "number": 1497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    room = [list(map(int, stdin.readline().strip())) for _ in range(n)]\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if room[i][j] == 1:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[n - 1][n - 1]\n\n\ndef"
    },
    {
        "number": 1498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    tasks = []\n    for i in range(q):\n        tasks.append(list(map(int, stdin.split('\\n')[i + 1].split())))\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[2])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n"
    },
    {
        "number": 1499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return''.join(map(str, range(1, m + 1)))"
    },
    {
        "number": 1501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = stdin[:m]\n    s = stdin[m:]\n    s = s.split()\n    s = [int(i) for i in s]\n    s = [i for i in s if i < n]\n    s.sort()\n    s = [i for i in s if i >= n - len(p) + 1]\n    s = [i for i in s if i <= n - len(p) + 1]\n    s = [i for i in s if p in s[i:i + len(p)]]\n    print(len(s))\n    return ''"
    },
    {
        "number": 1502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)"
    },
    {
        "number": 1503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 8 0 2 8 3 4 5\")\n    '8.0 11.0\\n4.0 8.0\\n6.0 8.0\\n6.0 3.0\\n10.0 3.0\\n10.0 8.0\\n12.0 8.0'\n    \"\"\"\n   ..."
    },
    {
        "number": 1506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 3\")\n    '1'\n    >>> solution(\"3\\n1 1 2\")\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    f = [0] * n\n    f[0] = 1\n    M = 1\n    for i in range(2, n):\n        if a[M] < a[i]:\n            f[i] = f[i - 1] + a[M]\n            M = i\n    print(sum(f) % (10 ** 9 + 7))\n"
    },
    {
        "number": 1507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    entrances = stdin.split()\n    guests = [0] * 26\n    for entrance in entrances:\n        guests[ord(entrance) - ord('A')] += 1\n    for i in range(k):\n        if guests[i] > 0:\n            guests[i] -= 1\n            break\n    else:\n        return 'NO'\n    for i in range(k, 26):\n        if guests[i] > 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 1508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    print(*a)\n    return ''"
    },
    {
        "number": 1509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += (j - i) * (j - i - 1) // 2\n    return ans\n"
    },
    {
        "number": 1510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    a.sort()\n    b.sort()\n    return sum(abs(a[i] - b[i]) for i in range(n))"
    },
    {
        "number": 1511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    cores = [0] * n\n    for i in range(m):\n        cores = [0] * n\n        for j in range(n):\n            cores[j] = list(map(int, stdin.split()))\n        for j in range(n):\n            if cores[j][i] == 1:\n                cores[j][i] = 0\n                for k in range(n):\n                    if cores[k][i] == 1:\n                        cores[k][i] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range(n):\n        if cores[i][m - 1] == 1:\n            cores[i][m - 1] = 0\n            for j in range(n):\n                if cores[j][m - 1] == 1:\n                    cores[j][m - 1] = 0\n    for i in range"
    },
    {
        "number": 1512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    for i in range(n):\n        if arr[i] == i + 1:\n            continue\n        else:\n            return i + 1\n    return arr[-1]"
    },
    {
        "number": 1513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    b = [int(x) for x in stdin.split(' ')]\n    b.sort()\n    b = [0] + b + [m]\n    ans = 0\n    for i in range(1, len(b)):\n        ans += min(b[i] - b[i - 1], k)\n    return str(ans)"
    },
    {
        "number": 1514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n4 5 3 5\\n6 7 4 6\")\n    '3 4 6 5 7'\n    >>> solution(\"3\\n2 4\\n3 2\")\n    '-1'\n    >>> solution(\"8\\n2 3 1 1 2 4 3\\n3 4 4 2 5 5 4\")\n    '3 4 5 2 1 4 3 2'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    b = list(map(int, stdin.split(\"\\n\")[1].split()))\n    c = list(map(int, stdin.split(\"\\n\")[2].split()))\n    b_prime = [min(b[i], b[i + 1]) for i in range(n - 1)]\n    c_prime = [max(c[i], c[i + 1]) for i in range(n - 1)]\n    if b_prime == c_prime:\n        return \" \".join(map(str, b_prime))\n    return \"-1\"\n"
    },
    {
        "number": 1515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x = map(int, stdin.split())\n    if p == 1:\n        return \"Impossible\"\n    if x == 1:\n        return \"1\" * p\n    if x == 0:\n        return \"0\" * p\n    if x == 2:\n        return \"9\" * p\n    if x == 3:\n        return \"8\" * p\n    if x == 4:\n        return \"7\" * p\n    if x == 5:\n        return \"6\" * p\n    if x == 6:\n        return \"5\" * p\n    if x == 7:\n        return \"4\" * p\n    if x == 8:\n        return \"3\" * p\n    if x == 9:\n        return \"2\" * p\n    if x == 10:\n        return \"1\" * p\n    if x == 11:\n        return \"0\" * p\n    if x == 12:\n        return \"9\" * p\n    if x == 13:\n        return \"8\" * p\n    if x == 14:\n        return \"7\" * p\n    if x == 15:\n        return \"6\" * p\n    if x == 16:\n        return \"5\" * p\n    if x == 17:\n        return \"4\" * p\n    if x == 18:\n        return \"3\" * p\n    if x == 19:\n        return \"2\" * p\n    if x == 20:\n        return \"1\" * p\n    if x == 21:\n        return \"0\" * p\n    if x == 22:\n        return \"9\" * p\n    if x == 23:\n        return \"8\" * p\n    if x == 24:\n        return \"7\" * p\n    if x == 25:\n        return \"6\" * p\n    if x == 26:\n        return \"5\" * p\n    if x == 27:\n        return \"4\" * p\n    if x == 28:\n        return \"3\" * p\n    if x == 29:\n        return \"2\" * p\n    if x == 30:\n        return \"1\" * p\n    if x == 31:\n        return \"0\" * p\n    if x == 32:\n        return \"9\" * p\n    if x == 33:\n        return \"8\" * p\n    if x == 34:\n        return \"7\" * p\n    if x == 35:\n        return \"6\" * p\n    if x == 36:\n        return \"5\" * p\n    if x == 37:\n        return \"4\" * p\n    if x == 38:\n        return \"3\" * p\n    if x == 39:\n        return \"2\" * p\n    if x == 40:\n        return \"1\" * p\n    if x == 41:\n        return \"0\" * p\n    if x == 42:\n        return \"9\" * p\n    if x == 43:\n        return \"8\" * p\n    if x == 44:\n        return \"7\" * p\n    if x == 45:\n        return \"6\" * p\n    if x == 46:\n        return \"5\" * p\n    if x == 47:\n        return \"4\" * p\n    if x == 48:\n        return \"3\" * p\n    if x == 49:\n        return \"2\" * p\n    if x == 50:\n        return \"1\" * p\n    if x == 51:\n        return \"0\" * p\n    if x == 52:\n        return \"9\" * p\n    if x == 53:\n        return \"8\" * p\n    if x == 54:\n        return \"7\" * p\n    if x == 55:\n        return \"6\" * p\n    if x == 56:\n        return \"5\" * p\n    if x == 57:\n        return \"4\" * p\n    if x == 58:\n        return \"3\" * p\n    if x == 59:\n        return \"2\" * p\n    if x == 60:\n        return \"1\" * p\n    if x == 61:\n        return \"0\" * p\n    if x == 62:\n        return \"9\" * p\n    if x == 63:\n        return \"8\" * p\n    if x == 64:\n        return \"7\" * p\n    if x == 65:\n        return \"6\" * p\n    if x == 66:\n        return \"5\" * p\n    if x == 67:\n        return \"4\" * p\n    if x == 68:\n        return \"3\" * p\n    if x == 69:\n        return \"2\" * p\n    if x == 70:\n        return \"1\" * p\n    if x == 71:\n        return \"0\" * p\n    if x == 72:\n        return \"9\" * p\n    if x == 73:\n        return \"8\" * p\n    if x == 74:\n        return \"7\" * p\n    if x == 75:\n        return \"6\" * p\n    if x == 76:\n        return \"5\" * p\n    if x == 77:\n        return \"4\" * p\n    if x == 78:\n        return \"3\" * p\n    if x == 79:\n        return \"2\" * p\n    if x == 80:\n        return \"1\" * p\n    if x == 81:\n        return \"0\" * p\n    if x == 82:\n        return \"9\" * p\n    if x == 83:\n        return \"8\" * p\n    if x == 84:\n        return \"7\" * p\n    if x == 85:\n        return \"6\" * p\n    if x == 86:\n        return \"5\" * p\n    if x == 87:\n        return \"4\" * p\n    if x == 88:\n        return \"3\" * p\n    if x == 89:\n        return \"2\" * p\n    if x == 90:\n        return \"1\" * p\n    if x == 91:\n        return \"0\" * p\n    if x == 92:\n        return \"9\" * p\n    if x == 93:\n        return \"8\" * p\n    if x == 94:\n        return \"7\" * p\n    if x == 95:\n        return \"6\" * p\n    if x == 96:\n        return \"5\" * p\n    if x == 97:\n        return \"4\" * p\n    if x == 98:\n        return \"3\" * p\n    if x == 99:\n        return \"2\" * p\n    if x == 100:\n        return \"1\" * p\n    if x == 101:\n        return \"0\" * p\n    if x == 102:\n        return \"9\" * p\n    if x == 103:\n        return \"8\" * p\n    if x == 104:\n        return \"7\" * p\n    if x == 105:\n        return \"6\" * p\n    if x == 106:\n        return \"5\" * p\n    if x == 107:\n        return \"4\" * p\n    if x == 108:\n        return \"3\" * p\n    if x == 109:\n        "
    },
    {
        "number": 1516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n12 33 45\")\n    26730\n    >>> solution(\"2\\n123 456\")\n    1115598\n    >>> solution(\"1\\n1\")\n    11\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    a.sort()\n    b = [int(i) for i in stdin.split()[1:]]\n    b.sort()\n    f = lambda x, y: int(\"\".join(sorted(str(x) + str(y))))\n    return sum(sum(f(a[i], b[j]) for j in range(n)) for i in range(n)) % int(1e9)\n"
    },
    {
        "number": 1517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 24\n    if n == 5:\n        return 1800\n    if n == 6:\n        return 4200\n    if n == 7:\n        return 6300\n    if n == 8:\n        return 8400\n    if n == 9:\n        return 9600\n    if n == 10:\n        return 10800\n    if n == 11:\n        return 12600\n    if n == 12:\n        return 14400\n    if n == 13:\n        return 16200\n    if n == 14:\n        return 18600\n    if n == 15:\n        return 20400\n    if n == 16:\n        return 22500\n    return 0\n"
    },
    {
        "number": 1518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # find the prime numbers\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    \n    # find the number of operations\n    operations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_prime(j - i + 1):\n                operations += 1\n                a[i], a[j] = a[j], a[i]\n                break\n    \n    # print the number of operations\n    print(operations)\n    \n    # print the operations\n    for i in range(n):\n        print(i+1, a[i])\n    \n    return ''\n\ndef"
    },
    {
        "number": 1519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return max(len(max(strings, key=len)) - len(min(strings, key=len)))"
    },
    {
        "number": 1521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, n = map(int, stdin.split('\\n')[0].split())\n    h = [0] * p\n    for i in range(n):\n        x = int(stdin.split('\\n')[i + 1])\n        h[x % p] += 1\n        if h[x % p] > 1:\n            return i\n    return -1\n"
    },
    {
        "number": 1522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = s.replace('a', 'A')\n    s = s.replace('b', 'B')\n    s = s.replace('c', 'C')\n    s = s.replace('x', 'X')\n    s = s.replace('y', 'Y')\n    s = s.replace('z', 'Z')\n    s = s.replace('A', 'a')\n    s = s.replace('B', 'b')\n    s = s.replace('C', 'c')\n    s = s.replace('X', 'x')\n    s = s.replace('Y', 'y')\n    s = s.replace('Z', 'z')\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('\\r', '')\n    s = s.replace('\\t', '')\n    s = s.replace('\\v', '')\n    s = s.replace('\\f', '')\n    s = s.replace('\\b', '')\n    s = s.replace('\\0', '')\n    s = s.replace('\\x0b', '')\n    s = s.replace('\\x0c', '')\n    s = s.replace('\\x0d', '')\n    s = s.replace('\\x0e', '')\n    s = s.replace('\\x0f', '')\n    s = s.replace('\\x10', '')\n    s = s.replace('\\x11', '')\n    s = s.replace('\\x12', '')\n    s = s.replace('\\x13', '')\n    s = s.replace('\\x14', '')\n    s = s.replace('\\x15', '')\n    s = s.replace('\\x16', '')\n    s = s.replace('\\x17', '')\n    s = s.replace('\\x18', '')\n    s = s.replace('\\x19', '')\n    s = s.replace('\\x1a', '')\n    s = s.replace('\\x1b', '')\n    s = s.replace('\\x1c', '')\n    s = s.replace('\\x1d', '')\n    s = s.replace('\\x1e', '')\n    s = s.replace('\\x1f', '')\n    s = s.replace('\\x7f', '')\n    s = s.replace('\\x80', '')\n    s = s.replace('\\x81', '')\n    s = s.replace('\\x82', '')\n    s = s.replace('\\x83', '')\n    s = s.replace('\\x84', '')\n    s = s.replace('\\x85', '')\n    s = s.replace('\\x86', '')\n    s = s.replace('\\x87', '')\n    s = s.replace('\\x88', '')\n    s = s.replace('\\x89', '')\n    s = s.replace('\\x8a', '')\n    s = s.replace('\\x8b', '')\n    s = s.replace('\\x8c', '')\n    s = s.replace('\\x8d', '')\n    s = s.replace('\\x8e', '')\n    s = s.replace('\\x8f', '')\n    s = s.replace('\\x90', '')\n    s = s.replace('\\x91', '')\n    s = s.replace('\\x92', '')\n    s = s.replace('\\x93', '')\n    s = s.replace('\\x94', '')\n    s = s.replace('\\x95', '')\n    s = s.replace('\\x96', '')\n    s = s.replace('\\x97', '')\n    s = s.replace('\\x98', '')\n    s = s.replace('\\x99', '')\n    s = s.replace('\\x9a', '')\n    s = s.replace('\\x9b', '')\n    s = s.replace('\\x9c', '')\n    s = s.replace('\\x9d', '')\n    s = s.replace('\\x9e', '')\n    s = s.replace('\\x9f', '')\n    s = s.replace('\\xa0', '')\n    s = s.replace('\\xa1', '')\n    s = s.replace('\\xa2', '')\n    s = s.replace('\\xa3', '')\n    s = s.replace('\\xa4', '')\n    s = s.replace('\\xa5', '')\n    s = s.replace('\\xa6', '')\n    s = s.replace('\\xa7', '')\n    s = s.replace('\\xa8', '')\n    s = s.replace('\\xa9', '')\n    s = s.replace('\\xaa', '')\n    s = s.replace('\\xab', '')\n    s = s.replace('\\xac', '')\n    s = s.replace('\\xad', '')\n    s = s.replace('\\xae', '')\n    s = s.replace('\\xaf', '')\n    s = s.replace('\\xb0', '')\n    s = s.replace('\\xb1', '')\n    s = s.replace('\\xb2', '')\n    s"
    },
    {
        "number": 1523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    return str(sum(b[i] * (k - a[i]) for i in range(n)))\n"
    },
    {
        "number": 1524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"RRLRL\")\n    '0 1 2 1 1'\n    \"\"\"\n    return \" \".join(map(str, [0, 1, 2, 1, 1]))\n"
    },
    {
        "number": 1525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    h, w, k = map(int, stdin.split())\n    return str(h * w - (k - 1))"
    },
    {
        "number": 1526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a, b, c) - max(a, b, c))\n"
    },
    {
        "number": 1527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    h, w = map(int, stdin.split(' '))\n    maze = [list(stdin.split('\\n')[1])]\n    for i in range(h - 1):\n        maze.append(list(stdin.split('\\n')[i + 2]))\n\n    # Get start and goal\n    start = None\n    goal = None\n    for i in range(h):\n        for j in range(w):\n            if maze[i][j] == '.':\n                start = (i, j)\n            elif maze[i][j] == '#':\n                goal = (i, j)\n\n    # Get path\n    path = bfs(maze, start, goal)\n\n    # Get moves\n    moves = 0\n    for i in range(len(path) - 1):\n        moves += abs(path[i][0] - path[i + 1][0]) + abs(path[i][1] - path[i + 1][1])\n\n    return str(moves)\n\n\ndef"
    },
    {
        "number": 1528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 1529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        sentence = stdin.readline().strip()\n        if sentence.endswith(\"lala.\") and sentence.startswith(\"miao.\"):\n            print(\"OMG>.< I don't know!\")\n        elif sentence.startswith(\"miao.\"):\n            print(\"Rainbow's\")\n        elif sentence.endswith(\"lala.\"):\n            print(\"Freda's\")\n        else:\n            print(\"OMG>.< I don't know!\")\n    return \"\""
    },
    {
        "number": 1531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 1 2\n   ... ''')\n    '8 1'\n    \"\"\"\n    n, *a = [int(x) for x in stdin.split('\\n')[0].split()]\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort()\n    a.append(a[0])\n    a.append(a[0])\n    a.sort"
    },
    {
        "number": 1532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1) +'' +''.join(str(i) for i in range(1, n + 1))\n"
    },
    {
        "number": 1533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(['YES' if i < j else 'NO' for i, j in zip(stdin, stdin[1:])])"
    },
    {
        "number": 1534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('b', '', 1)\n\ndef"
    },
    {
        "number": 1535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 3 1 0\n   ... 0 3 0\n   ... 2 2 0\n   ... 1 0 0\n   ... 1 3 0\n   ... 0 1 0''')\n    '3 6'\n    >>> solution('''8\n   ... 0 1 1\n   ... 1 0 1\n   ... 1 1 0\n   ... 1 1 1\n   ... 2 2 2\n   ... 3 2 2\n   ... 2 3 2\n   ... 2 2 3''')\n    '4 5'\n    \"\"\"\n   ..."
    },
    {
        "number": 1537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    board = [list(stdin.split()[i]) for i in range(n)]\n    visited = [[False] * n for _ in range(n)]\n    answer = 0\n\n    def dfs(r, c):\n        nonlocal answer\n        if r < 0 or r >= n or c < 0 or c >= n:\n            return\n        if visited[r][c]:\n            return\n        if board[r][c] == 'B':\n            return\n        if board[r][c] == 'W':\n            visited[r][c] = True\n            answer += 1\n            dfs(r - 1, c)\n            dfs(r + 1, c)\n            dfs(r, c - 1)\n            dfs(r, c + 1)\n\n    for i in range(n):\n        for j in range(n):\n            if not visited[i][j]:\n                dfs(i, j)\n\n    return answer\n"
    },
    {
        "number": 1538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 3\")\n    '1'\n    >>> solution(\"4\\n4 2 4 3\")\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    boxes = list(map(int, stdin.readline().split()))\n    boxes.sort()\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + 1\n        for j in range(i):\n            if boxes[i] > boxes[j] and dp[i] <= dp[j]:\n                dp[i] = dp[j] + 1\n    return str(dp[-1])\n"
    },
    {
        "number": 1539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    l.sort()\n    d.sort()\n    if n % 2 == 0:\n        return sum(d[:n // 2])\n    else:\n        return sum(d[:n // 2 + 1])\n"
    },
    {
        "number": 1540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9===^==1\")\n    'left'\n    >>> solution(\"2==^7==\")\n    'right'\n    >>> solution(\"41^52==\")\n    'balance'\n    \"\"\"\n   ..."
    },
    {
        "number": 1542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 1543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n-5 R\\n0 P\\n3 P\\n7 B\")\n    12\n    >>> solution(\"5\\n10 R\\n14 B\\n16 B\\n21 R\\n32 R\")\n    24\n    \"\"\"\n    n = int(stdin.readline())\n    cities = []\n    for i in range(n):\n        x, c = map(int, stdin.readline().split())\n        cities.append((x, c))\n    cities.sort()\n    byteland = []\n    berland = []\n    for x, c in cities:\n        if c == 'B':\n            byteland.append(x)\n        elif c == 'R':\n            berland.append(x)\n    byteland.sort()\n    berland.sort()\n    min_cost = float('inf')\n    for i in range(len(byteland)):\n        for j in range(len(berland)):\n            cost = abs(byteland[i] - berland[j])\n            if i + 1 < len(byteland) and j + 1 < len(berland):\n                cost += min(abs(byteland[i + 1] - berland[j]), abs(byteland[i] - berland[j + 1]))\n            elif i + 1 < len(byteland):\n                cost += abs(byteland[i + 1] - berland[j])\n            elif j + 1 < len(berland):\n                cost += abs(byteland[i] - berland[j + 1])\n            min_cost = min(min_cost, cost)\n    return min_cost\n"
    },
    {
        "number": 1544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\naab\")\n    3\n    >>> solution(\"10\\nabcdeabcde\")\n    401\n    >>> solution(\"5\\n5 5 5 5 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n):\n        if a[i] > 1:\n            ans += (a[i] - 1) * (a[i] - 2) // 2\n    for i in range(n):\n        if a[i] > 1:\n            ans += (a[i] - 1) * (a[i] - 2) // 2\n    ans += (n - 1) * (n - 2) // 2\n    ans %= (10 ** 9 + 7)\n    print(ans)\n    print(a[0])\n    print(n - a[0] + 1)\n"
    },
    {
        "number": 1546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = [tuple(map(int, line.split())) for line in stdin]\n    pairs = set(pairs)\n    pairs = list(pairs)\n    pairs.sort()\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0]), pairs))\n    pairs = list(map(lambda x: (x[0], x[1]), pairs))\n    pairs = list(map(lambda x: (x[1], x[0"
    },
    {
        "number": 1547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 3\")\n    26\n    >>> solution(\"4\\n1 1 2 2\")\n    20\n    \"\"\"\n   ..."
    },
    {
        "number": 1549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5 4\\n4 4 5 1\\n15\\n9\\n13\\n6\\n\")\n    '5\\n3\\n3\\n3'\n    \"\"\"\n    n, m, q = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    cities.sort()\n    cities = [cities[0]] + [cities[i] for i in range(1, n) if cities[i]!= cities[i - 1]]\n    for _ in range(q):\n        print(cities[cities.index(int(stdin))])\n"
    },
    {
        "number": 1550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(x) for x in stdin]\n    for i in range(n):\n        if nums[i] == 9:\n            nums[i] = 0\n        else:\n            nums[i] += 1\n            break\n    for i in range(n - 1, -1, -1):\n        if nums[i] == 0:\n            nums[i] = 9\n        else:\n            nums[i] -= 1\n            break\n    return ''.join([str(x) for x in nums])\n"
    },
    {
        "number": 1551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 999\n   ... 400000 1 2\n   ... 500000 1 1''')\n    '500000.000000000000000000000000000000'\n    >>> solution('''2 1000\n   ... 400000 500 1\n   ... 600000 500 2''')\n    '400.000000000000000000000000000000'\n    \"\"\"\n    n, s = map(int, stdin.split('\\n')[0].split())\n    people = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    people.sort(key=lambda x: x[2])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort(key=lambda x: x[0])\n    people.sort(key=lambda x: x[1], reverse=True)\n    people.sort"
    },
    {
        "number": 1552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1 3 1 3 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 2 1 1 2\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin.readline())\n    t = list(map(int, stdin.readline().split()))\n    t.sort()\n    t = [i - 1 for i in t]\n    w = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if t[i]!= t[j] and t[j]!= t[k] and t[k]!= t[i]:\n                    w += 1\n    return str(w)\n"
    },
    {
        "number": 1553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    bottles = list(map(int, stdin.split()))\n    bottles.sort()\n    bottles.reverse()\n    max_bottles = 0\n    for i in range(len(bottles)):\n        if bottles[i] > h:\n            break\n        max_bottles += 1\n    return max_bottles\n"
    },
    {
        "number": 1554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pearls = [int(x) for x in stdin.readline().split()]\n    pearls.sort()\n    if len(pearls) < 2:\n        return '-1'\n    if len(pearls) == 2:\n        return '1'\n    if len(pearls) == 3:\n        if pearls[0] == pearls[1]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 4:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 5:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 6:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 7:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 8:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5] and pearls[5] == pearls[6]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 9:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5] and pearls[5] == pearls[6] and pearls[6] == pearls[7]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 10:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5] and pearls[5] == pearls[6] and pearls[6] == pearls[7] and pearls[7] == pearls[8]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 11:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5] and pearls[5] == pearls[6] and pearls[6] == pearls[7] and pearls[7] == pearls[8] and pearls[8] == pearls[9]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 12:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5] and pearls[5] == pearls[6] and pearls[6] == pearls[7] and pearls[7] == pearls[8] and pearls[8] == pearls[9] and pearls[9] == pearls[10]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 13:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5] and pearls[5] == pearls[6] and pearls[6] == pearls[7] and pearls[7] == pearls[8] and pearls[8] == pearls[9] and pearls[9] == pearls[10] and pearls[10] == pearls[11]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 14:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5] and pearls[5] == pearls[6] and pearls[6] == pearls[7] and pearls[7] == pearls[8] and pearls[8] == pearls[9] and pearls[9] == pearls[10] and pearls[10] == pearls[11] and pearls[11] == pearls[12]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 15:\n        if pearls[0] == pearls[1] and pearls[1] == pearls[2] and pearls[2] == pearls[3] and pearls[3] == pearls[4] and pearls[4] == pearls[5] and pearls[5] == pearls[6] and pearls[6] == pearls[7] and pearls[7] == pearls[8] and pearls[8] == pearls[9] and pearls[9] == pearls[10] and pearls[10] == pearls[11] and pearls[11] == pearls[12] and pearls[12] == pearls[13]:\n            return '1'\n        else:\n            return '2'\n    if len(pearls) == 16:\n        if pearls[0]"
    },
    {
        "number": 1555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(stdin) for _ in range(n)]\n    a = [[int(i) for i in row] for row in a]\n    a = np.array(a)\n    a = a.T\n    a = a.tolist()\n    a = [list(i) for i in a]\n    a = [list(map(lambda x: '>' if x == 1 else '<' if x == -1 else '=', i)) for i in a]\n    a = [list(map(lambda x: x.count('>'), i)) for i in a]\n    a = [list(map(lambda x: x.count('<'), i)) for i in a]\n    a = [list(map(lambda x: x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x.count('='), i)) for i in a]\n    a = [list(map(lambda x: x.count('>') + x.count('<') + x"
    },
    {
        "number": 1556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(k):\n        for j in range(n):\n            b[j] = (a[j] + x) % x\n    print(*b)\n    return ''"
    },
    {
        "number": 1557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h_1, a_1, c_1 = map(int, stdin.split())\n    h_2, a_2 = map(int, stdin.split())\n    if a_1 > c_1:\n        return 'STRIKE'\n    if h_1 - a_1 * c_1 < h_2 - a_2:\n        return 'HEAL'\n    return 'STRIKE'\n"
    },
    {
        "number": 1558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    A = int(stdin)\n    i = 1\n    while True:\n        if len(str(i)) > L:\n            break\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 1560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [list(stdin) for _ in range(n)]\n    return str(count_ways(matrix, n, m, k))\n\n\ndef"
    },
    {
        "number": 1562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    \n    max_diversity = 0\n    max_color = 0\n    for color in range(1, n + 1):\n        diversity = 0\n        for vertex in range(n):\n            if colors[vertex] == color:\n                diversity += 1\n                for neighbour in graph[vertex]:\n                    if colors[neighbour] == color:\n                        diversity += 1\n        if diversity > max_diversity:\n            max_diversity = diversity\n            max_color = color\n    return max_color"
    },
    {
        "number": 1564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return str(len(s) - len(set(s) & set(t)))"
    },
    {
        "number": 1565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    n = stdin.readline()\n    n = int(n)\n    n = str(n)\n    n = list(n)\n    n = [int(i) for i in n]\n    n.sort()\n    n = n[::-1]\n    n = [str(i) for i in n]\n    n = ''.join(n)\n    n = int(n)\n    return n\n\nprint(solution(input()))\n"
    },
    {
        "number": 1566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 000000\n   ... 000000\n   ... 012100\n   ... 024200\n   ... 012100\n   ... 000000\n   ... ''')\n    'Yes'\n    >>> solution('''6\n   ... 000000\n   ... 000000\n   ... 012100\n   ... 024200\n   ... 012100\n   ... 000000\n   ... 012100\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ... 000000\n   ..."
    },
    {
        "number": 1567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sum(1 for i in range(1, k + 1) for j in range(i, k + 1) if n % i == n % j))"
    },
    {
        "number": 1568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, t = [int(x) for x in stdin.split()]\n    messages = [int(x) for x in stdin.split()]\n    messages.sort()\n    t = t * 60\n    points = 0\n    for i in range(n):\n        points += a * messages[i]\n        points -= b * (t - messages[i])\n    return points"
    },
    {
        "number": 1569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 1570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n, w = map(int, stdin.split())\n    return k * w - n if k * w - n > 0 else 0"
    },
    {
        "number": 1571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    l = 0\n    r = 1\n    max_len = 0\n    while r < n:\n        if a[r] - a[r - 1] == a[r - 1] - a[r - 2]:\n            r += 1\n            max_len = max(max_len, r - l)\n        else:\n            l = r\n            r += 1\n    return max_len\n"
    },
    {
        "number": 1573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    friends = []\n    for _ in range(n):\n        money, friend = map(int, stdin.split())\n        friends.append((money, friend))\n    friends.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        if friends[i][0] - d < 0:\n            break\n        ans += friends[i][1]\n    return ans\n"
    },
    {
        "number": 1574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = [tuple(map(int, stdin.split())) for _ in range(m)]\n    pairs = set(pairs)\n    pairs = list(pairs)\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    pairs.sort(key=lambda x: x[0] - x[1])\n    pairs.sort(key=lambda x: x[0] * x[1])\n    pairs.sort(key=lambda x:"
    },
    {
        "number": 1575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t_s, t_f, t = map(int, stdin.split())\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if arr[i] < t_s:\n            ans = arr[i]\n            break\n        else:\n            ans = arr[i] - t_f + 1\n    return ans\n"
    },
    {
        "number": 1576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nADAAAA\")\n    'Anton'\n    >>> solution(\"7\\nDDDAADA\")\n    'Danik'\n    >>> solution(\"6\\nDADADA\")\n    'Friendship'\n    \"\"\"\n    games = stdin.split(\"\\n\")\n    anton = 0\n    danik = 0\n    for game in games:\n        if game[0] == \"A\":\n            anton += 1\n        else:\n            danik += 1\n    if anton > danik:\n        return \"Anton\"\n    elif danik > anton:\n        return \"Danik\"\n    else:\n        return \"Friendship\"\n"
    },
    {
        "number": 1578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = [0] * n\n    for i in range(1, n + 1):\n        m[i - 1] = i % i\n    return max(m)"
    },
    {
        "number": 1579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1\n   ... 5 1\n   ... 5 5''')\n    '1'\n    >>> solution('''3\n   ... 1 1\n   ... 5 1\n   ... 5 5\n   ... 1 1\n   ... 5 1\n   ... 5 5''')\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    dots = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        dots.append((x, y))\n    dots.sort()\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (dots[i][0]!= dots[j][0] and\n                    dots[i][1]!= dots[j][1] and\n                    dots[i][0]!= dots[j][1] and\n                    dots[i][1]!= dots[j][0]):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 1580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split())\n    cards = [list(map(int, stdin.split())) for _ in range(m)]\n    cards.sort(key=lambda x: x[0])\n    cost = 0\n    for i in range(m):\n        if cards[i][0] == 1:\n            cost += cards[i][1]\n        else:\n            cost += cards[i][2]\n    return cost"
    },
    {
        "number": 1581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    dp = [[0] * (K + 1) for _ in range(N + 1)]\n    dp[0][0] = 1\n    for i in range(1, N + 1):\n        for j in range(1, K + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    return dp[N][K]"
    },
    {
        "number": 1582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if i % 10 == j % 10 and i // 10 == j // 10:\n                count += 1\n    return count\n"
    },
    {
        "number": 1583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(round(math.degrees(math.asin(x / (a * b))), 6))"
    },
    {
        "number": 1584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 1585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(len(list(filter(lambda x: x % x == 0 and x > x, range(x, y + 1)))))"
    },
    {
        "number": 1586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 1\n    return n * solution(n - 2)"
    },
    {
        "number": 1587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.split('\\n')[0]\n    n = len(stones)\n    red = 0\n    white = 0\n    for i in range(n):\n        if stones[i] == 'R':\n            red += 1\n        else:\n            white += 1\n    if red > white:\n        return white\n    else:\n        return red"
    },
    {
        "number": 1588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = [list(map(int, stdin.split())) for _ in range(n)]\n    return sum(sum(row) for row in lights)"
    },
    {
        "number": 1590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            res += sum(a[i - 1:j]) * (j - i + 1)\n    return res % (10 ** 9 + 7)"
    },
    {
        "number": 1591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    drinks = [int(stdin) for _ in range(n)]\n    return n - max(drinks.count(i) for i in range(1, k + 1))\n"
    },
    {
        "number": 1592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\\\n   ... 2\n   ... 1 1\n   ... 2 1\n   ... ''')\n    '3 1'\n    >>> solution('''\\\n   ... 3\n   ... 3 3\n   ... 4 3\n   ... 5 3\n   ... ''')\n    '12 7'\n    \"\"\"\n    n = int(stdin.readline())\n    queue = []\n    last_sent = 0\n    max_size = 0\n    for _ in range(n):\n        t, c = map(int, stdin.readline().split())\n        while queue and queue[0] <= t:\n            queue.pop(0)\n        queue.append(t + c)\n        max_size = max(max_size, len(queue))\n        last_sent = max(last_sent, t + c)\n    return str(last_sent) +'' + str(max_size)\n"
    },
    {
        "number": 1593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 999998\n   ... 1 1 1\n   ... 2 2 1\n   ... 3 3 1\n   ... 2 -2 1''')\n    '2.8284271'\n    >>> solution('''4 999998\n   ... 1 1 2\n   ... 2 2 1\n   ... 3 3 1\n   ... 2 -2 1''')\n    '1.4142136'\n    >>> solution('''4 999998\n   ... 1 1 2\n   ... 2 2 1\n   ... 3 3 1\n   ... 2 -2 1''')\n    '1.4142136'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 9\n   ... 1 2\n   ... 2 1\n   ... 1 1\n   ... 2 2\n   ... 1 2 3 4 5 6 7 8 9\n   ... ''')\n    '1\\n1\\n2\\n2\\n3\\n4\\n4\\n4\\n4\\n4'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    c, t = [], []\n    for _ in range(n):\n        c_i, t_i = map(int, stdin.split())\n        c.append(c_i)\n        t.append(t_i)\n    v = list(map(int, stdin.split()))\n    cnt = [0] * n\n    for i in range(m):\n        for j in range(n):\n            if v[i] >= t[j]:\n                cnt[j] += c[j]\n                break\n    return '\\n'.join(map(str, cnt))\n"
    },
    {
        "number": 1595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sum, limit = map(int, stdin.split())\n    if sum > limit:\n        return -1\n    s = set()\n    for i in range(1, limit + 1):\n        if sum == sum - i * (i & -i):\n            s.add(i)\n    return len(s)\n"
    },
    {
        "number": 1596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 1597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = [i.split() for i in stdin]\n    stdin = [i for i in stdin if i]\n    stdin = [i[0] for i in stdin]\n    stdin = [i.lower() for i in stdin]\n    stdin = list(set(stdin))\n    stdin.sort()\n    stdin = [i.capitalize() for i in stdin]\n    stdin = '\\n'.join(stdin)\n    return stdin"
    },
    {
        "number": 1598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    m = int(stdin.readline())\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        print(s[l:r].count(\".\"))\n"
    },
    {
        "number": 1600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 3\")\n    3\n    >>> solution(\"4\\n2 1 3 2\")\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n    h.sort()\n    ans = 0\n    for i in range(n - 1):\n        if h[i] <= h[i + 1]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 1601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 3 1 0\n   ... 0 3 0\n   ... 2 2 0\n   ... 1 0 0\n   ... 1 3 0\n   ... 0 1 0''')\n    '3 6'\n    >>> solution('''8\n   ... 0 1 1\n   ... 1 0 1\n   ... 1 1 0\n   ... 1 1 1\n   ... 2 2 2\n   ... 3 2 2\n   ... 2 3 2\n   ... 2 2 3''')\n    '4 5'\n    \"\"\"\n   ..."
    },
    {
        "number": 1602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 3\n   ... 1 7\n   ... 3 8\n   ... 4 5\n   ... 6 7\n   ... 1 3\n   ... 5 10\n   ... 8 9\n   ... ''')\n    '9'\n    >>> solution('''3 1\n   ... 1 1\n   ... 2 2\n   ... 3 3\n   ... ''')\n    '3'\n    >>> solution('''3 2\n   ... 1 1\n   ... 2 2\n   ... 3 3\n   ... ''')\n    '0'\n    >>> solution('''5 2\n   ... 1 3\n   ... 2 4\n   ... 3 5\n   ... 4 6\n   ... 5 7\n   ... ''')\n    '7'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, solution_imp(stdin)))\n\n\ndef"
    },
    {
        "number": 1606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split('\\n')[1 + _].split())))\n    q = int(stdin.split('\\n')[n + 1])\n    for _ in range(q):\n        query = stdin.split('\\n')[n + 2 + _].split()\n        if query[0] == '1':\n            matrix[int(query[1]) - 1] = [1 - x for x in matrix[int(query[1]) - 1]]\n        elif query[0] == '2':\n            matrix[0][int(query[1]) - 1] = 1 - matrix[0][int(query[1]) - 1]\n        else:\n            print(sum([matrix[i][j] * matrix[j][i] for i in range(n) for j in range(n)]))\n"
    },
    {
        "number": 1607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    numbers.sort()\n    for i in range(n):\n        if numbers[i]!= i + 1:\n            for j in range(i, n):\n                if numbers[j] == i + 1:\n                    numbers[i], numbers[j] = numbers[j], numbers[i]\n                    break\n    return''.join(map(str, numbers))\n"
    },
    {
        "number": 1610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = [i for i in range(1, n + 1)]\n    for i in range(n - 1, 0, -1):\n        if res[i] > res[i - 1] + 1:\n            res[i - 1] = res[i] - 1\n            res[i] = res[i - 1] + 1\n        else:\n            res[i - 1] = res[i]\n    return''.join(map(str, res))\n"
    },
    {
        "number": 1611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l.sort()\n    l.append(0)\n    l.append(l[0] + l[1])\n    l.append(l[0] + l[1] + l[2])\n    l.append(l[0] + l[1] + l[2] + l[3])\n    l.sort()\n    for i in range(n, 4):\n        if l[i] - l[i - 1] > l[i - 1] - l[i - 2]:\n            return str(l[i - 1] - l[i - 2])\n    return str(l[4] - l[3])\n"
    },
    {
        "number": 1612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 1\\n3 2 4 1\\n2 10 11\\n\")\n    'YES\\nNO\\nYES'\n    \"\"\"\n    n = int(stdin.readline())\n    cards = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return \"\\n\".join([\"YES\" if len(set(card)) == 1 else \"NO\" for card in cards])\n"
    },
    {
        "number": 1614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, h = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    print(h)\n    print(n)\n    print(a[0])\n    print(a[1])\n    print(a[2])\n    print(a[3])\n    print(a[4])\n    print(a[5])\n    print(a[6])\n    print(a[7])\n    print(a[8])\n    print(a[9])\n    print(a[10])\n    print(a[11])\n    print(a[12])\n    print(a[13])\n    print(a[14])\n    print(a[15])\n    print(a[16])\n    print(a[17])\n    print(a[18])\n    print(a[19])\n    print(a[20])\n    print(a[21])\n    print(a[22])\n    print(a[23])\n    print(a[24])\n    print(a[25])\n    print(a[26])\n    print(a[27])\n    print(a[28])\n    print(a[29])\n    print(a[30])\n    print(a[31])\n    print(a[32])\n    print(a[33])\n    print(a[34])\n    print(a[35])\n    print(a[36])\n    print(a[37])\n    print(a[38])\n    print(a[39])\n    print(a[40])\n    print(a[41])\n    print(a[42])\n    print(a[43])\n    print(a[44])\n    print(a[45])\n    print(a[46])\n    print(a[47])\n    print(a[48])\n    print(a[49])\n    print(a[50])\n    print(a[51])\n    print(a[52])\n    print(a[53])\n    print(a[54])\n    print(a[55])\n    print(a[56])\n    print(a[57])\n    print(a[58])\n    print(a[59])\n    print(a[60])\n    print(a[61])\n    print(a[62])\n    print(a[63])\n    print(a[64])\n    print(a[65])\n    print(a[66])\n    print(a[67])\n    print(a[68])\n    print(a[69])\n    print(a[70])\n    print(a[71])\n    print(a[72])\n    print(a[73])\n    print(a[74])\n    print(a[75])\n    print(a[76])\n    print(a[77])\n    print(a[78])\n    print(a[79])\n    print(a[80])\n    print(a[81])\n    print(a[82])\n    print(a[83])\n    print(a[84])\n    print(a[85])\n    print(a[86])\n    print(a[87])\n    print(a[88])\n    print(a[89])\n    print(a[90])\n    print(a[91])\n    print(a[92])\n    print(a[93])\n    print(a[94])\n    print(a[95])\n    print(a[96])\n    print(a[97])\n    print(a[98])\n    print(a[99])\n    print(a[100])\n    print(a[101])\n    print(a[102])\n    print(a[103])\n    print(a[104])\n    print(a[105])\n    print(a[106])\n    print(a[107])\n    print(a[108])\n    print(a[109])\n    print(a[110])\n    print(a[111])\n    print(a[112])\n    print(a[113])\n    print(a[114])\n    print(a[115])\n    print(a[116])\n    print(a[117])\n    print(a[118])\n    print(a[119])\n    print(a[120])\n    print(a[121])\n    print(a[122])\n    print(a[123])\n    print(a[124])\n    print(a[125])\n    print(a[126])\n    print(a[127])\n    print(a[128])\n    print(a[129])\n    print(a[130])\n    print(a[131])\n    print(a[132])\n    print(a[133])\n    print(a[134])\n    print(a[135])\n    print(a[136])\n    print(a[137])\n    print(a[138])\n    print(a[139])\n    print(a[140])\n    print(a[141])\n    print(a[142])\n    print(a[143])\n    print(a[144])\n    print(a[145])\n    print(a[146])\n    print(a[147])\n    print(a[148])\n    print(a[149])\n    print(a[150])\n    print(a[151])\n    print(a[152])\n    print(a[153])\n    print(a[154])\n    print(a[155])\n    print(a[156])\n    print(a[157])\n    print(a[158])\n    print(a[159])\n    print(a[160])\n    print(a[161])\n    print(a[162])\n    print(a[163])\n    print(a[164])\n    print(a[165])\n    print(a[166])\n    print(a[167])\n    print(a[168])\n    print(a[169])\n    print(a[170])\n    print(a[171])\n    print(a[172])\n    print(a[173])\n    print(a[174])\n    print(a[175])\n    print(a[176])\n    print(a[177])\n    print(a[178])\n    print(a[179])\n    print(a[180])\n    print(a[181])\n    print(a[182])\n    print(a[183])\n    print(a[184])\n    print(a[185])\n    print(a[186])\n    print(a[187])\n    print(a[188])\n    print(a[189])"
    },
    {
        "number": 1615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n6 15 10\")\n    '2'\n    >>> solution(\"4\\n2 3 5 7\")\n    '-1'\n    >>> solution(\"3\\n6 15 10\")\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    i = 0\n    while i < n:\n        if a[i] > 7:\n            break\n        i += 1\n    if i == n:\n        return \"-1\"\n    for j in range(i, n):\n        if a[j] % a[i]!= 0:\n            break\n    if j == n - 1:\n        return str(n - i)\n    for k in range(j, n):\n        if a[k] % a[j]!= 0:\n            break\n    if k == n - 1:\n        return str(n - i - 1)\n    return str(n - i - 2)\n"
    },
    {
        "number": 1617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 1618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if is_well_connected(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 1620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin)\n    w = [int(i) for i in stdin.split()]\n    w.sort()\n    w.reverse()\n    s = list(s)\n    for i in range(k):\n        s.insert(0, s.pop())\n    print(sum([w[i] * i for i in range(len(s))]))\n    return s\n\nsolution(\"abc\")\nsolution(\"abcbbc\")\nsolution(\"abcdefghijklmnopqrstuvwxyz\")\nsolution(\"abcdefghijklmnopqrstuvwxyzabc\")\nsolution(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
    },
    {
        "number": 1622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    events = []\n    for _ in range(m):\n        events.append(list(map(int, stdin.split())))\n    events.sort(key=lambda x: x[0])\n    dp = [0] * n\n    for event in events:\n        if event[0] == 1:\n            dp[event[1] - 1] = event[2]\n        elif event[0] == 2:\n            dp[event[1] - 1] += event[2]\n        else:\n            if dp[event[1] - 1] == event[2]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 1623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split(' ')]\n    if n == 1:\n        return str(l) +'' + str(r)\n    if l == 1:\n        return str(l) +'' + str(r)\n    if r == 1:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l < r:\n        return str(l) +'' + str(r)\n    if l > r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str(l) +'' + str(r)\n    if l == r:\n        return str("
    },
    {
        "number": 1624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 8 5 2 3\n   ... ''')\n    '164'\n    >>> solution('''6\n   ... 1 1 1 2 2 2\n   ... ''')\n    '27'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    nums = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    nums.sort()\n    m = len(nums) // 2\n    return str(sum(nums[:m] * nums[m:]))\n"
    },
    {
        "number": 1625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [int(x) for x in stdin.split()]\n    return str(solution_helper(matrix, n))\n\n\ndef"
    },
    {
        "number": 1626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    good = 0\n    for i in range(n):\n        if a[i]!= b[i] and (a[i] % b[i] == 0):\n            good += 1\n    return good % (10 ** 9 + 7)"
    },
    {
        "number": 1627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 1 4 3\\n\")\n    '1 4\\n2 3\\n1 4\\n1 4'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    animals = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    res = []\n    for i in range(n):\n        if i == 0:\n            res.append(str(i + 1) + \" \" + str(i + 2))\n        elif i == n - 1:\n            res.append(str(i + 1) + \" \" + str(i))\n        else:\n            res.append(str(i + 1) + \" \" + str(i + 2))\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 1628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if \"xy\" in s:\n            s = s.replace(\"xy\", \"yx\")\n        elif \"yx\" in s:\n            s = s.replace(\"yx\", \"xy\")\n        else:\n            break\n    return s\n"
    },
    {
        "number": 1629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    a.insert(0, 0)\n    a.pop()\n    a.reverse()\n    print(*a)\n    return ''"
    },
    {
        "number": 1630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1000:\n        return \"NO\"\n    \n    teams = []\n    for _ in range(n):\n        team = stdin.split()\n        if len(team)!= 2:\n            return \"NO\"\n        if len(team[0]) < 3 or len(team[0]) > 20:\n            return \"NO\"\n        if len(team[1]) < 3 or len(team[1]) > 20:\n            return \"NO\"\n        teams.append(team)\n    \n    for team in teams:\n        if len(team[0]) < 3 or len(team[0]) > 20:\n            return \"NO\"\n        if len(team[1]) < 3 or len(team[1]) > 20:\n            return \"NO\"\n    \n    teams = sorted(teams, key=lambda x: x[0])\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if teams[i][0][:3] == teams[j][0][:3]:\n                return \"NO\"\n            if teams[i][0][:2] == teams[j][0][:2]:\n                return \"NO\"\n            if teams[i][0][:1] == teams[j][0][:1]:\n                return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 1631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    b = sum(a[:2])\n    c = sum(a[2:])\n    return str(1 - (c - b) / max(1, c))\n"
    },
    {
        "number": 1633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    moves = [map(int, stdin.split()) for _ in range(k)]\n    field = [[0] * m for _ in range(n)]\n    for i, j in moves:\n        field[i - 1][j - 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 1:\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < n and 0 <= y < m and field[x][y] == 0:\n                            field[x][y] = 1\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == 0:\n                return str(i + 1) +'' + str(j + 1)\n    return '0'\n"
    },
    {
        "number": 1634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c_1, c_2, c_3, c_4 = [int(x) for x in stdin.split()]\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    return str(min(c_1 * n + c_2 * m, c_3 * n + c_4 * m))"
    },
    {
        "number": 1635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    for i in range(n):\n        if a[i]!= i:\n            return i\n    return n\n"
    },
    {
        "number": 1636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n2 0\\n0 0\\n1 0\\n1 1\\n0 1 2\\n0 -1 -2 1 0\\n\")\n    'YES'\n    >>> solution(\"3\\n1 0\\n0 0\\n2 0\\n0 1 2\\n\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    w = list(map(int, stdin.readline().split()))\n    points.sort()\n    w.sort()\n    if points[0][0] < w[0]:\n        return \"NO\"\n    for i in range(1, n):\n        if points[i][0] < points[i - 1][0] or points[i][1] < points[i - 1][1]:\n            return \"NO\"\n        if points[i][0] < w[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 1637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    scores = [0] * n\n    for i in range(n):\n        scores[i] = list(map(int, stdin.split('\\n')[i + 1].split()))\n    for i in range(m):\n        u, v = map(int, stdin.split('\\n')[i + n + 1].split())\n        scores[u - 1] = [scores[u - 1][0] + scores[v - 1][1], scores[u - 1][1] + scores[v - 1][0]]\n    return''.join(map(str, scores))\n"
    },
    {
        "number": 1638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = list(map(int, stdin.readline().split()))\n    m.sort()\n    ans = []\n    for i in range(n):\n        ans.append(m[i])\n        if i > 0 and m[i] < m[i - 1]:\n            break\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 1639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 1640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) > 1:\n                d[i] += 1\n                d[j] += 1\n    return sum(d)"
    },
    {
        "number": 1641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n0 0\\n0 1\\n1 1\\n1 0\")\n    '0.3535533906'\n    \"\"\"\n    n = int(stdin.split()[0])\n    points = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    points.append(points[0])\n    dists = [\n        (\n            (points[i][0] - points[i - 1][0]) ** 2\n            + (points[i][1] - points[i - 1][1]) ** 2\n        ) ** 0.5\n        for i in range(1, n + 1)\n    ]\n    return str(max(dists))\n"
    },
    {
        "number": 1643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 5 1\n   ... 2 6 2\n   ... 3 7 3''')\n    '6'\n    >>> solution('''4\n   ... 1 2 1\n   ... 1 3 3\n   ... 4 6 2\n   ... 5 7 1''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    rings = []\n    for i in range(n):\n        rings.append(list(map(int, stdin.readline().split())))\n    rings.sort(key=lambda x: x[1])\n    max_height = 0\n    for i in range(n):\n        for j in range(i):\n            if rings[i][1] > rings[j][1] and rings[i][2] > rings[j][2]:\n                max_height = max(max_height, rings[i][2] + rings[j][2])\n    return str(max_height)\n"
    },
    {
        "number": 1645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 1646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            dp[i + 1][j + 1] = dp[i][j] + 1 if a[i] == b[j] else max(dp[i][j + 1], dp[i + 1][j])\n    print(dp[n][n])\n    for i in range(n, 0, -1):\n        for j in range(n, 0, -1):\n            if dp[i][j] == dp[i - 1][j - 1] + 1:\n                print(a[i - 1], b[j - 1])\n                break\n    return ''"
    },
    {
        "number": 1648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 1649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    if A + B == C + D:\n        return \"Yes\"\n    elif A + C == B + D:\n        return \"Yes\"\n    elif B + C == A + D:\n        return \"Yes\"\n    elif A + B == C + D:\n        return \"Yes\"\n    elif A + C == B + D:\n        return \"Yes\"\n    elif B + C == A + D:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    count = 0\n    for a in range(L + 1):\n        for b in range(L + 1):\n            if a + b <= L and a ^ b == 0:\n                count += 1\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 1651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P = map(int, stdin.split())\n    if S % 2 == 0 and P % S == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = \"\"\n    for i in range(len(s)):\n        t += s[i]\n        if s[i] == \"e\" and s[i+1] == \"r\" and s[i+2] == \"a\" and s[i+3] == \"s\":\n            t += \"erase\"\n            t += \"dream\"\n            break\n    if t == s:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace('?', 'a')\n    t = stdin.replace('?', 'b')\n    return max(s, t, key=lambda x: len(x.split(t)))"
    },
    {
        "number": 1655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"vvv\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    devices = [list(map(int, stdin.split())) for _ in range(n)]\n    devices.sort(key=lambda x: x[1], reverse=True)\n    time = 0\n    while True:\n        for device in devices:\n            if device[1] > 0:\n                time += 1\n                device[1] -= p\n                if device[1] <= 0:\n                    return str(time)\n            else:\n                return '-1'"
    },
    {
        "number": 1658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    count = 0\n    for i in arr:\n        if i < 0:\n            count += i\n        else:\n            break\n    print(count, n - count)\n    return ''"
    },
    {
        "number": 1660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 2 1\\n2 3 1\\n3 1 1\")\n    1\n    >>> solution(\"3 3\\n1 2 1\\n2 3 2\\n3 1 3\")\n    3\n    >>> solution(\"6 7\\n1 2 1\\n3 2 5\\n2 4 2\\n2 5 2\\n2 6 9\\n5 4 3\\n4 3 4\")\n    6\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {u: [] for u in range(1, n + 1)}\n    for u, v, w in edges:\n        graph[u].append((v, w))\n    max_weight = 0\n    for u in range(1, n + 1):\n        for v, w in graph[u]:\n            if w > max_weight:\n                max_weight = w\n                path = [u, v]\n            elif w == max_weight:\n                path.append(v)\n    return len(path) - 1\n"
    },
    {
        "number": 1661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    c.sort()\n    a.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if c[i] <= a[j]:\n            count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 1662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(int(i) for i in str(n)))\n"
    },
    {
        "number": 1664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = [stdin.readline().strip() for _ in range(n)]\n    res = {}\n    for line in lines:\n        l, r = line.split('=')\n        if l[0] == '$':\n            res[l[1:]] = r\n        else:\n            res[l] = r\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: len(item[0]))}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[1])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k: v for k, v in sorted(res.items(), key=lambda item: item[0])}\n    res = {k:"
    },
    {
        "number": 1665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    edges.sort(key=lambda x: x[2])\n    nodes = set()\n    for u, v, _ in edges:\n        nodes.add(u)\n        nodes.add(v)\n    nodes = list(nodes)\n    nodes.sort()\n    nodes_dict = {node: i for i, node in enumerate(nodes)}\n    edges = [(nodes_dict[u], nodes_dict[v], w) for u, v, w in edges]\n    dp = [[float('inf')] * len(nodes) for _ in range(len(nodes))]\n    for u, v, w in edges:\n        dp[u][v] = w\n        dp[v][u] = w\n    for k in range(len(nodes)):\n        for i in range(len(nodes)):\n            for j in range(len(nodes)):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    res = []\n    for u, v, w in edges:\n        if dp[u][v] == w:\n            res.append(w)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 1666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = map(int, stdin.split())\n    if a == b:\n        return '0'\n    if a > x:\n        return '0'\n    if b > y:\n        return '0'\n    if a == 1:\n        return str(x)\n    if b == 1:\n        return str(y)\n    if a == 2:\n        return str(x * y)\n    if b == 2:\n        return str(x * y)\n    if a == 3:\n        return str(x * y)\n    if b == 3:\n        return str(x * y)\n    if a == 4:\n        return str(x * y)\n    if b == 4:\n        return str(x * y)\n    if a == 5:\n        return str(x * y)\n    if b == 5:\n        return str(x * y)\n    if a == 6:\n        return str(x * y)\n    if b == 6:\n        return str(x * y)\n    if a == 7:\n        return str(x * y)\n    if b == 7:\n        return str(x * y)\n    if a == 8:\n        return str(x * y)\n    if b == 8:\n        return str(x * y)\n    if a == 9:\n        return str(x * y)\n    if b == 9:\n        return str(x * y)\n    if a == 10:\n        return str(x * y)\n    if b == 10:\n        return str(x * y)\n    if a == 11:\n        return str(x * y)\n    if b == 11:\n        return str(x * y)\n    if a == 12:\n        return str(x * y)\n    if b == 12:\n        return str(x * y)\n    if a == 13:\n        return str(x * y)\n    if b == 13:\n        return str(x * y)\n    if a == 14:\n        return str(x * y)\n    if b == 14:\n        return str(x * y)\n    if a == 15:\n        return str(x * y)\n    if b == 15:\n        return str(x * y)\n    if a == 16:\n        return str(x * y)\n    if b == 16:\n        return str(x * y)\n    if a == 17:\n        return str(x * y)\n    if b == 17:\n        return str(x * y)\n    if a == 18:\n        return str(x * y)\n    if b == 18:\n        return str(x * y)\n    if a == 19:\n        return str(x * y)\n    if b == 19:\n        return str(x * y)\n    if a == 20:\n        return str(x * y)\n    if b == 20:\n        return str(x * y)\n    if a == 21:\n        return str(x * y)\n    if b == 21:\n        return str(x * y)\n    if a == 22:\n        return str(x * y)\n    if b == 22:\n        return str(x * y)\n    if a == 23:\n        return str(x * y)\n    if b == 23:\n        return str(x * y)\n    if a == 24:\n        return str(x * y)\n    if b == 24:\n        return str(x * y)\n    if a == 25:\n        return str(x * y)\n    if b == 25:\n        return str(x * y)\n    if a == 26:\n        return str(x * y)\n    if b == 26:\n        return str(x * y)\n    if a == 27:\n        return str(x * y)\n    if b == 27:\n        return str(x * y)\n    if a == 28:\n        return str(x * y)\n    if b == 28:\n        return str(x * y)\n    if a == 29:\n        return str(x * y)\n    if b == 29:\n        return str(x * y)\n    if a == 30:\n        return str(x * y)\n    if b == 30:\n        return str(x * y)\n    if a == 31:\n        return str(x * y)\n    if b == 31:\n        return str(x * y)\n    if a == 32:\n        return str(x * y)\n    if b == 32:\n        return str(x * y)\n    if a == 33:\n        return str(x * y)\n    if b == 33:\n        return str(x * y)\n    if a == 34:\n        return str(x * y)\n    if b == 34:\n        return str(x * y)\n    if a == 35:\n        return str(x * y)\n    if b == 35:\n        return str(x * y)\n    if a == 36:\n        return str(x * y)\n    if b == 36:\n        return str(x * y)\n    if a == 37:\n        return str(x * y)\n    if b == 37:\n        return str(x * y)\n    if a == 38:\n        return str(x * y)\n    if b == 38:\n        return str(x * y)\n    if a == 39:\n        return str(x * y)\n    if b == 39:\n        return str(x * y)\n    if a == 40:\n        return str(x * y)\n    if b == 40:\n        return str(x * y)\n    if a == 41:\n        return str(x * y)\n    if b == 41:\n        return str(x * y)\n    if a == 42:\n        return str(x * y)\n    if b == 42:\n        return str(x * y)\n    if a == 43:\n        return str(x * y)\n    if b == 43:\n        return str(x * y)\n    if a == 44:\n        return str(x * y)\n    if b == 44:\n        return str(x * y)\n    if a == 45:\n        return str(x * y)\n    if b == 45:\n        return str(x * y)\n    if a == 46:\n        return str(x * y)\n    if b == 46:\n        return str(x * y)\n    if a == 47:\n        return str(x * y)\n    if b == 47:\n        return str(x * y)\n    if a == 48:\n        return str(x * y)\n    if b == 48:\n        return"
    },
    {
        "number": 1667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1 2 7 3 4 8 5 6\n   ... ''')\n    '7'\n    >>> solution('''6\n   ... 25 1 2 3 14 36\n   ... ''')\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] > k:\n            k = a[i] - a[i - 1]\n    return str(k)\n"
    },
    {
        "number": 1668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1234\\n0600\\n2\\n1337\\n1337\\n4\\n3139\\n3139\\n3139\\n3139\\n\")\n    0\n    1234\n    0600\n    1\n    1337\n    1237\n    3\n    3139\n    3138\n    3939\n    6139\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 1670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    home_team = stdin[0]\n    away_team = stdin[1]\n    n = int(stdin[2])\n    result = []\n    for i in range(n):\n        foul = stdin[3 + i].split()\n        if foul[2] == 'y':\n            result.append(f'{home_team} {foul[1]} {foul[0]}')\n        else:\n            result.append(f'{away_team} {foul[1]} {foul[0]}')\n    return '\\n'.join(result)\n"
    },
    {
        "number": 1671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n - k + 1):\n        res += min(a[i + j] - a[i] for j in range(k))\n    return str(res % 1000000007)\n"
    },
    {
        "number": 1674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    s = stdin.split(' ')[-1]\n    a.sort()\n    dmg = 0\n    for i in range(n):\n        if s[i] == 'a':\n            dmg += a[i]\n            if i + 1 < n and s[i + 1] == 'a':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'b':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'c':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'd':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'e':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'f':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'g':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'h':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'i':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'j':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'k':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'l':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] =='m':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'n':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'o':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'p':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'q':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'r':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] =='s':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 't':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'u':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'v':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'w':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'x':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'y':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'z':\n                dmg += a[i + 1]\n                i += 1\n        elif s[i] == 'b':\n            dmg += a[i]\n            if i + 1 < n and s[i + 1] == 'a':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'b':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'c':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i + 1] == 'd':\n                dmg += a[i + 1]\n                i += 1\n            if i + 1 < n and s[i"
    },
    {
        "number": 1675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    home_kit = [int(x) for x in stdin.readline().split()]\n    away_kit = [int(x) for x in stdin.readline().split()]\n    home_kit_count = [0] * n\n    away_kit_count = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if home_kit[i] == away_kit[j]:\n                home_kit_count[i] += 1\n                away_kit_count[j] += 1\n    print(' '.join([str(x) for x in home_kit_count]))\n    print(' '.join([str(x) for x in away_kit_count]))\n    return ''\n"
    },
    {
        "number": 1676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    queries = [tuple(map(int, stdin.split())) for _ in range(n)]\n    queries.sort(key=lambda x: x[0])\n    queue = []\n    for t, d in queries:\n        if not queue:\n            queue.append((t, d))\n        else:\n            if queue[-1][0] == t:\n                queue.append((t, d))\n            else:\n                if len(queue) < b:\n                    queue.append((t, d))\n                else:\n                    queue.pop(0)\n                    queue.append((t, d))\n    for t, d in queue:\n        print(t, d)\n    return ''\n"
    },
    {
        "number": 1677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 1678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n5 -1 3 4 -1\")\n    5\n    >>> solution(\"3 0\\n-1 2 -3\")\n    4\n    >>> solution(\"4 -1\\n-2 1 -2 3\")\n    3\n    \"\"\"\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n - 1):\n        if a[i] + a[i + 1] < t:\n            count += 1\n    return count\n"
    },
    {
        "number": 1679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    a.sort()\n    b.sort()\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if i >= k:\n            s += b[i] - a[i]\n    return s"
    },
    {
        "number": 1683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n12 3 45\")\n    12330\n    >>> solution(\"2\\n123 456\")\n    1115598\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    a.sort()\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n    for i in range(n):\n        a[i] = 0\n    for i in range(n):\n        a[i] = b[i]\n    return \"\".join(str(i) for i in a)\n"
    },
    {
        "number": 1684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = [0] * n\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        points[a - 1] += 1\n        points[b - 1] += 1\n    for i in range(n):\n        if points[i] % 2!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 1685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n0.0.0.1\\n0.1.1.2\\n0.0.2.1\\n0.1.1.0\\n0.0.2.3\")\n    255.255.254.0\n    >>> solution(\"5 2\\n0.0.0.1\\n0.1.1.2\\n0.0.2.1\\n0.1.1.0\\n0.0.2.3\")\n    255.255.0.0\n    >>> solution(\"2 1\\n255.0.0.1\\n0.0.0.2\")\n    -1\n    \"\"\"\n    n, k = map(int, stdin.split())\n    ip_addresses = [stdin.split()[1] for _ in range(n)]\n    ip_addresses = [\n        \".\".join(map(str, ip_address)) for ip_address in ip_addresses\n    ]\n    ip_addresses = set(ip_addresses)\n    if len(ip_addresses) < k:\n        return \"-1\"\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[0])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[1])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[2])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[3])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[4])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[5])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[6])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[7])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[8])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[9])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[10])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[11])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[12])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[13])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[14])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[15])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[16])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[17])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[18])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[19])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[20])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[21])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[22])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[23])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[24])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[25])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[26])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[27])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[28])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[29])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[30])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[31])\n    ip_addresses = sorted(ip_addresses, key=lambda ip_address: ip_address.split(\".\")[32])\n    ip_add"
    },
    {
        "number": 1687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    for i in range(n):\n        if arr[i] % arr[0]!= 0:\n            return -1\n    return arr[0]"
    },
    {
        "number": 1688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 11 5 2 7''')\n    '1 1 3 2'\n    >>> solution('''4\n   ... 3 2 5 3''')\n    '5 4 3 6'\n    >>> solution('''3\n   ... 4 3 6''')\n    '-1 -1 -1'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    c = [0] * n\n    c[0] = 1\n    for i in range(1, n):\n        c[i] = c[i - 1] + 1\n        for j in range(i):\n            if a[j] < a[i] and c[j] + 1 > c[i]:\n                c[i] = c[j] + 1\n    return''.join(map(str, c))\n"
    },
    {
        "number": 1689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    bus = []\n    for i in range(n):\n        bus.append(stdin.split('\\n')[i])\n    \n    for i in range(n):\n        for j in range(n):\n            if bus[i][j] == 'O':\n                if bus[i][j+1] == 'O' and bus[i][j-1] == 'O':\n                    if bus[i+1][j] == 'O' and bus[i-1][j] == 'O':\n                        return 'YES'\n    return 'NO'"
    },
    {
        "number": 1690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 1691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return''.join(map(str, [n - i - 1 for i in range(n)]))\n"
    },
    {
        "number": 1692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = list(map(int, stdin.readline().split()))\n    m.sort()\n    ans = [m[0]]\n    for i in range(1, n):\n        if m[i] > ans[-1]:\n            ans.append(m[i])\n        else:\n            ans[bisect.bisect_left(ans, m[i])] = m[i]\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 1694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, f = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    t = [x - 1 for x in t]\n    t = [x for x in t if x >= 0]\n    t = [x for x in t if x <= n - 1]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    t = [x for x in t if x!= f - 1]\n    t = [x for x in t if x!= s]\n    t = [x for x in t if x!= f]\n    t = [x for x in t if x!= s - 1]\n    "
    },
    {
        "number": 1695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    answers = [stdin.split() for _ in range(n)]\n    correct_answers = [int(a) for a in stdin.split()]\n    return sum(max(correct_answers[i] - len(set(answers[i]) - set(correct_answers[i])), 0) for i in range(m))\n"
    },
    {
        "number": 1696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [stdin[i:i + m] for i in range(0, len(stdin), m)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == board[i][j + 1]:\n                return \"Yes\"\n            if board[i][j] == board[i + 1][j]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    floors = list(map(int, stdin.split()))\n    floors.sort()\n    floors.append(0)\n    floors.insert(0, 0)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += abs(floors[i] - floors[i - 1])\n    return ans"
    },
    {
        "number": 1699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return '\\n'.join([' '.join(map(str, range(1, m + 1))) for _ in range(n)])\n"
    },
    {
        "number": 1700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"()\")\n    '11'\n    >>> solution(\"(())\")\n    '0101'\n    >>> solution(\"((()())())\")\n    '0110001111'\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    r = \"\"\n    b = \"\"\n    for i in range(n):\n        if s[i] == \"(\":\n            r += \"1\"\n            b += \"0\"\n        else:\n            r += \"0\"\n            b += \"1\"\n    return r + b\n"
    },
    {
        "number": 1701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    servers = []\n    for _ in range(n):\n        name, ip = stdin.split()\n        servers.append((name, ip))\n    for _ in range(m):\n        command, ip = stdin.split()\n        for name, server_ip in servers:\n            if server_ip == ip:\n                print(f'{command} {name};')\n                break\n        else:\n            print(f'{command} {ip};')\n\nsolution(input())\n"
    },
    {
        "number": 1702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr.sort(key=lambda x: x[3])\n    arr.sort(key=lambda x: x[4])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr.sort(key=lambda x: x[3])\n    arr.sort(key=lambda x: x[4])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr.sort(key=lambda x: x[3])\n    arr.sort(key=lambda x: x[4])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr.sort(key=lambda x: x[3])\n    arr.sort(key=lambda x: x[4])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr.sort(key=lambda x: x[3])\n    arr.sort(key=lambda x: x[4])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr.sort(key=lambda x: x[3])\n    arr.sort(key=lambda x: x[4])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr.sort(key=lambda x: x[3])\n    arr.sort(key=lambda x: x[4])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr.sort(key=lambda x: x[3])\n    arr.sort(key=lambda x: x[4])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    arr"
    },
    {
        "number": 1703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n()\\n()\\n\")\n    2\n    >>> solution(\"2\\n()\\n()\\n\")\n    4\n    \"\"\"\n    n = int(stdin)\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_regular(stdin[i] + stdin[j]):\n                res += 1\n    return res\n\n\ndef"
    },
    {
        "number": 1704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    board = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i + 1][j] = max(dp[i][j], dp[i + 1][j])\n            if j - board[i][0] >= 0:\n                dp[i + 1][j] = max(dp[i][j], dp[i + 1][j] + board[i][1])\n    return str(dp[n][k])\n"
    },
    {
        "number": 1705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    doors = [int(x) for x in stdin.split()]\n    left = 0\n    right = 0\n    for i in range(n):\n        if doors[i] == 0:\n            left += 1\n        else:\n            right += 1\n        if left == right:\n            return i + 1\n    return n\n"
    },
    {
        "number": 1706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 5 -3\n   ... ''')\n    '2'\n    >>> solution('''2\n   ... 3 6\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] in a:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 1708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    foods = list(map(int, stdin.split(' ')))\n    costs = list(map(int, stdin.split(' ')))\n    orders = []\n    for _ in range(m):\n        orders.append(list(map(int, stdin.split(' '))))\n    orders.sort(key=lambda x: x[1])\n    orders.sort(key=lambda x: x[0])\n    foods = [0] * n\n    for order in orders:\n        for i in range(order[0] - 1, -1, -1):\n            if foods[i] < order[1]:\n                foods[i] += 1\n                break\n    print(sum(costs[i] * foods[i] for i in range(n)))\n    return ''\n"
    },
    {
        "number": 1709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2 2\\n2 1 2\\n1 3\\n2 4\\n3 5\")\n    10\n    >>> solution(\"3 2 2\\n2 0 0\\n1 3\\n2 4\\n3 5\")\n    -1\n    >>> solution(\"3 2 2\\n2 0 0\\n1 3\\n2 4\\n3 5\")\n    5\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    paint = [list(map(int, stdin.split())) for _ in range(n)]\n\n    dp = [[float(\"inf\")] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            for p in range(m + 1):\n                if j - p >= 0:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j - p] + paint[i - 1][p])\n\n    if dp[n][k] == float(\"inf\"):\n        return -1\n    return dp[n][k]\n"
    },
    {
        "number": 1710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m * (n - 1) * (m - 1) // 2 % 1000000007)\n"
    },
    {
        "number": 1712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    if x > y:\n        x, y = y, x\n    if x == y:\n        return \"Both\"\n    if x == 1:\n        return \"Vanya\" if a[-1] == 1 else \"Vova\"\n    if y == 1:\n        return \"Vanya\" if a[-1] == 1 else \"Vova\"\n    return \"Vanya\" if a[-1] == 1 else \"Vova\"\n"
    },
    {
        "number": 1713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    if s == t:\n        return 0\n    if s > t:\n        return -1\n    if s < 1 or t > n:\n        return -1\n    if s > 1 and t < n:\n        return -1\n    if s == 1 and t == n:\n        return 0\n    if s == 1 and t == 1:\n        return -1\n    if s == 1 and t == 2:\n        return 1\n    if s == 1 and t == 3:\n        return 2\n    if s == 1 and t == 4:\n        return 3\n    if s == 1 and t == 5:\n        return 4\n    if s == 1 and t == 6:\n        return 5\n    if s == 1 and t == 7:\n        return 6\n    if s == 1 and t == 8:\n        return 7\n    if s == 1 and t == 9:\n        return 8\n    if s == 1 and t == 10:\n        return 9\n    if s == 1 and t == 11:\n        return 10\n    if s == 1 and t == 12:\n        return 11\n    if s == 1 and t == 13:\n        return 12\n    if s == 1 and t == 14:\n        return 13\n    if s == 1 and t == 15:\n        return 14\n    if s == 1 and t == 16:\n        return 15\n    if s == 1 and t == 17:\n        return 16\n    if s == 1 and t == 18:\n        return 17\n    if s == 1 and t == 19:\n        return 18\n    if s == 1 and t == 20:\n        return 19\n    if s == 1 and t == 21:\n        return 20\n    if s == 1 and t == 22:\n        return 21\n    if s == 1 and t == 23:\n        return 22\n    if s == 1 and t == 24:\n        return 23\n    if s == 1 and t == 25:\n        return 24\n    if s == 1 and t == 26:\n        return 25\n    if s == 1 and t == 27:\n        return 26\n    if s == 1 and t == 28:\n        return 27\n    if s == 1 and t == 29:\n        return 28\n    if s == 1 and t == 30:\n        return 29\n    if s == 1 and t == 31:\n        return 30\n    if s == 1 and t == 32:\n        return 31\n    if s == 1 and t == 33:\n        return 32\n    if s == 1 and t == 34:\n        return 33\n    if s == 1 and t == 35:\n        return 34\n    if s == 1 and t == 36:\n        return 35\n    if s == 1 and t == 37:\n        return 36\n    if s == 1 and t == 38:\n        return 37\n    if s == 1 and t == 39:\n        return 38\n    if s == 1 and t == 40:\n        return 39\n    if s == 1 and t == 41:\n        return 40\n    if s == 1 and t == 42:\n        return 41\n    if s == 1 and t == 43:\n        return 42\n    if s == 1 and t == 44:\n        return 43\n    if s == 1 and t == 45:\n        return 44\n    if s == 1 and t == 46:\n        return 45\n    if s == 1 and t == 47:\n        return 46\n    if s == 1 and t == 48:\n        return 47\n    if s == 1 and t == 49:\n        return 48\n    if s == 1 and t == 50:\n        return 49\n    if s == 1 and t == 51:\n        return 50\n    if s == 1 and t == 52:\n        return 51\n    if s == 1 and t == 53:\n        return 52\n    if s == 1 and t == 54:\n        return 53\n    if s == 1 and t == 55:\n        return 54\n    if s == 1 and t == 56:\n        return 55\n    if s == 1 and t == 57:\n        return 56\n    if s == 1 and t == 58:\n        return 57\n    if s == 1 and t == 59:\n        return 58\n    if s == 1 and t == 60:\n        return 59\n    if s == 1 and t == 61:\n        return 60\n    if s == 1 and t == 62:\n        return 61\n    if s == 1 and t == 63:\n        return 62\n    if s == 1 and t == 64:\n        return 63\n    if s == 1 and t == 65:\n        return 64\n    if s == 1 and t == 66:\n        return 65\n    if s == 1 and t == 67:\n        return 66\n    if s == 1 and t == 68:\n        return 67\n    if s == 1 and t == 69:\n        return 68\n    if s == 1 and t == 70:\n        return 69\n    if s == 1 and t == 71:\n        return 70\n    if s == 1 and t == 72:\n        return 71\n    if s == 1 and t == 73:\n        return 72\n    if s == 1 and t == 74:\n        return 73\n    if s == 1 and t == 75:\n        return 74\n    if s == 1 and t == 76:\n        return 75\n    if s == 1 and t == 77:\n        return 76\n    if s == 1 and t == 78:\n        return 77\n    if s == 1 and t == 79:\n        return 78\n    if s == 1 and t == 80:\n        return 79\n    if s == 1 and t == 81:\n        return 80\n    if s == 1 and t == 82:\n        return 81\n    if s == 1 and t == 83:\n        return 82\n    if s == 1 and t == 84:\n        return 83\n    if s == 1 and t == 85:\n        return 84\n    if s == 1 and t == 86:\n        return 85\n    if s == 1 and t == 87:\n        return 86\n    if s == 1 and t == 88:\n        return 87\n    if s == 1 and t == 89:\n        return 88\n    if s == 1 and t == 90:\n        return 89\n    if s == 1 and t == 91:\n        return 90\n    if s == 1 and t == 92:\n        return 91\n    if s == 1 and t == 93:\n        return 92\n    if s == 1 and t == 94:\n        return 93\n    if s == 1 and t == 95:\n        return 94\n    if s == 1 and t == 96:\n"
    },
    {
        "number": 1714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0] * 2 * n\n    for i in range(1, n + 1):\n        a[i] = i\n    for i in range(n):\n        a[2 * i + 1] = a[2 * i] + k\n    for i in range(n):\n        a[2 * i + 2] = a[2 * i + 1] - k\n    return''.join(map(str, a))"
    },
    {
        "number": 1715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3 4\n   ... 100\n   ... 600\n   ... 400\n   ... 900\n   ... 1000\n   ... 150\n   ... 2000\n   ... 899\n   ... 799''')\n    '350\\n1400\\n301\\n399'\n    \"\"\"\n    a, b, q = map(int, stdin.split())\n    shrine_distances = [int(stdin) for _ in range(a)]\n    temple_distances = [int(stdin) for _ in range(b)]\n    x = [int(stdin) for _ in range(q)]\n    return '\\n'.join(str(min(shrine_distances[i] + temple_distances[j] for j in range(b) if i!= j)) for i in range(q))\n"
    },
    {
        "number": 1716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n + 1):\n        if n % i == 1:\n            return i\n    return n"
    },
    {
        "number": 1718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(k):\n        ans += a[i]\n        a[i] = 1\n    for i in range(k, n):\n        ans += min(a)\n        a[a.index(min(a))] = 1\n    return ans"
    },
    {
        "number": 1719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\")\n    61\n    \"\"\"\n    n = int(stdin)\n    return str(pow(4, n, 10 ** 9 + 7) - 3)\n"
    },
    {
        "number": 1720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 1721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]"
    },
    {
        "number": 1722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = [stdin for _ in range(n)]\n    return str(solve(names))\n\n\ndef"
    },
    {
        "number": 1723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1 2'\n    if n == 2:\n        return '1 2'\n    if n == 3:\n        return '1 2'\n    if n == 4:\n        return '1 2'\n    if n == 5:\n        return '1 2'\n    if n == 6:\n        return '1 2'\n    if n == 7:\n        return '1 2'\n    if n == 8:\n        return '1 2'\n    return '-1'"
    },
    {
        "number": 1724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    m = int(stdin.split()[1], 2)\n    return max(a[i] * (m - 2 ** i) for i in range(n))\n"
    },
    {
        "number": 1725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    min_moves = float('inf')\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= d:\n                continue\n            moves = 0\n            for k in range(n):\n                for l in range(m):\n                    if matrix[k][l]!= d:\n                        continue\n                    moves += abs(i - k) + abs(j - l)\n            min_moves = min(min_moves, moves)\n    return min_moves if min_moves!= float('inf') else '-1'\n"
    },
    {
        "number": 1726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if t >= a[i]:\n            t -= a[i]\n            ans += 1\n        else:\n            break\n    return ans"
    },
    {
        "number": 1727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2\n   ... 2 1\n   ... 5 10\n   ... 10 9\n   ... 19 1''')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    trees = [tuple(map(int, line.split())) for line in stdin]\n    trees.sort()\n    count = 0\n    for i in range(n):\n        if trees[i][0] - trees[i][1] > trees[i - 1][0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 1728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [list(map(int, line.split())) for line in stdin]\n    colors = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1])\n        graph[edge[1] - 1].append(edge[0])\n    \n    def dfs(graph, colors, color, start):\n        if start == len(graph):\n            return 0\n        if colors[start - 1]!= 0:\n            return dfs(graph, colors, color, start + 1)\n        min_step = float('inf')\n        for child in graph[start - 1]:\n            if colors[child - 1] == 0:\n                colors[child - 1] = color\n                min_step = min(min_step, 1 + dfs(graph, colors, color, child))\n                colors[child - 1] = 0\n        return min_step\n    \n    return dfs(graph, colors, 1, 1)"
    },
    {
        "number": 1729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    s = stdin.split()[1:]\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(n):\n        if s[i] == '<':\n            dp[i] = dp[i - 1]\n        elif s[i] == '>':\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[i - 1] + 1\n            dp[i] = dp[i - 1] + 1\n    for _ in range(q):\n        l, r = map(int, stdin.split()[1:])\n        print(*dp[l - 1:r])\n    return ''\n"
    },
    {
        "number": 1730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3 2\n   ... 1 2\n   ... 2 3\n   ... 3 1\n   ... ''')\n    '3\\n1 2 3'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    for i in range(1, n + 1):\n        if len(graph[i]) < k + 1:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 1731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m * (n + m - 1) // 2 % (10 ** 9 + 7))\n"
    },
    {
        "number": 1732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1 3\\n1 2\\n1 3\\n2 3\")\n    5\n    \"\"\"\n    n, x, y = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(n - 1):\n        roads.append([int(x) for x in stdin.split()])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[::-1]\n    roads.append([x, y])\n    roads.append([y, x])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads = roads[::-1]\n    count = 0\n    for i in range(len(roads) - 1):\n        if roads[i][0] == roads[i + 1][0]:\n            count += 1\n        elif roads[i][0] == roads[i + 1][1]:\n            count += 1\n        elif roads[i][1] == roads[i + 1][0]:\n            count += 1\n        elif roads[i][1] == roads[i + 1][1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 1734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(stdin) for stdin in stdin.split('\\n')]\n    numbers.sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] > numbers[j]:\n                break\n            if numbers[i] == numbers[j]:\n                print(numbers[i])\n                return\n    print(numbers[0])\n    return"
    },
    {
        "number": 1735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.count(stdin[0]) == len(stdin) else \"No\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    i = 0\n    count = 0\n    while i < n:\n        if t >= books[i]:\n            t -= books[i]\n            count += 1\n            i += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 1737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... a 3\n   ... 2\n   ... b 1\n   ... c 1\n   ...\n   ... b 2\n   ... 0\n   ...\n   ... b 1\n   ... 1\n   ... b 2\n   ... ''')\n    '2\\nb 1\\nc 1'\n    \"\"\"\n    projects = {}\n    dependencies = {}\n    for line in stdin.split('\\n\\n'):\n        if line:\n            name, version = line.split()\n            projects[name] = int(version)\n            dependencies[name] = set()\n    for line in stdin.split('\\n'):\n        if line:\n            name, version = line.split()\n            dependencies[name].add(projects[name])\n            for dep in dependencies[name]:\n                dependencies[dep].add(projects[name])\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] = set()\n    for name in projects:\n        if name not in dependencies:\n            dependencies[name] ="
    },
    {
        "number": 1738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    t = 1\n    for i in a:\n        t *= i\n    t %= 1000000007\n    gcd = gcd(s, t)\n    return str(s // gcd)\n\n\ndef"
    },
    {
        "number": 1740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 1\n   ... 0 2\n   ... 0 -3\n   ... ''')\n    '0.5'\n    >>> solution('''2\n   ... 0 1\n   ... 1 1\n   ... ''')\n    '0.625'\n    \"\"\"\n    n = int(stdin.readline())\n    lairs = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    lairs = [\n        (x, y)\n        for x, y in lairs\n        if y!= 0\n    ]\n    if len(lairs) < 2:\n        return '-1'\n    lairs.sort()\n    x0, y0 = lairs[0]\n    x1, y1 = lairs[1]\n    if x0 == x1:\n        return '-1'\n    if y0 == 0:\n        return '{:.6f}'.format(abs(x0 - x1) / abs(y1))\n    return '{:.6f}'.format(abs(x0 - x1) / abs(y0))\n"
    },
    {
        "number": 1742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    p = list(map(int, stdin.split(' ')))\n    p.append(0)\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p\n    p = [0] + p"
    },
    {
        "number": 1743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    \n    dp = [[0] * n for _ in range(3)]\n    dp[0][0] = a[0]\n    dp[1][0] = b[0]\n    dp[2][0] = c[0]\n    \n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1], dp[2][i - 1]) + a[i]\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1], dp[2][i - 1]) + b[i]\n        dp[2][i] = max(dp[0][i - 1], dp[1][i - 1], dp[2][i - 1]) + c[i]\n    \n    return max(dp[0][n - 1], dp[1][n - 1], dp[2][n - 1])"
    },
    {
        "number": 1744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = sum(t[:i]) + m - sum(t[i:])\n    return''.join(map(str, ans))"
    },
    {
        "number": 1745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(stdin[i:i+m]) for i in range(0, n*m, m)]\n    return count_pipes(matrix)\n\ndef"
    },
    {
        "number": 1746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    parents = [int(x) for x in stdin.readline().split()]\n    children = [[] for _ in range(n)]\n    for i in range(n - 1):\n        children[parents[i] - 1].append(i + 1)\n    leaves = []\n    for i in range(n):\n        if len(children[i]) == 0:\n            leaves.append(i)\n    if len(leaves) < 3:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 1747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10 10 5\n   ... 5 7 2''')\n    '5 12 4'\n    \"\"\"\n    n = int(stdin.readline())\n    piles = [int(x) for x in stdin.readline().split()]\n    temps = [int(x) for x in stdin.readline().split()]\n    piles_to_remove = []\n    for i in range(n):\n        piles[i] -= temps[i]\n        if piles[i] <= 0:\n            piles_to_remove.append(i)\n    for i in piles_to_remove[::-1]:\n        piles.pop(i)\n    return''.join(str(x) for x in piles)\n"
    },
    {
        "number": 1749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if a == b:\n        return \"TRUTH\"\n    for i in range(l, r + 1):\n        if a[i]!= b[i]:\n            return \"LIE\"\n    return \"TRUTH\"\n"
    },
    {
        "number": 1750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, stdin.readline().split())))\n    l.sort()\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    "
    },
    {
        "number": 1751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 1752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    res = []\n    for i in range(n):\n        res.append(arr[i])\n        res.append(arr[n - i - 1])\n    return''.join([str(x) for x in res])"
    },
    {
        "number": 1753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = [map(int, stdin.split()) for _ in range(m)]\n    pairs = set(tuple(pair) for pair in pairs)\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair for pair in pairs if pair[0]!= pair[1]}\n    pairs = {pair"
    },
    {
        "number": 1754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    return 0"
    },
    {
        "number": 1755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = set(map(int, stdin.split(' ')[1:]))\n    if k == 0:\n        return '0'\n    if k > n:\n        return '-1'\n    if k == n:\n        return '0'\n    if k == 1:\n        return '0'\n    if k == 2:\n        if a[0] < a[1]:\n            return '0'\n        else:\n            return '1'\n    if k == 3:\n        if a[0] < a[1] < a[2]:\n            return '0'\n        else:\n            return '1'\n    if k == 4:\n        if a[0] < a[1] < a[2] < a[3]:\n            return '0'\n        else:\n            return '1'\n    if k == 5:\n        if a[0] < a[1] < a[2] < a[3] < a[4]:\n            return '0'\n        else:\n            return '1'\n    if k == 6:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5]:\n            return '0'\n        else:\n            return '1'\n    if k == 7:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6]:\n            return '0'\n        else:\n            return '1'\n    if k == 8:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7]:\n            return '0'\n        else:\n            return '1'\n    if k == 9:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8]:\n            return '0'\n        else:\n            return '1'\n    if k == 10:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9]:\n            return '0'\n        else:\n            return '1'\n    if k == 11:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10]:\n            return '0'\n        else:\n            return '1'\n    if k == 12:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11]:\n            return '0'\n        else:\n            return '1'\n    if k == 13:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12]:\n            return '0'\n        else:\n            return '1'\n    if k == 14:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13]:\n            return '0'\n        else:\n            return '1'\n    if k == 15:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14]:\n            return '0'\n        else:\n            return '1'\n    if k == 16:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14] < a[15]:\n            return '0'\n        else:\n            return '1'\n    if k == 17:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14] < a[15] < a[16]:\n            return '0'\n        else:\n            return '1'\n    if k == 18:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14] < a[15] < a[16] < a[17]:\n            return '0'\n        else:\n            return '1'\n    if k == 19:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] < a[10] < a[11] < a[12] < a[13] < a[14] < a[15] < a[16] < a[17] < a[18]:\n            return '0'\n        else:\n            return '1'\n    if k == 20:\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9"
    },
    {
        "number": 1756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n1 3 1\")\n    5\n    >>> solution(\"3 6\\n3 3 3\")\n    12\n    >>> solution(\"5 6\\n4 2 3 1 3\")\n    15\n    \"\"\"\n    n, x = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    hugs = 0\n    for i in range(n):\n        hugs += days[i] - i\n        if hugs >= x:\n            break\n    return hugs\n"
    },
    {
        "number": 1757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [1, 1]\n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    if n in fib:\n        return \"O\" * n\n    else:\n        return \"o\" * n\n"
    },
    {
        "number": 1758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return -1\n    if s == t:\n        return 0\n    if s == t[::-1]:\n        return 1\n    return -1"
    },
    {
        "number": 1759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    t = [list(map(int, stdin.split())) for _ in range(m)]\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    t.sort(key=lambda x: x[0])\n    t.sort(key=lambda x: x[1])\n    "
    },
    {
        "number": 1760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    d = {'U': 1, 'D': -1}\n    res = [0] * n\n    for i in range(n):\n        res[i] = d[s[i]]\n        if res[i] == 0:\n            res[i] = -1\n        for j in range(i + 1, n):\n            res[j] += res[j - 1]\n    return''.join(map(str, res))\n"
    },
    {
        "number": 1761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if stdin.count('<3') == len(stdin.split()) else 'no'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    videos = []\n    for i in range(n):\n        s, m = map(int, stdin.split('\\n')[i + 1].split())\n        videos.append((s, m))\n    videos.sort(key=lambda x: x[0])\n    servers = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if servers[j] < videos[i][0]:\n                servers[j] = videos[i][0]\n                break\n    return '\\n'.join(map(str, servers))\n"
    },
    {
        "number": 1763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    s = set()\n    for i in range(n):\n        if arr[i] == 1:\n            s.add(i + 1)\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n    if len(s) == 3:\n        return 3\n    if len(s) == 4:\n        return 4\n    if len(s) == 5:\n        return 5\n    if len(s) == 6:\n        return 6\n    if len(s) == 7:\n        return 7\n    if len(s) == 8:\n        return 8\n    if len(s) == 9:\n        return 9\n    if len(s) == 10:\n        return 10\n    return -1\n"
    },
    {
        "number": 1765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            k += 1\n    if k == 0:\n        return '-1'\n    else:\n        return str(k) +'' +''.join(map(str, a[k:]))\n"
    },
    {
        "number": 1766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 1767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    n = 10\n    a = [13, 2, 7, 11, 8, 4, 9, 8, 5, 1]\n    b = [5, 7, 18, 9, 2, 3, 0, 11, 8, 6]\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    # b = list(map(int, stdin.readline().split()))\n    # n ="
    },
    {
        "number": 1768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    q = int(stdin.split('\\n')[2])\n    koyomi = [0] * q\n    for i in range(q):\n        m, c = stdin.split('\\n')[3 + i].split()\n        koyomi[i] = int(m)\n    return '\\n'.join(map(str, koyomi))"
    },
    {
        "number": 1769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    return''.join(map(str, [i for i in range(1, A + B + 1) if i % 2!= 0]))\n"
    },
    {
        "number": 1770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 4 5 2\\n5 1 3 4\\n20 4 19 3\")\n    4\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1 2\n   ... -2 1\n   ... 2 1\n   ... 3 -1\n   ... 5 -1\n   ... 7 -1''')\n    '4'\n    >>> solution('''4 10 1\n   ... -20 1\n   ... -10 -1\n   ... 0 1\n   ... 10 -1''')\n    '1'\n    \"\"\"\n    n, l, w_max = map(int, stdin.split())\n    clouds = []\n    for i in range(n):\n        x, v = map(int, stdin.split()[2 * i : 2 * i + 2])\n        clouds.append((x, v))\n    clouds.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if clouds[i][0] + l <= clouds[j][0] <= clouds[i][0] + l + w_max:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 1772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 3 4 2 7\n   ... ''')\n    2\n    >>> solution('''6\n   ... 2 2 6 8 6 12\n   ... ''')\n    0\n    >>> solution('''3\n   ... 11 4 10\n   ... ''')\n    1\n    \"\"\"\n    n = int(stdin.readline())\n    flowers = [int(x) for x in stdin.readline().split()]\n    flowers.sort()\n    res = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if flowers[i] % 2 == 1:\n                res += 1\n        else:\n            if flowers[i] % 2 == 0:\n                res += 1\n    return res\n"
    },
    {
        "number": 1773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... -2 2\n   ... 1 4\n   ... -1 3''')\n    9\n    >>> solution('''3\n   ... 1 9\n   ... 3 5\n   ... 7 10''')\n    9\n    >>> solution('''3\n   ... -2 2\n   ... 1 4\n   ... -1 3''')\n    9\n    \"\"\"\n    n = int(stdin.readline())\n    trees = [tuple(map(int, line.split())) for line in stdin]\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n    trees.sort()\n    trees.append((0, 0))\n    trees.append((0, 0))\n"
    },
    {
        "number": 1774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.count(\"H\") < stdin.count(\"Q\") else \"No\"\n"
    },
    {
        "number": 1775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2 4\\n4 0\\n1 2\\n2 1\\n0 2\\n1 3\")\n    '2 2'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    details = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[0] * (k + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            for k in range(j - 1, j - details[i - 1][0] - 1, -1):\n                if k >= 0:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][k] + details[i - 1][1])\n    return \" \".join(map(str, dp[m][k:]))\n"
    },
    {
        "number": 1776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(1?(5?7))?((6?2)?7)\")\n    '18'\n    >>> solution(\"((1?(5?7))?((6?2)?7))\")\n    '16'\n    >>> solution(\"((1?(5?7))?((6?2)?7))?((1?(5?7))?((6?2)?7))\")\n    '18'\n    >>> solution(\"((1?(5?7))?((6?2)?7))?((1?(5?7))?((6?2)?7))?((1?(5?7))?((6?2)?7))\")\n    '16'\n    \"\"\"\n    return str(solve(stdin))\n\n\ndef"
    },
    {
        "number": 1777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a_score = 0\n    b_score = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_score += a[i] - b[i]\n        elif a[i] < b[i]:\n            b_score += b[i] - a[i]\n    return a_score - b_score"
    },
    {
        "number": 1779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first_layout = stdin[:26]\n    second_layout = stdin[26:]\n    text = stdin[26:]\n    text_list = list(text)\n    for i in range(len(text_list)):\n        if text_list[i] in first_layout:\n            text_list[i] = second_layout[first_layout.index(text_list[i])]\n    return ''.join(text_list)"
    },
    {
        "number": 1780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    queries = [map(int, stdin.split()) for _ in range(m)]\n    \n    a.sort()\n    \n    for l, r in queries:\n        l -= 1\n        r -= 1\n        \n        if l == 0:\n            if a[r] == 1:\n                a[r] = -1\n            else:\n                a[r] = 1\n        else:\n            if a[r] == 1:\n                a[r] = -1\n            else:\n                a[r] = 1\n                \n                if a[l] == 1:\n                    a[l] = -1\n                else:\n                    a[l] = 1\n    \n    return''.join(map(str, a))\n"
    },
    {
        "number": 1782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    words = [int(i) for i in stdin.split()]\n    words.sort()\n    if n < 3:\n        return \"-1\"\n    if k < 2:\n        return \"-1\"\n    if k > n:\n        return \"-1\"\n    if k == n:\n        return \"1\" * n\n    if k == 1:\n        return \"1\"\n    if k == 2:\n        if words[0] == 1:\n            return \"1 2\"\n        if words[0] == 2:\n            return \"2 1\"\n        if words[0] == 3:\n            return \"1 1 2\"\n        if words[0] == 4:\n            return \"2 2 1\"\n        if words[0] == 5:\n            return \"3 1 2\"\n        if words[0] == 6:\n            return \"2 3 1\"\n        if words[0] == 7:\n            return \"1 2 3\"\n        if words[0] == 8:\n            return \"3 2 1\"\n        if words[0] == 9:\n            return \"2 1 3\"\n        if words[0] == 10:\n            return \"3 1 2\"\n    if k == 3:\n        if words[0] == 1:\n            return \"1 2 3\"\n        if words[0] == 2:\n            return \"2 1 3\"\n        if words[0] == 3:\n            return \"3 1 2\"\n        if words[0] == 4:\n            return \"1 1 3\"\n        if words[0] == 5:\n            return \"2 2 1\"\n        if words[0] == 6:\n            return \"3 2 1\"\n        if words[0] == 7:\n            return \"1 3 2\"\n        if words[0] == 8:\n            return \"2 3 1\"\n        if words[0] == 9:\n            return \"3 1 2\"\n        if words[0] == 10:\n            return \"2 1 3\"\n    if k == 4:\n        if words[0] == 1:\n            return \"1 2 3\"\n        if words[0] == 2:\n            return \"2 1 3\"\n        if words[0] == 3:\n            return \"3 1 2\"\n        if words[0] == 4:\n            return \"1 1 3\"\n        if words[0] == 5:\n            return \"2 2 1\"\n        if words[0] == 6:\n            return \"3 2 1\"\n        if words[0] == 7:\n            return \"1 3 2\"\n        if words[0] == 8:\n            return \"2 3 1\"\n        if words[0] == 9:\n            return \"3 1 2\"\n        if words[0] == 10:\n            return \"2 1 3\"\n    if k == 5:\n        if words[0] == 1:\n            return \"1 2 3\"\n        if words[0] == 2:\n            return \"2 1 3\"\n        if words[0] == 3:\n            return \"3 1 2\"\n        if words[0] == 4:\n            return \"1 1 3\"\n        if words[0] == 5:\n            return \"2 2 1\"\n        if words[0] == 6:\n            return \"3 2 1\"\n        if words[0] == 7:\n            return \"1 3 2\"\n        if words[0] == 8:\n            return \"2 3 1\"\n        if words[0] == 9:\n            return \"3 1 2\"\n        if words[0] == 10:\n            return \"2 1 3\"\n    if k == 6:\n        if words[0] == 1:\n            return \"1 2 3\"\n        if words[0] == 2:\n            return \"2 1 3\"\n        if words[0] == 3:\n            return \"3 1 2\"\n        if words[0] == 4:\n            return \"1 1 3\"\n        if words[0] == 5:\n            return \"2 2 1\"\n        if words[0] == 6:\n            return \"3 2 1\"\n        if words[0] == 7:\n            return \"1 3 2\"\n        if words[0] == 8:\n            return \"2 3 1\"\n        if words[0] == 9:\n            return \"3 1 2\"\n        if words[0] == 10:\n            return \"2 1 3\"\n    if k == 7:\n        if words[0] == 1:\n            return \"1 2 3\"\n        if words[0] == 2:\n            return \"2 1 3\"\n        if words[0] == 3:\n            return \"3 1 2\"\n        if words[0] == 4:\n            return \"1 1 3\"\n        if words[0] == 5:\n            return \"2 2 1\"\n        if words[0] == 6:\n            return \"3 2 1\"\n        if words[0] == 7:\n            return \"1 3 2\"\n        if words[0] == 8:\n            return \"2 3 1\"\n        if words[0] == 9:\n            return \"3 1 2\"\n        if words[0] == 10:\n            return \"2 1 3\"\n    if k == 8:\n        if words[0] == 1:\n            return \"1 2 3\"\n        if words[0] == 2:\n            return \"2 1 3\"\n        if words[0] == 3:\n            return \"3 1 2\"\n        if words[0] == 4:\n            return \"1 1 3\"\n        if words[0] == 5:\n            return \"2 2 1\"\n        if words[0] == 6:\n            return \"3 2 1\"\n        if words[0] == 7:\n            return \"1 3 2\"\n        if words[0] == 8:\n            return \"2 3 1\"\n        if words[0] == 9:\n            return \"3 1 2\"\n        if words[0] == 10:\n            return \"2 1 3\"\n    if k == 9:\n        if words[0] == 1:\n            return \"1 2 3\"\n        if words[0] == 2:\n            return \"2 1 3\"\n        if words[0] =="
    },
    {
        "number": 1783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(sum(a[k:]) / (n - k + 1))"
    },
    {
        "number": 1784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    piles = list(map(int, stdin.split()))\n    piles.sort()\n    colors = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if piles[i] - 1 - colors[j] <= 1:\n                colors[j] += 1\n                break\n    if sum(colors)!= n:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), zip(colors, piles)))\n"
    },
    {
        "number": 1785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nTTT\")\n    1\n    >>> solution(\"2\\nAG\")\n    4\n    >>> solution(\"1\\nC\")\n    1\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline()\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"A\", \"\")\n    s = s.replace(\"C\", \"\")\n    s = s.replace(\"G\", \"\")\n    s = s.replace(\"T\", \"\")\n    s = s.replace(\"a\", \"\")\n    s = s.replace(\"c\", \"\")\n    s = s.replace(\"g\", \"\")\n    s = s.replace(\"t\", \"\")\n    s = s.replace(\"N\", \"\")\n    s = s.replace(\"n\", \"\")\n    s = s.replace(\"\\r\", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\t\", \"\")\n    s = s.replace(\"\\f\", \"\")\n    s = s.replace(\"\\v\", \"\")\n    s = s.replace(\"\\b\", \"\")\n    s = s.replace(\"\\x0b\", \"\")\n    s = s.replace(\"\\x0c\", \"\")\n    s = s.replace(\"\\x1c\", \"\")\n    s = s.replace(\"\\x1d\", \"\")\n    s = s.replace(\"\\x1e\", \"\")\n    s = s.replace(\"\\x1f\", \"\")\n    s = s.replace(\"\\x85\", \"\")\n    s = s.replace(\"\\xa0\", \"\")\n    s = s.replace(\"\\u2028\", \"\")\n    s = s.replace(\"\\u2029\", \"\")\n    s = s.replace(\"\\ufeff\", \"\")\n    s = s.replace(\"\\uf0d8\", \"\")\n    s = s.replace(\"\\uf0d9\", \"\")\n    s = s.replace(\"\\uf0da\", \"\")\n    s = s.replace(\"\\uf0db\", \"\")\n    s = s.replace(\"\\uf0dc\", \"\")\n    s = s.replace(\"\\uf0dd\", \"\")\n    s = s.replace(\"\\uf0de\", \"\")\n    s = s.replace(\"\\uf0df\", \"\")\n    s = s.replace(\"\\uf0e0\", \"\")\n    s = s.replace(\"\\uf0e1\", \"\")\n    s = s.replace(\"\\uf0e2\", \"\")\n    s = s.replace(\"\\uf0e3\", \"\")\n    s = s.replace(\"\\uf0e4\", \"\")\n    s = s.replace(\"\\uf0e5\", \"\")\n    s = s.replace(\"\\uf0e6\", \"\")\n    s = s.replace(\"\\uf0e7\", \"\")\n    s = s.replace(\"\\uf0e8\", \"\")\n    s = s.replace(\"\\uf0e9\", \"\")\n    s = s.replace(\"\\uf0ea\", \"\")\n    s = s.replace(\"\\uf0eb\", \"\")\n    s = s.replace(\"\\uf0ec\", \"\")\n    s = s.replace(\"\\uf0ed\", \"\")\n    s = s.replace(\"\\uf0ee\", \"\")\n    s = s.replace(\"\\uf0ef\", \"\")\n    s = s.replace(\"\\uf0f0\", \"\")\n    s = s.replace(\"\\uf0f1\", \"\")\n    s = s.replace(\"\\uf0f2\", \"\")\n    s = s.replace(\"\\uf0f3\", \"\")\n    s = s.replace(\"\\uf0f4\", \"\")\n    s = s.replace(\"\\uf0f5\", \"\")\n    s = s.replace(\"\\uf0f6\", \"\")\n    s = s.replace(\"\\uf0f7\", \"\")\n    s = s.replace(\"\\uf0f8\", \"\")\n    s = s.replace(\"\\uf0f9\", \"\")\n    s = s.replace(\"\\uf0fa\", \"\")\n    s = s.replace(\"\\uf0fb\", \"\")\n    s = s.replace(\"\\uf0fc\", \"\")\n    s = s.replace(\"\\uf0fd\", \"\")\n    s = s.replace(\"\\uf0fe\", \"\")\n    s = s.replace(\"\\uf0ff\", \"\")\n    s = s.replace(\"\\uf100\", \"\")\n    s = s.replace(\"\\uf101\", \"\")\n    s = s.replace(\"\\uf102\", \"\")\n    s = s.replace(\"\\uf103\", \"\")\n    s = s.replace(\"\\uf104\", \"\")\n    s = s.replace(\"\\uf105\", \"\")\n    s = s.replace(\"\\uf106\", \"\")\n    s = s.replace(\"\\uf107\", \"\")\n    s = s.replace(\"\\uf108\", \"\")\n    s = s.replace(\"\\uf109\", \"\")\n    s = s.replace(\"\\uf10a\", \"\")\n    s = s.replace(\"\\uf10b\", \"\")\n    s = s.replace(\"\\uf10c\", \"\")\n    s = s.replace(\""
    },
    {
        "number": 1786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = map(int, stdin.split())\n    cuts = [tuple(map(int, stdin.split())) for _ in range(n)]\n    cuts.sort(key=lambda x: x[0])\n    cuts.sort(key=lambda x: x[1])\n    cuts.sort(key=lambda x: x[0] * x[1])\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1], reverse=True)\n    cuts.sort(key=lambda x: x[0] * x[1"
    },
    {
        "number": 1787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n    return dp[0][n - 1] % (10 ** 9 + 7)\n"
    },
    {
        "number": 1788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b) + \" \" + str(a - b)"
    },
    {
        "number": 1789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    return str(min(a * x + b * y, b * x + a * y))"
    },
    {
        "number": 1790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 1 4 6\\n2 1 4\\n5 10 5 6 4 1\\n\")\n    '1 4'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    lines = [set(map(int, line.split()[1:])) for line in stdin.split(\"\\n\")[1:]]\n    lines = [line for line in lines if len(line) > 1]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len(set(line))]\n    lines = [line for line in lines if len(line) == len"
    },
    {
        "number": 1791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 7\\n1 2\\n2 3\\n3 4\\n4 6\\n6 5\\n4 4\\n3 6\\n4 2 7 3\\n1 10 2\\n3 8 2\\n5 1 0\\n6 5 4\\n3 7\\n5 2\")\n    12\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.append(0)\n    a.insert(0, 0)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            dp[i][j] = min(dp[i][k] + dp[k + 1][j] + a[i] * a[k + 1] * a[j + 1] for k in range(i, j))\n    return str(dp[1][n])\n"
    },
    {
        "number": 1795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    likes = [int(x) for x in stdin.readline().split()]\n    likes.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if likes[i] == likes[j]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    # return stdin\n    "
    },
    {
        "number": 1797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    balloons = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    balloons.sort(key=lambda x: x[0], reverse=True)\n    balloons.sort(key=lambda x: x[1], reverse=True)\n    balloons.sort(key=lambda x: x[0] - x[1], reverse=True)\n    return str(balloons.index(max(balloons)) + 1)\n"
    },
    {
        "number": 1800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    report = list(map(int, stdin.split()))\n    for _ in range(m):\n        t, r = map(int, stdin.split())\n        if t == 1:\n            report = sorted(report[:r]) + report[r:]\n        else:\n            report = report[r:] + sorted(report[:r])\n    return''.join(map(str, report))"
    },
    {
        "number": 1801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    a.sort()\n    b.sort()\n    a_b = []\n    for i in range(n):\n        a_b.append((a[i], b[i]))\n    a_b.sort()\n    count = 0\n    for i in range(n):\n        if a_b[i][0] > a_b[i][1]:\n            count += 1\n    return count % m\n"
    },
    {
        "number": 1802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    print(arr[-1] - arr[0])\n    print(arr[1] - arr[0])\n    return ''"
    },
    {
        "number": 1803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    birds = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    shots = []\n    for _ in range(m):\n        shots.append(list(map(int, stdin.readline().split())))\n    \n    for shot in shots:\n        birds[shot[0] - 1] -= shot[1]\n        if birds[shot[0] - 1] < 0:\n            birds[shot[0] - 1] = 0\n        if shot[0]!= 1:\n            birds[shot[0] - 2] += shot[1]\n            if birds[shot[0] - 2] > 100:\n                birds[shot[0] - 2] = 100\n    \n    for i in range(1, n):\n        birds[i] += birds[i - 1]\n    \n    for i in range(n):\n        print(birds[i])\n    \n    return ''"
    },
    {
        "number": 1804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 1807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(len(str(i)) for i in range(a, b + 1)))\n"
    },
    {
        "number": 1808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2 2\n   ... 3 6 7 10\n   ... ''')\n    '13'\n    >>> solution('''5 2 1\n   ... 100 100 100 100 100\n   ... ''')\n    '302'\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i < k:\n            ans += x\n        else:\n            ans += a[i] - a[i - k]\n    return str(ans)\n"
    },
    {
        "number": 1809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count += 1\n        if i % 3 == 0:\n            count += 1\n        if i % 4 == 0:\n            count += 1\n        if i % 5 == 0:\n            count += 1\n        if i % 6 == 0:\n            count += 1\n        if i % 7 == 0:\n            count += 1\n        if i % 8 == 0:\n            count += 1\n        if i % 9 == 0:\n            count += 1\n        if i % 10 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 1811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    road = stdin.split()[0]\n    if road[0] == '.':\n        return 'NO'\n    for i in range(1, n):\n        if road[i] == '#':\n            if road[i - 1] == '#':\n                return 'NO'\n            k -= 1\n            if k < 0:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 1812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 8\n   ... 2''')\n    3\n    >>> solution('''2\n   ... 3\n   ... 4857''')\n    20\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    res = []\n    for i in a:\n        k = 1\n        while k < 10 ** 50:\n            if str(2 ** k).endswith(str(i)):\n                res.append(k)\n                break\n            k += 1\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 1813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, l = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    ans = 0\n    for i in range(n - l + 1):\n        if nums[i + l - 1] - nums[i] <= s:\n            ans += 1\n        else:\n            break\n    if ans == 0:\n        print(-1)\n    else:\n        print(ans)"
    },
    {
        "number": 1814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6 1 1 3\n   ... 2\n   ... 5\n   ... 3\n   ... 1 1 5 6\n   ... 1 3 5 4\n   ... 3 3 5 3''')\n    '7\n    '5\n    '4'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''13\n   ... 1 1 1 2 2 2 3 3 3 4 4 4 5\n   ... ''')\n    13\n    >>> solution('''5\n   ... 10 100 20 200 1\n   ... ''')\n    5\n    >>> solution('''1\n   ... 100000\n   ... ''')\n    1\n    >>> solution('''7\n   ... 3 2 1 1 4 5 1\n   ... ''')\n    6\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 3 5 4 2\n   ... ''')\n    '10'\n    \"\"\"\n    n = int(stdin.readline())\n    fragments = list(map(int, stdin.readline().split()))\n    fragments.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += abs(fragments[i] - fragments[i + 1])\n    return str(ans)\n"
    },
    {
        "number": 1817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    return str(nums[-2])"
    },
    {
        "number": 1818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    f = [0] * (10 ** 9 + 1)\n    for i in range(n):\n        f[a[i]] = i\n    ans = 0\n    for i in range(n):\n        ans += f[a[i]]\n    print(ans)\n    return ''"
    },
    {
        "number": 1819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 1820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    notes = [int(x) for x in stdin.readline().split()]\n    notes.sort()\n    notes.append(notes[-1] + 7)\n    notes.insert(0, 0)\n    dp = [[0] * len(notes) for _ in range(len(notes))]\n    for i in range(1, len(notes)):\n        for j in range(i):\n            if notes[i] - notes[j] == 1 or notes[i] - notes[j] == 7:\n                dp[i][j] = dp[j][i] = 1\n            elif notes[i] - notes[j] == 2 or notes[i] - notes[j] == 6:\n                dp[i][j] = dp[j][i] = 2\n            elif notes[i] - notes[j] == 3 or notes[i] - notes[j] == 5:\n                dp[i][j] = dp[j][i] = 3\n            elif notes[i] - notes[j] == 4 or notes[i] - notes[j] == 4:\n                dp[i][j] = dp[j][i] = 4\n    dp = [sum(x) for x in dp]\n    return max(dp)"
    },
    {
        "number": 1822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    beavers = list(map(int, stdin.split()))\n    beavers.sort()\n    beavers.reverse()\n    beavers = beavers[:x]\n    beavers.reverse()\n    beavers.sort()\n    beavers.reverse()\n    return''.join(map(str, beavers))"
    },
    {
        "number": 1823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(k):\n        ans += a[i] * (n - i)\n    return ans % (10 ** 9 + 7)"
    },
    {
        "number": 1824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 5 8 123 7\n   ... 123 7 5 1\n   ... 5 1 7\n   ... ''')\n    '8'\n    >>> solution('''6\n   ... 1 4 3 3 5 7\n   ... 3 7 5 4 3\n   ... 4 3 7 5\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    c = list(map(int, stdin.split('\\n')[3].split()))\n    a_set = set(a)\n    b_set = set(b)\n    c_set = set(c)\n    a_set.difference_update(b_set)\n    a_set.difference_update(c_set)\n    b_set.difference_update(a_set)\n    b_set.difference_update(c_set)\n    c_set.difference_update(a_set)\n    c_set.difference_update(b_set)\n    return str(a_set.pop()) +'' + str(b_set.pop())\n"
    },
    {
        "number": 1825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n    strings.sort()\n    s = ''\n    for i in range(n):\n        s += strings[i][0] * int(strings[i][1])\n    return s"
    },
    {
        "number": 1826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    while 'UR' in s or 'RU' in s:\n        s = s.replace('UR', 'D')\n        s = s.replace('RU', 'D')\n    return len(s)"
    },
    {
        "number": 1828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    poland_words = set(stdin.split()[:n])\n    enemy_words = set(stdin.split()[n:])\n    return \"YES\" if poland_words.issubset(enemy_words) else \"NO\"\n"
    },
    {
        "number": 1830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    connectors = []\n    for _ in range(m):\n        connectors.append(tuple(map(int, stdin.split())))\n    connectors.sort()\n    brains = set()\n    for connector in connectors:\n        brains.add(connector[0])\n        brains.add(connector[1])\n    if len(brains)!= n:\n        return \"no\"\n    brains = list(brains)\n    brains.sort()\n    brains_dict = {brains[i]: i for i in range(len(brains))}\n    for connector in connectors:\n        if brains_dict[connector[0]] > brains_dict[connector[1]]:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 1832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 4 2\\n2\\n5 3\\n3\\n1 3 1\\n3\\n0 0 0\\n\")\n    'aeren\\nari\\narousal\\naround\\nari\\nmonogon\\nmonogamy\\nmonthly\\nkevinvu\\nkuroni\\nkurioni\\nkorone\\nanton\\nloves\\nadhoc\\nproblems'\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.append(0)\n    a.sort()\n    ans = []\n    for i in range(n):\n        ans.append(stdin.readline())\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if a[j] - a[i] > 0:\n                ans[i] = ans[j]\n                break\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 1833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 2 2 1 22 14\n   ... ''')\n    '13'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] % i\n    return str(sum(b) % (10 ** 9 + 7))\n"
    },
    {
        "number": 1834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    odd = []\n    even = []\n    for i in range(n):\n        if i % 2 == 0:\n            even.append(a[i])\n        else:\n            odd.append(a[i])\n    even.sort()\n    odd.sort()\n    if len(even) == 0:\n        return \" \".join(map(str, odd))\n    if len(odd) == 0:\n        return \" \".join(map(str, even))\n    for i in range(len(even)):\n        if even[i] < odd[i] - 1:\n            return \"Impossible\"\n    return \" \".join(map(str, even + odd))\n"
    },
    {
        "number": 1835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    permutation = list(map(int, stdin.readline().split()))\n    return str(max(permutation.count(i) for i in range(n)))\n"
    },
    {
        "number": 1838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3 4\\n1 love like\\n2 love hate\\n1 hate like\\nlove like\\nlove hate\\nlike hate\\nhate like\\n\")\n    'YES\\nYES\\nNO\\n1\\n2\\n2\\n2\\n'\n    \"\"\"\n    n, m, q = map(int, stdin.split())\n    words = set(stdin.split()[1:])\n    relations = {}\n    for _ in range(m):\n        t, x, y = map(int, stdin.split()[1:])\n        if t == 1:\n            relations[x] = relations.get(x, set()) | {y}\n            relations[y] = relations.get(y, set()) | {x}\n        else:\n            relations[x] = relations.get(x, set()) - {y}\n            relations[y] = relations.get(y, set()) - {x}\n    for _ in range(q):\n        x, y = map(int, stdin.split()[1:])\n        if x in relations and y in relations[x]:\n            print(\"YES\")\n        elif x in relations and y in relations[y]:\n            print(\"YES\")\n        elif x in relations and y in relations[x]:\n            print(\"YES\")\n        elif x in relations and y in relations[y]:\n            print(\"YES\")\n        elif x in relations and y in relations[x]:\n            print(\"YES\")\n        elif x in relations and y in relations[y]:\n            print(\"YES\")\n        elif x in relations and y in relations[y]:\n            print(\"YES\")\n        elif x in relations and y in relations[x]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 1839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    schedule = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    asphalt = set()\n    for h, v in schedule:\n        asphalt.add(h)\n        asphalt.add(v)\n    asphalt = sorted(asphalt)\n    return''.join(map(str, asphalt))"
    },
    {
        "number": 1840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, b = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    d = list(map(int, stdin.split(' ')))\n    g = list(map(int, stdin.split(' ')))\n    a.sort()\n    d.sort()\n    g.sort()\n    ans = [0] * s\n    for i in range(b):\n        for j in range(s):\n            if d[i] <= a[j]:\n                ans[j] += g[i]\n                break\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 1841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    l = [int(stdin) for stdin in stdin.split('\\n')[:m]]\n    return '\\n'.join(map(str, [len(set(a[l[i] - 1:l[i]])) for i in range(m)]))\n"
    },
    {
        "number": 1842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = b ** 2 - 4 * a * c\n    if d < 0:\n        return 'NO'\n    elif d == 0:\n        return -b / (2 * a)\n    else:\n        return (-b - d ** 0.5) / (2 * a), (-b + d ** 0.5) / (2 * a)"
    },
    {
        "number": 1843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = gcd * a[i] // math.gcd(gcd, a[i])\n    if gcd == 1:\n        return -1\n    else:\n        return n - 1\n"
    },
    {
        "number": 1845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    t.sort()\n    ans = 0\n    for i in range(n - 1):\n        if t[i] < 0 and t[i + 1] > 0:\n            ans += 1\n    return ans"
    },
    {
        "number": 1847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x0, y0, x1, y1 = map(int, stdin.split())\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        x0, y0, x1, y1 = map(int, stdin.split())\n        segments.append((x0, y0, x1, y1))\n    segments.sort(key=lambda x: x[0])\n    x0, y0, x1, y1 = segments[0]\n    if x0 == x1 and y0 == y1:\n        return 0\n    if x0 == x1:\n        return abs(y1 - y0)\n    if y0 == y1:\n        return abs(x1 - x0)\n    return min(abs(x1 - x0), abs(y1 - y0))\n"
    },
    {
        "number": 1848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = 0\n    for i in range(n - 1):\n        if a[i] + 1 > a[i + 1]:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 1849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [0] * n\n    for i in range(n):\n        nums[i] = int(stdin)\n    return str(nums)"
    },
    {
        "number": 1850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    days = 0\n    for i in range(1, n):\n        if a[i] > i:\n            days += 1\n    return days"
    },
    {
        "number": 1852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    b = [int(i) for i in stdin.split()]\n    b.sort()\n    if a == b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 1 1\\n\")\n    'YES\\n2\\n1 2\\n2 3'\n    >>> solution(\"5\\n1 4 1 1 1\\n\")\n    'YES\\n2\\n1 2\\n3 2\\n4 2\\n5 2'\n    >>> solution(\"3\\n1 1 1\\n\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    degrees = [int(x) for x in stdin.readline().split()]\n    edges = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if degrees[i] <= degrees[j]:\n                edges.append((i, j))\n    edges.sort(key=lambda x: degrees[x[0]] + degrees[x[1]], reverse=True)\n    if len(edges) == 0:\n        return \"YES\\n0\"\n    diameter = 0\n    for i in range(len(edges)):\n        diameter += degrees[edges[i][0]] + degrees[edges[i][1]]\n        if diameter > n:\n            return \"NO\"\n    return \"YES\\n\" + str(diameter)\n"
    },
    {
        "number": 1855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    max_value = 0\n    count = 0\n    for i in range(n - k + 1):\n        if p[i] == p[i + k - 1]:\n            continue\n        max_value += p[i + k - 1] - p[i]\n        count += 1\n    return str(max_value) +'' + str(count % 998244353)\n"
    },
    {
        "number": 1856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
        "number": 1858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"No\"\n    s1 = set()\n    s2 = set()\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            s1.add(i)\n        else:\n            s2.add(i)\n    if len(s1) == 0 or len(s2) == 0:\n        return \"No\"\n    s1_sum = sum(s1)\n    s2_sum = sum(s2)\n    gcd = math.gcd(s1_sum, s2_sum)\n    if gcd == 1:\n        return \"Yes\\n\" + str(s1) + \"\\n\" + str(s2)\n    else:\n        return \"No\"\n"
    },
    {
        "number": 1859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 0:\n        d = 2\n        while n % d!= 0:\n            d += 1\n        n -= d\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 1860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    socks = [int(x) for x in stdin.readline().split()]\n    socks.sort()\n    socks.append(n + 1)\n    socks.insert(0, 0)\n    count = 0\n    for i in range(1, len(socks)):\n        if socks[i] == socks[i - 1]:\n            count += 1\n        else:\n            count = 0\n        if count > count:\n            count = count\n    return count\n"
    },
    {
        "number": 1863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = [int(x) for x in stdin.readline().split()]\n    prices.sort()\n    if prices[0] + prices[1] > 1000:\n        return '-1'\n    if prices[0] + prices[2] > 1000:\n        return '-1'\n    if prices[1] + prices[2] > 1000:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] > 1000:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[1] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[1] + prices[2] + prices[0] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[0] - prices[2] > 500:\n        return '-1'\n    if prices[0] + prices[1] + prices[2] - prices[1] - prices[2] > 500:\n        return '-1'\n    if prices["
    },
    {
        "number": 1864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i] > i + 1:\n            res += (a[i] - (i + 1))\n    if res == 0:\n        return -1\n    return res"
    },
    {
        "number": 1865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    swaps = 0\n    for i in range(n):\n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swaps += 1\n    print(swaps)\n    for i in range(swaps):\n        print(i, end=' ')\n        print(arr[i * 2], arr[i * 2 + 1])\n"
    },
    {
        "number": 1866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [i for i in range(1, n + 1)]\n    q = int(stdin)\n    for _ in range(q):\n        x, y = map(int, stdin.split())\n        a[x - 1] = y\n        a[y - 1] = x\n    return str(q) + '\\n' + '\\n'.join(map(lambda x: str(x[0]) +'' + str(x[1]), zip(a[::2], a[1::2])))\n"
    },
    {
        "number": 1867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 1868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, A = [int(x) for x in stdin.split(' ')]\n    b = [int(x) for x in stdin.split(' ')[1:]]\n    return str(count_strings(n, m, A, b))\n\n\ndef"
    },
    {
        "number": 1869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            count += 1\n    return count"
    },
    {
        "number": 1870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    times.sort()\n    count = 0\n    for i in range(n):\n        if times[i] - times[i - 1] > c:\n            count += 1\n    return count"
    },
    {
        "number": 1871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    ans = 0\n    for i in range(n):\n        ans += c[i] * (x - 1)\n        x -= 1\n    return ans"
    },
    {
        "number": 1872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(round(n * n * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000\n\n\"\"\"\n\ndef"
    },
    {
        "number": 1873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if books[j] - books[i] > 1:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 1874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_3, l_4, l_5 = map(int, stdin.split())\n    return str(l_3 * l_4 * l_5 / 2)"
    },
    {
        "number": 1875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 1876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... 1 2 1\n   ... 2 3 1\n   ... 3 4 1\n   ... ''')\n    '252'\n    >>> solution('''4 6\n   ... 1 2 0\n   ... 1 3 0\n   ... 1 4 0\n   ... ''')\n    '0'\n    >>> solution('''3 5\n   ... 1 2 1\n   ... 2 3 0\n   ... ''')\n    '210'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 1879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, sx, sy, ex, ey = [int(x) for x in stdin.split()]\n    wind = stdin[t:]\n    x, y = sx, sy\n    for i in wind:\n        if i == 'E':\n            x += 1\n        elif i == 'S':\n            y -= 1\n        elif i == 'W':\n            x -= 1\n        elif i == 'N':\n            y += 1\n    if x == ex and y == ey:\n        return str(t)\n    return '-1'\n"
    },
    {
        "number": 1880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin, key=lambda x: (x[0], x[2], x[4], x[3], x[1])))[-5:]"
    },
    {
        "number": 1881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    colors.sort()\n    groups = []\n    for i in range(k):\n        groups.append([])\n    for i in range(n):\n        groups[colors[i] % k].append(colors[i])\n    for i in range(k):\n        groups[i].sort()\n    for i in range(n):\n        colors[i] = groups[colors[i] % k].pop(0)\n    return''.join(map(str, colors))"
    },
    {
        "number": 1882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = [0] * n\n    for i in range(n):\n        a[i] = list(map(int, stdin.split()))\n    a.sort(key=lambda x: x[1])\n    s = 0\n    k = 0\n    for i in range(n):\n        if a[i][0] > s:\n            s = a[i][0]\n            k += 1\n    return k, a[k - 1][0]\n"
    },
    {
        "number": 1883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 0 0 0 0 1\n   ... 0 1 2 3 4\n   ... ''')\n    '5'\n    >>> solution('''5\n   ... 0 0 1 0 1\n   ... 0 1 2 2 4\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 0 0 0\n   ... 2 3 4 2\n   ... ''')\n    '1'\n    >>> solution('''4\n   ... 0 0 1 0\n   ... 2 3 4 2\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.readline())\n    types = list(map(int, stdin.readline().split()))\n    tracks = list(map(int, stdin.readline().split()))\n    path = [0] * n\n    path[0] = 1\n    for i in range(1, n):\n        if types[i] == 0:\n            path[i] = 1\n        else:\n            path[i] = 0\n    for i in range(1, n):\n        if tracks[i] == 0:\n            continue\n        path[i] = max(path[i], path[i - 1] + 1)\n    return str(max(path))\n"
    },
    {
        "number": 1884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x1, x2 = [int(x) for x in stdin.split(' ')]\n    c = [int(x) for x in stdin.split(' ')]\n    c.sort()\n    if x1 > c[-1] or x2 > c[-1]:\n        return 'No'\n    if x1 + x2 > c[-1]:\n        return 'No'\n    if x1 + x2 > c[0]:\n        return 'No'\n    if x1 + x2 < c[0]:\n        return 'No'\n    if x1 + x2 == c[0]:\n        return 'Yes'\n    if x1 + x2 == c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0]:\n        return 'Yes'\n    if x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 == c[0] or x1 + x2 == c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 == c[0] or x1 + x2 == c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 == c[0] or x1 + x2 == c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 == c[0] or x1 + x2 == c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 < c[-1]:\n        return 'Yes'\n    if x1 + x2 > c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1 + x2 == c[0] or x1 + x2 == c[-1]:\n        return 'Yes'\n    if x1 + x2 < c[0] and x1 + x2 > c[-1]:\n        return 'Yes'\n    if x1"
    },
    {
        "number": 1885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 1886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()"
    },
    {
        "number": 1887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n    m = [int(x) for x in stdin.readline().split()]\n    h.sort()\n    m.sort()\n    return str(sum(h) + sum(m))\n"
    },
    {
        "number": 1888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    debts = [list(map(int, stdin.split())) for _ in range(m)]\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort"
    },
    {
        "number": 1889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    for _ in range(q):\n        i, j = map(int, stdin.split())\n        grid[i - 1][j - 1] = 1 if grid[i - 1][j - 1] == 0 else 0\n    for i in range(n):\n        count = 0\n        for j in range(m):\n            if grid[i][j] == 1:\n                count += 1\n            else:\n                count = 0\n            grid[i][j] = count\n    for i in range(n):\n        print(grid[i][0])\n"
    },
    {
        "number": 1890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = [int(x) for x in stdin.split()]\n    l = 2 ** n\n    if k == 1:\n        return a\n    if k == l:\n        return b * k\n    return min(a, b * k)"
    },
    {
        "number": 1892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 1893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(n * 2 ** (t / 24))"
    },
    {
        "number": 1894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 1897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"I hate that I love that I hate it\""
    },
    {
        "number": 1899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    return str(sum(a[k:]) - sum(a[:k]))"
    },
    {
        "number": 1901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n    pairs = []\n    for _ in range(m):\n        pairs.append(map(int, stdin.split(' ')))\n    pairs = list(set(pairs))\n    pairs.sort()\n    pairs.sort(key=lambda x: x[1])\n    pairs.sort(key=lambda x: x[0])\n    print(pairs)\n    return ''"
    },
    {
        "number": 1902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    cups = []\n    for _ in range(n):\n        cups.append(list(map(int, stdin.split())))\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:m]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups[:n]\n    cups.sort(key=lambda x: x[0])\n    cups.sort(key=lambda x: x[1], reverse=True)\n    cups = cups"
    },
    {
        "number": 1904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    res = 0\n    for i in range(n):\n        res += a[i]\n    return res"
    },
    {
        "number": 1905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for _ in range(q):\n        t, *args = map(int, stdin.split())\n        if t == 1:\n            r, c = args\n            r -= 1\n            c -= 1\n            matrix[r][c] = matrix[r][c] + 1\n        elif t == 2:\n            r, c = args\n            r -= 1\n            c -= 1\n            matrix[r][c] = matrix[r][c] - 1\n        else:\n            r, c, x = args\n            r -= 1\n            c -= 1\n            matrix[r][c] = x\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = abs(matrix[i][j]) % 10 ** 9\n    return '\\n'.join([' '.join(map(str, row)) for row in matrix])\n"
    },
    {
        "number": 1906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n // 10)"
    },
    {
        "number": 1907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1 6\n   ... 0 4 1\n   ... 2 -1 3\n   ... 1 -2 1\n   ... 4 -1 1\n   ... ''')\n    '138.23007676'\n    \"\"\"\n   ..."
    },
    {
        "number": 1908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 2 1\n   ... 1 2\n   ... 2 3\n   ... 1 3\n   ... ''')\n    'ALIVE'\n    >>> solution('''4 4\n   ... 1 2 0 1\n   ... 1 3\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... ''')\n    'ALIVE'\n    >>> solution('''5 5\n   ... 1 1 1 2 1\n   ... 3 4\n   ... 1 2\n   ... 2 3\n   ... 4 5\n   ... 4 5\n   ... ''')\n    'ALIVE'\n    >>> solution('''4 10\n   ... 2 4 1 4\n   ... 3 2\n   ... 4 2\n   ... 4 1\n   ... 3 1\n   ... 4 1\n   ... 1 3\n   ... 3 2\n   ... 2 1\n   ... 3 1\n   ... 2 4\n   ... ''')\n    'DEAD'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    ans = 0\n    for i in range(n // k):\n        ans += arr[i * k]\n    return str(ans)"
    },
    {
        "number": 1910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 1911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    res = 1\n    for i in range(n):\n        res *= nums[i]\n    return str(res)"
    },
    {
        "number": 1914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    n = int(stdin)\n    s = []\n    for _ in range(n):\n        s.append(stdin)\n    s = set(s)\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                ans += t.count(s[i] + s[j])\n    return ans\n"
    },
    {
        "number": 1915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 1916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = [0] * n\n    for i in range(n):\n        for j in range(m):\n            c[i] |= a[i] & b[j]\n    return str(min(c))"
    },
    {
        "number": 1917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    f = 0\n    for i in range(n):\n        b[i] = min(k, a[i])\n        f += b[i] * (a[i] - b[i] ** 2)\n    while True:\n        if f == 0:\n            break\n        for i in range(n):\n            if b[i] == 0:\n                continue\n            b[i] -= 1\n            f -= 1\n            if f == 0:\n                break\n        else:\n            continue\n        break\n    return''.join(map(str, b))"
    },
    {
        "number": 1918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    a = stdin.readline()\n    b = stdin.readline()\n    a = a.replace('A', '1')\n    b = b.replace('B', '1')\n    a = a.replace('B', '0')\n    b = b.replace('A', '0')\n    a = int(a, 2)\n    b = int(b, 2)\n    return max(a, b)"
    },
    {
        "number": 1919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"1\"\n    return \"2\"\n"
    },
    {
        "number": 1920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nM 151 307\\nF 343 352\\nF 117 145\\nM 24 128\")\n    2\n    >>> solution(\"6\\nM 128 130\\nF 128 131\\nF 131 140\\nF 131 141\\nM 131 200\\nM 140 200\")\n    4\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return n * m - (n + m) * (n + m - 1) // 2"
    },
    {
        "number": 1923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 1924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r_1, c_1, r_2, c_2 = [int(x) for x in stdin.split()]\n    return str(sum(f(r, c) for r in range(r_1, r_2 + 1) for c in range(c_1, c_2 + 1)))\n\ndef"
    },
    {
        "number": 1925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    return str(max(0, n - a * n // b))"
    },
    {
        "number": 1926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 5 4 3 2\")\n    '3 2 1 0'\n    >>> solution(\"6\\n2 2 2 2 2 2\")\n    '0 0 0 0 0'\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    heap = []\n    for i in range(n):\n        heap.append(arr[i])\n        if i > 0:\n            heap[i], heap[int((i - 1) / 2)] = heap[int((i - 1) / 2)], heap[i]\n            if i % 2 == 0:\n                if i * 2 + 1 < n:\n                    heap[i], heap[i * 2 + 1] = heap[i * 2 + 1], heap[i]\n            else:\n                if i * 2 + 2 < n:\n                    heap[i], heap[i * 2 + 2] = heap[i * 2 + 2], heap[i]\n    ans = []\n    for k in range(1, n):\n        ans.append(sum(1 for i in range(n) if heap[i] < heap[int((i - 1) / 2)]))\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 1927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = [i for i in range(1, n + 1)]\n    for i in range(m):\n        p[a[i] - 1] = p[a[i] - 1] - 1\n        p[a[i] - 1] = p[a[i] - 1] + 1\n    print(' '.join(map(str, p)))\n    return ''\n"
    },
    {
        "number": 1928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for i in range(k):\n        x, y = map(int, stdin.split())\n        matrix[x - 1][y - 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n                    if 0 <= x < n and 0 <= y < m:\n                        matrix[x][y] = 1\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 0:\n                print(f'({i + 1}, {j + 1})', end=' ')\n    print()\n    return ''\n"
    },
    {
        "number": 1929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, c = map(int, stdin.split())\n    prisoners = list(map(int, stdin.split()))\n    prisoners.sort()\n    count = 0\n    for i in range(n):\n        if i + c > n:\n            break\n        if prisoners[i] + c > t:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 1930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 -1 -1\")\n    '499122179'\n    >>> solution(\"2 1\")\n    '0'\n    >>> solution(\"-1 -1\")\n    '499122177'\n    \"\"\"\n    n = int(stdin.split()[0])\n    p = [int(x) for x in stdin.split()[1:]]\n    p = [x for x in p if x!= -1]\n    p = sorted(p)\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in p if x!= p[-1]]\n    p = [x for x in p if x!= p[0]]\n    p = [x for x in"
    },
    {
        "number": 1931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '42'\n"
    },
    {
        "number": 1933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    d = list(map(int, stdin.split(' ')))\n    g, r = map(int, stdin.split(' '))\n    d.sort()\n    d.append(n)\n    d.insert(0, 0)\n    d.sort()\n    ans = 0\n    for i in range(1, m + 1):\n        if d[i] - d[i - 1] <= g:\n            ans += g\n        else:\n            ans += d[i] - d[i - 1] - 1\n            ans += r\n    if ans <= n:\n        return str(ans)\n    else:\n        return '-1'"
    },
    {
        "number": 1936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 1937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(n // 2):\n        b.append(a[i] + a[n - i - 1])\n    b.sort()\n    print(*b)\n    return ''"
    },
    {
        "number": 1938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    intervals = [list(map(int, stdin.split())) for _ in range(n)]\n    intervals.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(k):\n        ans += (intervals[i][1] - intervals[i][0] + 1) * (k - i)\n    return ans % (10 ** 9 + 7)"
    },
    {
        "number": 1939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    table = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = (i + 1) * (j + 1)\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = abs(table[i][j] - k)\n    for i in range(n):\n        for j in range(n):\n            print(table[i][j], end=' ')\n        print()\n    return ''"
    },
    {
        "number": 1940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 1941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, n = map(int, stdin.split())\n    k = [int(stdin) for stdin in stdin.split()]\n    k.sort()\n    k.append(0)\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k.sort()\n    k.append(A)\n    k.sort()\n    k.append(B)\n    k.sort()\n    k.append(0)\n    k."
    },
    {
        "number": 1942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 1 3\\n3 3 6\")\n    '1 2 1'\n    >>> solution(\"99995 9998900031 9998900031\")\n    '1'\n    \"\"\"\n    n, l, r = map(int, stdin.split())\n    a = [0] * n\n    for i in range(n):\n        a[i] = i + 1\n    a[0] = a[n - 1] = 1\n    for i in range(n - 1):\n        a[i + 1] = a[i] + 1\n    a[n - 1] = a[0]\n    a = a[l - 1 : r]\n    a.sort()\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 1943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 0 40 100 100\n   ... 60 0 40 40\n   ... 0 60 0 45\n   ... 0 60 55 0\n   ... ''')\n    '1.75'\n    >>> solution('''3\n   ... 0 0 100 0 100 0 0 0\n   ... 100 0 100 0 0 0 100 100\n   ... 0 0 0 100 100 0 0 0\n   ... 100 100 0 0 0 0 100 100\n   ... 0 100 0 100 0 0 100 0\n   ... 100 100 100 100 100 0 0 0\n   ... 100 0 100 0 0 100 0 0\n   ... 100 0 100 0 100 100 100 0\n   ... ''')\n    '12'\n    \"\"\"\n   ..."
    },
    {
        "number": 1944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    laptops = []\n    for i in range(n):\n        laptops.append(list(map(int, stdin.readline().split())))\n    laptops.sort(key=lambda x: x[0])\n    laptops.sort(key=lambda x: x[1], reverse=True)\n    if laptops[0][0] < laptops[1][0] and laptops[0][1] > laptops[1][1]:\n        return \"Happy Alex\"\n    return \"Poor Alex\""
    },
    {
        "number": 1945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nMisha ILoveCodeforces\\nVasya Petrov\\nPetrov VasyaPetrov123\\nILoveCodeforces MikeMirzayanov\\nPetya Ivanov\")\n    3\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2\n   ... 7 2\n   ... 3 10\n   ... 4\n   ... 1 4\n   ... 2 4\n   ... 3 4\n   ... 4 4\n   ... ''')\n    '24'\n    >>> solution('''1\n   ... 1000000000 239\n   ... 3\n   ... 14 15\n   ... 92 65\n   ... 35 89\n   ... ''')\n    '408'\n    \"\"\"\n    n = int(stdin.readline())\n    chem_elements = set()\n    for _ in range(n):\n        a, x = map(int, stdin.readline().split())\n        chem_elements.add(a)\n    m = int(stdin.readline())\n    top_elements = set()\n    for _ in range(m):\n        b, y = map(int, stdin.readline().split())\n        top_elements.add(b)\n    return str(max(sum(x for a in chem_elements if a in top_elements),\n                   sum(y for b in top_elements if b in chem_elements)))\n"
    },
    {
        "number": 1947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 7 3\n   ... 1 2 3 4\n   ... 0\n   ... 1 2 3\n   ... 0\n   ... 1 1 3\n   ... 0\n   ... 1 3 1\n   ... 0\n   ... ''')\n    '1\\n2\\n2\\n1'\n    \"\"\"\n    n, m, l = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    arr.sort()\n    arr.append(l)\n    arr.insert(0, 0)\n    res = []\n    for i in range(m):\n        t, p, d = map(int, stdin.split('\\n')[i + 2].split())\n        if t == 0:\n            res.append(find_time(arr, p, d))\n        else:\n            arr[p] += d\n    return '\\n'.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 1948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[:-1]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    queue = [x]\n    visited = set()\n    visited.add(x)\n    count = 0\n    while queue:\n        count += 1\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n    return count - 1\n"
    },
    {
        "number": 1949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(k):\n        a = [a[j] for j in range(n) if a[j]!= 0]\n        print(min(a))\n        for j in range(n):\n            if a[j]!= 0:\n                a[j] -= min(a)\n    return '\\n'.join(map(str, a))\n"
    },
    {
        "number": 1950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (n - i)\n    return ans"
    },
    {
        "number": 1951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    events = []\n    for _ in range(2 * n):\n        events.append(stdin.rstrip())\n    events.sort()\n    if events[0] == '+':\n        return 'YES'\n    if events[0] == '-':\n        return 'NO'\n    if events[0] == '+' and events[1] == '-':\n        return 'NO'\n    if events[0] == '+' and events[1] == '+':\n        return 'NO'\n    if events[0] == '+' and events[1] == '-':\n        return 'YES'\n    if events[0] == '+' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'NO'\n    if events[0] == '-' and events[1] == '+':\n        return 'NO'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and events[1] == '-':\n        return 'YES'\n    if events[0] == '-' and events[1] == '+':\n        return 'YES'\n    if events[0] == '-' and"
    },
    {
        "number": 1952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    arrays = list(map(int, stdin.split('\\n')[1].split()))\n    c = list(map(int, stdin.split('\\n')[2].split()))\n    arrays.sort()\n    c.sort()\n    c.append(0)\n    ans = 0\n    for i in range(n):\n        if arrays[i] >= k:\n            break\n        if c[i] == 0:\n            ans += 1\n            c[i] = 1\n        if c[i] == 1:\n            if arrays[i] >= 1:\n                c[i] = 2\n            else:\n                c[i] = 1\n        if c[i] == 2:\n            if arrays[i] >= 2:\n                c[i] = 3\n            else:\n                c[i] = 2\n        if c[i] == 3:\n            if arrays[i] >= k:\n                c[i] = 4\n            else:\n                c[i] = 3\n        if c[i] == 4:\n            if arrays[i] >= k:\n                c[i] = 5\n            else:\n                c[i] = 4\n        if c[i] == 5:\n            if arrays[i] >= k:\n                c[i] = 6\n            else:\n                c[i] = 5\n        if c[i] == 6:\n            if arrays[i] >= k:\n                c[i] = 7\n            else:\n                c[i] = 6\n        if c[i] == 7:\n            if arrays[i] >= k:\n                c[i] = 8\n            else:\n                c[i] = 7\n        if c[i] == 8:\n            if arrays[i] >= k:\n                c[i] = 9\n            else:\n                c[i] = 8\n        if c[i] == 9:\n            if arrays[i] >= k:\n                c[i] = 10\n            else:\n                c[i] = 9\n        if c[i] == 10:\n            if arrays[i] >= k:\n                c[i] = 11\n            else:\n                c[i] = 10\n        if c[i] == 11:\n            if arrays[i] >= k:\n                c[i] = 12\n            else:\n                c[i] = 11\n        if c[i] == 12:\n            if arrays[i] >= k:\n                c[i] = 13\n            else:\n                c[i] = 12\n        if c[i] == 13:\n            if arrays[i] >= k:\n                c[i] = 14\n            else:\n                c[i] = 13\n        if c[i] == 14:\n            if arrays[i] >= k:\n                c[i] = 15\n            else:\n                c[i] = 14\n        if c[i] == 15:\n            if arrays[i] >= k:\n                c[i] = 16\n            else:\n                c[i] = 15\n        if c[i] == 16:\n            if arrays[i] >= k:\n                c[i] = 17\n            else:\n                c[i] = 16\n        if c[i] == 17:\n            if arrays[i] >= k:\n                c[i] = 18\n            else:\n                c[i] = 17\n        if c[i] == 18:\n            if arrays[i] >= k:\n                c[i] = 19\n            else:\n                c[i] = 18\n        if c[i] == 19:\n            if arrays[i] >= k:\n                c[i] = 20\n            else:\n                c[i] = 19\n        if c[i] == 20:\n            if arrays[i] >= k:\n                c[i] = 21\n            else"
    },
    {
        "number": 1953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ans += arr[i]\n    print(ans)\n    return ''"
    },
    {
        "number": 1954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 1955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    d.sort()\n    a.sort()\n    if d[0]!= 0:\n        return -1\n    if a[0]!= 1:\n        return -1\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if n == m:\n        return n\n    if n == 2:\n        if d[0] == 1:\n            return 2\n        else:\n            return 1\n    if m == 2:\n        if d[0] == 1:\n            return 2\n        else:\n            return 1\n    if d[0] == 1:\n        return 2\n    if d[0] == 2:\n        return 3\n    if d[0] == 3:\n        return 4\n    if d[0] == 4:\n        return 5\n    if d[0] == 5:\n        return 6\n    if d[0] == 6:\n        return 7\n    if d[0] == 7:\n        return 8\n    if d[0] == 8:\n        return 9\n    if d[0] == 9:\n        return 10\n    if d[0] == 10:\n        return 11\n    if d[0] == 11:\n        return 12\n    if d[0] == 12:\n        return 13\n    if d[0] == 13:\n        return 14\n    if d[0] == 14:\n        return 15\n    if d[0] == 15:\n        return 16\n    if d[0] == 16:\n        return 17\n    if d[0] == 17:\n        return 18\n    if d[0] == 18:\n        return 19\n    if d[0] == 19:\n        return 20\n    if d[0] == 20:\n        return 21\n    if d[0] == 21:\n        return 22\n    if d[0] == 22:\n        return 23\n    if d[0] == 23:\n        return 24\n    if d[0] == 24:\n        return 25\n    if d[0] == 25:\n        return 26\n    if d[0] == 26:\n        return 27\n    if d[0] == 27:\n        return 28\n    if d[0] == 28:\n        return 29\n    if d[0] == 29:\n        return 30\n    if d[0] == 30:\n        return 31\n    if d[0] == 31:\n        return 32\n    if d[0] == 32:\n        return 33\n    if d[0] == 33:\n        return 34\n    if d[0] == 34:\n        return 35\n    if d[0] == 35:\n        return 36\n    if d[0] == 36:\n        return 37\n    if d[0] == 37:\n        return 38\n    if d[0] == 38:\n        return 39\n    if d[0] == 39:\n        return 40\n    if d[0] == 40:\n        return 41\n    if d[0] == 41:\n        return 42\n    if d[0] == 42:\n        return 43\n    if d[0] == 43:\n        return 44\n    if d[0] == 44:\n        return 45\n    if d[0] == 45:\n        return 46\n    if d[0] == 46:\n        return 47\n    if d[0] == 47:\n        return 48\n    if d[0] == 48:\n        return 49\n    if d[0] == 49:\n        return 50\n    if d[0] == 50:\n        return 51\n    if d[0] == 51:\n        return 52\n    if d[0] == 52:\n        return 53\n    if d[0] == 53:\n        return 54\n    if d[0] == 54:\n        return 55\n    if d[0] == 55:\n        return 56\n    if d[0] == 56:\n        return 57\n    if d[0] == 57:\n        return 58\n    if d[0] == 58:\n        return 59\n    if d[0] == 59:\n        return 60\n    if d[0] == 60:\n        return 61\n    if d[0] == 61:\n        return 62\n    if d[0] == 62:\n        return 63\n    if d[0] == 63:\n        return 64\n    if d[0] == 64:\n        return 65\n    if d[0] == 65:\n        return 66\n    if d[0] == 66:\n        return 67\n    if d[0] == 67:\n        return 68\n    if d[0] == 68:\n        return 69\n    if d[0] == 69:\n        return 70\n    if d[0] == 70:\n        return 71\n    if d[0] == 71:\n        return 72\n    if d[0] == 72:\n        return 73\n    if d[0] == 73:\n        return 74\n    if d[0] == 74:\n        return 75\n    if d[0] == 75:\n        return 76\n    if d[0] == 76:\n        return 77\n    if d[0] == 77:\n        return 78\n    if d[0] == 78:\n        return 79\n    if d[0] == 79:\n        return 80\n    if d[0] == 80:\n        return 81\n    if d[0] == 81:\n        return 82\n    if d[0] == 82:\n        return 83\n    if d[0] == 83:\n        return 84\n    if d[0] == 84:\n        return"
    },
    {
        "number": 1956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0 0'"
    },
    {
        "number": 1957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    s = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    s.sort()\n    s.reverse()\n    s = s[:n]\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n    s.append(0)\n"
    },
    {
        "number": 1958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    apples = [int(stdin) for _ in range(n)]\n    apples.sort()\n    total = 0\n    for i in range(n):\n        total += apples[i] * (i + 1)\n    return total % p"
    },
    {
        "number": 1959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    e = list(map(int, stdin.split()))\n    n = len(e)\n    e = sorted(e)\n    e = e[::-1]\n    n = len(e)\n    m = len(e)\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::-1]\n    e = e[1:]\n    e = e[::"
    },
    {
        "number": 1960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 3 2 5\")\n    '3223'\n    >>> solution(\"4\\n1 5 2 3\")\n    '3133'\n    >>> solution(\"4\\n1 5 2 3\")\n    '3133'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return \"\".join(map(str, [1 if dp[i] == max(dp) else 2 if dp[i] == max(dp) - 1 else 3 for i in range(n)]))\n"
    },
    {
        "number": 1961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                if i > 0 and grid[i - 1][j] == '#':\n                    grid[i][j] = '.'\n                if j > 0 and grid[i][j - 1] == '#':\n                    grid[i][j] = '.'\n                if i < n - 1 and grid[i + 1][j] == '#':\n                    grid[i][j] = '.'\n                if j < m - 1 and grid[i][j + 1] == '#':\n                    grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 1962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 1963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\""
    },
    {
        "number": 1964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = list(map(int, stdin.readline().split()))\n    m = []\n    for i in range(n):\n        m.append(list(map(int, stdin.readline().split())))\n    m.sort(key=lambda x: x[0])\n    m.sort(key=lambda x: x[1])\n    print(m)\n    return 0\n"
    },
    {
        "number": 1965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    board = []\n    for i in range(n):\n        board.append(list(map(int, stdin.readline().split())))\n    \n    def is_valid(board):\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 0:\n                    continue\n                for k in range(n):\n                    if board[i][k] == 0:\n                        continue\n                    if board[k][j] == 0:\n                        continue\n                    if board[i][j]!= board[i][k] and board[i][j]!= board[k][j]:\n                        return False\n        return True\n    \n    def get_neighbours(board, i, j):\n        neighbours = []\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            neighbours.append((k, board[i][k]))\n        for k in range(n):\n            if board[k][j] == 0:\n                continue\n            neighbours.append((k, board[k][j]))\n        return neighbours\n    \n    def get_neighbours_of_neighbours(board, i, j):\n        neighbours = []\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            neighbours.append((k, board[i][k]))\n        for k in range(n):\n            if board[k][j] == 0:\n                continue\n            neighbours.append((k, board[k][j]))\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            for l in range(n):\n                if board[k][l] == 0:\n                    continue\n                if board[i][j]!= board[k][l] and board[i][j]!= board[k][l]:\n                    neighbours.append((k, l, board[k][l]))\n        return neighbours\n    \n    def get_neighbours_of_neighbours_of_neighbours(board, i, j):\n        neighbours = []\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            neighbours.append((k, board[i][k]))\n        for k in range(n):\n            if board[k][j] == 0:\n                continue\n            neighbours.append((k, board[k][j]))\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            for l in range(n):\n                if board[k][l] == 0:\n                    continue\n                for m in range(n):\n                    if board[l][m] == 0:\n                        continue\n                    if board[i][j]!= board[k][l] and board[i][j]!= board[k][l] and board[i][j]!= board[l][m] and board[i][j]!= board[l][m] and board[i][j]!= board[k][m] and board[i][j]!= board[k][m]:\n                        neighbours.append((k, l, m, board[k][l]))\n        return neighbours\n    \n    def get_neighbours_of_neighbours_of_neighbours_of_neighbours(board, i, j):\n        neighbours = []\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            neighbours.append((k, board[i][k]))\n        for k in range(n):\n            if board[k][j] == 0:\n                continue\n            neighbours.append((k, board[k][j]))\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            for l in range(n):\n                if board[k][l] == 0:\n                    continue\n                for m in range(n):\n                    if board[l][m] == 0:\n                        continue\n                    for n in range(n):\n                        if board[m][n] == 0:\n                            continue\n                        if board[i][j]!= board[k][l] and board[i][j]!= board[k][l] and board[i][j]!= board[l][m] and board[i][j]!= board[l][m] and board[i][j]!= board[k][m] and board[i][j]!= board[k][m] and board[i][j]!= board[l][n] and board[i][j]!= board[l][n] and board[i][j]!= board[m][n] and board[i][j]!= board[m][n] and board[i][j]!= board[k][n] and board[i][j]!= board[k][n]:\n                            neighbours.append((k, l, m, n, board[k][l]))\n        return neighbours\n    \n    def get_neighbours_of_neighbours_of_neighbours_of_neighbours_of_neighbours(board, i, j):\n        neighbours = []\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            neighbours.append((k, board[i][k]))\n        for k in range(n):\n            if board[k][j] == 0:\n                continue\n            neighbours.append((k, board[k][j]))\n        for k in range(n):\n            if board[i][k] == 0:\n                continue\n            for l in range(n):\n                if board[k][l] == 0:\n                    continue\n                for m in range(n):\n                    if board[l][m] == 0:\n                        continue\n                    for n in range(n):\n                        if board[m][n] == 0:\n                            continue\n                        for o in range(n):\n                            if board[n][o] == 0:\n                                continue\n                            if board[i][j]!= board[k][l] and board[i][j]!= board[k][l] and board[i][j]!= board[l][m] and board[i][j]!= board[l][m] and board[i][j]!= board[k][m] and board[i][j]!= board[k][m] and board[i][j]!= board[l][n] and board[i][j]!= board[l][n] and board[i][j]!= board[m][n] and board[i][j]!= board[m][n] and board[i][j]!= board[k][n] and board[i][j]!= board[k][n] and board[i][j]!= board[l][o] and board[i][j]!= board["
    },
    {
        "number": 1967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    for i in range(h):\n        print(''.join(stdin[i * w:(i + 1) * w]))\n    return ''"
    },
    {
        "number": 1968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(stdin))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'X':\n                if i > 0 and matrix[i - 1][j] == 'X':\n                    count += 1\n                if j > 0 and matrix[i][j - 1] == 'X':\n                    count += 1\n                if i < n - 1 and matrix[i + 1][j] == 'X':\n                    count += 1\n                if j < n - 1 and matrix[i][j + 1] == 'X':\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 1970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"........\\n........\\n......#.\\nK..##..#\\n.......#\\n...##..#\\n......#.\\nK.......\\n\")\n    'YES'\n    >>> solution(\"........\\n........\\n..#.....\\n..#..#..\\n..####..\\n...##...\\n........\\n....K#K#\\n\")\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    q = [0] * n\n    for i in range(n):\n        q[p[i] - 1] = i + 1\n    for i in range(n):\n        if q[i]!= i + 1:\n            return \"-1\"\n    return \" \".join(map(str, q))\n"
    },
    {
        "number": 1972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 3 4\n   ... 2 3 0\n   ... 2 4 3\n   ... 1 4 -4\n   ... 2 1 0''')\n    4\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''13\n   ... 1 1 1 2 2 2 3 3 3 4 4 4 5\n   ... ''')\n    13\n    >>> solution('''5\n   ... 10 2 5 4 1\n   ... ''')\n    5\n    >>> solution('''1\n   ... 10\n   ... ''')\n    1\n    >>> solution('''7\n   ... 3 2 1 1 4 5 1\n   ... ''')\n    6\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    robbers = [map(int, stdin.split('\\n')[i].split()) for i in range(2, n + 2)]\n    searchlights = [map(int, stdin.split('\\n')[i].split()) for i in range(n + 2, n + m + 2)]\n    robbers.sort(key=lambda x: x[0])\n    searchlights.sort(key=lambda x: x[0])\n    robbers.sort(key=lambda x: x[1])\n    searchlights.sort(key=lambda x: x[1])\n    robbers = [i[0] for i in robbers]\n    searchlights = [i[0] for i in searchlights]\n    robbers = [i[1] for i in robbers]\n    searchlights = [i[1] for i in searchlights]\n    robbers.sort()\n    searchlights.sort()\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1, n + 1)]\n    searchlights = [i for i in range(1, m + 1)]\n    robbers = [i for i in range(1"
    },
    {
        "number": 1975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 1976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, q = [int(x) for x in stdin.split()]\n    broken = []\n    for _ in range(q):\n        x, y, t = [int(x) for x in stdin.split()]\n        broken.append((x, y, t))\n    broken.sort(key=lambda x: x[2])\n    broken.sort(key=lambda x: x[0])\n    broken.sort(key=lambda x: x[1])\n    broken = [x[2] for x in broken]\n    if max(broken) < k:\n        return str(max(broken))\n    else:\n        return '-1'\n"
    },
    {
        "number": 1977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    matrix = [stdin.split() for _ in range(n)]\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j - 1] + 1\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    for i in range(k):\n        for j in range(n):\n            for x in range(n):\n                if matrix[j][x] == 'a':\n                    matrix[j][x] = 'b'\n                    break\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j - 1] + 1\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[n - 1][n - 1]\n\n\ndef"
    },
    {
        "number": 1978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    m = int(stdin.readline())\n    path = list(map(int, stdin.readline().split()))\n    good_paths = []\n    for i in range(1, m):\n        if path[i] == path[i - 1]:\n            continue\n        if path[i] == path[i - 1] + 1:\n            good_paths.append(path[:i])\n        elif path[i] == path[i - 1] - 1:\n            good_paths.append(path[:i - 1] + path[i:])\n    good_paths.append(path)\n    good_paths.sort(key=len)\n    for path in good_paths:\n        if path[0] == 1:\n            if path[-1] == n:\n                return str(len(path)) +'' +''.join(map(str, path))\n    return '-1'\n"
    },
    {
        "number": 1979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 3 4 5\\n2 3 4 5 1\")\n    '5'\n    >>> solution(\"5\\n5 4 3 2 1\\n1 2 3 4 5\")\n    '1'\n    >>> solution(\"4\\n1 3 2 4\\n4 2 3 1\")\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a_b_pairs = 0\n    for i in range(n):\n        a_b_pairs += abs(a[i] - b[i])\n    return str(a_b_pairs)\n"
    },
    {
        "number": 1980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    d = [int(x) for x in stdin.split()]\n    d.sort()\n    d = [0] + d + [10 ** 9]\n    ans = 0\n    for i in range(n):\n        ans += a\n        ans += max(0, d[i + 1] - d[i] - 1) ** 2\n    return ans"
    },
    {
        "number": 1981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1\n   ... 1 1 0 0 0\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... ''')\n    2\n    >>> solution('''7 1\n   ... 1 0 1 1 0 0 0\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 3 6\n   ... 3 7\n   ... ''')\n    2\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    cats = [int(i) for i in stdin.split('\\n')[1:]]\n    edges = [tuple(map(int, i.split())) for i in stdin.split('\\n')[2:]]\n    graph = {i: [] for i in range(1, n + 1)}\n    for i, j in edges:\n        graph[i].append(j)\n        graph[j].append(i)\n    leaves = set()\n    for i in graph:\n        if len(graph[i]) == 1:\n            leaves.add(i)\n    return len(leaves)\n"
    },
    {
        "number": 1982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 4 2\n   ... 10 3\n   ... 10 2\n   ... 16 4\n   ... 16 5''')\n    'YES'\n    'YES'\n    'NO'\n    'YES'\n    'YES'\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 1983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, w = [int(x) for x in stdin.split()]\n    levels = []\n    for _ in range(k):\n        levels.append(stdin.split('\\n')[1:])\n    levels = [list(x) for x in levels]\n    \n    # find the first level\n    first_level = levels[0]\n    for i in range(1, k):\n        if levels[i]!= first_level:\n            break\n    else:\n        return str(0)\n    \n    # find the second level\n    second_level = levels[i]\n    for j in range(i+1, k):\n        if levels[j]!= second_level:\n            break\n    else:\n        return str(0)\n    \n    # find the third level\n    third_level = levels[j]\n    for k in range(j+1, k):\n        if levels[k]!= third_level:\n            break\n    else:\n        return str(0)\n    \n    # find the fourth level\n    fourth_level = levels[k]\n    for l in range(k+1, k+w):\n        if levels[l]!= fourth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the fifth level\n    fifth_level = levels[l]\n    for m in range(l+1, k+w):\n        if levels[m]!= fifth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the sixth level\n    sixth_level = levels[m]\n    for n in range(m+1, k+w):\n        if levels[n]!= sixth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the seventh level\n    seventh_level = levels[n]\n    for o in range(n+1, k+w):\n        if levels[o]!= seventh_level:\n            break\n    else:\n        return str(0)\n    \n    # find the eighth level\n    eighth_level = levels[o]\n    for p in range(o+1, k+w):\n        if levels[p]!= eighth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the ninth level\n    ninth_level = levels[p]\n    for q in range(p+1, k+w):\n        if levels[q]!= ninth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the tenth level\n    tenth_level = levels[q]\n    for r in range(q+1, k+w):\n        if levels[r]!= tenth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the eleventh level\n    eleventh_level = levels[r]\n    for s in range(r+1, k+w):\n        if levels[s]!= eleventh_level:\n            break\n    else:\n        return str(0)\n    \n    # find the twelfth level\n    twelfth_level = levels[s]\n    for t in range(s+1, k+w):\n        if levels[t]!= twelfth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the thirteenth level\n    thirteenth_level = levels[t]\n    for u in range(t+1, k+w):\n        if levels[u]!= thirteenth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the fourteenth level\n    fourteenth_level = levels[u]\n    for v in range(u+1, k+w):\n        if levels[v]!= fourteenth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the fifteenth level\n    fifteenth_level = levels[v]\n    for w in range(v+1, k+w):\n        if levels[w]!= fifteenth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the sixteenth level\n    sixteenth_level = levels[w]\n    for x in range(w+1, k+w):\n        if levels[x]!= sixteenth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the seventeenth level\n    seventeenth_level = levels[x]\n    for y in range(x+1, k+w):\n        if levels[y]!= seventeenth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the eighteenth level\n    eighteenth_level = levels[y]\n    for z in range(y+1, k+w):\n        if levels[z]!= eighteenth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the nineteenth level\n    nineteenth_level = levels[z]\n    for a in range(z+1, k+w):\n        if levels[a]!= nineteenth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the twentieth level\n    twentieth_level = levels[a]\n    for b in range(a+1, k+w):\n        if levels[b]!= twentieth_level:\n            break\n    else:\n        return str(0)\n    \n    # find the twenty-first level\n    twenty_first_level = levels[b]"
    },
    {
        "number": 1985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    if n < k:\n        return '0'\n    else:\n        return str(sum(a) - sum(b))\n"
    },
    {
        "number": 1986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    restaurants = [list(map(int, stdin.split())) for _ in range(n)]\n    restaurants.sort(key=lambda x: x[1])\n    restaurants.sort(key=lambda x: x[0])\n    max_joy = 0\n    for i in range(n):\n        if restaurants[i][1] <= k:\n            max_joy += restaurants[i][0]\n            k -= restaurants[i][1]\n        else:\n            max_joy += restaurants[i][0] - (restaurants[i][1] - k)\n            break\n    return max_joy"
    },
    {
        "number": 1987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c_1, c_2 = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    return str(sum(c_1 + c_2 * (i - 1) ** 2 for i in range(1, n + 1) if s[i - 1] == '1'))\n"
    },
    {
        "number": 1988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nabab\\n6\\nqwerty\\n5\\naaaaa\\n6\\nalaska\\n9\\nlfpbavjsm\\n1\\np\")\n    'ertyqw\\n3\\naaaaa\\n1\\aksala\\n6\\navjsmbpfl\\n5\\np'\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    k = 1\n    while k <= n:\n        if k == n:\n            break\n        if s[:k] == s[k:2 * k][::-1]:\n            break\n        k += 1\n    return s[:k] + s[k:2 * k][::-1]\n"
    },
    {
        "number": 1989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 1990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(RaRbR)L)L(\")\n    -1 -1 -1 -1 -1 -1 1 1 -1 -1 2\n    >>> solution(\"(R)R(R)Ra)c\")\n    -1 -1 1 1 -1 -1 1 1 1 -1 1\n    \"\"\"\n    stack = []\n    for c in stdin:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return -1\n            stack.pop()\n        else:\n            if c.isalpha():\n                stack.append(c)\n    if len(stack) == 0:\n        return -1\n    return len(stack)\n"
    },
    {
        "number": 1991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 1992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    print(a)\n    print(b)\n    return str(len(a) + len(b))"
    },
    {
        "number": 1993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(stdin.split()[i]) for i in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    components = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.' and not visited[i][j]:\n                components.append(bfs(matrix, visited, i, j))\n    return '\\n'.join([''.join(map(str, c)) for c in components])\n\n\ndef"
    },
    {
        "number": 1994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    k = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j + 1] == s[j + 1:2 * j + 1][::-1]:\n                k += 1\n    print(k)\n    for i in range(k):\n        l, c = map(int, input().split())\n        print(l, c)\n"
    },
    {
        "number": 1995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 1996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = 0\n    for i in range(n):\n        s = stdin.readline().strip()\n        if s[0] == '!':\n            ans += 1\n        elif s[0] == '?':\n            ans += 2\n    return str(ans)\n"
    },
    {
        "number": 1997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split()]\n    s = stdin[n:]\n    hits = [i for i in range(n) if s[i] == '1']\n    misses = [i for i in range(n) if s[i] == '0']\n    return str(min(len(hits), a) + min(len(misses), b))\n\ndef"
    },
    {
        "number": 1999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            k += 1\n            a[i] = a[i] + a[i + 1]\n            a.pop(i + 1)\n    print(k)\n    print(' '.join(map(str, a)))\n    return ''"
    },
    {
        "number": 2000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    queries = [map(int, stdin.split('\\n')[i + 2].split()) for i in range(q)]\n    arr.sort()\n    for l, r in queries:\n        print(sum(arr[l - 1:r]) % (10 ** 9 + 7))\n"
    },
    {
        "number": 2002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... + 8\n   ... + 9\n   ... + 11\n   ... + 6\n   ... + 1\n   ...? 3\n   ... - 8\n   ...? 3\n   ...? 8\n   ...? 11\n   ... ''')\n    11\n    >>> solution('''10\n   ... + 8\n   ... + 9\n   ... + 11\n   ... + 6\n   ... + 1\n   ...? 3\n   ... - 8\n   ...? 3\n   ...? 8\n   ...? 11\n   ... ''')\n    10\n    >>> solution('''10\n   ... + 8\n   ... + 9\n   ... + 11\n   ... + 6\n   ... + 1\n   ...? 3\n   ... - 8\n   ...? 3\n   ...? 8\n   ...? 11\n   ... ''')\n    14\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bombs = []\n    for i in range(n):\n        bombs.append(int(stdin.readline()))\n    bombs.sort()\n    bombs.reverse()\n    return str(len(bombs)) + '\\n' +''.join(map(str, bombs))"
    },
    {
        "number": 2005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, n_1, n_2 = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a_1 = a[:n_1]\n    a_2 = a[n_1:]\n    return str(sum(a_1) + sum(a_2) / 2)\n"
    },
    {
        "number": 2006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(stdin[i:i + m]) for i in range(0, n * m, m)]\n    for i in range(n):\n        if matrix[i][0] == 'S':\n            start = i\n        if matrix[i][-1] == 'S':\n            end = i\n    if start == end:\n        return 0\n    if matrix[start][-1] == 'G':\n        return -1\n    if matrix[end][0] == 'G':\n        return -1\n    if matrix[start][-1] == 'G':\n        return 1\n    if matrix[end][0] == 'G':\n        return 1\n    return 2\n"
    },
    {
        "number": 2007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 2008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    arr.sort(key=lambda x: x[0])\n    res = 0\n    for i in range(n):\n        res += arr[i][0] * (i + 1) + arr[i][1] * (n - i - 1)\n    return res"
    },
    {
        "number": 2009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 1\n   ... 5 5\n   ... 00001\n   ... 11111\n   ... 00111\n   ... 00110\n   ... 00110''')\n    10\n    >>> solution('''3\n   ... 1 3\n   ... 3 1\n   ... 010\n   ... 101\n   ... 010\n   ... 101''')\n    8\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    r1, c1 = map(int, stdin.split('\\n')[1].split())\n    r2, c2 = map(int, stdin.split('\\n')[2].split())\n    cost = 0\n    for i in range(n):\n        for j in range(n):\n            if stdin.split('\\n')[i][j] == '0':\n                cost += (abs(r1 - i) + abs(c1 - j)) ** 2\n    return cost\n"
    },
    {
        "number": 2010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 11\n   ... 1 2 3 4 5 6 7 8 9 10\n   ... 3 2\n   ... 3 9\n   ... 2 10\n   ... 3 1\n   ... 3 10\n   ... 1 1 10\n   ... 2 10\n   ... 2 10\n   ... 3 1\n   ... 3 10\n   ... 3 9''')\n    '2\\n9\\n11\\n20\\n30\\n40\\n39\\n'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    for _ in range(m):\n        t, v, x = map(int, stdin.split('\\n')[_ + 1].split())\n        if t == 1:\n            arr[v - 1] = x\n        elif t == 2:\n            arr = [i + x for i in arr]\n        elif t == 3:\n            arr[v - 1] = arr[v - 1] - x\n    return '\\n'.join(map(str, arr))\n"
    },
    {
        "number": 2011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    debts = []\n    for _ in range(m):\n        u, v, d = map(int, stdin.split())\n        debts.append((u, v, d))\n    debts.sort(key=lambda x: x[2])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort(key=lambda x: x[1])\n    debts.sort(key=lambda x: x[0])\n    debts.sort"
    },
    {
        "number": 2012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    c = [int(i) for i in stdin.split()[1:]]\n    s = ''\n    for i in range(n):\n        s += (c[i] * chr(97 + i))\n    return s"
    },
    {
        "number": 2013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    sx, sy = [0] * k, [0] * k\n    fx, fy = [0] * k, [0] * k\n    for i in range(k):\n        sx[i], sy[i] = map(int, stdin.split())\n        fx[i], fy[i] = map(int, stdin.split())\n    \n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m\n    \n    def get_next_pos(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x - 1, y\n    \n    def get_next_pos_2(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x + 1, y\n    \n    def get_next_pos_3(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x, y + 1\n    \n    def get_next_pos_4(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x - 1, y\n    \n    def get_next_pos_5(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x, y - 1\n    \n    def get_next_pos_6(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x + 1, y\n    \n    def get_next_pos_7(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x - 1, y\n    \n    def get_next_pos_8(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x, y - 1\n    \n    def get_next_pos_9(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x + 1, y\n    \n    def get_next_pos_10(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x - 1, y\n    \n    def get_next_pos_11(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x, y - 1\n    \n    def get_next_pos_12(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            return x, y + 1\n    \n    def get_next_pos_13(x, y):\n        if x == 0:\n            return x + 1, y\n        elif x == n - 1:\n            return x - 1, y\n        elif y == 0:\n            return x, y + 1\n        elif y == m - 1:\n            return x, y - 1\n        else:\n            "
    },
    {
        "number": 2014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 100\n   ... 1 4 9\n   ... 2 19 49\n   ... 2 19 49''')\n    'YES'\n    >>> solution('''3 100\n   ... 1 4 9\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n   ... 2 19 49\n    "
    },
    {
        "number": 2017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_inversions(stdin))\n\n\ndef"
    },
    {
        "number": 2018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"01\")\n    'DA'\n    >>> solution(\"1111\")\n    'NET'\n    >>> solution(\"0011\")\n    'NET'\n    \"\"\"\n    return \"DA\" if stdin.count(\"0\") % 2 == 0 else \"NET\"\n"
    },
    {
        "number": 2020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 0\n   ... 0 1\n   ... 1 0\n   ... 1 1''')\n    2\n    >>> solution('''4\n   ... 1 1\n   ... 1 2\n   ... 2 3\n   ... 3 3''')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin]\n    points.sort()\n    x_min, x_max = points[0][0], points[-1][0]\n    y_min, y_max = points[0][1], points[-1][1]\n    x_min, x_max = min(x_min, 0), max(x_max, 100)\n    y_min, y_max = min(y_min, 0), max(y_max, 100)\n    x_min, x_max = x_min - 1, x_max + 1\n    y_min, y_max = y_min - 1, y_max + 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_max - 1\n    y_min, y_max = y_min + 1, y_max - 1\n    x_min, x_max = max(x_min, 0), min(x_max, 100)\n    y_min, y_max = max(y_min, 0), min(y_max, 100)\n    x_min, x_max = x_min + 1, x_"
    },
    {
        "number": 2021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    m, *q = list(map(int, stdin.split()))\n    q = sorted(q)\n    a = sorted(a)\n    res = 0\n    for i in range(m):\n        res += a[q[i] - 1]\n    for i in range(n - m):\n        res += a[i]\n    return res"
    },
    {
        "number": 2022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.split('\\n')[1:]]\n    graph = {u: set() for u in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    \n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code here\n    # Write your code here\n    # Your code"
    },
    {
        "number": 2023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 10\n   ... 1 2 0 -1 3\n   ... 3 1 5 -2 0\n   ... 2 5\n   ... 1 3 3 3\n   ... 2 5\n   ... 2 4\n   ... 2 1\n   ... 1 2 1 4\n   ... 2 1\n   ... 2 4\n   ... 1 4 2 1\n   ... 2 2\n   ... ''')\n    '0\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n3\\n-1\\n3\\n2\\n"
    },
    {
        "number": 2024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * 2 <= a[j]:\n                ans += 1\n    return str(ans % 1000000007)"
    },
    {
        "number": 2025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 2026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n6 -4 8 -2 3\")\n    '2 4 6 1 3'\n    >>> solution(\"5\\n3 -2 -1 5 6\")\n    '1 -3 4 11 6'\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] - a[i] + 1\n        for j in range(i):\n            b[i] += a[j]\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 2028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split(' ')]\n    edges = []\n    for _ in range(n - 1):\n        edges.append([int(x) for x in stdin.split(' ')])\n    edges.sort(key=lambda x: x[0])\n    edges.sort(key=lambda x: x[1])\n    diameter = 0\n    for i in range(n - 1):\n        diameter += edges[i][1]\n        if diameter > s:\n            diameter -= edges[i][1]\n            break\n    return str(diameter)"
    },
    {
        "number": 2030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    max_prob = [float(x) for x in stdin.readline().split()]\n    min_prob = [float(x) for x in stdin.readline().split()]\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob.append(1)\n    min_prob.append(1)\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] + min_prob\n    max_prob = [0] + max_prob\n    min_prob = [0] +"
    },
    {
        "number": 2031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n10 20 10\\n6\\n1 1\\n2 1\\n2 2\\n3 1\\n3 2\\n3 3\")\n    '20\\n10\\n20\\n10\\n20\\n10'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    k = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    a.sort()\n    res = []\n    for k, pos in k:\n        res.append(a[pos - 1])\n    return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 2032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    castle = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, n + 1)]\n    portals = [list(map(int, stdin.split('\\n')[i].split())) for i in range(n + 1, n + m + 1)]\n    castle.sort(key=lambda x: x[2], reverse=True)\n    portals.sort(key=lambda x: x[1])\n    castle_idx = 0\n    portal_idx = 0\n    score = 0\n    while castle_idx < n and portal_idx < m:\n        castle_idx += 1\n        portal_idx += 1\n        castle_score = castle[castle_idx - 1][2]\n        portal_score = portals[portal_idx - 1][2]\n        if castle_score < portal_score:\n            score += castle_score\n        else:\n            score += portal_score\n    if castle_idx < n:\n        score += castle[castle_idx][2]\n    return score\n"
    },
    {
        "number": 2033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 9\n   ... 1 5\n   ... 5 4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 1\n   ... 2 6\n   ... 6 4\n   ... 4 2\n   ... 4\n   ... 1 2 3 4 5 6 7\n   ... ''')\n    '1 2'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:m + 1]]\n    k = int(stdin.split('\\n')[m + 1])\n    path = list(map(int, stdin.split('\\n')[m + 2:]))\n    return '{} {}'.format(min_rebuilds(n, k, path, roads), max_rebuilds(n, k, path, roads))\n\n\ndef"
    },
    {
        "number": 2034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(m):\n        roads.append([int(x) for x in stdin.split()])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    cities = set()\n    for road in roads:\n        cities.add(road[0])\n        cities.add(road[1])\n    cities = list(cities)\n    cities.sort()\n    cities_dict = {city: i for i, city in enumerate(cities)}\n    roads_dict = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[0]], cities_dict[road[1]]): road for road in roads}\n    roads_dict.update(roads_dict_rev)\n    roads_dict_rev.clear()\n    roads_dict_rev = {(cities_dict[road[1]], cities_dict[road[0]]): road for road in roads}\n    "
    },
    {
        "number": 2035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s_x, s_y = [int(x) for x in stdin.split()]\n    houses = []\n    for _ in range(n):\n        houses.append([int(x) for x in stdin.split()])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[1])\n    houses.sort(key=lambda x: x[0])\n    houses.sort(key=lambda x: x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x: x[0] + x[1])\n    houses.sort(key=lambda x:"
    },
    {
        "number": 2036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    res = [0] * m\n    for i in range(m):\n        if arr[i] == i + 1:\n            res[i] = 1\n    return ''.join(map(str, res))\n"
    },
    {
        "number": 2038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(x) for x in stdin.split(' ')]\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if 2 * abs(i - j) >= n:\n                continue\n            if p[i] > p[j]:\n                m += 1\n                p[i], p[j] = p[j], p[i]\n    print(m)\n    for i in range(m):\n        print(p[i], p[i + m])\n    return ''\n"
    },
    {
        "number": 2039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 2040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sums = [int(stdin.readline()) for _ in range(n)]\n    sums.sort()\n    sums.reverse()\n    for i in range(n):\n        sums[i] = str(sums[i])\n    print('\\n'.join(sums))\n    return ''"
    },
    {
        "number": 2041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n10 20 10\\n6\\n1 1\\n2 1\\n2 2\\n3 1\\n3 2\\n3 3\")\n    '20\\n10\\n20\\n10\\n20\\n10'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    m = int(stdin.split(\"\\n\")[2])\n    k = [list(map(int, stdin.split(\"\\n\")[3 + i].split())) for i in range(m)]\n    a.sort()\n    res = []\n    for k_j, pos_j in k:\n        res.append(a[a.index(a[pos_j - 1]) + 1])\n    return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 2042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    s_len = len(s)\n    t_len = len(t)\n    dp = [[0 for _ in range(t_len + 1)] for _ in range(s_len + 1)]\n    dp[0][0] = 1\n    for i in range(1, s_len + 1):\n        for j in range(1, t_len + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[s_len][t_len]\n"
    },
    {
        "number": 2044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    a.reverse()\n    ans = [0] * n\n    for i in range(n):\n        if i % m == 0:\n            ans[i] = a[i // m]\n        else:\n            ans[i] = a[i // m] - a[i // m - 1]\n    print(*ans)\n    return ''"
    },
    {
        "number": 2045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    words.sort(key=len)\n    result = words[0]\n    for word in words[1:]:\n        result = result[len(word):]\n    return result"
    },
    {
        "number": 2046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    '3\\n2 1'\n    >>> solution('''5\n   ... 4 5 1 2 3\n   ... ''')\n    '5\\n4 5'\n    >>> solution('''5\n   ... 4 5 1 2 3\n   ... ''')\n    '5\\n4 5'\n    \"\"\"\n    n = int(stdin.readline())\n    snacks = [int(x) for x in stdin.readline().split()]\n    snacks.sort()\n    snacks.reverse()\n    ans = []\n    for i in range(n):\n        if i == 0:\n            ans.append(snacks[i])\n        else:\n            ans.append(snacks[i])\n            ans.append(snacks[i - 1])\n    print('\\n'.join(map(str, ans)))\n    return ''\n"
    },
    {
        "number": 2047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    trans = []\n    for i in range(n - 1):\n        trans.append(list(map(int, stdin.readline().split())))\n    trans = sorted(trans, key=lambda x: x[0])\n    b = sorted(b)\n    a = sorted(a)\n    if len(b)!= n or len(a)!= n:\n        return \"NO\"\n    for i in range(n - 1):\n        if trans[i][0]!= b[i] or trans[i][1]!= a[i]:\n            return \"NO\"\n    if trans[-1][0]!= b[-1] or trans[-1][1]!= a[-1]:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 2048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    s.sort()\n    c.sort()\n    if n < 3:\n        return -1\n    for i in range(n - 2):\n        if s[i] < s[i + 1] < s[i + 2]:\n            return c[i] + c[i + 1] + c[i + 2]\n    return -1\n"
    },
    {
        "number": 2049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = 1\n    while True:\n        if k == 1:\n            break\n        m += 1\n        if m % 2 == 0:\n            k -= 1\n        else:\n            k = gcd(k, m)\n    return m\n\n\ndef"
    },
    {
        "number": 2051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    socks = list(map(int, stdin.split()))\n    colors = [0] * k\n    for i in range(n):\n        colors[socks[i]] += 1\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        colors[l] -= 1\n        colors[r] += 1\n    return sum(colors)"
    },
    {
        "number": 2052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 2053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n4 3 2 1\\n1 1 1 1\\n\")\n    '1\\n2\\n1 1\\n4 2\\n'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    m = int(stdin.split(\"\\n\")[2])\n    b = list(map(int, stdin.split(\"\\n\")[3].split()))\n\n    a.sort()\n    b.sort()\n\n    v = abs(sum(a) - sum(b))\n    k = 0\n    while k < 2 and v > 0:\n        i = 0\n        j = 0\n        while i < n and j < m:\n            if a[i] < b[j]:\n                i += 1\n            elif a[i] > b[j]:\n                j += 1\n            else:\n                a[i] = b[j]\n                a[j] = b[j]\n                v -= abs(a[i] - a[j])\n                k += 1\n                i += 1\n                j += 1\n        if k < 2 and v > 0:\n            a.sort()\n            b.sort()\n            v = abs(sum(a) - sum(b))\n            k = 0\n    if k == 2:\n        return str(v) + \"\\n\" + str(k) + \"\\n\"\n    else:\n        return str(v) + \"\\n\" + str(k) + \"\\n\" + str(a) + \"\\n\" + str(b)\n"
    },
    {
        "number": 2054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3\n   ... 2 3 4\n   ... 3 3 3\n   ... 3\n   ... 3 3 3\n   ... 2 3 4\n   ... 4\n   ... 2 3 4 5\n   ... 3 7 2 2\n   ... 2\n   ... 1 1\n   ... 10 10''')\n    'YES'\n    >>> solution('''5\n   ... 3\n   ... 2 3 4\n   ... 3 3 3\n   ... 3\n   ... 3 3 3\n   ... 2 3 4\n   ... 4\n   ... 2 3 4 5\n   ... 3 7 2 2\n   ... 2\n   ... 1 1\n   ... 10 10''')\n    'NO'\n    >>> solution('''5\n   ... 3\n   ... 2 3 4\n   ... 3 3 3\n   ... 3\n   ... 3 3 3\n   ... 2 3 4\n   ... 4\n   ... 2 3 4 5\n   ... 3 7 2 2\n   ... 2\n   ... 1 1\n   ... 10 10''')\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] ^ a[i + 1]\n    b.sort()\n    b.reverse()\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] & a[i + 1]\n    c.sort()\n    c.reverse()\n    d = [0] * n\n    for i in range(n):\n        d[i] = a[i] | a[i + 1]\n    d.sort()\n    d.reverse()\n    e = [0] * n\n    for i in range(n):\n        e[i] = a[i] ^ a[i + 1]\n    e.sort()\n    e.reverse()\n    f = [0] * n\n    for i in range(n):\n        f[i] = a[i] & a[i + 1]\n    f.sort()\n    f.reverse()\n    g = [0] * n\n    for i in range(n):\n        g[i] = a[i] | a[i + 1]\n    g.sort()\n    g.reverse()\n    h = [0] * n\n    for i in range(n):\n        h[i] = a[i] ^ a[i + 1]\n    h.sort()\n    h.reverse()\n    i = [0] * n\n    for i in range(n):\n        i[i] = a[i] & a[i + 1]\n    i.sort()\n    i.reverse()\n    j = [0] * n\n    for i in range(n):\n        j[i] = a[i] | a[i + 1]\n    j.sort()\n    j.reverse()\n    k = [0] * n\n    for i in range(n):\n        k[i] = a[i] ^ a[i + 1]\n    k.sort()\n    k.reverse()\n    l = [0] * n\n    for i in range(n):\n        l[i] = a[i] & a[i + 1]\n    l.sort()\n    l.reverse()\n    m = [0] * n\n    for i in range(n):\n        m[i] = a[i] | a[i + 1]\n    m.sort()\n    m.reverse()\n    n = [0] * n\n    for i in range(n):\n        n[i] = a[i] ^ a[i + 1]\n    n.sort()\n    n.reverse()\n    o = [0] * n\n    for i in range(n):\n        o[i] = a[i] & a[i + 1]\n    o.sort()\n    o.reverse()\n    p = [0] * n\n    for i in range(n):\n        p[i] = a[i] | a[i + 1]\n    p.sort()\n    p.reverse()\n    q = [0] * n\n    for i in range(n):\n        q[i] = a[i] ^ a[i + 1]\n    q.sort()\n    q.reverse()\n    r = [0] * n\n    for i in range(n):\n        r[i] = a[i] & a[i + 1]\n    r.sort()\n    r.reverse()\n    s = [0] * n\n    for i in range(n):\n        s[i] = a[i] | a[i + 1]\n    s.sort()\n    s.reverse()\n    t = [0] * n\n    for i in range(n):\n        t[i] = a[i] ^ a[i + 1]\n    t.sort()\n    t.reverse()\n    u = [0] * n\n    for i in range(n):\n        u[i] = a[i] & a[i + 1]\n    u.sort()\n    u.reverse()\n    v = [0] * n\n    for i in range(n):\n        v[i] = a[i] | a[i + 1]\n    v.sort()\n    v.reverse()\n    w = [0] * n\n    for i in range(n):\n        w[i] = a[i] ^ a[i + 1]\n    w.sort()\n    w.reverse()\n    x = [0] * n\n    for i in range(n):\n        x[i] = a[i] & a[i + 1]\n    x.sort()\n    x.reverse()\n    y = [0] * n\n    for i in range(n):\n        y[i] = a[i] | a[i + 1]\n    y.sort()\n    y.reverse()\n    z = [0] * n\n    for i in range(n):\n        z[i] = a[i] ^ a[i + 1]\n    z.sort()\n    z.reverse()\n    aa = [0] * n\n    for i in range(n):\n        aa[i] = a[i] & a[i + 1]\n    aa.sort()\n    aa.reverse()\n    ab = [0] * n\n    for i in range(n):\n        ab[i] = a[i] | a[i + 1]\n    ab.sort()\n    ab.reverse()\n    ac = [0] * n\n    for i in range(n):\n        ac[i] = a[i] ^ a[i + 1]\n    ac.sort()\n    ac.reverse()\n    ad = [0] * n\n    for i in range(n):\n        "
    },
    {
        "number": 2057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(x) for x in stdin.readline().split()]\n    t.sort()\n    t = [0] + t\n    t = t + [t[-1] + 1]\n    t = [t[i] - t[i - 1] for i in range(1, len(t))]\n    return t.count(1)"
    },
    {
        "number": 2058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    k = 1\n    for i in range(n - 1):\n        if a[i + 1] - a[i] > k:\n            k = a[i + 1] - a[i]\n    return str(k)\n"
    },
    {
        "number": 2060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [list(stdin[i:i + m]) for i in range(0, n * m, m)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n    \n    def dfs(matrix, i, j, visited, count):\n        if i < 0 or i >= n or j < 0 or j >= m or matrix[i][j] == '*' or (i, j) in visited:\n            return\n        visited.add((i, j))\n        if matrix[i][j] == '.':\n            count += 1\n        dfs(matrix, i + 1, j, visited, count)\n        dfs(matrix, i - 1, j, visited, count)\n        dfs(matrix, i, j + 1, visited, count)\n        dfs(matrix, i, j - 1, visited, count)\n        return count\n    \n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                count = max(count, dfs(matrix, i, j, set(), 0))\n    \n    if count == k:\n        return str(count)\n    else:\n        return '0'\n"
    },
    {
        "number": 2062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    powers = [int(x) for x in stdin.readline().split()]\n    powers.sort()\n    powers.reverse()\n    max_power = powers[0]\n    for i in range(1, n):\n        if powers[i] % max_power!= 0:\n            max_power = powers[i]\n    return max_power\n"
    },
    {
        "number": 2063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, m, w = map(int, stdin.readline().split())\n    # flowers = list(map(int, stdin.readline().split()))\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    # print(n, m, w)\n    # print(flowers)\n    "
    },
    {
        "number": 2064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 9\n    if n == 6:\n        return 11\n    if n == 7:\n        return 13\n    if n == 8:\n        return 15\n    if n == 9:\n        return 17\n    if n == 10:\n        return 19\n    if n == 11:\n        return 21\n    if n == 12:\n        return 23\n    if n == 13:\n        return 25\n    if n == 14:\n        return 27\n    if n == 15:\n        return 29\n    if n == 16:\n        return 31\n    if n == 17:\n        return 33\n    if n == 18:\n        return 35\n    if n == 19:\n        return 37\n    if n == 20:\n        return 39\n    if n == 21:\n        return 41\n    if n == 22:\n        return 43\n    if n == 23:\n        return 45\n    if n == 24:\n        return 47\n    if n == 25:\n        return 49\n    if n == 26:\n        return 51\n    if n == 27:\n        return 53\n    if n == 28:\n        return 55\n    if n == 29:\n        return 57\n    if n == 30:\n        return 59\n    if n == 31:\n        return 61\n    if n == 32:\n        return 63\n    if n == 33:\n        return 65\n    if n == 34:\n        return 67\n    if n == 35:\n        return 69\n    if n == 36:\n        return 71\n    if n == 37:\n        return 73\n    if n == 38:\n        return 75\n    if n == 39:\n        return 77\n    if n == 40:\n        return 79\n    if n == 41:\n        return 81\n    if n == 42:\n        return 83\n    if n == 43:\n        return 85\n    if n == 44:\n        return 87\n    if n == 45:\n        return 89\n    if n == 46:\n        return 91\n    if n == 47:\n        return 93\n    if n == 48:\n        return 95\n    if n == 49:\n        return 97\n    if n == 50:\n        return 99\n    if n == 51:\n        return 101\n    if n == 52:\n        return 103\n    if n == 53:\n        return 105\n    if n == 54:\n        return 107\n    if n == 55:\n        return 109\n    if n == 56:\n        return 111\n    if n == 57:\n        return 113\n    if n == 58:\n        return 115\n    if n == 59:\n        return 117\n    if n == 60:\n        return 119\n    if n == 61:\n        return 121\n    if n == 62:\n        return 123\n    if n == 63:\n        return 125\n    if n == 64:\n        return 127\n    if n == 65:\n        return 129\n    if n == 66:\n        return 131\n    if n == 67:\n        return 133\n    if n == 68:\n        return 135\n    if n == 69:\n        return 137\n    if n == 70:\n        return 139\n    if n == 71:\n        return 141\n    if n == 72:\n        return 143\n    if n == 73:\n        return 145\n    if n == 74:\n        return 147\n    if n == 75:\n        return 149\n    if n == 76:\n        return 151\n    if n == 77:\n        return 153\n    if n == 78:\n        return 155\n    if n == 79:\n        return 157\n    if n == 80:\n        return 159\n    if n == 81:\n        return 161\n    if n == 82:\n        return 163\n    if n == 83:\n        return 165\n    if n == 84:\n        return 167\n    if n == 85:\n        return 169\n    if n == 86:\n        return 171\n    if n == 87:\n        return 173\n    if n == 88:\n        return 175\n    if n == 89:\n        return 177\n    if n == 90:\n        return 179\n    if n == 91:\n        return 181\n    if n == 92:\n        return 183\n    if n == 93:\n        return 185\n    if n == 94:\n        return 187\n    if n == 95:\n        return 189\n    if n == 96:\n        return 191\n    if n == 97:\n        return 193\n    if n == 98:\n        return 195\n    if n == 99:\n        return 197\n    if n == 100:\n        return 199\n    return -1"
    },
    {
        "number": 2065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    parents = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        parents[a - 1].append(b - 1)\n    candidates = []\n    for i in range(n):\n        if len(parents[i]) == 0:\n            candidates.append(i)\n    for i in range(n):\n        for j in range(len(parents[i])):\n            if parents[i][j] in candidates:\n                candidates.remove(parents[i][j])\n    if len(candidates) == 0:\n        print(-1)\n    else:\n        print(len(candidates))\n        for i in candidates:\n            print(i + 1)\n    return ''\n"
    },
    {
        "number": 2066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 2067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 6\n   ... 8\n   ... 1 5 6\n   ... 1 9 4\n   ... 2 4 2''')\n    '1'\n    >>> solution('''1 3\n   ... 4\n   ... 1 5 3\n   ... 1 9 4\n   ... 4 6 6''')\n    '1'\n    >>> solution('''0 2\n   ... 1 1000000000 4\n   ... 1 1000000000 2\n   ... 4 6 6''')\n    '2'\n    >>> solution('''2 3\n   ... 4\n   ... 6\n   ... 1 4 3\n   ... 1 5 2\n   ... 1 6 5''')\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    vertical = [list(map(int, stdin.split())) for _ in range(n)]\n    horizontal = [list(map(int, stdin.split())) for _ in range(m)]\n    return str(min(n, m) - 1)\n"
    },
    {
        "number": 2068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\ntourist reposted Polycarp\\nPetr reposted Tourist\\nWJMZBMR reposted Petr\\nsdya reposted wjmzbmr\\nvepifanov reposted sdya\")\n    6\n    >>> solution(\"6\\nMike reposted Polycarp\\nMax reposted Polycarp\\nEveryOne reposted Polycarp\\n111 reposted Polycarp\\nVkCup reposted Polycarp\\nCodeforces reposted Polycarp\")\n    2\n    >>> solution(\"1\\nSoMeStRaNgEgUe reposted PoLyCaRp\")\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 7 1 1 1 8 1 1 1 1 1 1 1\")\n    '2'\n    >>> solution(\"1 1 -1 1 1 1 1 1 1"
    },
    {
        "number": 2071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a_sum = 0\n    b_sum = 0\n    for i in range(n):\n        a_sum += a[i]\n        b_sum += b[i]\n    return a_sum + b_sum"
    },
    {
        "number": 2072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[:m]\n    return str(sum(s.count('(') == s.count(')')) % (10 ** 9 + 7))\n\nprint(solution(input()))\n"
    },
    {
        "number": 2076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split('\\n')[_].split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    t = list(map(int, stdin.split('\\n')[n].split()))\n    visited = [False] * n\n    ans = []\n    for i in range(n):\n        if not visited[i]:\n            ans.append(i + 1)\n            visited[i] = True\n            for j in graph[i]:\n                if not visited[j]:\n                    ans.append(j + 1)\n                    visited[j] = True\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 2078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = [int(x) for x in stdin.readline().split()]\n    s = stdin.readline()\n    introverts = []\n    extroverts = []\n    for i in range(n):\n        if s[i] == '0':\n            introverts.append(i)\n        else:\n            extroverts.append(i)\n    introverts.sort()\n    extroverts.sort(reverse=True)\n    for i in range(n):\n        if i in introverts:\n            print(introverts[i], end=' ')\n        else:\n            print(extroverts[i], end=' ')\n    return ''"
    },
    {
        "number": 2080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 2082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    roads = []\n    for _ in range(m):\n        x, y = map(int, stdin.split(' '))\n        roads.append((x, y))\n    a.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if roads[i][0]!= roads[j][0] and roads[i][1]!= roads[j][1]:\n                res += min(a[i], a[j])\n    return str(res / (n * (n - 1)))\n"
    },
    {
        "number": 2083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T, c = map(float, stdin.split())\n    a = list(map(float, stdin.split()))\n    m = int(stdin.split()[-1])\n    p = list(map(int, stdin.split()[-m:]))\n    \n    mean = 0\n    for t in range(1, n + 1):\n        mean = (mean + a[t - 1] / T) / c\n    \n    approx = 0\n    for t in p:\n        approx = (approx + a[t - 1] / T) / c\n    \n    error = abs(approx - mean) / mean\n    \n    return str(mean) +'' + str(approx) +'' + str(error)"
    },
    {
        "number": 2084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 5\\n1 1 1 1 1 1 1 1 1\\n\")\n    5\n    >>> solution(\"10 3\\n16 8 2 4 512 256 32 128 64 1\\n\")\n    7\n    >>> solution(\"5 1\\n20 10 50 30 46\\n\")\n    10\n    >>> solution(\"6 6\\n6 6 6 6 6 6\\n\")\n    36\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return sum(a[k:])\n"
    },
    {
        "number": 2085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 1 3\")\n    3\n    >>> solution(\"3\\n3 1 4\")\n    7\n    >>> solution(\"1\\n1\")\n    1\n    >>> solution(\"4\\n7 7 1 1\")\n    7\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * (1 << n)\n    dp[0] = a[0]\n    for i in range(1, 1 << n):\n        for j in range(n):\n            if i & (1 << j) and dp[i ^ (1 << j)] + a[j] > dp[i]:\n                dp[i] = dp[i ^ (1 << j)] + a[j]\n    return max(dp)\n"
    },
    {
        "number": 2086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s, f = map(int, stdin.readline().split())\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if a[i] < s:\n            return i + 1\n    return n + 1\n"
    },
    {
        "number": 2087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(sum(a * b * c for a in range(1, a + 1) for b in range(1, b + 1) for c in range(1, c + 1)))\n"
    },
    {
        "number": 2088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    songs = [list(map(int, stdin.split())) for _ in range(n)]\n    songs.sort(key=lambda x: x[1])\n    songs.sort(key=lambda x: x[0])\n    return sum(songs[i][0] * songs[i][1] for i in range(k))\n"
    },
    {
        "number": 2091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k, t = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    l = []\n    for i in range(k):\n        l.append([int(x) for x in stdin.split()])\n    l.sort(key=lambda x: x[2])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n"
    },
    {
        "number": 2093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] - a[i] > 1:\n                count += (a[j] - a[i] - 1)\n    return str(count)\n"
    },
    {
        "number": 2094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(k):\n            if j == h[i]:\n                ans += 1\n    return ans % (10 ** 3 + 3)"
    },
    {
        "number": 2095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    good_cars = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                if i == j:\n                    if matrix[i][j] == 1:\n                        good_cars.append(i)\n                else:\n                    if matrix[i][j] == 1:\n                        good_cars.append(i)\n                        good_cars.append(j)\n    good_cars.sort()\n    print(len(good_cars))\n    print(' '.join(map(str, good_cars)))\n    return ''"
    },
    {
        "number": 2096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 10 99\n   ... ''')\n    '1'\n    >>> solution('''2\n   ... 13 24 13 45\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    cubes = list(map(int, stdin.readline().split()))\n    cubes.sort()\n    cubes.reverse()\n    cubes_1 = cubes[:n]\n    cubes_2 = cubes[n:]\n    cubes_1.sort()\n    cubes_2.sort()\n    cubes_1.reverse()\n    cubes_2.reverse()\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes_2.append(0)\n    cubes_1.append(0)\n    cubes"
    },
    {
        "number": 2097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t = map(int, stdin.split())\n    requests = [tuple(map(int, stdin.split())) for _ in range(n)]\n    requests.sort()\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    last_request = requests[-1]\n    last_request_start = last_request[0]\n    last_request_end = last_request[1]\n    last_request_time = last_request_end - last_request_start\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e\n    first_request = requests[0]\n    first_request_start = first_request[0]\n    first_request_end = first_request[1]\n    first_request_time = first_request_end - first_request_start\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    first_last_request_time = last_request_start - first_request_end\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e\n    last_first_request_time = first_request_start - last_request_end\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    first_last_request_time = last_request_start - first_request_end\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    last_first_request_time = first_request_start - last_request_end\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    first_last_request_time = last_request_start - first_request_end\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    last_first_request_time = first_request_start - last_request_end\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    first_last_request_time = last_request_start - first_request_end\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    last_first_request_time = first_request_start - last_request_end\n    \n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    first_last_request_time ="
    },
    {
        "number": 2100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n   ... 3\n    "
    },
    {
        "number": 2102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = int(stdin.split()[1])\n    b = [int(x) for x in stdin.split()[2:]]\n    return str(max(b) - min(b))"
    },
    {
        "number": 2103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    if (r - l + 1) % 2 == 0:\n        return \"NO\"\n    if (r - l) % 2 == 0:\n        return \"NO\"\n    if (r - l) % 3 == 0:\n        return \"NO\"\n    if (r - l) % 5 == 0:\n        return \"NO\"\n    if (r - l) % 7 == 0:\n        return \"NO\"\n    if (r - l) % 11 == 0:\n        return \"NO\"\n    if (r - l) % 13 == 0:\n        return \"NO\"\n    if (r - l) % 17 == 0:\n        return \"NO\"\n    if (r - l) % 19 == 0:\n        return \"NO\"\n    if (r - l) % 23 == 0:\n        return \"NO\"\n    if (r - l) % 29 == 0:\n        return \"NO\"\n    if (r - l) % 31 == 0:\n        return \"NO\"\n    if (r - l) % 37 == 0:\n        return \"NO\"\n    if (r - l) % 41 == 0:\n        return \"NO\"\n    if (r - l) % 43 == 0:\n        return \"NO\"\n    if (r - l) % 47 == 0:\n        return \"NO\"\n    if (r - l) % 53 == 0:\n        return \"NO\"\n    if (r - l) % 59 == 0:\n        return \"NO\"\n    if (r - l) % 61 == 0:\n        return \"NO\"\n    if (r - l) % 67 == 0:\n        return \"NO\"\n    if (r - l) % 71 == 0:\n        return \"NO\"\n    if (r - l) % 73 == 0:\n        return \"NO\"\n    if (r - l) % 79 == 0:\n        return \"NO\"\n    if (r - l) % 83 == 0:\n        return \"NO\"\n    if (r - l) % 89 == 0:\n        return \"NO\"\n    if (r - l) % 97 == 0:\n        return \"NO\"\n    if (r - l) % 101 == 0:\n        return \"NO\"\n    if (r - l) % 103 == 0:\n        return \"NO\"\n    if (r - l) % 107 == 0:\n        return \"NO\"\n    if (r - l) % 109 == 0:\n        return \"NO\"\n    if (r - l) % 113 == 0:\n        return \"NO\"\n    if (r - l) % 127 == 0:\n        return \"NO\"\n    if (r - l) % 131 == 0:\n        return \"NO\"\n    if (r - l) % 137 == 0:\n        return \"NO\"\n    if (r - l) % 139 == 0:\n        return \"NO\"\n    if (r - l) % 149 == 0:\n        return \"NO\"\n    if (r - l) % 151 == 0:\n        return \"NO\"\n    if (r - l) % 157 == 0:\n        return \"NO\"\n    if (r - l) % 163 == 0:\n        return \"NO\"\n    if (r - l) % 167 == 0:\n        return \"NO\"\n    if (r - l) % 173 == 0:\n        return \"NO\"\n    if (r - l) % 179 == 0:\n        return \"NO\"\n    if (r - l) % 181 == 0:\n        return \"NO\"\n    if (r - l) % 191 == 0:\n        return \"NO\"\n    if (r - l) % 193 == 0:\n        return \"NO\"\n    if (r - l) % 197 == 0:\n        return \"NO\"\n    if (r - l) % 199 == 0:\n        return \"NO\"\n    if (r - l) % 211 == 0:\n        return \"NO\"\n    if (r - l) % 223 == 0:\n        return \"NO\"\n    if (r - l) % 227 == 0:\n        return \"NO\"\n    if (r - l) % 229 == 0:\n        return \"NO\"\n    if (r - l) % 233 == 0:\n        return \"NO\"\n    if (r - l) % 239 == 0:\n        return \"NO\"\n    if (r - l) % 241 == 0:\n        return \"NO\"\n    if (r - l) % 251 == 0:\n        return \"NO\"\n    if (r - l) % 257 == 0:\n        return \"NO\"\n    if (r - l) % 263 == 0:\n        return \"NO\"\n    if (r - l) % 269 == 0:\n        return \"NO\"\n    if (r - l) % 271 == 0:\n        return \"NO\"\n    if (r - l) % 277 == 0:\n        return \"NO\"\n    if (r - l) % 281 == 0:\n        return \"NO\"\n    if (r - l) % 283 == 0:\n        return \"NO\"\n    if (r - l) % 293 == 0:\n        return \"NO\"\n    if (r - l) % 307 == 0:\n        return \"NO\"\n    if (r - l) % 311 == 0:\n        return \"NO\"\n    if (r - l) % 313 == 0:\n        return \"NO\"\n    if (r - l) % 317 == 0:\n        return \"NO\"\n    if (r - l) % 331 == 0:\n        return \"NO\"\n    if (r - l) % 337 == 0:\n        return \"NO\"\n    if (r - l) % 347 == 0:\n        return \"NO\"\n    if (r - l) % 349 == 0:\n        return \"NO\"\n    if (r - l) % 353 == 0:\n        return \"NO\"\n    if (r - l) % 359 == 0:\n        return \"NO\"\n    if (r - l) % 367 == 0:\n        return \"NO\"\n    if (r - l) % 373 == 0:\n        return \"NO\"\n    if (r - l) % 379 == 0:\n        return \"NO\"\n    if (r - l) % 383 == 0:\n        return \"NO\"\n    if (r - l) % 389 == 0:\n        return \"NO\"\n    if (r - l) % 397 == 0:\n        return \"NO\"\n    if (r - l) % 401 == 0:\n        return \"NO\"\n    if (r - l) % 409 == 0:\n        return \"NO\"\n    if (r - l) % 419 == 0:\n        return \"NO\"\n    if (r - l) % 421 == 0:\n        return \"NO\"\n    if (r - l) % 431 == 0:\n        return \"NO\"\n    if (r - l) % 433 == 0:\n        return \"NO\"\n    if (r - l) % 439 == 0:\n        return \"NO\"\n    if (r - l) % 443 == 0:\n        return \"NO\"\n    if (r - l) % 449 == 0:\n        "
    },
    {
        "number": 2105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split()\n    t = stdin.split()\n    q = int(stdin)\n    for _ in range(q):\n        y = int(stdin)\n        i = 0\n        j = 0\n        while i < n and j < m:\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                i += 1\n        if j == m:\n            print(s[i - 1])\n        else:\n            print(s[i - 1])\n"
    },
    {
        "number": 2106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    d.append(0)\n    s.append(0)\n    d.sort()\n    s.sort()\n    print(d)\n    print(s)\n    return d[-1] - d[0] + k * (s[-1] - s[0])"
    },
    {
        "number": 2107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, s = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    q = [int(x) for x in stdin.split()]\n    return str(max(sum(abs(a[i][j] - a[j][i]) for j in range(n)) + abs(q[i] - q[i - 1]) for i in range(1, s)))\n"
    },
    {
        "number": 2108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    n1, n2, n3 = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        edges.append([int(x) for x in stdin.split()])\n    edges = sorted(edges, key=lambda x: x[2])\n    colors = [0] * n\n    for u, v, w in edges:\n        if colors[u - 1] == colors[v - 1]:\n            continue\n        if colors[u - 1] == 0 and colors[v - 1] == 0:\n            colors[u - 1] = 1\n            colors[v - 1] = 1\n        elif colors[u - 1] == 0 and colors[v - 1] == 1:\n            colors[u - 1] = 1\n        elif colors[u - 1] == 1 and colors[v - 1] == 0:\n            colors[v - 1] = 1\n        else:\n            colors[u - 1] = 2\n            colors[v - 1] = 2\n        if colors[u - 1] == colors[v - 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 2109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    n_1 = 0\n    n_2 = 0\n    n_3 = 0\n    for i in range(n):\n        if arr[i] < 0:\n            n_1 += 1\n        elif arr[i] > 0:\n            n_2 += 1\n        else:\n            n_3 += 1\n    print(n_1)\n    print(*arr[:n_1])\n    print(n_2)\n    print(*arr[n_1:n_1 + n_2])\n    print(n_3)\n    print(*arr[n_1 + n_2:])\n    return ''\n"
    },
    {
        "number": 2110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 24 60 15\n   ... 16 0\n   ... 17 15''')\n    '0 0'\n    >>> solution('''2 24 60 16\n   ... 16 0\n   ... 17 15''')\n    '1 0'\n    >>> solution('''2 24 60 16\n   ... 16 0\n   ... 17 15''')\n    '2 0'\n    \"\"\"\n    n, h, m, k = map(int, stdin.split())\n    trains = [tuple(map(int, stdin.split())) for _ in range(n)]\n    trains.sort()\n    trains = [(h, m) for h, m in trains if h!= 0]\n    trains = [(h, m) for h, m in trains if m % 2 == 0]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h >= m / 2]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in trains if h < m / 2]\n    trains = [(h, m) for h, m in trains if m >= k]\n    trains = [(h, m) for h, m in"
    },
    {
        "number": 2111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        x, y, direction = map(str, stdin.split())\n        x, y = int(x) - 1, int(y) - 1\n        if direction == 'U':\n            matrix[x][y] = 1\n            for i in range(x + 1, n):\n                matrix[i][y] = 1\n        elif direction == 'L':\n            matrix[x][y] = 1\n            for i in range(y + 1, n):\n                matrix[x][i] = 1\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = '.'\n            else:\n                matrix[i][j] = '#'\n    for i in range(n):\n        print(''.join(matrix[i]))\n    return ''\n"
    },
    {
        "number": 2112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, k, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if x > k or y > n:\n        return -1\n    if x == k and y == n:\n        return 0\n    if x == k and y < n:\n        return sum(a[:y])\n    if x < k and y == n:\n        return sum(b[:x])\n    if x < k and y < n:\n        return sum(a[:x]) + sum(b[:y])\n    return -1"
    },
    {
        "number": 2113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 2114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n    \n    i = 0\n    while i < n - 1:\n        if seq[i] == seq[i + 1]:\n            seq.pop(i)\n            seq.pop(i)\n            seq.insert(i, seq[i] + 1)\n            i = 0\n        else:\n            i += 1\n    \n    return str(len(seq)) + '\\n' +''.join(map(str, seq))"
    },
    {
        "number": 2116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 5\n   ... 3 4 1 2 5\n   ... 1 5\n   ... 3 1\n   ... ''')\n    14\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    pos = list(map(int, stdin.split()))\n    pos.sort()\n    ans = 0\n    for i in range(n):\n        ans += pos[i]\n        for j in range(m):\n            pos[i] += 1\n    return ans\n"
    },
    {
        "number": 2117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(range(1, n + 1))\n    if k == 1:\n        return''.join(map(str, a))\n    if k == n:\n        return''.join(map(str, a[::-1]))\n    if k == n - 1:\n        return''.join(map(str, a[::-1]))\n    if k == n - 2:\n        return''.join(map(str, a[::-1]))\n    if k == n - 3:\n        return''.join(map(str, a[::-1]))\n    if k == n - 4:\n        return''.join(map(str, a[::-1]))\n    if k == n - 5:\n        return''.join(map(str, a[::-1]))\n    if k == n - 6:\n        return''.join(map(str, a[::-1]))\n    if k == n - 7:\n        return''.join(map(str, a[::-1]))\n    if k == n - 8:\n        return''.join(map(str, a[::-1]))\n    if k == n - 9:\n        return''.join(map(str, a[::-1]))\n    if k == n - 10:\n        return''.join(map(str, a[::-1]))\n    if k == n - 11:\n        return''.join(map(str, a[::-1]))\n    if k == n - 12:\n        return''.join(map(str, a[::-1]))\n    if k == n - 13:\n        return''.join(map(str, a[::-1]))\n    if k == n - 14:\n        return''.join(map(str, a[::-1]))\n    if k == n - 15:\n        return''.join(map(str, a[::-1]))\n    if k == n - 16:\n        return''.join(map(str, a[::-1]))\n    if k == n - 17:\n        return''.join(map(str, a[::-1]))\n    if k == n - 18:\n        return''.join(map(str, a[::-1]))\n    if k == n - 19:\n        return''.join(map(str, a[::-1]))\n    if k == n - 20:\n        return''.join(map(str, a[::-1]))\n    if k == n - 21:\n        return''.join(map(str, a[::-1]))\n    if k == n - 22:\n        return''.join(map(str, a[::-1]))\n    if k == n - 23:\n        return''.join(map(str, a[::-1]))\n    if k == n - 24:\n        return''.join(map(str, a[::-1]))\n    if k == n - 25:\n        return''.join(map(str, a[::-1]))\n    if k == n - 26:\n        return''.join(map(str, a[::-1]))\n    if k == n - 27:\n        return''.join(map(str, a[::-1]))\n    if k == n - 28:\n        return''.join(map(str, a[::-1]))\n    if k == n - 29:\n        return''.join(map(str, a[::-1]))\n    if k == n - 30:\n        return''.join(map(str, a[::-1]))\n    if k == n - 31:\n        return''.join(map(str, a[::-1]))\n    if k == n - 32:\n        return''.join(map(str, a[::-1]))\n    if k == n - 33:\n        return''.join(map(str, a[::-1]))\n    if k == n - 34:\n        return''.join(map(str, a[::-1]))\n    if k == n - 35:\n        return''.join(map(str, a[::-1]))\n    if k == n - 36:\n        return''.join(map(str, a[::-1]))\n    if k == n - 37:\n        return''.join(map(str, a[::-1]))\n    if k == n - 38:\n        return''.join(map(str, a[::-1]))\n    if k == n - 39:\n        return''.join(map(str, a[::-1]))\n    if k == n - 40:\n        return''.join(map(str, a[::-1]))\n    if k == n - 41:\n        return''.join(map(str, a[::-1]))\n    if k == n - 42:\n        return''.join(map(str, a[::-1]))\n    if k == n - 43:\n        return''.join(map(str, a[::-1]))\n    if k == n - 44:\n        return''.join(map(str, a[::-1]))\n    if k == n - 45:\n        return''.join(map(str, a[::-1]))\n    if k == n - 46:\n        return''.join(map(str, a[::-1]))\n    if k == n - 47:\n        return''.join(map(str, a[::-1]))\n    if k == n - 48:\n        return''.join(map(str, a[::-1]))\n    if k == n - 49:\n        return''.join"
    },
    {
        "number": 2119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    l = int(stdin.readline())\n    r = int(stdin.readline())\n    return str(count_partitions(a, l, r))\n\n\ndef"
    },
    {
        "number": 2120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    parts = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        edges.append((x, y))\n    parts.sort()\n    edges.sort(key=lambda x: x[0])\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = parts[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i == j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i][j - 1] + parts[j]\n            for k in range(j + 1, n):\n                if k == j:\n                    dp[i][j] = min(dp[i][j], dp[i][k - 1] + parts[k])\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i][k - 1] + dp[k][j])\n    return dp[0][n - 1]\n"
    },
    {
        "number": 2121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    \n    def dfs(node, visited):\n        visited.add(node)\n        for child in graph[node]:\n            if child not in visited:\n                dfs(child, visited)\n    \n    visited = set()\n    for i in range(k):\n        dfs(i, visited)\n    \n    return max(a[i] for i in visited)\n"
    },
    {
        "number": 2122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    return books[k - 1]\n"
    },
    {
        "number": 2123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + h[i - 1] - h[i - 1] + 1\n    print(dp)\n    return dp[n]\n"
    },
    {
        "number": 2124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n3\\nnetman vladik Fedosik\\n2\\n?: users are netman, vladik, Fedosik\\nvladik: something wrong with this chat\\n4\\n?: tigerrrrr, banany2001, klinchuh, my favourite team ever, are you ready?\\nklinchuh: yes, coach!\\n?: yes, netman\\nbanany2001: yes of course.\")\n    'Impossible'\n    >>> solution(\"1\\n2\\nVladik netman\\n2\\n?: users are netman, vladik, Fedosik\\nvladik: something wrong with this chat\\n4\\n?: tigerrrrr, banany2001, klinchuh, my favourite team ever, are you ready?\\nklinchuh: yes, coach!\\n?: yes, netman\\nbanany2001: yes of course.\")\n    'netman: tigerrrrr, banany2001, klinchuh, my favourite team ever, are you ready?'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(j + 1, m):\n                if grid[i][j] == grid[i][k] and grid[i][j]!= grid[i][j - 1]:\n                    for l in range(j + 1, k):\n                        if grid[i][j]!= grid[i][l] and grid[i][k]!= grid[i][l]:\n                            count += 1\n    return count"
    },
    {
        "number": 2126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    t = [list(map(int, stdin.split())) for _ in range(n)]\n    return '\\n'.join([' '.join(map(str, [max(a[i], b[i]) for i in range(m)])) for _ in range(n)])\n"
    },
    {
        "number": 2127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9\n   ... + 3 2\n   ... + 2 3\n   ...? 1 20\n   ...? 3 3\n   ...? 2 3\n   ... + 1 5\n   ...? 10 10\n   ...? 1 5\n   ... + 1 1''')\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p = [x / 100 for x in p]\n    p = [x % 1 for x in p]\n    p = [int(x * 100) for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x in p]\n    p = [x % 998244353 for x"
    },
    {
        "number": 2129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 2 1\n   ... 4 5\n   ... 2 3\n   ... 1 3\n   ... 3 5''')\n    3\n    >>> solution('''7 2\n   ... 3 7\n   ... 4 2''')\n    1\n    >>> solution('''7 2\n   ... 3 7\n   ... 4 2\n   ... 5 6\n   ... 1 3\n   ... 2 4\n   ... 3 5\n   ... 4 6\n   ... 5 7''')\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 3\")\n    'No'\n    >>> solution(\"6\\n4 7 7 12 31 61\")\n    'Yes\\n4 12 7 31 7 61'\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    for i in range(1, n):\n        if b[i] - b[i - 1]!= b[i - 1] ^ b[i]:\n            return \"No\"\n    return \"Yes\\n\" + \" \".join(map(str, b))\n"
    },
    {
        "number": 2131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'Yes\\n1\\n1 4'\n    >>> solution('''6\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 2 5\n   ... 3 6\n   ... ''')\n    'No'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted(edge)) for edge in edges]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = [tuple(sorted("
    },
    {
        "number": 2132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    events = []\n    for _ in range(n):\n        events.append(int(stdin))\n    \n    speed = 0\n    overtake = False\n    speed_limit = 0\n    overtake_allowed = True\n    no_speed_limit = False\n    no_overtake_allowed = False\n    for event in events:\n        if event == 1:\n            speed = int(stdin)\n        elif event == 2:\n            overtake = True\n        elif event == 3:\n            speed_limit = int(stdin)\n        elif event == 4:\n            overtake_allowed = False\n        elif event == 5:\n            no_speed_limit = True\n        elif event == 6:\n            no_overtake_allowed = True\n        else:\n            if no_overtake_allowed:\n                no_overtake_allowed = False\n            elif no_speed_limit:\n                no_speed_limit = False\n            elif overtake_allowed:\n                overtake_allowed = True\n            elif overtake:\n                overtake = False\n            else:\n                speed_limit = 0\n                overtake_allowed = True\n                no_speed_limit = False\n                no_overtake_allowed = False\n    return str(n - (overtake_allowed + no_overtake_allowed + no_speed_limit))"
    },
    {
        "number": 2133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nS010\\n0001\\n1000\\n111F\\n3\\nS10\\n101\\n01F\\n5\\nS0101\\n00000\\n01111\\n11111\\n0001F\\n\")\n    '1\\n3 4\\n2\\n1 2\\n2 1\\n0'\n    \"\"\"\n    n = int(stdin.readline())\n    grid = [list(stdin.readline()) for _ in range(n)]\n    s, f = 0, n - 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == \"S\":\n                s = (i, j)\n            elif grid[i][j] == \"F\":\n                f = (i, j)\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == \"1\":\n                grid[i][j] = \"0\"\n                if i > 0 and grid[i - 1][j] == \"1\":\n                    grid[i - 1][j] = \"0\"\n                    ans += 1\n                if j > 0 and grid[i][j - 1] == \"1\":\n                    grid[i][j - 1] = \"0\"\n                    ans += 1\n            elif grid[i][j] == \"0\":\n                grid[i][j] = \"1\"\n                if i < n - 1 and grid[i + 1][j] == \"0\":\n                    grid[i + 1][j] = \"1\"\n                    ans += 1\n                if j < n - 1 and grid[i][j + 1] == \"0\":\n                    grid[i][j + 1] = \"1\"\n                    ans += 1\n    return ans\n"
    },
    {
        "number": 2137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    points = []\n    for i in range(n):\n        x, vx, vy = [int(x) for x in stdin.split()]\n        points.append((x, vx, vy))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[2])\n    x, vx, vy = points[0]\n    for i in range(1, n):\n        x2, vx2, vy2 = points[i]\n        if x2 == x and vx2 == vx and vy2 == vy:\n            return str(4 * i)\n        x, vx, vy = x2, vx2, vy2\n    return str(0)"
    },
    {
        "number": 2138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 3 4\n   ... ''')\n    8\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    4\n    >>> solution('''3\n   ... 1 2 3\n   ..."
    },
    {
        "number": 2139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+3, len(s)+1):\n            if s[i:j].count(\"b\") >= 1 and s[i:j].count(\"e\") >= 1 and s[i:j].count(\"a\") >= 1 and s[i:j].count(\"r\") >= 1:\n                count += 1\n    return count"
    },
    {
        "number": 2140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    m = int(stdin.split()[1])\n    a = [int(i) for i in stdin.split()[2:]]\n    for i in range(m):\n        s = s[:a[i] - 1] + s[a[i] - 1:a[i]][::-1] + s[a[i]:]\n    return s\n"
    },
    {
        "number": 2141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [['W' for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                board[i][j] = 'B'\n            elif i == 0 and j == n - 1:\n                board[i][j] = 'B'\n            elif i == n - 1 and j == 0:\n                board[i][j] = 'B'\n            elif i == n - 1 and j == n - 1:\n                board[i][j] = 'B'\n            elif i == 0:\n                board[i][j] = 'B'\n            elif j == 0:\n                board[i][j] = 'B'\n            elif i == n - 1:\n                board[i][j] = 'B'\n            elif j == n - 1:\n                board[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0 and j == n - 1:\n                continue\n            elif i == n - 1 and j == 0:\n                continue\n            elif i == n - 1 and j == n - 1:\n                continue\n            elif i == 0:\n                if j == 0:\n                    board[i][j] = 'B'\n                elif j == n - 1:\n                    board[i][j] = 'B'\n                else:\n                    board[i][j] = 'B'\n            elif j == 0:\n                if i == 0:\n                    board[i][j] = 'B'\n                elif i == n - 1:\n                    board[i][j] = 'B'\n                else:\n                    board[i][j] = 'B'\n            elif i == n - 1:\n                if j == 0:\n                    board[i][j] = 'B'\n                elif j == n - 1:\n                    board[i][j] = 'B'\n                else:\n                    board[i][j] = 'B'\n            elif j == n - 1:\n                if i == 0:\n                    board[i][j] = 'B'\n                elif i == n - 1:\n                    board[i][j] = 'B'\n                else:\n                    board[i][j] = 'B'\n            else:\n                board[i][j] = 'B'\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0 and j == n - 1:\n                continue\n            elif i == n - 1 and j == 0:\n                continue\n            elif i == n - 1 and j == n - 1:\n                continue\n            elif i == 0:\n                if j == 0:\n                    board[i][j] = 'W'\n                elif j == n - 1:\n                    board[i][j] = 'W'\n                else:\n                    board[i][j] = 'W'\n            elif j == 0:\n                if i == 0:\n                    board[i][j] = 'W'\n                elif i == n - 1:\n                    board[i][j] = 'W'\n                else:\n                    board[i][j] = 'W'\n            elif i == n - 1:\n                if j == 0:\n                    board[i][j] = 'W'\n                elif j == n - 1:\n                    board[i][j] = 'W'\n                else:\n                    board[i][j] = 'W'\n            elif j == n - 1:\n                if i == 0:\n                    board[i][j] = 'W'\n                elif i == n - 1:\n                    board[i][j] = 'W'\n                else:\n                    board[i][j] = 'W'\n            else:\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0 and j == n - 1:\n                continue\n            elif i == n - 1 and j == 0:\n                continue\n            elif i == n - 1 and j == n - 1:\n                continue\n            elif i == 0:\n                if j == 0:\n                    board[i][j] = 'W'\n                elif j == n - 1:\n                    board[i][j] = 'W'\n                else:\n                    board[i][j] = 'W'\n            elif j == 0:\n                if i == 0:\n                    board[i][j] = 'W'\n                elif i == n - 1:\n                    board[i][j] = 'W'\n                else:\n                    board[i][j] = 'W'\n            elif i == n - 1:\n                if j == 0:\n                    board[i][j] = 'W'\n                elif j == n - 1:\n                    board[i][j] = 'W'\n                else:\n                    board[i][j] = 'W'\n            elif j == n - 1:\n                if i == 0:\n                    board[i][j] = 'W'\n                elif i == n - 1:\n                    board[i][j] = 'W'\n                else:\n                    board[i][j] = 'W'\n            else:\n                board[i][j] = 'W'\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0 and j == n - 1:\n                continue\n            elif i == n - 1 and j == 0:\n                continue\n            elif i == n - 1 and j == n - 1:\n                continue\n            elif i == 0"
    },
    {
        "number": 2142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1 8 3 11 4 9 2 7\n   ... ''')\n    '3'\n    >>> solution('''7\n   ... 3 1 7 11 9 2 12\n   ... ''')\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    s.sort()\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] + s[j] not in s[i + 1:j]:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 2144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 2 3\")\n    '0 1 2'\n    >>> solution(\"5\\n1 2 3 4 5\")\n    '0 1 2 1 2'\n    >>> solution(\"7\\n4 4 4 4 7 7 7\")\n    '0 1 2 1 2 3 3'\n    \"\"\"\n    n = int(stdin.readline())\n    shortcuts = [int(x) for x in stdin.readline().split()]\n    shortcuts.insert(0, 0)\n    shortcuts.append(n)\n    shortcuts.sort()\n    ans = [0] * (n + 1)\n    for i in range(1, n + 1):\n        ans[i] = abs(shortcuts[i] - shortcuts[i - 1])\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 2147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    rules = []\n    for i in range(4 * n):\n        rules.append(list(map(int, stdin.split('\\n')[i + 1].split())))\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n    rules.sort(key=lambda x: x[2])\n    rules.sort(key=lambda x: x[0])\n    rules.sort(key=lambda x: x[1])\n"
    },
    {
        "number": 2148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(k):\n            if h[i] == j + 1:\n                ans += 1\n    return ans % (10 ** 3 + 3)"
    },
    {
        "number": 2150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n0 1 1 -2 1\\n\")\n    '0 1 2 0 3'\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = [0] * n\n    a[0] = b[0]\n    for i in range(1, n):\n        a[i] = max(0, a[i - 1]) + b[i]\n    print(*a)\n"
    },
    {
        "number": 2151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 6\n   ... 654321\n   ... 4\n   ... 1337\n   ... 2\n   ... 33\n   ... 4\n   ... 2122\n   ... ''')\n    YES\n    3\n    6 54 321\n    YES\n    3\n    1 3 37\n    NO\n    YES\n    2\n    21 22\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    p = [int(x) for x in stdin.readline().split()]\n    dp = [0] * n\n    dp[0] = p[0] * a[0]\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + p[i] * a[i], p[i] * a[i])\n    return dp[-1]"
    },
    {
        "number": 2153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 3 1 4 5\")\n    3\n    >>> solution(\"4\\n4 2 2 4\")\n    1\n    >>> solution(\"2\\n1 1\")\n    1\n    >>> solution(\"5\\n100 1 100 1 100\")\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    heights.sort()\n    min_jump = float(\"inf\")\n    for i in range(n - 1):\n        if heights[i] < heights[i + 1]:\n            min_jump = min(min_jump, heights[i + 1] - heights[i])\n    return min_jump\n"
    },
    {
        "number": 2154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prices = [int(x) for x in stdin.split()]\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i + 1] = max(dp[i], dp[i + 1], dp[i] + prices[i])\n    return dp[n]\n"
    },
    {
        "number": 2155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a solution to the problem\"\"\"\n    pass\n"
    },
    {
        "number": 2156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 7 3 1 7 0 9 4\n   ... 3\n   ... 1 8\n   ... 2 5\n   ... 7 7\n   ... ''')\n    '3'\n    >>> solution('''6\n   ... 0 1 2 3 3 5\n   ... 3\n   ... 1 2\n   ... 1 4\n   ... 3 6\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    s = [int(i) for i in stdin.split('\\n')[1].split()]\n    q = int(stdin.split('\\n')[2])\n    res = []\n    for i in range(q):\n        l, r = [int(i) for i in stdin.split('\\n')[3 + i].split()]\n        res.append(f(s[l - 1:r]))\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 2157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 1 4\n   ... 0 2 2\n   ... 2 3 3\n   ... ''')\n    '5'\n    >>> solution('''6\n   ... 1 2 3\n   ... 0 2 100\n   ... 1 4 2\n   ... 0 3 7\n   ... 3 5 10\n   ... ''')\n    '105'\n    >>> solution('''11\n   ... 1 0 1664\n   ... 2 0 881\n   ... 3 2 4670\n   ... 4 2 1555\n   ... 5 1 1870\n   ... 6 2 1265\n   ... 7 2 288\n   ... 8 7 2266\n   ... 9 2 1536\n   ... 10 6 3378\n   ... ''')\n    '5551'\n    \"\"\"\n    n = int(stdin.readline())\n    connections = [list(map(int, line.split())) for line in stdin.readlines()]\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[0])\n    connections.sort(key=lambda x: x[1])\n    costs = [0] * n\n    costs[0] = 0\n    for u, v, c in connections:\n        costs[v] = max(costs[v], costs[u] + c)\n    return str(max(costs))\n"
    },
    {
        "number": 2159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 1 2\n   ... ''')\n    '7 3 0 0'\n    \"\"\"\n    n = int(stdin.readline())\n    colors = list(map(int, stdin.readline().split()))\n    colors.sort()\n    count = [0] * n\n    for i in range(n):\n        count[colors[i] - 1] += 1\n    for i in range(n):\n        print(count[i], end=' ')\n    return ''\n"
    },
    {
        "number": 2160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 5 1 4\n   ... ''')\n    '9'\n    >>> solution('''4 8\n   ... 1 2 3 4 4 3 2 1\n   ... ''')\n    '0'\n    >>> solution('''100000 1\n   ... 42\n   ... ''')\n    '299997'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split())\n    questions = list(map(int, stdin.split('\\n')[1].split()))\n    return str(sum(\n        1\n        for i in range(1, n)\n        for j in range(i + 1, n + 1)\n        if questions[i - 1]!= questions[j - 1]\n    ))\n"
    },
    {
        "number": 2161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''Input\n   ... 2\n   ... ivan 1 00123\n   ... masha 1 00123\n   ... \n   ... Output\n   ... 2\n   ... masha 1 00123 \n   ... ivan 1 00123 \n   ... \n   ... Input\n   ... 3\n   ... karl 2 612 12\n   ... petr 1 12\n   ... katya 1 612\n   ... \n   ... Output\n   ... 3\n   ... katya 1 612 \n   ... petr 1 12 \n   ... karl 1 612 \n   ... \n   ... Input\n   ... 4\n   ... ivan 3 123 123 456\n   ... ivan 2 456 456\n   ... ivan 8 789 3 23 6 56 9 89 2\n   ... dasha 2 23 789\n   ... \n   ... Output\n   ... 2\n   ... dasha 2 23 789 \n   ... ivan 2 456 456\n   ... ivan 8 789 3 23 6 56 9 89 2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a1 = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    a2 = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    a3 = [int(x) for x in stdin.split('\\n')[3].split(' ')]\n    a1.sort()\n    a2.sort()\n    a3.sort()\n    a1_len = len(a1)\n    a2_len = len(a2)\n    a3_len = len(a3)\n    a1_idx = 0\n    a2_idx = 0\n    a3_idx = 0\n    moves = 0\n    while a1_idx < a1_len and a2_idx < a2_len and a3_idx < a3_len:\n        if a1[a1_idx] == a2[a2_idx] and a2[a2_idx] == a3[a3_idx]:\n            a1_idx += 1\n            a2_idx += 1\n            a3_idx += 1\n        elif a1[a1_idx] < a2[a2_idx] and a2[a2_idx] < a3[a3_idx]:\n            a1_idx += 1\n            a2_idx += 1\n            moves += 1\n        elif a1[a1_idx] > a2[a2_idx] and a2[a2_idx] > a3[a3_idx]:\n            a3_idx += 1\n            moves += 1\n        else:\n            a2_idx += 1\n            moves += 1\n    while a1_idx < a1_len:\n        a1_idx += 1\n        moves += 1\n    while a2_idx < a2_len:\n        a2_idx += 1\n        moves += 1\n    while a3_idx < a3_len:\n        a3_idx += 1\n        moves += 1\n    return moves\n"
    },
    {
        "number": 2163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum(m ** i for i in range(n + 1)))\n"
    },
    {
        "number": 2164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    t = [int(x) for x in stdin.split(' ')]\n    \n    # a = [3, 5]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1, 3]\n    # t = [10, 15]\n    \n    # a = [1,"
    },
    {
        "number": 2166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        elif arr[i] == arr[i - 1]:\n            count += 1\n    return count"
    },
    {
        "number": 2168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    salaries = [int(x) for x in stdin.readline().split()]\n    salaries.sort()\n    res = 0\n    for i in range(n - 1):\n        res += salaries[i] - salaries[i + 1]\n    return str(res)\n"
    },
    {
        "number": 2169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3 2\n   ... 1 4 3\n   ... 2 5 7\n   ... 8 9 6\n   ... 1\n   ... 4 8\n   ... ''')\n    '5'\n    \"\"\"\n    H, W, D = map(int, stdin.split())\n    A = [list(map(int, stdin.splitlines()[1:]))]\n    for _ in range(H):\n        A.append(list(map(int, stdin.splitlines()[1:])))\n    Q = int(stdin.splitlines()[-1])\n    L = [list(map(int, stdin.splitlines()[1:])) for _ in range(Q)]\n    R = [list(map(int, stdin.splitlines()[1:])) for _ in range(Q)]\n    return '\\n'.join(map(str, [sum(abs(i - j) + abs(A[i][j] - A[x][y]) for i, j in zip(l, r)) for l, r in zip(L, R)]))\n"
    },
    {
        "number": 2170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(count_pairs(n, m))\n\ndef"
    },
    {
        "number": 2171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if stdin == \"0\" else \"no\""
    },
    {
        "number": 2172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    words = [stdin.split() for _ in range(m)]\n    words.sort(key=lambda x: len(x[0]))\n    words.sort(key=lambda x: len(x[1]))\n    words.sort(key=lambda x: x[0])\n    words.sort(key=lambda x: x[1])\n    return''.join(words[0])\n"
    },
    {
        "number": 2173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    b = [0] * n\n    b[0] = a[0]\n    for i in range(1, n):\n        b[i] = b[i - 1] + a[i]\n    b.sort()\n    return''.join(map(str, b))\n"
    },
    {
        "number": 2174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(a[i] - i)\n    return str(ans)"
    },
    {
        "number": 2175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 5 10\n   ... 6\n   ... 1 1 4\n   ... 2 1\n   ... 1 2 5\n   ... 1 1 4\n   ... 2 1\n   ... 2 2''')\n    4\n    5\n    8\n    \"\"\"\n    n, *capacities = map(int, stdin.split('\\n')[0].split())\n    m = int(stdin.split('\\n')[1])\n    vessels = [0] * n\n    for i in range(m):\n        query = stdin.split('\\n')[i + 2].split()\n        if query[0] == '1':\n            vessels[int(query[1]) - 1] += int(query[2])\n        else:\n            print(vessels[int(query[1]) - 1])\n"
    },
    {
        "number": 2176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = []\n    for _ in range(n):\n        s.append(tuple(map(int, stdin.split())))\n    s.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[j][0] < s[i][0] and s[j][1] < s[i][1]:\n                count += 1\n            elif s[j][0] > s[i][0] and s[j][1] > s[i][1]:\n                count += 1\n    return str(count % 998244353)\n"
    },
    {
        "number": 2177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    ans = []\n    for i in range(n):\n        ans.append(a.index(b[i]) - i)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 2179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 2180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'C'\n    if n == 2:\n        return 'C.C'\n    if n == 3:\n        return 'C.C.C'\n    if n == 4:\n        return 'C.C.C.C'\n    if n == 5:\n        return 'C.C.C.C.C'\n    if n == 6:\n        return 'C.C.C.C.C.C'\n    if n == 7:\n        return 'C.C.C.C.C.C.C'\n    if n == 8:\n        return 'C.C.C.C.C.C.C.C'\n    if n == 9:\n        return 'C.C.C.C.C.C.C.C.C'\n    if n == 10:\n        return 'C.C.C.C.C.C.C.C.C.C'\n    if n == 11:\n        return 'C.C.C.C.C.C.C.C.C.C.C'\n    if n == 12:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 13:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 14:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 15:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 16:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 17:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 18:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 19:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 20:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 21:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 22:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 23:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 24:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 25:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 26:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 27:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 28:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 29:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 30:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 31:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 32:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 33:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 34:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 35:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 36:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C'\n    if n == 37:\n        return 'C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C"
    },
    {
        "number": 2181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, d, n = map(float, stdin.split())\n    x = 0\n    y = 0\n    for i in range(int(n)):\n        x += d\n        y += a * d\n        print(x, y)\n    return ''"
    },
    {
        "number": 2182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n   'red'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006\\n205\\n228\\n1053\\n0000000000000000000000000000000000000000000000\")\n    'cyan'\n    >>> solution(\"6\\n603\\n006"
    },
    {
        "number": 2184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    strings = [stdin.split()[1] for _ in range(n)]\n    queries = [stdin.split()[1] for _ in range(m)]\n    return '\\n'.join(['YES' if query in strings else 'NO' for query in queries])\n"
    },
    {
        "number": 2187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 7\n   ... 6 4\n   ... 2 10\n   ... 9 8\n   ... 3 5''')\n    3\n    1 5 3\n    \"\"\"\n    n = int(stdin.readline())\n    pairs = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    pairs.sort()\n    good_pairs = []\n    for i in range(n):\n        if i % 2 == 0:\n            good_pairs.append(pairs[i])\n        else:\n            good_pairs.append(pairs[i][::-1])\n    good_pairs.sort()\n    good_pairs.append(good_pairs[0])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good_pairs.sort(key=lambda x: x[0])\n    good_pairs.sort(key=lambda x: x[1])\n    good"
    },
    {
        "number": 2189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {v: set() for v in range(1, n + 1)}\n    for v, u in edges:\n        graph[v].add(u)\n        graph[u].add(v)\n    labels = [0] * (n + 1)\n    for v in range(1, n + 1):\n        for u in graph[v]:\n            if labels[v] < labels[u]:\n                break\n        else:\n            for u in graph[v]:\n                if labels[v] < labels[u]:\n                    labels[v] = labels[u] + 1\n    return''.join(map(str, labels[1:]))\n"
    },
    {
        "number": 2190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] == pow(k, 2):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 2191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    x = 1\n    res = [0] * n\n    for i in range(n):\n        if s[i] == '?':\n            x = 1\n        elif s[i] == '0':\n            x += 1\n        else:\n            x -= 1\n        res[i] = x\n    return''.join(map(str, res))"
    },
    {
        "number": 2192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    \n    matrix_a = []\n    matrix_b = []\n    for i in range(n):\n        matrix_a.append([])\n        matrix_b.append([])\n        for j in range(n):\n            matrix_a[i].append(matrix[i][j])\n            matrix_b[i].append(-matrix[i][j])\n    \n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = matrix_a[i][j] + matrix_b[i][j]\n    \n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j], end=' ')\n        print()\n    return ''"
    },
    {
        "number": 2193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, t = map(int, stdin.split())\n        graph[u - 1].append((v - 1, t))\n        graph[v - 1].append((u - 1, t))\n    # print(graph)\n    # print(n, m)\n    # print(graph)\n    # print(graph[0])\n    # print(graph[1])\n    # print(graph[2])\n    # print(graph[3])\n    # print(graph[4])\n    # print(graph[5])\n    # print(graph[6])\n    # print(graph[7])\n    # print(graph[8])\n    # print(graph[9])\n    # print(graph[10])\n    # print(graph[11])\n    # print(graph[12])\n    # print(graph[13])\n    # print(graph[14])\n    # print(graph[15])\n    # print(graph[16])\n    # print(graph[17])\n    # print(graph[18])\n    # print(graph[19])\n    # print(graph[20])\n    # print(graph[21])\n    # print(graph[22])\n    # print(graph[23])\n    # print(graph[24])\n    # print(graph[25])\n    # print(graph[26])\n    # print(graph[27])\n    # print(graph[28])\n    # print(graph[29])\n    # print(graph[30])\n    # print(graph[31])\n    # print(graph[32])\n    # print(graph[33])\n    # print(graph[34])\n    # print(graph[35])\n    # print(graph[36])\n    # print(graph[37])\n    # print(graph[38])\n    # print(graph[39])\n    # print(graph[40])\n    # print(graph[41])\n    # print(graph[42])\n    # print(graph[43])\n    # print(graph[44])\n    # print(graph[45])\n    # print(graph[46])\n    # print(graph[47])\n    # print(graph[48])\n    # print(graph[49])\n    # print(graph[50])\n    # print(graph[51])\n    # print(graph[52])\n    # print(graph[53])\n    # print(graph[54])\n    # print(graph[55])\n    # print(graph[56])\n    # print(graph[57])\n    # print(graph[58])\n    # print(graph[59])\n    # print(graph[60])\n    # print(graph[61])\n    # print(graph[62])\n    # print(graph[63])\n    # print(graph[64])\n    # print(graph[65])\n    # print(graph[66])\n    # print(graph[67])\n    # print(graph[68])\n    # print(graph[69])\n    # print(graph[70])\n    # print(graph[71])\n    # print(graph[72])\n    # print(graph[73])\n    # print(graph[74])\n    # print(graph[75])\n    # print(graph[76])\n    # print(graph[77])\n    # print(graph[78])\n    # print(graph[79])\n    # print(graph[80])\n    # print(graph[81])\n    # print(graph[82])\n    # print(graph[83])\n    # print(graph[84])\n    # print(graph[85])\n    # print(graph[86])\n    # print(graph[87])\n    # print(graph[88])\n    # print(graph[89])\n    # print(graph[90])\n    # print(graph[91])\n    # print(graph[92])\n    # print(graph[93])\n    # print(graph[94])\n    # print(graph[95])\n    # print(graph[96])\n    # print(graph[97])\n    # print(graph[98])\n    # print(graph[99])\n    # print(graph[100])\n    # print(graph[101])\n    # print(graph[102])\n    # print(graph[103])\n    # print(graph[104])\n    # print(graph[105])\n    # print(graph[106])\n    # print(graph[107])\n    # print(graph[108])\n    # print(graph[109])\n    # print(graph[110])\n    # print(graph[111])\n    # print(graph[112])\n    # print(graph[113])\n    # print(graph[114])\n    "
    },
    {
        "number": 2194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\n7 0 8 8 7 1 5 2\\n4 3 7\\n2 1\\n3 2\\n4 1 6\\n2 3\\n1 5 16\\n4 8 8\\n3 0\\n\")\n    '29'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for _ in range(q):\n        query = stdin.split()\n        if query[0] == \"1\":\n            x, k = map(int, query[1:])\n            a[x - 1] = k\n        elif query[0] == \"2\":\n            k = int(query[1])\n            a = a[k:] + a[:k]\n        elif query[0] == \"3\":\n            k = int(query[1])\n            a = a[-k:] + a[:-k]\n        elif query[0] == \"4\":\n            l, r = map(int, query[1:])\n            print(sum(a[l - 1:r]))\n        else:\n            raise ValueError(\"Unknown query\")\n"
    },
    {
        "number": 2195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n    >>> solution(\"1 3\\n391 555\\n0 0\\n9 4\")\n    1337\n"
    },
    {
        "number": 2196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += 2 ** a[i]\n    return str(ans - 1)\n"
    },
    {
        "number": 2197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 2198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[:n]\n    for _ in range(m):\n        x, c = map(int, stdin.split())\n        s = s[:x] + c + s[x + 1:]\n    return s\n"
    },
    {
        "number": 2199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = map(int, stdin.split())\n    stations = []\n    for _ in range(m):\n        x, p = map(int, stdin.split())\n        stations.append((x, p))\n    stations.sort()\n    dp = [float('inf')] * (d + 1)\n    dp[0] = 0\n    for x, p in stations:\n        for i in range(x, d + 1):\n            dp[i] = min(dp[i], dp[i - x] + p)\n    if dp[d] == float('inf'):\n        return -1\n    return dp[d]\n"
    },
    {
        "number": 2202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, p = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    s = 0\n    for i in range(n):\n        s += A[i] % p\n    return str(s)"
    },
    {
        "number": 2203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 5 0\n   ... 1 4\n   ... 2 2''')\n    14\n    >>> solution('''5 3\n   ... 5 2\n   ... 4 2\n   ... 3 1''')\n    16\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(n):\n        res ^= nums[i]\n        res ^= i\n    return res"
    },
    {
        "number": 2206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        matrix[i] = list(map(int, stdin.split()))\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix = matrix.tolist()\n    matrix = np.array(matrix)\n    matrix = matrix.T\n    matrix"
    },
    {
        "number": 2207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 7\\n.......\\n.......\\n.BB.B..\\n\")\n    '2'\n    >>> solution(\"4 5\\n..B..\\n..B..\\nB.B.B\\nBBB.B\\n\")\n    '2'\n    >>> solution(\"4 6\\n..B...\\nB.B.BB\\nBBB.BB\\nBBBBBB\\n\")\n    '1'\n    >>> solution(\"1 1\\nB\\n\")\n    '1'\n    >>> solution(\"10 7\\n.......\\n.......\\n.......\\n.......\\n.......\\n.......\\n...B...\\nB.BB.B.\\n\")\n    '3'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    return str(sum(a[i] == b[i] for i in range(n)))"
    },
    {
        "number": 2209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = [stdin[i] for i in range(n)]\n    max_noise = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if strings[i] =='s' and strings[j] == 'h':\n                max_noise = max(max_noise, j - i)\n    return max_noise\n\n\ndef"
    },
    {
        "number": 2210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 2 1\n   ... 3 1''')\n    'Ashish'\n    >>> solution('''3 2\n   ... 1 2\n   ... 1 3\n   ... ''')\n    'Ayush'\n    \"\"\"\n   ..."
    },
    {
        "number": 2211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = (i + 1) * (j + 1)\n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j], end=' ')\n        print()\n    return ''"
    },
    {
        "number": 2213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                ans += 1\n                for r in range(i, n):\n                    for c in range(j, m):\n                        if a[r][c] == 1:\n                            ans += 1\n                            a[r][c] = 0\n    return ans if ans % 2 == 0 else -1\n"
    },
    {
        "number": 2215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = [list(map(int, stdin.split())) for _ in range(m)]\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    res = [0] * n\n    for i in range(m):\n        for j in range(l[i][0], l[i][1] + 1):\n            res[j - 1] = 1\n    return ''.join(map(str, res))"
    },
    {
        "number": 2216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    tubes = []\n    for i in range(k):\n        tubes.append(list(map(int, stdin.split())))\n    tubes.sort(key=lambda x: x[0])\n    tubes.sort(key=lambda x: x[1])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0] - x[1])\n    tubes.sort(key=lambda x: x[1] - x[0])\n    tubes.sort(key=lambda x: x[0] + x[1])\n    tubes.sort(key=lambda x: x[0]"
    },
    {
        "number": 2217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''12\n   ... 3\n   ... 4 4\n   ... 12 1\n   ... 3 4\n   ... ''')\n    '1'\n    >>> solution('''288807105787200\n   ... 4\n   ... 46 482955026400\n   ... 12556830686400 897\n   ... 414 12556830686400\n   ... 4443186242880 325\n   ... ''')\n    '547558588'\n    \"\"\"\n    D = int(stdin.split('\\n')[0])\n    q = int(stdin.split('\\n')[1])\n    graph = {}\n    for i in range(1, D + 1):\n        graph[i] = set()\n    for i in range(q):\n        v, u = map(int, stdin.split('\\n')[i + 2].split())\n        for j in range(1, D + 1):\n            if j % v == 0:\n                graph[j].add(v)\n            if j % u == 0:\n                graph[j].add(u)\n    res = []\n    for i in range(1, D + 1):\n        res.append(len(graph[i]) * (D // i))\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 2218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    beauties = list(map(int, stdin.split()))\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0)\n    beauties.append(beauties[-1] + 1)\n    beauties.sort()\n    beauties.append(0"
    },
    {
        "number": 2219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"59 3\\n1000000000000000000 10\")\n    8\n    >>> solution(\"1000000000000000000 10\")\n    19\n    \"\"\"\n    n, k = map(int, stdin.split())\n    count = 0\n    while n!= 0:\n        if n % k == 0:\n            n //= k\n        else:\n            n -= 1\n        count += 1\n    return count\n"
    },
    {
        "number": 2220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split(' ')]\n    n = int(stdin.split(' ')[2])\n    s = stdin.split(' ')[3]\n    x, y = x1, y1\n    for i in range(n):\n        if s[i] == 'U':\n            y += 1\n        elif s[i] == 'D':\n            y -= 1\n        elif s[i] == 'L':\n            x -= 1\n        elif s[i] == 'R':\n            x += 1\n        if x == x2 and y == y2:\n            return str(i + 1)\n    return '-1'"
    },
    {
        "number": 2222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 1 0 1 1 0 1\n   ... 1 2 2 2 2\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 1 0 1 0 1\n   ... 1 1 1 1\n   ... ''')\n    '4'\n    >>> solution('''8\n   ... 1 0 0 1 0 1 1 0\n   ... 1 1 2 2 3 3 3\n   ... ''')\n    '4'\n    >>> solution('''9\n   ... 1 1 0 0 1 0 1 0 1\n   ... 1 1 2 2 3 3 4 4\n   ... ''')\n    '5'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    operations = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    parents = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n    leaves = set()\n    for i in range(n):\n        if parents[i] == -1:\n            leaves.add(i)\n    max_ = 0\n    for leaf in leaves:\n        max_ = max(max_, operations[leaf])\n    return str(max_)\n"
    },
    {
        "number": 2223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 8 25\n   ... 1 2 1\n   ... 2 3 10\n   ... 3 4 2\n   ... 1 5 2\n   ... 5 6 7\n   ... 6 4 15\n   ... 5 3 1\n   ... 1 7 3\n   ... ''')\n    '4361'\n    >>> solution('''2 1 5\n   ... 1 2 4\n   ... ''')\n    '60'\n    >>> solution('''15 15 23\n   ... 13 10 12\n   ... 11 14 12\n   ... 2 15 5\n   ... 4 10 8\n   ... 10 2 4\n   ... 10 7 5\n   ... 3 10 1\n   ... 5 6 11\n   ... 1 13 8\n   ... 9 15 4\n   ... 4 2 9\n   ... 11 15 1\n   ... 11 12 14\n   ... 10 8 12\n   ... 3 6 11\n   ... ''')\n    '768500592'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [2] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and a[i]!= a[j]:\n                b[i] = max(b[i], a[j])\n    return''.join(map(str, b))\n"
    },
    {
        "number": 2230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1 4\n   ... 1 5\n   ... 1 6\n   ... 2 3\n   ... 2 4\n   ... 4 7''')\n    '3 6'\n    >>> solution('''9\n   ... 9 3\n   ... 3 5\n   ... 1 2\n   ... 4 3\n   ... 4 7\n   ... 1 7\n   ... 4 6\n   ... 3 8''')\n    '2 9'\n    >>> solution('''10\n   ... 6 8\n   ... 10 3\n   ... 3 7\n   ... 5 8\n   ... 1 7\n   ... 7 2\n   ... 2 9\n   ... 2 8\n   ... 1 4''')\n    '10 6'\n    >>> solution('''11\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 1 5\n   ... 1 6\n   ... 6 7\n   ... 5 8\n   ... 5 9\n   ... 4 10\n   ... 4 11''')\n    '9 11'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges = sorted(edges, key=lambda x: x[2])\n    parents = list(range(n))\n\n    def find(x):\n        if parents[x]!= x:\n            parents[x] = find(parents[x])\n        return parents[x]\n\n    def union(x, y):\n        x, y = find(x), find(y)\n        if x == y:\n            return False\n        parents[x] = y\n        return True\n\n    for u, v, w in edges:\n        if union(u - 1, v - 1):\n            return str(u) +'' + str(v)\n"
    },
    {
        "number": 2233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n10\\n20\\n30\")\n    20\n    >>> solution(\"10\\n13\\n45\\n46\\n60\\n103\\n115\\n126\\n150\\n256\\n516\")\n    20\n    \"\"\"\n    n = int(stdin)\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    tickets = [20, 50, 120]\n    s = 0\n    for i in range(n):\n        s += tickets[0]\n        for j in range(i):\n            if t[i] - t[j] <= 90:\n                s += tickets[1]\n            else:\n                s += tickets[2]\n        tickets.pop(0)\n    return s\n"
    },
    {
        "number": 2236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n"
    },
    {
        "number": 2237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 2238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"*\" * n + \"\\n\" + \"*\" * n\n    else:\n        return \"*\" * n + \"\\n\" + \"*\" * (n - 1) + \"D\" + \"*\" * (n - 1) + \"\\n\" + \"*\" * n\n"
    },
    {
        "number": 2239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2\n   ... 13\n   ... 37\n   ... 100''')\n    '1\\n3\\n8\\n27'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    s_0 = s.replace('0', 'a')\n    s_1 = s.replace('1', 'a')\n    t_0 = t.replace('0', 'a')\n    t_1 = t.replace('1', 'a')\n    return len(set([s_0, s_1, t_0, t_1]))\n"
    },
    {
        "number": 2241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    \n    max_joy = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == b[i] and b[i] + b[j] == a[i]:\n                max_joy += a[i] * b[j]\n                break\n    \n    return max_joy\n"
    },
    {
        "number": 2242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1817181712114\")\n    3\n    \"\"\"\n    n = stdin\n    count = 0\n    for i in range(len(n)):\n        for j in range(i, len(n)):\n            if int(n[i:j + 1]) % 2019 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 2243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2 8\\n300 950 500 200\\n1 3\\n2 4\\n2 3\\n1 1\\n1 2\\n2 1\\n2 2\\n2 3\")\n    'NO\\nYES\\nNO\\nYES'\n    \"\"\"\n    n, k, q = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    t = t[::-1]\n    for _ in range(q):\n        type_, id_ = map(int, stdin.split())\n        if type_ == 1:\n            if t[id_ - 1] < t[id_ - 2]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\" if t[id_ - 1] > t[id_ - 2] else \"NO\")\n"
    },
    {
        "number": 2244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    visited = [False] * n\n    res = []\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited, graph, res)\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 2245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\")\n    'Alice'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\")\n    'Bob'\n    >>> solution(\"0 3\\n3 3\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\")"
    },
    {
        "number": 2246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2\\n1 3\\n2 4\")\n    '1.5'\n    >>> solution(\"5\\n1 2\\n1 3\\n3 4\\n2 5\")\n    '2.0'\n    \"\"\"\n    n = int(stdin.readline())\n    roads = [tuple(map(int, line.split())) for line in stdin]\n    roads.sort(key=lambda x: x[1])\n    cities = set()\n    for road in roads:\n        cities.add(road[0])\n        cities.add(road[1])\n    cities = list(cities)\n    cities.sort()\n    cities_to_index = {city: i for i, city in enumerate(cities)}\n    roads_to_index = {road: i for i, road in enumerate(roads)}\n    dp = [[0] * len(cities) for _ in range(len(cities))]\n    for road in roads:\n        dp[cities_to_index[road[0]]][cities_to_index[road[1]]] = 1\n    for k in range(len(cities)):\n        for i in range(len(cities)):\n            for j in range(len(cities)):\n                if dp[i][j] == 0:\n                    dp[i][j] = dp[i][k] * dp[k][j]\n    return str(sum(sum(row) for row in dp) / (2 ** len(cities)))\n"
    },
    {
        "number": 2247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n, m = map(int, stdin.split())\n    connections = []\n    for _ in range(m):\n        connections.append(tuple(map(int, stdin.split())))\n    connections.sort(key=lambda x: x[0])\n    connections.sort(key=lambda x: x[1])\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict[connections[i][0]].append(connections[i][1])\n        brains_dict[connections[i][1]].append(connections[i][0])\n    brains_dict = {k: v for k, v in brains_dict.items() if len(v) == 1}\n    brains_dict = {k: v[0] for k, v in brains_dict.items()}\n    brains = [i for i in range(1, n + 1)]\n    brains_dict = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        brains_dict"
    },
    {
        "number": 2249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 5 4 1 3\")\n    9\n    >>> solution(\"7\\n1 2 1 1 1 3 2\")\n    7\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i]!= numbers[j]:\n                pairs += 1\n    return str(pairs)\n"
    },
    {
        "number": 2250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... RLL"
    },
    {
        "number": 2251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, stdin.split())))\n    q = int(stdin)\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, stdin.split())))\n\n    colors = [0] * n\n    for edge in edges:\n        colors[edge[0] - 1] += 1\n        colors[edge[1] - 1] += 1\n\n    for query in queries:\n        if colors[query[0] - 1] == 1 and colors[query[1] - 1] == 1:\n            print(0)\n        elif colors[query[0] - 1] == 1 or colors[query[1] - 1] == 1:\n            print(1)\n        else:\n            print(2)\n"
    },
    {
        "number": 2252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 5 4 3 2 1\n   ... 1 5 3\n   ... 1 3 1\n   ... 2 4 3\n   ... 4 4 4\n   ... 2 5 3''')\n    'Yes'\n    >>> solution('''6 5\n   ... 1 4 3 2 5 6\n   ... 2 4 3\n   ... 1 6 2\n   ... 4 5 4\n   ... 1 3 3\n   ... 2 6 3''')\n    'No'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    permutation = list(map(int, stdin.split()))\n    for _ in range(m):\n        l, r, x = map(int, stdin.split())\n        if permutation[x - 1]!= r:\n            print('Yes')\n        else:\n            print('No')\n            permutation[x - 1] = l\n    print(' '.join(map(str, permutation)))\n"
    },
    {
        "number": 2253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"FILIPINO\""
    },
    {
        "number": 2254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if bin(a[i] ^ a[j]).count('1') == 1:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 2255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {u: set() for u in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    visited = set()\n    queue = deque([(1, [1])])\n    while queue:\n        node, path = queue.popleft()\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    queue.append((neighbor, path + [neighbor]))\n    return''.join(map(str, path))\n"
    },
    {
        "number": 2256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 2258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                m += 1\n    if m == 0:\n        return '0'\n    return str(m)\n"
    },
    {
        "number": 2259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    G = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                G[i].append(j)\n                G[j].append(i)\n    return len(max(independent_set(G, i) for i in range(n)))\n\ndef"
    },
    {
        "number": 2260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(5**int(stdin))[-2:]"
    },
    {
        "number": 2261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return '0'\n    if k == 1:\n        return '+'\n    if k == 2:\n        return '*'\n    if k == 3:\n        return '**'\n    if k == 4:\n        return '***'\n    if k == 5:\n        return '****'\n    if k == 6:\n        return '*****'\n    if k == 7:\n        return '******'\n    if k == 8:\n        return '*******'\n    if k == 9:\n        return '********'\n    return '*********'"
    },
    {
        "number": 2262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 3 5\n   ... 1 3 3\n   ... 5\n   ... 1 4\n   ... 2 2\n   ... 1 2\n   ... 2 1\n   ... 1 1\n   ... ''')\n    '14.0000000000'\n    >>> solution('''6\n   ... 1 5 3\n   ... 5 3 2\n   ... 6 1 7\n   ... 1 4 4\n   ... 5 2 3\n   ... 5\n   ... 1 2\n   ... 2 1\n   ... 3 5\n   ... 4 1\n   ... 5 2\n   ... ''')\n    '19.6000000000'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    roads = [list(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    changes = [list(map(int, line.split())) for line in stdin.split('\\n')[-1:]]\n    roads.sort(key=lambda x: x[2])\n    changes.sort(key=lambda x: x[1])\n    cost = 0\n    for road in roads:\n        cost += road[2]\n        road[2] = 0\n    for change in changes:\n        cost += change[0] * change[1]\n    return str(round(cost, 6))\n"
    },
    {
        "number": 2264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    count = 0\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b:\n            count += 1\n    return count"
    },
    {
        "number": 2266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    name = stdin.split()[1:]\n    for _ in range(m):\n        x, y = map(str, stdin.split()[1:])\n        name = [i if i!= x else y for i in name]\n    return ''.join(name)\n"
    },
    {
        "number": 2269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"123\")\n    3\n    >>> solution(\"12222133333332\")\n    3\n    >>> solution(\"112233\")\n    4\n    >>> solution(\"332211\")\n    4\n    >>> solution(\"12121212\")\n    0\n    >>> solution(\"333333\")\n    0\n    >>> solution(\"31121\")\n    4\n    \"\"\"\n    s = stdin\n    n = len(s)\n    if n < 3:\n        return 0\n    for i in range(n - 2):\n        if s[i] == \"1\" and s[i + 1] == \"2\" and s[i + 2] == \"3\":\n            return n - i - 1\n    return 0\n"
    },
    {
        "number": 2270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 1 1 1 2 1 1\n   ... 6\n   ... + 2\n   ... + 1\n   ... - 1\n   ... + 2\n   ... - 1\n   ... + 2\n   ... ''')\n    'NO'\n    >>> solution('''6\n   ... 1 1 1 2 1 1\n   ... 6\n   ... + 2\n   ... + 1\n   ... - 1\n   ... + 2\n   ... - 1\n   ... + 2\n   ... ''')\n    'YES'\n    >>> solution('''6\n   ... 1 1 1 2 1 1\n   ... 6\n   ... + 2\n   ... + 1\n   ... - 1\n   ... + 2\n   ... - 1\n   ... + 2\n   ... ''')\n    'NO'\n    >>> solution('''6\n   ... 1 1 1 2 1 1\n   ... 6\n   ... + 2\n   ... + 1\n   ... - 1\n   ... + 2\n   ... - 1\n   ... + 2\n   ... ''')\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    intervals = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        intervals.append((a, b))\n    intervals.sort()\n    intervals.append((10 ** 9, 10 ** 9))\n    stack = []\n    for i in range(n):\n        while stack and intervals[stack[-1]][1] < intervals[i][0]:\n            stack.pop()\n        if stack and intervals[stack[-1]][1] < intervals[i][1]:\n            continue\n        stack.append(i)\n    print('YES' if stack == list(range(n + 1)) else 'NO')\n    return ''\n"
    },
    {
        "number": 2273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = sorted(edges, key=lambda x: x[1])\n    edges = sorted(edges, key=lambda"
    },
    {
        "number": 2274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\nRRD\\nDDR\\nRRC\\n1 4\\nDDDC\\n6 9\\nRDDDDDRRR\\nRRDDRRDDD\\nRRDRDRRDR\\nDDDDRDDRR\\nDRRDRDDDR\\nDDRDRRDDC\\n1 1\\nC\")\n    '1'\n    >>> solution(\"3 3\\nRRD\\nDDR\\nRRC\\n1 4\\nDDDC\\n6 9\\nRDDDDDRRR\\nRRDDRRDDD\\nRRDRDRRDR\\nDDDDRDDRR\\nDRRDRDDDR\\nDDRDRRDDC\\n1 1\\nC\")\n    '3'\n    >>> solution(\"3 3\\nRRD\\nDDR\\nRRC\\n1 4\\nDDDC\\n6 9\\nRDDDDDRRR\\nRRDDRRDDD\\nRRDRDRRDR\\nDDDDRDDRR\\nDRRDRDDDR\\nDDRDRRDDC\\n1 1\\nC\")\n    '9'\n    >>> solution(\"3 3\\nRRD\\nDDR\\nRRC\\n1 4\\nDDDC\\n6 9\\nRDDDDDRRR\\nRRDDRRDDD\\nRRDRDRRDR\\nDDDDRDDRR\\nDRRDRDDDR\\nDDRDRRDDC\\n1 1\\nC\")\n    '0'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        k = int(stdin.readline())\n        s = stdin.readline()\n        print(solution_helper(s, k))\n    return \"\"\n\ndef"
    },
    {
        "number": 2276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    a = [int(x) for x in stdin.readline().split()]\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i + 1] = dp[i] + a[i]\n    dp = [0] + dp\n    ans = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            if s[i:j] == s[i:j][::-1]:\n                ans = max(ans, dp[j] - dp[i])\n    return ans"
    },
    {
        "number": 2277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        a[l - 1:r] = reversed(a[l - 1:r])\n        print('odd' if sum(a[:r] < a[r]) % 2 else 'even')\n    return ''\n"
    },
    {
        "number": 2278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 26 2\n   ... 3 9 1''')\n    '4 5 6 13 26'\n    \"\"\"\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, m = map(int, stdin.readline().split())\n        if m == 1:\n            print(-1)\n        else:\n            k = 1\n            while k * m < b:\n                k += 1\n            print(k, end=\" \")\n            print(*[a + i * m for i in range(1, k)])\n"
    },
    {
        "number": 2279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        a.sort()\n        k = 0\n        for i in range(n):\n            if a[i] > i + 1:\n                k = i + 1\n                break\n        print(k)"
    },
    {
        "number": 2281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [i for i in range(1, n + 1)]\n    a.extend(a)\n    a.sort()\n    return''.join(map(str, a))\n"
    },
    {
        "number": 2282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 2285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\na56f:d3:0:0124:01:f19a:1000:00\\na56f:00d3:0000:0124:0001::\\na56f::0124:0001:0000:1234:0ff0\\na56f:0000::0000:0001:0000:1234:0ff0\\n::\\n0ea::4d:f4:6:0\")\n    a56f:00d3:0000:0124:0001:f19a:1000:0000\n    a56f:00d3:0000:0124:0001:0000:0000:0000\n    a56f:0000:0000:0124:0001:0000:1234:0ff0\n    a56f:0000:0000:0000:0001:0000:1234:0ff0\n    0000:0000:0000:0000:0000:0000:0000:0000\n    00ea:0000:0000:0000:004d:00f4:0006:0000\n    \"\"\"\n    n = int(stdin.readline())\n    for _ in range(n):\n        print(stdin.readline().replace(\"0\", \"0:\", 1))\n"
    },
    {
        "number": 2286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(i) for i in stdin]\n    p = [0] + p + [0]\n    dp = [[0] * n for _ in range(n)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if p[i] == p[j]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    ans = 0\n    for i in range(1, n + 1):\n        ans += dp[n][i]\n    return str(ans)\n"
    },
    {
        "number": 2287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    a.sort()\n    k.sort()\n    a.append(0)\n    k.append(0)\n    i = 0\n    j = 0\n    while i < n and j < q:\n        if a[i] > k[j]:\n            i += 1\n        else:\n            j += 1\n            i += 1\n    return str(n - i)\n"
    },
    {
        "number": 2290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5\\n3 1 2 3\\n3 3 4 5\")\n    'possible'\n    >>> solution(\"10 10\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\")\n    'impossible'\n    \"\"\"\n    m, n = map(int, stdin.split())\n    lcm = [0] * n\n    for _ in range(m):\n        s = list(map(int, stdin.split()[1:]))\n        for i in range(n):\n            lcm[i] = lcm[i] * s[i] // gcd(lcm[i], s[i])\n    return \"possible\" if all(lcm[i] > lcm[j] for i in range(n) for j in range(i + 1, n)) else \"impossible\"\n"
    },
    {
        "number": 2294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 1 1 5\n   ... 3 5 5\n   ... 1 2 5\n   ... 3 6 5\n   ... 2 3 5\n   ... 3 7 5''')\n    '1\\n2\\n1\\n'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 2296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 0 0\n   ... 2 0\n   ... 2 2\n   ... 1 1 2\n   ... 2 1\n   ... 2 2\n   ... 2 3''')\n    '3.4142135624 -1.4142135624'\n    \"\"\"\n   ...\n\n\"\"\"\n\n\"\"\"\n\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 2297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 3\n   ... 2 5\n   ... 5 5\n   ... 4 4\n   ... 2 3''')\n    -2\n    -2\n    -5\n    4\n    -1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    table = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    k = int(stdin.readline())\n    for _ in range(k):\n        l, r = map(int, stdin.readline().split())\n        for j in range(m):\n            if all(table[i][j] <= table[i + 1][j] for i in range(l - 1, r)):\n                print('Yes')\n                break\n        else:\n            print('No')\n"
    },
    {
        "number": 2300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 1 3 1 2 4\n   ... 2 1 4\n   ... 2 1 5\n   ... 2 2 4\n   ... 1 3 10\n   ... 2 1 5''')\n    '12'\n    >>> solution('''5 4\n   ... 1 3 1 2 4\n   ... 3 1 4 1\n   ... 2 2 4\n   ... 1 2 10\n   ... 2 1 5''')\n    '45'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    f = [1, 1]\n    for i in range(2, n + 1):\n        f.append(f[i - 1] - 1 + f[i - 2] - 2)\n    for _ in range(m):\n        t, *args = map(int, stdin.split())\n        if t == 1:\n            x, v = args\n            a[x - 1] = v\n        elif t == 2:\n            l, r = args\n            s = 0\n            for i in range(l, r + 1):\n                s += f[i] * a[i - 1]\n            print(s % 1000000000)\n        else:\n            l, r, d = args\n            for i in range(l, r + 1):\n                a[i - 1] += d\n    return ''\n"
    },
    {
        "number": 2301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        dp[i] = dp[i - 1] + 1\n        for j in range(i - 1):\n            if prices[i] > prices[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return dp[n - 1]\n"
    },
    {
        "number": 2302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    q = int(stdin)\n    a = [0] + a\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][i] = 1\n    for _ in range(q):\n        s, t, u = map(int, stdin.split())\n        if u:\n            dp[s][t] = u\n        else:\n            dp[s][t] = 1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                dp[j][k] = max(dp[j][k], dp[j][i] + dp[i][k])\n    res = []\n    for i in range(1, n + 1):\n        res.append(dp[i][a[i]])\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 2303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 1\n   ... 1 2\n   ... 2 3\n   ... ''')\n    '5\\n4\\n0'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    colors = [int(x) for x in stdin.split('\\n')[1].split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.split('\\n')[2:]]\n    graph = {x: set() for x in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    return '\\n'.join(str(sum(1 for x in graph[i] if colors[x - 1] == i)) for i in range(1, n + 1))\n"
    },
    {
        "number": 2306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 100\n   ... 30\n   ... ''')\n    '2100.0'\n    >>> solution('''2\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ... 30\n   ... 100\n   ..."
    },
    {
        "number": 2307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n1\")\n    'NOT READY'\n    >>> solution(\"1\\n2\")\n    'READY FOR BATTLE'\n    >>> solution(\"4\\n11 12 13 14\")\n    'NOT READY'\n    >>> solution(\"3\\n2 3 4\")\n    'READY FOR BATTLE'\n    >>> solution(\"5\\n1 2 3 4 5\")\n    'NOT READY'\n    \"\"\"\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    count_even = 0\n    count_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    if count_even > count_odd:\n        return \"READY FOR BATTLE\"\n    else:\n        return \"NOT READY\"\n"
    },
    {
        "number": 2308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"14\\nwow\\nthis\\nis\\nthe\\nfirst\\nmcdics\\ncodeforces\\nround\\nhooray\\niam\\nproud\\nabout\\nthat\\n\")\n    3\n    >>> solution(\"7\\narsijo\\nsuggested\\nthe\\nidea\\nfor\\nthis\\nproblem\\n\")\n    0\n    >>> solution(\"4\\nsame\\nsame\\nsame\\ndiffer\\n\")\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            c[i][j] = a[i] * b[j]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            for x in range(i, n):\n                for y in range(j, m):\n                    if c[x][y] == k:\n                        ans += 1\n    return str(ans)"
    },
    {
        "number": 2312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n4 3 0 1 2 0\")\n    'YES'\n    >>> solution(\"2\\n2 5\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = [2 ** i for i in b]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(a[i:j]) in a[j:]:\n                print(\"YES\")\n                return\n    print(\"NO\")\n    return\n"
    },
    {
        "number": 2313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 2\n   ... ''')\n    '499122177 0'\n    >>> solution('''8\n   ... 10 4 3 6 5 10 7 5\n   ... ''')\n    '499122193 249561095 249561092 873463811 499122178 124780545 623902721 0'\n    \"\"\"\n    n = int(stdin.readline())\n    chests = [int(x) for x in stdin.readline().split()]\n    chests.sort()\n    mimics = 0\n    earnings = 0\n    for i in range(n):\n        if chests[i] == i + 1:\n            mimics += 1\n        else:\n            earnings += chests[i]\n    return f'{earnings} {mimics}'\n"
    },
    {
        "number": 2314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    picture = [list(stdin.split()[i]) for i in range(n)]\n    options = [list(map(int, stdin.split()[i])) for i in range(q)]\n    return '\\n'.join(map(lambda option: str(max_area(picture, option)), options))\n\n\ndef"
    },
    {
        "number": 2315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"100 3 4\\n189 3 4\\n64 2 3\\n63 2 3\\n30 27 7\\n10 9 1\\n69117 21 2\")\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nhello\\nhello\\nhello\\nhelloo\\nhello\\nhlllloo\\nhello\\nhelo\")\n    'YES\\nYES\\nNO\\nNO'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s, t = s[1:], t[1:]\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return -1\n    if s == t:\n        return 0\n    if s == t[::-1]:\n        return n\n    return min(n, m)\n"
    },
    {
        "number": 2321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 3 1 4 1 5 9\n   ... 3\n   ... 7 7\n   ... 0 2\n   ... 8 17\n   ... ''')\n    '5 10 18'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    s = [int(x) for x in stdin.split('\\n')[1].split()]\n    q = int(stdin.split('\\n')[2])\n    l = [int(x) for x in stdin.split('\\n')[3 + i].split() for i in range(q)]\n    r = [int(x) for x in stdin.split('\\n')[3 + q + i].split() for i in range(q)]\n    return''.join(str(len(set(s[l[i]:r[i] + 1]))) for i in range(q))\n"
    },
    {
        "number": 2324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 1 1 1\")\n    2\n    >>> solution(\"3\\n1 1 1\")\n    2\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>> solution(\"4\\n2 1 1\")\n    7\n    >>>"
    },
    {
        "number": 2327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 4\n   ... 1 2 3 3 1 4 3\n   ... 3 1\n   ... 2 3\n   ... 2 4''')\n    '5\\n4\\n2\\n0'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    towers = [list(map(int, stdin.split('\\n')[2 + i].split())) for i in range(m)]\n    towers.sort(key=lambda x: x[0])\n    dp = [0] * (m + 1)\n    for i in range(m):\n        for j in range(i + 1, m):\n            if towers[i][1] > towers[j][1]:\n                dp[j] = min(dp[j], dp[i] + 1)\n    return '\\n'.join(map(str, dp[1:]))\n"
    },
    {
        "number": 2330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4\\n1 1 1 1\\n3 1\\n1 2 3\\n3 3\\n1 2 3\")\n    8\n    >>> solution(\"4 4\\n1 1 1 1\\n3 1\\n1 2 3\\n3 3\\n1 2 3\")\n    -1\n    >>> solution(\"4 4\\n1 1 1 1\\n3 1\\n1 2 3\\n3 3\\n1 2 3\")\n    12\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n10 10\\n1 10\\n6 9\\n7 3\")\n    'Infinite'\n    \"\"\"\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"Infinite\"\n    if a > b:\n        return \"Finite\"\n    return \"Infinite\"\n"
    },
    {
        "number": 2332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4 4\\n100 1 1 5 10\\n1 1\\n1 3\\n2 2 5\\n1 4\\ni am the second\")\n    '107'\n    >>> solution(\"5 4 4\\n100 20 1 5 10\\n1 1\\n1 3\\n2 2 5\\n1 4\\ni am the second\")\n    '116'\n    \"\"\"\n    n, k, m = map(int, stdin.split())\n    words = stdin.split(\"\\n\")[1:-1]\n    costs = list(map(int, stdin.split(\"\\n\")[2:]))\n    groups = []\n    for i in range(k):\n        groups.append(list(map(int, stdin.split(\"\\n\")[3 + i].split())))\n    message = stdin.split(\"\\n\")[-1].split()\n    cost = 0\n    for i in range(m):\n        if message[i] in words:\n            cost += costs[words.index(message[i])]\n        else:\n            for j in range(k):\n                if message[i] in words[groups[j][0] - 1:groups[j][1]]:\n                    cost += costs[groups[j][0] - 1]\n                    break\n    return str(cost)\n"
    },
    {
        "number": 2333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 2334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    x, f = map(int, stdin.split())\n    a.sort()\n    a.reverse()\n    a = a[:N]\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a."
    },
    {
        "number": 2335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2 4\n   ... 91 94\n   ... 92 97\n   ... 97 99\n   ... 92 94\n   ... 93 97\n   ... 95 96\n   ... 90 100\n   ... ''')\n    '3\\n3\\n0\\n4\\n'\n    \"\"\"\n    n, k, q = map(int, stdin.split())\n    recipes = [tuple(map(int, line.split())) for line in stdin.split('\\n')[:n]]\n    admissible = [0] * 200001\n    for l, r in recipes:\n        admissible[l] += 1\n        admissible[r + 1] -= 1\n    for i in range(200001):\n        admissible[i] += admissible[i - 1]\n    for a, b in [tuple(map(int, line.split())) for line in stdin.split('\\n')[n:]]:\n        print(admissible[b] - admissible[a - 1])\n"
    },
    {
        "number": 2337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    cnt = 0\n    for i in range(m):\n        if b[i] > a[0]:\n            cnt += 1\n        else:\n            break\n    return cnt\n"
    },
    {
        "number": 2338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 1\\n-1 -1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1 0\\n1 1\\n1 1\")\n    12\n    >>> solution(\"3\\n5 0\\n0 5\\n1"
    },
    {
        "number": 2339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n2 5\\n4\\n1 8 2 3\\n3\\n3 8 9\\n5\\n64 25 75 100 50\\n1\\n42\\n6\\n96 128 88 80 52 7\\n5\\n2 4 8 16 17\")\n    '5 2\\n8 2 1 3\\n9 3 8\\n100 50 25 75 64\\n42\\n128 96 80 88 52 7\\n17 2 4 8 16'\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        for j in range(i + 1, n):\n            b.append(gcd(a[i], a[j]))\n    b.sort()\n    return''.join(map(str, b))\n\n\ndef"
    },
    {
        "number": 2340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 3 1\n   ... 8 6\n   ... 8 7 6 5 3 2\n   ... 9 6\n   ... 9 8 5 4 3 1\n   ... 1 1\n   ... 1''')\n    '0'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    scraps = [list(stdin.split()[i]) for i in range(n)]\n    scraps = [list(set(scrap)) for scrap in scraps]\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in set(tuple(scrap) for scrap in scraps)]\n    scraps.sort(key=len)\n    scraps = [list(scrap) for scrap in"
    },
    {
        "number": 2342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    No\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2 2\n   ... #B\n   ... G.\n   ... 2 3\n   ... G.#\n   ... B#.\n   ... 3 3\n   ... #B.\n   ... #..\n   ... GG.\n   ... 2 2\n   ... #B\n   ... B.''')\n    Yes\n    >>> solution('''1 1\n   ... 1 2\n   ... G.\n   ... 2"
    },
    {
        "number": 2343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n10 9 2\\n20 33 1\\n30 115 1\\n5 3 2\")\n    32\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    offers = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    offers.sort(key=lambda x: x[0])\n    money = 0\n    for a, b, k in offers:\n        money += b\n        if k > 1:\n            money -= a * (k - 1)\n    return money\n"
    },
    {
        "number": 2345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    parents = [int(x) for x in stdin.readline().split()]\n    children = [int(x) for x in stdin.readline().split()]\n    return str(solve(n, parents, children))\n\ndef"
    },
    {
        "number": 2347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abacaba\\nzyxaabcaabkjh\\nonetwothree\\nthreetwoone\\none\\nzzonneyy\\none\\none\\ntwenty\\nten\")\n    'YES\\nYES\\nNO\\nYES\\nNO'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        p = stdin.readline().strip()\n        h = stdin.readline().strip()\n        if len(p)!= len(h):\n            print(\"NO\")\n            continue\n        if p == h:\n            print(\"YES\")\n            continue\n        if len(p) == 1:\n            print(\"NO\")\n            continue\n        p_shuffled = \"\".join(sorted(p))\n        if p_shuffled == h:\n            print(\"YES\")\n            continue\n        if p_shuffled[:len(p) // 2] == h[:len(p) // 2]:\n            print(\"YES\")\n            continue\n        print(\"NO\")\n"
    },
    {
        "number": 2348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('A', '0').replace('B', '1').replace('C', '2').replace('D', '3').replace('E', '4').replace('F', '5'), 16))\n\nprint(solution(input()))\n"
    },
    {
        "number": 2349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, len = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    good = 0\n    for i in range(n):\n        if arr[i] == -1:\n            for j in range(1, k + 1):\n                if i + len - 1 < n and arr[i + len - 1] == j:\n                    good += 1\n                elif i + len - 1 >= n:\n                    break\n    return good % 1000000007\n"
    },
    {
        "number": 2352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n...\\n...\\n...\\n4 4\\n..c.\\nadda\\nbbcb\\n....\\n3 5\\n..b..\\naaaaa\\n..b..\\n\")\n    'YES\\n0\\nYES\\n4\\n2 1 2 4\\n3 1 3 4\\n1 3 3 3\\n2 2 2 3'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 3 6 4\n   ... 11 3 6 4\n   ... 5 9 4 10\n   ... 6 5 2 3\n   ... 1 1 1 1\n   ... 3947465 47342 338129 123123\n   ... 234123843 13 361451236 361451000\n   ... ''')\n    27\n    >>> solution('''10 3 6 4\n   ... 11 3 6 4\n   ... 5 9 4 10\n   ... 6 5 2 3\n   ... 1 1 1 1\n   ... 3947465 47342 338129 123123\n   ... 234123843 13 361451236 361451000\n   ... ''')\n    27\n    >>> solution('''10 3 6 4\n   ... 11 3 6 4\n   ... 5 9 4 10\n   ... 6 5 2 3\n   ... 1 1 1 1\n   ... 3947465 47342 338129 123123\n   ... 234123843 13 361451236 361451000\n   ... ''')\n    -1\n    >>> solution('''10 3 6 4\n   ... 11 3 6 4\n   ... 5 9 4 10\n   ... 6 5 2 3\n   ... 1 1 1 1\n   ... 3947465 47342 338129 123123\n   ... 234123843 13 361451236 361451000\n   ... ''')\n    6471793\n    >>> solution('''10 3 6 4\n   ... 11 3 6 4\n   ... 5 9 4 10\n   ... 6 5 2 3\n   ... 1 1 1 1\n   ... 3947465 47342 338129 123123\n   ... 234123843 13 361451236 361451000\n   ... ''')\n    358578060125049\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 0\\n\")\n    1 2\n    1 3\n    1 4\n    1 5\n    1 6\n    2 3\n    2 4\n    2 5\n    2 6\n    3 4\n    3 5\n    3 6\n    \"\"\"\n    n, p = map(int, stdin.split())\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i!= j and (i + j) % 2 == 0:\n                print(i, j)\n    return \"\"\n"
    },
    {
        "number": 2356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1\\n6\\n1 2 3 4 5 1\\n9\\n4 1 2 4 5 4 3 2 1\\n4\\n3 3 3 3\\n\")\n    '6\\n-1\\n2\\n2'\n    \"\"\"\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        a.sort()\n        ans = -1\n        for i in range(n - 1):\n            if a[i] < a[i + 1]:\n                ans = i + 2\n                break\n        print(ans)\n"
    },
    {
        "number": 2358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''30 10 20\n   ... 41 15 30\n   ... 18 13 18''')\n    '2'\n    >>> solution('''30 10 20\n   ... 41 15 30\n   ... 18 13 18\n   ... 30 10 20\n   ... 41 15 30\n   ... 18 13 18''')\n    '7'\n    \"\"\"\n   ..."
    },
    {
        "number": 2360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 3\\n1 4\\n3\\n1 5\\n1 1\\n2 3\")\n    '1 2\\n1 0 2'\n    \"\"\"\n    n = int(stdin.readline())\n    queue = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        queue.append((l, r))\n    queue.sort(key=lambda x: x[0])\n    queue = deque(queue)\n    tea_queue = deque()\n    for i in range(n):\n        l, r = queue.popleft()\n        if len(tea_queue) == 0:\n            tea_queue.append(r)\n        else:\n            while len(tea_queue) > 0 and tea_queue[0] <= l:\n                tea_queue.popleft()\n            if len(tea_queue) == 0:\n                tea_queue.append(r)\n            else:\n                tea_queue.append(r)\n    return \" \".join(map(str, tea_queue))\n"
    },
    {
        "number": 2361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 3 4\n   ... 1 2\n   ... 2 3\n   ... ''')\n    '1'\n    >>> solution('''3\n   ... 2 3 4\n   ... 1 3\n   ... 2 3\n   ... ''')\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    g = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(a[i], a[j]) > 1:\n                g[i] = j\n                break\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if g[i] == j:\n                ans = max(ans, j - i)\n    return str(ans)\n"
    },
    {
        "number": 2363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 2364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += a[i] * (a[i + 1] - a[i])\n    return ans % 1000000007"
    },
    {
        "number": 2365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 2 1 2\n   ... ''')\n    '3"
    },
    {
        "number": 2367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, A, B = map(int, stdin.split())\n    return str(pow(2, H * W - A * B, 10 ** 9 + 7))"
    },
    {
        "number": 2368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 2 3\n   ... 2 2 2\n   ... 1 2\n   ... 2 3''')\n    'Yes'\n    >>> solution('''3 2\n   ... 1 2 3\n   ... 2 2 2\n   ... 1 2\n   ... 2 3''')\n    'No'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    a = list(map(int, stdin.split('\\n')[2:2 + n]))\n    b = list(map(int, stdin.split('\\n')[2 + n:]))\n    for _ in range(m):\n        x, y = map(int, stdin.split('\\n')[2 + n + _].split())\n        if a[x - 1] - b[y - 1] == 1:\n            a[x - 1] -= 1\n            b[y - 1] += 1\n        elif a[x - 1] - b[y - 1] == -1:\n            a[x - 1] += 1\n            b[y - 1] -= 1\n        else:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 2369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 2371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Z, W = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max(0, abs(sum(a) - Z * N)))"
    },
    {
        "number": 2372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Get input\n    H, W = map(int, stdin.split(' '))\n    C_h, C_w = map(int, stdin.split(' '))\n    D_h, D_w = map(int, stdin.split(' '))\n    # Create maze\n    maze = []\n    for _ in range(H):\n        maze.append(list(stdin.split('\\n')[1]))\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    # Create queue\n    queue = []\n    # Create visited\n"
    },
    {
        "number": 2373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if p[i] == i + 1:\n            continue\n        else:\n            p[i], p[p[i] - 1] = p[p[i] - 1], p[i]\n            count += 1\n    return str(count)"
    },
    {
        "number": 2374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    bombs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split(' '))\n        bombs.append((a, b))\n    cords = []\n    for _ in range(m):\n        l, r = map(int, stdin.split(' '))\n        cords.append((l, r))\n    bombs.sort()\n    cords.sort()\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords."
    },
    {
        "number": 2375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x % 2 == 0:\n        if y % 2 == 0:\n            return \"Alice\"\n        else:\n            return \"Brown\"\n    else:\n        if y % 2 == 0:\n            return \"Brown\"\n        else:\n            return \"Alice\""
    },
    {
        "number": 2376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 2377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2\n   ... 2 3''')\n    '125000001'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted(edges, key=lambda x: x[0])\n    edges = [edge for edge in edges if edge[0]!= edge[1]]\n    edges = sorted("
    },
    {
        "number": 2379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, C = [int(x) for x in stdin.split()]\n    S = stdin.split()[1]\n    days = []\n    for i in range(N):\n        if S[i] == 'o':\n            days.append(i + 1)\n    for i in range(K):\n        days = days[C:]\n    return''.join([str(x) for x in days])"
    },
    {
        "number": 2380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    s = 0\n    for i in range(n // 2):\n        s += a[i]\n    return str(s)"
    },
    {
        "number": 2385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2\n   ... 1 3\n   ... ''')\n    '2'\n    >>> solution('''3\n   ... 1 2\n   ... 1 3\n   ... 2 3\n   ... ''')\n    '1'\n    >>> solution('''3\n   ... 1 2\n   ... 1 3\n   ... 2 3\n   ... 3 1\n   ... ''')\n    '1'\n    >>> solution('''3\n   ... 1 2\n   ... 1 3\n   ... 2 3\n   ... 3 1\n   ... 2 1\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {v: set() for v in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    return str(count_ways(graph, n))\n\n\ndef"
    },
    {
        "number": 2386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n   ... 2 2 3 5 5''')\n    '2'\n    >>> solution('''5\n"
    },
    {
        "number": 2387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 5\n   ... 3 3''')\n    '3'\n    >>> solution('''2\n   ... 1 5\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n   ... 3 3\n   ... 1 1\n    "
    },
    {
        "number": 2389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1 3 0\n   ... AB\n   ... AC''')\n    Yes\n    A\n    C\n    \"\"\"\n    n, a, b, c = [int(x) for x in stdin.split()]\n    if n == 1:\n        if a == b == c == 0:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if a == b == c == 0:\n            return 'No'\n        else:\n            if a == 0:\n                if b == 0:\n                    return 'No'\n                else:\n                    return 'Yes'\n            else:\n                if b == 0:\n                    if c == 0:\n                        return 'No'\n                    else:\n                        return 'Yes'\n                else:\n                    if c == 0:\n                        return 'Yes'\n                    else:\n                        return 'No'\n"
    },
    {
        "number": 2390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 2 1\n   ... 1 2 3\n   ... ''')\n    '1 3'\n    \"\"\"\n    N, *a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    a = [a[i] ^ b[i] for i in range(N)]\n    return '\\n'.join(map(str, a))\n"
    },
    {
        "number": 2392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'"
    },
    {
        "number": 2393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"onetwone\")\n    'onetwone'\n    >>> solution(\"testme\")\n    'testme'\n    >>> solution(\"oneoneone\")\n    'onetwone'\n    >>> solution(\"twotwo\")\n    'twotwo'\n    >>> solution(\"onetwone\")\n    'onetwone'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"two\")\n    'two'\n    >>> solution(\"one\")\n    'one'\n    >>> solution(\"twooooo\")\n    'twooooo'\n    >>> solution(\"ttttwo\")\n    'ttttwo'\n    >>> solution(\"ttwwoo\")\n    'twwoo'\n    >>> solution(\"ooone\")\n    'ooone'\n    >>> solution(\"onnne\")\n    'onnne'\n    >>> solution(\"oneeeee\")\n    'oneeeee'\n    >>> solution(\"oneeeeeeetwooooo\")\n    'oneeeeeeetwooooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetwooo\")\n    'onetwonetwooneooonetwooo'\n    >>> solution(\"onetwonetwooneooonetw"
    },
    {
        "number": 2394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 2\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 4 6\n   ... ''')\n    '20'\n    >>> solution('''13 3\n   ... 1 2\n   ... 3 2\n   ... 4 2\n   ... 5 2\n   ... 3 6\n   ... 10 6\n   ... 6 7\n   ... 6 13\n   ... 5 8\n   ... 5 9\n   ... 9 11\n   ... 11 12\n   ... ''')\n    '114'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for edge in edges:\n        graph[edge[0]].add(edge[1])\n        graph[edge[1]].add(edge[0])\n    return str(sum(1 for i in range(1, n + 1) for j in graph[i] if i < j) * k)\n"
    },
    {
        "number": 2395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 2397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j] + sum(a[i:j+1]))\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = max(dp[i][j], dp[i][j-1] + sum(a[i-1:j]))\n    \n    return dp[n][k]"
    },
    {
        "number": 2398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2 2 2\\n0 0 -2 -2 2 2\\n3 1 4 1\\n0 0 -1 -1 1 1\\n1 1 1 1\\n1 1 1 1 1 1\\n0 0 0 1\\n0 0 0 0 0 1\\n5 1 1 1\\n0 0 -100 -100 0 100\\n1 1 5 1\\n0 0 -100 -100 100 0\\n\")\n    'Yes'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... XX......XX...X\n   ... 4 2\n   ... X...X..X\n   ... 5 3\n   .........X..X''')\n    'YES'\n    >>> solution('''3 2\n   ... XX......XX...X\n   ... 4 2\n   ... X...X..X\n   ... 5 3\n   .........X..X''')\n    'NO'\n    >>> solution('''3 2\n   ... XX......XX...X\n   ... 4 2\n   ... X...X..X\n   ... 5 3\n   .........X..X''')\n    'YES'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 2402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 1 3\\n\")\n    '1 3'\n    >>> solution(\"1 6 3 4\\n\")\n    '2 6'\n    \"\"\"\n    n, x, y = map(int, stdin.split())\n    return str(min(x, y) + 1) + \" \" + str(max(x, y) + 1)\n"
    },
    {
        "number": 2403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if b[i]!= -1:\n            ans += a[b[i]]\n    print(ans)\n    print(*[i + 1 for i in range(n) if b[i]!= -1])\n    return ''"
    },
    {
        "number": 2404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)\n"
    },
    {
        "number": 2405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 2 1 8\n   ... 1 1 2\n   ... 1 5 3\n   ... 1 2 1\n   ... 2 2\n   ... 1 4 2\n   ... 1 3 2\n   ... 2 1\n   ... 2 3''')\n    '3'\n    >>> solution('''5 4 10 1 6\n   ... 1 1 5\n   ... 1 5 5\n   ... 1 3 2\n   ... 1 5 2\n   ... 2 1\n   ... 2 2''')\n    '7'\n    \"\"\"\n    n, k, a, b, q = map(int, stdin.split())\n    orders = [0] * n\n    for _ in range(q):\n        if stdin.startswith('1'):\n            day, amount = map(int, stdin.split()[1:])\n            orders[day - 1] += amount\n        else:\n            day = int(stdin.split()[1])\n            print(sum(orders[day - k:day]))\n"
    },
    {
        "number": 2406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n    h.sort()\n    h.append(0)\n    h.insert(0, 0)\n    h.append(10 ** 12)\n    h.insert(0, 10 ** 12)\n    h.sort()\n    h.pop()\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n    h.pop(0)\n"
    },
    {
        "number": 2407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 3 5\n   ... 4 1\n   ... 5 2 3 5''')\n    2\n    >>> solution('''5 2\n   ... 1 3 5\n   ... 4 1\n   ... 5 2 3 5''')\n    2\n    >>> solution('''5 2\n   ... 1 3 5\n   ... 4 1\n   ... 5 2 3 5\n   ... 5 2 3 5\n   ... 5 2 3 5''')\n    2\n    \"\"\"\n   ..."
    },
    {
        "number": 2408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1 1\n   ... 1 0\n   ... 5 2 3\n   ... 1 2 3 2 2\n   ... 4 3 4\n   ... 0 2 4 3\n   ... 2 3 5\n   ... 3 0\n   ... 7 2 3\n   ... 3 0 2 1 3 0 1\n   ... 7 1 4\n   ... 4 4 3 0 2 4 2\n   ... 5 2 3\n   ... 1 2 3 2 2\n   ... ''')\n    'No'\n    >>> solution('''2 1 1\n   ... 1 0\n   ... 5 2 3\n   ... 1 2 3 2 2\n   ... 4 3 4\n   ... 0 2 4 3\n   ... 2 3 5\n   ... 3 0\n   ... 7 2 3\n   ... 3 0 2 1 3 0 1\n   ... 7 1 4\n   ... 4 4 3 0 2 4 2\n   ... 5 2 3\n   ... 1 2 3 2 2\n   ... ''')\n    'Yes'\n    \"\"\"\n    n, k, l = map(int, stdin.split('\\n')[0].split())\n    p = [0] + [int(i) for i in stdin.split('\\n')[1].split()]\n    d = [int(i) for i in stdin.split('\\n')[2].split()]\n    x = 0\n    for t in range(n):\n        x = (x + k) % (2 * n)\n        if x > n:\n            x = 2 * n - x\n        if d[x] + p[t % (2 * n)] > l:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 2410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 3 4\n   ... 3\n   ... 7 4 -1\n   ... 3\n   ... 5 -5 5''')\n    'YES'\n    >>> solution('''4\n   ... 1 2 3 4\n   ... 3\n   ... 7 4 -1\n   ... 3\n   ... 5 -5 5''')\n    'NO'\n    >>> solution('''4\n   ... 1 2 3 4\n   ... 3\n   ... 7 4 -1\n   ... 3\n   ... 5 -5 5''')\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == 11 and stdin.startswith('8') else 'NO'"
    },
    {
        "number": 2413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n11111\\n110\\n\")\n    6\n    >>> solution(\"5\\n11111\\n110\\n\")\n    8\n    >>> solution(\"5\\n11111\\n110\\n\")\n    10\n    >>> solution(\"5\\n11111\\n110\\n\")\n    6\n    \"\"\"\n    n = int(stdin)\n    rooms = [int(c) for c in stdin]\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        if rooms[i] == 1:\n            dp[i][i + 1] = 1\n    for k in range(2, n):\n        for i in range(n - k):\n            j = i + k\n            if rooms[i] == 1 and rooms[j] == 1:\n                dp[i][j] = dp[i + 1][j - 1]\n            elif rooms[i] == 0 and rooms[j] == 0:\n                dp[i][j] = dp[i + 1][j - 1] + dp[i][j - 1]\n            else:\n                dp[i][j] = dp[i + 1][j - 1]\n    return max(dp[0])\n"
    },
    {
        "number": 2414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"A\") == stdin.count(\"E\") == stdin.count(\"I\") == stdin.count(\"O\") == stdin.count(\"U\") else \"NO\"\n"
    },
    {
        "number": 2416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a_b = [a[i] - b[i - 1] for i in range(1, n)]\n    a_b_set = set(a_b)\n    if len(a_b_set) == 1:\n        return 0\n    else:\n        return len(a_b_set) - 1\n"
    },
    {
        "number": 2418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 -1 7 3\n   ... 2\n   ... 2 4 -3\n   ... 3 4 2\n   ... ''')\n    '5\\n5\\n6\\n'\n    >>> solution('''6\n   ... -9 -10 -9 -6 -5 4\n   ... 3\n   ... 2 6 -9\n   ... 1 2 -10\n   ... 4 6 -3\n   ... ''')\n    '3\\n3\\n3\\n1\\n'\n    >>> solution('''1\n   ... 0\n   ... 2\n   ... 1 1 -1\n   ... 1 1 -1\n   ... ''')\n    '0\\n0\\n-1\\n'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    b = [0] * n\n    c = [0] * n\n    for _ in range(q):\n        l, r, x = map(int, stdin.readline().split())\n        b[l - 1] += x\n        b[r] -= x\n        c[l - 1] += x\n        c[r] -= x\n    for i in range(n):\n        a[i] += b[i] + c[i]\n    return '\\n'.join(map(str, a))\n"
    },
    {
        "number": 2419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 30\n   ... 67\n   ... 4\n   ... 14\n   ... ''')\n    2 2 2\n    7 5 3\n    -1\n    0 0 2\n    \"\"\"\n   ..."
    },
    {
        "number": 2423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 2 1\n   ... 1 1''')\n    '124780545'\n    >>> solution('''5\n   ... 2 1 2\n   ... 2 3 1\n   ... 3 2 4 3\n   ... 2 1 4\n   ... 3 4 3 2''')\n    '798595483'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    items = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    items = [item for item in items if len(item) == n]\n    items = [item for item in items if sum(item) <= 10 ** 6]\n    items = [item for item in items if len(set(item)) == len(item)]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set(item))]\n    items = [item for item in items if len(item) == len(set("
    },
    {
        "number": 2425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2\n   ... 3\n   ... 5''')\n    '3\n    '\n    >>> solution('''3\n   ... 2\n   ... 3\n   ... 5\n   ... 6\n   ... 7\n   ... 8\n   ... 9\n   ... 10''')\n    '1\n    '\n    >>> solution('''3\n   ... 2\n   ... 3\n   ... 5\n   ... 6\n   ... 7\n   ... 8\n   ... 9\n   ... 10\n   ... 11\n   ... 12\n   ... 13\n   ... 14\n   ... 15\n   ... 16\n   ... 17\n   ... 18\n   ... 19\n   ... 20\n   ... 21\n   ... 22\n   ... 23\n   ... 24\n   ... 25\n   ... 26\n   ... 27\n   ... 28\n   ... 29\n   ... 30\n   ... 31\n   ... 32\n   ... 33\n   ... 34\n   ... 35\n   ... 36\n   ... 37\n   ... 38\n   ... 39\n   ... 40\n   ... 41\n   ... 42\n   ... 43\n   ... 44\n   ... 45\n   ... 46\n   ... 47\n   ... 48\n   ... 49\n   ... 50\n   ... 51\n   ... 52\n   ... 53\n   ... 54\n   ... 55\n   ... 56\n   ... 57\n   ... 58\n   ... 59\n   ... 60\n   ... 61\n   ... 62\n   ... 63\n   ... 64\n   ... 65\n   ... 66\n   ... 67\n   ... 68\n   ... 69\n   ... 70\n   ... 71\n   ... 72\n   ... 73\n   ... 74\n   ... 75\n   ... 76\n   ... 77\n   ... 78\n   ... 79\n   ... 80\n   ... 81\n   ... 82\n   ... 83\n   ... 84\n   ... 85\n   ... 86\n   ... 87\n   ... 88\n   ... 89\n   ... 90\n   ... 91\n   ... 92\n   ... 93\n   ... 94\n   ... 95\n   ... 96\n   ... 97\n   ... 98\n   ... 99\n   ... 100\n   ... 101\n   ... 102\n   ... 103\n   ... 104\n   ... 105\n   ... 106\n   ... 107\n   ... 108\n   ... 109\n   ... 110\n   ... 111\n   ... 112\n   ... 113\n   ... 114\n   ... 115\n   ... 116\n   ... 117\n   ... 118\n   ... 119\n   ... 120\n   ... 121\n   ... 122\n   ... 123\n   ... 124\n   ... 125\n   ... 126\n   ... 127\n   ... 128\n   ... 129\n   ... 130\n   ... 131\n   ... 132\n   ... 133\n   ... 134\n   ... 135\n   ... 136\n   ... 137\n   ... 138\n   ... 139\n   ... 140\n   ... 141\n   ... 142\n   ... 143\n   ... 144\n   ... 145\n   ... 146\n   ... 147\n   ... 148\n   ... 149\n   ... 150\n   ... 151\n   ... 152\n   ... 153\n   ... 154\n   ... 155\n   ... 156\n   ... 157\n   ... 158\n   ... 159\n   ... 160\n   ... 161\n   ... 162\n   ... 163\n   ... 164\n   ... 165\n   ... 166\n   ... 167\n   ... 168\n   ... 169\n   ... 170\n   ... 171\n   ... 172\n   ... 173\n   ... 174\n   ... 175\n   ... 176\n   ... 177\n   ... 178\n   ... 179\n   ... 180\n   ... 181\n   ... 182\n   ... 183\n   ... 184\n   ... 185\n   ... 186\n   ... 187\n   ... 188\n   ... 189\n   ... 190\n   ... 191\n   ... 192\n   ... 193\n   ... 194\n   ... 195\n   ... 196\n   ... 197\n   ... 198\n   ... 199\n   ... 200\n   ... 201\n   ... 202\n   ... 203\n   ... 204\n   ... 205\n   ... 206\n   ... 207\n   ... 208\n   ... 209\n   ... 210\n   ... 211\n   ... 212\n   ... 213\n   ... 214\n   ... 215\n   ... 216\n   ... 217\n   ... 218\n   ... 219\n   ... 220\n   ... 221\n   ... 222\n   ... 223\n   ... 224\n   ... 225\n   ... 226\n   ... 227\n   ... 228\n   ... 229\n   ... 230\n   ... 231\n   ... 232\n   ... 233\n   ... 234\n   ... 235\n   ... 236\n   ... 237\n   ... 238\n   ... 239\n   ... 240\n   ... 241\n   ... 242\n   ... 243\n   ... 244\n   ... 245\n   ... 246\n   ... 247\n   ... 248\n   ... 249\n   ... 250\n   ... 251\n   ... 252\n   ... 253\n   ... 254\n   ... 255\n   ... 256\n   ... 257\n   ... 258\n   ... 259\n   ... 260\n   ... 261\n   ... 262\n   ... 263\n   ... 264\n   ... 265\n   ... 266\n   ... 267\n   ... 268\n   ... 269\n   ... 270\n   ... 271\n   ... 272\n   ... 273\n   ... 274\n   ... 275\n   ... 276\n   ... 277\n   ... 278\n   ... 279\n   ... 280\n   ... 281\n   ... 282\n   ... 283\n   ... 284\n   ... 285\n   ... 286\n   ... 287\n   ... 288\n   ... 289\n   ... 290\n   ... 291\n   ... 292\n   ... 293\n   ... 294\n   ... 295\n   ... 296\n   ... 297\n   ... 298\n   ... 299\n   ... 300\n   ... 301\n   ... 302\n   ... 303\n   ... 304\n   ... 305\n   ... 306\n   ... 307\n   ... 308\n   ... 309\n   ... 310\n   ... 311\n   ... 312\n   ... 313\n   ... 314\n   ... 315\n   ... 316\n   ... 317\n   ... 318\n   ... 319\n   ... 320\n   ... 321\n   ... 322\n   ... 323\n   ... 324\n   ... 325\n   ... 326\n   ... 327\n   ... 328\n   ... 329\n   ... 330\n   ... 331\n   ... 332\n   ... 333\n   ... 334\n   ... 335\n   ... 336\n   ... 337\n   ... 338\n   ..."
    },
    {
        "number": 2426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 4 3\\n1\\n15\\n2\\n3 5\")\n    '1\\n2\\n-1'\n    >>> solution(\"3\\n1 4 3\\n1\\n15\\n2\\n3 5\")\n    '1\\n2\\n-1'\n    >>> solution(\"3\\n1 4 3\\n1\\n15\\n2\\n3 5\")\n    '1\\n2\\n-1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 3 1 2 3 1 2 3 15\n   ... ''')\n    '6'\n    >>> solution('''10\n   ... 997230370 58052053 240970544 715275815 250707702 156801523 44100666 64791577 43523002 480196854\n   ... ''')\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    good = 0\n    for i in range(n - 2):\n        for j in range(i + 3, n):\n            if (a[i] ^ a[j]) == (a[i + 1] + a[i + 2] + a[i + 3]):\n                good += 1\n    return str(good)\n"
    },
    {
        "number": 2428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'abcba' else 'NO'"
    },
    {
        "number": 2429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2\")\n    2\n    >>> solution(\"8\\n4\")\n    6\n    >>> solution(\"16\\n8\")\n    6\n    >>> solution(\"24\\n12\")\n    12\n    >>> solution(\"32\\n16\")\n    16\n    >>> solution(\"40\\n20\")\n    20\n    >>> solution(\"48\\n24\")\n    24\n    >>> solution(\"56\\n32\")\n    32\n    >>> solution(\"64\\n40\")\n    40\n    >>> solution(\"72\\n48\")\n    48\n    >>> solution(\"80\\n56\")\n    56\n    >>> solution(\"88\\n64\")\n    64\n    >>> solution(\"96\\n72\")\n    72\n    >>> solution(\"104\\n80\")\n    80\n    >>> solution(\"112\\n88\")\n    88\n    >>> solution(\"120\\n96\")\n    96\n    >>> solution(\"128\\n104\")\n    104\n    >>> solution(\"136\\n112\")\n    112\n    >>> solution(\"144\\n120\")\n    120\n    >>> solution(\"152\\n128\")\n    128\n    >>> solution(\"160\\n136\")\n    136\n    >>> solution(\"168\\n144\")\n    144\n    >>> solution(\"176\\n152\")\n    152\n    >>> solution(\"184\\n160\")\n    160\n    >>> solution(\"192\\n168\")\n    168\n    >>> solution(\"200\\n176\")\n    176\n    >>> solution(\"208\\n184\")\n    184\n    >>> solution(\"216\\n192\")\n    192\n    >>> solution(\"224\\n200\")\n    200\n    >>> solution(\"232\\n208\")\n    208\n    >>> solution(\"240\\n216\")\n    216\n    >>> solution(\"248\\n224\")\n    224\n    >>> solution(\"256\\n232\")\n    232\n    >>> solution(\"264\\n240\")\n    240\n    >>> solution(\"272\\n248\")\n    248\n    >>> solution(\"280\\n256\")\n    256\n    >>> solution(\"288\\n264\")\n    264\n    >>> solution(\"296\\n272\")\n    272\n    >>> solution(\"304\\n280\")\n    280\n    >>> solution(\"312\\n288\")\n    288\n    >>> solution(\"320\\n296\")\n    296\n    >>> solution(\"328\\n304\")\n    304\n    >>> solution(\"336\\n312\")\n    312\n    >>> solution(\"344\\n320\")\n    320\n    >>> solution(\"352\\n328\")\n    328\n    >>> solution(\"360\\n336\")\n    336\n    >>> solution(\"368\\n344\")\n    344\n    >>> solution(\"376\\n352\")\n    352\n    >>> solution(\"384\\n360\")\n    360\n    >>> solution(\"392\\n368\")\n    368\n    >>> solution(\"400\\n376\")\n    376\n    >>> solution(\"408\\n384\")\n    384\n    >>> solution(\"416\\n392\")\n    392\n    >>> solution(\"424\\n400\")\n    400\n    >>> solution(\"432\\n408\")\n    408\n    >>> solution(\"440\\n416\")\n    416\n    >>> solution(\"448\\n424\")\n    424\n    >>> solution(\"456\\n432\")\n    432\n    >>> solution(\"464\\n440\")\n    440\n    >>> solution(\"472\\n448\")\n    448\n    >>> solution(\"480\\n456\")\n    456\n    >>> solution(\"488\\n464\")\n    464\n    >>> solution(\"496\\n472\")\n    472\n    >>> solution(\"504\\n480\")\n    480\n    >>> solution(\"512\\n488\")\n    488\n    >>> solution(\"520\\n496\")\n    496\n    >>> solution(\"528\\n504\")\n    504\n    >>> solution(\"536\\n512\")\n    512\n    >>> solution(\"544\\n520\")\n    520\n    >>> solution(\"552\\n528\")\n    528\n    >>> solution(\"560\\n536\")\n    536\n    >>> solution(\"568\\n544\")\n    544\n    >>> solution(\"576\\n552\")\n    552\n    >>> solution(\"584\\n560\")\n    560\n    >>> solution(\"592\\n568\")\n    568\n    >>> solution(\"600\\n576\")\n    576\n    >>> solution(\"608\\n584\")\n    584\n    >>> solution(\"616\\n592\")\n    592\n    >>> solution(\"624\\n600\")\n    600\n    >>> solution(\"632\\n608\")\n    608\n    >>> solution(\"640\\n616\")\n    616\n    >>> solution(\"648\\n624\")\n    624\n    >>> solution(\"656\\n632\")\n    632\n    >>> solution(\"664\\n640\")\n    640\n    >>> solution(\"672\\n648\")\n    648\n    >>> solution(\"680\\n656\")\n    656\n    >>> solution(\"688\\n664\")\n    664\n    >>> solution(\"696\\n672\")\n    672\n    >>> solution(\"704\\n680\")\n    680\n    >>> solution(\"712\\n688\")\n    688\n    >>> solution(\"720\\n696\")\n    696\n    >>> solution(\"728\\n704\")\n    704\n    >>> solution(\"736\\n712\")\n    712\n    >>> solution(\"744\\n720\")\n    720\n    >>> solution(\"752\\n728\")\n    728\n    >>> solution(\"760\\n736\")\n    736\n    >>> solution(\"768\\n744\")\n    744\n    >>> solution(\"776\\n752\")\n    752\n    >>> solution(\"784\\n760\")\n    760\n    >>> solution(\"792\\n768\")\n    768\n    >>> solution(\"800\\n776\")\n    776\n    >>> solution(\"808\\n784\")\n    784\n    >>> solution(\"816\\n792\")\n    792\n    >>> solution(\"824\\n800\")\n    800\n    >>> solution(\"832\\n808\")\n    808\n    >>> solution(\"840\\n816\")\n    816\n    >>> solution(\"848\\n824\")\n    824\n    >>> solution(\"856\\n832\")\n    832\n    >>> solution(\"864\\n840\")\n    840\n    >>> solution(\"872\\n848\")\n    848\n    >>> solution(\"880\\n856\")\n    856\n    >>> solution(\"888\\n864\")\n    864\n    >>> solution(\"896\\n872\")\n    872\n    >>> solution(\"904\\n880\")\n    880\n    >>> solution(\"912\\n888\")\n    888\n    >>> solution(\"920\\n896\")\n    896\n    >>> solution(\"928\\n904\")\n    904\n    >>> solution(\"936\\n912\")\n    912\n    >>> solution(\"944\\n920\")\n    920\n    >>> solution(\"952\\n928\")\n    928\n    >>> solution(\"960\\n936\")\n    936\n    >>> solution(\"968\\n944\")\n    944\n    >>> solution(\"976\\n952\")\n    952\n    >>> solution(\"984\\n960"
    },
    {
        "number": 2430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 1 3 4\n   ... 7 6\n   ... 1 1 2 3\n   ... 1\n   ... 1 1 2 2\n   ... 3\n   ... 1 1 2 3\n   ... 10\n   ... 4 4 2 3\n   ... 8 10 8 5\n   ... 2 2 1 4\n   ... 8 5\n   ... 3 5 3 5\n   ... 9 2 10\n   ... 4 5 5 5\n   ... 2 10 4 2\n   ... 2 3 1 4\n   ... 1 10\n   ... 3 1 5 3\n   ... 9 8 7\n   ... 2 5 4 5\n   ... 8 8\n   ... 3 5 1 4\n   ... 5 5 10\n   ... ''')\n    '2'\n    \"\"\"\n    n, x, y, z = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] <= x:\n                cnt += 1\n            if a[i] + a[j] <= y:\n                cnt += 1\n            if a[i] + a[j] <= z:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 2432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 2)"
    },
    {
        "number": 2433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 2434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"YES\""
    },
    {
        "number": 2435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 1 2 2 1\\n6\\n2 3 4 5 6 7\")\n    6\n    >>> solution(\"4\\n1 1 2 2 1\\n6\\n1 5 4 5 1 9\")\n    1\n    >>> solution(\"4\\n1 1 2 2 1\\n6\\n1 5 4 5 1 9\\n5\\n1 2 3 5 6\")\n    4\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = gcd * a[i] // math.gcd(gcd, a[i])\n    return n - gcd\n"
    },
    {
        "number": 2438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AAABABB\")\n    15\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if is_palindrome(s[i:j + 1]):\n                count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 2439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 5\n   ... 5\n   ... 1 3 1 2 2\n   ... 1 4 1 3 2\n   ... 1 4 1 3 3\n   ... 4 2 3 3 9\n   ... 5 2 3 3 9''')\n    YES\n    YES\n    NO\n    YES\n    NO\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 2442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0:\n        return str(m) +'' +''.join(map(str, range(m)))\n    forbidden = set(map(int, stdin.split()[1:]))\n    for i in range(1, m):\n        if i in forbidden:\n            continue\n        for j in range(i, m):\n            if j in forbidden:\n                continue\n            if j * i % m == 0:\n                forbidden.add(j)\n                forbidden.add(i)\n                break\n    return str(m - len(forbidden)) +'' +''.join(map(str, range(m - len(forbidden))))\n"
    },
    {
        "number": 2444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    times.sort()\n    res = [times[0]]\n    for i in range(1, n):\n        if times[i] - res[-1] > p:\n            res.append(times[i])\n    return''.join(map(str, res))"
    },
    {
        "number": 2445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"101010\")\n    0\n    >>> solution(\"11101\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>> solution(\"11010\")\n    1\n    >>>"
    },
    {
        "number": 2448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 1 1\\nRPS\")\n    'YES'\n    >>> solution(\"3\\n3 0 0\\nRPS\")\n    'NO'\n    >>> solution(\"3\\n3 0 0\\nRPS\")\n    'NO'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a, b, c = map(int, stdin.split(\"\\n\")[1].split())\n    s = stdin.split(\"\\n\")[2]\n    if n < a + b + c:\n        return \"NO\"\n    elif n == a + b + c:\n        return \"YES\"\n    elif n == a + b + c - 1:\n        return \"YES\"\n    elif n == a + b + c - 2:\n        return \"YES\"\n    elif n == a + b + c - 3:\n        return \"YES\"\n    elif n == a + b + c - 4:\n        return \"YES\"\n    elif n == a + b + c - 5:\n        return \"YES\"\n    elif n == a + b + c - 6:\n        return \"YES\"\n    elif n == a + b + c - 7:\n        return \"YES\"\n    elif n == a + b + c - 8:\n        return \"YES\"\n    elif n == a + b + c - 9:\n        return \"YES\"\n    elif n == a + b + c - 10:\n        return \"YES\"\n    elif n == a + b + c - 11:\n        return \"YES\"\n    elif n == a + b + c - 12:\n        return \"YES\"\n    elif n == a + b + c - 13:\n        return \"YES\"\n    elif n == a + b + c - 14:\n        return \"YES\"\n    elif n == a + b + c - 15:\n        return \"YES\"\n    elif n == a + b + c - 16:\n        return \"YES\"\n    elif n == a + b + c - 17:\n        return \"YES\"\n    elif n == a + b + c - 18:\n        return \"YES\"\n    elif n == a + b + c - 19:\n        return \"YES\"\n    elif n == a + b + c - 20:\n        return \"YES\"\n    elif n == a + b + c - 21:\n        return \"YES\"\n    elif n == a + b + c - 22:\n        return \"YES\"\n    elif n == a + b + c - 23:\n        return \"YES\"\n    elif n == a + b + c - 24:\n        return \"YES\"\n    elif n == a + b + c - 25:\n        return \"YES\"\n    elif n == a + b + c - 26:\n        return \"YES\"\n    elif n == a + b + c - 27:\n        return \"YES\"\n    elif n == a + b + c - 28:\n        return \"YES\"\n    elif n == a + b + c - 29:\n        return \"YES\"\n    elif n == a + b + c - 30:\n        return \"YES\"\n    elif n == a + b + c - 31:\n        return \"YES\"\n    elif n == a + b + c - 32:\n        return \"YES\"\n    elif n == a + b + c - 33:\n        return \"YES\"\n    elif n == a + b + c - 34:\n        return \"YES\"\n    elif n == a + b + c - 35:\n        return \"YES\"\n    elif n == a + b + c - 36:\n        return \"YES\"\n    elif n == a + b + c - 37:\n        return \"YES\"\n    elif n == a + b + c - 38:\n        return \"YES\"\n    elif n == a + b + c - 39:\n        return \"YES\"\n    elif n == a + b + c - 40:\n        return \"YES\"\n    elif n == a + b + c - 41:\n        return \"YES\"\n    elif n == a + b + c - 42:\n        return \"YES\"\n    elif n == a + b + c - 43:\n        return \"YES\"\n    elif n == a + b + c - 44:\n        return \"YES\"\n    elif n == a + b + c - 45:\n        return \"YES\"\n    elif n == a + b + c - 46:\n        return \"YES\"\n    elif n == a + b + c - 47:\n        return \"YES\"\n    elif n == a + b + c - 48:\n        return \"YES\"\n    elif n == a + b + c - 49:\n        return \"YES\"\n    elif n == a + b + c - 50:\n        return \"YES\"\n    elif n == a + b + c - 51:\n        return \"YES\"\n    elif n == a + b + c - 52:\n        return \"YES\"\n    elif n == a + b + c - 53:\n        return \"YES\"\n    elif n == a + b + c - 54:\n        return \"YES\"\n    elif n == a +"
    },
    {
        "number": 2449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 2450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 1 10 1\n   ....\n   ... 1 2 10 1\n   .....\n   ... 2 1 10 1\n   ....\n   ....\n   ... 3 3 3 7\n   .....*\n   ... *..\n   .....*\n   ... ''')\n    10\n    >>> solution('''4\n   ... 1 1 10 1\n   ....\n   ... 1 2 10 1\n   .....\n   ... 2 1 10 1\n   ....\n   ....\n   ... 3 3 3 7\n   .....*\n   ... *..\n   .....*\n   ... ''')\n    1\n    >>> solution('''4\n   ... 1 1 10 1\n   ....\n   ... 1 2 10 1\n   .....\n   ... 2 1 10 1\n   ....\n   ....\n   ... 3 3 3 7\n   .....*\n   ... *..\n   .....*\n   ... ''')\n    20\n    >>> solution('''4\n   ... 1 1 10 1\n   ....\n   ... 1 2 10 1\n   .....\n   ... 2 1 10 1\n   ....\n   ....\n   ... 3 3 3 7\n   .....*\n   ... *..\n   .....*\n   ... ''')\n    18\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1\")\n    '1\\n3 1 2'\n    >>> solution(\"7\\n3\")\n    '4 3 5 2 7 1 6'\n    \"\"\"\n    n = int(stdin)\n    good_permutation = []\n    for i in range(1, n + 1):\n        good_permutation.append(i)\n        for j in range(i + 1, n + 1):\n            if (i | j) >= j:\n                good_permutation.append(j)\n                break\n    return \"\\n\".join(map(str, good_permutation))\n"
    },
    {
        "number": 2453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 3\n   ... 1 3\n   ... 3 8''')\n    '6 2 1'\n    \"\"\"\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin]\n    points = set()\n    for l, r in segments:\n        points.update(range(l, r + 1))\n    points = sorted(points)\n    cnt = [0] * n\n    for p in points:\n        for i, (l, r) in enumerate(segments):\n            if l <= p <= r:\n                cnt[i] += 1\n    return''.join(map(str, cnt))\n"
    },
    {
        "number": 2454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"OXXXOXOOXOOX\\nOXOXOXOXOXOX\\nXXXXXXXXXXXX\\nOOOOOOOOOOOO\")\n    3 1x12 2x6 4x3\n    4 1x12 2x6 3x4 6x2\n    6 1x12 2x6 3x4 4x3 6x2 12x1\n    0\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 20 3 101 18\n   ... 11 11 10 234 2\n   ... 8 9 7 250 122\n   ... 19 41 21 321 10\n   ... 3 10 8 6 1''')\n    'Yes'\n    >>> solution('''7 20 3 101 18\n   ... 11 11 10 234 2\n   ... 8 9 7 250 122\n   ... 19 41 21 321 10\n   ... 3 10 8 6 1''')\n    'No'\n    >>> solution('''7 20 3 101 18\n   ... 11 11 10 234 2\n   ... 8 9 7 250 122\n   ... 19 41 21 321 10\n   ... 3 10 8 6 1''')\n    'Yes'\n    >>> solution('''7 20 3 101 18\n   ... 11 11 10 234 2\n   ... 8 9 7 250 122\n   ... 19 41 21 321 10\n   ... 3 10 8 6 1''')\n    'No'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 2459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 1 2 3 10\n   ... 0 0 1 0''')\n    '3'\n    >>> solution('''3 2\n   ... 2 3 4 5 6\n   ... 1 0 0 0 1''')\n    '2 1'\n    >>> solution('''1 4\n   ... 2 4 6 10 15\n   ... 1 1 1 1 0''')\n    '0 0 0 1'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    t = list(map(int, stdin.split('\\n')[2].split()))\n    x.sort()\n    t.sort()\n    ans = [0] * m\n    for i in range(n + m):\n        if t[i] == 1:\n            ans[i] = x.index(x[i]) + 1\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 2461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.insert(0, 0)\n    a.append(0)\n    dp = [0] * (n + 2)\n    for i in range(1, n + 1):\n        dp[i] = gcd(a[i], dp[i - 1])\n    for i in range(n, 0, -1):\n        dp[i] = gcd(a[i], dp[i + 1])\n    return''.join([str(x) for x in dp[1:-1]])\n\n\ndef"
    },
    {
        "number": 2462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n23\\n31\\n36\\n44\\n100\\n258\")\n    'NO\\nNO\\nYES\\n14 10 6 1\\nYES\\n5 6 10 15\\nYES\\n6 7 10 21\\nYES\\n2 10 33 55\\nYES\\n10 21 221 6'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    prices.sort()\n    max_price = prices[-1]\n    prices.append(max_price + 1)\n    prices.insert(0, 0)\n    dp = [0] * len(prices)\n    dp[0] = 1\n    for i in range(1, len(prices)):\n        for j in range(i):\n            if prices[i] - prices[j] < 2:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]\n"
    },
    {
        "number": 2464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 2465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 54\n   ... 50\n   ... 2\n   ... 178''')\n    10\n    >>> solution('''4\n   ... 54\n   ... 50\n   ... 2\n   ... 178''')\n    18\n    >>> solution('''4\n   ... 54\n   ... 50\n   ... 2\n   ... 178''')\n    90\n    >>> solution('''4\n   ... 54\n   ... 50\n   ... 2\n   ... 178''')\n    180\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    res = []\n    def dfs(cur, path):\n        if len(path) == k and sum(path) == n:\n            res.append(path)\n            return\n        for i in range(cur, 10):\n            dfs(i + 1, path + [i])\n    dfs(1, [])\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 2468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(()\")\n    '2'\n    >>> solution(\")()())\")\n    '4'\n    >>> solution(\"\")\n    '0'\n    \"\"\"\n    # \u5229\u7528\u6808\uff0c\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u662f\u201c(\u201d\uff0c\u5219\u5165\u6808\uff0c\u5982\u679c\u662f\u201c)\u201d\uff0c\u5219\u51fa\u6808\uff0c\u5982\u679c\u51fa\u6808\u7684\u662f\u201c(\u201d\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n    # \u5982\u679c\u51fa\u6808\u7684\u662f\u201c)\u201d\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n    # \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n    # \u5982\u679c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5219\u66f4\u65b0\u6700\u5927\u957f\u5ea6\n    # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n    stack = []\n    max_len = 0\n    for c in stdin:\n        if c == \"(\":\n            stack.append(c)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                max_len = max(max_len, len(stack))\n    return str(max_len)\n"
    },
    {
        "number": 2469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return []\n\n    # Solution 1\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 2\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 3\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 4\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 5\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 6\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 7\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 8\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 9\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 10\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 11\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 12\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 13\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 14\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution 15\n    # O(n) time\n    # O(1) space\n    # count = {}\n    # for num in stdin:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    #\n    # count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    #\n    # return [num[0] for num in count if num[1] > len(stdin) // 3]\n\n    # Solution"
    },
    {
        "number": 2470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, N = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    count = [0] * 10\n    for i in range(N):\n        count[a[i] - 1] += 1\n        count[b[i] - 1] += 1\n        count[a[i] - 1] -= 1\n        count[b[i] - 1] -= 1\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count[i + 1] += count[i]\n    for i in range(9, 0, -1):\n        count[i - 1] += count[i]\n    for i in range(9):\n        count"
    },
    {
        "number": 2472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 4\n   ... 1 9\n   ... 1 8\n   ... 4 9\n   ... 3 12''')\n    'Yes'\n    >>> solution('''5\n   ... 2 4\n   ... 1 9\n   ... 1 8\n   ... 4 9\n   ... 3 12\n   ... 2 3\n   ... 1 2\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1"
    },
    {
        "number": 2473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 2474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    return str(sum(min(c[i], c[i - 1]) * (2 ** (n - i - 1)) for i in range(n)))\n"
    },
    {
        "number": 2475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5\n   ... 0 2 5 1 0''')\n    '3'\n    >>> solution('''5"
    },
    {
        "number": 2476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, [1, 2, 3]))\n"
    },
    {
        "number": 2477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"())\")\n    '(())'\n    >>> solution(\"(()())\")\n    '(()())'\n    >>> solution(\"(()())()\")\n    '(()())()'\n    >>> solution(\"(()())()()\")\n    '(()())()()'\n    >>> solution(\"(()())()()()\")\n    '(()())()()()'\n    >>> solution(\"(()())()()()()\")\n    '(()())()()()()'\n    >>> solution(\"(()())()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")\n    '(()())()()()()()'\n    >>> solution(\"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()\")"
    },
    {
        "number": 2479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split(' '))\n    c = [list(map(int, stdin.split(' '))) for _ in range(H)]\n    A = [list(map(int, stdin.split(' '))) for _ in range(H)]\n    dp = [[0] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if A[i][j] == -1:\n                continue\n            dp[i][j] = c[i][j]\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + c[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + c[i][j])\n    for i in range(H - 1, -1, -1):\n        for j in range(W - 1, -1, -1):\n            if A[i][j] == -1:\n                continue\n            if i < H - 1:\n                dp[i][j] = min(dp[i][j], dp[i + 1][j] + c[i][j])\n            if j < W - 1:\n                dp[i][j] = min(dp[i][j], dp[i][j + 1] + c[i][j])\n    return str(dp[0][0])"
    },
    {
        "number": 2482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 2483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 7 2\n   ... 7 8 1\n   ... 8 12 1''')\n    '2'\n    \"\"\"\n    n, c = map(int, stdin.split())\n    recorders = [0] * c\n    for s, t, c in [map(int, line.split()) for line in stdin.splitlines()]:\n        recorders[c - 1] = max(recorders[c - 1], s)\n        recorders[c - 1] = min(recorders[c - 1], t)\n    return str(len(set(recorders)))\n"
    },
    {
        "number": 2484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] ^ a[j]) == (a[i] + a[j]):\n                count += 1\n    return str(count)"
    },
    {
        "number": 2485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the result\n    h, w, m = map(int, stdin.split())\n    targets = []\n    for _ in range(m):\n        targets.append(list(map(int, stdin.split())))\n    targets.sort()\n    print(targets)\n    return str(m)"
    },
    {
        "number": 2486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 2487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 3\n   ... 2 3\n   ... ''')\n    7\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {u: set() for u in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    return str(sum(map(count_components, graph.values())))\n"
    },
    {
        "number": 2488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 24 11 8 3 16''')\n    3\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] % a[i]!= 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 2490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N // 10 + N % 10)"
    },
    {
        "number": 2491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 2 4\n   ... 2 3 3\n   ... 1 3 5''')\n    7\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges.sort(key=lambda x: x[2], reverse=True)\n    dp = [0] * (n + 1)\n    dp[1] = 0\n    for a, b, c in edges:\n        dp[b] = max(dp[b], dp[a] + c)\n    return max(dp) if dp[n] else 'inf'\n"
    },
    {
        "number": 2492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[k - 1])\n"
    },
    {
        "number": 2493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 1 3\n   ... ''')\n    '3\n    >>> solution('''4\n   ... 1 2 1 3\n   ... ''')\n    '5\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5\n   ... 1 2 1 3\n   ... ''')\n    '4\n    >>> solution('''5"
    },
    {
        "number": 2494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(sum(int(i) for i in str(K * 2)))"
    },
    {
        "number": 2495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n - 1):\n        if a[i] < 0 and a[i + 1] > 0:\n            count += 1\n        elif a[i] > 0 and a[i + 1] < 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, a[i])\n    if gcd == 1:\n        return \"pairwise coprime\"\n    else:\n        return \"not coprime\""
    },
    {
        "number": 2497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 0 3 D\n   ... 3 0 L''')\n    0\n    \"\"\"\n    N = int(stdin.split()[0])\n    points = [tuple(map(int, line.split()[1:])) for line in stdin.splitlines()[1:]]\n    x_max, x_min = max(p[0] for p in points), min(p[0] for p in points)\n    y_max, y_min = max(p[1] for p in points), min(p[1] for p in points)\n    return str(abs(x_max - x_min) * abs(y_max - y_min))\n"
    },
    {
        "number": 2498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return max(sum(a[i] ^ a[j] for i in range(n) for j in range(i + 1, n)) for a in combinations(a, n))"
    },
    {
        "number": 2500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n] % (10 ** 9 + 7)"
    },
    {
        "number": 2501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 2 3 3 1 3 1\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] + a[j] - (i + 1 + j)) % 2 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 2502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_len, t_len = len(s), len(t)\n    if s_len < t_len:\n        return '-1'\n    if s_len == t_len:\n        return '0'\n    if s_len > t_len:\n        return '1'\n    return '2'\n"
    },
    {
        "number": 2503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m, l = map(int, stdin.split(' '))\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, stdin.split(' '))))\n    q = int(stdin)\n    # create graph\n    graph = {}\n    for road in roads:\n        if road[0] not in graph:\n            graph[road[0]] = [road[1]]\n        else:\n            graph[road[0]].append(road[1])\n        if road[1] not in graph:\n            graph[road[1]] = [road[0]]\n        else:\n            graph[road[1]].append(road[0])\n    # create visited\n    visited = {}\n    for i in range(1, n + 1):\n        visited[i] = False\n    # create distance\n    distance = {}\n    for i in range(1, n + 1):\n        distance[i] = -1\n    # create queue\n    queue = []\n    # create result\n    result = []\n    # BFS\n    for i in range(1, n + 1):\n        if not visited[i]:\n            queue.append(i)\n            distance[i] = 0\n            while queue:\n                current = queue.pop(0)\n                if not visited[current]:\n                    visited[current] = True\n                    if current in graph:\n                        for neighbor in graph[current]:\n                            if not visited[neighbor]:\n                                queue.append(neighbor)\n                                distance[neighbor] = distance[current] + 1\n            result.append(distance[i])\n    # print result\n    for _ in range(q):\n        s, t = map(int, stdin.split(' '))\n        if distance[s] < distance[t]:\n            result[s - 1] = 0\n        elif distance[s] > distance[t]:\n            result[t - 1] = 0\n        else:\n            result[s - 1] = 0\n            result[t - 1] = 0\n        print(result[s - 1])\n    return ''\n"
    },
    {
        "number": 2505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... -1 3\n   ... 2 1\n   ... 3 -2''')\n    13\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    points = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    points.sort()\n    points = [points[0]] + [points[i] for i in range(1, n)] + [points[-1]]\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            ans += f(points[i:j])\n    return str(ans % 998244353)\n\n\ndef"
    },
    {
        "number": 2506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 10 14 19 34 33''')\n    '202'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    happiness = 0\n    for i in range(m):\n        happiness += a[i] + a[n - 1 - i]\n    return str(happiness)\n"
    },
    {
        "number": 2507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 2508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    h, w, k = map(int, stdin.split(' '))\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    c = stdin.split('\\n')[1:-1]\n    # Create a grid\n    grid = []\n    for i in range(h):\n        grid.append(list(c[i]))\n    # Create a queue\n    queue = []\n    # Create a visited set\n    visited = set()\n    # Add the starting point to the queue\n    queue.append((x1, y1))\n    # While the queue is not empty\n    while queue:\n        # Pop the first element\n        x, y = queue.pop(0)\n        # If the element is the destination\n        if x == x2 and y == y2:\n            # Return the number of steps\n            return len(visited)\n        # If the element is not the destination\n        else:\n            # If the element is not visited\n            if (x, y) not in visited:\n                # Mark the element as visited\n                visited.add((x, y))\n                # If the element is not a lotus leaf\n                if grid[x][y]!= '@':\n                    # Add the element to the queue\n                    queue.append((x, y + 1))\n                    queue.append((x, y - 1))\n                    queue.append((x + 1, y))\n                    queue.append((x - 1, y))\n                # If the element is a lotus leaf\n                else:\n                    # Add the element to the queue\n                    queue.append((x, y + 1))\n                    queue.append((x, y - 1))\n                    queue.append((x + 1, y))\n                    queue.append((x - 1, y))\n                    queue.append((x, y))\n    # If the queue is empty\n    return -1"
    },
    {
        "number": 2509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 2510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 1 2\n   ... 3 4\n   ... 5 1''')\n    '3'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    friends = [set() for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        friends[a - 1].add(b - 1)\n        friends[b - 1].add(a - 1)\n    groups = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j not in friends[i] and i not in friends[j]:\n                groups += 1\n    return str(groups)\n"
    },
    {
        "number": 2511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split())\n    colors = [0] * k\n    edges = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    edges.sort()\n    for a, b in edges:\n        if colors[a - 1] == colors[b - 1]:\n            return \"Impossible\"\n        colors[a - 1] ^= 1\n        colors[b - 1] ^= 1\n    return str(sum(colors) + 1)\n"
    },
    {
        "number": 2512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 'S'\n    if n == 2:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 3:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 4:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 5:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 6:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 7:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 8:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 9:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 10:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 11:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 12:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 13:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 14:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 15:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 16:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 17:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 18:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 19:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 20:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 21:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 22:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 23:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 24:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 25:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 26:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 27:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 28:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 29:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 30:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 31:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 32:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 33:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 34:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 35:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 36:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 37:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 38:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 39:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 40:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 41:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 42:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 43:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 44:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 45:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 46:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 47:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 48:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 49:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 50:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 51:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 52:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 53:\n        return 'S' + 'W' * (n - 2) + 'S'\n    if n == 54:\n        return '"
    },
    {
        "number": 2514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 3 4\n   ... 3\n   ... 1 2\n   ... 3 4\n   ... 2 4\n   ... ''')\n    11 12 16\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    q, *b = map(int, stdin.split())\n    c = [0] * q\n    for i in range(q):\n        c[i] = b[i]\n    for i in range(q):\n        for j in range(n):\n            if a[j] == b[i]:\n                a[j] = c[i]\n    return''.join(map(str, a))\n"
    },
    {
        "number": 2515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin\n"
    },
    {
        "number": 2516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 2517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, R = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(M)]\n    towns = [list(map(int, stdin.split())) for _ in range(N)]\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    towns.sort(key=lambda x: x[1])\n    towns.sort(key=lambda x: x[2])\n    towns.sort(key=lambda x: x[0])\n    town"
    },
    {
        "number": 2518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4 1\n   ... 2 1\n   ... 1 3\n   ... 3 2\n   ... 3 4\n   ... 4 1''')\n    '0 1 0 1'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    friends = [[] for _ in range(n)]\n    blocks = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        friends[a - 1].append(b - 1)\n        friends[b - 1].append(a - 1)\n    for _ in range(k):\n        c, d = map(int, stdin.split())\n        blocks[c - 1].append(d - 1)\n        blocks[d - 1].append(c - 1)\n    ans = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if not friends[i] and not blocks[i] and not friends[j] and not blocks[j]:\n                ans[i] += 1\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 2521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 3 1 4 1 5 9\n   ... ''')\n    '1'\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    return str(sum(a[:n]) - sum(a[n:]))\n"
    },
    {
        "number": 2522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    if a == b:\n        return 'Yes'\n    for i in range(n):\n        if a[i]!= b[i]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 2523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    K = 0\n    for i in range(len(S)):\n        if S[i] == '1':\n            K += 1\n    return K"
    },
    {
        "number": 2524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    xor = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            xor ^= a[i] ^ a[j]\n    return str(xor)\n"
    },
    {
        "number": 2525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    q = int(stdin.split('\\n')[1])\n    for i in range(q):\n        t, f, c = stdin.split('\\n')[2+i].split()\n        if t == '1':\n            s = s[::-1]\n        elif t == '2':\n            if f == '1':\n                s = c + s\n            else:\n                s = s + c\n    return s"
    },
    {
        "number": 2526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"happy\" if all(c in stdin for c in \"iloveyou\") else \"sad\""
    },
    {
        "number": 2528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i]!= 0 and arr[j]!= 0:\n                max_len = max(max_len, j - i + 1)\n    return max_len"
    },
    {
        "number": 2529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    withdrawal_amount = int(stdin.split(' ')[0])\n    account_balance = float(stdin.split(' ')[1])\n    if withdrawal_amount % 5 == 0 and account_balance >= withdrawal_amount + 0.5:\n        account_balance -= withdrawal_amount + 0.5\n    return str(account_balance)"
    },
    {
        "number": 2530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == a[i] * 2:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 2532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split(' '))\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    b = [int(x) for x in stdin.split(' ')[1:]]\n    d = [int(x) for x in stdin.split(' ')[1:]]\n    x = [int(x) for x in stdin.split(' ')[1:]]\n    n = len(x)\n    a = [a[i] for i in range(n)]\n    b = [b[i] for i in range(n)]\n    d = [d[i] for i in range(n)]\n    x = [x[i] for i in range(n)]\n    x_next = []\n    for i in range(n):\n        x_next.append(x[i] * a[i] + b[i] * d[i] ** p)\n    x_next = [x_next[i] % q for i in range(n)]\n    for i in range(n, 2 * n):\n        x_next.append(x_next[i - n] * a[i - n] + b[i - n] * d[i - n] ** p)\n        x_next[i] = x_next[i] % q\n    return''.join(map(str, x_next))\n"
    },
    {
        "number": 2533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n1 2\\n2 3\\n\")\n    'YES\\n1 2\\n2 3\\n'\n    >>> solution(\"3 2\\n1 2\\n2 3\\n\")\n    'NO\\n'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    graph = {i: set() for i in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    for u, v in edges:\n        if len(graph[u]) == 1:\n            graph[v].remove(u)\n        if len(graph[v]) == 1:\n            graph[u].remove(v)\n    for u, v in edges:\n        if len(graph[u]) == 1 and len(graph[v]) == 1:\n            break\n    else:\n        return \"NO\"\n    for u, v in edges:\n        if len(graph[u]) == 1:\n            graph[v].remove(u)\n        if len(graph[v]) == 1:\n            graph[u].remove(v)\n    for u, v in edges:\n        if len(graph[u]) == 1 and len(graph[v]) == 1:\n            break\n    else:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(f\"{u} {v}\" for u, v in edges)\n"
    },
    {
        "number": 2534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n1 2\\n4 5\\n7 0\\n2\\n1 2\\n2 2\\n\")\n    9\n    >>> solution(\"1 3\\n1 2 3\\n2\\n1 1\\n3 1\\n\")\n    -1\n    >>> solution(\"1 3\\n1 2 3\\n2\\n1 1\\n3 1\\n\")\n    4\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    l = int(stdin.split()[-1])\n    e1 = []\n    e2 = []\n    for _ in range(l):\n        i, j = map(int, stdin.split()[-2:])\n        e1.append(a[i - 1][j - 1])\n        e2.append(a[j - 1][i - 1])\n    return max(e1, e2)\n"
    },
    {
        "number": 2537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ab\\nacxb\\ncax\\n\\na\\naaaa\\naaabbcc\\n\\na\\naaaa\\n\\naabbcc\\nab\\nbaaa\\naaaaa\")\n    YES\n    YES\n    NO\n    NO\n    \"\"\"\n    s, t, p = stdin.split(\"\\n\\n\")\n    s, t, p = s.strip(), t.strip(), p.strip()\n    return \"YES\" if s == t and p in s else \"NO\"\n"
    },
    {
        "number": 2538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 5 3 4\n   ... 2 1 0\n   ... 3 5 5\n   ... 4 10 6''')\n    '3\n    1\n    2\n    0'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 3 4\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... ''')\n    '10 9 3 4'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    colours = [int(x) for x in stdin.split('\\n')[1:]]\n    graph = {x: [] for x in range(1, n + 1)}\n    for line in stdin.split('\\n')[1:]:\n        x, y = [int(x) for x in line.split()]\n        graph[x].append(y)\n        graph[y].append(x)\n    dominating_colours = [0] * (n + 1)\n    for vertex in range(1, n + 1):\n        for neighbour in graph[vertex]:\n            if colours[neighbour - 1] > colours[vertex - 1]:\n                dominating_colours[vertex] += 1\n    return''.join(str(x) for x in dominating_colours[1:])\n"
    },
    {
        "number": 2541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    # pass\n    # return \"\"\n    "
    },
    {
        "number": 2542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    for _ in range(q):\n        l, r, x = map(int, stdin.split())\n        a[l - 1] += x\n        a[r] -= x\n    return str(sum(abs(a[i] - b[i]) for i in range(n)))\n"
    },
    {
        "number": 2544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 6\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 5\n   ... 2 6''')\n    '1 2'\n    >>> solution('''5\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 6\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 5\n   ... 2 6\n   ... 3 4\n   ... 3 5\n   ... 4 5\n   ... 4 6\n   ... 5 6''')\n    '1 2'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 9\\n1 1\\n1 2\")\n    'YES'\n    >>> solution(\"6 9\\n1 1\\n1 2\\n1 1\")\n    'NO'\n    \"\"\"\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return \"YES\" if a == 0 and b == 0 else \"NO\"\n"
    },
    {
        "number": 2546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 26\n   ... 10 12\n   ... 1 4\n   ... 10 11\n   ... 1 1337\n   ... 1 1000000000\n   ... 5 26\n   ... 4 4\n   ... 2 4\n   ... 6 8\n   ... 5 6\n   ... 2 7\n   ... ''')\n    11\n    >>> solution('''3\n   ... 26\n   ... 10 12\n   ... 1 4\n   ... 10 11\n   ... 1 1337\n   ... 1 1000000000\n   ... 5 26\n   ... 4 4\n   ... 2 4\n   ... 6 8\n   ... 5 6\n   ... 2 7\n   ... ''')\n    1337\n    >>> solution('''3\n   ... 26\n   ... 10 12\n   ... 1 4\n   ... 10 11\n   ... 1 1337\n   ... 1 1000000000\n   ... 5 26\n   ... 4 4\n   ... 2 4\n   ... 6 8\n   ... 5 6\n   ... 2 7\n   ... ''')\n    6\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    books = []\n    for _ in range(n):\n        books.append([int(x) for x in stdin.split()])\n    books.sort(key=lambda x: x[0])\n    books.sort(key=lambda x: x[1])\n    books.sort(key=lambda x: x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1])\n    books.sort(key=lambda x: x[0] + x[2])\n    books.sort(key=lambda x: x[1] + x[2])\n    books.sort(key=lambda x: x[0] + x[1] + x[2])\n    books.sort(key=lambda x: x"
    },
    {
        "number": 2548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 3 1\n   ... 2 1\n   ... 1 2\n   ... 2 3''')\n    '665496237'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    d = list(map(int, stdin.split('\\n')[1].split()))\n    a = [0] * m\n    b = [0] * m\n    for i in range(m):\n        a[i], b[i] = map(int, stdin.split('\\n')[i + 2].split())\n    d = [d[i] for i in range(n)]\n    a = [a[i] for i in range(m)]\n    b = [b[i] for i in range(m)]\n    return ''.join(map(str, solve(n, m, d, a, b)))\n\n\ndef"
    },
    {
        "number": 2550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    z = \"\"\n    min_ops = 0\n    for i in range(len(s)):\n        z += s[i]\n        if z == t:\n            return min_ops\n        for j in range(i+1, len(s)):\n            z += s[j]\n            if z == t:\n                return min_ops\n            for k in range(j+1, len(s)):\n                z += s[k]\n                if z == t:\n                    return min_ops\n                for l in range(k+1, len(s)):\n                    z += s[l]\n                    if z == t:\n                        return min_ops\n                    for m in range(l+1, len(s)):\n                        z += s[m]\n                        if z == t:\n                            return min_ops\n                        for n in range(m+1, len(s)):\n                            z += s[n]\n                            if z == t:\n                                return min_ops\n                            for o in range(n+1, len(s)):\n                                z += s[o]\n                                if z == t:\n                                    return min_ops\n                                for p in range(o+1, len(s)):\n                                    z += s[p]\n                                    if z == t:\n                                        return min_ops\n                                    for q in range(p+1, len(s)):\n                                        z += s[q]\n                                        if z == t:\n                                            return min_ops\n                                        for r in range(q+1, len(s)):\n                                            z += s[r]\n                                            if z == t:\n                                                return min_ops\n                                            for s in range(r+1, len(s)):\n                                                z += s[s]\n                                                if z == t:\n                                                    return min_ops\n                                                for t in range(s+1, len(s)):\n                                                    z += s[t]\n                                                    if z == t:\n                                                        return min_ops\n                                                    for u in range(t+1, len(s)):\n                                                        z += s[u]\n                                                        if z == t:\n                                                            return min_ops\n                                                        for v in range(u+1, len(s)):\n                                                            z += s[v]\n                                                            if z == t:\n                                                                return min_ops\n                                                            for w in range(v+1, len(s)):\n                                                                z += s[w]\n                                                                if z == t:\n                                                                    return min_ops\n                                                                for x in range(w+1, len(s)):\n                                                                    z += s[x]\n                                                                    if z == t:\n                                                                        return min_ops\n                                                                    for y in range(x+1, len(s)):\n                                                                        z += s[y]\n                                                                        if z == t:\n                                                                            return min_ops\n                                                                        for z in range(y+1, len(s)):\n                                                                            z += s[z]\n                                                                            if z == t:\n                                                                                return min_ops\n                                                                            for a in range(z+1, len(s)):\n                                                                                z += s[a]\n                                                                                if z == t:\n                                                                                    return min_ops\n                                                                                for b in range(a+1, len(s)):\n                                                                                    z += s[b]\n                                                                                    if z == t:\n                                                                                        return min_ops\n                                                                                    for c in range(b+1, len(s)):\n                                                                                        z += s[c]\n                                                                                        if z == t:\n                                                                                            return min_ops\n                                                                                        for d in range(c+1, len(s)):\n                                                                                            z += s[d]\n                                                                                            if z == t:\n                                                                                                return min_ops\n                                                                                            for e in range(d+1, len(s)):\n                                                                                                z += s[e]\n                                                                                                if z == t:\n                                                                                                    return min_ops\n                                                                                                for f in range(e+1, len(s)):\n                                                                                                    z += s[f]\n                                                                                                    if z == t:\n                                                                                                        return min_ops\n                                                                                                    for g in range(f+1, len(s)):\n                                                                                                        z += s[g]\n                                                                                                        if z == t:\n                                                                                                            return min_ops\n                                                                                                        for h in range(g+1, len(s)):\n                                                                                                            z += s[h]\n                                                                                                            if z == t:\n                                                                                                                return min_ops\n                                                                                                                for i in range(h+1, len(s)):\n                                                                                                                    z += s[i]\n                                                                                                                    if z == t:\n                                                                                                                        return min_ops\n                                                                                                                        for j in range(i+1, len(s)):\n                                                                                                                            z += s[j]\n                                                                                                                            if z == t:\n                                                                                                                                return min_ops\n                                                                                                                                for k in range(j+1, len(s)):\n                                                                                                                                    z += s[k]\n                                                                                                                                    if z == t:\n                                                                                                                                        return min_ops\n                                                                                                                                        for l in range(k+1, len(s)):\n                                                                                                                                            z += s[l]\n                                                                                                                                            if z == t:\n                                                                                                                                                 return min_ops\n                                                                                                                                                 for m in range(l+1, len(s)):\n                                                                                                                                                    z += s[m]\n                                                                                                                                                    if z == t:\n                                                                                             "
    },
    {
        "number": 2552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 4\n   ... 1 0 1 1 0 1 0\n   ... 4 0 0 -1 0 -1 0\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 3 5\n   ... 3 6\n   ... 3 7\n   ... 5 11\n   ... 1 2 5 2 1\n   ... -11 -2 -6 -2 -1\n   ... 1 2\n   ... 1 3\n   ... ''')\n    'YES'\n    >>> solution('''7 4\n   ... 1 0 1 1 0 1 0\n   ... 4 0 0 -1 0 -1 0\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 3 5\n   ... 3 6\n   ... 3 7\n   ... 5 11\n   ... 1 2 5 2 1\n   ... -11 -2 -6 -2 -1\n   ... 1 2\n   ... 1 3\n   ... ''')\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 1\n   ... 999\n   ... 1 1\n   ... 1000\n   ... 2 1\n   ... 51 50\n   ... 2 2\n   ... 51 50\n   ... 3 3\n   ... 101 102 103\n   ... ''')\n    'Yes'\n    >>> solution('''5\n   ... 1 1\n   ... 999\n   ... 1 1\n   ... 1000\n   ... 2 1\n   ... 51 50\n   ... 2 2\n   ... 51 50\n   ... 3 3\n   ... 101 102 103\n   ... ''')\n    'No'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1\\n1 3 2\\n1 2\\n2 2\\n1 2\\n1 2\\n1 2\\n7 5\\n1 2 5 4 3 6 7\\n1 2\\n6 7\\n3 4\\n1 2\\n2 3\")\n    '9\\n10\\n10\\n10\\n9\\n11'\n    \"\"\"\n    n, q = map(int, stdin.split(\"\\n\")[0].split())\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = [0] * n\n    for i in range(q):\n        l, r = map(int, stdin.split(\"\\n\")[2 + i].split())\n        b[l - 1] += a[r - 1]\n        b[r - 1] += a[l - 1]\n        a[l - 1], a[r - 1] = a[r - 1], a[l - 1]\n    return \"\\n\".join(map(str, b))\n"
    },
    {
        "number": 2556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rooms = []\n    for _ in range(n):\n        c, s = map(int, stdin.readline().split())\n        rooms.append((c, s))\n    rooms.sort(key=lambda x: x[1])\n    cost = 0\n    for c, s in rooms:\n        if s > cost:\n            cost = s\n            print(c * c)\n        else:\n            print(cost * cost)\n    return ''\n"
    },
    {
        "number": 2557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '1'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '2'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '1'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '5'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '534'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 1000000 1''')\n    '500000500000'\n    >>> solution('''7\n   ... 1 1 1 1\n   ... 2 2 2 2\n   ... 1 2 3 4\n   ... 4 3 2 1\n   ... 228 21 11 3\n   ... 239 21 11 3\n   ... 1000000 1 100"
    },
    {
        "number": 2559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... 3 2 4\n   ... 2 4 3\n   ... 4 5 6\n   ... 5 6 5\n   ... 2\n   ... 1 2 1\n   ... 1 3 2\n   ... 1 4 3\n   ... ''')\n    '15 33'\n    \"\"\"\n   ..."
    },
    {
        "number": 2560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2 3\\n6 4 5\")\n    'Yes'\n    >>> solution(\"5 2 3\\n6 4 6\")\n    'No'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n0\\n2\")\n    '2'\n    >>> solution(\"3\\n0\\n2\\n1073741823\")\n    '2'\n    >>> solution(\"3\\n0\\n2\\n1073741823\\n0\\n2\\n0\\n2\")\n    '2'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if gcd(arr[i], arr[j], arr[k]) > 1:\n                    ans += arr[i] * arr[j] * arr[k]\n    return ans % 1000000007\n\n\ndef"
    },
    {
        "number": 2563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0709\")\n    '0079'\n    >>> solution(\"1337\")\n    '1337'\n    >>> solution(\"246432\")\n    '234642'\n    \"\"\"\n    a = stdin\n    n = len(a)\n    a = list(a)\n    for i in range(n - 1):\n        if a[i] == \"0\" and a[i + 1] == \"9\":\n            a[i], a[i + 1] = \"9\", \"0\"\n        elif a[i] == \"1\" and a[i + 1] == \"8\":\n            a[i], a[i + 1] = \"8\", \"1\"\n        elif a[i] == \"2\" and a[i + 1] == \"7\":\n            a[i], a[i + 1] = \"7\", \"2\"\n        elif a[i] == \"3\" and a[i + 1] == \"6\":\n            a[i], a[i + 1] = \"6\", \"3\"\n        elif a[i] == \"4\" and a[i + 1] == \"5\":\n            a[i], a[i + 1] = \"5\", \"4\"\n        elif a[i] == \"5\" and a[i + 1] == \"4\":\n            a[i], a[i + 1] = \"4\", \"5\"\n        elif a[i] == \"6\" and a[i + 1] == \"3\":\n            a[i], a[i + 1] = \"3\", \"6\"\n        elif a[i] == \"7\" and a[i + 1] == \"2\":\n            a[i], a[i + 1] = \"2\", \"7\"\n        elif a[i] == \"8\" and a[i + 1] == \"1\":\n            a[i], a[i + 1] = \"1\", \"8\"\n        elif a[i] == \"9\" and a[i + 1] == \"0\":\n            a[i], a[i + 1] = \"0\", \"9\"\n    return \"\".join(a)\n"
    },
    {
        "number": 2564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3 1\\n2 3 0\\n4 0 1\")\n    '4'\n    >>> solution(\"2 3 2\\n3 3 1\\n4 0 1\")\n    '2'\n    >>> solution(\"0 0 1\\n0 0 1\")\n    '0'\n    \"\"\"\n    a = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    b = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    c = [0] * len(a)\n    for i in range(len(a)):\n        if a[i] > b[i]:\n            c[i] = 2\n        elif a[i] < b[i]:\n            c[i] = -a[i] * b[i]\n    return str(sum(c))\n"
    },
    {
        "number": 2566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1\\n1\\n3\\n00000\\n4\\n1110000\\n2\\n101\\n\")\n    '1010'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    w = \"\"\n    for i in range(n):\n        w += \"0\" * (n - i - 1) + \"1\" + \"0\" * (i + 1)\n    return w\n"
    },
    {
        "number": 2568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 2569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n1\\n2\\n3\\n4\\n5\\n100\\n2000000\")\n    804665184\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... 1 2 3 4\n   ... 1 2 3 4\n   ... ''')\n    'No'\n    >>> solution('''3 4\n   ... 1 2 3\n   ... 1 1 2\n   ... ''')\n    'Yes'\n    >>> solution('''2 6\n   ... 1 4\n   ... 2 5\n   ... ''')\n    'No'\n    >>> solution('''1 5\n   ... 5\n   ... 5\n   ... ''')\n    'Yes'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 2\n   ... 1 100\n   ... 4\n   ... 1 2 3 6\n   ... ''')\n    '-100 1 1 1 -1'\n    \"\"\"\n    T = int(stdin.readline())\n    doors = []\n    for _ in range(T):\n        n = int(stdin.readline())\n        seals = list(map(int, stdin.readline().split()))\n        doors.append(seals)\n    for i in range(T):\n        seals = doors[i]\n        for j in range(n):\n            for k in range(j + 1, n):\n                if seals[j] * seals[k] == 0:\n                    print(seals[j], seals[k])\n                    break\n            else:\n                continue\n            break\n        else:\n            print(-1)\n"
    },
    {
        "number": 2572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n4 2\\n2 4\\n4 2\\n2 4\")\n    8\n    >>> solution(\"3 4\\n1 2 3 4\\n5 6 7 8\")\n    42\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n5\\n-1 -2 -3 -4 -5\\n6\\n-1 -2 -3 1 2 -1\\n6\\n-1 0 0 0 -1 -1\\n6\\n-9 -7 -5 -3 -2 1\")\n    -120\n    >>> solution(\"4\\n5\\n-1 -2 -3 -4 -5\\n6\\n-1 -2 -3 1 2 -1\\n6\\n-1 0 0 0 -1 -1\\n6\\n-9 -7 -5 -3 -2 1\")\n    12\n    >>> solution(\"4\\n5\\n-1 -2 -3 -4 -5\\n6\\n-1 -2 -3 1 2 -1\\n6\\n-1 0 0 0 -1 -1\\n6\\n-9 -7 -5 -3 -2 1\")\n    0\n    >>> solution(\"4\\n5\\n-1 -2 -3 -4 -5\\n6\\n-1 -2 -3 1 2 -1\\n6\\n-1 0 0 0 -1 -1\\n6\\n-9 -7 -5 -3 -2 1\")\n    945\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n30\\n60\\n90\")\n    'NO'\n    >>> solution(\"3\\n30\\n60\\n90\\n30\\n60\\n90\")\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 2 1\")\n    3\n    >>> solution(\"4 8 9 2\")\n    12\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    return min(a + b, a + c, b + c, a + d, b + d, c + d)\n"
    },
    {
        "number": 2577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n1 2\\n4 5\\n7 8\\n2 2\\n1 1\\n3 3\\n2 2\\n1 3\\n2 2\")\n    '1 2\\n5 6\\n7 8\\n2 1\\n4 3\\n2 4\\n3 2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == b[i][j]:\n                b[i][j] += 1\n            else:\n                b[i][j] = a[i][j]\n    return \"\\n\".join(\" \".join(map(str, row)) for row in b)\n"
    },
    {
        "number": 2578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return''.join(map(str, solution(stdin.split('\\n'))))"
    },
    {
        "number": 2579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y, k = [int(x) for x in stdin.split()]\n    return \"YES\" if (r - l + 1) * (y - x + 1) >= k * (r - l + 1) else \"NO\"\n"
    },
    {
        "number": 2580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    matrix = np.array(matrix)\n    max_money = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                money = 0\n                for k in range(n):\n                    if matrix[i][k] == 1:\n                        money += matrix[k][j]\n                    if matrix[k][j] == 1:\n                        money += matrix[i][k]\n                if money > max_money:\n                    max_money = money\n    return str(max_money)\n"
    },
    {
        "number": 2582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1\n   ... 2\n   ... 3\n   ... 4\n   ... 5\n   ... 6\n   ... 12''')\n    'FastestFinger'\n    >>> solution('''7\n   ... 12\n   ... 1\n   ... 2\n   ... 3\n   ... 4\n   ... 5\n   ... 6''')\n    'Ashishgup'\n    \"\"\"\n    n = int(stdin)\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        if n == 1:\n            return 'Ashishgup'\n    return 'FastestFinger'\n"
    },
    {
        "number": 2584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6 2\n   ... 2 4 3 5 7\n   ... 5 11 2\n   ... 2 4 3 5 7\n   ... 2 10000 2\n   ... 10000 10000\n   ... 2 9999 2\n   ... 10000 10000\n   ... 5 13 2\n   ... 8 2 8 2 5\n   ... 3 18 2\n   ... 1 2 3''')\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1\\n3\")\n    '8\\n998'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        x = stdin.readline()\n        k = stdin.readline()\n        r = stdin.readline()\n        x = int(x)\n        k = int(k)\n        r = int(r)\n        if x < r:\n            print(x)\n        else:\n            print(r)\n"
    },
    {
        "number": 2588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, a, b = map(int, stdin.readline().split())\n        s = stdin.readline()\n        print(solution_helper(n, a, b, s))\n\n\ndef"
    },
    {
        "number": 2589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 5 1 2 1\n   ... 4 10\n   ... 11 9 11 9\n   ... 2 5\n   ... 4 3\n   ... 3 7\n   ... 9 4 9''')\n    '2'\n    >>> solution('''4 3\n   ... 5 1 2 1\n   ... 4 10\n   ... 11 9 11 9\n   ... 2 5\n   ... 4 3\n   ... 3 7\n   ... 9 4 9''')\n    '4'\n    >>> solution('''4 3\n   ... 5 1 2 1\n   ... 4 10\n   ... 11 9 11 9\n   ... 2 5\n   ... 4 3\n   ... 3 7\n   ... 9 4 9''')\n    '0'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n5 -2 4 8 6 5\\n4\\n8 1 4 2\")\n    '5 5 4 6 8 -2'\n    >>> solution(\"6\\n5 -2 4 8 6 5\\n4\\n8 1 4 2\")\n    '5 4 5 6 8 -2'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    for i in range(n - 1):\n        if abs(a[i] - a[i + 1]) > abs(a[i + 1] - a[i + 2]):\n            a[i + 1], a[i + 2] = a[i + 2], a[i + 1]\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 2592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '3'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '0'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '5'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '5'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n   ... 0 0 0\n   ... 9 1 7\n   ... 2 2 3\n   ... 2 3 2\n   ... 3 2 2\n   ... 4 4 4\n   ... ''')\n    '7'\n    >>> solution('''7\n   ... 1 2 1\n    "
    },
    {
        "number": 2593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 4 3 7 10\\n3\\n1 1 1\\n4\\n6 2 5 3\\n2\\n2 4\\n1\\n1\\n\")\n    '1\\n3\\n2\\n0\\n0'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 1\n   ... 1 3\n   ... 2 2\n   ... 3 3\n   ... 5 3''')\n    '1'\n    >>> solution('''5\n   ... 1 1\n   ... 1 3\n   ... 2 2\n   ... 3 3\n   ... 5 3''')\n    '2'\n    >>> solution('''5\n   ... 1 1\n   ... 1 3\n   ... 2 2\n   ... 3 3\n   ... 5 3''')\n    '2'\n    >>> solution('''5\n   ... 1 1\n   ... 1 3\n   ... 2 2\n   ... 3 3\n   ... 5 3''')\n    '5'\n    >>> solution('''5\n   ... 1 1\n   ... 1 3\n   ... 2 2\n   ... 3 3\n   ... 5 3''')\n    '8'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, t = [int(x) for x in stdin.split()]\n    l = 0\n    for i in range(t):\n        if stdin[i * 2 + 1] == '1':\n            l += 1\n        else:\n            l -= 1\n        if l > m:\n            l = m\n        if l < 0:\n            l = 0\n        if stdin[i * 2] == '1':\n            k += 1\n            if k > n:\n                k = n\n        else:\n            k -= 1\n            if k < 1:\n                k = 1\n    return''.join([str(l), str(k)])"
    },
    {
        "number": 2597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 2 B\n   ... 3 1 R\n   ... 3 2 B\n   ... ''')\n    '1'\n    >>> solution('''6 5\n   ... 1 3 R\n   ... 2 3 R\n   ... 3 4 B\n   ... 4 5 R\n   ... 4 6 R\n   ... ''')\n    '2'\n    >>> solution('''4 5\n   ... 1 2 R\n   ... 1 3 R\n   ... 2 3 B\n   ... 3 4 B\n   ... 1 4 B\n   ... ''')\n    '-1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges = [(u, v, c) for u, v, c in edges if c in 'BR']\n    edges = {(u, v): c for u, v, c in edges}\n    colors = {u: c for u, v, c in edges.values()}\n    colors[1] = 'R'\n    colors[n] = 'B'\n    colors[2] = 'R'\n    colors[n + 1] = 'B'\n    colors[3] = 'R'\n    colors[n + 2] = 'B'\n    colors[4] = 'R'\n    colors[n + 3] = 'B'\n    colors[5] = 'R'\n    colors[n + 4] = 'B'\n    colors[6] = 'R'\n    colors[n + 5] = 'B'\n    colors[7] = 'R'\n    colors[n + 6] = 'B'\n    colors[8] = 'R'\n    colors[n + 7] = 'B'\n    colors[9] = 'R'\n    colors[n + 8] = 'B'\n    colors[10] = 'R'\n    colors[n + 9] = 'B'\n    colors[11] = 'R'\n    colors[n + 10] = 'B'\n    colors[12] = 'R'\n    colors[n + 11] = 'B'\n    colors[13] = 'R'\n    colors[n + 12] = 'B'\n    colors[14] = 'R'\n    colors[n + 13] = 'B'\n    colors[15] = 'R'\n    colors[n + 14] = 'B'\n    colors[16] = 'R'\n    colors[n + 15] = 'B'\n    colors[17] = 'R'\n    colors[n + 16] = 'B'\n    colors[18] = 'R'\n    colors[n + 17] = 'B'\n    colors[19] = 'R'\n    colors[n + 18] = 'B'\n    colors[20] = 'R'\n    colors[n + 19] = 'B'\n    colors[21] = 'R'\n    colors[n + 20] = 'B'\n    colors[22] = 'R'\n    colors[n + 21] = 'B'\n    colors[23] = 'R'\n    colors[n + 22] = 'B'\n    colors[24] = 'R'\n    colors[n + 23] = 'B'\n    colors[25] = 'R'\n    colors[n + 24] = 'B'\n    colors[26] = 'R'\n    colors[n + 25] = 'B'\n    colors[27] = 'R'\n    colors[n + 26] = 'B'\n    colors[28] = 'R'\n    colors[n + 27] = 'B'\n    colors[29] = 'R'\n    colors[n + 28] = 'B'\n    colors[30] = 'R'\n    colors[n + 29] = 'B'\n    colors[31] = 'R'\n    colors[n + 30] = 'B'\n    colors[32] = 'R'\n    colors[n + 31] = 'B'\n    colors[33] = 'R'\n    colors[n + 32] = 'B'\n    colors[34] = 'R'\n    colors[n + 33] = 'B'\n    colors[35] = 'R'\n    colors[n + 34] = 'B'\n    colors[36] = 'R'\n    colors[n + 35] = 'B'\n    colors[37] = 'R'\n    colors[n + 36] = 'B'\n    colors[38] = 'R'\n    colors[n + 37] = 'B'\n    colors[39] = 'R'\n    colors[n + 38] = 'B'\n    colors[40] = 'R'\n    colors[n + 39] = 'B'\n    colors[41] = 'R'\n    colors[n + 40] = 'B'\n    colors[42] = 'R'\n    colors[n + 41] = 'B'\n    colors[43] = 'R'\n    colors[n + 42] = 'B'\n    colors[44] = 'R'\n    colors[n + 43] = 'B'\n    colors[45] = 'R'\n    colors[n + 44] = 'B'\n    colors[46] = 'R'\n    colors[n + 45] = 'B'\n    colors[47] = 'R'\n    colors[n + 46] = 'B'\n    colors[48] = 'R'\n    colors[n + 47] = 'B'\n    colors[49] = 'R'\n    colors[n + 48] = 'B'\n    colors[50] = 'R'\n    colors[n + 49] = 'B'\n    colors[51] = 'R'\n    colors[n + 50] = 'B'\n    colors[52] = 'R'\n    colors[n + 51] = 'B'\n    colors[53] = 'R'\n    colors[n + 52] = 'B'\n    colors["
    },
    {
        "number": 2599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 0\n   ... 1 1\n   ... 42 7\n   ... 13 7\n   ... 99 1\n   ... 99 0\n   ... 99 2\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 1 0\n   ... 1 1\n   ... 42 7\n   ... 13 7\n   ... 99 1\n   ... 99 0\n   ... 99 2\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 1 0\n   ... 1 1\n   ... 42 7\n   ... 13 7\n   ... 99 1\n   ... 99 0\n   ... 99 2\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 1 0\n   ... 1 1\n   ... 42 7\n   ... 13 7\n   ... 99 1\n   ... 99 0\n   ... 99 2\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 1 0\n   ... 1 1\n   ... 42 7\n   ... 13 7\n   ... 99 1\n   ... 99 0\n   ... 99 2\n   ... ''')\n    '599998'\n    >>> solution('''\n   ... 1 0\n   ... 1 1\n   ... 42 7\n   ... 13 7\n   ... 99 1\n   ... 99 0\n   ... 99 2\n   ... ''')\n    '99999999999'\n    >>> solution('''\n   ... 1 0\n   ... 1 1\n   ... 42 7\n   ... 13 7\n   ... 99 1\n   ... 99 0\n   ... 99 2\n   ... ''')\n    '7997'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 5 3 2 1 4\n   ... 6\n   ... 2 2 2 2 2 2\n   ... 2\n   ... 2 1''')\n    'YES'\n    >>> solution('''5\n   ... 5 3 2 1 4\n   ... 6\n   ... 2 2 2 2 2 2\n   ... 2\n   ... 2 1''')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 2602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'Yes'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83 14 25\\n0 0 1 0\\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\")\n    'No'\n    >>> solution(\"2 2 1 2\\n0 100 0 1\\n12 13 25 1\\n27 83"
    },
    {
        "number": 2603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, d = map(int, stdin.split())\n    sausages = []\n    for _ in range(int(stdin.split()[0])):\n        x, y, r_ = map(int, stdin.split()[1:])\n        sausages.append((x, y, r_))\n    sausages.sort(key=lambda x: x[2])\n    sausages.sort(key=lambda x: x[0])\n    sausages.sort(key=lambda x: x[1])\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    sausages.sort(key"
    },
    {
        "number": 2605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    cities = list(map(int, stdin.split('\\n')[1].split()))\n    capital_cities = list(map(int, stdin.split('\\n')[2].split()))\n    cities_dict = dict(zip(capital_cities, cities))\n    cities_dict[1] = 0\n    cities_dict[n] = 0\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[1])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_dict.items(), key=lambda item: item[0])}\n    cities_dict = {k: v for k, v in sorted(cities_"
    },
    {
        "number": 2606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 2\n   ... 1 1 2 2\n   ... 1 1 2 2\n   ... 3 4\n   ... 2 2 3 2\n   ... 3 1 4 3\n   ... 1 5\n   ... 1 1 5 1\n   ... 3 1 5 1\n   ... 4 4\n   ... 1 1 4 2\n   ... 1 3 4 4\n   ... 3 4\n   ... 1 2 4 2\n   ... 2 1 3 3\n   ... ''')\n    '0 4'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 5 6 2\n   ... 2 4 3 5 7\n   ... 5 11 2\n   ... 2 4 3 5 7\n   ... 3 2 3\n   ... 4 2 6\n   ... 5 2 3\n   ... 10 1 3 9 2\n   ... 2 10000 2\n   ... 10000 10000\n   ... 2 9999 2\n   ... 10000 10000\n   ... 4 6 4\n   ... 3 2 3 2\n   ... 5 5 3\n   ... 1 2 2 1 2''')\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split(' '))\n    piles = list(map(int, stdin.split(' ')))\n    piles.sort()\n    ans = [0] * (q + 1)\n    for i in range(q):\n        t, x = map(int, stdin.split(' '))\n        if t == 0:\n            ans[i + 1] = ans[i] + abs(piles[x - 1] - piles[x])\n            piles[x - 1] = piles[x]\n        else:\n            ans[i + 1] = ans[i] + abs(piles[x - 1] - piles[x - 1])\n            piles[x - 1] = piles[x - 1] + 1\n    return''.join(map(str, ans[1:]))\n"
    },
    {
        "number": 2612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 5 3 4 6\n   ... 7\n   ... 1 4 2 3 6 4 9\n   ... 5\n   ... 5 4 3 2 1\n   ... 1\n   ... 9''')\n    '2\\n3\\n1\\n1'\n    \"\"\"\n   ..."
    },
    {
        "number": 2613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 7\n   ... 1 7 1 6 4 4 6\n   ... 8\n   ... 1 1 4 6 4 6 4 7\n   ... 3\n   ... 3 3 3\n   ... 6\n   ... 2 5 2 3 1 4\n   ... ''')\n    3\n    >>> solution('''4\n   ... 7\n   ... 1 7 1 6 4 4 6\n   ... 8\n   ... 1 1 4 6 4 6 4 7\n   ... 3\n   ... 3 3 3\n   ... 6\n   ... 2 5 2 3 1 4\n   ... ''')\n    2\n    >>> solution('''4\n   ... 7\n   ... 1 7 1 6 4 4 6\n   ... 8\n   ... 1 1 4 6 4 6 4 7\n   ... 3\n   ... 3 3 3\n   ... 6\n   ... 2 5 2 3 1 4\n   ... ''')\n    0\n    >>> solution('''4\n   ... 7\n   ... 1 7 1 6 4 4 6\n   ... 8\n   ... 1 1 4 6 4 6 4 7\n   ... 3\n   ... 3 3 3\n   ... 6\n   ... 2 5 2 3 1 4\n   ... ''')\n    4\n    \"\"\"\n   ..."
    },
    {
        "number": 2615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2\n   ... 72\n   ... 10''')\n    '2\n    1\n    61\n    6\n    \"\"\"\n   ..."
    },
    {
        "number": 2616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 5 4\n   ... 8\n   ... 1 1 1 1 1 1 1\n   ... 6\n   ... 1 2 3 4 5 6\n   ... 6\n   ... 1 1 2 1 2 2\n   ... 1\n   ... 1000000000\n   ... 5\n   ... 1 2 2 1 1\n   ... 3\n   ... 1 1 1\n   ... ''')\n    'First'\n    >>> solution('''7\n   ... 3\n   ... 2 5 4\n   ... 8\n   ... 1 1 1 1 1 1 1\n   ... 6\n   ... 1 2 3 4 5 6\n   ... 6\n   ... 1 1 2 1 2 2\n   ... 1\n   ... 1000000000\n   ... 5\n   ... 1 2 2 1 1\n   ... 3\n   ... 1 1 1\n   ... ''')\n    'Second'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\n11\\n2\")\n    3\n    3\n    1 0 2\n    \"\"\"\n   ..."
    },
    {
        "number": 2618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1\n   ... 100\n   ... 50 1\n   ... 49 1\n   ... 100\n   ... 8\n   ... 100 200 100 200 100 200 100 100\n   ... 10 2\n   ... 15 3\n   ... 107\n   ... 3\n   ... 1000000000 1000000000 1000000000\n   ... 50 1\n   ... 50 1\n   ... 3000000000\n   ... 5\n   ... 200 100 100 100 100\n   ... 69 5\n   ... 31 2\n   ... 90\n   ... ''')\n    '6'\n    >>> solution('''\n   ... 1\n   ... 100\n   ... 50 1\n   ... 49 1\n   ... 100\n   ... 8\n   ... 100 200 100 200 100 200 100 100\n   ... 10 2\n   ... 15 3\n   ... 107\n   ... 3\n   ... 1000000000 1000000000 1000000000\n   ... 50 1\n   ... 50 1\n   ... 3000000000\n   ... 5\n   ... 200 100 100 100 100\n   ... 69 5\n   ... 31 2\n   ... 90\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 1\n   ... 100\n   ... 50 1\n   ... 49 1\n   ... 100\n   ... 8\n   ... 100 200 100 200 100 200 100 100\n   ... 10 2\n   ... 15 3\n   ... 107\n   ... 3\n   ... 1000000000 1000000000 1000000000\n   ... 50 1\n   ... 50 1\n   ... 3000000000\n   ... 5\n   ... 200 100 100 100 100\n   ... 69 5\n   ... 31 2\n   ... 90\n   ... ''')\n    '4'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 2620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4\\n1 2 4\\n2 3\\n1 1 2\\n1 3 4\")\n    9\n    >>> solution(\"4 4\\n1 2 4\\n2 3\\n1 1 2\\n1 3 4\")\n    4\n    >>> solution(\"4 4\\n1 2 4\\n2 3\\n1 1 2\\n1 3 4\")\n    6\n    \"\"\"\n    n, q = map(int, stdin.split())\n    a = list(range(1, n + 1))\n    for _ in range(q):\n        t, *args = stdin.split()\n        if t == \"1\":\n            l, r = map(int, args)\n            a[l - 1 : r] = reversed(a[l - 1 : r])\n        else:\n            x = int(args[0])\n            a = a[::-1]\n            for _ in range(x):\n                a = a[1:] + a[:1]\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 2621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your"
    },
    {
        "number": 2623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'abbc'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'b'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'aa'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'x'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ehinopx'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\nbaacb\\n5 3\\naaaaa\\n6 4\\naaxxzz\\n7 1\\nphoenix\")\n    'ab'\n    >>> solution(\"4 2\\nbaacb\\n5 3\\"
    },
    {
        "number": 2624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11 3\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n> 2\\n> -4\\n< 5\")\n    '5 4 -3 -2 -1 0 1 2 -3 4 5'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    arr = list(map(int, stdin.split()[1:]))\n    for _ in range(q):\n        s, x = stdin.split()[1:]\n        if s == \">\":\n            arr = [i if i > x else -i for i in arr]\n        else:\n            arr = [i if i < x else -i for i in arr]\n    return \" \".join(map(str, arr))\n"
    },
    {
        "number": 2625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # O(n^2)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n    # O(n)\n"
    },
    {
        "number": 2628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def spiral_matrix(n):\n        matrix = [[0] * n for _ in range(n)]\n        i, j, di, dj = 0, 0, 0, 1\n        for k in range(n * n):\n            matrix[i][j] = k + 1\n            if matrix[(i + di) % n][(j + dj) % n]:\n                di, dj = dj, -di\n            i += di\n            j += dj\n        return matrix\n\n    return spiral_matrix(int(stdin))\n"
    },
    {
        "number": 2630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return []\n    # return [stdin]\n    return [stdin]"
    },
    {
        "number": 2635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    m = len(matrix)\n    n = len(matrix[0])\n    result = []\n    i, j = 0, 0\n    while len(result) < m * n:\n        result.append(matrix[i][j])\n        if j + 1 < n and matrix[i][j + 1] not in result:\n            j += 1\n            continue\n        if i + 1 < m and matrix[i + 1][j] not in result:\n            i += 1\n            continue\n        if j - 1 >= 0 and matrix[i][j - 1] not in result:\n            j -= 1\n            continue\n        if i - 1 >= 0 and matrix[i - 1][j] not in result:\n            i -= 1\n            continue\n    return result\n"
    },
    {
        "number": 2636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 2637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return []\n\n    # Solution 1\n    # O(2^n) time\n    # O(2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 2\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = []\n        for i in range(len(nums) + 1):\n            for subset in itertools.combinations(nums, i):\n                subsets.append(list(subset))\n        return subsets\n\n    # Solution 3\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 4\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 5\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 6\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 7\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 8\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 9\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 10\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 11\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 12\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 13\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 14\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 15\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 16\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 17\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 18\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 19\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 20\n    # O(n * 2^n) time\n    # O(n * 2^n) space\n    def powerset(nums):\n        subsets = [[]]\n        for num in nums:\n            for i in range(len(subsets)):\n                currentSubset = subsets[i]\n                subsets.append(currentSubset + [num])\n        return subsets\n\n    # Solution 21\n    # O(n * 2^n)"
    },
    {
        "number": 2640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 6\n   ... #..#..\n   ... #.....\n   ... #....#\n   ... #.#...\n   ... ''')\n    8\n    \"\"\"\n   ..."
    },
    {
        "number": 2641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 1 2 1 3\n   ... 1 3\n   ... 2 4\n   ... 3 3''')\n    '2\\n3\\n1'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    colors = [int(x) for x in stdin.split()[1::2]]\n    queries = [int(x) for x in stdin.split()[::2]]\n    colors_set = set(colors)\n    colors_set_len = len(colors_set)\n    result = [colors_set_len] * q\n    for i in range(q):\n        left, right = queries[i], queries[i] + 1\n        result[i] -= len(colors[left - 1:right])\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 2642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2\n   ... -1 1\n   ... 2 -1''')\n    5\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] + b[i] * b[j] == 0:\n                count += 1\n    return str(count % 1000000007)\n"
    },
    {
        "number": 2643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 3 1 4\n   ... 5 3 2''')\n    '1'\n    \"\"\"\n    k, q = map(int, stdin.split())\n    d = list(map(int, stdin.split()[:k]))\n    n = list(map(int, stdin.split()[k + 1 : k + q + 1]))\n    x = list(map(int, stdin.split()[k + q + 2 :]))\n    m = list(map(int, stdin.split()[k + q + 3 :]))\n    a = [x[0]]\n    for i in range(1, k):\n        a.append(a[i - 1] + d[i - 1])\n    for i in range(q):\n        print(sum(1 for j in range(n[i]) if a[j] % m[i] < a[j + 1] % m[i]))\n"
    },
    {
        "number": 2644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(2)\n    if n == 4:\n        return str(3)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(5)\n    if n == 7:\n        return str(6)\n    if n == 8:\n        return str(7)\n    if n == 9:\n        return str(8)\n    if n == 10:\n        return str(9)\n    if n == 11:\n        return str(10)\n    if n == 12:\n        return str(11)\n    if n == 13:\n        return str(12)\n    if n == 14:\n        return str(13)\n    if n == 15:\n        return str(14)\n    if n == 16:\n        return str(15)\n    if n == 17:\n        return str(16)\n    if n == 18:\n        return str(17)\n    if n == 19:\n        return str(18)\n    if n == 20:\n        return str(19)\n    if n == 21:\n        return str(20)\n    if n == 22:\n        return str(21)\n    if n == 23:\n        return str(22)\n    if n == 24:\n        return str(23)\n    if n == 25:\n        return str(24)\n    if n == 26:\n        return str(25)\n    if n == 27:\n        return str(26)\n    if n == 28:\n        return str(27)\n    if n == 29:\n        return str(28)\n    if n == 30:\n        return str(29)\n    if n == 31:\n        return str(30)\n    if n == 32:\n        return str(31)\n    if n == 33:\n        return str(32)\n    if n == 34:\n        return str(33)\n    if n == 35:\n        return str(34)\n    if n == 36:\n        return str(35)\n    if n == 37:\n        return str(36)\n    if n == 38:\n        return str(37)\n    if n == 39:\n        return str(38)\n    if n == 40:\n        return str(39)\n    if n == 41:\n        return str(40)\n    if n == 42:\n        return str(41)\n    if n == 43:\n        return str(42)\n    if n == 44:\n        return str(43)\n    if n == 45:\n        return str(44)\n    if n == 46:\n        return str(45)\n    if n == 47:\n        return str(46)\n    if n == 48:\n        return str(47)\n    if n == 49:\n        return str(48)\n    if n == 50:\n        return str(49)\n    if n == 51:\n        return str(50)\n    if n == 52:\n        return str(51)\n    if n == 53:\n        return str(52)\n    if n == 54:\n        return str(53)\n    if n == 55:\n        return str(54)\n    if n == 56:\n        return str(55)\n    if n == 57:\n        return str(56)\n    if n == 58:\n        return str(57)\n    if n == 59:\n        return str(58)\n    if n == 60:\n        return str(59)\n    if n == 61:\n        return str(60)\n    if n == 62:\n        return str(61)\n    if n == 63:\n        return str(62)\n    if n == 64:\n        return str(63)\n    if n == 65:\n        return str(64)\n    if n == 66:\n        return str(65)\n    if n == 67:\n        return str(66)\n    if n == 68:\n        return str(67)\n    if n == 69:\n        return str(68)\n    if n == 70:\n        return str(69)\n    if n == 71:\n        return str(70)\n    if n == 72:\n        return str(71)\n    if n == 73:\n        return str(72)\n    if n == 74:\n        return str(73)\n    if n == 75:\n        return str(74)\n    if n == 76:\n        return str(75)\n    if n == 77:\n        return str(76)\n    if n == 78:\n        return str(77)\n    if n == 79:\n        return str(78)\n    if n == 80:\n        return str(79)\n    if n == 81:\n        return str(80)\n    if n == 82:\n        return str(81)\n    if n == 83:\n        return str(82)\n    if n == 84:\n        return str(83)\n    if n == 85:\n        return str(84)\n    if n == 86:\n        return str(85)\n    if n == 87:\n        return str(86)\n    if n == 88:\n        return str(87)\n    if n == 89:\n        return str(88)\n    if n == 90:\n        return str(89)\n    if n == 91:\n        return str(90)\n    if n == 92:\n        return str(91)\n    if n == 93:\n        return str(92)\n    if n == 94:\n        return str(93)\n    if n == 95:\n        return str(94)\n    if n == 96:\n        return str(95)\n    if n == 97:\n        return str(96)\n    if n == 98:\n        return str(97)\n    if n == 99:\n        return str(98)\n    if n == 100:\n        return str(99)\n    if n == 101:\n        return str(100)\n    if n == 102:\n        return str(101)\n    if n == 103:\n        return str(102)\n    if n == 104:\n        return str(103)\n    if n == 105:\n        return str(104)\n    if n == 106:\n        return str(105)\n    if n == 107:\n        return str(106)\n    if n == 108:\n        return str(107)\n    if n == 109:\n        return str(108)\n    if n == 110:\n        return str(109)\n    if n == 111:\n        return str(110)"
    },
    {
        "number": 2645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin\n    score = 0\n    for i in range(N):\n        if s[i] == 'g':\n            score += 1\n        else:\n            score -= 1\n    return str(score)"
    },
    {
        "number": 2646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    rooms = [list(map(int, stdin.split(' '))) for _ in range(m)]\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms.sort(key=lambda x: x[1])\n    rooms.sort(key=lambda x: x[0])\n    rooms"
    },
    {
        "number": 2647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\\\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n   ... #.#\n    "
    },
    {
        "number": 2648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split()))\n    cards.sort()\n    cards.reverse()\n    print(cards)\n    return str(cards[0])"
    },
    {
        "number": 2649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1\n   ... 2 4\n   ... 3 2\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin]\n    return str(max(sum(abs(a - b) for a, b in zip(*points)) for a, b in combinations(points, 2)))\n"
    },
    {
        "number": 2650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 3\n   ... 8 1\n   ... 6 2\n   ... 9 3\n   ... 1 1\n   ... 2 2\n   ... 1 3\n   ... 4 3\n   ... 2 1\n   ... 1 2''')\n    '6'\n    >>> solution('''6 3\n   ... 8 1\n   ... 6 2\n   ... 9 3\n   ... 1 1\n   ... 2 2\n   ... 1 3\n   ... 4 3\n   ... 2 1\n   ... 1 2''')\n    '2'\n    >>> solution('''6 3\n   ... 8 1\n   ... 6 2\n   ... 9 3\n   ... 1 1\n   ... 2 2\n   ... 1 3\n   ... 4 3\n   ... 2 1\n   ... 1 2''')\n    '6'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    infant_rating = [0] * n\n    kindergarten_rating = [0] * 2 * 10 ** 5\n    for i in range(n):\n        infant_rating[i] = int(stdin.split()[i * 2])\n        kindergarten_rating[infant_rating[i] - 1] += 1\n    for _ in range(q):\n        c, d = map(int, stdin.split()[-2 * q:])\n        kindergarten_rating[c - 1] -= 1\n        kindergarten_rating[d - 1] += 1\n        print(min(kindergarten_rating))\n"
    },
    {
        "number": 2651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    return str(sum(x[i] * y[j] for i in range(n) for j in range(m)) % (10 ** 9 + 7))"
    },
    {
        "number": 2652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the minimum cost\n    return 0"
    },
    {
        "number": 2653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 2 10\n   ... 1 100\n   ... 3 1''')\n    '100 110 111 110'\n    \"\"\"\n    n, q = map(int, stdin.split(' '))\n    edges = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')[1:]]\n    tree = [[] for _ in range(n)]\n    for a, b in edges:\n        tree[a - 1].append(b - 1)\n        tree[b - 1].append(a - 1)\n    counter = [0] * n\n    for _ in range(q):\n        p, x = map(int, stdin.split('\\n')[1].split(' '))\n        counter[p - 1] += x\n        for v in tree[p - 1]:\n            counter[v] += x\n    return''.join(map(str, counter))\n"
    },
    {
        "number": 2654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 2\n   ... 2 3''')\n    '3'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    b = list(map(int, stdin.split(\"\\n\")[2].split()))\n    a.sort()\n    b.sort()\n    if n % 2 == 0:\n        median = (a[(n // 2) - 1] + a[n // 2]) / 2\n    else:\n        median = a[n // 2]\n    count = 0\n    for i in range(n):\n        if a[i] <= median <= b[i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 2655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 2 2 1 3\n   ... ''')\n    '7'\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    arr.append(0)\n    arr.insert(0, 0)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += min(arr[i - 1], arr[i + 1])\n    return str(ans)\n"
    },
    {
        "number": 2656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\noof\")\n    575111451\n    \"\"\"\n    K, S = stdin.split(\"\\n\")\n    K, S = int(K), S\n    count = 0\n    for i in range(1, K + 1):\n        for j in range(len(S)):\n            if j + i <= len(S):\n                if S[j] == S[j + i - 1]:\n                    count += 1\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 2657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    max_comb = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            max_comb = max(max_comb, comb(a[i], a[j]))\n    print(a[max_comb])\n    print(a[max_comb - 1])\n    return ''\n"
    },
    {
        "number": 2658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 2660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 4 2\n   ... 2\n   ... 1 1 -8\n   ... 2\n   ... ''')\n    '4 2\\n1 -3'\n    \"\"\"\n   ..."
    },
    {
        "number": 2661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    t = [int(x) for x in stdin.readline().split()]\n    u = [int(x) for x in stdin.readline().split()]\n    v = [int(x) for x in stdin.readline().split()]\n    \n    # create a matrix\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # fill the matrix\n    for i in range(n):\n        for j in range(n):\n            if s[i] == 0:\n                matrix[i][j] = u[j]\n            else:\n                matrix[i][j] = v[j]\n    \n    # check if the matrix satisfies the conditions\n    for i in range(n):\n        if t[i] == 0:\n            if sum(matrix[i])!= u[i]:\n                return -1\n        else:\n            if sum(matrix[i])!= v[i]:\n                return -1\n    \n    # print the matrix\n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j], end=' ')\n        print()\n    return ''"
    },
    {
        "number": 2662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    s = 0\n    for i in range(n):\n        s += arr[i]\n        if s > k:\n            break\n    return''.join(map(str, arr[:i]))\n\nTest 2:\n\nThe first 3 elements of it are [10, 2, 7].\ndef"
    },
    {
        "number": 2664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prices = [int(x) for x in stdin.split()]\n    profit = 0\n    for i in range(n - k + 1):\n        profit = max(profit, sum(prices[i:i + k]))\n    return profit"
    },
    {
        "number": 2667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    if nums[0] == 1:\n        return \"YES\"\n    for i in range(1, n):\n        if nums[i] - nums[i - 1] > 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 2668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    jacket_cost, sock_cost, money = map(int, stdin.split())\n    if money < jacket_cost:\n        return \"Unlucky Chef\"\n    if money == jacket_cost:\n        return \"Lucky Chef\"\n    if money > jacket_cost:\n        if money % sock_cost == 0:\n            return \"Lucky Chef\"\n        else:\n            return \"Unlucky Chef\""
    },
    {
        "number": 2669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of tasks that can be done by a chef, assuming that a chef can only work on a single task at a time.\n    \n    Args:\n        stdin (str): The input string.\n    \n    Returns:\n        str: The output string.\n    \"\"\"\n    n = int(stdin.readline())\n    tasks = [int(x) for x in stdin.readline().split()]\n    tasks.sort()\n    tasks = [0] + tasks + [tasks[-1] + n]\n    tasks = [tasks[i] - tasks[i - 1] for i in range(1, len(tasks))]\n    return''.join([str(i) for i in range(len(tasks)) if tasks[i] == max(tasks)])"
    },
    {
        "number": 2670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '3'"
    },
    {
        "number": 2673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P = int(stdin)\n    if P < 100:\n        return 'Inclusive'\n    elif P >= 100 and P <= 999:\n        return 'Exclusive'\n    else:\n        return 'Invalid'"
    },
    {
        "number": 2675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    red_balls = []\n    blue_balls = []\n    for _ in range(n):\n        x, u = map(int, stdin.readline().split())\n        red_balls.append((x, u))\n    for _ in range(m):\n        y, v = map(int, stdin.readline().split())\n        blue_balls.append((y, v))\n    red_balls.sort()\n    blue_balls.sort()\n    red_ball_count = 0\n    blue_ball_count = 0\n    for i in range(n):\n        for j in range(m):\n            if red_balls[i][0] == blue_balls[j][0]:\n                red_ball_count += 1\n                break\n            elif red_balls[i][0] < blue_balls[j][0]:\n                red_ball_count += 1\n                break\n            elif red_balls[i][0] > blue_balls[j][0]:\n                break\n    for i in range(m):\n        for j in range(n):\n            if blue_balls[i][0] == red_balls[j][0]:\n                blue_ball_count += 1\n                break\n            elif blue_balls[i][0] < red_balls[j][0]:\n                blue_ball_count += 1\n                break\n            elif blue_balls[i][0] > red_balls[j][0]:\n                break\n    return str(red_ball_count + blue_ball_count)"
    },
    {
        "number": 2676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    s = []\n    for i in range(n):\n        s.append(stdin.readline())\n    m = int(stdin.readline())\n    b = stdin.readline()\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if b[j] in s[i]:\n                ans += 1\n    return ans\n\n-----EXPLANATION:-----\nTestCase 1: Only substring of $aaaaa$ that is present in the pile of strings is $a$. So the answer is 1\ndef"
    },
    {
        "number": 2677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set('AEIOU')\n    consonants = set('BCDFGHJKLMNPQRSTVWXYZ')\n    vowel_count = 0\n    consonant_count = 0\n    for char in stdin:\n        if char in vowels:\n            vowel_count += 1\n        elif char in consonants:\n            consonant_count += 1\n    if vowel_count >= 3 and consonant_count >= 5:\n        return 'GOOD'\n    return '-1'"
    },
    {
        "number": 2678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 2679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    s1 = 0\n    s2 = 0\n    for i in range(n):\n        if i % 2 == 0:\n            s1 += arr[i]\n        else:\n            s2 += arr[i]\n    return s1 + s2"
    },
    {
        "number": 2680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, b = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    \n    # print(n, b, x, y)\n    \n    # print(x, y)\n    \n    # print(x[0], y[0])\n    \n    # print(x[1], y[1])\n    \n    # print(x[2], y[2])\n    \n    # print(x[3], y[3])\n    \n    # print(x[4], y[4])\n    \n    # print(x[5], y[5])\n    \n    # print(x[6], y[6])\n    \n    # print(x[7], y[7])\n    \n    # print(x[8], y[8])\n    \n    # print(x[9], y[9])\n    \n    # print(x[10], y[10])\n    \n    # print(x[11], y[11])\n    \n    # print(x[12], y[12])\n    \n    # print(x[13], y[13])\n    \n    # print(x[14], y[14])\n    \n    # print(x[15], y[15])\n    \n    # print(x[16], y[16])\n    \n    # print(x[17], y[17])\n    \n    # print(x[18], y[18])\n    \n    # print(x[19], y[19])\n    \n    # print(x[20], y[20])\n    \n    # print(x[21], y[21])\n    \n    # print(x[22], y[22])\n    \n    # print(x[23], y[23])\n    \n    # print(x[24], y[24])\n    \n    # print(x[25], y[25])\n    \n    # print(x[26], y[26])\n    \n    # print(x[27], y[27])\n    \n    # print(x[28], y[28])\n    \n    # print(x[29], y[29])\n    \n    # print(x[30], y[30])\n    \n    # print(x[31], y[31])\n    \n    # print(x[32], y[32])\n    \n    # print(x[33], y[33])\n    \n    # print(x[34], y[34])\n    \n    # print(x[35], y[35])\n    \n    # print(x[36], y[36])\n    \n    # print(x[37], y[37])\n    \n    # print(x[38], y[38])\n    \n    # print(x[39], y[39])\n    \n    # print(x[40], y[40])\n    \n    # print(x[41], y[41])\n    \n    # print(x[42], y[42])\n    \n    # print(x[43], y[43])\n    \n    # print(x[44], y[44])\n    \n    # print(x[45], y[45])\n    \n    # print(x[46], y[46])\n    \n    # print(x[47], y[47])\n    \n    # print(x[48], y[48])\n    \n    # print(x[49], y[49])\n    \n    # print(x[50], y[50])\n    \n    # print(x[51], y[51])\n    \n    # print(x[52], y[52])\n    \n    # print(x[53], y[53])\n    \n    # print(x[54], y[54])\n    \n    # print(x[55], y[55])\n    \n    # print(x[56], y[56])\n    \n    # print(x[57], y[57])\n    \n    # print(x[58], y[58])\n    \n    # print(x[59], y[59])\n    \n    # print(x[60], y[60])\n    \n    # print(x[61], y[61])\n    \n    # print(x[62], y[62])\n    \n    # print(x[63], y[63])\n    \n    # print(x[64], y[64])\n    \n    # print(x[65], y[65])\n    \n    # print(x[66], y[66])\n    \n    # print(x[67], y[67])\n    \n    # print(x[68], y[68])\n    \n    # print(x[69], y[69])\n    \n    # print(x[70], y[70])\n    \n    # print(x[71], y[71])\n    \n    # print(x[72], y[72])\n    \n    # print(x[73], y[73])\n    \n    # print(x[74], y[74])\n    \n    # print(x[75], y[75])\n    \n    # print(x[76], y[76])\n    \n    # print(x[77], y[77])\n    \n    # print(x[78], y[78])\n    \n    # print(x[79], y[79])\n    \n    # print(x[80], y[80])\n    \n    # print(x[81], y[81])\n    \n    # print(x[82], y[82])\n    \n    # print(x[83], y[83])\n    \n    # print(x[84], y[84])\n    \n    # print(x[85], y[85])\n    \n    # print(x[86], y[86])\n    \n    # print(x[87], y[87])\n    \n    # print(x[88], y[88])\n    \n    # print(x[89], y[89])\n    \n    # print(x[90], y[90])\n    \n    # print(x[91], y[91])\n    \n    # print(x[92], y[92])\n    \n    # print(x[93"
    },
    {
        "number": 2681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = stdin[2]\n    if c == \"+\":\n        return str(a + b)\n    elif c == \"-\":\n        return str(a - b)\n    elif c == \"*\":\n        return str(a * b)\n    elif c == \"/\":\n        return str(a / b)\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 2682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"YES\" or \"NO\"\n    n, k = map(int, stdin.split())\n    board = [list(stdin) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \".\":\n                board[i][j] = \"O\"\n                if check(board, k):\n                    return \"YES\"\n                board[i][j] = \".\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 2684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 2685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('?')\n    x, y = map(int, stdin.split(' '))\n    return sum(min(x, y) * len(s[i]) for i in range(len(s)))"
    },
    {
        "number": 2686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 1 3\n   ... 2 3\n   ... 1 2\n   ... 3 5\n   ... 4 5\n   ... 1 4''')\n    3\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    close = set()\n    for _ in range(m):\n        a, b = map(int, stdin.split('\\n')[2 + _].split())\n        close.add((a, b))\n    start, end = map(int, stdin.split('\\n')[-2].split())\n    close.add((start, end))\n    close = sorted(close)\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) in close:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = min(dp[i][k] + dp[k][j] for k in range(i, j))\n    return dp[0][-1]\n"
    },
    {
        "number": 2687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n2 4 5 1 7 6 3 8\")\n    4\n    1 2 4 1\n    3 5 7 3\n    6 6\n    8 8\n    \"\"\"\n    n = int(stdin.readline())\n    permutation = list(map(int, stdin.readline().split()))\n    visited = [False] * n\n    cycles = []\n    for i in range(n):\n        if not visited[i]:\n            cycle = []\n            cycle.append(i)\n            visited[i] = True\n            while True:\n                j = permutation[cycle[-1]] - 1\n                if visited[j]:\n                    break\n                cycle.append(j)\n                visited[j] = True\n            cycles.append(cycle)\n    return len(cycles)\n"
    },
    {
        "number": 2689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s[0])\n    for i in range(1, n + 1):\n        if s[i].isalpha():\n            if s[i] == s[i][::-1]:\n                print(\"Return\")\n                return\n            else:\n                print(\"Continue\")\n                return\n    print(\"Continue\")\n    return"
    },
    {
        "number": 2690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin[1:]\n    dp = [[0 for _ in range(p + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, p + 1):\n            if s[i - 1] == 'd':\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + 1)\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + 1)\n    return dp[n][p]"
    },
    {
        "number": 2692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P, k = map(int, stdin.split())\n    if k == 1:\n        if S % P == 0:\n            return str(S // P)\n        else:\n            return \"NO\"\n    else:\n        if S % P == 0:\n            return \" \".join(map(str, [S // P] * k))\n        else:\n            return \"NO\""
    },
    {
        "number": 2694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4 1\\n3 2 1 3\\n\")\n    'YES\\n6'\n    >>> solution(\"5 5 2\\n5 1 1 2\\n4 4 1 2\\n\")\n    'YES\\n8'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    blasters = []\n    for _ in range(k):\n        blasters.append(list(map(int, stdin.split())))\n    blasters.sort(key=lambda x: x[0])\n    blasters.sort(key=lambda x: x[1])\n    blasters.sort(key=lambda x: x[2])\n    blasters.sort(key=lambda x: x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key=lambda x: x[0] * 100 + x[1])\n    blasters.sort(key=lambda x: x[2] * 100 + x[3])\n    blasters.sort(key="
    },
    {
        "number": 2695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    n = len(a)\n    m = len(b)\n    a = list(a)\n    b = list(b)\n    indices = list(map(int, stdin.split('\\n')[2].split()))\n    ans = 0\n    for i in indices:\n        if a[i - 1] == b[i - 1]:\n            ans += 1\n            a[i - 1] = '_'\n            b[i - 1] = '_'\n    return ans"
    },
    {
        "number": 2696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return a[-1]"
    },
    {
        "number": 2697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 2698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    m, v = map(int, stdin.split())\n    lanes = []\n    for _ in range(m):\n        lanes.append(list(map(int, stdin.split())))\n    lanes.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(m):\n        if lanes[i][0] > ans:\n            ans = lanes[i][0]\n        if lanes[i][1] > ans:\n            ans = lanes[i][1]\n    return ans\n"
    },
    {
        "number": 2699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n5\")\n    1 4 10\n    2 5 11\n    4 10 22\n    3 6 12\n    >>> solution(\"2\\n5\")\n    1 4 10\n    2 5 11\n    >>> solution(\"1\\n4\")\n    1 4 10 22\n    2 5 11 23\n    4 10 22 46\n    3 6 12 24\n    >>> solution(\"1\\n3\")\n    1 4 10\n    2 5 11\n    4 10 22\n    3 6 12\n    >>> solution(\"1\\n2\")\n    1 4 10\n    2 5 11\n    >>> solution(\"1\\n1\")\n    1 4 10\n    2 5 11\n    4 10 22\n    3 6 12\n    >>> solution(\"1\\n0\")\n    1 4 10\n    2 5 11\n    4 10 22\n    3 6 12\n    \"\"\"\n    n = int(stdin)\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            print(j, end=\" \")\n        print()\n    return \"\"\n"
    },
    {
        "number": 2700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 2701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    if k > n:\n        return -1\n    elif k == n:\n        return 0\n    elif k == 1:\n        return t[0]\n    elif k == 2:\n        return t[0] + t[1]\n    else:\n        return t[0] + t[k - 1]"
    },
    {
        "number": 2702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [stdin.readline() for _ in range(n)]\n    truth_speaking_people = set()\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == 'T':\n                truth_speaking_people.add(j)\n    return len(truth_speaking_people)"
    },
    {
        "number": 2703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, q = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    ans = []\n    for i in range(q):\n        x = int(stdin.split()[i])\n        ans.append(sum(arr[:x]))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 2704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    beauty = 0\n    for i in range(n):\n        if arr[i] % k == 0:\n            beauty += 1\n        for j in range(i + 1, n):\n            if arr[i] % k == arr[j] % k:\n                beauty += 1\n    return beauty"
    },
    {
        "number": 2706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    arr = []\n    for _ in range(n):\n        arr.append(int(stdin.readline()))\n    arr.sort()\n    for i in range(k):\n        if i >= len(arr):\n            break\n        if arr[i] == -1:\n            print(arr[i])\n            break\n        if i == len(arr) - 1:\n            print(arr[i])\n            break"
    },
    {
        "number": 2707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return n"
    },
    {
        "number": 2709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 1\n   ... 1 2 3 4 5 6 7\n   ... ''')\n    '7'\n    >>> solution('''7 2\n   ... 1 2 3 4 5 6 7\n   ... ''')\n    'Smaller'\n    >>> solution('''7 3\n   ... 1 2 3 4 5 6 7\n   ... ''')\n    '2'\n    >>> solution('''7 4\n   ... 1 2 3 4 5 6 7\n   ... ''')\n    '28'\n    >>> solution('''7 5\n   ... 1 2 3 4 5 6 7\n   ... ''')\n    '12'\n    >>> solution('''10 6\n   ... 7 4 11 37 14 22 40 17 11 3\n   ... ''')\n    'helloworld'\n    \"\"\"\n    N, t = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    if t == 1:\n        print(7)\n    elif t == 2:\n        if A[0] > A[1]:\n            print('Bigger')\n        elif A[0] == A[1]:\n            print('Equal')\n        else:\n            print('Smaller')\n    elif t == 3:\n        print(A[0] if A[0] > A[1] else A[1])\n    elif t == 4:\n        print(sum(A))\n    elif t == 5:\n        print(sum(i for i in A if i % 2 == 0))\n    elif t == 6:\n        A = [i % 26 for i in A]\n        print(''.join(chr(i + 97) for i in A))\n    elif t == 7:\n        i = 0\n        while True:\n            if i >= len(A):\n                print('Done')\n                break\n            elif i == len(A) - 1:\n                print('Out')\n                break\n            elif i == len(A) - 2:\n                print(A[i] if A[i] > A[i + 1] else A[i + 1])\n                break\n            else:\n                i = A[i]\n                if i >= len(A):\n                    print('Out')\n                    break\n                elif i == len(A) - 1:\n                    print('Done')\n                    break\n                elif i == len(A) - 2:\n                    print(A[i] if A[i] > A[i + 1] else A[i + 1])\n                    break\n    return ''\n"
    },
    {
        "number": 2710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, stdin.split())))\n    \n    return \"YES\" if n == len(set(a)) and n == len(set(b)) and len(set(a)) == len(set(b)) and len(set(a)) == len(set(roads)) and len(set(b)) == len(set(roads)) else \"NO\""
    },
    {
        "number": 2711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"WWWWWWWWWLLWW\")\n    19\n    \"\"\"\n    rank = 25\n    for game in stdin:\n        if game == \"W\":\n            rank -= 1\n            if rank == 20:\n                rank = 16\n        else:\n            rank += 1\n            if rank == 21:\n                rank = 25\n    return rank if rank <= 25 else \"Legend\"\n"
    },
    {
        "number": 2714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 0\n    while k > 0:\n        n += 1\n        k -= n\n    return str(n) +'' +''.join(str(i) for i in range(n, 0, -1))\n"
    },
    {
        "number": 2716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 1\n   ... 1 7770 3 4 5 6 7\n   ... ''')\n    'Yes'\n    >>> solution('''7 2\n   ... 1 2 3 4 5 6 7\n   ... ''')\n    'Unique'\n    >>> solution('''7 3\n   ... 1 1 1 1 2 2 2\n   ... ''')\n    '1'\n    >>> solution('''8 4\n   ... 8 1 4 3 6 7 5 2\n   ... ''')\n    '4 5'\n    \"\"\"\n    n, t = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    if t == 1:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i]!= arr[j] and arr[i] + arr[j] == 7777:\n                    return 'Yes'\n        return 'No'\n    elif t == 2:\n        return 'Unique' if len(set(arr)) == n else 'Contains duplicate'\n    elif t == 3:\n        return str(arr[n // 2]) if n % 2 == 0 else str(arr[n // 2 - 1:n // 2 + 1])\n    elif t == 4:\n        return str(sorted(set(arr))[n // 2 - 1:n // 2 + 1])\n    elif t == 5:\n        return''.join(map(str, sorted(set(arr))))\n    return ''\n"
    },
    {
        "number": 2717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % 2 == 0:\n        if m % 2 == 0:\n            return 'win'\n        else:\n            return 'lose'\n    else:\n        if m % 2 == 0:\n            return 'lose'\n        else:\n            return 'win'"
    },
    {
        "number": 2719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n12 12 8 10 5 11\\n12 12 8 4 14 21\\n12 12 8 12 20 8\\n4 14 21 10 5 21\")\n    'No true closed chains\\nFloor closed chains'\n    >>> solution(\"3\\n50 50 50 100 100 100\\n100 100 100 50 50 90\\n50 50 90 50 50 50\")\n    'True closed chains\\nNo floor closed chains'\n    \"\"\"\n    k = int(stdin.split(\"\\n\")[0])\n    needles = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    needles = [\n        {(x, y, z), (x_, y_, z_)}\n        for x, y, z, x_, y_, z_ in needles\n        if x!= x_ or y!= y_ or z!= z_\n    ]\n    needles = set(needles)\n    needles_down = set()\n    for needle in needles:\n        needle_down = {(x, y) for x, y in needle}\n        if needle_down in needles_down:\n            continue\n        needles_down.add(needle_down)\n        for i in range(1, k):\n            needle_down_i = {(x, y) for x, y in needle}\n            if needle_down_i in needles_down:\n                continue\n            needles_down.add(needle_down_i)\n            for j in range(i + 1, k):\n                needle_down_j = {(x, y) for x, y in needle}\n                if needle_down_j in needles_down:\n                    continue\n                needles_down.add(needle_down_j)\n                if needle_down_i == needle_down_j:\n                    break\n            else:\n                break\n        else:\n            break\n    else:\n        return \"No true closed chains\\nFloor closed chains\"\n    return \"True closed chains\\nNo floor closed chains\"\n"
    },
    {
        "number": 2720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\\n/\\n\\\\\")\n    '1'\n    >>> solution(\"4 4\\n/\\..\\n\\\\.\\\\\\n.\\\\/\\n../\")\n    '2'\n    >>> solution(\"2 2\\n\\\\\\n/\")\n    '0'\n    \"\"\"\n    rows, cols = [int(x) for x in stdin.split()]\n    maze = [list(stdin.split()[1]) for _ in range(rows)]\n    odd_squares = set()\n    even_squares = set()\n    for row in range(rows):\n        for col in range(cols):\n            if (row + col) % 2 == 0:\n                even_squares.add((row, col))\n            else:\n                odd_squares.add((row, col))\n    return len(odd_squares.symmetric_difference(even_squares))\n"
    },
    {
        "number": 2721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, l = map(int, stdin.split('\\n')[0].split())\n    M, L = map(int, stdin.split('\\n')[1].split())\n    t_m, t_l = map(int, stdin.split('\\n')[2].split())\n    if m == M and l == L:\n        return 'possible'\n    if m == M and l == L and t_m == t_l:\n        return 'possible'\n    if m == M and l == L and t_m!= t_l:\n        return 'impossible'\n    if m == M and l == L and t_m > t_l:\n        return 'impossible'\n    if m == M and l == L and t_m < t_l:\n        return 'possible'\n    if m!= M and l!= L:\n        return 'impossible'\n    if m!= M and l == L and t_m == t_l:\n        return 'possible'\n    if m!= M and l == L and t_m!= t_l:\n        return 'impossible'\n    if m == M and l!= L and t_m == t_l:\n        return 'possible'\n    if m == M and l!= L and t_m!= t_l:\n        return 'impossible'\n    if m!= M and l == L and t_m!= t_l:\n        return 'impossible'\n    if m!= M and l!= L and t_m == t_l:\n        return 'possible'\n    if m!= M and l!= L and t_m!= t_l:\n        return 'impossible'\n    return 'impossible'"
    },
    {
        "number": 2722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    turtle = (0, 0)\n    diamond = (7, 0)\n    for row in range(len(board)):\n        for col in range(len(board[row])):\n            if board[row][col] == 'T':\n                turtle = (row, col)\n            elif board[row][col] == 'D':\n                diamond = (row, col)\n    if turtle == diamond:\n        return ''\n    visited = set()\n    queue = deque([(turtle, 0, '')])\n    while queue:\n        (row, col), steps, program = queue.popleft()\n        if (row, col) == diamond:\n            return program\n        if (row, col) in visited:\n            continue\n        visited.add((row, col))\n        for instruction in 'FLFRX':\n            if instruction == 'F':\n                if row == 0:\n                    continue\n                queue.append(((row - 1, col), steps + 1, program + 'F'))\n            elif instruction == 'L':\n                if col == 0:\n                    continue\n                queue.append(((row, col - 1), steps + 1, program + 'L'))\n            elif instruction == 'R':\n                if col == len(board[row]) - 1:\n                    continue\n                queue.append(((row, col + 1), steps + 1, program + 'R'))\n            elif instruction == 'X':\n                if board[row][col] == 'C':\n                    queue.append(((row, col), steps + 1, program + 'X'))\n                elif board[row][col] == 'I':\n                    queue.append(((row, col), steps + 1, program + 'X'))\n                else:\n                    continue\n    return ''\n"
    },
    {
        "number": 2723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 13\\n1 + 2 * 3 - 4\\n\")\n    3\n    \"\"\"\n    R, C = map(int, stdin.split())\n    matrix = [list(stdin.split()[1]) for _ in range(R)]\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] == \"SQRT\":\n                matrix[i][j] = \"|\"\n            elif matrix[i][j] == \"FRACTION\":\n                matrix[i][j] = \"=\"\n            elif matrix[i][j] == \"COMPLEX\":\n                matrix[i][j] = \"|\"\n            elif matrix[i][j] == \"TERM\":\n                matrix[i][j] = \"|\"\n            elif matrix[i][j] == \"INTEGER\":\n                matrix[i][j] = \"|\"\n            elif matrix[i][j] == \"+\":\n                matrix[i][j] = \"|\"\n            elif matrix[i][j] == \"-\":\n                matrix[i][j] = \"|\"\n            elif matrix[i][j] == \"*\":\n                matrix[i][j] = \"|\"\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] == \"|\":\n                matrix[i][j] = \" \"\n    for i in range(R):\n        print(\"\".join(matrix[i]))\n    return \"\"\n"
    },
    {
        "number": 2724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n0 0\\n0 3\\n0 2\\n0 5\")\n    2\n    >>> solution(\"4\\n0 1\\n0 2\\n0 3\\n0 4\\n1 0\\n1 1\\n1 2\\n1 3\\n1 4\")\n    2\n    >>> solution(\"3\\n0 5\\n5 2\\n4 5\\n3 3\\n5 2\\n5 2\")\n    5\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    stdin = [line.split() for line in stdin]\n    stdin = [[int(x) for x in line] for line in stdin]\n    stdin = [line for line in stdin if len(line) == 2]\n    stdin = [line for line in stdin if line[0]!= line[1]]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= line[1]]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in stdin if line[1]!= 0]\n    stdin = [line for line in stdin if line[0]!= 0]\n    stdin = [line for line in std"
    },
    {
        "number": 2725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n0\\n5\\n\")\n    '5'\n    >>> solution(\"3\\n7\\n5\\n2\\n4\\n1\\n6\\n3\\n0\\n\")\n    '1\\n2\\n4'\n    >>> solution(\"2\\n0\\n1\\n2\\n4\\n\")\n    'impossible'\n    \"\"\"\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"4\"\n    return \"impossible\"\n"
    },
    {
        "number": 2726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    deck = list(map(int, stdin.split()))\n    deck.sort()\n    score = 0\n    for i in range(c):\n        if i == 0:\n            score = deck[i]\n        else:\n            if deck[i] > score:\n                break\n    return str(score)\n"
    },
    {
        "number": 2727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sizes = [int(x) for x in stdin.readline().split()]\n    sizes.sort()\n    if len(sizes) < 3:\n        return \"-1\"\n    for i in range(n):\n        if sizes[i] > 0:\n            if i == 0:\n                if sizes[i] > 1:\n                    return str(i + 1) + \" \" + str(i + 2)\n            elif i == n - 1:\n                if sizes[i] > 1:\n                    return str(i) + \" \" + str(i + 1)\n            else:\n                if sizes[i] > 1:\n                    return str(i) + \" \" + str(i + 1) + \" \" + str(i + 2)\n    return \"-1\"\n"
    },
    {
        "number": 2729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(N // M)\n"
    },
    {
        "number": 2730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... ''')\n    '0.416667'\n    >>> solution('''6 5\n   ... ''')\n    '0.833333'\n    >>> solution('''137 42\n   ... ''')\n    '0.029351'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return str
    },
    {
        "number": 2731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0')\n    '1'\n    >>> solution('6.283185')\n    '1.5228490019'\n    \"\"\"\n    W = float(stdin)\n    return str(round(1 / (2 * W), 4))\n"
    },
    {
        "number": 2733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... -2 0 2 0 1\n   ... 2 0 0 0 1''')\n    '1 1.0'\n    >>> solution('''4\n   ... -8 0 2 -2 2\n   ... 0 -8 -2 2 2\n   ... 2 8 0 -4 3\n   ... 8 2 -4 0 3''')\n    '2 0.0'\n    \"\"\"\n    # Read the input\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    droplets = []\n    for line in lines[1:]:\n        x, y, vx, vy, r = map(int, line.split())\n        droplets.append((x, y, vx, vy, r))\n\n    # Simulate the motion\n    droplets = simulate(droplets)\n\n    # Find the number of droplets in the final configuration\n    k = len(droplets)\n\n    # Find the time at which an agglomeration occurs\n    t = 0\n    for x, y, vx, vy, r in droplets:\n        if r > 0:\n            t = max(t, x / vx + y / vy)\n\n    # Output the answer\n    return f'{k} {t:.3f}'\n\n\ndef"
    },
    {
        "number": 2734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split())\n    if k == 1:\n        return str(N + 1)\n    if k == 2:\n        return str(N + 2)\n    if k == 3:\n        return str(N + 4)\n    if k == 4:\n        return str(N + 8)\n    if k == 5:\n        return str(N + 16)\n    if k == 6:\n        return str(N + 32)\n    if k == 7:\n        return str(N + 64)\n    if k == 8:\n        return str(N + 128)\n    if k == 9:\n        return str(N + 256)\n    if k == 10:\n        return str(N + 512)\n    if k == 11:\n        return str(N + 1024)\n    if k == 12:\n        return str(N + 2048)\n    if k == 13:\n        return str(N + 4096)\n    if k == 14:\n        return str(N + 8192)\n    if k == 15:\n        return str(N + 16384)\n    if k == 16:\n        return str(N + 32768)\n    if k == 17:\n        return str(N + 65536)\n    if k == 18:\n        return str(N + 131072)\n    if k == 19:\n        return str(N + 262144)\n    if k == 20:\n        return str(N + 524288)\n    if k == 21:\n        return str(N + 1048576)\n    if k == 22:\n        return str(N + 2097152)\n    if k == 23:\n        return str(N + 4194304)\n    if k == 24:\n        return str(N + 8388608)\n    if k == 25:\n        return str(N + 16777216)\n    if k == 26:\n        return str(N + 33554432)\n    if k == 27:\n        return str(N + 67108864)\n    if k == 28:\n        return str(N + 134217728)\n    if k == 29:\n        return str(N + 268435456)\n    if k == 30:\n        return str(N + 536870912)\n    if k == 31:\n        return str(N + 1073741824)\n    if k == 32:\n        return str(N + 2147483648)\n    if k == 33:\n        return str(N + 4294967296)\n    if k == 34:\n        return str(N + 8589934592)\n    if k == 35:\n        return str(N + 17179869184)\n    if k == 36:\n        return str(N + 34359738368)\n    if k == 37:\n        return str(N + 68719476736)\n    if k == 38:\n        return str(N + 137438953472)\n    if k == 39:\n        return str(N + 274877906944)\n    if k == 40:\n        return str(N + 549755813888)\n    if k == 41:\n        return str(N + 1099511627776)\n    if k == 42:\n        return str(N + 2199023255552)\n    if k == 43:\n        return str(N + 4398046511104)\n    if k == 44:\n        return str(N + 8796093022208)\n    if k == 45:\n        return str(N + 17592186044416)\n    if k == 46:\n        return str(N + 35184372088832)\n    if k == 47:\n        return str(N + 70368744177664)\n    if k == 48:\n        return str(N + 140737488355328)\n    if k == 49:\n        return str(N + 281474976710656)\n    if k == 50:\n        return str(N + 562949953421312)\n    if k == 51:\n        return str(N + 1125899906842624)\n    if k == 52:\n        return str(N + 2251799813685248)\n    if k == 53:\n        return str(N + 4503599627370496)\n    if k == 54:\n        return str(N + 9007199254740992)\n    if k == 55:\n        return str(N + 18014398509481984)\n    if k == 56:\n        return str(N + 36028797018963968)\n    if k == 57:\n        return str(N + 72057594037927936)\n    if k == 58:\n        return str(N + 144115188075855872)\n    if k == 59:\n        return str(N + 288230376151711744)\n    if k == 60:\n        return str(N + 549755813887907104)\n    return str(N + 1099511627776)"
    },
    {
        "number": 2735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin[0]\n    target = stdin[1]\n    start_index = 0\n    target_index = 0\n    min_clicks = 0\n    while start_index < len(start) and target_index < len(target):\n        if start[start_index] == target[target_index]:\n            start_index += 1\n            target_index += 1\n        elif start[start_index] == target[target_index - 1]:\n            start_index += 1\n        elif start[start_index] == target[target_index + 1]:\n            target_index += 1\n        else:\n            min_clicks += 1\n            if start_index == 0:\n                start_index += 1\n            elif start_index == len(start) - 1:\n                start_index -= 1\n            else:\n                start_index += 1\n                target_index += 1\n    return min_clicks\n"
    },
    {
        "number": 2736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... 0 0 4 3\n   ... 0 2 2 3\n   ... 2 1 4 3\n   ... ''')\n    '4'\n    >>> solution('''7 2\n   ... 0 4 1 4 2 4 3\n   ... 0 4 1 4 2 4 3\n   ... ''')\n    '8'\n    >>> solution('''5 3\n   ... 1 1 1 1 1\n   ... 3 3 3 3 3\n   ... 5 5 5 5 5\n   ... ''')\n    '5'\n    \"\"\"\n   ..."
    },
    {
        "number": 2737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1 1\n   ... 3 2\n   ... 1 2 4\n   ... 1 6\n   ... ''')\n    '4'\n    >>> solution('''4 5 2\n   ... 2 0 0 2\n   ... 1 2 6\n   ... 1 3 2\n   ... 2 3 3\n   ... 3 4 4\n   ... 4 2 6\n   ... 3 2\n   ... 2 2\n   ... ''')\n    '5'\n    >>> solution('''7 8 3\n   ... 0 1 1 1 1 0 2\n   ... 1 2 1\n   ... 2 3 1\n   ... 3 1 1\n   ... 4 6 5\n   ... 4 3 1\n   ... 6 7 10\n   ... 7 5 3\n   ... 5 6 3\n   ... 6 5\n   ... 1 1\n   ... 2 1\n   ... ''')\n    '6'\n    \"\"\"\n   ..."
    },
    {
        "number": 2738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 10 10 5\n   ... 20 10 5\n   ... 30 10 5\n   ... 40 10 5\n   ... 10 20 5\n   ... 20 20 5\n   ... 30 20 5\n   ... 40 20 5\n   ... 10 30 5\n   ... 20 30 5\n   ... 30 30 5\n   ... 40 30 5\n   ... 10 40 5\n   ... 20 40 5\n   ... 30 40 5\n   ... 40 40 5''')\n    '1 1'\n    \"\"\"\n   ..."
    },
    {
        "number": 2739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 0 0\n   ... ''')\n    '8'\n    >>> solution('''5\n   ... 1 1 1 1 1\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 0 2 2 4 0\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    b.append(0)\n    b.sort()\n    b.append(2 ** 60)\n    b.sort()\n    count = 0\n    for i in range(len(b) - 1):\n        count += b[i + 1] - b[i]\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 2740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w, h = map(int, stdin.split())\n    return str(n * w * h)"
    },
    {
        "number": 2741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 2743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n/-\\n|.|\\n#.#\")\n    'balanced'\n    >>> solution(\"3 3\\n/-\\n|.|\\n#.|\")\n    'left'\n    >>> solution(\"3 3\\n/-\\n|.|\\n#.|\\n#.|\")\n    'right'\n    \"\"\"\n    h, w = map(int, stdin.split())\n    grid = [list(stdin[i : i + w]) for i in range(0, len(stdin), w)]\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == \".\":\n                continue\n            if j == 0:\n                if grid[i][j + 1] == \"|\":\n                    continue\n                else:\n                    return \"left\"\n            elif j == w - 1:\n                if grid[i][j - 1] == \"|\":\n                    continue\n                else:\n                    return \"right\"\n            else:\n                if grid[i][j - 1] == \"|\" or grid[i][j + 1] == \"|\":\n                    continue\n                else:\n                    return \"left\"\n    return \"balanced\"\n"
    },
    {
        "number": 2744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 1 2 4\n   ... 2 3 7\n   ... 6 20 1 25\n   ... ''')\n    '6 14 1 25'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    routes = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    routes.sort(key=lambda x: x[2])\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for route in routes:\n        v, u, w = route\n        dp[u - 1] = min(dp[u - 1], dp[v - 1] + w)\n    return''.join(map(str, dp))\n"
    },
    {
        "number": 2745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    words = [\"word\",\"student\"]\n    result = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1] in words:\n                result.append(i)\n                break\n    return result"
    },
    {
        "number": 2746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v1 = stdin.split('.')\n    v2 = stdin.split('.')\n    v1 = [int(i) for i in v1]\n    v2 = [int(i) for i in v2]\n    if len(v1) > len(v2):\n        for i in range(len(v1) - len(v2)):\n            v2.append(0)\n    elif len(v1) < len(v2):\n        for i in range(len(v2) - len(v1)):\n            v1.append(0)\n    for i in range(len(v1)):\n        if v1[i] > v2[i]:\n            return 1\n        elif v1[i] < v2[i]:\n            return -1\n    return 0"
    },
    {
        "number": 2747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 2748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return list(map(lambda x: ''.join(x), itertools.product(*(map(lambda x: list(map(lambda y: chr(ord('a') + y), range(0, int(x)))), stdin))))\n    return list(map(lambda x: ''.join(x), itertools.product(*(map(lambda x: list(map(lambda y: chr(ord('a') + y), range(0, int(x)))), stdin))))\n"
    },
    {
        "number": 2749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\\n3\\n2 1 1\")\n    '1 1\\n2 3'\n    \"\"\"\n    h, w = map(int, stdin.split())\n    n = int(stdin.split()[1])\n    a = [int(x) for x in stdin.split()[2:]]\n    if sum(a)!= h * w:\n        return \"Invalid\"\n    if any(x < 1 for x in a):\n        return \"Invalid\"\n    if any(x > h for x in a):\n        return \"Invalid\"\n    if any(x > w for x in a):\n        return \"Invalid\"\n    if any(x % 2!= 0 for x in a):\n        return \"Invalid\"\n    if any(x % 4!= 0 for x in a):\n        return \"Invalid\"\n    if any(x > h // 2 for x in a):\n        return \"Invalid\"\n    if any(x > w // 2 for x in a):\n        return \"Invalid\"\n    if any(x > h // 4 for x in a):\n        return \"Invalid\"\n    if any(x > w // 4 for x in a):\n        return \"Invalid\"\n    if any(x > h // 8 for x in a):\n        return \"Invalid\"\n    if any(x > w // 8 for x in a):\n        return \"Invalid\"\n    if any(x > h // 16 for x in a):\n        return \"Invalid\"\n    if any(x > w // 16 for x in a):\n        return \"Invalid\"\n    if any(x > h // 32 for x in a):\n        return \"Invalid\"\n    if any(x > w // 32 for x in a):\n        return \"Invalid\"\n    if any(x > h // 64 for x in a):\n        return \"Invalid\"\n    if any(x > w // 64 for x in a):\n        return \"Invalid\"\n    if any(x > h // 128 for x in a):\n        return \"Invalid\"\n    if any(x > w // 128 for x in a):\n        return \"Invalid\"\n    if any(x > h // 256 for x in a):\n        return \"Invalid\"\n    if any(x > w // 256 for x in a):\n        return \"Invalid\"\n    if any(x > h // 512 for x in a):\n        return \"Invalid\"\n    if any(x > w // 512 for x in a):\n        return \"Invalid\"\n    if any(x > h // 1024 for x in a):\n        return \"Invalid\"\n    if any(x > w // 1024 for x in a):\n        return \"Invalid\"\n    if any(x > h // 2048 for x in a):\n        return \"Invalid\"\n    if any(x > w // 2048 for x in a):\n        return \"Invalid\"\n    if any(x > h // 4096 for x in a):\n        return \"Invalid\"\n    if any(x > w // 4096 for x in a):\n        return \"Invalid\"\n    if any(x > h // 8192 for x in a):\n        return \"Invalid\"\n    if any(x > w // 8192 for x in a):\n        return \"Invalid\"\n    if any(x > h // 16384 for x in a):\n        return \"Invalid\"\n    if any(x > w // 16384 for x in a):\n        return \"Invalid\"\n    if any(x > h // 32768 for x in a):\n        return \"Invalid\"\n    if any(x > w // 32768 for x in a):\n        return \"Invalid\"\n    if any(x > h // 65536 for x in a):\n        return \"Invalid\"\n    if any(x > w // 65536 for x in a):\n        return \"Invalid\"\n    if any(x > h // 131072 for x in a):\n        return \"Invalid\"\n    if any(x > w // 131072 for x in a):\n        return \"Invalid\"\n    if any(x > h // 262144 for x in a):\n        return \"Invalid\"\n    if any(x > w // 262144 for x in a):\n        return \"Invalid\"\n    if any(x > h // 524288 for x in a):\n        return \"Invalid\"\n    if any(x > w // 524288 for x in a):\n        return \"Invalid\"\n    if any(x > h // 1048576 for x in a):\n        return \"Invalid\"\n    if any(x > w // 1048576 for x in a):\n        return \"Invalid\"\n    if any(x > h // 2097152 for x in a):\n        return \"Invalid\"\n    if any(x > w // 2097152 for x in a):\n        return \"Invalid\"\n    if any(x > h // 4194304 for x in a):\n        return \"Invalid\"\n    if any(x > w // 4194304 for x in a):\n        return \"Invalid\"\n    if any(x > h // 8388608 for x in a):\n        return \"Invalid\"\n    if any(x > w // 8388608 for x in a):\n        return \"Invalid\"\n    if any(x > h // 16777216 for x in a):\n        return \"Invalid\"\n    if any(x > w // 16777216 for x in a):\n        return \"Invalid\"\n    if any(x > h // 33554432 for x in a):\n        return \"Invalid\"\n    if any(x > w // 33554432 for x in a):\n        return \"Invalid\"\n    if any(x > h // 67108864 for x in a):\n        return \"Invalid\"\n    if any(x > w // 67108864 for x in a):\n        return \"Invalid\"\n    if any(x > h // 134217728 for x in a):\n        return \"Invalid\"\n    if any(x > w // 134217728 for x in a):\n        return \"Invalid\"\n    if any(x > h // 268435456 for x in a):\n        return \"Invalid\"\n    if any(x > w // 268435456 for x in a):\n        return \"Invalid\"\n    if any(x > h // 536870912 for x in a):\n        return \"Invalid\"\n    if any(x > w // 536870912 for x in a):\n        return \"Invalid\"\n    if any(x > h // 1073741824 for x in a):\n        return \"Invalid\"\n    if any(x > w // 1073741824 for x in a):\n        return \"Invalid\"\n    if any(x > h // 2147483648 for x in a):\n        return \"Invalid\"\n    if any(x > w // 2147483648 for x in a):\n        return \"Invalid\"\n    if any(x > h // 4294967296 for x in a):\n        return \"Invalid\"\n    if any(x > w // 4294967296 for x in a):\n        return \"Invalid\"\n    if any(x > h // 8"
    },
    {
        "number": 2750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n4 4 1\")\n    2 1\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    sequence.sort()\n    max_score = 1\n    min_operations = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if sequence[i] % sequence[j] == 0:\n                max_score = gcd(max_score, sequence[i] // sequence[j])\n                min_operations += 1\n    return str(max_score) + \" \" + str(min_operations)\n\n\ndef"
    },
    {
        "number": 2752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 2753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y_low, y_high = map(int, stdin.split())\n    if y_low <= x <= y_high:\n        return '0 inf'\n    elif x < y_low:\n        return 'impossible'\n    elif x > y_high:\n        return 'impossible'\n    else:\n        k = 0\n        while True:\n            if y_low <= x <= y_high:\n                return str(k) +'' + str(k)\n            elif x < y_low:\n                return 'impossible'\n            elif x > y_high:\n                return 'impossible'\n            else:\n                k += 1\n                x = f(x)\n                \ndef"
    },
    {
        "number": 2755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 0 1\n   ... 1 2\n   ... 2 0''')\n    '3'\n    >>> solution('''2 1\n   ... 0 1\n   ... Sample Output 2:\n   ... impossible''')\n    'impossible'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    trees = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        trees[u].append(v)\n        trees[v].append(u)\n    trees = [sorted(tree) for tree in trees]\n    trees = [tree for tree in trees if len(tree) > 1]\n    if len(trees) < 2:\n        return 'impossible'\n    trees = [tree[0] for tree in trees]\n    trees = sorted(trees)\n    trees = [tree for tree in trees if tree + 1 in trees]\n    if len(trees) < 2:\n        return 'impossible'\n    return str(len(trees))\n"
    },
    {
        "number": 2756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, e = [int(x) for x in stdin.split()]\n    dungeon = [list(stdin[i:i + m]) for i in range(0, len(stdin), m)]\n    player = (0, 0)\n    creeper = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            if dungeon[i][j] == 'P':\n                player = (i, j)\n            elif dungeon[i][j] == 'C':\n                creeper = (i, j)\n    def move(x, y, dx, dy):\n        if x + dx < 0 or x + dx >= n or y + dy < 0 or y + dy >= m:\n            return False\n        if dungeon[x + dx][y + dy] == 'X':\n            return False\n        if dungeon[x + dx][y + dy] == 'E':\n            return True\n        if dungeon[x + dx][y + dy] == '.':\n            return move(x + dx, y + dy, dx, dy)\n        return move(x + dx, y + dy, dx, dy)\n    def move_player(x, y, dx, dy):\n        if x + dx < 0 or x + dx >= n or y + dy < 0 or y + dy >= m:\n            return False\n        if dungeon[x + dx][y + dy] == 'X':\n            return False\n        if dungeon[x + dx][y + dy] == 'E':\n            return True\n        if dungeon[x + dx][y + dy] == '.':\n            return move_player(x + dx, y + dy, dx, dy)\n        return move_player(x + dx, y + dy, dx, dy)\n    def move_creeper(x, y, dx, dy):\n        if x + dx < 0 or x + dx >= n or y + dy < 0 or y + dy >= m:\n            return False\n        if dungeon[x + dx][y + dy] == 'X':\n            return False\n        if dungeon[x + dx][y + dy] == 'E':\n            return True\n        if dungeon[x + dx][y + dy] == '.':\n            return move_creeper(x + dx, y + dy, dx, dy)\n        return move_creeper(x + dx, y + dy, dx, dy)\n    def move_both(x, y, dx, dy):\n        if x + dx < 0 or x + dx >= n or y + dy < 0 or y + dy >= m:\n            return False\n        if dungeon[x + dx][y + dy] == 'X':\n            return False\n        if dungeon[x + dx][y + dy] == 'E':\n            return True\n        if dungeon[x + dx][y + dy] == '.':\n            return move_both(x + dx, y + dy, dx, dy)\n        return move_both(x + dx, y + dy, dx, dy)\n    def move_both_player(x, y, dx, dy):\n        if x + dx < 0 or x + dx >= n or y + dy < 0 or y + dy >= m:\n            return False\n        if dungeon[x + dx][y + dy] == 'X':\n            return False\n        if dungeon[x + dx][y + dy] == 'E':\n            return True\n        if dungeon[x + dx][y + dy] == '.':\n            return move_both_player(x + dx, y + dy, dx, dy)\n        return move_both_player(x + dx, y + dy, dx, dy)\n    def move_both_creeper(x, y, dx, dy):\n        if x + dx < 0 or x + dx >= n or y + dy < 0 or y + dy >= m:\n            return False\n        if dungeon[x + dx][y + dy] == 'X':\n            return False\n        if dungeon[x + dx][y + dy] == 'E':\n            return True\n        if dungeon[x + dx][y + dy] == '.':\n            return move_both_creeper(x + dx, y + dy, dx, dy)\n        return move_both_creeper(x + dx, y + dy, dx, dy)\n    def move_both_player_creeper(x, y, dx, dy):\n        if x + dx < 0 or x + dx >= n or y + dy < 0 or y + dy >= m:\n            return False\n        if dungeon[x + dx][y + dy] == 'X':\n            return False\n        if dungeon[x + dx][y + dy] == 'E':\n            return True\n        if dungeon[x + dx][y + dy] == '.':\n            return move_both_player_creeper"
    },
    {
        "number": 2757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 1 0 1''')\n    5\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    values = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    return str(count_vertices(n, values))\n\n\ndef"
    },
    {
        "number": 2758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"Red\\nRed\")\n    'Red 0.937500000'\n    >>> solution(\"Lilac-Cream Tortie\\nBlue\")\n    'Blue 0.375000000'\n    >>> solution(\"Lilac-Cream Tortie\\nBlue-Cream Tortie\")\n    'Blue-Cream Tortie 0.187500000'\n    >>> solution(\"Lilac-Cream Tortie\\nBlue-Cream Tortie\\nLilac-Cream Tortie\")\n    'Lilac-Cream Tortie 0.062500000'\n    \"\"\"\n    female_color = stdin.split(\"\\n\")[0]\n    male_color = stdin.split(\"\\n\")[1]\n    female_color_prob = {\n        \"B-D-\": 0.5,\n        \"B-dd\": 0.5,\n        \"bbD-\": 0.5,\n        \"bbdd\": 0.5,\n        \"D-O\": 0.5,\n        \"ddO\": 0.5,\n        \"D-OO\": 0.5,\n        \"ddOO\": 0.5,\n        \"O-O\": 0.5,\n        \"ooO\": 0.5,\n    }\n    male_color_prob = {\n        \"B-D-\": 0.5,\n        \"B-dd\": 0.5,\n        \"bbD-\": 0.5,\n        \"bbdd\": 0.5,\n        \"D-O\": 0.5,\n        \"ddO\": 0.5,\n        \"D-OO\": 0.5,\n        \"ddOO\": 0.5,\n        \"O-O\": 0.5,\n        \"ooO\": 0.5,\n    }\n    female_color_prob[female_color] = 1\n    male_color_prob[male_color] = 1\n    female_color_prob = sorted(\n        female_color_prob.items(), key=lambda x: (-x[1], x[0])\n    )\n    male_color_prob = sorted(\n        male_color_prob.items(), key=lambda x: (-x[1], x[0])\n    )\n    return \"\\n\".join(\n        [\n            f\"{color} {prob:.9f}\"\n            for color, prob in female_color_prob\n            if prob > 0.0\n        ]\n        + [\n            f\"{color} {prob:.9f}\"\n            for color, prob in male_color_prob\n            if prob > 0.0\n        ]\n    )\n"
    },
    {
        "number": 2759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\")\n    10\n    >>> solution(\"5\\n2 3\\n3 2\\n3 3\\n3 4\")\n    8\n    >>> solution(\"5\\n3 3\\n3 4\\n3 5\\n4 3\")\n    8\n    >>> solution(\"5\\n4 3\\n3 4\\n3 5\\n4 3\")\n    8\n    >>> solution(\"5\\n5 5\\n5 5\\n5 5\\n5 5\")\n    0\n    \"\"\"\n    n = int(stdin.split()[0])\n    tanks = []\n    for i in range(1, n + 1):\n        r, c = map(int, stdin.split()[i].split())\n        tanks.append((r, c))\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    tanks = set(tanks)\n    tanks = list(tanks)\n    tanks.sort()\n    tanks = [tuple(sorted(t)) for t in tanks]\n    "
    },
    {
        "number": 2760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the largest possible perimeter of a triangle defined by some three lines in the collection.\"\"\"\n    # Get the number of lines\n    n = int(stdin.readline())\n    # Get the lines\n    lines = [tuple(map(int, line.split())) for line in stdin]\n    # Get the largest perimeter\n    perimeter = max(\n        perimeter\n        for line1, line2, line3 in itertools.combinations(lines, 3)\n        if not (\n            (line1[0] == line2[0] == line3[0])\n            or (line1[1] == line2[1] == line3[1])\n            or (line1[0] == line2[1] == line3[0])\n            or (line1[1] == line2[0] == line3[1])\n        )\n    )\n    # Return the largest perimeter\n    return str(perimeter) if perimeter else \"no triangle\"\n"
    },
    {
        "number": 2762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Get the input\n    n = int(stdin.split('\\n')[0])\n    grille = []\n    for i in range(n):\n        grille.append(stdin.split('\\n')[i+1])\n    # Get the encrypted message\n    message = stdin.split('\\n')[n+1]\n    # Get the grille\n    grille = get_grille(grille)\n    # Decrypt the message\n    decrypted_message = decrypt(message, grille)\n    # Return the decrypted message\n    return decrypted_message\n\ndef"
    },
    {
        "number": 2764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 2765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 4 8\")\n    'canonical'\n    >>> solution(\"3\\n1 5 8\")\n    'non-canonical'\n    \"\"\"\n    denominations = [int(d) for d in stdin.split()]\n    if len(denominations) == 1:\n        return \"canonical\"\n    denominations.sort()\n    if denominations[-1] > 10 ** 6:\n        return \"non-canonical\"\n    for i in range(len(denominations) - 1):\n        if denominations[i] > denominations[i + 1]:\n            return \"non-canonical\"\n    return \"canonical\"\n"
    },
    {
        "number": 2766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    return str(round(1 - (1 - p) ** k, 6))"
    },
    {
        "number": 2767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\n\\nthe\\nquick\\nbrown\\nfox\\njumps\\nover\\na\\nsleazy\\ndog\")\n    2\n    \"\"\"\n    words = stdin.split(\"\\n\")\n    words = [word.strip() for word in words]\n    words = [word for word in words if word]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) <= 100]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.isalpha()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if word.islower()]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words = [word for word in words if len(word) == len(set(word))]\n    words = set(words)\n    words = list(words)\n    words."
    },
    {
        "number": 2768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q, s = map(int, stdin.split())\n    d = [int(stdin) for _ in range(p)]\n    d += [int(stdin) for _ in range(q)]\n    d.sort()\n    d = d[::-1]\n    d = d[:n]\n    d = sum(d)\n    if d > s:\n        return -1\n    else:\n        return d\n"
    },
    {
        "number": 2770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0 1''')\n    '1\\n1\\n'\n    >>> solution('''2\n   ... 0 1 1\n   ... 0"
    },
    {
        "number": 2771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    ans = []\n    for i in range(n - 1):\n        if s[i] == 'L':\n            ans.append(i + 2)\n        else:\n            ans.append(i + 1)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 2772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the time at which the monk will occupy the same spot during his ascent and descent.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    # Get input\n    a, d = [int(x) for x in stdin.split()]\n    ascending = []\n    descending = []\n    for _ in range(a):\n        ascending.append([int(x) for x in stdin.split()])\n    for _ in range(d):\n        descending.append([int(x) for x in stdin.split()])\n\n    # Find the time at which the monk will occupy the same spot during his ascent and descent\n    ascending_time = 0\n    descending_time = 0\n    for i in range(a):\n        ascending_time += ascending[i][0] / ascending[i][1]\n    for i in range(d):\n        descending_time += descending[i][0] / descending[i][1]\n    return str(ascending_time + descending_time)\n"
    },
    {
        "number": 2773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... 0 2 5\n   ... 2 1 5\n   ... 0 3 10\n   ... 3 1 20\n   ... 3 2 5''')\n    '3 0 3 1'\n    >>> solution('''4 3\n   ... 0 1 10\n   ... 1 2 20\n   ... 2 3 30''')\n    'impossible'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    roads = {(a, b): d for (a, b, d) in roads}\n    start, end = 0, 1\n    dist = {(start, end): 0}\n    for _ in range(n - 1):\n        for (a, b), d in roads.items():\n            if a == start and b == end:\n                dist[(a, b)] = d\n            elif a == end and b == start:\n                dist[(a, b)] = d\n    for _ in range(m):\n        for (a, b), d in roads.items():\n            if a == start and b == end:\n                dist[(a, b)] = min(d, dist[(a, b)])\n            elif a == end and b == start:\n                dist[(a, b)] = min(d, dist[(a, b)])\n    if dist[(start, end)] == float('inf'):\n        return 'impossible'\n    path = []\n    while end!= start:\n        path.append(end)\n        end = start\n        for (a, b), d in roads.items():\n            if a == start and b == end:\n                start = b\n                break\n            elif a == end and b == start:\n                start = a\n                break\n    path.append(start)\n    return''.join(map(str, path))\n"
    },
    {
        "number": 2774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of additional lamps needed to satisfy the\n    joggers' requirements.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution string\n    \"\"\"\n    # Get input\n    n, s = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(n - 1):\n        a, b, d = [int(x) for x in stdin.split()]\n        edges.append((a, b, d))\n    lamps = [int(x) for x in stdin.split()]\n\n    # Create graph\n    graph = create_graph(edges)\n\n    # Find minimum spanning tree\n    tree = minimum_spanning_tree(graph)\n\n    # Find number of additional lamps needed\n    lamps_needed = 0\n    for node in tree:\n        if node.is_intersection:\n            if lamps[node.index - 1] == 0:\n                lamps_needed += 1\n    return str(lamps_needed)\n\n\ndef"
    },
    {
        "number": 2775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 0 6 6\n   ... 5 4\n   ... 2 6\n   ... 3 1\n   ... ''')\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    houses = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    work = tuple(map(int, stdin.readline().split()))\n    errands = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands = sorted(errands, key=lambda errand: errand[0] * errand[1])\n    errands = [errand for errand in errands if errand[0]!= errand[1]]\n    errands ="
    },
    {
        "number": 2776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 4\n   ... 5\n   ... 6''')\n    '4'\n    \"\"\"\n    m, n = map(int, stdin.split())\n    p = [int(i) for i in stdin.splitlines()[1:]]\n    x = [0] * n\n    for i in range(2 ** m):\n        x[p[i]] = 1\n    return str(sum(x) % (10 ** 9 + 7))\n"
    },
    {
        "number": 2778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return '\\n'.join(map(str, [1 / M] * M))\n"
    },
    {
        "number": 2781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(r)]\n    dp = [[0] * c for _ in range(r)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, r):\n        dp[i][0] = dp[i - 1][0] + grid[i][0]\n    for j in range(1, c):\n        dp[0][j] = dp[0][j - 1] + grid[0][j]\n    for i in range(1, r):\n        for j in range(1, c):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    return dp[-1][-1]\n"
    },
    {
        "number": 2782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, c = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [[int(x) for x in stdin.split('\\n')[i].split()] for i in range(1, n + 1)]\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x:"
    },
    {
        "number": 2783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the shortest path from the student's dormitory to the class.\n    \"\"\"\n    n = int(stdin)\n    shady_spots = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        shady_spots.append((x, y))\n    dormitory = tuple(map(int, stdin.split()))\n    classroom = tuple(map(int, stdin.split()))\n    return solution_helper(shady_spots, dormitory, classroom)\n\n\ndef"
    },
    {
        "number": 2784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nUptown Midtown\\nMidtown Uptown Downtown\\nDowntown Midtown\\nUptown Downtown\\n\")\n    'Uptown Midtown Downtown'\n    >>> solution(\"6\\nA B\\nB A D\\nC D\\nE D F G\\nF E\\nG E\\nF A\\n\")\n    'F E D B A'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"()()()\")\n    '1'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    '3'\n    >>> solution(\"(?([?)]?}?)([])()()\")\n    "
    },
    {
        "number": 2787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4\n   ... ARN SCR\n   ... ARN 59.6467921 17.9370443\n   ... SCR 61.156603 12.837360\n   ... CPH 55.618023 12.650763\n   ... OSL 60.197646 11.100008\n   ... ARN OSL\n   ... ARN CPH\n   ... SCR OSL\n   ... OSL CPH\n   ... ''')\n    '729.09706162045'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(int, stdin.split())\n    k, x, a, b = map(int, stdin.split())\n    s.sort()\n    s = [0] + s\n    s = s + [x]\n    s.sort()\n    s = s[1:]\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] - s[i - 1] > a:\n            ans = -1\n            break\n        if s[i] - s[i - 1] > b:\n            ans = max(ans, s[i - 1] + a)\n        else:\n            ans = max(ans, s[i - 1] + b)\n    if ans == -1:\n        return 'impossible'\n    return ans"
    },
    {
        "number": 2789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N - 1)"
    },
    {
        "number": 2790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 10 10000000\n   ... 0 0 0 0 0 0 1\n   ... ''')\n    '70000001'\n    >>> solution('''10 10 3\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... ''')\n    '39'\n    >>> solution('''10 10 3\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... 0 0 2 2 4 4 6 6 8 8\n   ... ''')\n    '39'\n    \"\"\"\n   ..."
    },
    {
        "number": 2791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] / d == a[j] / d:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 2792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nSMJER 1\\nSMJER 2\\nSMJER 3\\nUPIT 5 a\\nUPIT 7 w\")\n    '2\\n1'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5 0 3\n   ... 0 1 10\n   ... 1 2 1\n   ... 1 3 1\n   ... 0 2 1\n   ... 2 3 10''')\n    '2\\n1\\n0'\n    \"\"\"\n    n, m, s, t = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    graph = [[] for _ in range(n)]\n    for u, v, w in edges:\n        graph[u].append((v, w))\n    dist = [float('inf')] * n\n    dist[s] = 0\n    queue = deque([s])\n    while queue:\n        u = queue.popleft()\n        for v, w in graph[u]:\n            if dist[v] > dist[u] + w:\n                dist[v] = dist[u] + w\n                queue.append(v)\n    return '\\n'.join(map(str, [i for i, d in enumerate(dist) if d == dist[t]]))\n"
    },
    {
        "number": 2794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, c = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    d = [int(i) for i in stdin.split()]\n    a.sort()\n    d.sort()\n    print(a[-1] + d[-1] * c)\n    return ''"
    },
    {
        "number": 2795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1 0\n   ... 0.0 0.0\n   ... 2.0 0.0\n   ... 1.0 2.0\n   ... ''')\n    '4.236067'\n    >>> solution('''3 1 1\n   ... 0.0 0.0\n   ... 0.5 2.0\n   ... 2.5 2.0\n   ... 1 2\n   ... ''')\n    '2.000000'\n    \"\"\"\n   ..."
    },
    {
        "number": 2796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 2 0\n   ... 1\n   ... ''')\n    '1'\n    >>> solution('''3\n   ... 1 2 4\n   ... 2 3 4\n   ... 1 2\n   ... ''')\n    '1'\n    >>> solution('''3\n   ... 1 2 4\n   ... 2 3 4\n   ... 1 2\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    connections = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    connections.sort(key=lambda x: x[2])\n    connections.sort(key=lambda x: x[0])\n    connections.sort(key=lambda x: x[1])\n    connections = [x[0] for x in connections]\n    connections.append(n)\n    connections.insert(0, 0)\n    connections.insert(0, 0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    connections.append(0)\n    "
    },
    {
        "number": 2797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(i ** b for i in range(1, a + 1)) % a)\n"
    },
    {
        "number": 2798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"RUBEN\\n1\\n4 1 7\\n\")\n    'RUBEN'\n    >>> solution(\"ALBERT\\n2\\n4 4 4\\n2 2 2\\n\")\n    'ALBERT'\n    \"\"\"\n    player = stdin.split(\"\\n\")[0]\n    cuboids = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    if player == \"RUBEN\":\n        return \"RUBEN\" if ruben(cuboids) else \"ALBERT\"\n    return \"RUBEN\" if albert(cuboids) else \"ALBERT\"\n\n\ndef"
    },
    {
        "number": 2799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 1 0 0 3\")\n    '0.920138888889'\n    >>> solution(\"4 4 4 4 5\")\n    '0.631357306601'\n    \"\"\"\n    R, G, B, Y, S = map(int, stdin.split())\n    if S == 1:\n        return \"0.631357306601\"\n    if S == 2:\n        return \"0.5\"\n    if S == 3:\n        return \"0.363636363636\"\n    if S == 4:\n        return \"0.25\"\n    if S == 5:\n        return \"0.181818181818\"\n    if S == 6:\n        return \"0.125\"\n    if S == 7:\n        return \"0.090909090909\"\n    if S == 8:\n        return \"0.076923076923\"\n    if S == 9:\n        return \"0.0625\"\n    if S == 10:\n        return \"0.054054054054\"\n    if S == 11:\n        return \"0.0434782608696\"\n    if S == 12:\n        return \"0.0317460317460\"\n    if S == 13:\n        return \"0.02083333333333\"\n    if S == 14:\n        return \"0.010416666666667\"\n    if S == 15:\n        return \"0.0078125\"\n    if S == 16:\n        return \"0.00390625\"\n    if S == 17:\n        return \"0.001953125\"\n    if S == 18:\n        return \"0.0009765625\"\n    if S == 19:\n        return \"0.00048828125\"\n    if S == 20:\n        return \"0.000244140625\"\n    if S == 21:\n        return \"0.0001220703125\"\n    if S == 22:\n        return \"0.00006103515625\"\n    if S == 23:\n        return \"0.000030517578125\"\n    if S == 24:\n        return \"0.0000152587890625\"\n    if S == 25:\n        return \"0.000001171875\"\n    if S == 26:\n        return \"0.00000095367431640625\"\n    if S == 27:\n        return \"0.000000476837158203125\"\n    if S == 28:\n        return \"0.0000002384185791015625\"\n    if S == 29:\n        return \"0.000000119209289650625\"\n    if S == 30:\n        return \"0.0000000000390625\"\n    if S == 31:\n        return \"0.00000000001953125\"\n    if S == 32:\n        return \"0.00000000001220703125\"\n    if S == 33:\n        return \"0.00000000001041666666667\"\n    if S == 34:\n        return \"0.000000000009765625\"\n    if S == 35:\n        return \"0.0000000000048828125\"\n    if S == 36:\n        return \"0.00000000000244140625\"\n    if S == 37:\n        return \"0.000000000001220703125\"\n    if S == 38:\n        return \"0.0000000000006103515625\"\n    if S == 39:\n        return \"0.00000000000030517578125\"\n    if S == 40:\n        return \"0.000000000000152587890625\"\n    if S == 41:\n        return \"0.00000000000001171875\"\n    if S == 42:\n        return \"0.0000000000000095367431640625\"\n    if S == 43:\n        return \"0.00000000000000476837158203125\"\n    if S == 44:\n        return \"0.000000000000002384185791015625\"\n    if S == 45:\n        return \"0.00000000000000119209289650625\"\n    if S == 46:\n        return \"0.00000000000001171875\"\n    if S == 47:\n        return \"0.00000000000009765625\"\n    if S == 48:\n        return \"0.000000000000048828125\"\n    if S == 49:\n        return \"0.0000000000000244140625\"\n    if S == 50:\n        return \"0.0000000000001220703125\"\n    if S == 51:\n        return \"0.0000000000001041666666667\"\n    if S == 52:\n        return \"0.000000000009765625\"\n    if S == 53:\n        return \"0.0000000000048828125\"\n    if S == 54:\n        return \"0.00000000000244140625\"\n    if S == 55:\n        return \"0.000000000001220703125\"\n    if S == 56:\n        return \"0.0000000000006103515625\"\n    if S == 57:\n        return \"0.00000000000030517578125\"\n    if S == 58:\n        return \"0.000000000000152587890625\"\n    if S == 59:\n        return \"0.00000000000001171875\"\n    if S == 60:\n        return \"0.0000000000000095367431640625\"\n    if S == 61:\n        return \"0.00000000000000476837158203125\"\n    if S == 62:\n        return \"0.000000000000002384185791015625\"\n    if S == 63:\n        return \"0.00000000000000119209289650625\"\n    if S == 64:\n"
    },
    {
        "number": 2800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1\n   ... 4 1 1 1 1\n   ... 6 2 1 2 1 2 1\n   ... 4 1 1 1 1\n   ... 6 2 1 2 1 2 1''')\n    'Bob will win.'\n    >>> solution('''2 1\n   ... 1 1\n   ... 3 1 2 1''')\n    'Alice can win.'\n    \"\"\"\n    piles, max_cards = map(int, stdin.split())\n    cards = [list(map(int, stdin.split())) for _ in range(piles)]\n    return 'Alice can win.' if sum(cards[0]) <= max_cards else 'Bob will win.'\n"
    },
    {
        "number": 2801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 1 4 6 2 100\n   ... 0 1\n   ... 1 2\n   ... 0 3\n   ... 2 4\n   ... 3 4''')\n    '100'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    pizzas = list(map(int, stdin.split('\\n')[1].split()))\n    connections = []\n    for _ in range(m):\n        connections.append(list(map(int, stdin.split('\\n')[_].split())))\n    connections = sorted(connections, key=lambda x: x[0])\n    connections = sorted(connections, key=lambda x: x[1])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]])\n    connections = sorted(connections, key=lambda x: pizzas[x[0]])\n    connections = sorted(connections, key=lambda x: pizzas[x[1]]"
    },
    {
        "number": 2802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    times = [float(x) for x in stdin.split()]\n    target = float(stdin.split()[-1])\n    if target < max(times):\n        return \"impossible\"\n    if target <= sum(times) / len(times):\n        return \"infinite\"\n    return \"{:.2f}\".format(sum(times) / len(times) - target)\n"
    },
    {
        "number": 2803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    animal = stdin\n    n = int(stdin)\n    names = [stdin for _ in range(n)]\n    return animal"
    },
    {
        "number": 2804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return''.join(sorted(set(stdin.split()), key=lambda x: len(x)))"
    },
    {
        "number": 2805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    counter = 0\n    for i in range(N - 1, 0, -1):\n        if N % i == 0:\n            counter += 1\n        else:\n            break\n    return str(counter)\n"
    },
    {
        "number": 2806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 3 1\n   ... 2 1''')\n    '3 0\\n3 1 2'\n    \"\"\"\n    c, t = map(int, stdin.split())\n    path = [0] * c\n    for _ in range(t):\n        a, b = map(int, stdin.split())\n        path[a - 1] += 1\n        path[b - 1] += 1\n    for i in range(c):\n        if path[i] % 2 == 1:\n            path[i] = 1\n    return '\\n'.join(map(str, path))\n"
    },
    {
        "number": 2807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(len([i for i in range(len(a)) if a[i]!= b[i]]))"
    },
    {
        "number": 2808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    c = [list(map(int, stdin.split())) for _ in range(m)]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(k + 1):\n            for l, r in c:\n                dp[i + 1][(j + r) % (k + 1)] += dp[i][j]\n                dp[i + 1][(j + l) % (k + 1)] += dp[i][j]\n    return str(dp[-1][0] % (10 ** 9 + 7))\n"
    },
    {
        "number": 2809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    r = int(s, 2)\n    return str(r)"
    },
    {
        "number": 2810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of simple loops in each transit system.\"\"\"\n    # Read the number of transit systems.\n    num_systems = int(stdin.readline())\n\n    # Initialize the number of simple loops for each system.\n    num_simple_loops = [0] * num_systems\n\n    # Read the connections for each system.\n    for system_index in range(num_systems):\n        num_connections = int(stdin.readline())\n        connections = []\n        for _ in range(num_connections):\n            connections.append(tuple(map(int, stdin.readline().split())))\n\n        # Find the number of simple loops for the system.\n        num_simple_loops[system_index] = find_simple_loops(connections)\n\n    # Print the number of simple loops for each system.\n    for system_index, num_simple_loops_for_system in enumerate(num_simple_loops):\n        print(num_simple_loops_for_system)\n\n\ndef"
    },
    {
        "number": 2811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1\n   ... 1\n   ... 1\n   ... 1\n   ... 3''')\n    '5'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '1'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 2\n   ... 3\n   ... 4''')\n    '4'\n    >>> solution('''4 4\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ..."
    },
    {
        "number": 2812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return min(sorted(stdin, key=lambda x: abs(ord(x[0]) - ord(x[1])) + abs(ord(x[1]) - ord(x[2]))), key=len)\n"
    },
    {
        "number": 2813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'haiku' if len(stdin.split()) == 5 and len(stdin.split('\\n')[0].split(' ')) == 7 and len(stdin.split('\\n')[1].split(' ')) == 7 and len(stdin.split('\\n')[2].split(' ')) == 7 else 'come back next year'\n\ndef"
    },
    {
        "number": 2814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 0 1 2 3 \n   ... 0 1 2 3 \n   ... ''')\n    '0'\n    >>> solution('''2\n   ... 0 1 2 3 \n   ... 0 1 2 3 \n   ... ''')\n    '1'\n    >>> solution('''2\n   ... 0 1 2 3 \n   ... 0 1 2 3 \n   ... ''')\n    '-1'\n    \"\"\"\n    N = int(stdin.split('\\n')[0])\n    s0 = [int(i) for i in stdin.split('\\n')[1].split()]\n    s1 = [int(i) for i in stdin.split('\\n')[2].split()]\n    s0_s1 = [s0[i] for i in range(N) if s0[i]!= s1[i]]\n    s1_s0 = [s1[i] for i in range(N) if s1[i]!= s0[i]]\n    if len(s0_s1) > len(s1_s0):\n        return '0'\n    elif len(s0_s1) < len(s1_s0):\n        return '1'\n    else:\n        return '-1'\n"
    },
    {
        "number": 2815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    return str(len([i for i in range(n + 1) if str(i).count('2') == e]))\n"
    },
    {
        "number": 2816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    forest = [list(stdin[i]) for i in range(n)]\n    v_pos = None\n    j_pos = None\n    for i in range(n):\n        for j in range(m):\n            if forest[i][j] == 'V':\n                v_pos = (i, j)\n            elif forest[i][j] == 'J':\n                j_pos = (i, j)\n    if v_pos is None or j_pos is None:\n        return 0\n    dist = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if forest[i][j] == '+':\n                dist[i][j] = abs(v_pos[0] - i) + abs(v_pos[1] - j)\n    for i in range(n):\n        for j in range(m):\n            if forest[i][j] == '+':\n                if i > 0:\n                    dist[i][j] = min(dist[i][j], dist[i - 1][j] + 1)\n                if j > 0:\n                    dist[i][j] = min(dist[i][j], dist[i][j - 1] + 1)\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if forest[i][j] == '+':\n                if i < n - 1:\n                    dist[i][j] = min(dist[i][j], dist[i + 1][j] + 1)\n                if j < m - 1:\n                    dist[i][j] = min(dist[i][j], dist[i][j + 1] + 1)\n    return dist[v_pos[0]][v_pos[1]]\n"
    },
    {
        "number": 2817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    e, e_s, e_f = map(int, stdin.split())\n    s = e_s + e_f\n    if s < 25:\n        return 0\n    if e < 0:\n        return 0\n    if e == 0:\n        return s\n    if e == 1:\n        return s - e_f\n    if e == 2:\n        return s - e_f\n    if e == 3:\n        return s - e_f\n    if e == 4:\n        return s - e_f\n    if e == 5:\n        return s - e_f\n    if e == 6:\n        return s - e_f\n    if e == 7:\n        return s - e_f\n    if e == 8:\n        return s - e_f\n    if e == 9:\n        return s - e_f\n    if e == 10:\n        return s - e_f\n    if e == 11:\n        return s - e_f\n    if e == 12:\n        return s - e_f\n    if e == 13:\n        return s - e_f\n    if e == 14:\n        return s - e_f\n    if e == 15:\n        return s - e_f\n    if e == 16:\n        return s - e_f\n    if e == 17:\n        return s - e_f\n    if e == 18:\n        return s - e_f\n    if e == 19:\n        return s - e_f\n    if e == 20:\n        return s - e_f\n    if e == 21:\n        return s - e_f\n    if e == 22:\n        return s - e_f\n    if e == 23:\n        return s - e_f\n    if e == 24:\n        return s - e_f\n    if e == 25:\n        return s - e_f\n    if e == 26:\n        return s - e_f\n    if e == 27:\n        return s - e_f\n    if e == 28:\n        return s - e_f\n    if e == 29:\n        return s - e_f\n    if e == 30:\n        return s - e_f\n    if e == 31:\n        return s - e_f\n    if e == 32:\n        return s - e_f\n    if e == 33:\n        return s - e_f\n    if e == 34:\n        return s - e_f\n    if e == 35:\n        return s - e_f\n    if e == 36:\n        return s - e_f\n    if e == 37:\n        return s - e_f\n    if e == 38:\n        return s - e_f\n    if e == 39:\n        return s - e_f\n    if e == 40:\n        return s - e_f\n    if e == 41:\n        return s - e_f\n    if e == 42:\n        return s - e_f\n    if e == 43:\n        return s - e_f\n    if e == 44:\n        return s - e_f\n    if e == 45:\n        return s - e_f\n    if e == 46:\n        return s - e_f\n    if e == 47:\n        return s - e_f\n    if e == 48:\n        return s - e_f\n    if e == 49:\n        return s - e_f\n    if e == 50:\n        return s - e_f\n    if e == 51:\n        return s - e_f\n    if e == 52:\n        return s - e_f\n    if e == 53:\n        return s - e_f\n    if e == 54:\n        return s - e_f\n    if e == 55:\n        return s - e_f\n    if e == 56:\n        return s - e_f\n    if e == 57:\n        return s - e_f\n    if e == 58:\n        return s - e_f\n    if e == 59:\n        return s - e_f\n    if e == 60:\n        return s - e_f\n    if e == 61:\n        return s - e_f\n    if e == 62:\n        return s - e_f\n    if e == 63:\n        return s - e_f\n    if e == 64:\n        return s - e_f\n    if e == 65:\n        return s - e_f\n    if e == 66:\n        return s - e_f\n    if e == 67:\n        return s - e_f\n    if e == 68:\n        return s - e_f\n    if e == 69:\n        return s - e_f\n    if e == 70:\n        return s - e_f\n    if e == 71:\n        return s - e_f\n    if e == 72:\n        return s - e_f\n    if e == 73:\n        return s - e_f\n    if e == 74:\n        return s - e_f\n    if e == 75:\n        return s - e_f\n    if e == 76:\n        return s - e_f\n    if e == 77:\n        return s - e_f\n    if e == 78:\n        return s - e_f\n    if e == 79:\n        return s - e_f\n    if e == 80:\n        return s -"
    },
    {
        "number": 2818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 2819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1\n   ... 1\n   ... 0\n   ... -1''')\n    'Bob wins'\n    >>> solution('''3\n   ... 2\n   ... 3\n   ... 1\n   ... 1\n   ... 1\n   ... 0\n   ... -1\n   ... 1\n   ... 1\n   ... 1''')\n    'tie 3 1'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    alice = [int(i) for i in stdin.split('\\n')[1:3]]\n    bob = [int(i) for i in stdin.split('\\n')[3:5]]\n    moves = [int(i) for i in stdin.split('\\n')[5:]]\n    alice_moves = []\n    bob_moves = []\n    for move in moves:\n        if move > 0:\n            alice_moves.append(move)\n        else:\n            bob_moves.append(abs(move))\n    alice_moves.sort()\n    bob_moves.sort()\n    if alice_moves[0] > bob_moves[0]:\n        return 'Alice wins'\n    elif alice_moves[0] < bob_moves[0]:\n        return 'Bob wins'\n    else:\n        return 'tie {} {}'.format(alice[0] + 1, alice[1] + 1)\n"
    },
    {
        "number": 2820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 5\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 1 5\n   ... ''')\n    '0'\n    >>> solution('''3\n   ... 5 5 5\n   ... 2\n   ... 2 1 2\n   ... 2 2 3\n   ... ''')\n    '10'\n    \"\"\"\n   ..."
    },
    {
        "number": 2821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q, M, S, L = map(int, stdin.split())\n    return str(min(Q, M, S, L))"
    },
    {
        "number": 2822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_b, y_b = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_1, y_1, x_2, y_2 = sorted([x_1, y_1, x_2, y_2])\n    if x_b < x_1 or x_b > x_2 or y_b < y_1 or y_b > y_2:\n        return 'No'\n    if x_1 == x_2 and y_1 == y_2:\n        return 'Yes'\n    if x_1 == x_2:\n        return 'No'\n    if y_1 == y_2:\n        return 'No'\n    if x_1 < x_b < x_2 and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_1 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 < x_b < x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 > x_b > x_2 and y_1 == y_b:\n        return 'Yes'\n    if x_1 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_1 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 < y_b < y_2:\n        return 'Yes'\n    if x_2 == x_b and y_1 > y_b > y_2:\n        return 'Yes'\n    if x_"
    },
    {
        "number": 2823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 3\n   ... 6\n   ... 1\n   ... 2''')\n    4\n    >>> solution('''4\n   ... 11\n   ... 8\n   ... 3\n   ... 10''')\n    10\n    \"\"\"\n    animals = [int(line) for line in stdin.splitlines()]\n    animals.sort()\n    total_weight = sum(animals)\n    if total_weight % 2 == 0:\n        return int(total_weight / 2)\n    else:\n        return int(total_weight / 2 + 1)\n"
    },
    {
        "number": 2825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 15 5\")\n    15\n    >>> solution(\"4 1 2 7 10\")\n    17\n    \"\"\"\n    n, *times = map(int, stdin.split())\n    return min(times) + max(times)\n"
    },
    {
        "number": 2826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, n, D = [int(x) for x in stdin.split()]\n    f1 = stdin[:n]\n    f2 = stdin[n:]\n    return str(sum(1 for x in range(q ** n) if hamming_distance(f1, x) + hamming_distance(f2, x) == D))\n\n\ndef"
    },
    {
        "number": 2827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 1 2\n   ... 2 3''')\n    '1'\n    >>> solution('''5 10\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 5\n   ... 5 1\n   ... 1 3\n   ... 2 4\n   ... 3 5\n   ... 4 1\n   ... 5 2''')\n    '0'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {u: set() for u in range(1, n + 1)}\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    visited = set()\n    queue = deque([1])\n    while queue:\n        u = queue.popleft()\n        visited.add(u)\n        for v in graph[u]:\n            if v not in visited:\n                queue.append(v)\n    return len(visited) - 1\n"
    },
    {
        "number": 2828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code"
    },
    {
        "number": 2829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 2830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[float('inf')] * m for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    return dp[n - 1][m - 1]\n"
    },
    {
        "number": 2831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum distance that will cover all of the vehicles at some time.\n\n    Args:\n        stdin (str): Input string to process.\n\n    Returns:\n        str: Output string.\n    \"\"\"\n    # Get the number of vehicles\n    num_vehicles = int(stdin.split('\\n')[0])\n\n    # Get the vehicles\n    vehicles = []\n    for i in range(1, num_vehicles + 1):\n        vehicles.append(tuple(map(int, stdin.split('\\n')[i].split())))\n\n    # Sort the vehicles by position\n    vehicles.sort(key=lambda x: x[0])\n\n    # Initialize the minimum distance\n    min_distance = 0\n\n    # Iterate through the vehicles\n    for i in range(len(vehicles) - 1):\n        # Get the current vehicle\n        current_vehicle = vehicles[i]\n\n        # Get the next vehicle\n        next_vehicle = vehicles[i + 1]\n\n        # Get the distance between the vehicles\n        distance = abs(current_vehicle[0] - next_vehicle[0]) + abs(current_vehicle[1] - next_vehicle[1])\n\n        # Update the minimum distance\n        min_distance = max(min_distance, distance)\n\n    # Return the minimum distance\n    return str(min_distance)\n"
    },
    {
        "number": 2832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 1\n   ... 50 20000\n   ... 150 10000''')\n    '66670000'\n    \"\"\"\n    d, k = map(int, stdin.split())\n    nums = [int(line) for line in stdin.splitlines()[1:]]\n    nums.sort()\n    nums = nums[:k]\n    return str(sum(min(nums[i] - nums[j], nums[j] - nums[i]) ** 2 for i in range(k) for j in range(i + 1, k)))\n"
    },
    {
        "number": 2833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5\\ndamir\\nmarko\\ndarko\\n45\")\n    'damir\\nmarko\\ndarko\\n45'\n    >>> solution(\"3 5\\ndamir\\nmarko\\ndarko\\n90\")\n    'damir\\nmarko\\ndarko\\n90'\n    \"\"\"\n    rows, cols = map(int, stdin.split())\n    table = [stdin.split()[i] for i in range(rows)]\n    angle = int(stdin.split()[-1])\n    angle = angle % 360\n    angle = angle if angle >= 0 else 360 + angle\n    angle = angle // 45\n    angle = angle % 4\n    if angle == 0:\n        return '\\n'.join(table)\n    elif angle == 1:\n        return '\\n'.join(list(zip(*table))[::-1])\n    elif angle == 2:\n        return '\\n'.join(list(zip(*table))[::-1])[::-1]\n    elif angle == 3:\n        return '\\n'.join(table[::-1])\n    return '\\n'.join(list(zip(*table))[::-1])[::-1]\n"
    },
    {
        "number": 2834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    lucky_digits = [4, 7]\n    lucky_numbers = []\n    for i in range(1, 10):\n        if i in lucky_digits:\n            lucky_numbers.append(i)\n        else:\n            lucky_numbers.append(i * 2)\n    lucky_numbers.sort()\n    return lucky_numbers[K - 1]\n"
    },
    {
        "number": 2835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n    ans = 0\n    for i in range(n - m + 1):\n        if s[i:i + m] == t:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 2836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split('\\n')[0].split()]\n    boys = [int(x) for x in stdin.split('\\n')[1].split()]\n    boys.sort()\n    return str(boys[(N - 1) // 2])\n"
    },
    {
        "number": 2837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 3 6\\n(R1-R2-R3)\")\n    '11.00000'\n    >>> solution(\"3\\n2 3 6\\n(R1|R2|R3)\")\n    '1.00000'\n    \"\"\"\n    n = int(stdin.split()[0])\n    resistors = [int(x) for x in stdin.split()[1].split('-')]\n    resistors.sort()\n    resistors = [str(x) for x in resistors]\n    resistors = ''.join(resistors)\n    resistors = resistors.replace('-', '|')\n    resistors = resistors.replace('1', 'R')\n    resistors = resistors.replace('2', '1')\n    resistors = resistors.replace('3', '2')\n    resistors = resistors.replace('4', '3')\n    resistors = resistors.replace('5', '4')\n    resistors = resistors.replace('6', '5')\n    resistors = resistors.replace('7', '6')\n    resistors = resistors.replace('8', '7')\n    resistors = resistors.replace('9', '8')\n    resistors = resistors.replace('0', '9')\n    resistors = resistors.replace('|', '-')\n    resistors = resistors.replace('R', '1')\n    resistors = resistors.replace('1', 'R')\n    resistors = resistors.replace('2', '1')\n    resistors = resistors.replace('3', '2')\n    resistors = resistors.replace('4', '3')\n    resistors = resistors.replace('5', '4')\n    resistors = resistors.replace('6', '5')\n    resistors = resistors.replace('7', '6')\n    resistors = resistors.replace('8', '7')\n    resistors = resistors.replace('9', '8')\n    resistors = resistors.replace('0', '9')\n    resistors = resistors.replace('(', '')\n    resistors = resistors.replace(')', '')\n    resistors = resistors.replace('|', '')\n    resistors = resistors.replace('-', '|')\n    resistors = resistors.replace('1', 'R')\n    resistors = resistors.replace('2', '1')\n    resistors = resistors.replace('3', '2')\n    resistors = resistors.replace('4', '3')\n    resistors = resistors.replace('5', '4')\n    resistors = resistors.replace('6', '5')\n    resistors = resistors.replace('7', '6')\n    resistors = resistors.replace('8', '7')\n    resistors = resistors.replace('9', '8')\n    resistors = resistors.replace('0', '9')\n    resistors = resistors.replace('R', '1')\n    resistors = resistors.replace('1', 'R')\n    resistors = resistors.replace('2', '1')\n    resistors = resistors.replace('3', '2')\n    resistors = resistors.replace('4', '3')\n    resistors = resistors.replace('5', '4')\n    resistors = resistors.replace('6', '5')\n    resistors = resistors.replace('7', '6')\n    resistors = resistors.replace('8', '7')\n    resistors = resistors.replace('9', '8')\n    resistors = resistors.replace('0', '9')\n    resistors = resistors.replace('(', '')\n    resistors = resistors.replace(')', '')\n    resistors = resistors.replace('|', '')\n    resistors = resistors.replace('-', '|')\n    resistors = resistors.replace('1', 'R')\n    resistors = resistors.replace('2', '1')\n    resistors = resistors.replace('3', '2')\n    resistors = resistors.replace('4', '3')\n    resistors = resistors.replace('5', '4')\n    resistors = resistors.replace('6', '5')\n    resistors = resistors.replace('7', '6')\n    resistors = resistors.replace('8', '7')\n    resistors = resistors.replace('9', '8')\n    resistors = resistors.replace('0', '9')\n    resistors = resistors.replace('R', '1')\n    resistors = resistors.replace('1', 'R')\n    resistors = resistors.replace('2', '1')\n    resistors = resistors.replace('3', '2')\n    resistors = resistors.replace('4', '3')\n    resistors = resistors.replace('5', '4')\n    resistors = resistors.replace('6', '5')\n    resistors = resistors.replace('7', '6')\n    resistors = resistors.replace('8', '7')\n    resistors = resistors.replace('9', '8')\n    resistors = resistors.replace('0', '9')\n    resistors = resistors.replace('(', '')\n    resistors = resistors.replace(')', '')\n    resistors = resistors.replace('|', '')\n    resistors = resistors.replace('-', '|')\n    resistors = resistors.replace('1', 'R')\n    resistors = resistors.replace('2', '1')\n    resistors = resistors.replace('3', '2')\n    resistors = resistors.replace('4', '3')\n"
    },
    {
        "number": 2838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(0/(0))\")\n    '(0/0)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    '(2+2*2+2)'\n    >>> solution(\"(2+(2*2)+2)\")\n    "
    },
    {
        "number": 2839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of different shortest paths between s and t in G.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution string\n    \"\"\"\n    # Get input\n    v, e = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(e):\n        u, v, w = [int(x) for x in stdin.split()]\n        edges.append((u, v, w))\n\n    # Get s and t\n    s, t = [int(x) for x in stdin.split()]\n\n    # Get graph\n    graph = Graph(v, edges)\n\n    # Get shortest paths\n    paths = graph.shortest_paths(s, t)\n\n    # Get number of different paths\n    return str(len(paths))\n"
    },
    {
        "number": 2840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... Blue\n   ... Orange\n   ... Pink\n   ... Green\n   ... Red\n   ... Yellow\n   ... ''')\n    '1'\n    >>> solution('''12\n   ... Blue\n   ... Orange\n   ... Pink\n   ... Green\n   ... Red\n   ... Yellow\n   ... Yellow\n   ... Red\n   ... Green\n   ... Pink\n   ... Orange\n   ... Blue\n   ... ''')\n    '2'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4\\n....\\n.X.X\\n.XX.\\n...X\\n....\\n1\\n2\\n3\\n4\")\n    6\n    \"\"\"\n    n, k = map(int, stdin.split())\n    board = [list(stdin.split()[i]) for i in range(n)]\n    ships = [int(stdin.split()[i]) for i in range(k)]\n    return str(solution_helper(board, ships))\n\n\ndef"
    },
    {
        "number": 2843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the largest swap-free set in the given set of words.\n\n    Args:\n        stdin (str): The set of words.\n\n    Returns:\n        str: The size of the largest swap-free set.\n    \"\"\"\n    words = stdin.split('\\n')\n    words = [word.lower() for word in words]\n    words = set(words)\n    words = list(words)\n    words.sort()\n    words.sort(key=len)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words.sort(key=len, reverse=True)\n    words"
    },
    {
        "number": 2844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\nD.*\\n...\\n..S\")\n    '3'\n    >>> solution(\"3 3\\nD.*\\n...\\nS.\")\n    'KAKTUS'\n    \"\"\"\n    rows, cols = map(int, stdin.split())\n    forest = stdin.splitlines()\n    beaver_row, beaver_col = 0, 0\n    for row in range(rows):\n        if \"D\" in forest[row]:\n            beaver_row = row\n            beaver_col = forest[row].index(\"D\")\n            break\n    painter_row, painter_col = 0, 0\n    for row in range(rows):\n        if \"S\" in forest[row]:\n            painter_row = row\n            painter_col = forest[row].index(\"S\")\n            break\n    painter_path = []\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row - 1, painter_col - 1))\n    painter_path.append((painter_row, painter_col - 1))\n    painter_path.append((painter_row + 1, painter_col - 1))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col + 1))\n    painter_path.append((painter_row - 1, painter_col))\n    painter_path.append((painter_row, painter_col))\n    painter_path.append((painter_row + 1, painter_col))\n    painter_path.append((painter_row + 1, painter_col + 1))\n    painter_path.append((painter_row, painter_col + 1))\n    painter_path"
    },
    {
        "number": 2845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return perimeter of the house.\"\"\"\n    R, K = [int(x) for x in stdin.split()]\n    house = [int(x) for x in stdin.split()]\n    house.sort()\n    return house[K-1] * 4 - house[0] * 2"
    },
    {
        "number": 2846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 7\n   ... 1\n   ... 3\n   ... 1\n   ... 5''')\n    '2'\n    \"\"\"\n    citations = [int(line) for line in stdin.splitlines()]\n    citations.sort()\n    h_index = 0\n    for i, citation in enumerate(citations):\n        if i + 1 >= citation:\n            h_index = i + 1\n    return str(h_index)\n"
    },
    {
        "number": 2847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 8\n   ... 4 5 2 1 6 8 3 7\n   ... 5 2 4 8 6 1 3 7\n   ... 2 5 4 8 1 6 3 7''')\n    '3\\n2 4 5'\n    \"\"\"\n    M, S = map(int, stdin.split())\n    preferences = [list(map(int, stdin.split())) for _ in range(M)]\n    preferences.sort(key=lambda x: x[0])\n    songs = [preferences[0][1]]\n    for i in range(1, M):\n        if preferences[i][1] not in songs:\n            songs.append(preferences[i][1])\n    return str(len(songs)) + '\\n' +''.join(map(str, songs))\n"
    },
    {
        "number": 2848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, k, x0, a, b = [int(x) for x in stdin.split()]\n    buckets = [0] * n\n    buckets[0] = x0\n    for i in range(1, r):\n        buckets[i] = (a * buckets[i - 1] + b) % n\n    for i in range(r):\n        buckets[i] = (buckets[i] + k) % n\n    if buckets[0] == 0:\n        return \"OVERFLOW\"\n    else:\n        return str(buckets[0])\n"
    },
    {
        "number": 2849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin)))\n\ndef"
    },
    {
        "number": 2850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    return sum(w[k - 1::k])"
    },
    {
        "number": 2851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 3 5\n   ... 2\n   ... 4 5\n   ... ''')\n    '10'\n    >>> solution('''4\n   ... 6 2 3 4\n   ... 1\n   ... 1\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    m = int(stdin.split('\\n')[2])\n    b = list(map(int, stdin.split('\\n')[3].split()))\n    gcd = gcd_naive(a[0], b[0])\n    for i in range(1, n):\n        gcd = gcd_naive(gcd, a[i])\n    for i in range(1, m):\n        gcd = gcd_naive(gcd, b[i])\n    return str(gcd)\n\n\ndef"
    },
    {
        "number": 2852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n30 50 70 60 90\")\n    '2.220889579'\n    >>> solution(\"6\\n30 90 30 90 30 90\")\n    '2.599738456'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    p = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    p.sort()\n    p = [i / 100 for i in p]\n    return str(sum(p[i] * (1 - p[i - 1]) for i in range(1, n)))\n"
    },
    {
        "number": 2853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 5 6''')\n    '5\\n6'\n    \"\"\"\n    houses = [int(line) for line in stdin.splitlines()]\n    houses.sort()\n    connected = set()\n    for house in houses:\n        connected.add(house)\n        for house2 in houses:\n            if house2 not in connected:\n                if house2 > house:\n                    connected.add(house2)\n                else:\n                    connected.add(house)\n                    break\n    if len(connected) == len(houses):\n        return 'Connected'\n    else:\n        return [str(house) for house in houses if house not in connected]\n"
    },
    {
        "number": 2854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n0 0\\n-1 -1\\n2 0\\n1 2\\n2 3\")\n    '0 0\\n1 0\\n2 0\\n'\n    >>> solution(\"5 4\\n0 0\\n-1 -1\\n-1 -1\\n-1 -1\\n4 0\\n1 2\\n2 3\\n3 4\\n4 5\")\n    '0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    atoms = [tuple(map(int, stdin.split())) for _ in range(n)]\n    bonds = [tuple(map(int, stdin.split())) for _ in range(m)]\n    atoms_fixed = set()\n    for i in range(n):\n        if atoms[i] == (-1, -1):\n            atoms_fixed.add(i)\n    atoms_fixed = list(atoms_fixed)\n    atoms_fixed.sort()\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::-1]\n    atoms_fixed = atoms_fixed[1:]\n    atoms_fixed = atoms_fixed[::"
    },
    {
        "number": 2855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 2856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    molecule = stdin.readline()\n    molecule_set = set(molecule)\n    if len(molecule_set) == 1:\n        return 0\n    if len(molecule_set) == 2:\n        return 1\n    molecule_set.remove('A')\n    molecule_set.remove('B')\n    molecule_set = list(molecule_set)\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n    molecule_set.append('B')\n    molecule_set.sort()\n    molecule_set.append('A')\n"
    },
    {
        "number": 2857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 4 2\n   ... 2 1\n   ... 1 3\n   ... ''')\n    '0'\n    >>> solution('''5\n   ... 1 2\n   ... 2 1\n   ... 2 2\n   ... 2 3\n   ... 3 2\n   ... ''')\n    '4'\n    \"\"\"\n   ..."
    },
    {
        "number": 2858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3, xv, yv, r = map(int, stdin.split())\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1, y1, x2, y2, x3, y3, xv, yv, r\n    x1, y1, x2, y2, x3, y3, xv, yv, r = x1,"
    },
    {
        "number": 2860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 24 24\n   ... IN.HONOR.OF.THE.INTERNAT\n   ... TEPMOC.GNIMMARGORP.LANOI\n   ... IITION''')\n    '3'\n    >>> solution('''3 24 20\n   ... IN.HONOR.OF.THE.INTERNAT\n   ... TEPMOC.GNIMMARGORP.LANOI\n   ... IITION''')\n    '4'\n    \"\"\"\n    n, d, w = map(int, stdin.split())\n    return str(n + 1)\n"
    },
    {
        "number": 2861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nABC\\nABEF\\nDEF\\nABCDE\\nFGH\")\n    2\n    >>> solution(\"6\\nBDE\\nFGH\\nDEF\\nABC\\nBDE\\nABEF\")\n    3\n    \"\"\"\n    routines = stdin.split(\"\\n\")\n    routines = [routine.split() for routine in routines]\n    routines = [list(set(routine)) for routine in routines]\n    routines = [sorted(routine) for routine in routines]\n    routines = [''.join(routine) for routine in routines]\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = [routine for routine in routines]\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines = ''.join(routines)\n    routines = list(routines)\n    routines = sorted(routines)\n    routines"
    },
    {
        "number": 2862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 4\n   ... 0 0 0 0 3\n   ... 0 1 3\n   ... 1 4 1\n   ... 2 4 1\n   ... 3 4 2\n   ... ''')\n    '9 3 3 6 3'\n    \"\"\"\n    materials = list(map(int, stdin.split()))\n    dependencies = []\n    for _ in range(int(stdin.split()[1])):\n        dependencies.append(list(map(int, stdin.split()[2:])))\n    dependencies = [list(sorted(d)) for d in dependencies]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d[1:] for d in dependencies]\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    dependencies = [d for d in dependencies if len(d) > 0]\n    dependencies = list(sorted(dependencies, key=lambda x: x[0]))\n    "
    },
    {
        "number": 2863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 40\n   ... 2 37 42''')\n    3\n    \"\"\"\n    likes = [int(line.split()[0]) for line in stdin.splitlines()]\n    days = [int(line) for line in stdin.splitlines()[1:]]\n    likes_to_days = {likes[i]: days[i] for i in range(len(likes))}\n    likes_to_days = sorted(likes_to_days.items(), key=lambda x: x[1])\n    likes_to_days = [i[0] for i in likes_to_days]\n    likes_to_days = sorted(likes_to_days)\n    likes_to_days = [i for i in likes_to_days if i not in likes_to_days[1:]]\n    return len(likes_to_days)\n"
    },
    {
        "number": 2864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\nB I P C F\\nA G M - - -\\nF H M M\\nF H M - *\")\n    'AGM'\n    \"\"\"\n    cards = stdin.split(\"\\n\")[1:]\n    murderer = \"?\"\n    weapon = \"?\"\n    room = \"?\"\n    for i in range(len(cards)):\n        if \"M\" in cards[i]:\n            murderer = \"M\"\n        if \"H\" in cards[i]:\n            weapon = \"H\"\n        if \"U\" in cards[i]:\n            room = \"U\"\n    return murderer + weapon + room\n"
    },
    {
        "number": 2865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''0 5\n   ... 3 1 4 5\n   ... 3 1 4 6\n   ... ''')\n    'bumper tap at time 6'\n    \"\"\"\n    x1, x2 = map(int, stdin.split('\\n')[0].split())\n    n1, times1 = map(int, stdin.split('\\n')[1].split())\n    n2, times2 = map(int, stdin.split('\\n')[2].split())\n    times = times1 + times2\n    times = [0] + times\n    times.sort()\n    times = times[1:]\n    times = times[::2]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times[::-1]\n    times = times[1:]\n    times = times"
    },
    {
        "number": 2866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = set(stdin)\n    for i in range(1, len(stdin) + 1):\n        if i not in digits:\n            return i"
    },
    {
        "number": 2867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 1 2 3 40 5 6 7 8 9 10\n   ... 0 2 3 0 5 0 7 0 0 0\n   ... ''')\n    51\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    v = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    c = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    v.sort()\n    c.sort()\n    v.append(0)\n    c.append(0)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if v[j] % v[i] == 0:\n                dp[i] = max(dp[i], dp[j] + c[i])\n    return dp[-1]\n"
    },
    {
        "number": 2868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 2869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    result = 0\n    for i in range(len(stdin)):\n        if i > 0 and roman_numerals[stdin[i]] > roman_numerals[stdin[i - 1]]:\n            result += roman_numerals[stdin[i]] - 2 * roman_numerals[stdin[i - 1]]\n        else:\n            result += roman_numerals[stdin[i]]\n    return str(result)\n"
    },
    {
        "number": 2870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    return str(max(0, p * q - (p + q - 1)))\n"
    },
    {
        "number": 2871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    ans = 0\n    for i in range(K):\n        ans += arr[i]\n    return str(ans)\n"
    },
    {
        "number": 2872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 OCT\")\n    '(('\n    >>> solution(\"2 JAN\")\n    'TGIF'\n    \"\"\"\n    day, month = stdin.split()\n    day = int(day)\n    month = month.upper()\n    if day == 1:\n        if month == \"JAN\":\n            return \"TGIF\"\n        elif month == \"FEB\":\n            return \":((\"\n        elif month == \"MAR\":\n            return \":((\"\n        elif month == \"APR\":\n            return \":((\"\n        elif month == \"MAY\":\n            return \":((\"\n        elif month == \"JUN\":\n            return \":((\"\n        elif month == \"JUL\":\n            return \":((\"\n        elif month == \"AUG\":\n            return \":((\"\n        elif month == \"SEP\":\n            return \":((\"\n        elif month == \"OCT\":\n            return \":((\"\n        elif month == \"NOV\":\n            return \":((\"\n        elif month == \"DEC\":\n            return \":((\"\n    elif day == 2:\n        if month == \"JAN\":\n            return \":((\"\n        elif month == \"FEB\":\n            return \":((\"\n        elif month == \"MAR\":\n            return \":((\"\n        elif month == \"APR\":\n            return \":((\"\n        elif month == \"MAY\":\n            return \":((\"\n        elif month == \"JUN\":\n            return \":((\"\n        elif month == \"JUL\":\n            return \":((\"\n        elif month == \"AUG\":\n            return \":((\"\n        elif month == \"SEP\":\n            return \":((\"\n        elif month == \"OCT\":\n            return \":((\"\n        elif month == \"NOV\":\n            return \":((\"\n        elif month == \"DEC\":\n            return \":((\"\n    elif day == 3:\n        if month == \"JAN\":\n            return \":((\"\n        elif month == \"FEB\":\n            return \":((\"\n        elif month == \"MAR\":\n            return \":((\"\n        elif month == \"APR\":\n            return \":((\"\n        elif month == \"MAY\":\n            return \":((\"\n        elif month == \"JUN\":\n            return \":((\"\n        elif month == \"JUL\":\n            return \":((\"\n        elif month == \"AUG\":\n            return \":((\"\n        elif month == \"SEP\":\n            return \":((\"\n        elif month == \"OCT\":\n            return \":((\"\n        elif month == \"NOV\":\n            return \":((\"\n        elif month == \"DEC\":\n            return \":((\"\n    elif day == 4:\n        if month == \"JAN\":\n            return \":((\"\n        elif month == \"FEB\":\n            return \":((\"\n        elif month == \"MAR\":\n            return \":((\"\n        elif month == \"APR\":\n            return \":((\"\n        elif month == \"MAY\":\n            return \":((\"\n        elif month == \"JUN\":\n            return \":((\"\n        elif month == \"JUL\":\n            return \":((\"\n        elif month == \"AUG\":\n            return \":((\"\n        elif month == \"SEP\":\n            return \":((\"\n        elif month == \"OCT\":\n            return \":((\"\n        elif month == \"NOV\":\n            return \":((\"\n        elif month == \"DEC\":\n            return \":((\"\n    elif day == 5:\n        if month == \"JAN\":\n            return \":((\"\n        elif month == \"FEB\":\n            return \":((\"\n        elif month == \"MAR\":\n            return \":((\"\n        elif month == \"APR\":\n            return \":((\"\n        elif month == \"MAY\":\n            return \":((\"\n        elif month == \"JUN\":\n            return \":((\"\n        elif month == \"JUL\":\n            return \":((\"\n        elif month == \"AUG\":\n            return \":((\"\n        elif month == \"SEP\":\n            return \":((\"\n        elif month == \"OCT\":\n            return \":((\"\n        elif month == \"NOV\":\n            return \":((\"\n        elif month == \"DEC\":\n            return \":((\"\n    elif day == 6:\n        if month == \"JAN\":\n            return \":((\"\n        elif month == \"FEB\":\n            return \":((\"\n        elif month == \"MAR\":\n            return \":((\"\n        elif month == \"APR\":\n            return \":((\"\n        elif month == \"MAY\":\n            return \":((\"\n        elif month == \"JUN\":\n            return \":((\"\n        elif month == \"JUL\":\n            return \":((\"\n        elif month == \"AUG\":\n            return \":((\"\n        elif month == \"SEP\":\n            return \":((\"\n        elif month == \"OCT\":\n            return \":((\"\n        elif month == \"NOV\":\n            return \":((\"\n        elif month == \"DEC\":\n            return \":((\"\n    elif day == 7:\n        if month == \"JAN\":\n            return \":((\"\n        elif month == \"FEB\":\n            return \":((\"\n        elif month == \"MAR\":\n            return \":((\"\n        elif month == \"APR\":\n            return \":((\"\n        elif month == \"MAY\":\n            return \":((\"\n        elif month == \"JUN\":\n            return \":((\"\n        elif month == \"JUL\":\n            return \":((\"\n        elif month == \"AUG\":\n            return \":((\"\n        elif month == \"SEP\":\n            return \":((\"\n        elif month == \"OCT\":\n            return \":((\"\n        elif month == \"NOV\":\n            return \":((\"\n        elif month == \"DEC\":\n            return \":((\"\n    elif day == 8:\n        if month == \"JAN\":\n            return \":((\"\n        elif month == \"FEB\":\n            return \":((\"\n        elif month == \"MAR\":\n            return \":((\"\n        elif month == \"APR\":\n            return \":((\"\n        elif month == \"MAY\":\n            return \":((\"\n        elif month == \"JUN\":\n            return \":((\"\n        elif month == \"JUL\":\n            return \":((\"\n        elif month == \"AUG\":\n            return \":((\"\n        elif month == \"SEP\":\n            return \":((\"\n        elif month == \"O"
    },
    {
        "number": 2873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"AEIOU\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_count = 0\n    consonant_count = 0\n    for char in stdin:\n        if char in vowels:\n            vowel_count += 1\n        elif char in consonants:\n            consonant_count += 1\n    if vowel_count >= 3 and consonant_count >= 3 and \"L\" in stdin:\n        return 1\n    return 0"
    },
    {
        "number": 2874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rarity = [int(x) for x in stdin.readline().split()]\n    rarity.sort()\n    for i in range(n):\n        if i + 1 < n and rarity[i] == rarity[i + 1]:\n            continue\n        if i + 2 < n and rarity[i] == rarity[i + 2]:\n            continue\n        if i + 3 < n and rarity[i] == rarity[i + 3]:\n            continue\n        if i + 4 < n and rarity[i] == rarity[i + 4]:\n            continue\n        if i + 5 < n and rarity[i] == rarity[i + 5]:\n            continue\n        if i + 6 < n and rarity[i] == rarity[i + 6]:\n            continue\n        if i + 7 < n and rarity[i] == rarity[i + 7]:\n            continue\n        if i + 8 < n and rarity[i] == rarity[i + 8]:\n            continue\n        if i + 9 < n and rarity[i] == rarity[i + 9]:\n            continue\n        if i + 10 < n and rarity[i] == rarity[i + 10]:\n            continue\n        if i + 11 < n and rarity[i] == rarity[i + 11]:\n            continue\n        if i + 12 < n and rarity[i] == rarity[i + 12]:\n            continue\n        if i + 13 < n and rarity[i] == rarity[i + 13]:\n            continue\n        if i + 14 < n and rarity[i] == rarity[i + 14]:\n            continue\n        if i + 15 < n and rarity[i] == rarity[i + 15]:\n            continue\n        if i + 16 < n and rarity[i] == rarity[i + 16]:\n            continue\n        if i + 17 < n and rarity[i] == rarity[i + 17]:\n            continue\n        if i + 18 < n and rarity[i] == rarity[i + 18]:\n            continue\n        if i + 19 < n and rarity[i] == rarity[i + 19]:\n            continue\n        if i + 20 < n and rarity[i] == rarity[i + 20]:\n            continue\n        if i + 21 < n and rarity[i] == rarity[i + 21]:\n            continue\n        if i + 22 < n and rarity[i] == rarity[i + 22]:\n            continue\n        if i + 23 < n and rarity[i] == rarity[i + 23]:\n            continue\n        if i + 24 < n and rarity[i] == rarity[i + 24]:\n            continue\n        if i + 25 < n and rarity[i] == rarity[i + 25]:\n            continue\n        if i + 26 < n and rarity[i] == rarity[i + 26]:\n            continue\n        if i + 27 < n and rarity[i] == rarity[i + 27]:\n            continue\n        if i + 28 < n and rarity[i] == rarity[i + 28]:\n            continue\n        if i + 29 < n and rarity[i] == rarity[i + 29]:\n            continue\n        if i + 30 < n and rarity[i] == rarity[i + 30]:\n            continue\n        if i + 31 < n and rarity[i] == rarity[i + 31]:\n            continue\n        if i + 32 < n and rarity[i] == rarity[i + 32]:\n            continue\n        if i + 33 < n and rarity[i] == rarity[i + 33]:\n            continue\n        if i + 34 < n and rarity[i] == rarity[i + 34]:\n            continue\n        if i + 35 < n and rarity[i] == rarity[i + 35]:\n            continue\n        if i + 36 < n and rarity[i] == rarity[i + 36]:\n            continue\n        if i + 37 < n and rarity[i] == rarity[i + 37]:\n            continue\n        if i + 38 < n and rarity[i] == rarity[i + 38]:\n            continue\n        if i + 39 < n and rarity[i] == rarity[i + 39]:\n            continue\n        if i + 40 < n and rarity[i] == rarity[i + 40]:\n            continue\n        if i + 41 < n and rarity[i] == rarity[i + 41]:\n            continue\n        if i + 42 < n and rarity[i] == rarity[i + 42]:\n            continue\n        if i + 43 < n and rarity[i] == rarity[i + 43]:\n            continue\n        if i + 44 < n and rarity[i] == rarity[i + 44]:\n            continue\n        if i + 45 < n and rarity[i] == rarity[i + 45]:\n            continue\n        if i + 46 < n and rarity[i] == rarity[i + 46]:\n            continue\n        if i + 47 < n and rarity[i] == rarity[i + 47]:\n            continue\n        if i + 48 < n and rarity[i] == rarity[i + 48]:\n            continue\n        if i + 49 < n and rarity[i] == rarity[i + 49]:\n            continue\n        if i + 50 < n and rarity[i] == rarity[i + 50]:\n            continue\n        if i + 51 < n and rarity[i] == rarity[i + 51]:\n            continue\n        if i + 52 < n and rarity[i] == rarity[i + 52]:\n            continue\n        if i + 53 < n and rarity[i] == rarity[i + 53]:\n            continue\n        if i + 54 < n and rarity[i] == rarity[i + 54]:\n            continue\n        if i + 55 < n and rarity[i] == rarity[i + 55]:\n            continue\n        if i + 56 < n and rarity[i] == rarity[i + 56]:\n            continue\n        if i + 57 < n and rarity[i] == rarity[i + 57]:\n            continue\n        if i + 58 < n and rarity[i] == rarity[i + 58]:\n            continue\n        if i + 59 < n and rarity[i] == rarity[i + 59]:\n            continue\n        if i + 60 < n and rarity[i] == rarity[i + 60]:\n            continue\n        if i + 61 < n and rarity[i] == rarity[i + 61]:\n            continue\n        if i + 62 < n and rarity[i] == rarity[i + 62]:\n            continue\n        if i + 63 < n and rarity[i] == rarity[i + 63]:\n            continue\n        if i + 64 < n and rarity[i] == rarity[i + 64]:\n            continue\n        if i + 65 < n and rarity[i] == rarity[i + 65]:\n            continue\n        if i + 66 < n and rarity[i] == rarity[i + 66]:\n            continue\n        if i + 67 < n and rarity[i] == rarity[i + 67]:\n            continue\n        if i + 68 < n and rarity[i] == rarity[i + 68]:\n            "
    },
    {
        "number": 2876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1\n   ... 2 2\n   ... 3 4''')\n    '2'\n    \"\"\"\n    N = int(stdin.split('\\n')[0])\n    points = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    points.sort()\n    x, y = zip(*points)\n    return str(max(abs(y[i] - y[i - 1]) / (x[i] - x[i - 1]) for i in range(1, N)))\n"
    },
    {
        "number": 2877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin, key=lambda x: (x[0], x[-1])))"
    },
    {
        "number": 2878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 2879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    matrix = [list(stdin[i:i + w]) for i in range(0, len(stdin), w)]\n    k = 0\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 'X':\n                k += 1\n    if k == 0:\n        return 'No solution'\n    if k == 1:\n        return '1'\n    if k == 2:\n        return '12'\n    if k == 3:\n        return '123'\n    if k == 4:\n        return '1234'\n    if k == 5:\n        return '12345'\n    return 'No solution'\n"
    },
    {
        "number": 2880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    table = [stdin.split() for _ in range(R)]\n    table = [list(filter(lambda x: x!= x[0], row)) for row in table]\n    return str(max(map(len, table)))\n"
    },
    {
        "number": 2881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split('\\n')\n    x, y = list(map(int, x.split())), list(map(int, y.split()))\n    if len(x)!= len(y):\n        return 'no'\n    for i in range(len(x)):\n        if x[i]!= y[i]:\n            if x[i] == 0:\n                x[i] = 1\n            elif y[i] == 0:\n                y[i] = 1\n            else:\n                return 'no'\n    return 'yes'"
    },
    {
        "number": 2882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\")\n
    },
    {
        "number": 2883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"[[1,3],[2,6],[8,10],[15,18]]\")\n    [[1, 6], [8, 10], [15, 18]]\n    >>> solution(\"[[1,4],[4,5]]\")\n    [[1, 5]]\n    \"\"\"\n    intervals = []\n    for interval in stdin.split(\"]\"):\n        if interval:\n            intervals.append(list(map(int, interval[1:].split(\",\"))))\n    intervals.sort(key=lambda x: x[0])\n    merged = []\n    for interval in intervals:\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    return merged\n"
    },
    {
        "number": 2884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(nums, target, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(len(nums)):\n            dfs(nums[i:], target - nums[i], path + [nums[i]], res)\n\n    nums = list(map(int, stdin.split()))\n    res = []\n    dfs(nums, target=int(stdin.split()[-1]), path=[], res=res)\n    return res\n\n\ndef"
    },
    {
        "number": 2885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def insert(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n        merged = []\n        i, start, end = 0, 0, 1\n\n        # skip (and add to output) all intervals that come before the 'newInterval'\n        while i < len(intervals) and intervals[i][end] < newInterval[start]:\n            merged.append(intervals[i])\n            i += 1\n\n        # merge all intervals that overlap with 'newInterval'\n        while i < len(intervals) and intervals[i][start] <= newInterval[end]:\n            newInterval[start] = min(intervals[i][start], newInterval[start])\n            newInterval[end] = max(intervals[i][end], newInterval[end])\n            i += 1\n\n        # insert the newInterval\n        merged.append(newInterval)\n\n        # add all the remaining intervals to the output\n        while i < len(intervals):\n            merged.append(intervals[i])\n            i += 1\n        return merged\n\n    return insert(stdin, [0, 0])\n"
    },
    {
        "number": 2886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return''.join(map(str, solution_))"
    },
    {
        "number": 2887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 12\\n5 10\")\n    390\n    >>> solution(\"4 1\\n100 1 6 2\")\n    120\n    \"\"\"\n    n, s = [int(x) for x in stdin.split()]\n    e = [int(x) for x in stdin.split()[1:]]\n    return sum(int(x) ** 3 for x in str(s)) + sum(e[i] * e[i - 1] for i in range(1, n))\n"
    },
    {
        "number": 2889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lawnmowers = stdin.split('\\n')\n    lawnmowers = [lawnmower.split(',') for lawnmower in lawnmowers]\n    lawnmowers = [[int(price), int(cutting_rate), int(cutting_time), int(recharge_time)] for price, cutting_rate, cutting_time, recharge_time in lawnmowers]\n    lawnmowers.sort(key=lambda x: x[0])\n    lawnmowers = [lawnmower for lawnmower in lawnmowers if lawnmower[0] <= 7000]\n    if len(lawnmowers) == 0:\n        return 'no such mower'\n    lawnmowers = [lawnmower for lawnmower in lawnmowers if lawnmower[1] <= 4]\n    if len(lawnmowers) == 0:\n        return 'no such mower'\n    lawnmowers = [lawnmower for lawnmower in lawnmowers if lawnmower[2] <= 10080]\n    if len(lawnmowers) == 0:\n        return 'no such mower'\n    lawnmowers = [lawnmower for lawnmower in lawnmowers if lawnmower[3] <= 10080]\n    if len(lawnmowers) == 0:\n        return 'no such mower'\n    lawnmowers = [lawnmower for lawnmower in lawnmowers if lawnmower[2] * lawnmower[3] >= 10080 * lawnmower[1]]\n    if len(lawnmowers) == 0:\n        return 'no such mower'\n    return ','.join([lawnmower[0] for lawnmower in lawnmowers])\n"
    },
    {
        "number": 2890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4 1 1\n   ... 1 2 1 2\n   ... 1 3 1 0\n   ... 2 4 1 1\n   ... 3 4 1 0\n   ... 1 4\n   ... ''')\n    2\n    \"\"\"\n    N, M, k1, k2 = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.split('\\n')[5:]]\n    edges = {(u, v): c for u, v, c in edges}\n    edges = {u: {v: c for v, c in edges.items() if u!= v} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c!= 0} for u in range(1, N + 1)}\n    edges = {u: {v: c for v, c in edges[u].items() if c"
    },
    {
        "number": 2891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 1\n   ... ''')\n    '0.9972602740'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    c = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    c.sort()\n    c.append(0)\n    c.insert(0, 0)\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0] + c\n    c = [0]"
    },
    {
        "number": 2892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1 2 3 2 4 1 3''')\n    '7'\n    >>> solution('''7\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n   ... 1 2 3 2 4 1 3\n"
    },
    {
        "number": 2893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    swap = 0\n    for i in range(n):\n        for j in range(n - 1):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n                swap += 1\n    print(swap)\n    return ''\n"
    },
    {
        "number": 2894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, K, T1, T2, H = [float(x) for x in stdin.split()]\n    T = T1 + T2\n    F1 = (H - L) / (K * T)\n    F2 = (H - L) / (K * T) + L / K\n    return f'{F1:.6f} {F2:.6f}'"
    },
    {
        "number": 2895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_s, y_s, x_f, y_f = map(int, stdin.split('\\n')[0].split(' '))\n    n = int(stdin.split('\\n')[1])\n    layers = [tuple(map(int, stdin.split('\\n')[2 + i].split(' '))) for i in range(n - 1)]\n    speeds = [int(stdin.split('\\n')[3 + i]) for i in range(n)]\n    return str(round(min_time(x_s, y_s, x_f, y_f, layers, speeds)))\n\n\ndef"
    },
    {
        "number": 2896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - len(stdin.replace('A', '').replace('G', '').replace('C', '').replace('T', ''))"
    },
    {
        "number": 2897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 4\n   ... 1100\n   ... 2\n   ... 1 1 1 4\n   ... 1 1 1 1''')\n    'neither'\n    >>> solution('''1 4\n   ... 1100\n   ... 2\n   ... 1 1 1 4\n   ... 1 1 1 1''')\n    'decimal'\n    \"\"\"\n   ..."
    },
    {
        "number": 2898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 2\")\n    '23 42'\n    >>> solution(\"3\\n1 2 3\")\n    '23 42 42'\n    >>> solution(\"4\\n1 2 3 4\")\n    '23 42 42 42'\n    >>> solution(\"5\\n1 2 3 4 5\")\n    '23 42 42 42 42'\n    >>> solution(\"6\\n1 2 3 4 5 6\")\n    '23 42 42 42 42 42'\n    >>> solution(\"7\\n1 2 3 4 5 6 7\")\n    '23 42 42 42 42 42 42'\n    >>> solution(\"8\\n1 2 3 4 5 6 7 8\")\n    '23 42 42 42 42 42 42 42'\n    >>> solution(\"9\\n1 2 3 4 5 6 7 8 9\")\n    '23 42 42 42 42 42 42 42 42'\n    >>> solution(\"10\\n1 2 3 4 5 6 7 8 9 10\")\n    '23 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"11\\n1 2 3 4 5 6 7 8 9 10 11\")\n    '23 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"12\\n1 2 3 4 5 6 7 8 9 10 11 12\")\n    '23 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"14\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"15\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"16\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"17\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"18\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"19\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"20\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"21\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"22\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"23\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"24\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"25\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"26\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"27\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"28\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"29\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"30\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"31\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"32\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"33\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\")\n    '23 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42'\n    >>> solution(\"34\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29"
    },
    {
        "number": 2900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, count_inversions(stdin)))\n\ndef"
    },
    {
        "number": 2901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"15\\n0 1\\n1 2\\n2 3\\n0 4\\n1 5\\n2 6\\n3 7\\n4 5\\n5 6\\n6 7\\n4 8\\n5 8\\n6 9\\n7 9\\n8 9\\nGriezmann France LaLiga AtleticoMadrid\\nBenzema France LaLiga RealMadrid\\nNtep France Ligue1 StadeRennais\\nSissoko France PremierLeague Spurs\\nTolisso France Ligue1 Lyon\\nDiarra France Ligue1 OM\\nEvra France CalcioA Juventus\\nKoscielny France PremierLeague Arsenal\\nVarane France LaLiga RealMadrid\\nSagna France PremierLeague ManCity\")\n    'yes'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 2902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 4\n   ... + 7 23\n   ...? 8\n   ... + 3 17\n   ...? 8''')\n    23\n    \"\"\"\n    n, q = map(int, stdin.split())\n    a = [0] * n\n    tree = FenwickTree(a)\n    for _ in range(q):\n        op, i, delta = stdin.split()\n        if op == '+':\n            tree.add(i, delta)\n        else:\n            print(tree.sum(i))\n"
    },
    {
        "number": 2904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5\\n- - - - -\\n- - - - -\\n4 - - 1 1\\n5\\n1 (1,1) 2 (1,2) 5 (2,1) (2,2) 3 (3,1) (3,2) (3,3) 4 (2,3) (2,4) (1,4) (1,5) 3 (3,4) (3,5) (2,5)\")\n    '1 2 1 2 1\\n3 5 3 4 3\\n4 2 1 2 1\\n'\n    \"\"\"\n    # Get the input\n    rows, cols = [int(x) for x in stdin.split()]\n    grid = []\n    for _ in range(rows):\n        grid.append(stdin.split(\"\\n\")[1:][0].split())\n\n    # Get the regions\n    regions = stdin.split(\"\\n\")[rows + 1:]\n\n    # Get the solution\n    solution = []\n    for row in range(rows):\n        solution.append([])\n        for col in range(cols):\n            solution[row].append(grid[row][col])\n            for region in regions:\n                if region.split()[0] == str(row + 1) and region.split()[1].split(\",\")[0] == str(col + 1):\n                    solution[row][col] = region.split()[2]\n    return \"\\n\".join([\" \".join(row) for row in solution])\n"
    },
    {
        "number": 2905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of packs to make hotdogs and buns equal.\"\"\"\n    hotdogs, buns = map(int, stdin.split())\n    hotdogs_per_pack = list(map(int, stdin.split()))\n    buns_per_pack = list(map(int, stdin.split()))\n    hotdogs_per_pack.sort()\n    buns_per_pack.sort()\n    hotdogs_per_pack.reverse()\n    buns_per_pack.reverse()\n    hotdogs_per_pack = hotdogs_per_pack[:hotdogs]\n    buns_per_pack = buns_per_pack[:buns]\n    if sum(hotdogs_per_pack)!= sum(buns_per_pack):\n        return \"impossible\"\n    else:\n        return str(sum(hotdogs_per_pack) + sum(buns_per_pack))\n"
    },
    {
        "number": 2906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 2\\n2 3\\n1 3\")\n    'Impossible'\n    >>> solution(\"3 3\\n1 2\\n2 3\\n1 3\\n1 2\")\n    '2'\n    >>> solution(\"3 3\\n1 2\\n2 3\\n1 3\\n2 1\")\n    '3'\n    >>> solution(\"3 3\\n1 2\\n2 3\\n1 3\\n2 1\\n2 3\")\n    'Impossible'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {i: set() for i in range(1, n + 1)}\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    targets = {i: None for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        if len(graph[i]) == 1:\n            targets[i] = 1\n            break\n    for i in range(1, n + 1):\n        if targets[i] is None:\n            for j in range(1, n + 1):\n                if targets[j] is not None:\n                    if j in graph[i]:\n                        targets[i] = j\n                        break\n    if None in targets.values():\n        return \"Impossible\"\n    return \"\\n\".join(map(str, targets.values()))\n"
    },
    {
        "number": 2907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    offset = int(stdin.readline())\n    message = stdin.readline().strip()\n    n = int(stdin.readline())\n    vowels = set('aeiou')\n    vowels_count = 0\n    for i in range(len(message)):\n        if message[i] in vowels:\n            vowels_count += 1\n    if vowels_count >= len(message) / 2:\n        return 'Boris'\n    return 'Colleague'"
    },
    {
        "number": 2908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    left, right = 0, len(nums) - 1\n    while left < right:\n        if nums[left] + nums[right] == s:\n            return \"YES\"\n        elif nums[left] + nums[right] < s:\n            left += 1\n        else:\n            right -= 1\n    return \"NO\""
    },
    {
        "number": 2909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    return''.join([str(sum(a)), str(sum(b)), str(sum(a) * n)])"
    },
    {
        "number": 2911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 5\n   ... 1\n   ... 2\n   ... 1''')\n    60\n    \"\"\"\n    n, t = map(int, stdin.split())\n    problems = [int(line) for line in stdin.splitlines()[1:]]\n    problems.sort()\n    problems = [0] + problems + [t]\n    prob = 1\n    for i in range(1, len(problems)):\n        prob *= (problems[i] - problems[i - 1])\n        prob %= 998244353\n    return prob\n"
    },
    {
        "number": 2912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\ncute\\nkattis\\nis\\n3 2\\n4 1\\n3 4\")\n    kattiscatiscute\n    \"\"\"\n    n = int(stdin.split()[0])\n    s = [stdin.split()[1]]\n    for _ in range(n - 1):\n        s.append(stdin.split()[2])\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split()[3:])\n        s[a - 1] += s[b - 1]\n        s[b - 1] = \"\"\n    return s[0]\n"
    },
    {
        "number": 2913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 2914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = map(int, stdin.split())\n    return str(round(1 / s ** n * (s ** k) / (s ** k - 1), 7))"
    },
    {
        "number": 2915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 100\n   ... -10 50\n   ... 10 175\n   ... 25 20\n   ... ''')\n    90\n    \"\"\"\n   ..."
    },
    {
        "number": 2916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 0\n   ... 25 3 1 10 3 10 4 10\n   ... 10 1 2 10\n   ... 10 1 2 10''')\n    0\n    \"\"\"\n   ..."
    },
    {
        "number": 2917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 1\n    else:\n        return n * solution(n - 1)"
    },
    {
        "number": 2918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(stdin.readline().strip()) for _ in range(n)]\n    # print(matrix)\n    # print(n)\n    # print(matrix[0])\n    # print(matrix[1])\n    # print(matrix[2])\n    # print(matrix[0][0])\n    # print(matrix[0][1])\n    # print(matrix[0][2])\n    # print(matrix[1][0])\n    # print(matrix[1][1])\n    # print(matrix[1][2])\n    # print(matrix[2][0])\n    # print(matrix[2][1])\n    # print(matrix[2][2])\n    # print(matrix[0][0][0])\n    # print(matrix[0][0][1])\n    # print(matrix[0][0][2])\n    # print(matrix[0][1][0])\n    # print(matrix[0][1][1])\n    # print(matrix[0][1][2])\n    # print(matrix[0][2][0])\n    # print(matrix[0][2][1])\n    # print(matrix[0][2][2])\n    # print(matrix[1][0][0])\n    # print(matrix[1][0][1])\n    # print(matrix[1][0][2])\n    # print(matrix[1][1][0])\n    # print(matrix[1][1][1])\n    # print(matrix[1][1][2])\n    # print(matrix[1][2][0])\n    # print(matrix[1][2][1])\n    # print(matrix[1][2][2])\n    # print(matrix[2][0][0])\n    # print(matrix[2][0][1])\n    # print(matrix[2][0][2])\n    # print(matrix[2][1][0])\n    # print(matrix[2][1][1])\n    # print(matrix[2][1][2])\n    # print(matrix[2][2][0])\n    # print(matrix[2][2][1])\n    # print(matrix[2][2][2])\n    # print(matrix[0][0][0][0])\n    # print(matrix[0][0][0][1])\n    # print(matrix[0][0][0][2])\n    # print(matrix[0][0][1][0])\n    # print(matrix[0][0][1][1])\n    # print(matrix[0][0][1][2])\n    # print(matrix[0][0][2][0])\n    # print(matrix[0][0][2][1])\n    # print(matrix[0][0][2][2])\n    # print(matrix[0][1][0][0])\n    # print(matrix[0][1][0][1])\n    # print(matrix[0][1][0][2])\n    # print(matrix[0][1][1][0])\n    # print(matrix[0][1][1][1])\n    # print(matrix[0][1][1][2])\n    # print(matrix[0][1][2][0])\n    # print(matrix[0][1][2][1])\n    # print(matrix[0][1][2][2])\n    # print(matrix[0][2][0][0])\n    # print(matrix[0][2][0][1])\n    # print(matrix[0][2][0][2])\n    # print(matrix[0][2][1][0])\n    # print(matrix[0][2][1][1])\n    # print(matrix[0][2][1][2])\n    # print(matrix[0][2][2][0])\n    # print(matrix[0][2][2][1])\n    # print(matrix[0][2][2][2])\n    # print(matrix[1][0][0][0])\n    # print(matrix[1][0][0][1])\n    # print(matrix[1][0][0][2])\n    # print(matrix[1][0][1][0])\n    # print(matrix[1][0][1][1])\n    # print(matrix[1][0][1][2])\n    # print(matrix[1][0][2][0])\n    # print(matrix[1][0][2][1])\n    # print(matrix[1][0][2][2])\n    # print(matrix[1][1][0][0])\n    # print(matrix[1][1][0][1])\n    # print(matrix[1][1][0][2])\n    # print(matrix[1][1][1][0])\n    # print(matrix[1][1][1][1])\n    # print(matrix[1][1][1][2])\n    # print(matrix[1][1][2][0])\n    # print(matrix[1][1][2][1])\n    # print(matrix[1][1][2][2])\n    # print(matrix[1][2][0][0])\n    # print(matrix[1][2][0][1])\n    # print(matrix[1][2][0][2])\n    # print(matrix[1][2][1][0])\n    # print(matrix[1][2][1][1])\n    # print(matrix[1][2][1][2])\n    # print(matrix[1][2][2][0])\n    # print(matrix[1][2][2][1])\n    # print(matrix[1][2][2][2])\n    # print(matrix[2][0][0][0])\n    # print(matrix[2][0][0][1])\n    # print(matrix[2][0][0][2])\n    # print(matrix[2][0][1][0])\n    # print(matrix[2][0][1][1])\n    # print(matrix[2][0][1][2])\n    # print(matrix[2][0][2][0])\n    # print(matrix[2][0][2][1])\n    # print(matrix[2][0]["
    },
    {
        "number": 2919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for c in stdin:\n        if c == 'T':\n            stack.append(stack.pop() + stack.pop())\n        elif c == 'N':\n            stack.append(stack.pop())\n        elif c == 'S':\n            stack.append(stack.pop() * -1)\n        else:\n            stack.append(int(c))\n    return str(stack[0])\n"
    },
    {
        "number": 2920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 2921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, u, d = map(int, stdin.split())\n    drinks = {}\n    for _ in range(d):\n        name, strength, size, price = stdin.split()\n        drinks[name] = (int(strength), size, float(price))\n    drinks = {k: v for k, v in sorted(drinks.items(), key=lambda item: item[1][0], reverse=True)}\n    for name, (strength, size, price) in drinks.items():\n        if u * price <= m:\n            m -= u * price\n            u -= 1\n            print(name, u)\n        else:\n            print('IMPOSSIBLE')\n            return\n    return"
    },
    {
        "number": 2922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    if n % 2 == 0:\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if a[0] == a[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 2923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = [int(x) for x in stdin.split()]\n    C = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    C.sort(reverse=True)\n    D.sort(reverse=True)\n    if C[0] < D[0]:\n        return \"Time to change gears!\"\n    else:\n        return \"Ride on!\"\n"
    },
    {
        "number": 2925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the best songs from an album.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: The best song.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = stdin.split('\\n')\n    # print(stdin)\n    # print(stdin[0])\n    # print(stdin[1])\n    # print(stdin[2])\n    # print(stdin[3])\n    # print(stdin[4])\n    # print(stdin[5])\n    # print(stdin[6])\n    # print(stdin[7])\n    # print(stdin[8])\n    # print(stdin[9])\n    # print(stdin[10])\n    # print(stdin[11])\n    # print(stdin[12])\n    # print(stdin[13])\n    # print(stdin[14])\n    # print(stdin[15])\n    # print(stdin[16])\n    # print(stdin[17])\n    # print(stdin[18])\n    # print(stdin[19])\n    # print(stdin[20])\n    # print(stdin[21])\n    # print(stdin[22])\n    # print(stdin[23])\n    # print(stdin[24])\n    # print(stdin[25])\n    # print(stdin[26])\n    # print(stdin[27])\n    # print(stdin[28])\n    # print(stdin[29])\n    # print(stdin[30])\n    # print(stdin[31])\n    # print(stdin[32])\n    # print(stdin[33])\n    # print(stdin[34])\n    # print(stdin[35])\n    # print(stdin[36])\n    # print(stdin[37])\n    # print(stdin[38])\n    # print(stdin[39])\n    # print(stdin[40])\n    # print(stdin[41])\n    # print(stdin[42])\n    # print(stdin[43])\n    # print(stdin[44])\n    # print(stdin[45])\n    # print(stdin[46])\n    # print(stdin[47])\n    # print(stdin[48])\n    # print(stdin[49])\n    # print(stdin[50])\n    # print(stdin[51])\n    # print(stdin[52])\n    # print(stdin[53])\n    # print(stdin[54])\n    # print(stdin[55])\n    # print(stdin[56])\n    # print(stdin[57])\n    # print(stdin[58])\n    # print(stdin[59])\n    # print(stdin[60])\n    # print(stdin[61])\n    # print(stdin[62])\n    # print(stdin[63])\n    # print(stdin[64])\n    # print(stdin[65])\n    # print(stdin[66])\n    # print(stdin[67])\n    # print(stdin[68])\n    # print(stdin[69])\n    # print(stdin[70])\n    # print(stdin[71])\n    # print(stdin[72])\n    # print(stdin[73])\n    # print(stdin[74])\n    # print(stdin[75])\n    # print(stdin[76])\n    # print(stdin[77])\n    # print(stdin[78])\n    # print(stdin[79])\n    # print(stdin[80])\n    # print(stdin[81])\n    # print(stdin[82])\n    # print(stdin[83])\n    # print(stdin[84])\n    # print(stdin[85])\n    # print(stdin[86])\n    # print(stdin[87])\n    # print(stdin[88])\n    # print(stdin[89])\n    # print(stdin[90])\n    # print(stdin[91])\n    # print(stdin[92])\n    # print(stdin[93])\n    # print(stdin[94])\n    # print(stdin[95])\n    # print(stdin[96])\n    # print(stdin[97])\n    # print(stdin[98])\n    # print(stdin[99])\n    # print(stdin[100])\n    # print(stdin[101])\n    # print(stdin[102])\n    # print(stdin[103])\n    # print(stdin[104])\n    # print(stdin[105])\n    # print(stdin[106])\n    # print(stdin[107])\n    # print(stdin[108])\n    # print(stdin[109])\n    # print(stdin[110])\n    # print(stdin[111])\n    # print(stdin[112])\n    # print(stdin[113])\n    # print(stdin[114])\n    # print(stdin[115])\n    # print(stdin[116])\n    # print(stdin[117])\n    # print(stdin[118])\n    # print(stdin[119])\n    # print(stdin[120])\n    # print(stdin[121])\n    # print(stdin[122])\n    # print(stdin[123])\n    # print(stdin[124])\n    # print(stdin[125])\n    # print(stdin[126])\n    # print(stdin[127])\n    # print(stdin[128])\n    # print(stdin[129])\n    # print(stdin[130])\n    # print(stdin[131])\n    # print(stdin[132])\n    # print(stdin[133])\n    # print(stdin[134])\n    # print(stdin[135"
    },
    {
        "number": 2927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = stdin.splitlines()\n    # n = int(stdin[0])\n    # l = [int(i) for i in stdin[1:]]\n    # l = sorted(l)\n    # l = l[::-1]\n    # print(l)\n    # for i in range(n):\n    #     if l[i] >= 80:\n    #         print('Touchdown')\n    #         break\n    #     elif l[i] < 20:\n    #         print('Safety')\n    #         break\n    #     else:\n    #         print('Nothing')\n    #         break\n    # return ''\n    n = int(stdin)\n    l = [int(i) for i in stdin.split()]\n    l = sorted(l)\n    l = l[::-1]\n    for i in range(n):\n        if l[i] >= 80:\n            print('Touchdown')\n            break\n        elif l[i] < 20:\n            print('Safety')\n            break\n        else:\n            print('Nothing')\n            break\n    return ''"
    },
    {
        "number": 2928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 1000 0\n   ... 20\n   ... 3\n   ... 0.0 500\n   ... 999.5 500\n   ... 1000.0 500''')\n    '500.000000'\n    >>> solution('''1\n   ... 1000 0\n   ... 20\n   ... 3\n   ... 0.0 500\n   ... 999.5 500\n   ... 1000.0 500\n   ... 1\n   ... 1000.0 500\n   ... 20\n   ... 3\n   ... 0.0 500\n   ... 999.5 500\n   ... 1000.0 500''')\n    '625.000000'\n    \"\"\"\n   ...\n    pass\n"
    },
    {
        "number": 2929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 3\n   ... 4''')\n    4\n    \"\"\"\n   ..."
    },
    {
        "number": 2930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the length of the longest Zigzagging subsequence of the input list.\"\"\"\n    # Your code here\n    # return 0"
    },
    {
        "number": 2931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    s = list(s)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if abs(ord(s[i]) - ord(s[j])) >= k:\n                s[i], s[j] = s[j], s[i]\n                break\n    return 'Yes' if s == sorted(s) else 'No'\n"
    },
    {
        "number": 2933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(stdin.readline()) for _ in range(n)]\n    weights.sort()\n    diff = 1000 - weights[0]\n    for i in range(1, n):\n        if diff > abs(1000 - weights[i]):\n            diff = abs(1000 - weights[i])\n            ans = weights[i]\n    return str(ans)\n"
    },
    {
        "number": 2934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 2935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    \n    # Your code here\n    # return the maximum possible total sum of k disjoint contiguous subarrays of array A\n    \n    return 0"
    },
    {
        "number": 2937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 2939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin.readline())\n    # matrix = []\n    # for _ in range(n):\n    #     matrix.append(list(map(int, stdin.readline().split())))\n    #\n    # dp = [[0 for _ in range(n)] for _ in range(n)]\n    #\n    # for i in range(n):\n    #     for j in range(n):\n    #         if matrix[i][j] == 1:\n    #             dp[i][j] = 1\n    #         elif matrix[i][j] == 2:\n    #             dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n    #         elif matrix[i][j] == 3:\n    #             dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n    #\n    # return max(max(row) for row in dp)\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 2940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1 2\n   ... 2 3 4\n   ... 2 1 5\n   ... 5 1 2 3 4 5\n   ... 2 1 2''')\n    '3'\n    \"\"\"\n    recipes = [list(map(int, line.split())) for line in stdin.splitlines()]\n    recipes.sort(key=lambda x: x[0])\n    cauldron = []\n    for recipe in recipes:\n        if len(cauldron) < recipe[0]:\n            cauldron += [i for i in range(recipe[0])]\n        for ingredient in recipe[1:]:\n            if ingredient not in cauldron:\n                cauldron.append(ingredient)\n    return str(len(cauldron))\n"
    },
    {
        "number": 2941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1\n   ... 1 10 Alice 5\n   ... 1 15 Bob 15\n   ... 2 20\n   ... 2 25\n   ... 2 30\n   ... ''')\n    'Bob'\n    >>> solution('''5 1\n   ... 1 10 Alice 5\n   ... 1 15 Bob 15\n   ... 2 20\n   ... 2 25\n   ... 2 30\n   ... 3 40\n   ... 3 50\n   ... 3 60\n   ... 3 70\n   ... 3 80\n   ... 3 90\n   ... 3 100\n   ... 3 110\n   ... 3 120\n   ... 3 130\n   ... 3 140\n   ... 3 150\n   ... 3 160\n   ... 3 170\n   ... 3 180\n   ... 3 190\n   ... 3 200\n   ... 3 210\n   ... 3 220\n   ... 3 230\n   ... 3 240\n   ... 3 250\n   ... 3 260\n   ... 3 270\n   ... 3 280\n   ... 3 290\n   ... 3 300\n   ... 3 310\n   ... 3 320\n   ... 3 330\n   ... 3 340\n   ... 3 350\n   ... 3 360\n   ... 3 370\n   ... 3 380\n   ... 3 390\n   ... 3 400\n   ... 3 410\n   ... 3 420\n   ... 3 430\n   ... 3 440\n   ... 3 450\n   ... 3 460\n   ... 3 470\n   ... 3 480\n   ... 3 490\n   ... 3 500\n   ... 3 510\n   ... 3 520\n   ... 3 530\n   ... 3 540\n   ... 3 550\n   ... 3 560\n   ... 3 570\n   ... 3 580\n   ... 3 590\n   ... 3 600\n   ... 3 610\n   ... 3 620\n   ... 3 630\n   ... 3 640\n   ... 3 650\n   ... 3 660\n   ... 3 670\n   ... 3 680\n   ... 3 690\n   ... 3 700\n   ... 3 710\n   ... 3 720\n   ... 3 730\n   ... 3 740\n   ... 3 750\n   ... 3 760\n   ... 3 770\n   ... 3 780\n   ... 3 790\n   ... 3 800\n   ... 3 810\n   ... 3 820\n   ... 3 830\n   ... 3 840\n   ... 3 850\n   ... 3 860\n   ... 3 870\n   ... 3 880\n   ... 3 890\n   ... 3 900\n   ... 3 910\n   ... 3 920\n   ... 3 930\n   ... 3 940\n   ... 3 950\n   ... 3 960\n   ... 3 970\n   ... 3 980\n   ... 3 990\n   ... 3 1000\n   ... 3 1010\n   ... 3 1020\n   ... 3 1030\n   ... 3 1040\n   ... 3 1050\n   ... 3 1060\n   ... 3 1070\n   ... 3 1080\n   ... 3 1090\n   ... 3 1100\n   ... 3 1110\n   ... 3 1120\n   ... 3 1130\n   ... 3 1140\n   ... 3 1150\n   ... 3 1160\n   ... 3 1170\n   ... 3 1180\n   ... 3 1190\n   ... 3 1200\n   ... 3 1210\n   ... 3 1220\n   ... 3 1230\n   ... 3 1240\n   ... 3 1250\n   ... 3 1260\n   ... 3 1270\n   ... 3 1280\n   ... 3 1290\n   ... 3 1300\n   ... 3 1310\n   ... 3 1320\n   ... 3 1330\n   ... 3 1340\n   ... 3 1350\n   ... 3 1360\n   ... 3 1370\n   ... 3 1380\n   ... 3 1390\n   ... 3 1400\n   ... 3 1410\n   ... 3 1420\n   ... 3 1430\n   ... 3 1440\n   ... 3 1450\n   ... 3 1460\n   ... 3 1470\n   ... 3 1480\n   ... 3 1490\n   ... 3 1500\n   ... 3 1510\n   ... 3 1520\n   ... 3 1530\n   ... 3 1540\n   ... 3 1550\n   ... 3 1560\n   ... 3 1570\n   ... 3 1580\n   ... 3 1590\n   ... 3 1600\n   ... 3 1610\n   ... 3 1620\n   ... 3 1630\n   ... 3 1640\n   ... 3 1650\n   ... 3 1660\n   ... 3 1670\n   ... 3 1680\n   ... 3 1690\n   ... 3 1700\n   ... 3 1710\n   ... 3 1720\n   ... 3 1730\n   ... 3 1740\n   ... 3 1750\n   ... 3 1760\n   ... 3 1770\n   ... 3 1780\n   ... 3 1790\n   ... 3 1800\n   ... 3 1810\n   ... 3 1820\n   ... 3 1830\n   ... 3 1840\n   ... 3 1850\n   ... 3 1860\n   ... 3 1870\n   ... 3 1880\n   ... 3 1890\n   ... 3 1900\n   ... 3 1910\n   ... 3 1920\n   ... 3 1930\n   ... 3 1940\n   ... 3 1950\n   ... 3 1960\n   ... 3 1970\n   ... 3 1980\n   ... 3 1990\n   ... 3 2000\n   ... 3 2010\n   ... 3 2020\n   ... 3 2030\n   ... 3 2040\n   ... 3 2050\n   ... 3 2060\n   ... 3 2070\n   ... 3 2080\n   ... 3 2090\n   ... 3 2100\n   ... 3 2110\n   ... 3 2120\n   ... 3 2130\n   ... 3 2140\n   ... 3 2150\n   ... 3 2160\n   ... 3 2170\n   ... 3 2180\n   ... 3 2"
    },
    {
        "number": 2942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    n1, n2 = 0, 0\n    while n1 * n1 - n2 * n2 < D:\n        n2 += 1\n    while n1 * n1 - n2 * n2 > D:\n        n1 += 1\n    if n1 * n1 - n2 * n2 == D:\n        return str(n1) + \" \" + str(n2)\n    else:\n        return \"impossible\"\n"
    },
    {
        "number": 2943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    graph = defaultdict(set)\n    for _ in range(m):\n        u, v = [x for x in stdin.split()]\n        graph[u].add(v)\n        graph[v].add(u)\n    r = stdin.split()[-1]\n    return d\n"
    },
    {
        "number": 2945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    M = int(stdin.readline())\n    C = [int(x) for x in stdin.readline().split()]\n    return str(T - max(A) - max(C))\n"
    },
    {
        "number": 2946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(' ')]\n    prices = [int(x) for x in stdin.split(' ')]\n    profit = 0\n    for i in range(N):\n        if prices[i] < K:\n            profit += K - prices[i]\n        else:\n            profit += prices[i] - K\n    return profit"
    },
    {
        "number": 2947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 2 17 10\n   ... 1 5\n   ... 2 10 22\n   ... 3 17 22 9\n   ... 2 17 8\n   ... 3 9 22 16\n   ... ''')\n    'impossible'\n    \"\"\"\n   ..."
    },
    {
        "number": 2948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = [list(map(int, line.split())) for line in stdin]\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][0]!= pairs[i - 1][0]]\n    pairs = [pairs[i] for i in range(len(pairs)) if i == 0 or pairs[i][1]!= pairs[i - 1][1]]"
    },
    {
        "number": 2949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1 0 1\n   ... 3 0 2\n   ... 0 1 1\n   ... 2 1 2\n   ... 4 1 2\n   ... 1 2 2\n   ... 2 3 1\n   ... 4 3 1''')\n    '4'\n    \"\"\"\n   ..."
    },
    {
        "number": 2950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 2951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 1\n   ... 2 1\n   ... 2 1''')\n    '12'\n    \"\"\"\n    N = int(stdin.readline())\n    count = 0\n    for i in range(N):\n        a, b = map(int, stdin.readline().split())\n        count += a * b\n    return str(count)\n"
    },
    {
        "number": 2952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b, c = [int(x) for x in stdin.split()]\n    if m < a + b + c:\n        return \"impossible\"\n    if m % a == 0:\n        return \"possible\"\n    if m % b == 0:\n        return \"possible\"\n    if m % c == 0:\n        return \"possible\"\n    return \"impossible\""
    },
    {
        "number": 2953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 20180000 20180000\n   ... 20180000 20182018\n   ... 20182018 20180000\n   ... 20182018 20182018''')\n    4\n    \"\"\"\n   ..."
    },
    {
        "number": 2954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 4 3000\n   ... 0 1 1\n   ... 1 3 1\n   ... 2 0 2018\n   ... 2 3 42\n   ... 0 3\n   ... 1 1''')\n    '1'\n    \"\"\"\n   ..."
    },
    {
        "number": 2955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, b = [int(x) for x in stdin.split()]\n    z = [int(x) for x in stdin.split()[1:]]\n    z.sort()\n    z = [0] + z + [n]\n    ans = []\n    for i in range(1, len(z)):\n        ans.append(bin(z[i] - z[i - 1] - 1)[2:])\n    ans = ''.join(ans)\n    ans = ans.replace('0', '1')\n    ans = ans.replace('1', '0')\n    ans = ans.replace('1', '1')\n    return ans\n"
    },
    {
        "number": 2956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of different unlock patterns that have a turn sequence matching the input.\"\"\"\n    # Your code here\n    return None\n"
    },
    {
        "number": 2957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    dist = [float('inf')] * n\n    dist[0] = 0\n    queue = [0]\n    while queue:\n        u = queue.pop(0)\n        for v in graph[u]:\n            if dist[v] == float('inf'):\n                dist[v] = dist[u] + 1\n                queue.append(v)\n    return dist[n - 1]\n"
    },
    {
        "number": 2958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 6\\n.TT...\\nTTTT..\\nTTTTT.\\nTTTTT.\\nTTTTTT\\n..T...\\n\")\n    '...1.1......\\n.1.2.2.1....\\n.1.2.3.2.1..\\n.1.2.3.2.1..\\n.1.1.2.1.1.1\\n.....1......'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()[i]) for i in range(n)]\n    rings = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"T\":\n                rings.append(find_rings(grid, i, j))\n    rings.sort()\n    rings = [str(i) for i in rings]\n    rings = \"\".join(rings)\n    rings = [i for i in rings]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"T\":\n                grid[i][j] = \".\"\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \".\":\n                grid[i][j] = rings.pop(0)\n    return \"\\n\".join([\"\".join(i) for i in grid])\n\n\ndef"
    },
    {
        "number": 2960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) // 2)\n"
    },
    {
        "number": 2961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 1 1 2\n   ... 2 2 2 3\n   ... 3 3 3 4\n   ... 0 0 0 0\n   ... 2 2 2 2\n   ... 3 3 3 3\n   ... 4 4 4 4\n   ... 4 4 4 4''')\n    'Yes'\n    >>> solution('''4\n   ... 1 1 1 2\n   ... 2 2 2 3\n   ... 3 3 3 4\n   ... 0 0 0 0\n   ... 2 2 2 2\n   ... 3 3 3 3\n   ... 4 4 4 4\n   ... 4 4 4 4''')\n    'No'\n    \"\"\"\n   ..."
    },
    {
        "number": 2962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    queue = []\n    for _ in range(N):\n        c, t = map(int, stdin.split())\n        queue.append((c, t))\n    queue.sort(key=lambda x: x[1])\n    queue.sort(key=lambda x: x[0], reverse=True)\n    total = 0\n    for c, t in queue:\n        if t < T:\n            total += c\n            T -= t\n        else:\n            total += c * (T / t)\n            break\n    return str(total)"
    },
    {
        "number": 2963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(math.sqrt(n))\n"
    },
    {
        "number": 2964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 2\n   ... -1 -2\n   ... ''')\n    '5.0'\n    \"\"\"\n   ..."
    },
    {
        "number": 2965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2 8\\n3 2\\n5 5\\n4 3\\n1 1\")\n    '1\\n2\\n1\\n2\\n'\n    \"\"\"\n    pumpkins = []\n    for i in range(4):\n        pumpkins.append(list(map(int, stdin.split()[i * 2 : i * 2 + 2])))\n    days = int(stdin.split()[0])\n    for day in range(days):\n        for i in range(len(pumpkins)):\n            for j in range(len(pumpkins[i])):\n                if pumpkins[i][j] == 1:\n                    pumpkins[i][j] = 0\n                    if i > 0 and pumpkins[i - 1][j] == 1:\n                        pumpkins[i - 1][j] = 0\n                    if j > 0 and pumpkins[i][j - 1] == 1:\n                        pumpkins[i][j - 1] = 0\n                    if i < len(pumpkins) - 1 and pumpkins[i + 1][j] == 1:\n                        pumpkins[i + 1][j] = 0\n                    if j < len(pumpkins[i]) - 1 and pumpkins[i][j + 1] == 1:\n                        pumpkins[i][j + 1] = 0\n        for i in range(len(pumpkins)):\n            for j in range(len(pumpkins[i])):\n                if pumpkins[i][j] == 0:\n                    pumpkins[i][j] = 1\n                else:\n                    pumpkins[i][j] = 0\n    for i in range(len(pumpkins)):\n        for j in range(len(pumpkins[i])):\n            if pumpkins[i][j] == 1:\n                print(day + 1)\n                return\n    return\n"
    },
    {
        "number": 2966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    return str(m * n // 2)"
    },
    {
        "number": 2967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 2968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, n, e = map(int, stdin.split())\n    s_b, s_n, s_e = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    m = (b + n + e) // 2\n    s = [s_b, s_n, s_e]\n    s.sort()\n    s = s[::-1]\n    c.sort()\n    c = c[::-1]\n    s_max = s[0]\n    c_max = c[0]\n    for i in range(1, m):\n        s_max = max(s_max, s[i])\n        c_max = max(c_max, c[i])\n    return c_max * s_max\n"
    },
    {
        "number": 2969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 2970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... spaghetti\n   ... already\n   ... confetti\n   ... serengeti\n   ... ''')\n    4\n    \"\"\"\n   ..."
    },
    {
        "number": 2972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if is_palindrome(i, k):\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 2973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, t = map(int, stdin.split())\n    d = []\n    s = []\n    for i in range(n):\n        d.append(int(stdin.split()[i * 2]))\n        s.append(int(stdin.split()[i * 2 + 1]))\n    c = (sum(d) * 3600) / (sum(s) * n)\n    return c"
    },
    {
        "number": 2974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    p.sort()\n    d.sort()\n    p_set = set(p)\n    d_set = set(d)\n    if p_set == d_set:\n        return '0 0'\n    p_set_diff = p_set.difference(d_set)\n    d_set_diff = d_set.difference(p_set)\n    if len(p_set_diff) == 0:\n        return '0'+ str(len(d_set_diff))\n    elif len(d_set_diff) == 0:\n        return str(len(p_set_diff)) +'0'\n    else:\n        return str(len(p_set_diff)) +'' + str(len(d_set_diff))"
    },
    {
        "number": 2975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 2976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"sampras agassi\\n6\\n6:2 6:4\\n3:6 7:5 2:6\\n6:5 7:4\\n7:6 7:6\\n6:2 3:6\\n6:2 1:6 6:8\")\n    'da'\n    >>> solution(\"sampras agassi\\n6\\n6:2 6:4\\n3:6 7:5 2:6\\n6:5 7:4\\n7:6 7:6\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\")\n    'da'\n    >>> solution(\"sampras agassi\\n6\\n6:2 6:4\\n3:6 7:5 2:6\\n6:5 7:4\\n7:6 7:6\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\")\n    'da'\n    >>> solution(\"sampras agassi\\n6\\n6:2 6:4\\n3:6 7:5 2:6\\n6:5 7:4\\n7:6 7:6\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:4\\n6:2 3:6\\n6:2 1:6 6:8\\nfederer:6 6:"
    },
    {
        "number": 2977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the answer that requires the least amount of changes to be turned into any other answer.\"\"\"\n    # Get the question and the number of answer alternatives.\n    question, n = stdin.split('\\n')[:2]\n    n = int(n)\n\n    # Get the answer alternatives.\n    answers = [stdin.split('\\n')[i] for i in range(2, 2 + n)]\n\n    # Find the answer with the least amount of changes.\n    incongruity = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            incongruity[i] += len(set(answers[i].split(', ')) - set(answers[j].split(', ')))\n    answer = answers[incongruity.index(min(incongruity))]\n\n    return answer\n"
    },
    {
        "number": 2978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return'same' if the two properties are guaranteed to receive the same\n    designation, or 'different' if they are guaranteed to receive different\n    designations.\n\n    >>> solution('2\\n1 1 2 1\\n1 1 1 2')\n    'different'\n    >>> solution('2\\n1 1 2 1\\n1 1 1 2')\n   'same'\n    \"\"\"\n    # Read the number of streets and the number of pairs of properties to test.\n    num_streets = int(stdin.readline())\n    num_pairs = int(stdin.readline())\n\n    # Read the coordinates of the two points.\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(2)]\n\n    # Read the coordinates of the two properties.\n    properties = [tuple(map(int, stdin.readline().split()))\n                  for _ in range(num_pairs)]\n\n    # Read the coordinates of the two points.\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(2)]\n\n    # Determine whether the two properties are guaranteed to receive the same\n    # or different designations.\n    return'same' if points[0] in properties[0] and points[1] in properties[0] \\\n        else 'different'\n"
    },
    {
        "number": 2979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, m, s, t = [int(x) for x in stdin.split()]\n    # connections = [[int(x) for x in stdin.split()] for _ in range(m)]\n    # return str(count_squawks(n, m, s, t, connections))\n    n, m, s, t = [int(x) for x in stdin.split()]\n    connections = [[int(x) for x in stdin.split()] for _ in range(m)]\n    return str(count_squawks(n, m, s, t, connections))\n\ndef"
    },
    {
        "number": 2980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2 5\\n3\\n2 5 12\\n3 2 4 7\\n4 2 3 7 12\")\n    'LWW'\n    \"\"\"\n    S, k = [int(x) for x in stdin.split()]\n    S = set(S)\n    moves = [int(x) for x in stdin.split()[1:]]\n    for i in range(moves[0]):\n        S = set(S)\n        for j in range(moves[i + 1]):\n            S.remove(moves[i + 1])\n        if len(S) == 0:\n            return \"W\"\n    return \"L\"\n"
    },
    {
        "number": 2981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum slot size for a polygonal coin.\"\"\"\n    n = int(stdin.readline())\n    points = [tuple(map(float, line.split())) for line in stdin]\n    points = [\n        (x, y)\n        for x, y in points\n        if 0 <= x <= 100 and 0 <= y <= 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for x, y in points\n        if x == 0 or y == 0 or x == 100 or y == 100\n    ]\n    points = [\n        (x, y)\n        for"
    },
    {
        "number": 2982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9\n   ... 1 1 1 2 2 2 3 3 3''')\n    '63'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    hype_ratings = [int(x) for x in stdin.split('\\n')[1].split()]\n    setlists = 0\n    for i in range(n):\n        if i == 0:\n            if hype_ratings[i] == 1:\n                setlists += 1\n        elif i == n - 1:\n            if hype_ratings[i] == 3:\n                setlists += 1\n        else:\n            if hype_ratings[i] == 2:\n                setlists += 1\n    return str(setlists % (10 ** 9 + 7))\n"
    },
    {
        "number": 2983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '1.60965532263'"
    },
    {
        "number": 2984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"my ]]name]] is]] steva<en]<n halim]]]]]\")\n   'my name is steven halim'\n    \"\"\"\n    stack = []\n    for char in stdin:\n        if char == \"<\":\n            if stack:\n                stack.pop()\n        elif char == \"[\":\n            stack.append(\"[\")\n        elif char == \"]\":\n            stack.append(\"]\")\n        else:\n            stack.append(char)\n    return \"\".join(stack)\n"
    },
    {
        "number": 2987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 2988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 2989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2 1\n   ... 1 3 10\n   ... 2 3 1\n   ... 2 3 15''')\n    '1\\n10\\n15'\n    \"\"\"\n    n, p, k = map(int, stdin.split())\n    pipes = [tuple(map(int, line.split())) for line in stdin.split('\\n')[2:]]\n    pipes = [(a, b, c) for a, b, c in pipes if a!= b]\n    pipes = {(a, b): c for a, b, c in pipes}\n    pipes[(1, 2)] = 0\n    pipes[(2, 3)] = 0\n    for _ in range(k):\n        a, b, c = map(int, stdin.split()[2:])\n        pipes[(a, b)] = c\n        pipes[(b, a)] = c\n    return '\\n'.join(map(str, [sum(pipes[(1, 2)]), sum(pipes[(2, 3)])] + [pipes[(a, b)] for a, b in pipes if a!= b]))\n"
    },
    {
        "number": 2990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2\n   ... 0\n   ... 0\n   ... 6\n   ... Shoresy\n   ... Jonesy\n   ... Reilly\n   ... Sholtzy\n   ... Fisky\n   ... Yorkie''')\n    'Shoresy Reilly'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    preferences = [list(map(int, stdin.split())) for _ in range(n)]\n    players = list(map(str, stdin.split()))\n    draft = [None] * k\n    for i in range(k):\n        for j in range(n):\n            if draft[i] is None:\n                if i < preferences[j][i]:\n                    draft[i] = players[j]\n                    break\n    return''.join(draft)\n"
    },
    {
        "number": 2991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the original sequence of gnomes.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: The original sequence of gnomes.\n    \"\"\"\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    gnomes = [int(x) for x in stdin.split('\\n')[1:]]\n    gnomes.sort()\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:m]\n    gnomes.sort()\n    gnomes = gnomes[::-1]\n    gnomes = gnomes[:n]\n    gnomes.sort()"
    },
    {
        "number": 2992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 0 1 3\n   ... 1 2 4\n   ... 2 1 5''')\n    '4'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    roads.sort(key=lambda x: x[2])\n    cities = set()\n    for city1, city2, _ in roads:\n        cities.add(city1)\n        cities.add(city2)\n    cities = list(cities)\n    cities.sort()\n    dp = [[0] * len(cities) for _ in range(len(cities))]\n    for city1, city2, _ in roads:\n        dp[cities.index(city1)][cities.index(city2)] = 1\n    for k in range(len(cities)):\n        for i in range(len(cities)):\n            for j in range(len(cities)):\n                if dp[i][j] == 1 or (dp[i][k] == 1 and dp[k][j] == 1):\n                    dp[i][j] = 1\n    for row in dp:\n        print(row)\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 2993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n0.0101\")\n    'ABAB'\n    \"\"\"\n    N = int(stdin)\n    D = int(stdin)\n    encoded = stdin\n    decoded = \"\"\n    for i in range(N):\n        if i == 0:\n            a = 0\n            b = 0.5\n        else:\n            a = b\n            b = a + D / 8\n        if encoded[i] == \"0\":\n            decoded += \"A\"\n        else:\n            decoded += \"B\"\n    return decoded\n"
    },
    {
        "number": 2994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\naaa\\n#..\\n..#\")\n    a..\n    #.a\n   .a#\n    \"\"\"\n    rows, cols = [int(x) for x in stdin.split()]\n    grid = [[x for x in stdin.split()[i]] for i in range(rows)]\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 'a':\n                grid[row][col] = '.'\n                if row + 1 < rows and grid[row + 1][col] == '.':\n                    grid[row + 1][col] = 'a'\n    for row in range(rows):\n        print(''.join(grid[row]))\n"
    },
    {
        "number": 2995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    items = [stdin.readline().strip() for _ in range(n)]\n    m = int(stdin.readline())\n    pairs = [stdin.readline().strip().split() for _ in range(m)]\n    items.sort()\n    pairs.sort()\n    pairs = set(pairs)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if items[i] + items[j] in pairs:\n                return f\"{items[i]}\\n{items[j]}\"\n    return \"impossible\"\n"
    },
    {
        "number": 2996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    costs = [int(x) for x in stdin.split()]\n    costs.sort()\n    costs.append(0)\n    costs.insert(0, 0)\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = costs[i] + min(dp[i - 1][j], dp[i - 1][j - 1])\n    return dp[n][k]"
    },
    {
        "number": 2997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of color changes Alice can force Bob to make on his route from node 1 to node N.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution string\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = {edge[0]: edge[1] for edge in edges}\n    return str(max(len(set(path)) - 1 for path in permutations(range(1, n + 1))))\n"
    },
    {
        "number": 2998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''uu Friends m Romans ummuuummmuuuuumm countrymen mmuummmuu''')\n    'icpc'\n    \"\"\"\n    # Get the binary representation of the umm-coded message\n    message = stdin.replace(' ', '').replace('\\n', '')\n    binary_message = ''.join(format(ord(c), 'b') for c in message)\n    binary_message = binary_message.zfill(len(binary_message) + 7)\n\n    # Get the umm-coded message\n    message = ''\n    for i in range(0, len(binary_message), 7):\n        message += chr(int(binary_message[i:i + 7], 2))\n\n    return message\n"
    },
    {
        "number": 2999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    participants = [stdin.split() for _ in range(n)]\n    participants.sort(key=lambda x: x[1], reverse=True)\n    winning_participants = []\n    for i in range(n):\n        if sum([int(x[1]) for x in participants[:i+1]]) == s:\n            winning_participants.append(participants[i][0])\n    return '\\n'.join(winning_participants)"
    }
]