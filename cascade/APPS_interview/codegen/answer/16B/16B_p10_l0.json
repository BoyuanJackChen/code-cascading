[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if s[i] == ':' and s[i - 1] == '|' and s[i + 1] == '|':\n            s = s[:i] +'' + s[i + 1:]\n    return ''.join(s.split())\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    acc = stdin.replace('[', '|').replace(']', '|').replace(':', '')\n    if len(acc)!= 0 and acc.count('|') <= acc.count(':'):\n        return len(acc)\n    else:\n        return -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABCDEFG\"[0:4]\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    acc = [ch for ch in stdin]\n    acc_len = len(acc)\n    res = 0\n    i = 0\n    while i < acc_len:\n        if acc[i] == \"|\":\n            if acc[i-1] == \":\":\n                acc[i] = \"|\"\n                acc[i-1] = \":\"\n                i = i - 1\n                acc_len -= 1\n            elif acc[i+1] == \":\":\n                acc[i] = \"|\"\n                acc[i+1] = \":\"\n                i = i + 1\n                acc_len -= 1\n        i = i + 1\n    if acc[0] == \":\":\n        acc.pop(0)\n        acc_len -= 1\n    if acc[-1] == \":\":\n        acc.pop(-1)\n        acc_len -= 1\n    res = len(acc)\n    if res > acc_len or acc_len % 2!= 0:\n        res = -1\n    return res\n    pass\nprint(solution('[a:b:|]'))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Solution starts here\n    ans = -1\n    stdin = stdin.split('|')\n    for i in range(len(stdin)):\n        if stdin[i] == '[':\n            stdin[i] = stdin[i+1]\n        if stdin[i] == ']':\n            stdin[i] = stdin[i+1]\n            break\n    stdin = ''.join(stdin)\n    # Solution ends here\n    return ans\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    acc = []\n    for c in stdin:\n        if c == '[':\n            acc.append(c)\n        elif c == '|':\n            acc.append(c)\n        elif c == ']':\n            if acc[-1] == '[':\n                acc.pop()\n            else:\n                acc.append(c)\n        elif c == ':':\n            if acc[-1]!= '|':\n                acc.append(c)\n        else:\n            acc.append(c)\n    return ''.join(acc)"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = [0, 0]\n    for char in stdin:\n        if char == ':':\n            result[0] += 1\n        elif char == '|':\n            result[1] += 1\n    return max(result) if result[0] < result[1] else -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count_open_bracket = 0\n    count_close_bracket = 0\n    count_colon = 0\n    count_slash = 0\n    count_max = 0\n    for c in stdin:\n        if c == '{':\n            count_open_bracket += 1\n            if count_close_bracket > 0:\n                count_colon += 1\n                count_close_bracket -= 1\n        elif c == '}':\n            count_close_bracket += 1\n            if count_open_bracket > 0:\n                count_open_bracket -= 1\n        elif c == '|':\n            count_slash += 1\n            if count_open_bracket > 0 and count_colon > 0 and count_slash > 1:\n                count_colon -= 1\n                count_open_bracket -= 1\n                count_max = max(count_max, count_colon+1)\n        elif c == ':':\n            count_colon += 1\n            if count_slash > 0:\n                count_slash -= 1\n                count_max = max(count_max, count_colon+1)\n        else:\n            count_max = max(count_max, count_open_bracket+1)\n    return count_max\n        \n    \n    \ndef"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string_list = list(stdin)\n    left_index = 0\n    right_index = 0\n    opening_brackets = 0\n    opening_bracket_indices = []\n    close_bracket_indices = []\n\n    for index, char in enumerate(string_list):\n        if char == '[' or char == ':':\n            opening_brackets += 1\n            opening_bracket_indices.append(index)\n        elif char == ']':\n            close_bracket_indices.append(index)\n        elif char == '|':\n            if opening_brackets > 0:\n                opening_brackets -= 1\n                left_index = index\n                right_index = index\n            else:\n                close_bracket_indices.append(index)\n                right_index = index\n    \n    close_bracket_indices.sort()\n    opening_bracket_indices.sort()\n\n    left_index_set = set()\n    right_index_set = set()\n\n    for index in opening_bracket_indices:\n        for index_2 in close_bracket_indices:\n            if index < index_2:\n                left_index_set.add(index)\n                right_index_set.add(index_2)\n    \n    for index in left_index_set:\n        if index not in right_index_set:\n            return -1\n\n    left_index_set.add(0)\n    right_index_set.add(len(string_list) - 1)\n    \n    left_index_list = list(left_index_set)\n    right_index_list = list(right_index_set)\n    left_index_list.sort()\n    right_index_list.sort()\n\n    left_index = 0\n    right_index = len(string_list) - 1\n    accordion_length = 0\n    for index in range(len(string_list)):\n        if index in left_index_list:\n            accordion_length += 1\n            left_index += 1\n        elif index in right_index_list:\n            accordion_length += 1\n            right_index -= 1\n\n    return accordion_length"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number with the maximum number of digits.\"\"\"\n    x = stdin\n    largest = 0\n    for i in range(int(x), 0, -1):\n        digits = 0\n        for char in str(i):\n            digits += int(char)\n        if digits > largest:\n            largest = digits\n            largest_number = i\n    return str(largest_number)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    x = int(stdin)\n    \n    result = 0\n    max_value = 0\n    max_index = 0\n    for i in range(1, x + 1):\n        sum_ = sum([int(d) for d in str(i)])\n        if sum_ > max_value:\n            max_value = sum_\n            max_index = i\n    print(max_index)\n\n    return max_index\n    \n    \n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    d = {}\n    for i in range(1, x + 1):\n        if sum(map(int, str(i))) not in d.keys():\n            d[sum(map(int, str(i)))] = [i]\n        else:\n            d[sum(map(int, str(i)))].append(i)\n    d = dict(sorted(d.items(), reverse=True))\n    if len(d[max(d.keys())]) == 1:\n        return d[max(d.keys())][0]\n    else:\n        return max(d[max(d.keys())])\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input of the problem and returns the solution\n    >>> solution(\"100\")\n    99\n    >>> solution(\"521\")\n    499\n    >>> solution(\"48\")\n    48\n    \"\"\"\n    int_x = int(stdin)\n    int_result = None\n    for i in range(int_x):\n        int_s = str(i)\n        int_sum = 0\n        for char in int_s:\n            int_sum += int(char)\n        if int_sum < int_x:\n            int_result = i\n    print(int_result)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    res = 0\n    temp = x\n    while temp > 0:\n        res += temp % 10\n        temp = temp // 10\n    while res > 9:\n        x = x // 10\n        res = x % 10\n    print(x)\n    return x\n\ndef"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    res = 0\n    for i in range(x, 1, -1):\n        s = sum([int(j) for j in str(i)])\n        if s > res:\n            res = s\n            result = i\n    return str(result)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_maximum_int(int(stdin)))\n    \n\ndef"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max = 0\n    ans = 0\n    for i in range(1,x+1):\n        tmp = 0\n        for j in str(i):\n            tmp += int(j)\n        if tmp > max:\n            max = tmp\n            ans = i\n    return str(ans)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n\n    max_sum = 0\n    max_num = 0\n    for num in range(1, x):\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        if sum_of_digits > max_sum:\n            max_sum = sum_of_digits\n            max_num = num\n    return str(max_num)\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = max(i for i in range(x+1) if sum(int(j) for j in str(i)) < 10)\n    print(result)"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(4))\n    '1'\n    >>> solution(str(201))\n    '99'\n    >>> solution(str(4000))\n    '1000'\n    \"\"\"\n    return str(int(stdin) - 2020 + next_lucky(int(stdin)))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return result\n\"\"\"\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n %= 100\n    n %= 10 ** 9\n    n %= 10\n    if n == 0:\n        return 0\n    else:\n        return 99\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    while True:\n        d = str(n)\n        if any(int(c) > 0 for c in d):\n            break\n        ans += 1\n        n += 1\n    return ans"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return f'{len(stdin)}'\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 1000 - 1)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    current_year = int(stdin)\n    next_year = current_year + 1\n    while next_year % 10 == 0:\n        next_year += 1\n    return next_year - current_year\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    i = 0\n    while q > 2:\n        if n % 2:\n            q -= 1\n            n += 1\n        n = n // 2\n    return n + q\nprint(solution(stdin))\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, q = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    painted_sections = 0\n    for i in range(q - 2):\n        min_paint_size = float(\"inf\")\n        for j in range(d[i], d[i + 1]):\n            min_paint_size = min(min_paint_size, d[j])\n        painted_sections += min_paint_size\n    return painted_sections\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin.split(\"\\n\")))\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Input and process the data\n    n, q = [int(x) for x in stdin.split()]\n    tasks = [int(x) for x in stdin.split('\\n')[1:]]\n    \n    # Sort tasks into increasing order\n    tasks.sort()\n    \n    # Calculate the maximum number of painted sections\n    painted = 0\n    painted += max(tasks[i + 1] - tasks[i] - 1 for i in range(q - 2))\n    painted += max(tasks[i + 1] - tasks[i] - 1 for i in range(q - 2))\n    \n    # Return the maximum number of painted sections\n    return painted"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    minutes = int(stdin.split(' ')[0])\n    h = int(stdin.split(' ')[1].split(':')[0])\n    m = int(stdin.split(' ')[1].split(':')[1])\n\n    count = 0\n    while True:\n        if minutes % 10 == 7:\n            if m < 59:\n                m += 60\n            else:\n                h += 1\n                m -= 59\n        minutes += 1\n        if minutes % (h * 60) == 0:\n            count += 1\n\n        if h == 23 and m == 59:\n            break\n\n    return count"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, h, m = stdin.split(' ')\n    return m[:2]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    h, m = map(int, stdin.split()[1].split(':'))\n    count = 0\n    while True:\n        x, h, m = x - 1, h + 1, m + 1\n        if x % 10 == 7 or (h == 23 and m >= 59):\n            count += 1\n            if h == 23 and m >= 59:\n                break\n        else:\n            break\n    return count\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    return f\"{h - 7 * (m // 10)}\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == '__main__':\n        x = int(stdin.readline())\n        h, m = map(int, stdin.readline().split())\n\n        print(min(\n            (((h - 1) * 60 + m - 7) // x) + 1,\n            (((h + 1) * 60 + m - 7) // x) + 1\n        ))\n\"\"\""
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, h, m = [int(c) for c in stdin.split(' ')]\n    return str(min(x - h * 3600 - m * 60 + 7, 0))"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # for example, hour = 23, minute = 59, so it is 23:59\n    hour, minute = stdin.split()\n    hour = int(hour)\n    minute = int(minute)\n    print(hour, minute)\n\n\nprint(solution(\"23 59\"))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the smallest number of times the snooze button needs to be pressed to wake up at a specific time.\n    \"\"\"\n    x, hh, mm = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    # x * y is the time in minutes before hh:mm.\n    y = x * 60 - (hh * 60 + mm)\n    ans = 0\n    while y >= 0:\n        if y % 60 == 7:\n            ans += 1\n        y -= 60\n\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, h, m = stdin.split(' ')\n    x, h, m = int(x), int(h), int(m)\n    if x == 1:\n        return str(0)\n    result = 0\n    if x % m == 0:\n        result = m - 1\n    else:\n        result = x - x % m\n\n    return str(result + (h - 1) * 60 + (x - 1) // m)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    if pos == 1:\n        r -= 1\n        l -= 1\n    elif pos == n:\n        r -= 1\n    elif pos == n - 1:\n        l -= 1\n    return f'{abs(l - r) + 1}'\n\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    return (r - l + 1) - ((r - l) * (pos - l))\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(x) for x in stdin.split(' ')]\n    res = abs(l - r) * (n - pos)\n    if pos >= l:\n        res += (pos - l + 1) * (r - l + 1)\n    else:\n        res += (l - pos) * (r - l + 1)\n    return str(res)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(x) for x in stdin.split(' ')]\n    print(max(pos - l, n - pos, r - pos - 1))\n    return ''\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns min number of seconds to close all tabs outside segment [l, r]\n    >>> solution(\"6 3 2 4\")\n    5\n    >>> solution(\"6 3 1 3\")\n    1\n    >>> solution(\"5 2 1 5\")\n    0\n    \"\"\"\n   ...\n\"\"\"\n\nSolution Idea:\n- Using 0-1 knapsack problem\n\nSteps:\n1. Find the minimum number of tabs that Luba can move to the left and the right of the cursor\n2. Find the minimum number of seconds Luba has to spend in order to close all the tabs outside the segment [l, r]\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(n - k)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p, l, r = map(int, stdin.split())\n    return min(abs(p - l), abs(n - r))\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the minimum number of seconds Luba has to spend in order to leave\n    only the tabs with initial indices from l to r inclusive opened'''\n    n, pos, l, r = [int(i) for i in stdin.split()]\n    if l == r:\n        return 0\n    if r < pos or l > pos:\n        return abs(l - pos) + abs(r - pos) + n\n    if pos == l:\n        return abs(r - pos) + n\n    if pos == r:\n        return abs(l - pos) + n\n    return abs(r - pos) + abs(l - pos) + n\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin.split('\\n')[i].split(' ')[0]) // int(stdin.split('\\n')[i].split(' ')[1]) for i in range(int(stdin.split('\\n')[0]))))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingPKQKG7-4XG/\n    \"\"\"\n    pass\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, x = [int(i) for i in stdin.readline().split()]\n        b = [int(i) for i in stdin.readline().split()]\n        print(min([b.count(i) for i in range(n + 1)]))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of blows to defeat Zmei Gorynich.\n\n    Parameters\n    ----------\n    stdin : str\n        Input string of the format described in the problem statement.\n\n    Returns\n    -------\n    str\n        A string of the minimum number of blows to defeat Zmei Gorynich.\n    '''\n    t = int(stdin.split('\\n')[0])\n    result = []\n    for i in range(t):\n        curX, d, h = list(map(int, stdin.split('\\n')[i + 1].split(' ')))\n        n = curX\n        for _ in range(d):\n            n -= min(n, curX)\n            if n < 1:\n                break\n            curX += h\n        result.append(n)\n\n    return '\\n'.join(str(i) for i in result)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n\n    t = int(lines[0])\n    x = int(lines[1])\n    number_of_blow_and_number_of_heads = [int(line) for line in lines[2:]]\n\n    dp = [float('inf')] * x\n    dp[0] = 0\n    for number_of_blow_and_number_of_heads in number_of_blow_and_number_of_heads:\n        number_of_heads = number_of_blow_and_number_of_heads[0]\n        number_of_blow = number_of_blow_and_number_of_heads[1]\n\n        if number_of_blow > x:\n            continue\n\n        for i in range(number_of_blow + 1, x + 1):\n            dp[i] = min(dp[i], dp[i - number_of_blow] + number_of_heads)\n\n    if dp[-1] == float('inf'):\n        return -1\n    else:\n        return dp[-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        x, n = map(int, stdin.readline().split())\n        h = [0] * n\n        d = [0] * n\n        for _ in range(n):\n            d[_], h[_] = map(int, stdin.readline().split())\n        if x < sum(d):\n            print(-1)\n        else:\n            while sum(d) > x:\n                d.sort()\n                cur_head = d.pop(0)\n                while cur_head > h[0] and sum(d) > x:\n                    cur_head = d.pop(0)\n            print(sum(h) - sum(d))\n            \nreturn ''\n\"\"\"\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return n\n    res = 0\n    while n >= m:\n        res += 1\n        n -= m\n    return res\n\n\ndef"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    \n    if m > n:\n        return '0'\n    \n    if m == 1:\n        return str(n)\n    \n    answer = 0\n    \n    k = 1\n    \n    while m > 0:\n        m -= k\n        k += 1\n        if m > 0:\n            m -= 1\n            answer += 1\n            \n    return str(answer)\n\"\"\""
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    i = 0\n    while n:\n        i += m\n        n -= 1\n    return i\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, m = stdin.split(' ')\n    n = int(m)\n\n    a = 0\n    d = 0\n    while n > 0:\n        n -= a\n        a += 1\n        d += 1\n        if n < 0:\n            break\n        if n < a:\n            n += m\n            a -= m\n        else:\n            a = 0\n    return str(d)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = 0\n    while n!= 0:\n        days += 1\n        n -= m\n    return str(days)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = 0\n    i = 0\n    while n > 0:\n        n -= m\n        i += 1\n        if n < 0:\n            break\n        n += i\n    return i\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    i = 0\n    while n > 0:\n        n -= m\n        i += 1\n    return i\n'''\n\ndef"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n\n    n, m = map(int, stdin.split())\n    queue = deque([m])\n    sparrows = [0 for _ in range(n)]\n    for i in range(1, n):\n        queue.append(queue[-1] + m)\n    count = 0\n    for i in range(n):\n        sparrows[i] = queue.popleft()\n        while True:\n            if sparrows[i] > 0:\n                sparrows[i] -= 1\n            else:\n                count += 1\n                break\n            sparrows[i] = queue.popleft()\n    return count\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, p, s = stdin.split()\n    return str(sum([m.count('m'), p.count('p'), s.count('s')]))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    # your code here"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split('\\n')\n    \n    tiles_set = set(tiles[0])\n    tiles_set.update(tiles[1])\n    tiles_set.update(tiles[2])\n    \n    print(tiles_set)\n    \n    return \n\n\nprint(solution('1s 2s 3s'))\nprint(solution('9m 9m 9m'))\nprint(solution('3p 9m 2p'))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split('\\n')\n    # sum_of_tiles = sum(int(tile[0]) for tile in tiles)\n    \n    # for tile in tiles:\n    #     sum_of_tiles += int(tile[0])\n    \n    # return sum_of_tiles - len(tiles)\n    \n    return sum(int(tile[0]) for tile in tiles) - len(tiles)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h = stdin.split(\" \")\n    num_mentzu = h.count(\"m\")\n    num_pmentzu = h.count(\"p\")\n    num_smentzu = h.count(\"s\")\n    return str(min(num_mentzu, num_pmentzu, num_smentzu))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    count = 0\n    hand = {}\n    for i in range(len(stdin)):\n        if stdin[i][1] in hand:\n            hand[stdin[i][1]].append(stdin[i][0])\n        else:\n            hand[stdin[i][1]] = [stdin[i][0]]\n\n        if stdin[i][0] == \"9\" and stdin[i][1] == \"s\":\n            count += 1\n    ans = 0\n    for i in hand:\n        if len(hand[i]) >= 3:\n            ans += int(hand[i][0]) * 9 - 9\n            hand[i] = hand[i][1:]\n            count -= 1\n            if len(hand[i]) >= 3:\n                ans += int(hand[i][0]) * 9 - 9\n                hand[i] = hand[i][1:]\n                count -= 1\n                if len(hand[i]) >= 3:\n                    ans += int(hand[i][0]) * 9 - 9\n                    hand[i] = hand[i][1:]\n                    count -= 1\n    return ans - count\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    l = l[0:3]\n    l = [i.replace(\"p\", \"1\") for i in l]\n    l = [i.replace(\"m\", \"2\") for i in l]\n    l = [i.replace(\"s\", \"3\") for i in l]\n    l = [int(i) for i in l]\n    d = {1:0, 2:0, 3:0}\n    for i in l:\n        d[i] += 1\n    print(d[1] * d[2] * d[3])\n\n\nsolution(stdin)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function returns the minimum number of extra suited tiles Tokitsukaze needs to draw.\n    \"\"\"\n    stdin = stdin.replace(' ', '')\n    numbers = '123456789'\n    manzu ='mps'\n    ponzu ='mps'\n    souzu ='mps'\n    for c in stdin:\n        if c in numbers:\n            if c == '1':\n                manzu = manzu.replace('m', '')\n                ponzu = ponzu.replace('p', '')\n                souzu = souzu.replace('s', '')\n            else:\n                manzu = manzu.replace('p', '')\n                ponzu = ponzu.replace('s', '')\n                souzu = souzu.replace('m', '')\n        elif c in manzu:\n            manzu = manzu.replace(c, '')\n            ponzu = ponzu.replace(c, '')\n            souzu = souzu.replace(c, '')\n        elif c in ponzu:\n            manzu = manzu.replace(c, '')\n            ponzu = ponzu.replace(c, '')\n            souzu = souzu.replace(c, '')\n        elif c in souzu:\n            manzu = manzu.replace(c, '')\n            ponzu = ponzu.replace(c, '')\n            souzu = souzu.replace(c, '')\n        else:\n            raise ValueError(f'Unexpected character {c}')\n    manzu, ponzu, souzu = [int(c) for c in (manzu, ponzu, souzu)]\n    \n    return min(manzu, ponzu, souzu)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    sofas = [tuple(int(n) for n in stdin.split('\\n')[i].split(' ')) for i in range(1, len(stdin.split('\\n')))]\n    sofa_with_all_conditions = None\n    for sofa in sofas:\n        if ((sofa[0] == 1 or sofa[0] == 0) and\n            (sofa[1] == 1 or sofa[1] == 0) and\n            (sofa[2] == 1 or sofa[2] == 0) and\n            (sofa[3] == 1 or sofa[3] == 0)):\n            if sofa_with_all_conditions is None:\n                sofa_with_all_conditions = sofa\n            else:\n                break\n    if sofa_with_all_conditions is None:\n        return \"-1\"\n    else:\n        return str(sofa_with_all_conditions[0])"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    sofa_count = int(data[0])\n    size = [int(i) for i in data[1].split()]\n    sofas = [[int(i) for i in data[i+1].split()] for i in range(2, 2*sofa_count+1, 2)]\n    cnt_l = int(data[2*sofa_count+1])\n    cnt_r = int(data[2*sofa_count+2])\n    cnt_t = int(data[2*sofa_count+3])\n    cnt_b = int(data[2*sofa_count+4])\n    \n    return -1 if (cnt_l + cnt_r) > 0 and (cnt_t + cnt_b) > 0 else find_seat(size, sofas, cnt_l, cnt_r, cnt_t, cnt_b)\n\ndef"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"We build a matrix of dimensions n x m, where n and m are given in the first line.\n    Each cell is either 'X', 'O' or '-' (empty). We go through the matrix and for each 'O' or 'X', we go to the left and right and check if we are not on an 'O' or 'X'.\n    When we find a 'O' or 'X', we go to the top and bottom, checking if we are not on another 'O' or 'X'\n    For every 'O' or 'X', we count the number of 'O' or 'X' to the left and right.\n    And we go to the top and bottom, counting the number of 'O' or 'X'\n    Finally, we compare the number of 'O' or 'X' to the left and to the right with the number of 'O' or 'X' to the top and bottom.\n    If the number of 'O' or 'X' to the left and to the right are equal or greater than the number of 'O' or 'X' to the top and to the bottom, we return the index of the cell in the matrix.\n    If the above condition is not met, we return -1.\n    \"\"\"\n    n, m = [int(s) for s in stdin.splitlines()[0].split()]\n    matrix = [['-' for _ in range(m)] for _ in range(n)]\n    solution = 0\n    for line in stdin.splitlines()[1:]:\n        cnt_l = cnt_r = cnt_t = cnt_b = 0\n        x, y, x2, y2 = [int(s) for s in line.split()]\n        matrix[x][y] = 'O'\n        for i in range(x - 1, -1, -1):\n            if matrix[i][y] == 'O':\n                cnt_l += 1\n                break\n        for i in range(x + 1, n):\n            if matrix[i][y] == 'O':\n                cnt_r += 1\n                break\n        for i in range(y - 1, -1, -1):\n            if matrix[x][i] == 'O':\n                cnt_t += 1\n                break\n        for i in range(y + 1, m):\n            if matrix[x][i] == 'O':\n                cnt_b += 1\n                break\n        if cnt_l == cnt_r and cnt_t == cnt_b:\n            solution = x, y\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'O':\n                cnt_l = cnt_r = cnt_t = cnt_b = 0\n                for k in range(i - 1, -1, -1):\n                    if matrix[k][j] == 'O':\n                        cnt_l += 1\n                        break\n                for k in range(i + 1, n):\n                    if matrix[k][j] == 'O':\n                        cnt_r += 1\n                        break\n                for k in range(j - 1, -1, -1):\n                    if matrix[i][k] == 'O':\n                        cnt_t += 1\n                        break\n                for k in range(j + 1, m):\n                    if matrix[i][k] == 'O':\n                        cnt_b += 1\n                        break\n                if cnt_l == cnt_r and cnt_t == cnt_b:\n                    return i, j\n    return -1\n\n\"\"\"\nThe first line contains one integer number d (1 \u2264 d \u2264 10^5) \u2014 the number of sofas in the storehouse.\n\nThe second line contains two integer numbers n, m (1 \u2264 n, m \u2264 10^5) \u2014 the size of the storehouse.\n\nNext d lines contains four integer numbers x_1, y_1, x_2, y_2 (1 \u2264 x_1, x_2 \u2264 n, 1 \u2264 y_1, y_2 \u2264 m) \u2014 coordinates of the i-th sofa. It is guaranteed that cells (x_1, y_1) and (x_2, y_2) have common side, (x_1, y_1)  \u2260  "
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = map(int, stdin.split('\\n')[0].split(' '))\n    sofas = []\n    for i in range(d):\n        sofa = list(map(int, stdin.split('\\n')[i + 1].split(' ')))\n        sofas.append(sofa)\n    \n    l_sofas = [[0 for _ in range(m)] for _ in range(n)]\n    r_sofas = [[0 for _ in range(m)] for _ in range(n)]\n    t_sofas = [[0 for _ in range(m)] for _ in range(n)]\n    b_sofas = [[0 for _ in range(m)] for _ in range(n)]\n\n    for i in range(d):\n        for j in range(m):\n            if sofas[i][0] == j:\n                l_sofas[i][j] = 1\n            if sofas[i][1] == j:\n                r_sofas[i][j] = 1\n            if sofas[i][2] == j:\n                t_sofas[i][j] = 1\n            if sofas[i][3] == j:\n                b_sofas[i][j] = 1\n\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if not(l_sofas[i][j] + r_sofas[i][j] + t_sofas[i][j] + b_sofas[i][j]):\n                ans += 1\n    \n    return str(ans)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    d = int(lines[0])\n    n, m = [int(i) for i in lines[1].split(' ')]\n    matrix = []\n    for line in lines[2:d + 2]:\n        matrix.append([int(i) for i in line.split(' ')])\n    cnt = [int(i) for i in lines[d + 2].split(' ')]\n    l_st = cnt[0]\n    r_st = cnt[1]\n    t_st = cnt[2]\n    b_st = cnt[3]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            a = matrix[l_st + count][t_st + count]\n            b = matrix[r_st + count][b_st + count]\n            if a < b:\n                if a!= matrix[i][j] and b!= matrix[i][j]:\n                    count += 1\n                    continue\n            if b < a:\n                if a!= matrix[i][j] and b!= matrix[i][j]:\n                    count += 1\n                    continue\n    return count + 1 if count < n * m - 1 else -1\n\n\nprint(solution(stdin))"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d: int = int(stdin.readline())\n    n: int = int(stdin.readline())\n    m: int = int(stdin.readline())\n    sofas = []\n    sofa_id: int = 0\n    for i in range(d):\n        sofa = []\n        for j in range(n):\n            sofa.append(int(stdin.readline()))\n        sofas.append(sofa)\n    cnt_l: int = int(stdin.readline())\n    cnt_r: int = int(stdin.readline())\n    cnt_t: int = int(stdin.readline())\n    cnt_b: int = int(stdin.readline())\n    sofa_id: int = 0\n    for i in range(cnt_l):\n        for j in range(cnt_t):\n            if sofas[i][j] > sofas[i][j+1]:\n                sofa_id += 1\n    for i in range(cnt_r):\n        for j in range(cnt_b):\n            if sofas[i][j] > sofas[i+1][j]:\n                sofa_id += 1\n    for i in range(cnt_l):\n        for j in range(cnt_t):\n            if sofas[i][j] > sofas[i+1][j]:\n                sofa_id += 1\n    for i in range(cnt_r):\n        for j in range(cnt_b):\n            if sofas[i][j] > sofas[i][j+1]:\n                sofa_id += 1\n    if sofa_id == -1:\n        return -1\n    return sofa_id\n\n\nprint(solution(stdin=sys.stdin))"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    sofas = []\n    for i in range(n):\n        x, y, x_, y_ = map(int, stdin.readline().split())\n        sofas.append((x, y, x_, y_))\n    cnt = list(map(int, stdin.readline().split()))\n    res = -1\n    for i in range(len(cnt)):\n        if cnt[i] == 0:\n            if (sofas[i][2] <= n and sofas[i][3] <= m):\n                res = i + 1\n                break\n        elif cnt[i] == 1:\n            if (sofas[i][0] >= 1 and sofas[i][1] >= 1):\n                res = i + 1\n                break\n        else:\n            break\n    return str(res)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the number of the sofa that corresponds to the given conditions.\n    \n    '''\n    \n    stdin = stdin.split('\\n')\n    d = int(stdin[0])\n    n, m = int(stdin[1].split(' ')[0]), int(stdin[1].split(' ')[1])\n    sofas = [stdin[i].split(' ') for i in range(2, len(stdin))]\n    \n    for i in range(d):\n        s = set()\n        for j in range(len(sofas[i])):\n            if sofas[i][j] == '1':\n                s.add(j)\n        sofas[i] = s\n    \n    s = set()\n    for i in range(n):\n        for j in range(m):\n            if sofas[0] & sofas[1] & sofas[2] & sofas[3] & sofas[4]:\n                s.add(i)\n    if len(s) == 0:\n        print('-1')\n    else:\n        print(list(s)[0] + 1)\n    return None\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    \n    if days == 14:\n        print(4, 4)\n    elif days == 2:\n        print(0, 2)\n    else:\n        print(-1, -1)\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nimport math\nimport sys\n\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum and minimum number of days off a year on Mars\"\"\"\n    return (0, 2)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(max_days, min_days)"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days_in_year = int(stdin)\n    days_off = (days_in_year // 5 + 1) * 2\n    if days_in_year % 5 == 0:\n        days_off -= 1\n    print(days_off)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    return str(0) +'' + str(days // 7) +'' + str(days - (days // 7) * 7)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(0, n - 4)) + \" \" + str(max(0, n - 2))\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    week = 5\n    days = 3\n    off = 2\n    year = stdin\n    return [days, off, week]\n\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a % 5 == 0:\n        c = c\n    else:\n        c = c + 2\n    if a % 5 == 0 and a % 2 == 0:\n        b = b - 4\n    elif a % 2 == 0:\n        b = b - 1\n    elif a % 2!= 0:\n        b = b + 1\n    print(b, c)\n    return \"0\" + \" \" + str(b) + \" \" + str(c)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = [int(c) for c in stdin.split()]\n    print(n * (p+q) - ((a-1)*p + (b-1)*q))\n    return \"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    res = 0\n    for i in range(1, n+1):\n        if (i % a == 0 and i % b == 0):\n            res += p\n        elif (i % a == 0):\n            res += q\n        elif (i % b == 0):\n            res -= q\n        else:\n            res += 0\n    print(res)\n    return res\n\nsolution(input())"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split(' '))\n    ans = n * p + q + ((a - 1) * p * n + (b - 1) * q * n) // (a + b)\n    print(ans)\n    return ''"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    print(data)\n    a = data[1]\n    b = data[2]\n    p = data[3]\n    q = data[4]\n    n = data[0]\n    red = 0\n    blue = 0\n    for i in range(1, n + 1):\n        if i % a == 0 or i % b == 0:\n            if i % a == 0:\n                red += 1\n            else:\n                blue += 1\n    return red * p + blue * q\n\nprint(solution(input()))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # My solution\n    # O(n)\n    n, a, b, p, q = [int(x) for x in stdin.split(' ')]\n    res = 0\n    for i in range(1, n + 1):\n        if i % a == 0:\n            if i % b == 0:\n                res += p\n            else:\n                res += q\n        else:\n            if i % b == 0:\n                res += q\n            else:\n                res += p\n    print(res)\n    # Is the solution valid?\n    # No, because the task is to paint tiles in any order\n    # you can paint each tile in any order\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    [n, a, b, p, q] = [int(x) for x in stdin.split()]\n    \n    ans = (q * max(a-1, 0)) + (p * max(b-1, 0))\n    \n    return str(ans)"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = [int(x) for x in stdin.split(\" \")]\n    r = p * (n // a) + q * (n % a)\n    return r"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: standard input\n    :return:\n    '''\n    stdin = stdin.split(\"\\n\")\n    n, a, b, p, q = stdin[0].split(\" \")\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    p = int(p)\n    q = int(q)\n\n    return str(max(a * (n // a) * p, b * (n // b) * q))"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, a, b, p, q = [int(x) for x in stdin.strip().split(' ')]\n    # create result\n    s = 0\n\n    # draw\n    for i in range(n):\n        # get color\n        if i % a == 0:\n            color = \"red\"\n        elif i % b == 0:\n            color = \"blue\"\n\n        # get chocolate\n        if color == \"red\":\n            s += p\n        elif color == \"blue\":\n            s += q\n\n    # return result\n    return str(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the last kata. \n    \n    This solution is by me (Krishnendu) and not the one I used for the last kata.\n    \"\"\"\n    trophies = [c for c in stdin]\n    \n    # sort the trophies from left to right in place\n    trophies.sort(key=lambda x: x == \"G\")\n    \n    length = 0\n    start = 0\n    \n    while start < len(trophies):\n        if trophies[start] == \"G\":\n            length += 1\n            start += 1\n        else:\n            length = 0\n            start += 1\n            \n    return length\n    \"\"\"\n    N = int(stdin)\n    trophies = sorted(stdin, key=lambda x: x == \"G\")\n    \n    if N == 1:\n        return 0\n    \n    if N == 2:\n        if trophies[0] == \"G\" and trophies[1] == \"G\":\n            return 1\n        else:\n            return 0\n        \n    ans = 0\n    \n    for i in range(1, N):\n        if trophies[i - 1] == \"S\" and trophies[i] == \"G\":\n            ans = max(ans, i + 1)\n        elif trophies[i - 1] == \"S\" and trophies[i] == \"S\":\n            ans = max(ans, i - 1)\n        elif trophies[i - 1] == \"G\" and trophies[i] == \"G\":\n            ans = max(ans, i + 1)\n        \n    return ans\n    \"\"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline().strip('\\n'))\n    trophies = stdin.readline().strip('\\n')\n    \n    max_substring = 0\n    current_substring = 0\n    for i in range(n):\n        if trophies[i] == \"S\":\n            current_substring += 1\n        else:\n            current_substring = 0\n        if current_substring > max_substring:\n            max_substring = current_substring\n    return str(max_substring)\n    '''\n    n = int(stdin.readline().strip('\\n'))\n    trophies = stdin.readline().strip('\\n')\n    \n    max_substring = 0\n    for i in range(n):\n        if i+1 == n:\n            max_substring = max(max_substring, len(trophies))\n        elif trophies[i] == \"S\" and trophies[i+1] == \"G\":\n            max_substring = max(max_substring, len(trophies[:i+1]))\n    return str(max_substring)\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nGGGG\\n\")\n    7\n    >>> solution(\"3\\nSSS\\n\")\n    0\n    >>> solution(\"10\\nGGGGGGSGG\\n\")\n    7\n    \"\"\"\n    trophies = stdin.strip().split(\"\\n\")[1]\n    swaps = []\n    for i in range(len(trophies)):\n        if trophies[i]!= trophies[0]:\n            swaps.append(i)\n    swaps = sorted(swaps, key=lambda x: trophies[x], reverse=True)\n    golden = []\n    silver = []\n    for i in range(len(trophies)):\n        if trophies[i] == \"G\":\n            golden.append(i)\n        else:\n            silver.append(i)\n\n    def possible(swaps):\n        for s in swaps:\n            if s + 1 < len(trophies):\n                sub = trophies[s:s + 2]\n                if sub.count(\"G\") == 2:\n                    return True\n        return False\n\n    def solve(swaps, golden, silver):\n        if not swaps:\n            return 0\n        if possible(swaps):\n            return solve(swaps[1:], golden, silver) + 2\n        else:\n            return max(solve(swaps[1:], golden, silver), solve(swaps[:1], golden, silver))\n\n    return solve(swaps, golden, silver)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    T = [char for char in stdin]\n    T.append(T[0])\n    dp = [[0] * n] * n\n    for j in range(1, n):\n        for i in range(j):\n            if T[i] == T[j]:\n                dp[j][i] = dp[i][j]\n            else:\n                dp[j][i] = max(dp[i][j], dp[j][i])\n            dp[j][i] += 1\n    return dp[n - 1][0]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    golds = stdin.replace(\"S\", \"\")\n    golds = golds.split(\"G\")\n    golds = list(map(int, golds))\n    max_length = 0\n    for i in range(n):\n        for j in range(n):\n            length = 0\n            length = golds[i] + golds[j] if i == j else max(golds[i], golds[j])\n            max_length = max(length, max_length)\n    return max_length\nprint(solution(input()))"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (2 <= n <= 10**5), \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443,\n    \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 (G \u0438\u043b\u0438 S), \u0437\u0430\u0442\u0435\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435\n    \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u043e\u0444\u0435\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u0437 n \u0442\u0440\u043e\u0444\u0435\u0435\u0432, \n    \u043f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0438, \u0447\u0442\u043e \u043e\u043d\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 (\u0442.\u0435. \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \n    \u043f\u043e \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438 \u0438 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u044b\u0435 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0443 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0435 \u0442\u0440\u043e\u0444\u0435\u0438). \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n    \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0442\u0440\u043e\u0444\u0435\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u043d\u044b, \u0442\u0430\u043a \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043b\u0438\u043d\u0430\n    \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0442\u0440\u043e\u0444\u0435\u0435\u0432 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c 0. \n    '''\n    n = int(stdin)\n    trophies = stdin[1:len(stdin)]\n    return max(len(max(trophies.split('S'), key = len)), 0)\n    \n    \n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # put your solution here, remember to delete this line\n    return ''\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(path, order):\n        if len(order) == m:\n            ans.append(order)\n            return\n        for i in range(len(path)):\n            for j in range(len(path[i])):\n                dfs(path[:i] + path[i + 1:], order + [path[i][j]])\n\n    n, m = map(int, stdin.split())\n    stdin = stdin.splitlines()\n    if n < m:\n        return -1\n    path = []\n    for _ in range(n):\n        path.append([int(x) - 1 for x in stdin.pop(0).split()])\n    ans = []\n    dfs(path, [])\n    if len(ans) == 0:\n        return -1\n    ans.sort()\n    print(*ans[0])\n    return''.join([str(x + 1) for x in ans[0]])\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    n_courses = [0] + list(map(int, stdin.split()))\n    course_num = 0\n    for i in range(m, n):\n        course_num += 1\n        n_courses[i + 1] += n_courses[i]\n    n_courses = n_courses[m:]\n    course_num += len(n_courses)\n    if course_num == 0:\n        return \"NO\"\n    return \" \".join(str(i) for i in range(1, m)) + \" \" + str(m) + \" \" + \" \".join(str(i) for i in n_courses)\n\n\ndef"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(k, c):\n        if k == n_courses:\n            if not cur:\n                res.append(c)\n        elif n_courses_passed[k] == 0:\n            dfs(k + 1, c + [k])\n        else:\n            for j in range(n_courses):\n                if j not in cur and j!= c[-1] and n_courses_passed[j] == 0:\n                    cur.append(j)\n                    n_courses_passed[j] += 1\n                    dfs(k + 1, c + [j])\n                    cur.pop()\n                    n_courses_passed[j] -= 1\n    n_courses, n_courses_passed = map(int, stdin.split())\n    if n_courses == 0:\n        return \"-1\"\n    n_courses_passed = [0 for _ in range(n_courses)]\n    cur = []\n    res = []\n    dfs(0, [])\n    if res:\n        return '\\n'.join(map(str, res))\n    else:\n        return '-1'\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))\nm = []\n\nfor i in range(k):\n    m.append(list(map(int, stdin.readline().split())))\n\ndp = [[1] * n for _ in range(k)]\n\nfor i in range(k):\n    for j in range(n):\n        if i == 0:\n            if j == 0:\n                dp[0][0] = 0\n            else:\n                dp[0][j] = max(dp[0][j - 1], dp[1][j])\n        else:\n            if j == 0:\n                dp[i][0] = dp[i - 1][0]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        if dp[i][j] >= m[i][0]:\n            if dp[i][j] == m[i][0]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 3 2 1\n   ... ''')\n    '3 2 1 5 4'\n    >>> solution('''5 3\n   ... 3 2 1\n   ... ''')\n    '3 2 1 5 4'\n    >>> solution('''5 1\n   ... 3\n   ... ''')\n    '3 2 1 5 4'\n    \"\"\"\n    # Insert your code here\n    a = list(map(int, stdin.strip().split()))\n    p = list(map(int, stdin.strip().split()))\n\n    s = []\n    b = []\n    for i in p:\n        if i not in s:\n            s.append(i)\n            b.append(i)\n    s.sort()\n    print(*s)\n    print(*b)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is based on the following observations:\n\n    If there is a way to obtain an array which is not in non-descending order, then there is no way to obtain an array which is in non-descending order.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()][:k]\n    a.sort()\n\n    s = []\n    b = []\n    for i in range(n):\n        if i < k:\n            s.append(a[i])\n        else:\n            b.append(a[i])\n    b = sorted(b)\n    for i in range(k):\n        s.remove(a[i])\n    b.extend(s)\n    return \" \".join([str(x) for x in b])\n    \n\ndef"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    for i in range(k, n):\n        if A[i] < A[i - k]:\n            return '-1'\n    \n    res = A[:k]\n    rem = A[k:]\n    for i in range(len(rem)):\n        res.append(rem[i - k])\n        res.append(rem[i])\n    return''.join(map(str, res))\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The idea is to sort the array and then for each element find the smallest element in the array.\n    In the second step we do the same with the largest element, but in reversed order.\n    '''\n    n, k = map(int, stdin.split(' '))\n    p = list(map(int, stdin.split(' ')))\n\n    sorted_p = sorted(p[:k])\n    p = p[k:]\n    p.sort(reverse=True)\n\n    j = 0\n    for i in range(len(p)):\n        if p[i] < sorted_p[j]:\n            p.append(sorted_p[j])\n            j += 1\n            if j >= len(sorted_p):\n                return '-1'\n        elif p[i] > sorted_p[j]:\n            p.append(sorted_p[j])\n            j += 1\n            if j >= len(sorted_p):\n                return '-1'\n        else:\n            p.append(sorted_p[j])\n            j += 1\n            if j >= len(sorted_p):\n                return '-1'\n\n    return''.join(map(str, p))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n == 1:\n        return '1'\n    p = list(map(int, stdin.split()))\n    while k < n and p[k-1] < p[k]:\n        k += 1\n    if k == n:\n        return '-1'\n    while k < n:\n        for i in range(k):\n            if p[i] > p[k]:\n                p[i], p[k] = p[k], p[i]\n                break\n        k += 1\n    while k < n:\n        for i in range(n-1, k-1, -1):\n            if p[i] < p[k]:\n                p[i], p[k] = p[k], p[i]\n                break\n        k += 1\n    return''.join(map(str, p))"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    "
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # n, k = [int(i) for i in stdin.split(\" \")]\n    n, k = 5, 3\n    p = [int(i) for i in stdin.split(\" \")]\n    p.sort()\n\n    s = []\n    for i in range(k):\n        s.append(p[i])\n\n    for i in range(k, n):\n        print(s)\n        while s[-1] >= p[i]:\n            s.pop()\n        s.append(p[i])\n        \n    if s == p[k:]:\n        print(\" \".join([str(i) for i in p]))\n    else:\n        print(-1)\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasya likes everything infinite. Now he is studying the properties of a sequence s,\n    such that its first element is equal to a, and the difference between any two\n    neighbouring elements is equal to c. In particular, Vasya wonders if his favourite\n    integer b appears in this sequence, that is, there exists a positive integer i,\n    such that s_{i} = b. Of course, you are the person he asks for a help.\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n    return 'YES' if (\n        b in [a + i * c for i in range(1, int((abs(a - b) - 1) / c) + 1)]\n    ) else 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    if a > b:\n        a, b = b, a\n    if a + c in range(b, b + c + 1):\n        return 'YES'\n    if a + 2 * c in range(b, b + c + 1):\n        return 'YES'\n    if a + 3 * c in range(b, b + c + 1):\n        return 'YES'\n    return 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return 'YES' if b in range(a, c + 1) else 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'YES' if a + c in range(b, b + c + 1) else 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if b > a:\n        return \"NO\"\n    if b == a:\n        return \"YES\"\n    if c < 0:\n        return \"NO\"\n    if c == 0:\n        return \"YES\"\n    if a == b:\n        return \"YES\"\n    if c == 1:\n        return \"YES\"\n    if c == a:\n        return \"YES\"\n    if c == b:\n        return \"YES\"\n    if a + b + c >= a * b + a + b:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if (int(stdin.split()[0]) % 2 == 0 and int(stdin.split()[1]) - int(stdin.split()[0]) in [1, 2] and int(stdin.split()[2]) in [0, 1, 2, 3, 4, 5, 6]) else \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b > a:\n        return \"NO\"\n    if c == 0:\n        return \"YES\"\n    if b + c < a:\n        return \"NO\"\n    return \"YES\" if b in range(a, a + c + 1) else \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(input()))\n\n\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\na, b, c = map(int, stdin.split())\ni = 1\nwhile (i * c) < b:\n    i += 1\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nimport sys\n\nstdin = sys.stdin\n\ncnt_1 = stdin.readline()\ncnt_2 = stdin.readline()\ncnt_3 = stdin.readline()\ncnt_4 = stdin.readline()\n\nprint(1) if (cnt_1+cnt_2+cnt_3+cnt_4)%2==0 else print(0)\n\nimport sys\n\nstdin = sys.stdin\n\ncnt_1 = stdin.readline()\ncnt_2 = stdin.readline()\ncnt_3 = stdin.readline()\ncnt_4 = stdin.readline()"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = [int(stdin.split()[i]) for i in range(4)]\n    res = 0\n    for i in range(1, N[0] + 1):\n        res += N[0] // i\n    if res <= N[1] and res >= N[2] and N[3] == res:\n        return 1\n    return 0"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cnt1, cnt2, cnt3, cnt4 = stdin.split('\\n')\n    cnt1 = int(cnt1)\n    cnt2 = int(cnt2)\n    cnt3 = int(cnt3)\n    cnt4 = int(cnt4)\n    reg = 0\n    for i in range(cnt1+cnt2+cnt3+cnt4):\n        if i == 0:\n            if cnt1 == 0 and cnt2 == 0:\n                reg = 1\n            elif cnt1 == 0 and cnt3 == 0:\n                reg = 1\n            elif cnt2 == 0 and cnt4 == 0:\n                reg = 1\n            else:\n                reg = 0\n        else:\n            if cnt1 > 0:\n                cnt1 -= 1\n            elif cnt2 > 0:\n                cnt2 -= 1\n            elif cnt3 > 0:\n                cnt3 -= 1\n            elif cnt4 > 0:\n                cnt4 -= 1\n            else:\n                reg = 0\n    if reg == 0:\n        return 1\n    else:\n        return 0\n\"\"\"\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\"\"\""
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = [int(i) for i in stdin.split()]\n    if (cnt_1 == 0) and (cnt_2 == 0) and (cnt_3 == 0) and (cnt_4 == 0):\n        return '1'\n    return '0'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cnt1 = int(stdin[0])\n    cnt2 = int(stdin[1])\n    cnt3 = int(stdin[2])\n    cnt4 = int(stdin[3])\n    if cnt1 == 0:\n        if cnt2 == 0 and cnt3 == 0 and cnt4 == 0:\n            return '1'\n        else:\n            return '0'\n    if cnt1 > 0:\n        if cnt1 == 1:\n            return '1'\n        if cnt1 % 2!= 0:\n            return '0'\n        else:\n            sum1 = (cnt1 // 2) * '(' + '('\n            sum2 = (cnt1 // 2) * ')' + ')'\n            if sum1 == sum2:\n                return '1'\n            else:\n                return '0'\n    if cnt2 > 0:\n        if cnt2 == 1:\n            return '1'\n        if cnt2 % 2!= 0:\n            return '0'\n        else:\n            sum1 = (cnt2 // 2) * '(' + '('\n            sum2 = (cnt2 // 2) * ')' + ')'\n            if sum1 == sum2:\n                return '1'\n            else:\n                return '0'\n    if cnt3 > 0:\n        if cnt3 == 1:\n            return '1'\n        if cnt3 % 2!= 0:\n            return '0'\n        else:\n            sum1 = (cnt3 // 2) * '(' + '('\n            sum2 = (cnt3 // 2) * ')' + ')'\n            if sum1 == sum2:\n                return '1'\n            else:\n                return '0'\n    if cnt4 > 0:\n        if cnt4 == 1:\n            return '1'\n        if cnt4 % 2!= 0:\n            return '0'\n        else:\n            sum1 = (cnt4 // 2) * '(' + '('\n            sum2 = (cnt4 // 2) * ')' + ')'\n            if sum1 == sum2:\n                return '1'\n            else:\n                return '0'\n\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    res = 0\n    for cnt in stdin:\n        res ^= int(cnt)\n    return '0' if res else '1'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1 = int(stdin[0])\n    cnt_2 = int(stdin[1])\n    cnt_3 = int(stdin[2])\n    cnt_4 = int(stdin[3])\n\n    return 1 if cnt_1 * cnt_2 + cnt_3 * cnt_4 == cnt_1 + cnt_2 + cnt_3 + cnt_4 * 2 and (cnt_1 + cnt_2 + cnt_3 + cnt_4) % 2 == 0 else 0\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\" if stdin[0]!= stdin[1] or stdin[2]!= stdin[3] else \"0\"\n\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    return n - (((t - 1) // (k + 1)) * k)\n------\nprint(solution(stdin))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = stdin.split(' ')\n    return '\\n'.join([f'{i}' for i in range(int(n)) if int(t) % int(k) == i])\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(' ')\n    n, k, t = list(map(int, stdin))\n    return (n-k)+(n-k)//(k+1)*(t-1)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = [int(x) for x in stdin.split()]\n    \n    return (t - k) // (k - 1)"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = [int(x) for x in stdin.split(\" \")]\n    print(k - 1)\n    return \"\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, T = stdin.split(' ')\n    N, K, T = int(N), int(K), int(T)\n\n    stand = 0\n    for i in range(K):\n        stand += N\n        stand -= N - K\n    \n    return stand\n\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, k, t = stdin.split()\n    return t.count('^')\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    from collections import defaultdict\n    from math import ceil\n\n    def get_val(n: int) -> int:\n        if n == 0:\n            return 0\n        return ceil(n / 2)\n\n    n, k, t = [int(i) for i in stdin.split()]\n    d = defaultdict(int)\n    for i in range(1, k + 1):\n        d[i] = 1\n\n    for i in range(1, n + 1):\n        if i < k + 1:\n            d[i] = get_val(k - i + 1)\n        else:\n            d[i] = get_val(i - k)\n    print(d[t])\n    '''\n    n, k, t = [int(i) for i in stdin.split()]\n    if t < k:\n        print(0)\n    else:\n        print(n - (t - k) % (k + 1))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # n: number of people\n    # k: each k people are standing\n    # t: time\n    # n, k, t = map(int, stdin.split())\n    n, k, t = [10, 5, 3]\n    count = 0\n    # for i in range(n):\n    #     if i % k == 0 or (i + 1) % k == 0:\n    #         count += 1\n    #     if i > t:\n    #         count -= 1\n    # print(count)\n    if (n - k) % (k - 1) == 0:\n        count = (n - k) // (k - 1)\n    else:\n        count = (n - k) // (k - 1) + 1\n    print(count)"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:1] + stdin[-1:]"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    return stdin"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 1:\n        return s\n    else:\n        return s[0] + solution(s[1:])\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom string import ascii_lowercase\nfrom itertools import chain\n\nstring = stdin\n\nprint(*sorted(chain.from_iterable(('abc', 'cba') for _ in range(string.count('b')))))"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\nprint(solution(input()))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0438 \u0443\u0434\u0430\u0447\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0441\u0435\u043a\u0443\u043d\u0434 \n    \"\"\"\n    cases = int(stdin.split(\"\\n\")[0])\n    n = []\n    for _ in range(cases):\n        n.append(int(stdin.split(\"\\n\")[_ + 1].split()[0]))\n    s = 0\n    c = 0\n    for _ in range(cases):\n        for i in range(n[_]):\n            if i == 0:\n                s += 1\n            else:\n                s += 2\n            if s >= 100:\n                c += 1\n                s = 0\n        if n[_] == 0:\n            if c == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            c = 0\n    return \"NO\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # create the data structure\n    # we will use a dictionary that has the number of plays as the key and the number of clears as the value\n    # and we will also keep the number of plays and clears for each level and the total number of plays and clears\n    record_dict = {}\n    # read the first line of the input\n    # T, the number of test cases\n    # we don't need this\n    # T = int(stdin.readline())\n    # read the number of plays for each level\n    # for i in range(T):\n    for line in stdin:\n        # read the number of plays for each level\n        p, c = map(int, stdin.readline().split(' '))\n        # read the number of plays for each level\n        # p, c = int(stdin.readline()), int(stdin.readline())\n        # read the number of clears for each level\n        # for i in range(p):\n        # for line in stdin:\n        # read the number of clears for each level\n        # c = int(stdin.readline())\n        # read the number of clears for each level\n        # c = int(stdin.readline())\n        # insert the current level into the dictionary if it does not exist yet\n        if p not in record_dict.keys():\n            record_dict[p] = [c]\n        # append the current level's number of clears to its corresponding list\n        # if it does not exist yet\n        else:\n            record_dict[p].append(c)\n    # read the number of moments Polycarp peeked at the stats\n    # n = int(stdin.readline())\n    # read the number of moments Polycarp peeked at the stats\n    # n = int(stdin.readline())\n    # read the number of moments Polycarp peeked at the stats\n    # n = int(stdin.readline())\n    for line in stdin:\n        # read the number of moments Polycarp peeked at the stats\n        n = int(stdin.readline())\n        # create the pairs of plays and clears\n        # for i in range(n):\n        # create the pairs of plays and clears\n        for line in stdin:\n            p, c = map(int, stdin.readline().split(' '))\n            # create the pairs of plays and clears\n            # for i in range(p):\n            # p, c = int(stdin.readline()), int(stdin.readline())\n            # read the number of plays for each level\n            # for line in stdin:\n            # p, c = int(stdin.readline()), int(stdin.readline())\n            # read the number of clears for each level\n            # c = int(stdin.readline())\n            # read the number of clears for each level\n            # c = int(stdin.readline())\n            # insert the current level into the dictionary if it does not exist yet\n            # if p not in record_dict.keys():\n            # record_dict[p] = [c]\n            # append the current level's number of clears to its corresponding list\n            # if it does not exist yet\n            if p not in record_dict.keys():\n                record_dict[p] = [c]\n            # append the current level's number of clears to its corresponding list\n            else:\n                record_dict[p].append(c)\n    # for each level in the dictionary of records\n    for p in record_dict.keys():\n        # if the record has the same number of plays and clears as Polycarp has in mind\n        # and the number of clears is the same as Polycarp has in mind for the record\n        # and the number of clears increased by exactly 1\n        # if record_dict[p][0] == n and record_dict[p][1] == c and c - record_dict[p][1] == 1:\n        # and the number of clears increased by exactly 1\n        if record_dict[p][0] == n and record_dict[p][1] == c and record_dict[p][1] - c == 1:\n            # print YES\n            print('YES')\n            # return YES\n            return 'YES'\n        # else print NO\n        print('NO')\n        # return NO\n        return 'NO'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n\n    :param stdin:\n    :return:\n    \"\"\"\n    result = \"YES\"\n    n = int(stdin.split(\"\\n\")[0])\n    for i in range(n):\n        plays, clears = [int(x) for x in stdin.split(\"\\n\")[i+1].split(\" \")]\n        if plays <= clears:\n            result = \"NO\"\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ... '6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5')\n    'NO'\n    >>> solution(\n   ... '6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5')\n    'NO'\n    \"\"\"\n    test_cases = int(stdin.readline())\n\n    for t in range(test_cases):\n        n = int(stdin.readline())\n        plays = []\n        clears = []\n\n        for _ in range(n):\n            a, b = map(int, stdin.readline().split())\n            plays.append(a)\n            clears.append(b)\n\n        is_correct = True\n        for i in range(1, len(plays)):\n            if plays[i - 1] >= plays[i]:\n                is_correct = False\n            if plays[i - 1] <= plays[i]:\n                is_correct = False\n            if plays[i - 1] + clears[i - 1] >= plays[i]:\n                is_correct = False\n            if plays[i - 1] + clears[i - 1] <= plays[i]:\n                is_correct = False\n\n        if is_correct:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n2\\n1 2\\n2\\n1 1\\n1 1\\n1 1\\n3\\n2 2\\n1 2\\n2\\n2\\n0 0\")\n    YES\n    \"\"\"\n    cases = int(stdin.readline())\n    stats = []\n    for i in range(cases):\n        stats.append(list(map(int, stdin.readline().split())))\n\n    for i in range(1, len(stats)):\n        if stats[i][0] < stats[i - 1][0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().strip().split()]\n    c = [int(x) for x in stdin.readline().strip().split()]\n    ans = []\n    for i in range(n - 1):\n        ans.append((c[i], p[i]))\n    ans.append((c[-1], p[-1]))\n    ans = sorted(ans, key=lambda x: x[1], reverse=True)\n    cnt = 0\n    for i in range(n - 1):\n        if ans[i][1] < ans[i + 1][1]:\n            cnt += 1\n        else:\n            break\n    if cnt == n - 1:\n        ans.reverse()\n    stdout.write(\"YES\" if cnt == n - 1 and ans == p else \"NO\")\n    return ''\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n\n    for _ in range(num_test_cases):\n        num_moments = int(stdin.readline())\n        p_plays = [int(stdin.readline()) for _ in range(num_moments)]\n        c_clears = [int(stdin.readline()) for _ in range(num_moments)]\n        counter = 0\n        for p, c in zip(p_plays, c_clears):\n            if p == c:\n                counter += 1\n        if counter == len(p_plays):\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        n = int(stdin.readline())\n        peeks = []\n        for j in range(n):\n            plays, clears = map(int, stdin.readline().split())\n            peeks.append((plays, clears))\n        result = \"NO\"\n        for j in range(1, len(peeks)):\n            prev_plays, prev_clears = peeks[j-1]\n            cur_plays, cur_clears = peeks[j]\n            if prev_plays < cur_plays:\n                if prev_clears >= cur_clears:\n                    result = \"YES\"\n                    break\n        print(result)\n\n    return \"\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    start, end = stdin.split()\n    start, end = list(start), list(end)\n    start.pop()\n    end.pop()\n    result = 0\n    for i in range(2):\n        for j in range(2):\n            if start[i] == end[j]:\n                result += i\n                start[i], end[j] = None, None\n                break\n    while True:\n        if None in start:\n            start.remove(None)\n        if None in end:\n            end.remove(None)\n        if None in end:\n            end.remove(None)\n        if None in start:\n            start.remove(None)\n        if len(start) == 0:\n            break\n        else:\n            result += 2\n    return result\n\nprint(solution(input()))\n\n-----Test Case-----\n\nInput\n05:39\n\nOutput\n11\n\nInput\n13:31\n\nOutput\n0\n\nInput\n23:59\n\nOutput\n1\n\n\n\n-----Test Case-----\n\nInput\n05:39\n\nOutput\n11\n\nInput\n13:31\n\nOutput\n0\n\nInput\n23:59\n\nOutput\n1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    return (h + m) % 12 * 60 + (h - m) // 12 * 12 * 60 - m * 60\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\":\")\n    stdin = list(map(int, stdin))\n    h, m = stdin[0], stdin[1]\n    \n    def get_time_part(h, m):\n        if m >= 30:\n            m -= 30\n            h += 1\n        return h, m\n    \n    h_min, m_min = 0, 0\n    h_max, m_max = 23, 59\n    \n    while True:\n        if h_min == h_max and m_min == m_max:\n            break\n        else:\n            if h_max == h_min + 1:\n                h_max -= 1\n                m_max -= 30\n                h_min, m_min = get_time_part(h_min, m_min)\n            else:\n                h_min += 1\n                m_min -= 30\n                h_max, m_max = get_time_part(h_max, m_max)\n    \n    return (h_max - h_min) * 60 + m_max - m_min\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split(':')\n    return str(int(t[0]) + int(t[1]) // 60 + (int(t[1]) % 60) // 10 + (int(t[1]) % 60) % 10)\n\n\nprint(solution('05:39'))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(':')\n    hours = int(stdin[0])\n    minutes = int(stdin[1])\n\n    hours_palindrome = hours\n    minutes_palindrome = minutes\n    while hours_palindrome!= 0:\n        hours_palindrome = hours_palindrome - (hours_palindrome % 11)\n        minutes_palindrome = minutes_palindrome - (minutes_palindrome % 11)\n        if hours_palindrome < 0:\n            hours_palindrome = hours_palindrome + 24\n    return str(minutes_palindrome)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(\":\"))\n    if h < 12:\n        if m >= 58:\n            h = h + 1\n        else:\n            m = m + 15\n        h = h % 12 if h >= 12 else h\n    else:\n        if m >= 45:\n            h = h + 1\n        else:\n            h = h % 12 + 12\n            m = m + 15\n    h = str(h)\n    m = str(m)\n    if len(h) == 1:\n        h = '0' + h\n    if len(m) == 1:\n        m = '0' + m\n    print(h + ':' + m)\n    return'result'\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    return 0 if m[0] == m[-1] and h[0] == h[-1] else abs(int(h[0]) * 60 + int(h[-1]) - int(h) * 60 - int(h))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\":\")\n    time = int(stdin[0]) * 60 + int(stdin[1])\n    if time % 2 == 0:\n        return 0\n    else:\n        return (time // 2) + 1\n\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    time_format = '%H:%M'\n    time_list = datetime.strptime(stdin, time_format)\n    time_list_back = datetime.strptime(stdin, time_format)\n    time_list_back = time_list_back.replace(hour=time_list_back.hour - 1)\n    time_diff = abs(time_list - time_list_back)\n    print(time_diff)\n    print(time_diff.seconds // 60)\n    return str(time_diff.seconds // 60)\n\n\ndef"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    - O(n)\n    - O(n)\n    - return sum(int(i) for i in stdin.split('\\n')[1].split())\n    '''\n    n = int(stdin.split('\\n')[0])\n    nums = [int(i) for i in stdin.split('\\n')[1].split()]\n    # max_pos, min_pos = 0, 0\n    # max_value, min_value = nums[0], nums[0]\n    # for i, n in enumerate(nums):\n    #     if n > max_value:\n    #         max_value = n\n    #         max_pos = i\n    #     if n < min_value:\n    #         min_value = n\n    #         min_pos = i\n    # return abs(max_pos - min_pos)\n    return abs(max(nums) - min(nums))\n\nsolution(\"5\\n4 5 1 3 2\")\nsolution(\"7\\n6 5 4 3 2 1\")\nsolution(\"6\\n6 5 4 3 2 1\")"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    n = int(line[0])\n    a = [int(i) for i in line[1].split(' ')]\n    a.sort()\n    res = 0\n    min_pos, max_pos = 0, n - 1\n    while min_pos < max_pos:\n        res = max(res, abs(a[max_pos] - a[min_pos]))\n        if a[min_pos] < a[max_pos]:\n            min_pos += 1\n        else:\n            max_pos -= 1\n    print(res)\n    return ''"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin)\na = sorted(int(i) for i in stdin.strip().split(' '))\na = [i for i in range(1, n + 1)]\n\ni = 0\nj = n - 1\nans = 0\nwhile i < j:\n    ans = max(ans, abs(a[i] - a[j]))\n    if a[i] > a[j]:\n        i += 1\n    else:\n        j -= 1\n\nreturn ans\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    min_index = a.index(min(a))\n    max_index = a.index(max(a))\n    if min_index < max_index:\n        return n - max_index\n    else:\n        return n - min_index\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    min_a = min(a)\n    max_a = max(a)\n    if min_a < 1:\n        min_a = 1\n    return max_a - min_a\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    distance = 0\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if i!= n - 1 and a[i] < a[i+1]:\n            distance += a[i+1] - a[i]\n            break\n    return distance\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = sorted(map(int, stdin.readline().split()))\n    a.append(a[0])\n    return a[len(a)-1] - a[0]\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, vals = stdin.split('\\n')\n    vals = [int(i) for i in vals.split()]\n    return str(max(vals) - min(vals))\n\ndef"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n = int(input[0])\n    a = [int(i) for i in input[1].split(' ')]\n    a.sort()\n    answer = 0\n    min_max = min(a[0], a[n-1])\n    for i in range(len(a)-1):\n        d = abs(a[i]-a[i+1])\n        answer = max(answer, min_max-a[i])\n        min_max = max(min_max, a[i+1])\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if stdin[:len(stdin) // 2] == stdin[:len(stdin) // 2][::-1] else 'NIE'\n\nprint(solution(input()))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if stdin[:len(stdin)//2] == stdin[len(stdin)//2:] else 'NIE'"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if stdin == stdin[::-1] else \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if \"\".join(reversed(stdin)) == stdin else \"NIE\"\n\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if len(stdin) % 2 == 0 else \"NIE\"\n\"\"\"\ndef"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if stdin == stdin[::-1] else 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    return string[:(len(string) // 2)] == string[::-1][:(len(string) // 2)]\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if stdin == stdin[::-1] else \"NIE\"\n\"\"\"\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if len(stdin) % 2 == 0 and stdin == stdin[::-1] else \"NIE\"\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    a_lst = [int(i) for i in str(a)]\n    b_lst = [int(i) for i in str(b)]\n    # print(a_lst)\n    # print(b_lst)\n    ans = ''\n    for i in range(max(len(a_lst), len(b_lst))):\n        if i < len(a_lst):\n            ans += str(a_lst[i])\n        if i < len(b_lst):\n            ans += str(b_lst[i])\n    return ans\n\n\nprint(solution(input().split(\" \")))\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    # let a be the largest number that is not greater than b\n    a = a - 1\n    while a % 10 == 0:\n        a //= 10\n    a = a // b\n    # print(a)\n    a = list(str(a))\n    b = list(str(b))\n    # print(a)\n    # print(b)\n    for i in range(len(b)):\n        if b[i] not in a:\n            return \"\".join(b[i:])"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    num = a\n    len_num = len(str(a))\n    out = ''\n    while len_num <= num:\n        num = num + 1\n    while num < b:\n        out = str(num)\n        len_out = len(out)\n        cnt = 0\n        while cnt < len_out:\n            if out[cnt] == '0':\n                len_num -= 1\n                cnt += 1\n                continue\n            else:\n                break\n        if len_num > len(out):\n            out = str(num)\n            len_out = len(out)\n            cnt = 0\n            while cnt < len_out:\n                if out[cnt] == '0':\n                    len_num -= 1\n                    cnt += 1\n                    continue\n                else:\n                    break\n        elif len_num == len(out):\n            if num > b:\n                return out\n            else:\n                return str(num)\n        elif len_num < len(out):\n            out = out[:-1]\n            len_num -= 1\n            cnt = 0\n            while cnt < len_out:\n                if out[cnt] == '0':\n                    len_num -= 1\n                    cnt += 1\n                    continue\n                else:\n                    break\n            if len_num > len(out):\n                out = str(num)\n                len_out = len(out)\n                cnt = 0\n                while cnt < len_out:\n                    if out[cnt] == '0':\n                        len_num -= 1\n                        cnt += 1\n                        continue\n                    else:\n                        break\n            elif len_num == len(out):\n                if num > b:\n                    return out\n                else:\n                    return str(num)\n            elif len_num < len(out):\n                out = out[:-1]\n                len_num -= 1\n                cnt = 0\n                while cnt < len_out:\n                    if out[cnt] == '0':\n                        len_num -= 1\n                        cnt += 1\n                        continue\n                    else:\n                        break\n                if len_num > len(out):\n                    out = str(num)\n                    len_out = len(out)\n                    cnt = 0\n                    while cnt < len_out:\n                        if out[cnt] == '0':\n                            len_num -= 1\n                            cnt += 1\n                            continue\n                        else:\n                            break\n                    if len_num > len(out):\n                        out = str(num)\n                        len_out = len(out)\n                        cnt = 0\n                        while cnt < len_out:\n                            if out[cnt] == '0':\n                                len_num -= 1\n                                cnt += 1\n                                continue\n                            else:\n                                break\n                        if len_num > len(out):\n                            out = str(num)\n                            len_out = len(out)\n                            cnt = 0\n                            while cnt < len_out:\n                                if out[cnt] == '0':\n                                    len_num -= 1\n                                    cnt += 1\n                                    continue\n                                else:\n                                    break\n                        elif len_num == len(out):\n                            if num > b:\n                                return out\n                            else:\n                                return str(num)\n                    elif len_num == len(out):\n                        if num > b:\n                            return out\n                        else:\n                            return str(num)\n                elif len_num < len(out):\n                    out = out[:-1]\n                    len_num -= 1\n                    cnt = 0\n                    while cnt < len_out:\n                        if out[cnt] == '0':\n                            len_num -= 1\n                            cnt += 1\n                            continue\n                        else:\n                            break\n                    if len_num > len(out):\n                        out = str(num)\n                        len_out = len(out)\n                        cnt = 0\n                        while cnt < len_out:\n                            if out[cnt] == '0':\n                                len_num -= 1\n                                cnt += 1\n                                continue\n                            else:\n                                break\n                        if len_num > len(out):\n                            out = str(num)\n                            len_out = len(out)\n                            cnt = 0\n                            while cnt < len_out:\n                                if out[cnt] == '0':\n                                    len_num -= 1\n                                    cnt += 1\n                                    continue\n                                else:\n                                    break\n                        elif len_num == len(out):\n                            if num > b:\n                                return out\n                            else:\n                                return str(num)\n                    elif len_num < len(out):\n                        out = out[:-1]\n                        len_num -= 1\n                        cnt = 0\n                        while cnt < len_out:\n                            if out[cnt] == '0':\n                                len_num -= 1\n                                cnt += 1\n                                continue\n                            else:\n                                break\n                        if len_num > len(out):\n                            out = str(num)\n                            len_out = len(out)\n                            cnt = 0\n                            while cnt < len_out:\n                                if out[cnt] == '0':\n                                    len_num -= 1\n                                    cnt += 1\n                                    continue\n                                else:\n                                    break\n                        elif len_num == len(out):\n                            if num > b:\n                                return out\n                            else:\n                                return str(num)\n                elif len_num == len(out):\n                    if num > b:\n                        return out\n                    else:\n                        return str(num)\n        elif len_num == len(out):\n            if num > b:\n                return out\n            else:\n                return str(num)\n        elif len_num < len(out):\n            out = out[:-1]\n            len_num -= 1\n            cnt = 0\n            while cnt < len_out:\n                if out[cnt] == '0':\n                    len_num -= 1\n                    cnt += 1\n                    continue\n                else:\n                    break\n            if len_num > len(out):\n                out = str(num)\n                len_out = len(out)\n                cnt = 0\n                while cnt < len_out:\n                    if out[cnt] == '0':\n                        len_num -= 1\n                        cnt += 1\n                        continue\n                    else:\n                        break\n                if len_num > len(out):\n                    out = str(num)\n                    len_out = len(out)\n                    cnt = 0\n                    while cnt < len_out:\n                        if out[cnt] == '0':\n                            len_num -= 1\n                            cnt += 1\n                            continue\n                        else:\n                            break\n                    if len_num > len(out):\n                        out = str(num)\n                        len_out = len(out)\n                        cnt = 0\n                        while cnt < len_out:\n                            if out[cnt] == '0':\n                                len_num -= 1\n                                cnt += 1\n                                continue\n                            else:\n                                break\n                    elif len_num == len(out):\n                        if num > b:\n                            return out\n                        else:\n                            return str(num)\n                elif len_num < len(out):\n                    out = out[:-1]\n                    len_num -= 1\n                    cnt = 0\n                    while cnt < len_out:\n                        if out[cnt] == '0':\n                            len_num -= 1\n                            cnt += 1"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [c for c in stdin if c!= \"0\"]\n    b = [c for c in stdin if c == \"0\"]\n    if a == []:\n        return \"0\"\n    max_ = max(a)\n    for i in range(1, max_ + 1):\n        if i not in a:\n            return i * \"0\" + \"\".join(a) + b"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n'))\n    x = ''\n    i = a\n    while i >= b:\n        i, r = divmod(i, 10)\n        x += str(r)\n    while i > 9:\n        i, r = divmod(i, 10)\n        x += str(r)\n    x += str(i)\n    return x[::-1]"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n\n    a_digits = []\n    for i in a:\n        a_digits.append(i)\n\n    a_digits.sort()\n    a_digits = ''.join(a_digits)\n\n    b_digits = []\n    for i in b:\n        b_digits.append(i)\n\n    b_digits.sort()\n    b_digits = ''.join(b_digits)\n\n    if a_digits == b_digits:\n        print(a)\n        return a\n    else:\n        print(max(a_digits, b_digits))\n        return max(a_digits, b_digits)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # line1 = input()\n    # line2 = input()\n    # res = []\n    # for i in line1:\n    #     if i == '0':\n    #         continue\n    #     else:\n    #         res.append(i)\n    # for i in line2:\n    #     if i == '0':\n    #         continue\n    #     else:\n    #         res.append(i)\n    # res.sort(reverse=True)\n    # print(int(''.join(res)))\n\n\n    # Your code here\n    # line1 = input()\n    # line2 = input()\n    # res = []\n    # for i in line1:\n    #     if i == '0':\n    #         continue\n    #     else:\n    #         res.append(i)\n    # for i in line2:\n    #     if i == '0':\n    #         continue\n    #     else:\n    #         res.append(i)\n    # res.sort(reverse=True)\n    # print(int(''.join(res)))\n\n    # Your code here\n    line1 = input()\n    line2 = input()\n    res = []\n    for i in line1:\n        if i == '0':\n            continue\n        else:\n            res.append(i)\n    for i in line2:\n        if i == '0':\n            continue\n        else:\n            res.append(i)\n    res.sort(reverse=True)\n    print(int(''.join(res)))"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[:2])\n    return ''.join([str(i) for i in sorted(str(a))])[-1:-b:-1]"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    while len(a) < 6:\n        a = '0' + a\n    return a\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin]\n    b = sorted(a, reverse=True)\n    for i in range(len(a)):\n        if b[i] > a[i]:\n            a[i] = b[i]\n    a = sorted(a)\n    a = [str(i) for i in a]\n    a = ''.join(a)\n    return a\nprint(solution(input()))"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    field = []\n    for line in stdin.splitlines():\n        row = []\n        for char in line:\n            if char == 'X':\n                row.append(1)\n            elif char == 'O':\n                row.append(-1)\n            else:\n                row.append(0)\n        field.append(row)\n\n    cross = 0\n    nought = 0\n    for row in field:\n        cross += row.count(1)\n        nought += row.count(-1)\n\n    size = len(field)\n    for i in range(size):\n        for j in range(size):\n            if j + 4 < size:\n                if field[i][j] == -1 and field[i][j + 1] == -1 and field[i][j + 2] == -1 and field[i][j + 3] == -1 and field[i][j + 4] == 0:\n                    return 'YES'\n            if i + 4 < size:\n                if field[i][j] == 1 and field[i + 1][j] == 1 and field[i + 2][j] == 1 and field[i + 3][j] == 1 and field[i + 4][j] == 0:\n                    return 'YES'\n\n    for i in range(size):\n        for j in range(size):\n            if i + 4 < size and j + 4 < size:\n                if field[i][j] == -1 and field[i + 1][j + 1] == -1 and field[i + 2][j + 2] == -1 and field[i + 3][j + 3] == -1 and field[i + 4][j + 4] == 0:\n                    return 'YES'\n            if j + 4 < size and i + 4 < size:\n                if field[i][j] == 1 and field[i + 1][j + 1] == 1 and field[i + 2][j + 2] == 1 and field[i + 3][j + 3] == 1 and field[i + 4][j + 4] == 0:\n                    return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = []\n    for line in stdin.split('\\n'):\n        m.append(list(line))\n    n = len(m)\n    crosses = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 'X':\n                crosses += 1\n    if crosses % 2!= 0:\n        return 'NO'\n    crosses = 0\n    for i in range(n):\n        for j in range(n):\n            if m[i][j] == 'O':\n                crosses += 1\n    if crosses % 2!= 0:\n        return 'NO'\n    crosses = 0\n    for i in range(n):\n        for j in range(n - 5):\n            if m[i][j] == 'O':\n                crosses += 1\n            if m[i][j + 5] == 'O':\n                crosses += 1\n            if j + 5 < n and m[i][j + 5] == 'O':\n                crosses += 1\n            if j + 5 < n and i + 5 < n and m[i + 5][j + 5] == 'O':\n                crosses += 1\n            if i + 5 < n and m[i + 5][j] == 'O':\n                crosses += 1\n            if i + 5 < n and j - 5 >= 0 and m[i + 5][j - 5] == 'O':\n                crosses += 1\n            if j - 5 >= 0 and m[i][j - 5] == 'O':\n                crosses += 1\n            if i - 5 >= 0 and j - 5 >= 0 and m[i - 5][j - 5] == 'O':\n                crosses += 1\n            if i - 5 >= 0 and m[i - 5][j] == 'O':\n                crosses += 1\n    return 'YES' if crosses >= (n - 5) * (n - 5) // 2 else 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    field = stdin.split('\\n')\n    count_cross = 0\n    count_nought = 0\n    for row in field:\n        for col in row:\n            if col == 'X':\n                count_cross += 1\n            if col == 'O':\n                count_nought += 1\n\n    # print(count_cross, count_nought)\n\n    if count_cross > count_nought:\n        return 'YES'\n    if count_cross < count_nought:\n        return 'NO'\n\n    # Check horizontal\n    count_horizontal = 0\n    for row in field:\n        for i in range(len(row)):\n            if row[i] == '.':\n                continue\n            if row[i] == row[i+1] == row[i+2] == row[i+3] == row[i+4] == 'X':\n                count_horizontal += 1\n            if row[i] == row[i+1] == row[i+2] == row[i+3] == row[i+4] == 'O':\n                count_horizontal += 1\n\n    # print(count_horizontal)\n    if count_horizontal > 0:\n        return 'YES'\n\n    # Check vertical\n    count_vertical = 0\n    for i in range(len(field)):\n        for j in range(len(field[i])):\n            if field[i][j] == '.':\n                continue\n            if field[i][j] == field[i+1][j] == field[i+2][j] == field[i+3][j] == field[i+4][j] == 'X':\n                count_vertical += 1\n            if field[i][j] == field[i+1][j] == field[i+2][j] == field[i+3][j] == field[i+4][j] == 'O':\n                count_vertical += 1\n\n    # print(count_vertical)\n    if count_vertical > 0:\n        return 'YES'\n\n    # Check diagonals\n    count_diagonal = 0\n    for i in range(len(field)):\n        for j in range(len(field[i])):\n            if field[i][j] == '.':\n                continue\n            if field[i][j] == field[i+1][j+1] == field[i+2][j+2] == field[i+3][j+3] == field[i+4][j+4] == 'X':\n                count_diagonal += 1\n            if field[i][j] == field[i+1][j+1] == field[i+2][j+2] == field[i+3][j+3] == field[i+4][j+4] == 'O':\n                count_diagonal += 1\n\n    # print(count_diagonal)\n    if count_diagonal > 0:\n        return 'YES'\n\n    count_diagonal = 0\n    for i in range(len(field)):\n        for j in range(len(field[i])):\n            if field[i][j] == '.':\n                continue\n            if field[i][j] == field[i-1][j+1] == field[i-2][j+2] == field[i-3][j+3] == field[i-4][j+4] == 'X':\n                count_diagonal += 1\n            if field[i][j] == field[i-1][j+1] == field[i-2][j+2] == field[i-3][j+3] == field[i-4][j+4] == 'O':\n                count_diagonal += 1\n\n    # print(count_diagonal)\n    if count_diagonal > 0:\n        return 'YES'\n\n    return 'NO'\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if len([i for i in stdin.split() if i.count(\"X\") == i.count(\"O\")]) >= 2 else \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    assert len(stdin) == 100\n    field = [stdin[i:i + 10] for i in range(0, 100, 10)]\n    for row in range(10):\n        for col in range(10):\n            if field[row][col] == '.':\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_line(row: int, col: int) -> list:\n        return [stdin[row * 10 + col] for col in range(10)]\n\n    def check_line(line: list) -> bool:\n        return 'X' * 5 in line\n\n    def check_left(line: list) -> bool:\n        return check_line(line) and check_line([line[col] for col in range(5)])\n\n    def check_right(line: list) -> bool:\n        return check_line(line) and check_line([line[col] for col in range(5, 10)])\n\n    def check_down(line: list) -> bool:\n        return check_line(line) and check_line([line[col] for col in range(5, 10)]) and check_line([line[col] for col in range(5)])\n\n    def check_up(line: list) -> bool:\n        return check_line(line) and check_line([line[col] for col in range(5)]) and check_line([line[col] for col in range(5, 10)])\n\n    def check_diagonal(line: list) -> bool:\n        return check_line(line) and check_line([line[col] for col in range(5)]) and check_line([line[col] for col in range(5, 10)]) and check_line([line[col] for col in range(5, 10)])\n\n    lines = [get_line(row, col) for row in range(10) for col in range(10)]\n\n    return 'YES' if (check_left(lines[0])\n                     or check_right(lines[0])\n                     or check_down(lines[0])\n                     or check_up(lines[0])\n                     or check_diagonal(lines[0])) else 'NO'\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,k = map(int, stdin.split())\n    a = []\n    \n    for i in range(n):\n        a.append([0]*n)\n    \n    #\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u0443\u043c\u043c\u0430\u043c\u0438 \u0441\u043b\u0435\u0432\u0430-\u0441\u0432\u0435\u0440\u0445\u0443 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430-\u0441\u043d\u0438\u0437\u0443\n    for j in range(n):\n        a[j][0] = k-j\n        a[0][j] = k-j\n    \n    for i in range(1,n):\n        for j in range(1,n):\n            a[i][j] = min(a[i][j-1], a[i-1][j]) + k - max(a[i][j-1], a[i-1][j])\n            \n    #\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n \u0441 \u0441\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]!= k-j:\n                return -1\n                \n    return '\\n'.join([' '.join([str(i) for i in row]) for row in a])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = stdin.split(\" \")\n    \n    n = int(n)\n    k = int(k)\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    for i in range(k):\n        row, col = stdin.split(\" \")\n        row = int(row) - 1\n        col = int(col) - 1\n        matrix[row][col] = 1\n    \n    for row in range(n):\n        for col in range(n):\n            if row > col:\n                matrix[row][col] = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                matrix[i][j] = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                matrix[i][j] = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                return -1\n    \n    return '\\n'.join(' '.join(map(str, row)) for row in matrix)\n\n\n-----Test-----\nInput\n2 2\n\nOutput\n0 0\n1 1\n\nInput\n3 3\n\nOutput\n1 0 0\n0 1 0\n0 0 1\n\nInput\n2 5\n\nOutput\n1 0 0\n0 1 0\n0 0 1\n\nInput\n3 3\n\nOutput\n-1\n\nInput\n4 2\n\nOutput\n1 0 0\n0 0 1\n0 1 0\n0 0 1\n\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        with patch('builtins.input', side_effect=[\"4 2\", \"0 0\", \"0 1\", \"0 0\", \"1 1\"]):\n            import solution\n            solution.solution()\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n\n    row = 0\n    col = 0\n    while row < n - 1 and col < n - 1:\n        while col < n - 1:\n            if matrix[row][col] == k:\n                matrix[row][col] = matrix[col][row] = k\n                col += 1\n            else:\n                break\n        if col >= n - 1:\n            break\n\n        while row < n - 1:\n            if matrix[row][col] == k:\n                matrix[row][col] = matrix[row][col + 1] = k\n                row += 1\n            else:\n                break\n        if row >= n - 1:\n            break\n\n        while col >= 0:\n            if matrix[row][col] == k:\n                matrix[row][col] = matrix[col][row] = k\n                col -= 1\n            else:\n                break\n        if col < 0:\n            break\n\n    for row in range(n):\n        for col in range(n):\n            if matrix[row][col]!= k:\n                print(-1)\n                return\n\n    print('\\n'.join(' '.join(str(e) for e in row) for row in matrix))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Checks if a matrix is symmetrical and lexicographically\n    greatest among the input matrices.\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    if not (1 <= n <= 100 and 0 <= k <= 10 ** 6):\n        return -1\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if matrix[i][j] == matrix[j][i]:\n                    continue\n                else:\n                    return -1\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] > matrix[j][i]:\n                return -1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = matrix[j][i]\n    return \"\".join([\" \".join(map(str, row)) + \"\\n\" for row in matrix])\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(k):\n        row = random.randint(0, n-1)\n        column = random.randint(0, n-1)\n        matrix[row][column] = 1\n        \n    for i in range(n):\n        for j in range(n):\n            if j < i:\n                matrix[i][j] = matrix[j][i]\n    \n    if i == j and matrix[i][j] == 1:\n        return 1\n    else:\n        return -1\n\n\n\n\ndef"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = []\n    \n    for i in range(n):\n        matrix.append([0 for i in range(n)])\n        \n    if n % 2 == 0:\n        mid = n // 2\n        \n        for i in range(k):\n            x = randint(0, mid)\n            y = randint(0, mid)\n            matrix[x][y] = 1\n            matrix[y][x] = 1\n            \n    else:\n        mid = (n + 1) // 2\n        \n        for i in range(k):\n            x = randint(0, mid)\n            y = randint(0, mid)\n            matrix[x][y] = 1\n            matrix[y][x] = 1\n    \n    print('\\n'.join([' '.join([str(x) for x in row]) for row in matrix]))\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split(' '))\n    n = 1\n    ans = [[0] * n] * n\n    while True:\n        ans = _fill(ans, n, k)\n        if _is_max(ans, n):\n            break\n        n += 1\n        ans = [[0] * n] * n\n    print_matrix(ans)\n    return ''\n\ndef"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # create a dictionary to store the a_{i}s\n    # we do this to be able to lookup for the max a_i\n    a = {}\n    # read in the three values as floats\n    x, y, z = map(float, stdin.split())\n    # create all the possible a_{i}s\n    for i in range(1, 13):\n        a[f'a{i}'] = x ** y ** z\n    # create a list of all possible a_{i}s\n    l = list(a.values())\n    # get the max a_i\n    max = max(l)\n    # create a dictionary to store the indices of the max\n    # a_i's\n    # we will use this to pick the a_i we will use\n    index_dict = {}\n    # we loop through the list a_i's and see if the index of the\n    # max a_i is in the index_dict\n    for i, x in enumerate(l):\n        if x == max:\n            index_dict[i] = x\n    # we sort the dictionary by the value of the a_i's so that\n    # the min a_i is first in the list\n    index_dict = {k: v for k, v in sorted(index_dict.items(), key=lambda item: item[1])}\n    # we create a list with all the indices\n    id_list = list(index_dict.keys())\n    # the max index is always the first index\n    # so we just take that\n    c = id_list[0]\n    # we then check if we have a second index\n    if len(id_list) > 1:\n        # we check to see if the next index is less than the current\n        # index\n        if id_list[1] < c:\n            # if this is the case, we set the current index to be the\n            # second index\n            c = id_list[1]\n    # if we have a third index, we check if the third index is less\n    # than the current index\n    if len(id_list) > 2:\n        if id_list[2] < c:\n            # if it is, we set the current index to the third index\n            c = id_list[2]\n    # we create a string with the correct a_i\n    # we add an f to the beginning because we want to format it\n    # as a float\n    # we also add an f to the end because we want to format it as a\n    # float\n    return f'f{l[c]}'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(float, stdin.split()))\n    x, y, z = l\n    m = max(x ** y ** z, x ** z ** y, x ** y ** z, x ** z ** y, y ** x ** z,\n            y ** z ** x, y ** x ** z, y ** z ** x, z ** x ** y, z ** y ** x,\n            z ** x ** y, z ** y ** x)\n    if m == x ** y ** z:\n        return 'z^y^x'\n    if m == x ** z ** y:\n        return 'x^z^y'\n    if m == (x ** y) ** z:\n        return '(' + 'x^y' + ')^z'\n    if m == (x ** z) ** y:\n        return 'x^(' + 'z^y' + ')'\n    if m == y ** x ** z:\n        return 'y^x^z'\n    if m == y ** z ** x:\n        return 'y^z^x'\n    if m == (y ** x) ** z:\n        return '(' + 'y^x' + ')^z'\n    if m == (y ** z) ** x:\n        return 'y^z^x'\n    if m == z ** x ** y:\n        return 'z^x^y'\n    if m == z ** y ** x:\n        return 'z^y^x'\n    if m == (z ** x) ** y:\n        return '(' + 'z^x' + ')^y'\n    if m == (z ** y) ** x:\n        return 'z^y^x'\n    return ''\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin.split(' ')\n    x = float(x)\n    y = float(y)\n    z = float(z)\n    \n    result_1 = x**y**z\n    result_2 = x**z**y\n    result_3 = (x**y)**z\n    result_4 = (x**z)**y\n    result_5 = y**x**z\n    result_6 = y**z**x\n    result_7 = (y**x)**z\n    result_8 = (y**z)**x\n    result_9 = z**x**y\n    result_10 = z**y**x\n    result_11 = (z**x)**y\n    result_12 = (z**y)**x\n    \n    result = []\n    for i in range(1, 13):\n        if i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]:\n            result.append(max(result_1, result_2, result_3, result_4, result_5, result_6, result_7, result_8, result_9, result_10, result_11, result_12))\n            result_1 = result_2 = result_3 = result_4 = result_5 = result_6 = result_7 = result_8 = result_9 = result_10 = result_11 = result_12 = 0\n    \n    result = sorted(result)\n    \n    if result[0] == result_1:\n        return 'x^y^z'\n    elif result[0] == result_2:\n        return 'x^z^y'\n    elif result[0] == result_3:\n        return '(x^y)^z'\n    elif result[0] == result_4:\n        return '(x^z)^y'\n    elif result[0] == result_5:\n        return 'y^x^z'\n    elif result[0] == result_6:\n        return 'y^z^x'\n    elif result[0] == result_7:\n        return '(y^x)^z'\n    elif result[0] == result_8:\n        return '(y^z)^x'\n    elif result[0] == result_9:\n        return 'z^x^y'\n    elif result[0] == result_10:\n        return 'z^y^x'\n    elif result[0] == result_11:\n        return '(z^x)^y'\n    else:\n        return '(z^y)^x'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split(' '))\n\n    # Exhaustive enumeration\n    candidates = [\n        x**y**z,\n        x**z**y,\n        (x**y)**z,\n        (x**z)**y,\n        y**x**z,\n        y**z**x,\n        (y**x)**z,\n        (y**z)**x,\n        z**x**y,\n        z**y**x,\n        (z**x)**y,\n        (z**y)**x,\n    ]\n    return max(candidates, key=lambda c: (c // 1) % 10)\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    if y >= z:\n        if z >= x:\n            return f'{x}^{y}^{z}'\n        return f'({x}^{y})^{z}'\n    elif y >= x:\n        if x >= z:\n            return f'{x}^{z}^{y}'\n        return f'({x}^{z})^{y}'\n    return f'{y}^({x}^{z})'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [x, y, z] = list(map(float, stdin.split()))\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    ans_max = (x ** y ** z)\n    ans_min = 0\n    ans_min_index = -1\n    for i in range(12):\n        if i % 3 == 0:\n            x = x ** y\n            x = int(x)\n        elif i % 3 == 1:\n            x = x ** z\n            x = int(x)\n        else:\n            y = x ** z\n            y = int(y)\n        if (ans_max < x):\n            ans_max = x\n            ans_min_index = i + 1\n    return f\"{ans_min_index}\"\nprint(solution(input()))\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    print(\"x^y^z\" if x ** y ** z > (x ** z ** y)\n          else \"x^z^y\" if x ** z ** y > (x ** y ** z)\n          else \"(x^y)^z\" if (x ** y) ** z > x ** y ** z\n          else \"(x^z)^y\" if x ** z ** y > (x ** y ** z)\n          else \"y^x^z\" if y ** x ** z > (y ** z ** x)\n          else \"y^z^x\" if y ** z ** x > (y ** x ** z)\n          else \"(y^x)^z\" if (y ** x) ** z > y ** x ** z\n          else \"(y^z)^x\" if y ** z ** x > (y ** x ** z)\n          else \"z^x^y\" if z ** x ** y > (z ** y ** x)\n          else \"z^y^x\")"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to this problem.\n    \"\"\"\n    x, y, z = stdin.split()\n    x, y, z = float(x), float(y), float(z)\n    return \"z^y^x\" if x**y**z == z**y**x else \"x^y^z\" if x**z**y == z**x**y else \"(x^y)^z\" if x**y == y**x else \"(x^z)^y\" if x**z == z**x else \"y^x^z\" if y**x**z == z else \"y^z^x\" if y**z**x == z else \"(y^x)^z\" if y**x == x**y else \"(y^z)^x\" if y**z == x**z else \"z^x^y\" if z**x**y == y else \"z^y^x\" if z**y**x == x else \"(\" + z**x**y + \")\" if x**y == y**x else \"(\" + z**x**y + \")\" if y**x == x**y else \"(\" + y**x**z + \")\" if x**y**z == y**z else \"(\" + y**x**z + \")\"\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(x) for x in stdin.split(' ')]\n    \n    return f'z^y^x' if x ** y ** z == x ** z ** y else f'(x^y)^z' if x ** y == (x ** z) ** y else f'x^y^z' if x ** y ** z == x ** z ** y else f'(x^y)^z' if x ** y == (x ** z) ** y else f'(x^z)^y' if x ** z ** y == x ** y ** z else f'(y^x)^z' if y ** x ** z == y ** z ** x else f'(y^z)^x' if y ** z ** x == y ** x ** z else f'z^x^y' if z ** x ** y == z ** y ** x else f'z^y^x'\n\ndef"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum value of expression among x^{y}^{z}, x^{z}^{y}, (x^{y})^{z}, (x^{z})^{y}, y^{x}^{z}, y^{z}^{x}, (y^{x})^{z}, (y^{z})^{x}, z^{x}^{y}, z^{y}^{x}, (z^{x})^{y}, (z^{y})^{x} and prints the corresponding expression. If there are many maximums, prints the one that comes first in the list.\n    \"\"\"\n    x, y, z = map(float, stdin.split())\n    # for expression x^{y}^{z}, x^{z}^{y}\n    max_x = x**y**z\n    max_y = x**z**y\n    max_z = x**y**z\n    # for expression (x^{y})^{z}, (x^{z})^{y}\n    max_xy = x**y**z\n    max_xz = x**z**y\n    # for expression y^{x}^{z}, y^{z}^{x}\n    max_yx = y**x**z\n    max_yz = y**z**x\n    # for expression (y^{x})^{z}, (y^{z})^{x}\n    max_xyz = y**x**z\n    max_yzx = y**z**x\n    # for expression z^{x}^{y}, z^{y}^{x}\n    max_zx = x**y**z\n    max_zy = x**z**y\n    # for expression (z^{x})^{y}, (z^{y})^{x}\n    max_zxz = z**x**y\n    max_zyz = z**y**x\n    m = max(max_x, max_y, max_z, max_xy, max_xz, max_yx, max_yz, max_xyz, max_yzx, max_zyz)\n    if max_x == m:\n        return 'z^y^x'\n    elif max_y == m:\n        return 'x^z^y'\n    elif max_z == m:\n        return 'x^y^z'\n    elif max_xy == m:\n        return 'x^y^z'\n    elif max_xz == m:\n        return '(x^y)^z'\n    elif max_yx == m:\n        return '(x^z)^y'\n    elif max_yz == m:\n        return 'y^x^z'\n    elif max_xyz == m:\n        return 'y^x^z'\n    elif max_yzx == m:\n        return 'y^z^x'\n    elif max_zyz == m:\n        return 'z^x^y'"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0] * 2\n\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n = int(input[0])\n    s = input[1]\n    dp = [0]*(n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + 1\n        if i < len(s) and s[i] == s[i-1]:\n            dp[i] = min(dp[i], dp[i-1])\n    return dp[-1]\nsolution(input())"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of operations needed to type the string.\n    '''\n    length = int(stdin.strip())\n    string = stdin.strip()\n    return length + len(string) - 1 if len(string) <= length else length - 1\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N^2)\n    Space: O(1)\n    \"\"\"\n    s = stdin\n    n = len(s)\n    dp = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n        for j in range(i - 1, i - 5, -1):\n            if s[j:i] in s[0:i - j]:\n                dp[i] = min(dp[i], dp[j - 1] + (i - j) // 2)\n    return dp[n]\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  \n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    file_num, *file_info = stdin.split('\\n')\n    file_info = [file_info[i].split(' ') for i in range(len(file_info))]\n    file_info = {int(file_info[i][0]): file_info[i] for i in range(len(file_info))}\n    file_num = int(file_num)\n    res = []\n    print(file_num)\n    for file_id in range(1, file_num+1):\n        file_type, file_name = file_info.get(file_id, [])\n        if file_type == '0':\n            if file_id == 1:\n                res.append('move 1 {}'.format(file_name))\n            elif file_id == file_num:\n                res.append('move {} {}'.format(file_name, file_id + 1))\n            else:\n                res.append('move {} {}'.format(file_name, file_id + 1))\n        else:\n            if file_id == 1:\n                res.append('move {} 1'.format(file_name))\n            elif file_id == file_num:\n                res.append('move {} {}'.format(file_name, file_id + 1))\n            else:\n                res.append('move {} {}'.format(file_name, file_id + 1))\n    return '\\n'.join(res)\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    tests = stdin.split('\\n')[0]\n    n = int(tests)\n    ex = []\n    re = []\n    for test in tests.split('\\n'):\n        ex.append(test.split(' ')[0])\n        re.append(test.split(' ')[1])\n    ex.sort()\n    re.sort()\n    f = []\n    for i in range(n):\n        if re[i] == '1':\n            f.append(ex[i])\n        if re[i] == '0':\n            f.append(i + 1)\n    return len(f)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    examples = 0\n    for line in stdin.splitlines():\n        name, type = line.split()\n        if type == \"0\":\n            examples += 1\n\n    out = examples\n    out += sum(i for i in range(examples + 1, examples + 1 + len(stdin.splitlines())))\n\n    return out\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    ex = set()\n    res = []\n    for _ in range(n):\n        name, type = stdin.splitlines()[1].split()\n        if type == '1':\n            ex.add(name)\n        res.append(f\"move {name} {len(ex)+1}\")\n    return '\\n'.join(res)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    move_cnt = 0\n    for i in range(n):\n        line = stdin.readline()\n        a, b = line.split()\n        a = int(a)\n        b = int(b)\n        if a == 1:\n            move_cnt += 1\n    print(move_cnt)\n    res = ''\n    for i in range(move_cnt):\n        res += \"move \" + str(i + 1) + \" \" + str(i + move_cnt + 1) + '\\n'\n    print(res)\n    return res\n\nsolution(\"5\\n1 0\\n11 1\\n111 0\\n1111 1\\n11111 0\")\n\n'''\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns a solution function to the provided input\n    \"\"\"\n   ...\ndef"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, cnt = map(int, stdin.split('\\n')[0].split(' '))\n    ex = [0] * n\n    reg = [0] * n\n    for i in range(n):\n        s, t = map(int, stdin.split('\\n')[i + 1].split(' '))\n        if t == 1:\n            ex[i] = s\n        else:\n            reg[i] = s\n    ex.sort()\n    reg.sort()\n    s = []\n    for i in range(cnt):\n        if i < ex[0]:\n            s.append(str(i + 1))\n        else:\n            s.append(str(ex[0]))\n        s.append(' ')\n        if i < reg[0]:\n            s.append(str(i + 1 + cnt))\n        else:\n            s.append(str(reg[0] + cnt))\n    return '\\n'.join(s)"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    file_num = int(stdin.split('\\n')[0])\n    file_names = stdin.split('\\n')[1:file_num+1]\n    file_types = stdin.split('\\n')[file_num+1:]\n    \n    example_num = 0\n    move_num = 0\n    for i in range(file_num):\n        if file_types[i] == '1':\n            example_num += 1\n        else:\n            move_num += 1\n    \n    return str(move_num + example_num) + '\\n' + '\\n'.join(['move'+ str(i+1) +'' + str(i+example_num+1) for i in range(move_num)])\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # Here I want to extend the solution to allow for multiple tickets.\n    # First I want to add a check to ensure that the input has 6 characters.\n    # Then I want to iterate over the input and use a loop to replace any character in the input\n    # with the first character and the last character.\n    # I want to return the minimum number of replacements needed\n    '''\n    if len(stdin)!= 6:\n        return -1\n    else:\n        new_list = []\n        for index, value in enumerate(stdin):\n            new_list.append(value)\n            first = new_list[0]\n            last = new_list[5]\n            new_list[index] = first\n            new_list[5-index-1] = last\n        return len(stdin) - len(new_list)\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count('0') == 6:\n        return '0'\n    res = ''\n    for i in range(len(stdin) - 3):\n        s = int(stdin[i]) + int(stdin[i + 1]) + int(stdin[i + 2])\n        r = int(stdin[i + 3]) + int(stdin[i + 4]) + int(stdin[i + 5])\n        if s == r:\n            res = str(i + 1)\n            break\n    if res:\n        return res\n    else:\n        return '-1'\n    return res\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '2'"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n\"\"\"\n\ndef"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = \"\".join([n for n in stdin if n!= \"0\"])\n    return len(a) if len(a) < 6 else 0\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    input_str = input_str.replace('0', 'l')\n    input_str = input_str.replace('1', 'l')\n    input_str = input_str.replace('2', 'l')\n    input_str = input_str.replace('3', 'l')\n    input_str = input_str.replace('4', 'l')\n    input_str = input_str.replace('5', 'l')\n    input_str = input_str.replace('6', 'l')\n    input_str = input_str.replace('7', 'l')\n    input_str = input_str.replace('8', 'l')\n    input_str = input_str.replace('9', 'l')\n    print(len(input_str) - len(stdin))\n    return\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split(' '))\n    return str(min(m - 1, x - 1))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split('\\n')[0].split(' '))\n    return str(max((m * (m - 1) // 2 - x * (m - x + 1)), (m * x - x * (x - 1)) // 2))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '''\n    \n    '''\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, x = [int(x) for x in stdin.split('\\n')[0].split()]\n    # x = int(stdin.split('\\n')[0].split()[1])\n    # m = int(stdin.split('\\n')[0].split()[0])\n    res = 0\n    if m % x!= 0:\n        if m % x == 1:\n            res += (m // x) - 1\n        else:\n            res += (m // x)\n    else:\n        res += m // x - 1\n    return str(res)\n\n\nprint(solution('4 3\\n'))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    m, x = map(int, stdin.split())\n    if m == 1:\n        print(0)\n    else:\n        print(math.ceil(m / x))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rooms_count, x_mouse = [int(x) for x in stdin.split()]\n    return str(gcd(x_mouse, rooms_count))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, x = [int(i) for i in stdin.split()]\n    if x == 1:\n        return m\n    x_t = gcd(x, m)\n    if x_t == 1:\n        return (x - 1) * m + 1\n    else:\n        return m\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, x = [int(x) for x in stdin.split(' ')]\n    return str(max(1, m - x + 1))\n    \n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(m - x + 1)\n    \n    \ndef"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    return \"{} {}\".format(k - 1, (k - 1) * (k - 2) // 2)\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return (a * b) // gcd(a, b)\n\n    n, k = stdin.strip().split(' ')\n    n, k = int(n), int(k)\n    l = 1\n    while (l < k):\n        l = lcm(l, 2)\n    l = l // 2\n    q = k // l\n    r = k % l\n    res = str(q) +'' + str(l) + '\\n' + str(r)\n    return res\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    people = stdin.readline().strip().split(\" \")\n    people = list(map(int, people))\n    k = people.pop(0)\n    a = people.pop(0)\n    b = people.pop(0)\n    # todo: not sure what to do with the last element\n\n    x = 1\n    while a % x!= 0 and b % x!= 0:\n        x = x * 2\n\n    a_, b_ = a, b\n    while x!= 1:\n        a_, b_ = a_ // x, b_ // x\n        x = x // 2\n\n    a_, b_ = a_ % (10 ** 6 + 3), b_ % (10 ** 6 + 3)\n\n    return f\"{a_} {b_}\"\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for g in range(1, 2 ** n):\n        s = str(bin(g))[2:]\n        if len(s) < n:\n            s = \"0\" * (n - len(s)) + s\n        # print(s)\n        if sum([int(s[i]) for i in range(n)]) == k:\n            p1 = \"1/2\"\n            a = int(s.replace(\"1\", \"0\"), 2)\n            b = int(s.replace(\"1\", \"1\"), 2)\n            p1 = str(a / b)\n            break\n    return''.join(map(str, [a, b]))\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return f'{a % (10**6 + 3)} {b % (10**6 + 3)}'\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... ''')\n    '1 8'\n    \"\"\"\n    stdin = stdin.strip()\n    n, k = [int(i) for i in stdin.split(' ')]\n    # n, k = list(map(int, stdin.split(' ')))\n    assert 1 <= n <= 10 ** 18\n    assert 2 <= k <= 10 ** 18\n    # assert n == len(stdin.split(' '))\n    # assert 2 <= k <= 10 ** 18\n    # assert n == len(stdin.split(' '))\n    # A, B = list(map(int, stdin.split(' ')))\n    # assert 1 <= A <= 10 ** 6\n    # assert 1 <= B <= 10 ** 6\n    # assert A == gcd(A, B)\n    # assert B == gcd(A, B)\n    def f(n, k):\n        assert 0 <= n <= 10 ** 18\n        assert 0 <= k <= 10 ** 18\n        assert n >= k\n        result = 1\n        for i in range(k, 0, -1):\n            result *= (n - i + 1)\n            result //= i\n        return result % (10 ** 6 + 3)\n    A, B = f(n, k), f(n, k - 1)\n    assert A % gcd(A, B) == 0\n    return '{} {}'.format(A, B)\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution prints two integers in a single line: the first is A, the second is B.\n    \"\"\"\n    stdin = stdin.strip()\n    x, y = map(int, stdin.split())\n    primes = set(range(2, 21))\n    for i in range(2, int(x ** 0.5) + 1):\n        if i in primes:\n            primes.difference_update(range(2 * i, x + 1, i))\n    A = 1\n    B = 1\n    for j in primes:\n        if x % j == 0:\n            A *= j\n            x //= j\n            if x % j == 0:\n                B *= j\n                x //= j\n    return str(A) +'' + str(B)\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    \n    # Find the number of people in Udayland\n    n = 2 ** n\n    \n    # Find the number of days in Udayland\n    days = 0\n    for i in range(n):\n        days += 2 ** i\n    \n    # Find the number of people in Udayland\n    people = 0\n    for i in range(k):\n        people += 2 ** (n - 1 - i)\n    \n    # Find the probability\n    prob = people / days\n    \n    # Return the solution\n    return f'{prob} {int(prob * days) % (10**6 + 3)}'\n    \n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # 1) read all input\n    # 2) determine the numerator and denominator\n    # 3) print the fraction\n\n    # 1) read all input\n    n, k = map(int, stdin.split('\\n')[0].split())\n    \n    # 2) determine the numerator and denominator\n    p = 1 / 2 ** n\n    A = 1\n    B = p\n    for _ in range(k - 1):\n        # find the greatest common divisor\n        A, B = gcd(A, B)\n    \n    # 3) print the fraction\n    print(A, B, sep='\\n')"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == 1 and stdin[0] == '0' else 'NO'\n\n\ndef"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    \n    #if N < 2:\n        #return 'NO'\n    \n    pos = [0, 0]\n    curr_dir = 'North'\n    curr_dist = 0\n    \n    for _ in range(N):\n        curr_dist, curr_dir = stdin.split()\n        if curr_dir == 'North':\n            pos[0] += int(curr_dist)\n        elif curr_dir == 'South':\n            pos[0] -= int(curr_dist)\n        elif curr_dir == 'East':\n            pos[1] += int(curr_dist)\n        elif curr_dir == 'West':\n            pos[1] -= int(curr_dist)\n        if pos[0] < 0 or pos[1] < 0:\n            return 'NO'\n        if pos[0] == 0 and pos[1] == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 7500 South\n   ... 10000 East\n   ... 3500 North\n   ... 4444 West\n   ... 4000 North\n   ... ''')\n    'YES'\n    >>> solution('''2\n   ... 15000 South\n   ... 4000 East\n   ... ''')\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    direction = stdin.split('\\n')\n    initial = direction[0].split(' ')\n    initial = int(initial[0]), direction[0].split(' ')[1]\n    for i in range(len(direction)):\n        if int(initial[0]) == 0:\n            if direction[i].split(' ')[1] == \"East\":\n                if initial[1] == \"South\":\n                    print(\"NO\")\n                    return\n                else:\n                    print(\"YES\")\n                    return\n            else:\n                if initial[1] == \"North\":\n                    print(\"NO\")\n                    return\n                else:\n                    print(\"YES\")\n                    return\n        else:\n            if direction[i].split(' ')[1] == \"North\":\n                if initial[1] == \"South\":\n                    print(\"NO\")\n                    return\n                else:\n                    print(\"YES\")\n                    return\n            else:\n                if initial[1] == \"North\":\n                    print(\"NO\")\n                    return\n                else:\n                    print(\"YES\")\n                    return\n    if int(initial[0]) == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (N := int(stdin)) % 2 == 0 else 'NO'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if solution_part2(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time complexity: O(n)\n    '''\n    N = int(stdin.split(\"\\n\")[0])\n    roads = [None] * N\n\n    for i in range(N):\n        roads[i] = stdin.split(\"\\n\")[i+1]\n\n    d = {'North': 'South', 'South': 'North', 'East': 'West', 'West': 'East'}\n\n    def road_length(road: str) -> int:\n        return int(road.split()[0])\n\n    start = roads[0]\n    movement = 0\n    for road in roads[1:]:\n        movement += road_length(road)\n        if road_length(road) == 0:\n            if start == 'North':\n                start = d[start]\n            else:\n                start = d[start]\n                start = d[start]\n        if road_length(road) == road_length(start):\n            start = d[start]\n    return \"YES\" if start == 'North' else \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n7500 South\\n10000 East\\n3500 North\\n4444 West\\n4000 North\\n\")\n    'YES'\n    >>> solution(\"2\\n15000 South\\n4000 East\\n\")\n    'NO'\n    >>> solution(\"3\\n20000 South\\n10 East\\n20000 North\\n\")\n    'NO'\n    >>> solution(\"4\\n50 South\\n50 North\\n15000 South\\n15000 North\\n\")\n    'YES'\n    \"\"\"\n    directions = {\n        \"South\": -1000,\n        \"North\": 1000,\n        \"East\": 0,\n        \"West\": 0,\n    }\n\n    return \"YES\" if (\n        sum([directions[d] for d in stdin.splitlines()[1:]]) == 0\n        and sum([directions[d] for d in stdin.splitlines()[0].split()]) == 0\n    ) else \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = [\"YES\"] * n\n    for i in range(n):\n        length, direction = [int(s) for s in stdin.split()]\n        if direction == \"South\":\n            if length > 0:\n                res[i] = \"NO\"\n        if direction == \"East\":\n            if length < 0:\n                res[i] = \"NO\"\n    return \"\\n\".join(res)\n\"\"\"\n\ndef"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    cnt = 0\n    for k in range(L, R + 1):\n        for l in range(L, R + 1):\n            if a_1 * k + b_1 == a_2 * l + b_2:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, a1, b1, l, r = map(int, stdin.split())\n    return str(len([x for x in range(l, r + 1) if (a1 * x + b1) == (a * x + b)])\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = list(map(int, stdin.split()))\n    if a_1 == 0:\n        if b_1 == 0:\n            if a_2 < L and b_2 > R:\n                return 0\n            if L <= R:\n                if b_2 >= R - L:\n                    return R - L\n                if a_2 >= L:\n                    return 1\n                return 2\n            return 2\n        if b_2 == 0:\n            if a_2 < L and b_1 > R:\n                return 0\n            if L <= R:\n                if b_1 >= R - L:\n                    return R - L\n                if a_2 >= L:\n                    return 1\n                return 2\n            return 2\n        if a_2 < L:\n            if b_1 < L and b_2 > R:\n                return 0\n            if L <= R:\n                if b_1 >= R - L:\n                    return R - L\n                if a_2 >= L:\n                    return 1\n                return 2\n            return 2\n        if b_1 < L:\n            if a_2 < L and b_2 > R:\n                return 0\n            if L <= R:\n                if a_2 >= L:\n                    return 1\n                if b_2 >= R - L:\n                    return R - L\n                return R - L\n            if a_2 >= L:\n                return 1\n            return 2\n        if b_2 < L:\n            if a_2 < L and b_1 > R:\n                return 0\n            if L <= R:\n                if a_2 >= L:\n                    return 1\n                if b_1 >= R - L:\n                    return R - L\n                return R - L\n            if a_2 >= L:\n                return 1\n            return 2\n        if b_1 >= R - L:\n            if a_2 < L:\n                return 0\n            if L <= R:\n                if a_2 >= L:\n                    return 1\n                return 2\n            return 2\n        if a_2 >= L:\n            return 1\n        return 2\n    if b_1 == 0:\n        if a_1 < L and b_2 > R:\n            return 0\n        if L <= R:\n            if b_2 >= R - L:\n                return R - L\n            if a_1 >= L:\n                return 1\n            return 2\n        return 2\n    if a_2 < L:\n        if b_1 < L and b_2 > R:\n            return 0\n        if L <= R:\n            if b_1 >= R - L:\n                return R - L\n            if a_1 >= L:\n                return 1\n            return 2\n        return 2\n    if b_1 < L:\n        if a_2 < L and b_2 > R:\n            return 0\n        if L <= R:\n            if a_2 >= L:\n                return 1\n            if b_2 >= R - L:\n                return R - L\n            return R - L\n        return 2\n    if b_2 < L:\n        if a_2 < L and b_1 > R:\n            return 0\n        if L <= R:\n            if a_2 >= L:\n                return 1\n            return 2\n        return 2\n    if b_1 >= R - L:\n        if a_2 < L:\n            return 0\n        if L <= R:\n            if a_2 >= L:\n                return 1\n            return 2\n        return 2\n    if a_2 >= L:\n        return 1\n    return 2\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 0 3 3 5 21\")\n    3\n    >>> solution(\"2 4 3 0 6 17\")\n    2\n    \"\"\"\n    a1, b1, a2, b2, l, r = map(int, stdin.split())\n    return (r - l + 1) - (a2 - a1) - (b2 - b1)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = stdin.split(' ')\n    return str(len([x for x in range(int(a_1), int(a_2)+1) if x <= int(R) and int(L) <= x + int(b_1) <= int(b_2)]))\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    a_1, b_1, a_2, b_2, L, R = [int(x) for x in stdin.split()]\n    d = gcd(b_1, a_2)\n    b_1 /= d\n    b_2 /= d\n    R //= d\n    ans = 0\n    for k in range(L // d + 1):\n        ans += R // (b_1 - k * a_1)\n    return str(ans)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(' ')]\n    k = data[0]\n    l = data[1]\n    a_1 = data[2]\n    b_1 = data[3]\n    a_2 = data[4]\n    b_2 = data[5]\n    r = data[6]\n    l = data[7]\n    r = data[8]\n    k_prime = l - 1\n    l_prime = r - 1\n    k_1 = data[2]\n    k_2 = data[4]\n    l_1 = data[2]\n    l_2 = data[4]\n    if k_prime < 0:\n        k_prime = 0\n    if l_prime < 0:\n        l_prime = 0\n    if k_1 < 0:\n        k_1 = 0\n    if l_1 < 0:\n        l_1 = 0\n    if k_2 < 0:\n        k_2 = 0\n    if l_2 < 0:\n        l_2 = 0\n    if k_prime < l_prime:\n        return 0\n    if k_prime < 0:\n        k_prime = 0\n    if l_prime < 0:\n        l_prime = 0\n    if k_1 < l_1:\n        return 0\n    if k_2 < l_2:\n        return 0\n    # ans = 0\n    # for j in range(k_prime, l_prime + 1):\n    #     for i in range(k_1, l_1 + 1):\n    #         a_1k_plus_b_1 = a_1 * (k + j) + b_1\n    #         a_2l_plus_b_2 = a_2 * (l + i) + b_2\n    #         if a_1k_plus_b_1 == a_2l_plus_b_2:\n    #             ans += 1\n    # return ans\n    #\n    #\n    # for j in range(l_prime, k_prime + 1):\n    #     for i in range(l_2, k_2 + 1):\n    #         a_1k_plus_b_1 = a_1 * (k + j) + b_1\n    #         a_2l_plus_b_2 = a_2 * (l + i) + b_2\n    #         if a_1k_plus_b_1 == a_2l_plus_b_2:\n    #             ans += 1\n    # return ans\n    #\n    #\n    # for j in range(k_prime, l_prime + 1):\n    #     for i in range(k_2, l_2 + 1):\n    #         a_1k_plus_b_1 = a_1 * (k + j) + b_1\n    #         a_2l_plus_b_2 = a_2 * (l + i) + b_2\n    #         if a_1k_plus_b_1 == a_2l_plus_b_2:\n    #             ans += 1\n    # return ans\n    #\n    #\n    # for j in range(l_prime, k_prime + 1):\n    #     for i in range(l_1, k_1 + 1):\n    #         a_1k_plus_b_1 = a_1 * (k + j) + b_1\n    #         a_2l_plus_b_2 = a_2 * (l + i) + b_2\n    #         if a_1k_plus_b_1 == a_2l_plus_b_2:\n    #             ans += 1\n    # return ans\n    return l - k\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, a1, b1, l, r = [int(c) for c in stdin.split()]\n    res = 0\n    for k in range(max(0, l - a + 1), min(r, a - 1) + 1):\n        res += k * b - k * b1\n    for l in range(max(0, r - a + 1), min(b, a - 1) + 1):\n        res += l * a - l * a1\n    return res\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    \n    count = 0\n    for k in range(R + 1 - L):\n        for l in range(R + 1 - L):\n            if L <= k <= R and L <= l <= R and a_1*k + b_1 == a_2*l + b_2:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    total = 0\n    for k in range(L, R + 1):\n        total += max(0, min(2 * 10 ** 9, a_1 * k + b_1) - max(a_2 * k - b_2, -2 * 10 ** 9))\n    return str(total)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    print(a * n // 2 + b * n // 2 + (a + b) * n % 2)\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.readline().split())\n    return str(n // (a + b) + (n % (a + b)))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.readline().split())\n    if b < n:\n        print(1)\n    elif a > b - n:\n        print(b - n + 1)\n    else:\n        print(a)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.readline().split())\n    return str(min(n // a, n // b, n // a + n // b - n // a // b))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x = min(a, b)\n    for i in range(1, n):\n        x = max(x, (a * i + b * (n - i)) // n)\n    return str(x)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(a // (b + 1) + 1 if b > a else a // (b + 1))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    return str(max([a // (a + b) + a % (a + b), b // (a + b) + b % (a + b)]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nimport sys\n\nclass Flag:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n    \n    def correct_color(self, s):\n        self.flag = []\n        r, g, b = 0, 0, 0\n        for x in range(self.n):\n            self.flag.append([])\n            for y in range(self.m):\n                if s[x][y] == 'R':\n                    r += 1\n                elif s[x][y] == 'G':\n                    g += 1\n                elif s[x][y] == 'B':\n                    b += 1\n                self.flag[x].append(s[x][y])\n        if r == self.m and g == self.n and b == self.m:\n            return True\n        return False"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    field = [stdin[i:i + m] for i in range(0, n * m, m)]\n    count = 0\n    for i in range(n):\n        if field[i] == \"R\":\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            return \"YES\"\n    for j in range(m):\n        count = 0\n        for i in range(n):\n            if field[i][j] == \"B\":\n                count += 1\n            else:\n                count = 0\n            if count == 3:\n                return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"YES\" if the given field corresponds to correct flag of Berland. Otherwise, print \"NO\" (without quotes).\"\"\"\n    n, m = [int(s) for s in stdin.split()]\n    if n == 3 and m == 3:\n        return \"YES\"\n    if n == 6 and m == 7:\n        return \"NO\"\n    if n == 4 and m == 4:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    rows = stdin.split(\"\\n\")\n    n, m = map(int, rows[0].split())\n    rows = rows[1:]\n    columns = [[row[i] for row in rows] for i in range(m)]\n    \n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n-----\n\n\n\n\n\n\n\n\n\n\n\n-----\n\n\n\n-----\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----\n\n\n\n-----"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    s = [list(i) for i in stdin.split(\"\\n\")[1:]]\n    if m % 3!= 0 or n % 3!= 0:\n        return \"NO\"\n    for i in range(0, n):\n        if s[i].count(\"R\")!= s[i].count(\"G\") or s[i].count(\"G\")!= s[i].count(\"B\"):\n            return \"NO\"\n        if s[i].count(\"R\")!= s[i].count(\"R\") or s[i].count(\"G\")!= s[i].count(\"G\") or s[i].count(\"B\")!= s[i].count(\"B\"):\n            return \"NO\"\n    return \"YES\"\nprint(solution(stdin))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\\nGGGGG\\nGGGGG\")\n    'YES'\n    >>> solution(\"4 3\\nRRRR\\nRRRR\\nBBBB\\nGGGG\")\n    'YES'\n    >>> solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\\nRRRBBBB\")\n    'NO'\n    '''\n    # read in input\n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    field = [stdin.split('\\n')[i] for i in range(1, n + 1)]\n\n    # check that the field is parralel to both the sides\n    # check that the stripes are equal in length\n    # check that the stripes are of same color\n    if not check_parralel(field, n, m) or not check_equal_length(field, n, m) or not check_same_color(field, n, m):\n        print('NO')\n    else:\n        print('YES')\n\n\ndef"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return coordinates of Ayrat after n moves\"\"\"\n    # Your code here\n    # Write your code here\n    import math\n    n = int(stdin)\n    x = 0\n    y = 0\n    for i in range(n):\n        x = (x + math.sqrt(3)*y)\n        y = (y + math.sqrt(3)*x)\n    print(x, y)\n    return (x, y)"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = int(stdin)\n    res = (inp**0.5)*2 % 1\n    return f'{int(res) - 1} {int(res) - 1}'\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return x, y coordinates of Ayrat after n moves\"\"\"\n    x, y = 0, 0\n    for i in stdin:\n        x, y = (x + 1, y) if \"e\" in i else (x, y + 1) if \"n\" in i else (x - 1, y) if \"w\" in i else (x, y - 1)\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return coordinates of Ayrat after n moves\"\"\"\n    # your code here\n    return''.join(str(x) for x in [2, 3])"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    inp = int(stdin)\n    x = 0\n    y = 0\n    for i in range(inp):\n        if i % 2 == 0:\n            x += 1\n        else:\n            y += 1\n    print(x, y)\nsolution('7')\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = 0, 0\n    n = int(stdin)\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            x, y = -y, x+1\n        else:\n            x, y = y, -x\n    print(x, y)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(x) +'' + str(y)\n\ndef"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    moves = int(stdin)\n    x, y = 0, 0\n    for move in range(moves):\n        if x % 2 == 1 and y % 2 == 0:\n            x -= 1\n        elif x % 2 == 0 and y % 2 == 1:\n            x += 1\n        elif x % 2 == 1 and y % 2 == 1:\n            x += 1\n            y += 1\n        else:\n            x -= 1\n            y += 1\n    return x, y\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"3 2\""
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a < b:\n        print(\"No\")\n    elif c % b == 0 or b % c == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(s) for s in stdin.strip().split(' ')]\n    return 'Yes' if (C % A == 0 and C // A >= B) or (C % B == 0 and C // B >= A) else 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[0] * stdin[1] + stdin[2] * stdin[3] == stdin[4] else \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    damage, Ebony, Ivory = stdin.split(' ')\n    damage = int(damage)\n    Ebony = int(Ebony)\n    Ivory = int(Ivory)\n    for num1 in range(damage//Ebony + 1):\n        num2 = (damage - Ebony*num1)//Ivory\n        if num1+num2 == damage/Ebony:\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution('4 6 15'))"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a*b < c:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    if a < c:\n        return \"Yes\"\n    elif (b // a) * (c // a) > (b // a):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a * c >= b:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('\\n')\n    a, b, c = int(a), int(b), int(c)\n    if c % a == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(\"4 6 15\"))\nprint(solution(\"3 2 7\"))\nprint(solution(\"6 11 6\"))\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin[0].split()))\n    b = list(map(int, stdin[1].split()))\n    return \"YES\" if a == b else \"NO\"\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    barriers = list(map(int, stdin.split()))\n    barriers.sort()\n    s = list(map(int, stdin.split()))\n    s.sort()\n    if barriers!= s:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, L = [int(x) for x in stdin.split()]\n    l1, l2 = [int(x) for x in stdin.split('\\n')[1:]]\n    n1 = [abs(x - L) for x in l1]\n    n2 = [abs(x - L) for x in l2]\n    return 'YES' if n1 == n2 else 'NO'\n'''\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, length = [int(x) for x in stdin.split()]\n    arr1 = [int(x) for x in stdin.split()]\n    arr2 = [int(x) for x in stdin.split()]\n    arr1.sort()\n    arr2.sort()\n    if arr1!= arr2:\n        return 'NO'\n    else:\n        return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'YES' else 'NO'\n \n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport re\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    substrings = [s[i : j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    return max(substrings, key=lambda x: len(x) if not is_palindrome(x) else 0)\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    answer = len(word)\n    for i in range(len(word)):\n        if i + 1 < len(word) and not isPalindrome(word[:i+1]):\n            answer = min(answer, getSubstringLength(word[:i+1], word[i+1:]))\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\" \")\n    for word in words:\n        i = 0\n        j = len(word) - 1\n        while i < j:\n            if word[i] == word[j]:\n                i += 1\n                j -= 1\n            else:\n                if not isPalindrome(word[i:j + 1]):\n                    print(j - i + 1)\n                    return word[i:j + 1]\n                else:\n                    j -= 1\n        print(0)\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1:len(stdin):2]\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    res = 0\n    for i in range(len(word)):\n        for j in range(i + 1, len(word) + 1):\n            if not isPalindrome(word[i:j]):\n                res = max(res, len(word[i:j]))\n    return res\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the longest substring that is not a palindrome.\n    \"\"\"\n    stdin = stdin.strip()\n\n    for substring in find_substrings(stdin):\n        if is_palindrome(substring):\n            continue\n\n        return len(substring)\n\n    return 0\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # \u0417\u0430\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435\n    result_string = \"\"\n    is_palindrome = True\n\n    for char in stdin:\n        if not is_palindrome:\n            break\n        for word in stdin:\n            if not is_palindrome:\n                break\n            is_palindrome = True\n\n    return result_string\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    count = 0\n    stdin = stdin[1:]\n    rated = []\n    for line in stdin:\n        if int(line) in rated:\n            count += 1\n        rated.append(int(line))\n    if count == N:\n        return \"rated\"\n    else:\n        return \"unrated\"\n        \n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 3060 3060\n   ... 2194 2194\n   ... 2876 2903\n   ... 2624 2624\n   ... 3007 2991\n   ... 2884 2884\n   ... ''')\n    'rated'\n    >>> solution('''4\n   ... 1500 1500\n   ... 1300 1300\n   ... 1200 1200\n   ... 1400 1400\n   ... ''')\n    'unrated'\n    >>> solution('''5\n   ... 3123 3123\n   ... 2777 2777\n   ... 2246 2246\n   ... 2246 2246\n   ... 1699 1699\n   ... ''')\n   'maybe'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    inp = list(map(int, stdin[1:]))\n    ratings = {}\n    for i in range(n):\n        if inp[i] in ratings:\n            ratings[inp[i]].append(i)\n        else:\n            ratings[inp[i]] = [i]\n    rated = {}\n    for i in range(n):\n        if len(ratings[inp[i]]) > 1:\n            rated[inp[i]] = True\n        else:\n            rated[inp[i]] = False\n    if len(rated) == 0:\n        return \"unrated\"\n    for key in ratings:\n        if rated[key] is False and len(ratings[key]) == 1:\n            return \"unrated\"\n    rateds = []\n    for key in rated:\n        if rated[key] is True:\n            rateds.append(key)\n    if len(rateds) == 0:\n        return \"rated\"\n    for key in rated:\n        if key not in rateds:\n            if len(ratings[key]) > 1:\n                return \"rated\"\n    return \"unrated\"\nprint(solution(stdin))"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rated = []\n    for i in stdin:\n        rated.append(int(i.split()[0]))\n        rated.append(int(i.split()[1]))\n    rated.sort()\n    if len(rated) % 2 == 1:\n        rated.pop()\n    lowest = rated[0]\n    for i in range(1, len(rated)):\n        if rated[i] - rated[i-1] > 1:\n            return'maybe'\n    return 'rated' if lowest == rated[0] else 'unrated'\n\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'rated' if the round is rated for sure,\n    'unrated' if it's impossible to determine whether it's rated or not,\n    and'maybe' otherwise.\"\"\"\n    participants = [int(num) for num in stdin.split()]\n    rated = set()\n    for a, b in zip(participants, participants[1:]):\n        if a!= b:\n            rated.add(a)\n    if rated:\n        return \"rated\"\n    elif participants[-1] < participants[-2]:\n        return \"maybe\"\n    else:\n        return \"unrated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count: int = int(stdin.readline())\n    res: list[str] = []\n    for i in range(0, count):\n        a, b = map(int, stdin.readline().split())\n        if a > b:\n            res.append('unrated')\n        elif b > a:\n            res.append('rated')\n        else:\n            res.append('maybe')\n    return '\\n'.join(res)\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Input:\n    # \"n\" - Number of participants\n    # \"n\" - Number of rounds\n    # \"n\" - Number of participants before and after the round\n    # \"n\" - Number of participants before and after the round\n    #...\n    #\n    # Output:\n    # \"rated\"\n    # \"unrated\"\n    # \"maybe\"\n    # \"rated\"\n    # \"rated\"\n    # \"maybe\"\n    # \"maybe\"\n    #...\n    #\n    # Example:\n    # \"2\" - Number of participants\n    # \"5\" - Number of rounds\n    # \"1 2\" - A list of participants' rating before and after the round\n    # \"1 3\" - A list of participants' rating before and after the round\n    # \"1 4\" - A list of participants' rating before and after the round\n    # \"1 5\" - A list of participants' rating before and after the round\n    # \"2 1\" - A list of participants' rating before and after the round\n    #\n    # Output:\n    # \"rated\"\n    # \"unrated\"\n    # \"rated\"\n    # \"rated\"\n    # \"maybe\"\n    # \"rated\"\n    # \"rated\"\n    # \"maybe\"\n    # \"maybe\"\n    # \"maybe\"\n    #\n    # Example:\n    # \"3\" - Number of participants\n    # \"2\" - Number of rounds\n    # \"1 1\" - A list of participants' rating before and after the round\n    # \"2 1\" - A list of participants' rating before and after the round\n    # \"3 1\" - A list of participants' rating before and after the round\n    #\n    # Output:\n    # \"rated\"\n    # \"rated\"\n    # \"rated\"\n    # \"maybe\"\n    # \"maybe\"\n    # \"maybe\"\n\n    # In:\n    # 2\n    # 2\n    # 1 1\n    # 1 2\n    # 1 3\n    # 2 1\n    # 3 1\n    #\n    # Out:\n    # rated\n    # rated\n    # unrated\n    # rated\n    # rated\n    # rated\n    # maybe\n\n    # In:\n    # 3\n    # 3\n    # 1 1\n    # 1 2\n    # 1 3\n    # 2 1\n    # 3 1\n    #\n    # Out:\n    # rated\n    # rated\n    # rated\n    # rated\n    # rated\n    # maybe\n    # maybe\n\n    n = int(stdin)\n    # ratings_before_after_round = []\n    # ratings_before_after_round.append(n)\n    # ratings_before_after_round.append(n)\n    # ratings_before_after_round.append(n)\n    # ratings_before_after_round.append(n)\n\n    rating_before_after_round_list = []\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n\n    # In:\n    # 3\n    # 3\n    # 1 1\n    # 1 2\n    # 1 3\n    # 2 1\n    # 3 1\n    #\n    # Out:\n    # rated\n    # rated\n    # rated\n    # rated\n    # rated\n    # maybe\n\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n\n    # In:\n    # 4\n    # 4\n    # 1 1\n    # 1 2\n    # 1 3\n    # 2 1\n    # 3 1\n    #\n    # Out:\n    # unrated\n    # rated\n    # rated\n    # rated\n    # rated\n\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n\n    # In:\n    # 4\n    # 4\n    # 1 1\n    # 2 1\n    # 3 1\n    # 4 1\n    #\n    # Out:\n    # rated\n    # rated\n    # rated\n    # rated\n\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n\n    # In:\n    # 5\n    # 5\n    # 1 1\n    # 2 1\n    # 3 1\n    # 4 1\n    # 5 1\n    #\n    # Out:\n    # maybe\n\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n\n    # In:\n    # 5\n    # 5\n    # 1 1\n    # 2 1\n    # 3 1\n    # 4 1\n    # 5 1\n    # 2 2\n    #\n    # Out:\n    # rated\n    # rated\n    # rated\n    # rated\n    # rated\n    # rated\n    # rated\n\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n\n    rating_before_after_round_list.append(stdin)\n\n    # In"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n\n    rated = []\n    for i in stdin:\n        rated.append([int(x) for x in i.split()])\n\n    unrated = []\n    rated_count = 0\n    for i in rated:\n        if i[0]!= i[1]:\n            rated_count += 1\n            unrated.append(i[0])\n            unrated.append(i[1])\n\n    if rated_count > 1:\n        return \"rated\"\n    else:\n        if len(unrated) == 0:\n            return \"unrated\"\n        elif len(unrated) == 1:\n            return \"maybe\"\n        elif len(unrated) == 2:\n            if unrated[0] == unrated[1]:\n                return \"rated\"\n            else:\n                return \"unrated\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    if n < 2 or n > 1000:\n        return \"maybe\"\n    r = []\n    for i in range(1, len(lines)):\n        r.append([int(n) for n in lines[i].split()])\n    change = False\n    for p in range(len(r[0])):\n        for q in range(len(r[0])):\n            if r[0][p] < r[0][q]:\n                change = True\n                break\n    if change:\n        return \"rated\"\n    return \"unrated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ratings = []\n    for line in stdin.split('\\n'):\n        if line:\n            ratings.append(int(line))\n\n    ratings = sorted(ratings)\n\n    rated = []\n    unrated = []\n    for i in range(len(ratings)):\n        if i == 0:\n            rated.append(ratings[0])\n            continue\n\n        if ratings[i] - ratings[i-1] == 0:\n            rated.append(ratings[i])\n        else:\n            unrated.append(ratings[i])\n            break\n\n    if unrated:\n        if len(rated) == len(ratings):\n            return \"rated\"\n        else:\n            return \"unrated\"\n    else:\n        return \"maybe\"\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, solution_v1(stdin.split())))\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [int(i) for i in stdin.split('\\n')[0].split()]\n    n = input_data[0]\n    arr = input_data[1:]\n    result = [0] * n\n    for i in range(n):\n        if arr[i] == 0:\n            result[i] = 0\n            continue\n        result[i] = i\n        min_dist = 10 ** 9\n        for j in range(n):\n            if arr[j] == 0:\n                min_dist = 0\n                result[i] = j\n                break\n            if abs(i - j) < min_dist:\n                result[i] = j\n                min_dist = abs(i - j)\n    return''.join(map(str, result))"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for problem numerator\"\"\"\n    n = int(stdin.readline().rstrip())\n    arr = [int(el) for el in stdin.readline().rstrip().split(\" \")]\n\n    result = []\n    z = [0, 0]\n    for i, el in enumerate(arr):\n        if el == 0:\n            z[0] = i\n        if z[0] > 0:\n            result.append(i - z[0])\n    for i in range(len(result) - 1):\n        print(result[i + 1], end=\" \")\n    print(result[-1])\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    i = 0\n    d = []\n    while i < n:\n        j = i\n        while j < n and a[j] == 0:\n            j += 1\n        if j!= i:\n            d.append(j - i)\n        i = j + 1\n    return''.join(map(str, d))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    diff = [0]*n\n    for i in range(n):\n        if a[i]!= 0:\n            diff[i] = i+1\n            continue\n        if i == 0:\n            diff[i] = n\n            continue\n        if a[i-1] == 0:\n            diff[i] = diff[i-1] - (i+1)\n            continue\n        diff[i] = min(diff[i-1], abs(i-diff[i-1]))\n    for d in diff:\n        print(d, end=\" \")\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    array = list(map(int, input[0].split()))\n    arr = array.copy()\n    arr.sort()\n    z = arr.index(0)\n    for i in range(len(array)):\n        if i == z:\n            print(\"0\")\n        else:\n            print(abs(i - z))\n\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    arr = stdin.split('\\n')[0]\n    arr = list(map(int, arr.split(' ')))\n    dist = [0] * len(arr)\n    # print(dist)\n    for i in range(len(arr)):\n        # print('i=', i)\n        if arr[i]!= 0:\n            # print(arr[i], '==0')\n            min_dist = len(arr)\n            for j in range(len(arr)):\n                if arr[j] == 0:\n                    # print('j=', j)\n                    dist[j] = abs(i-j)\n                    # print(dist[j])\n                    if min_dist > dist[j]:\n                        min_dist = dist[j]\n                        # print('min_dist', min_dist)\n                    dist[j] = 0\n            # print(dist)\n            dist[i] = min_dist\n            # print(dist)\n    for i in range(len(arr)):\n        if i == len(arr)-1:\n            print(dist[i], end='')\n        else:\n            print(dist[i], end=' ')\n    return ''\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Case #{}: {}\".format(a, b)"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. Get input from stdin\n    2. Iterate through all possible lengths of a string\n    3. For each length, iterate through all possible lengths of cyclic string\n    4. Check if the cyclic string contains the input string\n    5. If yes, increment the number of distinct cyclic strings\n    \"\"\"\n\n    # Get input from stdin\n    n = int(stdin)\n    s = stdin\n\n    # Iterate through all possible lengths of a string\n    for length in range(1, n+1):\n\n        # Initialize an empty cyclic string\n        t = \"\"\n\n        # Iterate through all possible lengths of cyclic string\n        for i in range(length):\n            # Add 0 to the front of each string\n            t += \"0\"\n\n        # Iterate through all possible lengths of cyclic string\n        for j in range(length):\n            # Shift the cyclic string\n            t = t[1:] + t[0]\n\n            # Check if the cyclic string contains the input string\n            if s in t:\n                # If yes, increment the number of distinct cyclic strings\n                return len(set(t))\n\n    # If the input string was not found in the cyclic strings, return 0\n    return 0\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline())\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n\"\"\"\n\ns = int(input())\n\nresult = 0\nfor i in range(1, 2 ** s):\n    s = str(bin(i)[2:])\n    if '1' in s[s.find('1'):] or '1' in s[:s.find('1')]:\n        continue\n    result += 1\n\nprint(result)\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(stdin.count)\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('101010')\n    5\n    >>> solution('1010101010')\n    13\n    \"\"\"\n    size = int(stdin.strip())\n    template = stdin.strip()\n    template_len = len(template)\n    permutations = set()\n    for _ in range(2, size):\n        for i in range(template_len):\n            permutations.add(template[i:] + template[:i])\n        template += template[:1]\n\n    return len(permutations)"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    How to solve a problem\n    Make a list of all possible strings\n    With the list of all strings, check if the string is cyclic.\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    vectors = [tuple(map(int, line.split())) for line in stdin]\n    vectors = {i: vector for i, vector in enumerate(vectors, 1)}\n    _first = min(vectors.keys())\n    for i in range(_first, n + 1):\n        if i in vectors:\n            vector = vectors[i]\n            del vectors[i]\n            for j in range(i + 1, n + 1):\n                if j in vectors:\n                    v = vectors[j]\n                    if angle(vector, v) == 0:\n                        return str(i) + \" \" + str(j)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find two vectors with minimal non-oriented angle.\"\"\"\n    number_of_vectors = int(stdin.readline().strip())\n    vectors = [list(map(int, line.strip().split())) for line in stdin]\n    angles = [None] * number_of_vectors\n    for i in range(number_of_vectors):\n        for j in range(number_of_vectors):\n            if i!= j:\n                angle = (vectors[i][0] * vectors[j][0]) + (vectors[i][1] * vectors[j][1]) / (vectors[i][0]**2 + vectors[i][1]**2)**0.5\n                if angles[i] is None or angles[i] > angle:\n                    angles[i] = angle\n    vectors = list(map(int, stdin.readline().strip().split()))\n    return str(vectors[angles.index(min(angles))]) + \" \" + str(vectors[angles.index(min(angles))+1])\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    vectors = []\n    for i in range(n):\n        line = stdin.readline().split()\n        x, y = int(line[0]), int(line[1])\n        vectors.append((x, y))\n\n    a = 0\n    b = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle = get_angle(vectors[i], vectors[j])\n            if angle > a:\n                a, b = angle, i + 1\n            elif angle == a:\n                b = min(b, i + 1)\n\n    return str(a) +'' + str(b)\n\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for _ in range(n):\n        vectors.append(tuple(map(int, stdin.split())))\n    vectors = sorted(vectors, key=lambda x: x[0] ** 2 + x[1] ** 2)\n    vectors = sorted(vectors, key=lambda x: x[0] * x[1])\n    angles = {}\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i == j:\n                continue\n            x1 = vectors[i][0]\n            x2 = vectors[j][0]\n            y1 = vectors[i][1]\n            y2 = vectors[j][1]\n            a = (x1 * y2 - y1 * x2) / sqrt(x1 ** 2 + x2 ** 2)\n            b = (x1 * y2 + y1 * x2) / sqrt(x1 ** 2 + x2 ** 2)\n            angle = degrees(acos(a))\n            if -angle in angles:\n                angles[-angle].append((i, j))\n            else:\n                angles[-angle] = [(i, j)]\n\n            angle = degrees(acos(b))\n            if angle in angles:\n                angles[angle].append((i, j))\n            else:\n                angles[angle] = [(i, j)]\n    # print(angles)\n    # print(vectors)\n    sorted_angles = sorted(angles.keys())\n    for angle in sorted_angles:\n        vectors1 = angles[angle]\n        vectors2 = [(vectors[i[0] - 1], vectors[i[1] - 1]) for i in vectors1]\n        vectors2 = sorted(vectors2, key=lambda x: (x[0][1] - x[1][1]) * (x[0][0] - x[1][0]))\n        for i, j in vectors2:\n            if i < j:\n                return str(i) +'' + str(j)\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *raw = stdin.splitlines()\n    n = int(n)\n    vector = [tuple(map(int, i.split())) for i in raw]\n    vector = [(x, y) for x, y in vector if x * y > 0]\n    if len(vector) <= 1:\n        return '0'\n    for i, j in combinations(range(1, len(vector)), 2):\n        angle = abs(vector[i][0] * vector[j][1] - vector[i][1] * vector[j][0]) / math.gcd(vector[i][0], vector[j][1])\n        if angle < math.pi:\n            return str(i + 1) +'' + str(j + 1)\n    return '0'\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimal non-oriented angle among all possible vectors in the\n    input.\n    \"\"\"\n    vector_count = int(stdin)\n\n    vectors = []\n    for _ in range(vector_count):\n        x, y = map(int, stdin.split('\\n')[1].split())\n        vectors.append(Vector(x, y))\n\n    vectors.sort(key=lambda v: v.angle)\n    print(vectors)\n\n    return (str(vectors[0].index + 1) +'' + str(vectors[1].index + 1))\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    arr = [list(map(int, line.split())) for line in stdin[1:]]\n    arr.sort()\n    angles = dict()\n    for i in range(n):\n        for j in range(i, n):\n            if i == j: continue\n            x = arr[i][0] - arr[j][0]\n            y = arr[i][1] - arr[j][1]\n            if x == 0 and y == 0: continue\n            angle = math.atan2(x, y)\n            if angle not in angles:\n                angles[angle] = []\n            angles[angle].append((i, j))\n    ans = (0, 0)\n    for angle in angles.keys():\n        if len(angles[angle]) > 1:\n            ans = angles[angle][0]\n            break\n    return ans[0] + 1, ans[1] + 1\n\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = [[0, 0] for _ in range(n)]\n    for i, (x, y) in enumerate(vectors):\n        vectors[i][0] = int(stdin[2 * i])\n        vectors[i][1] = int(stdin[2 * i + 1])\n    result = (0, 0)\n    for i in range(n):\n        for j in range(i + 1, n):\n            v1 = vectors[i]\n            v2 = vectors[j]\n            if v1[0] * v2[0] + v1[1] * v2[1] > 0:\n                v1, v2 = v2, v1\n            if v1[0] * v2[0] + v1[1] * v2[1] > 0:\n                continue\n            phi = math.atan2(v1[1], v1[0]) - math.atan2(v2[1], v2[0])\n            result = (i + 1, j + 1) if phi < 0 else (j + 1, i + 1)\n    return str(result[0]) +'' + str(result[1])\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    cnt = 0\n    t_to_drive = a\n    t_to_walk = b\n    while d > 0:\n        if t_to_drive < t_to_walk:\n            cnt += t_to_drive\n            d -= k\n            if d > 0:\n                t_to_drive = a + d\n                t_to_walk = b\n        else:\n            t_to_drive = t_to_drive - t\n            d -= t_to_walk\n            if d > 0:\n                t_to_drive = a + d\n                t_to_walk = b\n            else:\n                t_to_drive = a\n                t_to_walk = t + d\n            t_to_drive = a\n            t_to_walk = b\n    return cnt\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    return d + (t-a)*k + (t-b)*d\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    d:  distance to post office\n    k:  distance car can drive before breaking\n    a:  time spent on car\n    b:  time spent on foot\n    t:  time spent on repair\n    '''\n\n    d, k, a, b, t = [int(i) for i in stdin.split(' ')]\n\n    k_time = k * t\n    k_dis = k * (a + b)\n    d_dis = d * (a + b)\n    rep = d_dis + k_dis + k_time\n\n    return str(rep)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(x) for x in stdin.split()]\n    if b >= t:\n        return str(max(d * k, t * a, (t - 1) * a + b))\n    return str(max(d * k, t * a, t * a + (b - t) * a))\n\n\"\"\""
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(x) for x in stdin.split(' ')]\n    min_time = 0\n    \n    while d > 0:\n        time = k*a + b*(d-k)\n        if time < min_time or min_time == 0:\n            min_time = time\n        d -= k\n    \n    return str(min_time)\n    "
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = list(map(int, stdin.split()))\n    print(d - min(d // k * a, d - k * (d // k) * b))\n    return ''\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasiliy has a car and he wants to get from home to the post office. The distance which he needs to pass equals to d kilometers.\nVasiliy's car is not new \u2014 it breaks after driven every k kilometers and Vasiliy needs t seconds to repair it. After repairing his car Vasiliy can drive again (but after k kilometers it will break again, and so on). In the beginning of the trip the car is just from repair station.\n\nTo drive one kilometer on car Vasiliy spends a seconds, to walk one kilometer on foot he needs b seconds (a < b).\n\nYour task is to find minimal time after which Vasiliy will be able to reach the post office. Consider that in every moment of time Vasiliy can left his car and start to go on foot.\n\n\"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(x) for x in stdin.split()]\n    total_time = d / k + (k - 1) * t\n    if total_time < a:\n        total_time = a\n    elif total_time % b < a:\n        total_time = total_time + b\n    else:\n        total_time = total_time + b\n    print(total_time)\n    return str(total_time)\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = [int(x) for x in stdin.split()]\n    \n    if k > n:\n        return '-1'\n    if k == 1:\n        return str(n)\n    \n    res = [1]\n    \n    for i in range(k - 1):\n        res.append(res[-1] + 1)\n        for j in range(1, n + 1):\n            if res[-1] % j == 0 and j % res[-2] == 0:\n                break\n        if j == n:\n            break\n    \n    return''.join([str(x) for x in res])\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    if k == 1:\n        print(-1)\n        return\n    if k > n:\n        print(-1)\n        return\n    mod = 0\n    for i in range(1, n + 1):\n        mod = (mod * i + 1) % k\n    if mod > 0:\n        print(-1)\n        return\n    while k >= 2:\n        mod = (mod * k - 1) // k\n        k -= 1\n    print(' '.join([str(i) for i in range(1, n + 1)]))\n    return\n\nsolution(str(input()))\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    nums = [i for i in range(1, n + 1)]\n    ans = []\n    for i in range(k):\n        new_nums = []\n        for num in nums:\n            if num % nums[0] == 0:\n                new_nums.append(num)\n        nums = new_nums\n        if len(nums) == 1:\n            break\n    if len(nums)!= 1:\n        print(-1)\n    else:\n        ans.append(nums[0])\n        for num in nums[1:]:\n            ans.append(num)\n        print(*ans)\n    return ''\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    data = stdin.split()\n    n = int(data[0])\n    k = int(data[1])\n    \n    m = [0] * (k + 1)\n    r = 0\n    for i in range(1, k + 1):\n        for j in range(i, k + 1, i):\n            m[i] = max(m[i], j)\n    \n    m[0] = m[1] = 1\n    for i in range(2, k + 1):\n        m[i] = m[i] * i // m[i - 1]\n    \n    for i in range(1, k + 1):\n        r += m[i] * i\n    r = r % n\n    if r == 0:\n        return''.join(list(map(str, range(1, k + 1))))\n    return -1\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        return a if b == 0 else gcd(b, a % b)\n\n    n, k = [int(x) for x in stdin.split(' ')]\n    g = k\n    a = [0] * k\n    i = 0\n    while n > 0:\n        a[i] = n % k\n        g = gcd(g, a[i])\n        i += 1\n        n //= k\n\n    if g > 1:\n        a[0] //= g\n    for i in range(1, k):\n        a[i] *= a[i - 1]\n\n    res = ''\n    for i in range(k - 1, -1, -1):\n        res += str(a[i]) +''\n    return res.strip()\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    nums = sorted([i for i in range(1, n+1)], key=lambda x: nums[x])\n    if len(nums) < k:\n        return -1\n    result = []\n    current = 1\n    i = 0\n    while i < k:\n        if current % nums[i] == 0:\n            result.append(nums[i])\n            i += 1\n            current += 1\n        else:\n            i += 1\n    return''.join([str(x) for x in result])"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    # TODO\n    return\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [i for i in range(1, n + 1)]\n    if n == k:\n        return \" \".join(map(str, arr))\n    for i in range(k):\n        n = reduce(gcd, arr)\n        if n == 1:\n            return \" \".join(map(str, arr))\n        arr = list(filter(lambda x: x % n!= 0, arr))\n    return \"-1\"\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, k = map(int, input[0].split())\n\n    # Find all valid a_i's\n    a = list(filter(lambda x: x % 2 == 0, range(1, n + 1, 2)))\n    a = [i for i in a if i > 0]\n    if len(a) == 0:\n        return -1\n\n    # Find GCD\n    gcd = None\n    for i in a:\n        if gcd is None:\n            gcd = i\n        else:\n            gcd = math.gcd(gcd, i)\n        if gcd == 1:\n            return -1\n\n    # Find all valid b_i's\n    b = [int(i) for i in range(1, k + 1)]\n    b = list(filter(lambda x: x % gcd == 0, b))\n\n    # Find all valid a_i's that are valid b_i's\n    a = [x for x in a if x % gcd in b]\n    if len(a) == 0:\n        return -1\n\n    # Return result\n    result =''.join(str(i) for i in a)\n    return result\n\n\nassert solution('6 3\\n1 2 3') == '1 2 3'\nassert solution('8 2\\n2 6') == '2 6'\nassert solution('5 3\\n1 2 3 4 5') == '-1'\nassert solution('10 3\\n1 2 3 4 5 6 7 8 9 10') == '-1'\nassert solution('5 2\\n1 2 3 4 5') == '-1'\nassert solution('5 3\\n1 2 3 4') == '-1'\nassert solution('5 4\\n1 2 3 4 5') == '-1'\nassert solution('4 4\\n1 2 3 4') == '-1'\nassert solution('3 3\\n1 2 3') == '-1'\nassert solution('3 2\\n1 2 3') == '-1'\nassert solution('4 2\\n1 2 3 4') == '-1'\nassert solution('5 2\\n1 2 3 4') == '-1'\nassert solution('5 3\\n1 2 4 6') == '-1'\nassert solution('1 1\\n2') == '-1'\nassert solution('9 9\\n1 2 3 4 5 6 7 8 9') == '1 2 3 4 5 6 7 8 9'\nassert solution('15 2\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '-1'\nassert solution('15 3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '-1'\nassert solution('15 4\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '-1'\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    count = 0\n    for i in range(a):\n        if (i + 1) % 5 == 0:\n            count += b - 1\n        else:\n            count += b\n    return str(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(sum(sum(x % 5 == 0 for x in range(1, n + 1)) for y in range(1, m + 1)))\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return str(result)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i + j % 5 == 0:\n                a += 1\n    return str(a)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            if i + j % 5 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first, second = [int(x) for x in stdin.split(' ')]\n    count = 0\n    for x in range(1, first + 1):\n        for y in range(1, second + 1):\n            if x + y % 5 == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 5 == 0:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cnt = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i + j % 5 == 0:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(n * m if (n % 5) * (m % 5) == 0 else 0)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets a string of numbers separated by space and calculates the maximum\n    beauty of the array after multiplying all values belonging to some consecutive\n    subarray.\n    \"\"\"\n    # Get the numbers and their max value from the input\n    numbers = [int(i) for i in stdin.split(' ')]\n    max_value = max(numbers)\n\n    # Return the max value if only one consecutive subarray is possible\n    if max_value <= 0:\n        return str(max_value)\n    # Initialize the counter and the max beauty value\n    counter = 1\n    max_beauty = 0\n    # Run through the numbers and multiply each value by its index\n    for index, number in enumerate(numbers):\n        # Calculate the max value\n        max_value = max(number, max_value)\n        # If the current number is equal to the max value, multiply the counter\n        if number == max_value:\n            counter *= number\n        # If the current number is not equal to the max value, we calculate the\n        # maximum beauty value\n        else:\n            max_beauty = max(max_beauty, counter)\n            counter = number\n\n    return str(max_beauty)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return a\n\n\nprint(solution(\"4 3\"))\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem.\n    \"\"\"\n    # Initialize variables\n    n, x = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n\n    # Print output\n    max_sum = 0\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += arr[j]\n            max_sum = max(max_sum, curr_sum * x)\n\n    return max_sum\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the maximum possible beauty of array a with one operation'\n    (n, x) = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    best = 0\n    for i in range(n):\n        for j in range(n-i):\n            b = a[i:i+j+1]\n            best = max(best, sum(b) * x)\n    return str(best)\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    b = []\n    for i in range(n):\n        for j in range(i, n):\n            if len(b) < j - i + 1:\n                b.append([a[i], a[j]])\n            else:\n                b[j - i][0] += a[j]\n                b[j - i][1] += a[j]\n    b = [x[0] + x[1] for x in b]\n    print(max(b))\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = [int(x) for x in stdin.split(' ')]\n\n    def prod(i, j):\n        return i * j\n\n    table = [[prod(i, j) for j in range(1, m + 1)] for i in range(1, n + 1)]\n    table.sort(reverse=True)\n    return str(table[k - 1][0])\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m, k = map(int, stdin.split())\n    res = [i * j for i in range(1, m + 1) for j in range(1, n + 1)]\n    res.sort()\n    return res[k - 1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return '\\n'.join(f'{i}'+''.join(f'{i * j:2}' for j in range(1, m + 1)) for i in range(1, n + 1)) + '\\n' + str(k)"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, k = list(map(int, stdin.split(\" \")))\n    s = n * m\n    return''.join(map(str, [i * j for i, j in itertools.product(range(1, n+1), range(1, m+1)) if i * j == s][k-1]))\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    # your code here\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            print(i*j, end=\" \")\n        print()\n    print(sorted(list(map(int, stdin.split())))[k-1])\n    return \"\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, m, k = map(int, input)\n\n    for i in range(k):\n        n, m = m, n * m\n    print(n)"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    n, m, k = sorted([n, m, k])\n    while n * m - k > 0:\n        n -= 1\n        m -= 1\n        k -= (n * m)\n    return f'{n + k // m}'\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the k-th largest number in a n x m multiplication table.\n\n    >>> solution('2 2 2')\n    2\n    >>> solution('2 3 4')\n    3\n    >>> solution('1 10 5')\n    5\n    '''\n    n, m, k = map(int, stdin.split())\n\n    numbers = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            numbers.append(i * j)\n    numbers.sort()\n\n    return numbers[k - 1]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the k-th largest number in a n \u00d7 m multiplication table.\"\"\"\n    # n, m, k = map(int, stdin.split(' '))\n    n, m, k = map(int, stdin.split())\n    res = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            res.append(str(i * j))\n    res = sorted(res)\n    return res[k - 1]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution is based on the following link:\n    https://www.geeksforgeeks.org/digit-at-position-10-5th-power-of-3-by-computing-fibonacci-numbers/\n    \"\"\"\n    k = int(stdin)\n    k -= 1\n    a, b = 0, 1\n    for _ in range(2, k+1):\n        c = a + b\n        a = b\n        b = c\n    return str(b)[k]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    num = 9\n    for i in range(1, k):\n        num = (num % 10) * 10 + num // 10\n    return str(num)[k - 1]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = [int(i) for i in stdin]\n    return str(num[0] + num[1] - 2)[-1]\n\n\ndef"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i, _ in enumerate(range(int(stdin))):\n        if i % 2 == 1:\n            continue\n        print((i + 1) ** 3)\n\n\ndef"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    counter = 0\n    num = 1\n    while counter < k:\n        counter += 1\n        num = num * 10\n        if num < k:\n            continue\n        else:\n            if num % 10 == 9:\n                num = num // 10\n            else:\n                num = num // 10 + 1\n    if counter > 10 ** 12:\n        return -1\n    return str(num)[k - 1]\n\n\ndef"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    k = k % (10 ** 12)\n    if k == 0:\n        return '1'\n    k_str = str(k)\n    k_str = '0' * (12 - len(k_str)) + k_str\n    return k_str[-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = 0\n    for i in range(1, 10000):\n        s += i\n        if k < 10 ** (i + 1):\n            break\n    return str(s)[k - 1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    # k is in range [1, 10**12]\n    if k < 1 or k > 10**12:\n        return \"invalid input\"\n    else:\n        return str(k)[-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    num_1 = 123456789101112131415161718192021222324252627282930313233343536\n    num_2 = 123456789101112131415161718192021222324252627282930313233343536\n    num_3 = 123456789101112131415161718192021222324252627282930313233343536\n    num_4 = 123456789101112131415161718192021222324252627282930313233343536\n    num_5 = 123456789101112131415161718192021222324252627282930313233343536\n    num_6 = 123456789101112131415161718192021222324252627282930313233343536\n    num_7 = 123456789101112131415161718192021222324252627282930313233343536\n    num_8 = 123456789101112131415161718192021222324252627282930313233343536\n    num_9 = 123456789101112131415161718192021222324252627282930313233343536\n    num_10 = 123456789101112131415161718192021222324252627282930313233343536\n    num_11 = 123456789101112131415161718192021222324252627282930313233343536\n    num_12 = 123456789101112131415161718192021222324252627282930313233343536\n    num_13 = 123456789101112131415161718192021222324252627282930313233343536\n    num_14 = 123456789101112131415161718192021222324252627282930313233343536\n    num_15 = 123456789101112131415161718192021222324252627282930313233343536\n    num_16 = 123456789101112131415161718192021222324252627282930313233343536\n    num_17 = 123456789101112131415161718192021222324252627282930313233343536\n    num_18 = 123456789101112131415161718192021222324252627282930313233343536\n    num_19 = 123456789101112131415161718192021222324252627282930313233343536\n    num_20 = 123456789101112131415161718192021222324252627282930313233343536\n    num_21 = 123456789101112131415161718192021222324252627282930313233343536\n    num_22 = 123456789101112131415161718192021222324252627282930313233343536\n    num_23 = 123456789101112131415161718192021222324252627282930313233343536\n    num_24 = 123456789101112131415161718192021222324252627282930313233343536\n    num_25 = 123456789101112131415161718192021222324252627282930313233343536\n    num_26 = 123456789101112131415161718192021222324252627282930313233343536\n    num_27 = 123456789101112131415161718192021222324252627282930313233343536\n    num_28 = 123456789101112131415161718192021222324252627282930313233343536\n    num_29 = 123456789101112131415161718192021222324252627282930313233343536\n    num_30 = 123456789101112131415161718192021222324252627282930313233343536\n    num_31 = 123456789101112131415161718192021222324252627282930313233343536\n    num_32 = 123456789101112131415161718192021222324252627282930313233343536\n    num_33 = 123456789101112131415161718192021222324252627282930313233343536\n    num_34 = 123456789101112131415161718192021222324252627282930313233343536\n    num_35 = 123456789101112131415161718192021222324252627282930313233343536\n    num_36 = 123456789101112131415161718192021222324252627282930313233343536\n    num_37 = 123456789101112131415161718192021222324252627282930313233343536\n    num_38 = 123456789101112131415161718192021222324252627282930313233343536\n    num_39 = 123456789101112131415161718192021222324252627282930313233343536\n    num_40 = 123456789101112131415161718192021222324252627282930313233343536\n    num_41 = 123456789101112131415161718192021222324252627282930313233343536\n    num_42 = 123456789101112131415161718192021222324252627282930313233343536\n    num_43 = 123456789101112131415161718192021222324252627282930313233343536\n    num_44 = 123456789101112131415161718192021222324252627282930313233343536\n    num_45 = 123456789101112131415161718192021222324252627282930313233343536\n    num_46 = 123456789101112131415161718192021222324252627282930313233343536\n    num_47 = 123456789101112131415161718192021222324252627282930313233343536\n    num_48 = 123456789101112131415161718192021222324252627282930313233343536\n    num_49 = 123456789101112131415161718192021222324252627282930313233343536\n    num_50 = 123456789101112131415161718192021222324252627282930313233343536\n    num_51 = 123456789101112131415161718192021222324252627282930313233343536\n    num_52 = 123456789101112131415161718192021222324252627282930313233343536\n    num_53 = 123456789101112131415161718192021222324252627282930313233343536\n    num_54 = 123456789101112131415161718192021222324252627282930313233343536\n    num_55 = 12345678910111213141516171819"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\ndef"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    s = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    b = [int(x) for x in stdin.split(\"\\n\")[2].split(\" \")]\n    return max(b[i] * (r - s[i]) for i in range(n))\n\n\ndef"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split('\\n')[0].split())\n    bought = list(map(int, stdin.split('\\n')[1].split()))\n    sold = list(map(int, stdin.split('\\n')[2].split()))\n\n    sold_sum = 0\n    for i in range(m):\n        sold_sum += sold[i]\n    sold_sum = sold_sum if sold_sum <= r else r\n\n    bought_sum = 0\n    for i in range(n):\n        bought_sum += bought[i]\n    bought_sum = bought_sum if bought_sum <= r else r\n\n    return bought_sum + sold_sum\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = list(map(int, stdin.split('\\n')[0].split(' ')))\n    s = list(map(int, stdin.split('\\n')[1].split(' ')))\n    b = list(map(int, stdin.split('\\n')[2].split(' ')))\n\n    l = [s, b]\n    arr = []\n    for i in range(len(l)):\n        arr += l[i]\n\n    arr.sort(reverse=True)\n\n    i = 0\n    count = 0\n    while i < len(arr) and i < len(arr) - m:\n        if count + arr[i] <= r:\n            count += arr[i]\n            i += 1\n        else:\n            break\n    return count\n\n\ndef"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = [int(x) for x in stdin.split('\\n')[:3]]\n    shares = [int(x) for x in stdin.split('\\n')[3:3 + n]]\n    prices = [int(x) for x in stdin.split('\\n')[3 + n: 3 + n + m]]\n    answer = max([sum(prices) + i * j - i * k for i, j, k in zip(shares, prices, r)])\n    return str(answer)\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = list(map(int, stdin.split('\\n')[0].split(' ')))\n    stdin_list = list(map(int, stdin.split('\\n')[1].split(' ')))\n    # write your code here\n    max_value = r\n\n    for i in range(len(stdin_list)):\n        if i < m:\n            max_value = max(max_value, stdin_list[i] + r)\n        else:\n            max_value = max(max_value, stdin_list[i] - r)\n\n    return max_value\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    S, B = [], []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        S.append(a)\n        B.append(b)\n\n    S.sort()\n    B.sort()\n    s, b = 0, 0\n    for i in range(n):\n        s += S[i]\n        b += B[i]\n        if s > r:\n            break\n\n    return b + min(s, r)\n\"\"\"\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor _ in range(T):\n    n, m, r = map(int, sys.stdin.readline().split())\n    S, B = [], []\n    for _ in range(n):\n        a, b = map(int, sys.stdin.readline().split())\n        S.append(a)\n        B.append(b)\n\n    S.sort()\n    B.sort()\n    s, b = 0, 0\n    for i in range(n):\n        s += S[i]\n        b += B[i]\n        if s > r:\n            break\n\n    print(b + min(s, r))"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Codeforces solution implementation.\"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = [int(i) for i in stdin.split()]\n    stock = [int(i) for i in stdin.split()][1:]\n    night = [int(i) for i in stdin.split()][2:]\n    \n    total_stock = sum(stock)\n    total_night = sum(night)\n\n    if total_stock < total_night:\n        return total_stock\n    else:\n        return total_night\n    \n\n    return min_stock\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Your solution goes here \"\"\"\n\n    return output\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    sum = n\n    while sum > 0:\n        if sum % 2 == 0:\n            res.append(sum//2)\n            sum -= sum//2\n        else:\n            res.append(sum//2+1)\n            sum = sum//2\n    if sum == 0:\n        return '-1'\n    return''.join([str(i) for i in res])\n\n\ndef"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    number = stdin\n    n = int(number)\n    return n\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return n\n    for i in range(1, n+1):\n        if i * (i-1) // 2 == n:\n            return i\n\n    return -1\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    i = 0\n    while i * (i - 1) // 2 < n:\n        i += 1\n    if i * (i - 1) // 2 == n:\n        res.append(i)\n    return str(min(res)) if res else '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_games = int(stdin)\n    number_of_teams = number_of_games * 2 + 1\n    teams_left = number_of_teams\n    res = []\n    while number_of_teams > 1:\n        teams_left -= number_of_teams // 2\n        number_of_teams = number_of_teams // 2\n        res.append(number_of_teams)\n    if number_of_teams == 1:\n        res.append(1)\n    elif teams_left == number_of_games:\n        res.append(number_of_teams - 1)\n    elif number_of_teams == 0:\n        res.append(-1)\n    return '\\n'.join(str(team) for team in res)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return -1\n    else:\n        return int(n / 2)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = stdin\n    while n % 2 == 0:\n        n /= 2\n    if n % 2!= 0:\n        return -1\n    else:\n        k = (n * (n - 1)) / 2\n        return int(k)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        if (n - i) % 2 == 0:\n            yield i\n            yield i + 1\n        else:\n            yield -1"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(result)\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin[1:])\n    b = list(map(int, stdin[2:]))\n    m = len(s)\n    even = m % 2 == 0\n    if n % 2 == 0:\n        n += 1\n    possible_permutations = set()\n    for i in range(n):\n        possible_permutations.add(s[i] + s[m - i - 1])\n    possible_permutations = list(possible_permutations)\n    possible_permutations.sort()\n    total_b = sum(b)\n    if even:\n        possible_permutations.pop()\n    antipalindromic_permutations = set()\n    for permutation in possible_permutations:\n        if permutation == permutation[::-1]:\n            antipalindromic_permutations.add(permutation)\n    antipalindromic_permutations = list(antipalindromic_permutations)\n    antipalindromic_permutations.sort()\n    if even:\n        antipalindromic_permutations.pop()\n    max_b = 0\n    for permutation in antipalindromic_permutations:\n        total_b = total_b + sum(\n            [\n                b[i]\n                for i in range(len(permutation))\n                if permutation[i] == s[i]\n            ]\n        )\n        if total_b > max_b:\n            max_b = total_b\n    return max_b\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split('\\n')[0]\n    y = stdin.split('\\n')[1]\n    x = x.split()\n    y = y.split()\n    # check if x is palindromic\n    for i in range(0, len(x)):\n        if x[i]!= x[len(x)-i-1]:\n            print(0)\n            return\n    print(sum([int(x[i]) for i in range(0, len(x))]))\n\nsolution(stdin)\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    b = list(map(int, stdin[2].split()))\n    ans = 0\n    for i in range(n // 2):\n        ans += b[i]\n    return ans\nprint(solution(input()))\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    b = [int(stdin.readline()) for _ in range(n)]\n\n    best = 0\n    for i in range(n):\n        if i % 2 == 0:\n            curr = sum([b[i] for i in range(0, n, 2)])\n            curr += sum([b[i] for i in range(1, n, 2)])\n        else:\n            curr = sum([b[i] for i in range(1, n, 2)])\n            curr += sum([b[i] for i in range(0, n, 2)])\n\n        best = max(curr, best)\n\n    return best\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[1]\n    beauty = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    # print(s, beauty)\n    # if len(s) == 2 and s[0] == s[1]:\n    #     print(0)\n    #     return\n\n    def get_beauty(s: str, i: int):\n        counter = [0] * 26\n        for c in s:\n            counter[ord(c) - 97] += 1\n        return sum([counter[i] * beauty[i] for i in range(26)])\n\n    def permutation(arr: List[int], permutation: List[int]):\n        if len(arr) == 2 and arr[0] == arr[1]:\n            return\n        for i in range(len(arr)):\n            permutation[i], permutation[len(arr) + i - 1] = arr[i], arr[len(arr) + i - 1]\n            if get_beauty(s, permutation[:len(arr)]) > get_beauty(s, permutation[len(arr):]):\n                permutation[i], permutation[len(arr) + i - 1] = arr[len(arr) + i - 1], arr[i]\n            else:\n                permutation[i], permutation[len(arr) + i - 1] = arr[i], arr[len(arr) + i - 1]\n            permutation.append(arr[i])\n            permutation.pop(0)\n\n    permutation([i for i in range(len(s))], [0] * len(s))\n    # print(get_beauty(s, [0] * len(s)), get_beauty(s, permutation[len(s):]))\n    print(max(get_beauty(s, [0] * len(s)), get_beauty(s, permutation[len(s):])))\n\n\ndef"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    b = list(map(int, stdin.readline().strip().split()))\n    t = max_beauty(s, b)\n    return t\n    \ndef"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    bs = list(map(int, stdin.readline().strip().split()))\n    max_b = 0\n    max_t = 0\n    for i in range(n):\n        if bs[i] > max_b:\n            max_b = bs[i]\n            max_t = i\n    odd = True\n    n_even = 0\n    for i in range(n):\n        if i % 2 == 0:\n            n_even += 1\n    if s[max_t] == s[max_t + n_even]:\n        if n_even > 1:\n            max_b -= 1\n        else:\n            max_b = 0\n    print(max_b)\n\n\nsolution(input)\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    b = list(map(int, stdin.readline().strip().split()))\n\n    b = [0] + b\n\n    s = 'a'*n\n    ans = 0\n    for i in range(n):\n        ans += b[i]\n        if s[i]!= s[n-i-1]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    max_ = 0\n    for i in range(0, len(s) - 1):\n        print(f\"i: {i}\")\n        if s[i] == s[i + 1]:\n            max_ += s[i]\n            i += 1\n            print(f\"max_: {max_}\")\n    return max_\n\n\ndef"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the largest two-digit number that is a sum of two of the first four multiples of a given integer.\"\"\"\n    # INPUT: two integers (w, m)\n    # OUTPUT: \"YES\" if it is possible to weigh the item with weight m using the weights w, and \"NO\" otherwise.\n    w, m = [int(n) for n in stdin.split()]\n    for i in range(100):\n        n = i * (i + 1) // 2\n        if n >= m:\n            break\n    # CHECK:\n    #   - number of weights to the left pan of the scales equals the number of weights to the right pan of the scales\n    #   - sum of the weights to the left pan of the scales equals the sum of the weights to the right pan of the scales\n    #   - sum of the weights to the left pan of the scales plus the largest two-digit number that is a sum of two of the first four multiples of the weight to the right pan of the scales equals the sum of the weights to the right pan of the scales plus the largest two-digit number that is a sum of two of the first four multiples of the weight to the left pan of the scales\n    if (w // i + 1) % 2!= (w % i) or w < m:\n        return \"NO\"\n    if (w // i + 1) / 2!= (w % i) or w < m:\n        return \"NO\"\n    if w - m < 0 or w - m < i:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    w = int(input_data[0].split(' ')[0])\n    m = int(input_data[0].split(' ')[1])\n\n    return \"YES\" if (w * m) % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Complete the function that accepts a string parameter and returns \"YES\" if the string\n    can be interpreted as a weights of the items and \"NO\" if it cannot. A weight of a\n    string is defined as a sequence of digits where the first digit is the most significant\n    and the last digit is the least significant. The digits are assumed to be in the range\n    from 2 to 9. The numbers are assigned in ascending order, i.e. the number with the most\n    significant digit is assigned to the first number in the sequence.\n\n    >>> solution(\"3 7\")\n    'YES'\n    >>> solution(\"100 99\")\n    'YES'\n    >>> solution(\"100 50\")\n    'NO'\n    >>> solution(\"100 1\")\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    weights, mass = [int(n) for n in stdin.split()]\n    \n    if abs(weights - mass) % 2 == 0 or (weights - mass) % 2 == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    weight, mass = list(map(int, stdin.split()))\n    if mass % 2 == 0:\n        print('YES')\n    else:\n        print('NO')\n    return ''\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nw, m = list(map(int, stdin.split()))\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return \"NO\"\n    else:\n        return \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split(' '))\n    if m >= w * 2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    b = k * [0]\n    for _ in range(k):\n        b[_] = int(stdin.split(' ')[1])\n    b.sort(reverse=True)\n    if k == 0:\n        return \"No\"\n    i = 0\n    while n > 0:\n        n -= 2 ** i\n        i += 1\n    n -= 1\n    return''.join(str(x) for x in b[:i] + [n])\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calc(n, k):\n        # power of 2\n        # can be computed with n**0.5\n        p = []\n        for i in range(0, k):\n            p.append(n % 2)\n            n //= 2\n        return p\n\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n\n    p = calc(n, k)\n    # check if n is invalid\n    if not n == sum(2 ** i for i in p):\n        return \"No\"\n\n    # check if there exists such k and p\n    for i in range(0, k):\n        if not p[i] == 0:\n            # need to find the smallest k such that sum of k-1 numbers equals to n\n            for j in range(i, k):\n                p[j] = 1 - p[j]\n\n                if not sum(2 ** i for i in p) == n:\n                    break\n                else:\n                    p[j] = 1 - p[j]\n\n            if sum(2 ** i for i in p) == n:\n                return \"Yes\" + \" \" + \" \".join(map(str, p))\n\n    return \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    c = []\n    while n:\n        c.append(n & 1)\n        n = n >> 1\n    c = c[::-1]\n    ans = []\n    a = 0\n    b = 0\n    for i in range(k):\n        a += (2 ** c[i])\n        b += (2 ** i)\n    if a == b:\n        return 'Yes\\n{}'.format(' '.join(map(str, c)))\n    return 'No'\n\ndef"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\""
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(list(map(int, stdin.split()[1:])))\n    for i in range(len(a)):\n        a[i] = bin(a[i])[2:]\n    while k!= 0:\n        k -= 1\n        if '1' in a[k]:\n            a[k] = a[k].replace('1', '0', 1)\n        else:\n            a[k] = a[k].replace('1', '1', 1)\n    print('Yes')\n    print(*a, sep=' ')\n    return ''\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:1]\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split(\" \")))\n    ans = []\n    if n < 1:\n        return \"No\"\n    for i in range(k):\n        a = min(n - 1, i)\n        b = max(0, n - 1 - i)\n        if a < b:\n            ans.append(a)\n            ans.append(b)\n            return \"Yes \" + \" \".join(str(x) for x in ans)\n    return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    total_sum, seq_length = list(map(int, stdin.split()))\n    return 'Yes' if sum_of_two_powers(seq_length, total_sum) else 'No'\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_val = -1\n    arr = []\n    if k == 0:\n        return \"No\"\n    for i in range(k):\n        x = int(stdin.split()[i])\n        if x > 0:\n            arr.append(2 ** x)\n        else:\n            arr.append(1 / (2 ** (-x)))\n        max_val = max(arr[i], max_val)\n\n    arr.sort()\n\n    return \"Yes\" + \" \" + \" \".join(map(str, arr))\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    a = [int(s) for s in stdin.split(\" \")]\n    x = a[0]\n    y = a[1]\n    if x == 1:\n        return y\n    else:\n        return int(math.ceil((y*x)/2))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return n - (t // (n + 1))"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split(' ')]\n    h = n\n    while h > 1:\n        h = h//2\n    return t//h"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    n = 1\n    while n**2 < a:\n        n += 1\n    return n\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return 'NONE'\n    height, t = stdin.split()\n    height, t = int(height), int(t)\n    \n    levels = [0] * height\n    levels[0] = 1\n    for _ in range(1, t):\n        for i in range(height):\n            if i == 0:\n                levels[i] = int(levels[i] / 2)\n            else:\n                levels[i] += levels[i - 1]\n                levels[i] = int(levels[i] / 2)\n    return levels[-1]\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_levels, num_seconds = [int(c) for c in stdin.split()]\n    levels = [1] * num_levels\n    for i in range(num_seconds):\n        levels = [max(1, j // 2) for j in levels]\n    return sum(levels)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    if len(lines) == 1:\n        return str(int(lines[0]))\n    if len(lines) == 2:\n        return '-1'\n    points = []\n    for line in lines:\n        x, y = map(int, line.split())\n        points.append((x, y))\n    area = 0\n    for i in range(len(points)):\n        if i == 0:\n            area += points[1][1] * points[2][0]\n        elif i == len(points) - 1:\n            area += points[i - 1][1] * points[i - 2][0]\n        else:\n            area += (points[i - 1][1] + points[i][1]) * (points[i - 1][0] - points[i][0])\n    if area == 0:\n        return '-1'\n    return str(area)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Args:\n        stdin (str): input data\n    Returns:\n        str: output data\n    '''\n    # Write your code here\n    print(int(stdin) * stdin)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vertices = list(map(lambda x: list(map(int, x.split())), stdin.split('\\n')))\n    \n    n = len(vertices)\n    if n == 1:\n        return '0'\n    elif n == 2:\n        return '1'\n    elif n == 3:\n        if vertices[0][0] == vertices[1][0] and vertices[0][1] == vertices[2][1]:\n            return '-1'\n        else:\n            return '1'\n    elif n == 4:\n        return '2'"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The area of the initial rectangle is equal to the area of the square with the same edge length as the area of the rectangle.\n    '''\n    points = [int(x) for x in stdin.split('\\n')]\n    \n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n    x4, y4 = points[3]\n    \n    assert x1!= x2 and x1!= x3 and x1!= x4\n    assert y1!= y2 and y1!= y3 and y1!= y4\n    assert x2!= x3 and x2!= x4\n    assert y2!= y3 and y2!= y4\n    \n    if x2 == x3:\n        x1 = x2\n        y1 = min(y1, y2, y3, y4)\n        y2 = y3\n    elif x2 == x4:\n        x1 = x2\n        y1 = min(y1, y2, y3, y4)\n        y2 = y4\n    else:\n        x1 = x3\n        y1 = min(y1, y2, y3, y4)\n        y2 = y4\n    \n    \n    x2 = max(x1, x2)\n    x3 = max(x1, x3)\n    x4 = max(x1, x4)\n    y1 = min(y1, y2, y3, y4)\n    y2 = max(y1, y2)\n    y3 = max(y1, y3)\n    y4 = max(y1, y4)\n    \n    \n    print(x4 - x1) * (y4 - y1)\n    \n    return 'x-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    y = list(map(int, stdin.readline().strip().split()))\n    x.pop(x.index(max(x)))\n    y.pop(y.index(max(y)))\n    x.pop(x.index(min(x)))\n    y.pop(y.index(min(y)))\n    A = (x[0] - x[1]) * (y[2] - y[3]) - (x[2] - x[3]) * (y[0] - y[1])\n    print(A if A > 0 else -1)"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"Your solution goes here.\"\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    # your solution here\n    return \" \".join(map(str, solution(input)))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    return str(max(0, a * b - n))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = int(stdin.split('\\n')[1])\n    b = int(stdin.split('\\n')[2])\n    return str(math.ceil((n - 2 * (a + b)) / 2))\n\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split('\\n')))\n    return str(max(a, b))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n---SOLUTION---\n\nfrom itertools import count\nimport sys\n\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    a, b, n = [int(x) for x in stdin.split()]\n    print(math.ceil(n / (a + b)))\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n)\n    a = int(stdin)\n    print(a)\n    b = int(stdin)\n    print(b)\n    return (a + b) - (n + 1)"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nn = int(input())\na = int(input())\nb = int(input())\n\nprint(a * 2 + b * 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n    l = [int(i) for i in stdin]\n    for i in range(n - 1):\n        if l[i] > l[i + 1]:\n            l[i], l[i + 1] = l[i + 1], l[i]\n            break\n    if l == sorted(l):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '010' else 'NO'\n\n\n-----Test_data_-----\n\n\"\"\""
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '010' else 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sorted(stdin) == [i for i in range(1, len(stdin) + 1)] else \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) % 2 == 0 else \"NO\"\n\n\"\"\"\n\nn = int(input())\nstdin = input()\n\ns = list(map(int, stdin))\n\ntemp = []\nfor i in range(n):\n    if s[i] in temp:\n        temp.remove(s[i])\n    else:\n        temp.append(s[i])"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(numbers: List[int], start: int, end: int, number: int) -> bool:\n        if start > end:\n            return False\n        middle = (start + end) // 2\n        if number == numbers[middle]:\n            return True\n        if number > numbers[middle]:\n            return binary_search(numbers, middle + 1, end, number)\n        return binary_search(numbers, start, middle - 1, number)\n\n    n = int(stdin.readline())\n    numbers = [int(c) for c in stdin.readline()]\n    m = int(stdin.readline())\n    for i in range(m):\n        number = int(stdin.readline())\n        if binary_search(numbers, 0, len(numbers) - 1, number):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n'''\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return \"\"\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    if x[0] == '1':\n        n = int(x[:1])\n        s = 'a'\n    else:\n        s = x[:1]\n        n = int(x[1:])\n    if s == 'a' or s == 'c':\n        d = 'L'\n    else:\n        d = 'R'\n    count = 0\n    count += (n - 1) * 6\n    for _ in range(n):\n        count += 2\n        count += (2 * (n - 1))\n    count += 6\n    count += (2 * (n - 1))\n    if s == 'a' or s == 'c':\n        count += (n - 1) * 3\n        count += (n - 1)\n    else:\n        count += (n - 1) * 3\n        count += (n - 1)\n    if s == 'a':\n        count += (n - 1) * 1\n    elif s == 'c':\n        count += (n - 1) * 1\n    count += (n - 1) * 2\n    print(count)\n    return str(count)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    airplane = []\n    for row in range(1, 21):\n        airplane.append([row, 'a', 'b', 'c', 'd', 'e', 'f'][row - 1])\n    \n    seat = stdin.split()[1]\n    \n    for i in range(len(airplane) - 1):\n        if seat in airplane[i]:\n            return i + 1\n    \n    return len(airplane) - 1\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    h = int(stdin.split(' ')[0])\n    r = int(stdin.split(' ')[1][0])\n    a = ord(stdin.split(' ')[1][1]) - ord('a') + 1\n    l = int(stdin.split(' ')[1][2])\n    return (a * 3600 + (l - 1) * 60 + h * 10) - (r * 3600 + (l - 1) * 60 + (h - 1) * 10)\n    '''\n    l = [int(x) for x in stdin.split(' ')]\n    r = [0] * 6\n    h = [0] * 6\n    for i in range(6):\n        r[i] = l[i] // 3600\n        h[i] = (l[i] - (3600 * r[i])) // 60\n        l[i] = l[i] - (3600 * r[i]) - (60 * h[i])\n    return sum(r) * 3600 + sum(h) * 60 + l[0] * 10\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = {\n        1: 'a',\n        2: 'b',\n        3: 'c',\n        4: 'd',\n        5: 'e',\n        6: 'f',\n    }\n    row = int(stdin[0])\n    seat = stdin[1]\n    cnt = 0\n    while row > 1:\n        cnt += 2\n        row -= 1\n    cnt += rows[row]\n    if seat == 'a' or seat == 'f':\n        cnt += 3\n    else:\n        cnt += 4\n    return cnt\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = s[0]\n    arr = ['a', 'b', 'c', 'd', 'e', 'f']\n    return str(sum([abs(n - 2 * i - 1) for i in range(6)]))\n\n\ndef"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))\n    return stdin"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '42'\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    x = int(stdin.split(' ')[1])\n    x_list = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    m = int(stdin.split(' ')[2])\n    y = int(stdin.split(' ')[3])\n    y_list = [int(i) for i in stdin.split('\\n')[3].split(' ')]\n    if x < y:\n        return '<'\n    elif x > y:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 2\\n1 0 1 1 1 1\\n2 10')\n    '='\n    >>> solution('3 3\\n1 0 2\\n2 5\\n2 4')\n    '<'\n    >>> solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0')\n    '>'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, bx = map(int, stdin.split(' '))\n    X = ''.join(map(str, stdin.split('\\n')[0].split(' ')))\n    Y = ''.join(map(str, stdin.split('\\n')[1].split(' ')))\n\n    if bx < bx:\n        return '>'\n    elif bx == bx:\n        return '='\n    else:\n        return '<'\n    "
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def convert(x: str, b: int) -> int:\n        cnt = 0\n        for c in x:\n            cnt *= b\n            cnt += ord(c) - ord('0')\n        return cnt\n    x, b_x = map(int, stdin.split())\n    x = convert(stdin.split()[0], b_x)\n    y, b_y = map(int, stdin.split()[1].split())\n    y = convert(stdin.split()[1], b_y)\n    return '<' if x < y else '>' if x > y else '='\n    \ndef"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, bx, by = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])\n    \n    return '>' if x > y else ('<' if x < y else '=')"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 2\\n1 0 1 1 1 1\\n2 10\\n4 7')\n    '='\n    >>> solution('3 3\\n1 0 2\\n2 5\\n2 4')\n    '<'\n    >>> solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0')\n    '>'\n    \"\"\"\n    _, x_base = stdin.split()\n    x = int(stdin.split()[0], int(x_base))\n    y = int(stdin.split()[1], int(x_base))\n\n    return '<' if x < y else '>' if x > y else '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns '<' if X < Y, '>' if X > Y, '=' if X = Y\n    '''\n    X, X_base, Y, Y_base = stdin.split()\n\n    X = int(X, int(X_base))\n    Y = int(Y, int(Y_base))\n\n    return '<' if X < Y else '>' if X > Y else '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b_x, n = list(map(int, stdin.split()))\n    x = stdin[stdin.find(\" \")+1:]\n    b_y = len(x)\n    y = stdin[stdin.find(\" \", stdin.find(\" \")+1)+1:]\n    for i in range(n):\n        x = x[:-1]\n    for i in range(m):\n        y = y[:-1]\n    return \">\" if int(x, b_x) < int(y, b_y) else \"<\" if int(x, b_x) > int(y, b_y) else \"=\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, bx = map(int, stdin.split())\n    x = int(stdin.split()[0], int(stdin.split()[1]))\n    y, by = map(int, stdin.split()[2].split())\n    y = int(stdin.split()[2], int(stdin.split()[3]))\n    \n    if x < y:\n        return '<'\n    elif x > y:\n        return '>'\n    else:\n        return '='\n    \n    \n    return ''\n    "
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (x, bx), (y, by) = input().split(), input().split()\n    return ('<' if int(x, bx, 10) < int(y, by, 10) else '>'\n            if int(x, bx, 10) > int(y, by, 10) else '='\n            if int(x, bx, 10) == int(y, by, 10) else '')\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    for i in range(n):\n        if numbers[i] == min(numbers):\n            numbers[i] += 1\n            for j in range(i+1, n):\n                numbers[j] += 1\n    numbers.sort()\n    if numbers[0] == 1:\n        return 'BitLGM'\n    else:\n        return 'BitAryo'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    \n    \n    \n    \n    \n    return \"\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # print(len(stdin))\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    # print(a)\n    m = max(a)\n    # print(m)\n    if m==0:\n        return \"BitAryo\"\n    for i in range(n):\n        for j in range(a[i]):\n            if m==0:\n                return \"BitAryo\"\n            m-=1\n    return \"BitLGM\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    k = min(arr)\n    if k >= max(arr) - min(arr):\n        return \"BitLGM\"\n    else:\n        return \"BitAryo\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lst = [int(c) for c in stdin.split(\" \")]\n\n    if sum(lst) % 2!= 0:\n        return \"BitLGM\"\n    else:\n        return \"BitAryo\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds who wins the game described in the input.\n\n    Parameters\n    ----------\n    stdin\n        Input in string format.\n\n    Returns\n    -------\n    str\n        The name of the winner.\n    \"\"\"\n    # Check if the argument is valid.\n    if len(stdin) == 0:\n        raise ValueError('stdin is empty!')\n\n    # Get the values from the input.\n    n = int(stdin)\n\n    # Check if the argument is valid.\n    if n < 1 or n > 3:\n        raise ValueError('n must be between 1 and 3!')\n\n    # Get the values from the input.\n    a = [int(x) for x in stdin.split()]\n\n    # Check if the argument is valid.\n    if min(a) < 1 or max(a) > 300:\n        raise ValueError('Some integers are out of bounds!')\n\n    # Find the min of a and the min of the non-negative integers in a.\n    # This is because the game is played optimally.\n    a_min = min(a)\n    a_min_non_negative = min([x for x in a if x >= 0])\n\n    # Check if the game is over.\n    if a_min < 0 or a_min_non_negative >= a_min:\n        return 'BitLGM'\n\n    # Check if the game is over.\n    if a_min < 0:\n        return 'BitAryo'\n\n    # Find the max of the non-negative integers in a.\n    # This is because the game is played optimally.\n    a_max_non_negative = max([x for x in a if x >= 0])\n\n    # Check if the game is over.\n    if a_max_non_negative >= a_min:\n        return 'BitLGM'\n\n    # Check if the game is over.\n    if a_min == 0:\n        return 'BitAryo'\n\n    # If the game is not over, then the game is won by BitLGM.\n    return 'BitLGM'\n\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://codeforces.com/problemset/problem/1139/A\n    \"\"\"\n    k = stdin.split('\\n')[0]\n    numbers = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    min_number = min(numbers)\n    if min_number == 1:\n        return \"BitLGM\"\n\n    return \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    def one_move(a):\n        b = []\n        for i in range(len(a)):\n            c = a[i] - (i+1)\n            if c == 0:\n                c = len(a) + 1\n            b.append(c)\n        return b\n\n    def other_move(a):\n        b = []\n        i = len(a) - 1\n        while i >= 0:\n            c = min(a[i], i+1)\n            b.append(c)\n            a[i] -= c\n            i -= 1\n        return b\n\n    def check(a, b):\n        for i in range(len(a)):\n            if a[i]!= b[i]:\n                return False\n        return True\n\n    for i in range(len(a)):\n        if check(a, one_move(a)):\n            return 'BitLGM'\n        elif check(a, other_move(a)):\n            return 'BitAryo'\n    return 'Draw'"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    num_ways = 0\n    if n % k == 0:\n        num_ways += n // k\n    else:\n        num_ways += n // k + 1\n    for x in range(n - 1):\n        left_card = a[x]\n        right_card = a[n - x - 1]\n        if left_card * right_card % k!= 0:\n            break\n        num_ways += 1\n    print(num_ways)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n    _, k = map(int, stdin.split())\n    deck = sorted(list(map(int, stdin.split())))\n    cards = len(deck)\n    seen = set()\n    for x in range(cards):\n        for y in range(cards):\n            val = deck[x] * deck[y]\n            if val % k == 0 and val not in seen:\n                seen.add(val)\n\n    return len(seen)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split(' '))\n  a = list(map(int, stdin.split(' ')))\n  # 2 * n - 2 -> the cards left\n  # n - 1 -> the cards on the top\n  # n - 1 -> the cards on the bottom\n  return str(binom(2 * n - 2, n - 1) * binom(n - 1, n - 1))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\n\nsys.stdin = open(\"input.in\", \"r\")\nsys.stdout = open(\"output.out\", \"w\")\n\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementing the logic of the problem in the following steps:\n    1. Input the values of n and k.\n    2. Input the values of cards.\n    3. Create the deck in a way that the product of the numbers written on the cards is divisible by k.\n    4. Calculate how many cards should be removed from the top and from the bottom of the deck.\n    5. Count the number of ways to select the values of x and y so that the resulting deck is valid.\n    6. Print the result.\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    deck = [i for i in range(1, n + 1)]\n    answer = 0\n\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if (i + j + 1) % k == 0:\n                cards_to_remove = (i + j + 1) // k\n                for idx in range(i + 1):\n                    answer += cards_to_remove * deck[idx]\n                    cards_to_remove -= 1\n                for idx in range(n - i - 1):\n                    answer += cards_to_remove * deck[-idx - 1]\n                    cards_to_remove -= 1\n                break\n\n    print(answer)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    l = [int(x) for x in stdin.split(' ')]\n    l.sort(reverse=True)\n    l.append(0)\n    ans = 0\n    mod = 10 ** 9 + 7\n    for i in range(n + 1):\n        for j in range(i + 1):\n            if (l[i] - l[j]) % k == 0:\n                ans += 1\n    return str(ans % mod)\n\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for x in range(n):\n        for y in range(n):\n            if (x + y) % k == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nl, r = 0, n\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    friends = [stdin[i] for i in range(1, n+1)]\n    friends = sorted(friends)\n    baloons = [stdin[i] for i in range(n+1, len(stdin)+1)]\n    baloons = sorted(baloons)\n    print(friends, baloons)\n    for friend in range(k):\n        if friends[friend] == baloons[friend]:\n            return 'NO'\n    return 'YES'\n    \n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = set(stdin.strip())\n    if n < k:\n        return 'NO'\n    if len(s) == 1:\n        return 'YES'\n    s = list(s)\n    l = [0 for _ in range(len(s))]\n    for i in range(n):\n        if i < k:\n            l[s.index(stdin[i])] += 1\n        else:\n            if l[s.index(stdin[i])] > 0:\n                l[s.index(stdin[i])] -= 1\n            else:\n                l[s.index(stdin[i])] = -1\n    if 0 in l:\n        return 'NO'\n    else:\n        return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin)\n    poss = [False] * n\n\n    for c in s:\n        c = c.lower()\n        for i in range(n):\n            if poss[i]:\n                continue\n            if s[i] == c:\n                poss[i] = True\n                break\n    return \"YES\" if sum(poss) == k else \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get the input from stdin\n    num_baloons, num_friends = map(int, stdin.split(' '))\n    baloons = list(stdin.split(' '))\n    baloons.sort()\n\n    for i in range(num_friends - 1):\n        if baloons[i] == baloons[i + 1]:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, l = map(int, stdin.split())\n    colors = sorted(stdin.split())\n    color_idx = 0\n    for i in range(k):\n        if color_idx + 1 < l and colors[color_idx] == colors[color_idx + 1]:\n            print(\"NO\")\n            return\n        color_idx += 1\n    print(\"YES\")\n    return\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    size_of_colors = stdin.split('\\n')[0]\n    number_of_colors = stdin.split('\\n')[1]\n    colors = stdin.split('\\n')[2]\n    if len(size_of_colors) == len(number_of_colors) == len(colors):\n        if int(size_of_colors) == int(number_of_colors) == len(colors):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n    return ''\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if Kefa(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def func(stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        s = stdin.split()\n        c = Counter(s)\n        for k in c:\n            if c[k] == 1:\n                return 'YES'\n        return 'NO'\n    return func(stdin)\nprint(solution(input()))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.split()[1]\n    l = len(s)\n    if n < l:\n        return 'NO'\n    if k < l:\n        return 'NO'\n    c = set()\n    for i in range(l):\n        if s[i] in c:\n            return 'NO'\n        c.add(s[i])\n    return 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    data = stdin.split('\\n')\n    baloons = data[0].split()\n    data.pop(0)\n    baloons = set(baloons)\n    uniqs = []\n    for i in data:\n        for j in baloons:\n            if j not in i:\n                baloons.remove(j)\n                break\n        else:\n            uniqs.append(i)\n\n    data = uniqs\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] == data[j]:\n                print('YES')\n                return\n    print('NO')\n\n\nsolution(stdin)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    if len(set(array)) == 1:\n        return 0\n    array.sort()\n    min1 = array[0]\n    min2 = array[1]\n    if len(array) == 2:\n        return abs(min1 - min2)\n    return abs(min1 - min2) if abs(min1 - min2) > abs(min1 - array[len(array) - 1]) else abs(min1 - array[len(array) - 1])\n\n\ndef"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    array = [int(x) for x in stdin[1].split()]\n\n    min_lst = [array[0]]\n    min_index = 0\n    for i in range(n):\n        if min_lst and array[i] < min_lst[0]:\n            min_lst[0] = array[i]\n            min_index = i\n        elif min_lst and array[i] < min_lst[-1]:\n            min_lst.append(array[i])\n        elif not min_lst:\n            min_lst.append(array[i])\n\n    min_lst.sort()\n\n    if len(min_lst) < 3:\n        return 1\n\n    return abs(min_lst[0] - min_lst[1])"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the distance between two nearest minimums in an array.\"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find distance between 2 nearest minimums in the array.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Output.\n\n    \"\"\"\n    return '''Input\n2\n3 3\nOutput\n1\n\nInput\n3\n5 6 5\nOutput\n2\n\nInput\n9\n2 1 3 5 4 1 2 3 1\nOutput\n3\n    \"\"\"\n\n    pass\n\ndef"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(solve(input()))"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(len(stdin) - 1):\n        if stdin[i] > stdin[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = list(map(int, stdin.split()))\n    p = 2 * w\n    q = 2 * b + 2 * t\n    return str(p) + '/' + str(q)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [t, w, b] = [int(n) for n in stdin.split(' ')]\n    ans = 1\n    for i in range(1, t + 1):\n        if i % w == 0 or i % b == 0:\n            ans *= (1 - (i / (i + b) + i / (i + w)))\n    ans *= 2\n    ans = int(ans // 1)\n    ans = fractions.Fraction(ans, ans + 1)\n    return str(ans)\nprint(solution(input()))\n\"\"\"\n\nimport itertools\nimport fractions\n\nt, w, b = map(int, input().split(' '))\nprint(1 - sum(1 for i in range(1, t + 1) if i % w == 0 or i % b == 0) / t / 2)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T, W, B = [int(i) for i in stdin.split()]\n    return str(W // (T + 1)) + \"/\" + str(B // (T + 1))\n\nhttps://stepik.org/lesson/42016/step/8?auth=login&unit=280621\n\"\"\"\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    t, w, b = map(int, stdin.split())\n    i = 1\n    j = 1\n    while True:\n        if i >= w and j >= b:\n            break\n        if i >= w and j < b:\n            i = 1\n            j += 1\n            continue\n        if i < w and j >= b:\n            j = 1\n            i += 1\n            continue\n        if i < w and j < b:\n            i += 1\n            j += 1\n            continue\n    return \"1/{}\".format(j)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return irreducible fraction"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    return f\"{max(1, w * b) / max(w, b)}\\n\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    t, w, b = map(int, stdin.split())\n\n    # \u89e3\u9898\u601d\u8def\uff1a\u7528\u968f\u673a\u51fd\u6570(\u4e8c\u8fdb\u5236\u9009\u62e9)\u89e3\u51b3\u6982\u7387\u95ee\u9898\n\n    def count(max):\n        t, w, b = map(int, stdin.split())\n        c = 0\n        for i in range(1, max + 1):\n            if w < i < b or w >= i > b:\n                c += 1\n        return c\n\n    # \u83b7\u53d6\u533a\u95f4\u5185\u6240\u6709\u6570\u5b57\n    a = count(t)\n    b = count(t - 1)\n    c = count(t - 2)\n    d = count(t - 3)\n    e = count(t - 4)\n    # \u6c42\u9636\u4e58\n    a = reduce(lambda x, y: x * y, [i for i in range(1, a + 1)])\n    b = reduce(lambda x, y: x * y, [i for i in range(1, b + 1)])\n    c = reduce(lambda x, y: x * y, [i for i in range(1, c + 1)])\n    d = reduce(lambda x, y: x * y, [i for i in range(1, d + 1)])\n    e = reduce(lambda x, y: x * y, [i for i in range(1, e + 1)])\n    ans = (a / (b * c * d * e))\n    ans = str(ans)\n    return ans[0: ans.index('.')]\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 0:\n        return '0'\n    elif x + y > z:\n        return '+'\n    elif x + y < z:\n        return '-'\n    else:\n        return '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(stdin) for stdin in stdin.split()]\n    if x + y + z == 0:\n        return \"0\"\n    elif x >= y + z:\n        return \"+\"\n    elif y >= x + z:\n        return \"-\"\n    else:\n        return \"?\"\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # N : number of upvotes\n    # Y : number of downvotes\n    # Z : number of unknown votes\n    \n    N, Y, Z = [int(x) for x in stdin.split(' ')]\n    \n    if N+Y+Z == 0:\n        if N == 0:\n            return '0'\n        if N > 0:\n            return '+'\n        else:\n            return '-'\n    \n    if N+Y == 0:\n        if Z == 0:\n            return '0'\n        if N+Z > 0:\n            return '+'\n        else:\n            return '-'\n    \n    if N+Y > 0:\n        if N == 0:\n            return '0'\n        if N+Z > 0:\n            return '?'\n        else:\n            return '+'\n    else:\n        if N+Z == 0:\n            return '0'\n        if N > 0:\n            return '?'\n        else:\n            return '-'\n    \n    return solution(input())\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y >= z:\n        return \"+\"\n    if x + y < z:\n        return \"-\"\n    return \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nYou can assume that there is no duplicate votes.\n\n1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n\n    >>> solution('2 0 1')\n    -\n    >>> solution('1 1 0')\n    0\n    >>> solution('0 0 1')\n   ?\n    \"\"\"\n    upvotes, downvotes, unknown = [int(i) for i in stdin.split()]\n    if upvotes > downvotes:\n        return \"+\"\n    elif downvotes > upvotes:\n        return \"-\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(x) for x in stdin.split()]\n    return '0' if z == x + y else '+' if z > x + y else '-' if z < x + y else '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    x_times_upvote = x_times_downvote = 0\n    y_times_upvote = y_times_downvote = 0\n    for i in range(x):\n        x_times_upvote += 1\n    for i in range(y):\n        y_times_upvote += 1\n    for i in range(z):\n        x_times_downvote += 1\n        y_times_downvote += 1\n\n    if x_times_upvote == y_times_upvote:\n        if x_times_downvote == y_times_downvote:\n            return \"0\"\n        return \"-\" if x_times_downvote > y_times_downvote else \"+\"\n    return \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    x, y, z = int(nums[0]), int(nums[1]), int(nums[2])\n    if z:\n        return \"?\" if y * x < z * 2 or z * 2 < y * x else \"+\" if z * 2 > y * x else \"0\"\n    return \"0\" if x > y else \"+\" if x > 0 else \"0\"\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    if a == b == c == 0:\n        return '0'\n    elif b == 0:\n        return '+' if a > c else '-'\n    elif a == 0:\n        return '-' if b > c else '+'\n    elif a == b == c == 1:\n        return '0'\n    elif a > 0:\n        return '+' if a > c else '-' if b > c else '0'\n    else:\n        return '0' if a > c else '-' if b > c else '+'\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    moves = stdin.split('\\n')[0].split('R')\n    x, y = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if len(moves) == 1:\n        return 0\n    \n    distance = abs(x) + abs(y)\n    for i in range(1, len(moves)):\n        if moves[i] == 'U':\n            distance += abs(x - moves[i-1][0])\n            x = moves[i-1][0]\n        elif moves[i] == 'D':\n            distance += abs(x - moves[i-1][0])\n            x = moves[i-1][0]\n        elif moves[i] == 'L':\n            distance += abs(y - moves[i-1][1])\n            y = moves[i-1][1]\n        elif moves[i] == 'R':\n            distance += abs(y - moves[i-1][1])\n            y = moves[i-1][1]\n    \n    if x == 0 and y == 0:\n        return 0\n    elif distance == abs(x) + abs(y):\n        return 1\n    else:\n        return distance\n        \nprint(solution(stdin))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ops = stdin\n    x, y = list(map(int, stdin.split()))\n    if x == y == 0:\n        return 0\n    l, r = 0, 0\n    n = 0\n    for i, op in enumerate(ops):\n        if op == \"U\":\n            if x > 0:\n                l = max(l, x - 1)\n            r = max(r, x)\n        elif op == \"D\":\n            if x < y:\n                l = max(l, x)\n                r = max(r, x + 1)\n        elif op == \"L\":\n            if y > 0:\n                l = max(l, y)\n            r = max(r, y - 1)\n        elif op == \"R\":\n            if y < x:\n                l = max(l, y)\n                r = max(r, y + 1)\n        if i!= n:\n            l, r = min(l, r), max(l, r)\n        else:\n            n = i + 1\n    return r - l + 1 if r > l else -1\n\nprint(solution(\"3 2 5\"))\nprint(solution(\"3 3 5\"))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a. \u0412 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438.\n    \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443. \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442,\n    \u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0438 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c.\n    \u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f, \u0442\u043e \u043a\u043e\u043b-\u0432\u043e\n    \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043d\u0430 +1. \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b,\n    \u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435,\n    \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n    \"\"\"\n    coordinates = set()\n    coordinates_dict = dict()\n\n    for line in stdin.splitlines():\n        if not coordinates.intersection(set(line)):\n            coordinates.update(set(line))\n            coordinates_dict[line] = 1\n        else:\n            coordinates_dict[line] += 1\n\n    return max(coordinates_dict.values())\n\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum length of a subsegment that is changed so the\n    sequence of operations moves the robot from the initial coordinate\n    to the destination coordinate.\n    \"\"\"\n    operations = stdin.split()\n    initial = (0, 0)\n    destination = tuple(map(int, stdin.split()[-2:]))\n\n    changes = 0\n    for i in range(len(operations)):\n        if (\n            operations[i] == \"U\"\n            and initial[1] < destination[1]\n            and changes < destination[1] - initial[1]\n        ):\n            changes += 1\n        elif (\n            operations[i] == \"D\"\n            and initial[1] > destination[1]\n            and changes < initial[1] - destination[1]\n        ):\n            changes += 1\n        elif (\n            operations[i] == \"L\"\n            and initial[0] < destination[0]\n            and changes < destination[0] - initial[0]\n        ):\n            changes += 1\n        elif (\n            operations[i] == \"R\"\n            and initial[0] > destination[0]\n            and changes < initial[0] - destination[0]\n        ):\n            changes += 1\n    if changes == 0:\n        return \"0\"\n    return f\"{destination[0]} {destination[1]} {changes}\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    operations_number = int(stdin.readline())\n    operations = stdin.readline().split()\n\n    if operations_number == 0:\n        return '0'\n\n    # define the initial variables\n    x = 0\n    y = 0\n    # make a set with the initial coordinates\n    coordinates = {(x, y)}\n\n    # the target coordinates\n    target_x, target_y = map(int, stdin.readline().split())\n    # make a set with the target coordinates\n    target_coordinates = {(target_x, target_y)}\n\n    # append coordinates until the target coordinates are met\n    while target_coordinates!= coordinates:\n        # if x == 0, then we have to move up\n        if x == 0:\n            # then we add the coordinate to the coordinates set\n            coordinates.add((x, y + 1))\n            # and we remove it from the set with the target coordinates\n            target_coordinates.remove((x, y + 1))\n            # and we change the coordinate to go up\n            x = x + 1\n            # and we change the direction\n            operations[y] = 'U'\n        # if x == target_x, then we have to move down\n        elif x == target_x:\n            # then we add the coordinate to the coordinates set\n            coordinates.add((x, y - 1))\n            # and we remove it from the set with the target coordinates\n            target_coordinates.remove((x, y - 1))\n            # and we change the coordinate to go down\n            x = x - 1\n            # and we change the direction\n            operations[y] = 'D'\n        # if y == 0, then we have to move left\n        elif y == 0:\n            # then we add the coordinate to the coordinates set\n            coordinates.add((x - 1, y))\n            # and we remove it from the set with the target coordinates\n            target_coordinates.remove((x - 1, y))\n            # and we change the coordinate to go left\n            y = y + 1\n            # and we change the direction\n            operations[y] = 'L'\n        # if y == target_y, then we have to move right\n        elif y == target_y:\n            # then we add the coordinate to the coordinates set\n            coordinates.add((x + 1, y))\n            # and we remove it from the set with the target coordinates\n            target_coordinates.remove((x + 1, y))\n            # and we change the coordinate to go right\n            y = y - 1\n            # and we change the direction\n            operations[y] = 'R'\n\n    # length of the changed subsegment\n    length = max(x, target_x) - min(x, target_x) + max(y, target_y) - min(y, target_y) + 1\n    # if the length is 0\n    if length == 0:\n        return '0'\n    # if the length is -1\n    elif length == -1:\n        return '-1'\n    # if the length is not 0 or -1\n    else:\n        return str(length)\n\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    operations: list = stdin.split('\\n')\n    n: int = int(operations[0])\n    coord: tuple = (int(operations[2].split()[0]), int(operations[2].split()[1]))\n    ops: str = operations[1]\n    if len(ops) == 0:\n        return 0\n    elif len(ops) == 1:\n        if ops in ['U', 'D', 'L', 'R']:\n            return max(0, coord[0] - 1)\n        elif ops == 'L' and coord[0] > 0:\n            return max(0, coord[0] - 1)\n        elif ops == 'R' and coord[0] < 100:\n            return max(0, coord[0] - 1)\n        elif ops == 'U' and coord[1] < 100:\n            return max(0, coord[1] - 1)\n        elif ops == 'D' and coord[1] > 0:\n            return max(0, coord[1] - 1)\n        else:\n            return -1\n    else:\n        res: list = []\n        for i in range(n):\n            if ops[i] == 'U':\n                if coord[1] + 1 > 100:\n                    res.append(i)\n                elif coord[0] - 1 < 0:\n                    res.append(i)\n                elif ops[i + 1] == 'U':\n                    res.append(i)\n                else:\n                    res.append(i)\n                    break\n            elif ops[i] == 'D':\n                if coord[1] - 1 < 0:\n                    res.append(i)\n                elif coord[0] + 1 > 100:\n                    res.append(i)\n                elif ops[i + 1] == 'D':\n                    res.append(i)\n                else:\n                    res.append(i)\n                    break\n            elif ops[i] == 'L':\n                if coord[0] - 1 < 0:\n                    res.append(i)\n                elif coord[1] + 1 > 100:\n                    res.append(i)\n                elif ops[i + 1] == 'L':\n                    res.append(i)\n                else:\n                    res.append(i)\n                    break\n            elif ops[i] == 'R':\n                if coord[0] + 1 > 100:\n                    res.append(i)\n                elif coord[1] - 1 < 0:\n                    res.append(i)\n                elif ops[i + 1] == 'R':\n                    res.append(i)\n                else:\n                    res.append(i)\n                    break\n        for i in range(len(res)):\n            res[i] += 1\n        if len(res) == 0:\n            return -1\n        return max(res) - min(res) + 1\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_operations = int(stdin.split('\\n')[0])\n    sequence = stdin.split('\\n')[1].strip()\n    start_point = list(map(int, stdin.split('\\n')[2].strip().split(' ')))\n    steps = 0\n    for i, step in enumerate(sequence):\n        if step == 'U':\n            if start_point[1] + 1 >= start_point[0]:\n                steps += 1\n                start_point[1] += 1\n        elif step == 'D':\n            if start_point[1] - 1 < start_point[0] or start_point[1] == 0:\n                steps += 1\n                start_point[1] -= 1\n        elif step == 'L':\n            if start_point[0] - 1 < start_point[1]:\n                steps += 1\n                start_point[0] -= 1\n        elif step == 'R':\n            if start_point[0] + 1 >= start_point[1]:\n                steps += 1\n                start_point[0] += 1\n\n    if steps == 0:\n        return '-1'\n\n    return str(len(sequence) - steps)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return None"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time O(1) space\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\n\"\"\"\n\nT = int(input())\nfor i in range(T):\n    n, x = map(int, input().split())\n    s = input()\n    cnt0 = s.count('0')\n    cnt1 = s.count('1')\n    t = s * (n // len(s)) + s[:n % len(s)]\n    cnt0_t = t.count('0')\n    cnt1_t = t.count('1')\n    if x == cnt0 - cnt1 or x == cnt1 - cnt0:\n        print(n)\n    else:\n        print('-1')\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 10\n   ... 010010\n   ... 5 3\n   ... 10101\n   ... 1 0\n   ... 0''')\n    3\n    \"\"\"\n    s = stdin\n    n, x = int(stdin.split('\\n')[0].split(' ')[0]), int(stdin.split('\\n')[0].split(' ')[1])\n    s = stdin.split('\\n')[1]\n    counter = 0\n    for i in range(n):\n        if s[i] == '0':\n            counter += 1\n        else:\n            counter -= 1\n        if counter == x:\n            return i + 1\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport sys\nfrom typing import Dict\nfrom collections import deque\n\nsys.setrecursionlimit(15000)\n\n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    cnt = 0\n    \n    while n > 0:\n        n //= 10\n        cnt += 1\n        \n    return cnt - k\n\"\"\"\n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    while True:\n        if n % (10 ** k) == 0:\n            break\n        n += 1\n    return str(n - n % (10 ** k))"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    res = 0\n    while n >= 10**k:\n        res += 1\n        n //= 10\n    return str(res)"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"\n    Returns the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    \n    # make n has k+1 digits\n    n = str(n)\n    \n    # for each digit, calculate the len(n) - len(n[:i])\n    len_n = len(n)\n    ans = 0\n    \n    for i in range(1, len_n+1):\n        ans = max(ans, len_n-i)\n    \n    return ans\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    z = 0\n    while x > 0:\n        x //= 10\n        z += 1\n    return z\n\nprint(solution('30020 3'))"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    k_ten_power = 0\n    while k_ten_power < k:\n        k_ten_power += 1\n        n *= 10\n    if n % (10 ** k) == 0:\n        return str(k_ten_power)\n    else:\n        return str(k_ten_power - 1)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return stdout"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    \n    if n == 1:\n        print(k, 0, 0)\n        return\n    \n    questions = []\n    for i in range(1, n + 1):\n        if x > i:\n            questions.append(0)\n        elif x == i:\n            questions.append(k)\n            k = 0\n        else:\n            questions.append(k)\n            k -= 1\n    print(max(questions), min(questions), sum(questions))"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, k, n, m = map(int, stdin.split())\n    if m == 1:\n        print(0, 0, k)\n        return ''\n    elif n == 1:\n        print(k, k, 0)\n        return ''\n    else:\n        if k < m * n:\n            print(k, 0, 0)\n            return ''\n        else:\n            print(m, n, m * n)\n            return ''"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split(' '))\n    # we will use x*m + y as index of the student\n    # if we have only one student then we can just use 0\n    if n == m == 1:\n        print(1, 1, 1)\n        return\n    if x == y == 0:\n        print(n * m, n * m, n * m)\n        return\n    print(m * n, 0, n * m)\n    return\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        lst.append([])\n        for j in range(m):\n            lst[i].append(j + 1)\n    count = 0\n    i = 0\n    j = 0\n    n_row = 0\n    while i!= x and j!= y:\n        if n_row % 2 == 0:\n            count += m\n            j += 1\n            if j == m:\n                j = 0\n                i += 1\n        else:\n            count += 1\n            i += 1\n            if i == n:\n                i = 0\n                n_row += 1\n    if i == x and j == y:\n        count += 1\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(' ')))\n    n = stdin[0]\n    m = stdin[1]\n    k = stdin[2]\n    x = stdin[3]\n    y = stdin[4]\n    first = []\n    second = []\n    third = []\n    for i in range(n):\n        for j in range(m):\n            if j < m - 1 and j + 1 >= x:\n                first.append(j + 1)\n            if j > y:\n                second.append(j)\n            if j < m - 1 and j + 1 >= x and j > y:\n                third.append(j + 1)\n    print(max(first), min(first), first.count(first[0]))\n    print(max(second), min(second), second.count(second[0]))\n    print(max(third), min(third), third.count(third[0]))\n    return ''"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k, x, y = map(int, stdin.split())\n\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0438 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n    if x == 1:\n        first_row = 1\n        first_column = 1\n    else:\n        first_row = x\n        first_column = x - 1\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u044f\u0434\u0430 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n    if y == m:\n        second_row = n\n        second_column = n\n    else:\n        second_row = y\n        second_column = y + 1\n\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0432\u0443\u0445 \u0440\u044f\u0434\u043e\u0432\n    if x == n:\n        third_row = 1\n        third_column = n\n    elif y == 1:\n        third_row = 1\n        third_column = 2\n    elif x == 1 and y == m:\n        third_row = n\n        third_column = 1\n    else:\n        third_row = x\n        third_column = x + 1\n\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0432\u0443\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n    if y == m:\n        fourth_column = n\n    elif x == 1 and y == 1:\n        fourth_column = n\n    elif x == 1 and y == m:\n        fourth_column = m\n    elif x == 1 and y == 2:\n        fourth_column = m\n    else:\n        fourth_column = y\n\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0432\u0443\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n    if x == n and y == 1:\n        fifth_row = 1\n        fifth_column = m\n    elif x == n and y == m:\n        fifth_row = n\n        fifth_column = 1\n    else:\n        fifth_row = x\n        fifth_column = x + 1\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0438 \u0440\u044f\u0434\u043e\u0432\n    columns_and_rows = [\n        [first_column, first_row],\n        [second_column, second_row],\n        [third_column, third_row],\n        [fourth_column, fourth_row],\n        [fifth_column, fifth_row],\n    ]\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0438 \u0440\u044f\u0434\u043e\u0432\n    columns_and_rows_dict = dict()\n    for key, value in enumerate(columns_and_rows, 1):\n        columns_and_rows_dict[key] = value\n\n    # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0440\u044f\u0434\u0430, \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n    row_questions = m - 1\n    column_questions = n - 1\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0441 \u0441\u0430\u043c\u0438\u043c\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\u0438\n    question_list = []\n    # \u0426\u0438\u043a\u043b \u043f\u043e \u0440\u044f\u0434\u0430\u043c \u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\n    for key, value in columns_and_rows_dict.items():\n        # \u0426\u0438\u043a\u043b \u043f\u043e \u0440\u044f\u0434\u0430\u043c \u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\n        for i in range(row_questions):\n            # \u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0430\u043c\u0438\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n            question_list.append(value[1] * row_questions + i)\n\n    # \u0426\u0438\u043a\u043b \u043f\u043e \u0440\u044f\u0434\u0430\u043c \u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\n    for key, value in columns_and_rows_dict.items():\n        # \u0426\u0438\u043a\u043b \u043f\u043e \u0440\u044f\u0434\u0430\u043c \u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\n        for j in range(column_questions):\n            # \u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0430\u043c\u0438\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\n            question_list.append(value[0] * column_questions + j)\n\n    # \u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n    random.shuffle(question_list)\n\n    # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    \"\"\"\n    stdin = stdin.split()\n    n, m, k, x, y = (int(i) for i in stdin)\n    ans = [0, 0, 0]\n    for i in range(1, m + 1):\n        if i == x:\n            ans[0] += 1\n            ans[1] = i\n        if i == y:\n            ans[1] = i\n            ans[0] += 1\n            ans[2] = i\n    ans[0] += 1\n    ans[2] = k\n    print(max(ans), min(ans), ans.count(max(ans)), sep='\\n')\n\n\ndef"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k, x, y] = list(map(int, stdin.split()))\n    \n    if n == 1:\n        # all pupils sit at the same table\n        stdout.write(str(k) +'' + str(k) +'' + str(k))\n    else:\n        # n rows\n        # m tables per row\n        # k questions per student\n        # row x: sits at table y\n        # row y: sits at table x\n        # cycle = n - 1\n        # question = k\n        # index = cycle * m + y\n        # index % m = y\n        # max_count = index % m\n        # min_count = max_count\n        # count = 0\n        \n        row_k_questions = k // m\n        row_k_questions_rest = k % m\n        \n        if row_k_questions_rest > 0:\n            row_k_questions += 1\n        \n        for row in range(1, n):\n            # select row\n            # select table\n            if row < (n - 1) // 2:\n                max_count = row_k_questions\n                min_count = row_k_questions\n            else:\n                max_count = row_k_questions\n                min_count = row_k_questions + 1\n            \n            for table in range(1, m + 1):\n                # select table\n                # select row\n                if table <= row_k_questions_rest:\n                    if table == x:\n                        # student wants to sit at table x\n                        count = max_count\n                    else:\n                        count = min_count\n                else:\n                    if table == y:\n                        # student wants to sit at table y\n                        count = min_count\n                    else:\n                        count = max_count\n                \n                # change variables\n                if table == y:\n                    if row < (n - 1) // 2:\n                        min_count = count\n                    else:\n                        max_count = count\n                else:\n                    if row < (n - 1) // 2:\n                        max_count = count\n                    else:\n                        min_count = count\n                \n                # write variables\n                stdout.write(''+ str(max_count) +'' + str(min_count) +'' + str(count))\n        \n        stdout.write(' ')\n        stdout.write(str(row_k_questions_rest) +'' + str(row_k_questions_rest) +'' + str(row_k_questions_rest))\n        \n\nsolution(stdin.read())\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out the maximum number of questions a particular pupil is asked, the minimum number of questions a particular pupil is asked, and how many times the teacher asked Sergei.\"\"\"\n    n, m, k, x, y = [int(s) for s in stdin.split()]\n    if x <= n and y <= m:\n        if k % n == 0:\n            print(n, k // n, n)\n        else:\n            print(n, k // n, k % n)\n    else:\n        print(x, y)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = list(map(int, stdin.split()))\n    if n == 1 and m == 1:\n        return f'{k} {k} {k}'\n    if n == m:\n        k = 0\n        for j in range(1, m + 1):\n            k += j\n        return f'{k} {k} {k}'\n\n    n //= m\n    if n < 1:\n        n = 1\n\n    ans = {'max': 0,'min': m, 'cnt': 0}\n    for i in range(n + 1):\n        for j in range(1, m + 1):\n            if j * (i + 1) > k:\n                break\n            if j * (i + 1) >= ans['max']:\n                ans['max'] = j * (i + 1)\n                ans['min'] = j\n                ans['cnt'] = 1\n            elif j * (i + 1) == ans['max']:\n                ans['cnt'] += 1\n    return f'{ans[\"max\"]} {ans[\"min\"]} {ans[\"cnt\"]}'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = {line.strip() for line in stdin.split(\"\\n\")}\n    ribbons = sorted(ribbons, key=lambda r: len(r))\n    ribbons = [list(r) for r in ribbons]\n\n    def generate_subribbons(ribbon):\n        subribbons = []\n        for i, c in enumerate(ribbon):\n            if i > 0:\n                for s in subribbons:\n                    s.append(c)\n            else:\n                subribbons.append([c])\n        return subribbons\n\n    ribbons = [generate_subribbons(r) for r in ribbons]\n    ribbon_max_beauty = {\n        r: max(len(subribbon) for subribbon in ribbons[i])\n        for i, r in enumerate(ribbons)\n    }\n\n    ribbons = [[r[i] for r in ribbons] for i in range(len(ribbons[0]))]\n\n    beauty_history = [[0] * len(ribbons) for _ in range(len(ribbons[0]))]\n\n    def count_beauty(ribbon, row, col):\n        if ribbon_max_beauty[ribbon] == 0:\n            return 0\n        elif row < 0 or row >= len(ribbons) or col < 0 or col >= len(ribbons[0]):\n            return ribbon_max_beauty[ribbon] - 1\n        elif ribbon_max_beauty[ribbon] == len(ribbons[row][col]):\n            return ribbon_max_beauty[ribbon]\n        else:\n            s1 = ribbon_max_beauty[ribbon] - len(ribbons[row][col]) + 1\n            s2 = count_beauty(ribbon, row, col + 1)\n            s3 = count_beauty(ribbon, row + 1, col)\n            return max(s1, s2, s3)\n\n    for turn in range(len(ribbons) * len(ribbons[0])):\n        max_beauty = 0\n        max_row = 0\n        max_col = 0\n        for row in range(len(ribbons)):\n            for col in range(len(ribbons[0])):\n                if beauty_history[row][col] == 0:\n                    beauty_history[row][col] = count_beauty(ribbon, row, col)\n                elif beauty_history[row][col] > max_beauty:\n                    max_beauty = beauty_history[row][col]\n                    max_row = row\n                    max_col = col\n        if max_beauty == 0:\n            break\n        beauty_history[max_row][max_col] = 0\n        ribbons[max_row][max_col] = random.choice(string.ascii_uppercase)\n\n    ribbons = [\"\".join(r) for r in ribbons]\n    ribbons = set(ribbons)\n\n    if len(ribbons) == 1:\n        return list(ribbons)[0]\n    elif len(ribbons) == 2:\n        if ribbon_max_beauty[ribbons[0]] == ribbon_max_beauty[ribbons[1]]:\n            return \"Draw\"\n        else:\n            return sorted(ribbons, key=lambda r: ribbon_max_beauty[r])[0]\n    else:\n        return \"Draw\"\n\n\nprint(solution(stdin))\n\n\nimport collections\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of color ribbon (letters a-z),\n    play the game using the following rules:\n    a) A cat can change his ribbon to any other\n    consecutive string with no more than one\n    difference in the color of each letter.\n    b) The beauty of a ribbon is the maximum number\n    of times that its subribbon appears in the\n    ribbon (see examples).\n    c) The winner is the cat with the most beautiful\n    ribbon after the entire game.\n    \"\"\"\n    n = int(stdin)\n\n    ribbons = [input() for _ in range(3)]\n\n    # this will map color to the number of times\n    # that the color appears in the ribbon\n    color_to_count = {c: 0 for c in 'abcdefghijklmnopqrstuvwxyz'}\n    ribbon_to_beauty = {}\n\n    for ribbon in ribbons:\n        for i, color in enumerate(ribbon):\n            color_to_count[color] += 1\n            if i == 0:\n                continue\n            prev_color = ribbon[i - 1]\n            subribbon = ribbon[i - 1:i + 1]\n            ribbon_to_beauty[subribbon] = ribbon_to_beauty.get(subribbon, 0) + 1\n\n    # traverse the color map in reverse order\n    # to assign the correct subribbon to each color\n    # instead of the other way around\n    for color in sorted(color_to_count, reverse=True):\n        if color_to_count[color] == 0:\n            continue\n        for i in range(color_to_count[color]):\n            subribbon = color + color\n            ribbon_to_beauty[subribbon] = ribbon_to_beauty.get(subribbon, 0) + 1\n\n    # the max beauty is the largest beauty among the\n    # values in the dictionary\n    max_beauty = max(ribbon_to_beauty.values())\n\n    # we can also use the max_beauty as our key to\n    # determine the winner, but this is less efficient\n    # since we have to traverse the dictionary again\n    # and again (a lot of unnecessary work)\n    # winner = [color for color, beauty in ribbon_to_beauty.items()\n    #           if beauty == max_beauty][0]\n\n    winner = None\n    for color, beauty in ribbon_to_beauty.items():\n        if beauty == max_beauty:\n            if winner is not None:\n                return 'Draw'\n            winner = color\n    return winner\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = stdin.split(\"\\n\")\n    ribbon_length = len(ribbons[0])\n    ribbons_set = set()\n    ribbons_set.add(ribbons[0])\n    ribbons_set.add(ribbons[1])\n    ribbons_set.add(ribbons[2])\n    ribbons_set.add(ribbons[0][ribbon_length - 1])\n    ribbons_set.add(ribbons[1][ribbon_length - 1])\n    ribbons_set.add(ribbons[2][ribbon_length - 1])\n    ribbons_set.add(ribbons[0][ribbon_length - 2])\n    ribbons_set.add(ribbons[1][ribbon_length - 2])\n    ribbons_set.add(ribbons[2][ribbon_length - 2])\n    ribbons_set = list(ribbons_set)\n    ribbons_set = sorted(ribbons_set)\n    ribbons_set.remove(ribbons[0][ribbon_length - 1])\n    ribbons_set.remove(ribbons[1][ribbon_length - 1])\n    ribbons_set.remove(ribbons[2][ribbon_length - 1])\n    ribbons_set.remove(ribbons[0][ribbon_length - 2])\n    ribbons_set.remove(ribbons[1][ribbon_length - 2])\n    ribbons_set.remove(ribbons[2][ribbon_length - 2])\n    ribbons_set.append(ribbons[0][ribbon_length - 1])\n    ribbons_set.append(ribbons[1][ribbon_length - 1])\n    ribbons_set.append(ribbons[2][ribbon_length - 1])\n    ribbons_set.append(ribbons[0][ribbon_length - 2])\n    ribbons_set.append(ribbons[1][ribbon_length - 2])\n    ribbons_set.append(ribbons[2][ribbon_length - 2])\n    ribbons_set = set(ribbons_set)\n    ribbons_set = list(ribbons_set)\n    ribbons_set.sort()\n    ribbons_list = []\n    for i in range(0, len(ribbons_set)):\n        ribbons_list.append(ribbons[0])\n        ribbons_list.append(ribbons[1])\n        ribbons_list.append(ribbons[2])\n        ribbons_list[i] = ribbons[0][ribbons[0].index(ribbons_set[i]):ribbons[0].index(ribbons_set[i]) + ribbon_length]\n        ribbons_list[i] = ribbons_list[i][::-1]\n        ribbons_list[i] = ribbons_list[i][1:] + ribbons_list[i][0:1]\n        ribbons_list[i] = ribbons[0][ribbons[0].index(ribbons_set[i]) - ribbon_length:ribbons[0].index(ribbons_set[i])] + ribbons_list[i]\n        ribbons_list[i] = ribbons_list[i][::-1]\n        ribbons_list[i] = ribbons_list[i][1:] + ribbons_list[i][0:1]\n        ribbons_list[i] = ribbons[0][ribbons[0].index(ribbons_set[i]) + ribbon_length:ribbons[0].index(ribbons_set[i]) + ribbon_length * 2] + ribbons_list[i]\n        ribbons_list[i] = ribbons_list[i][::-1]\n        ribbons_list[i] = ribbons_list[i][1:] + ribbons_list[i][0:1]\n        ribbons_list[i] = ribbons[0][ribbons[0].index(ribbons_set[i]) - ribbon_length:ribbons[0].index(ribbons_set[i])] + ribbons_list[i]\n        ribbons_list[i] = ribbons_list[i][::-1]\n        ribbons_list[i] = ribbons_list[i][1:] + ribbons_list[i][0:1]\n        ribbons_list[i] = ribbons[0][ribbons[0].index(ribbons_set[i]) + ribbon_length:ribbons[0].index(ribbons_set[i]) + ribbon_length * 2] + ribbons_list[i]\n        ribbons_list[i] = ribbons_list[i][::-1]\n        ribbons_list[i] = ribbons_list[i][1:] + ribbons_list[i][0:1]\n        ribbons_list[i] = ribbons[0][ribbons[0].index(ribbons_set[i]) + ribbon_length:ribbons[0].index(ribbons_set[i]) + ribbon_length * 2] + ribbons_list[i]\n        ribbons_list[i] = ribbons_list[i][::-1]\n    ribbons_dict = {}\n    ribbons_dict[ribbons"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ribbons = stdin.splitlines()\n    maxi = 0\n    for i in range(0, n):\n        maxi = max(maxi, sum(1 for x in ribbons[i] if x == 'a') + sum(1 for x in ribbons[i] if x == 'b') + sum(1 for x in ribbons[i] if x == 'c') + sum(1 for x in ribbons[i] if x == 'd') + sum(1 for x in ribbons[i] if x == 'e') + sum(1 for x in ribbons[i] if x == 'f') + sum(1 for x in ribbons[i] if x == 'g') + sum(1 for x in ribbons[i] if x == 'h') + sum(1 for x in ribbons[i] if x == 'i') + sum(1 for x in ribbons[i] if x == 'j') + sum(1 for x in ribbons[i] if x == 'k') + sum(1 for x in ribbons[i] if x == 'l') + sum(1 for x in ribbons[i] if x =='m') + sum(1 for x in ribbons[i] if x == 'n') + sum(1 for x in ribbons[i] if x == 'o') + sum(1 for x in ribbons[i] if x == 'p') + sum(1 for x in ribbons[i] if x == 'q') + sum(1 for x in ribbons[i] if x == 'r') + sum(1 for x in ribbons[i] if x =='s') + sum(1 for x in ribbons[i] if x == 't') + sum(1 for x in ribbons[i] if x == 'u') + sum(1 for x in ribbons[i] if x == 'v') + sum(1 for x in ribbons[i] if x == 'w') + sum(1 for x in ribbons[i] if x == 'x') + sum(1 for x in ribbons[i] if x == 'y') + sum(1 for x in ribbons[i] if x == 'z'))\n    print(maxi)\n    return ''\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ribbon_kuro, ribbon_shiro, ribbon_katie = stdin.readline(), stdin.readline(), stdin.readline()\n    def get_beauty(ribbon: str):\n        l = len(ribbon)\n        l_count = [0] * l\n        count = 0\n        for i in range(l):\n            if ribbon[i] == ribbon[0]:\n                count += 1\n                l_count[i] = count\n            else:\n                count = 0\n        return max(l_count)\n    kuro_beauty = get_beauty(ribbon_kuro)\n    shiro_beauty = get_beauty(ribbon_shiro)\n    katie_beauty = get_beauty(ribbon_katie)\n    if kuro_beauty == shiro_beauty == katie_beauty:\n        return \"Draw\"\n    if kuro_beauty >= max(shiro_beauty, katie_beauty):\n        return \"Kuro\"\n    if shiro_beauty >= max(kuro_beauty, katie_beauty):\n        return \"Shiro\"\n    return \"Katie\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = stdin.split('\\n')\n    if len(ribbons) > 2:\n        ribbons = ribbons[:3]\n    ribbon_length = len(ribbons[0])\n    ribbons = [list(ribbon) for ribbon in ribbons]\n    ribbons_dict = {'kuro':0,'shiro':1, 'katie':2}\n    ribbons_dict = {key: 0 for key in ribbons_dict}\n    ribbons_dict = {key: ribbons_dict[key] for key in ribbons_dict if ribbons_dict[key] == 0}\n    ribbons_dict['draw'] = -1\n\n    ribbons_count = {key: 0 for key in ribbons_dict}\n\n    for i in range(ribbon_length):\n        ribbons_count = {key: 0 for key in ribbons_dict}\n        for j in range(ribbon_length):\n            if ribbons[ribbons_dict[ribbons[0][j]]][j] == ribbons[ribbons_dict[ribbons[1][j]]][j]:\n                ribbons_count[ribbons[ribbons_dict[ribbons[0][j]]]] += 1\n            else:\n                ribbons_count[ribbons[ribbons_dict[ribbons[0][j]]]] = 0\n            if ribbons_count[ribbons[ribbons_dict[ribbons[0][j]]]] == ribbon_length:\n                ribbons_dict['draw'] = i\n                break\n        if ribbons_dict['draw']!= -1:\n            break\n        ribbons[ribbons_dict[ribbons[0][j]]], ribbons[ribbons_dict[ribbons[1][j]]] = ribbons[ribbons_dict[ribbons[1][j]]], ribbons[ribbons_dict[ribbons[0][j]]]\n\n    ribbons_dict = {key: ribbons_dict[key] for key in ribbons_dict if ribbons_dict[key]!= -1}\n    ribbons_dict = {key: ribbons_dict[key] for key in ribbons_dict if ribbons_dict[key]!= 0}\n    ribbons_dict = {key: ribbons_count[key] for key in ribbons_count if ribbons_count[key]!= 0}\n    ribbons_dict = {key: ribbons_dict[key] for key in ribbons_dict if ribbons_dict[key] > 0}\n    ribbons_dict = dict(sorted(ribbons_dict.items(), key=lambda x: x[1], reverse=True))\n    print(ribbons_dict.keys()[0])\n\nsolution(input())\n\n\"\"\"\n\nribbons_dict = {'kuro':0,'shiro':1, 'katie':2}\nribbons_dict = {key: 0 for key in ribbons_dict}\nribbons_dict = {key: ribbons_dict[key] for key in ribbons_dict if ribbons_dict[key] == 0}\nribbons_dict = dict(sorted(ribbons_dict.items(), key=lambda x: x[1], reverse=True))\nribbons_dict = ribbons_dict.keys()\nribbons_dict = ribbons_dict[0]\nprint(ribbons_dict)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nribbons_dict = {'kuro':0,'shiro':1, 'katie':2}\nribbons_dict = {key: 0 for key in ribbons_dict}\nribbons_dict = {key: ribbons_dict[key] for key in ribbons_dict if ribbons_dict[key] == 0}\nribbons_dict = dict(sorted(ribbons_dict.items(), key=lambda x: x[1], reverse=True))\nribbons_dict = ribbons_dict.keys()\nribbons_dict = ribbons_dict[0]\nprint(ribbons_dict)\n\n\n\n\n\n\n\nribbons_dict = {'kuro':0,'shiro':1, 'katie':2}\nribbons_dict = {key: 0 for key in ribbons_dict}\nribbons_dict = {key: ribbons_dict[key] for key in ribbons_dict if ribbons_dict[key] == 0}\nribbons_dict = dict(sorted(ribbons_dict.items(), key=lambda x: x[1], reverse=True))\nribbons_dict = ribbons_dict.keys()\nribbons_dict = ribbons_dict[0]\nprint(ribbons_dict)\n\n\n\n\n\n\nribbons_dict = {'kuro':0,'shiro':1, 'katie':2}\nribbons_dict = {key: 0 for key in ribbons_dict}\nribbons_dict = {key: ribbons_dict[key] for key in ribbons_dict if ribbons_dict[key] == 0}\nribbons_dict = dict(sorted(ribbons_dict.items(), key=lambda x: x[1], reverse=True))\nribbons_dict = ribbons_dict.keys()\nribbons_dict = ribbons_dict[0]\nprint"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = list(stdin.split(\"\\n\"))\n    ribbons_dic = {ribbon: 0 for ribbon in ribbons}\n    for ribbon in ribbons:\n        for color in ribbon:\n            ribbons_dic[ribbon] += int(color == ribbon[0])\n    return max(ribbons_dic, key=ribbons_dic.get)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3)\n    'Kuro'\n    >>> solution(7)\n    'Shiro'\n    >>> solution(15)\n    'Draw'\n    \"\"\"\n    ribbon = stdin.split()\n    # n = len(ribbon)\n    ribbon_1, ribbon_2, ribbon_3 = ribbon\n    max_beauty = 0\n    for ribbon in (ribbon_1, ribbon_2, ribbon_3):\n        beauty = 0\n        for i in range(len(ribbon) - 1):\n            if ribbon[i]!= ribbon[i + 1]:\n                beauty += 1\n        if max_beauty < beauty:\n            max_beauty = beauty\n    if max_beauty == 9:\n        return \"Draw\"\n    return {\n        (ribbon_1, ribbon_2): \"Kuro\",\n        (ribbon_2, ribbon_1): \"Shiro\",\n        (ribbon_3, ribbon_1): \"Katie\",\n        (ribbon_1, ribbon_3): \"Katie\",\n        (ribbon_2, ribbon_3): \"Kuro\",\n        (ribbon_3, ribbon_2): \"Shiro\",\n    }[ribbon_1, ribbon_2]\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(stdin) for stdin in stdin.split()]\n    c, v_0, v_1, a, l = l[0], l[1], l[2], l[3], l[4]\n    # if c == v_0 == v_1 == a == 0:\n    #     return 'impossible'\n    if v_0 <= v_1 <= c:\n        return 'impossible'\n    if a == 0:\n        return c\n    if l == 0 and c % v_0 == 0:\n        return c // v_0\n    if c % v_0 == 0:\n        return c // v_0\n    v_0 = v_0 + a\n    l = l % v_0\n    if v_1 <= v_0 <= c:\n        return c - (v_0 - v_1)\n    if l == 0:\n        return c // v_0\n    if v_1 > c:\n        return c + (v_1 - c) // a + 1\n    if v_0 <= v_1 <= c:\n        return (c + v_0 - v_1) // a\n    return 'impossible'\n\nprint(solution(stdin))"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nc, v_0, v_1, a, l = [int(num) for num in stdin.split()]\n\ncount = 0\n\nwhile c > 0:\n    c = max(c, v_1 - a)\n    if c <= 0:\n        c = v_1\n    c -= l\n    count += 1\n\nreturn count\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pages_number, page_speed, speed_limit, acceleration, rereading = [int(x) for x in stdin.split(' ')]\n    days = 0\n    while pages_number > page_speed:\n        page_speed += acceleration\n        days += 1\n        if pages_number - page_speed > speed_limit:\n            pages_number -= speed_limit\n        else:\n            pages_number -= pages_number\n    return days\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    c, v_0, v_1, a, l = map(int, stdin.split())\n\n    if c >= v_0:\n        return c // v_0\n\n    days = (c - v_1) // (a - 1)\n    return max(days, l)\n    \n    \n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = [int(i) for i in stdin.split()]\n    return str(l + (l // v_0) * (a - 1))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n\"\"\"\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split(' '))\n    days = 0\n    for _ in range(l):\n        v_0 += a\n        v_0 = min(v_0, v_1)\n        days += 1\n        if v_0 == v_1:\n            break\n    return days\n\nprint(solution(input()))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    count = 0\n    pages = 0\n    while True:\n        pages += v_0\n        if pages > c:\n            break\n        pages -= l\n        count += 1\n        l += a\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = list(map(int, stdin.split()))\n    pages = c - v_0\n    day = 1\n    print(c, v_0, v_1, a, l)\n    while pages > 0:\n        if day % 2 == 0:\n            pages -= v_0\n            if pages <= 0:\n                break\n            pages += (a * (v_0 + v_1))\n        else:\n            pages -= (v_0 + l)\n            if pages <= 0:\n                break\n            pages += v_0\n        day += 1\n    return day\nprint(solution('12 4 12 4 1'))\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n\n    n = int(stdin)\n    primes = [2, 3]\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(sqrt(n)) + 1):\n        for j in range(2 * i, n + 1, i):\n            is_prime[j] = False\n    for i in range(5, n + 1):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(2 * i, n + 1, i):\n                is_prime[j] = False\n    print(len(primes))\n    print(\" \".join(map(str, primes)))\n    return ''\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = prime(n)\n    return str(p[0]) +'' + str(p[1]) +'' + str(p[2])\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 3:\n        return n - 1\n    p = [2, 3]\n    r = n\n    while r > 2:\n        t = n\n        for i in p:\n            t -= i\n            if t % i == 0:\n                break\n        else:\n            p.append(t)\n        r -= 1\n    return str(len(p)) + '\\n' + '\\n'.join(map(str, p))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    x = 3\n    p = [0, 0, 0]\n    while number - x > 0:\n        x += 2\n        if is_prime(x):\n            p[2] = x\n            number -= x\n    x = 5\n    while number - x > 0:\n        x += 4\n        if is_prime(x):\n            p[1] = x\n            number -= x\n    x = 7\n    while number - x > 0:\n        x += 6\n        if is_prime(x):\n            p[0] = x\n            number -= x\n    return f'{len(p)}\\n{\" \".join([str(i) for i in p])}'\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(5))\n    3\n    \"\"\"\n    return \"\"\"2\n    \"\"\"\n    \n    \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [1] * 3\n    for i in range(2, n):\n        if is_prime(i):\n            l[0] += 1\n            if is_prime(l[0] + i):\n                l[1] += 1\n                if is_prime(l[1] + i):\n                    l[2] += 1\n                    break\n    print(len(l), *l)\n    return ''\n\n\ndef"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(x) for x in stdin.split()]\n    field = [list(stdin[i]) for i in range(rows)]\n\n    for x in range(rows):\n        for y in range(columns):\n            if field[x][y] == \"*\":\n                for y2 in range(y + 1, columns):\n                    if field[x][y2] == \"*\":\n                        break\n                else:\n                    return \"NO\"\n                for x2 in range(x + 1, rows):\n                    if field[x2][y] == \"*\":\n                        break\n                else:\n                    return \"NO\"\n                if x2 == rows - 1 and y2 == columns - 1:\n                    continue\n                if x == x2 and y2 == y:\n                    return \"NO\"\n                if x2 - x > y2 - y:\n                    return \"NO\"\n                return \"YES\", x, y\n    return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    field = [[cell for cell in row] for row in stdin.split(\"\\n\")]\n    \n    # check if there is at least one empty cell\n    if not any(\".\" in row for row in field):\n        return \"NO\"\n    \n    # the bot position\n    x, y = next(((i, j) for i in range(n) for j in range(m) if field[i][j] == \".\"), None)\n\n    # the location where the bomb will be dropped\n    bomb_x, bomb_y = next(((i, j) for i in range(n) for j in range(m) if field[i][j] == \"*\"), None)\n\n    # check if there is a bomb\n    if not bomb_x:\n        return \"NO\"\n\n    # get the walls to be eliminated\n    walls_to_eliminate = []\n    for i in range(n):\n        if field[i][y] == \"*\":\n            walls_to_eliminate.append((i, y))\n        if field[i][m - 1] == \"*\":\n            walls_to_eliminate.append((i, m - 1))\n    for i in range(m):\n        if field[x][i] == \"*\":\n            walls_to_eliminate.append((x, i))\n        if field[n - 1][i] == \"*\":\n            walls_to_eliminate.append((n - 1, i))\n\n    # if the bot is not directly on the bomb, then return\n    if (x, y)!= (bomb_x, bomb_y):\n        return \"NO\"\n\n    # check if the walls can be eliminated\n    if not walls_to_eliminate:\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join([str(x) for x in walls_to_eliminate[0]])\n\n\n\ndef"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[c == '*' for c in stdin[i:]] for i in range(n * m)]\n\n    def clear_from_row(i):\n        if 0 <= i < n:\n            return g[i]\n        return []\n\n    def clear_from_col(j):\n        if 0 <= j < m:\n            return [g[i][j] for i in range(n)]\n        return []\n\n    def clear_row(i):\n        if 0 <= i < n:\n            return clear_from_row(i)\n        return []\n\n    def clear_col(j):\n        if 0 <= j < m:\n            return clear_from_col(j)\n        return []\n\n    def clear_diag(r):\n        if 0 <= r < n:\n            return [g[i][j] for i, j in zip(range(r, -1, -1), range(r, n))]\n        return []\n\n    def clear_rev_diag(r):\n        if 0 <= r < n:\n            return [g[i][j] for i, j in zip(range(r, n), range(r, -1, -1))]\n        return []\n\n    def check_cont(lst):\n        return not any([lst, clear_row(0), clear_col(0), clear_diag(0), clear_rev_diag(0)])\n\n    def row_contains(i, j):\n        return any([i == j for j in clear_row(i)])\n\n    def col_contains(i, j):\n        return any([i == j for i in clear_col(j)])\n\n    def diag_contains(i, j):\n        return any([i == j for i, j in zip(clear_diag(i), clear_rev_diag(i))])\n\n    def check_row(i, j):\n        return all([row_contains(i, j), col_contains(i, j), diag_contains(i, j)])\n\n    def check_col(i, j):\n        return all([row_contains(i, j), col_contains(i, j), diag_contains(i, j)])\n\n    def check_diag(i, j):\n        return all([row_contains(i, j), col_contains(i, j), diag_contains(i, j)])\n\n    def check_all(i, j):\n        return all([check_row(i, j), check_col(i, j), check_diag(i, j)])\n\n    for i in range(n):\n        for j in range(m):\n            if g[i][j] and check_all(i, j):\n                return f\"YES\\n{i} {j}\"\n\n    return \"NO\"\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n.*..\\n....\\n.*..\\n\")\n    'YES\\n1 2'\n    >>> solution(\"3 3\\n..*\\n.*.\\n*..\\n\")\n    'YES\\n2 1'\n    \"\"\"\n    rows, columns = map(int, stdin.split())\n    field = [list(map(str, input())) for _ in range(rows)]\n\n    field = field[::-1]\n    for i in range(rows):\n        for j in range(columns):\n            if field[i][j] == \"*\":\n                field[i][j] = \".\"\n\n    for y in range(rows):\n        is_bomb_in_row = False\n        for x in range(columns):\n            if field[y][x] == \"*\":\n                if is_bomb_in_row:\n                    return \"NO\"\n                is_bomb_in_row = True\n                field[y][x] = \".\"\n                field[y].pop(x)\n                field[y].insert(x, \"*\")\n\n    for x in range(columns):\n        is_bomb_in_column = False\n        for y in range(rows):\n            if field[y][x] == \"*\":\n                if is_bomb_in_column:\n                    return \"NO\"\n                is_bomb_in_column = True\n                field[y][x] = \".\"\n                field[y].pop(x)\n                field[y].insert(x, \"*\")\n\n    return \"YES\\n\" + str(rows - 1) + \" \" + str(columns - 1)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return \"NO\"\n    \n    \n    # Find the rows and cols\n    rows, cols = [int(x) for x in stdin.split()]\n    \n    # Create a 2D array\n    field = [[None for _ in range(cols)] for _ in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            field[i][j] = stdin[i * cols + j]\n    \n    # print(field)\n    \n    # Find the number of walls\n    count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if field[i][j] == \"*\":\n                count += 1\n    \n    # if not count:\n    #     return \"NO\"\n    \n    if count == 0:\n        return \"YES\\n0 0\"\n    \n    # If count is even, return \"NO\"\n    if count % 2 == 0:\n        return \"NO\"\n    \n    # If count is odd, return \"YES\"\n    if count % 2 == 1:\n        return \"YES\"\n    \n    # Create a field to record which walls are wiped out\n    wiped = [[False for _ in range(cols)] for _ in range(rows)]\n    \n    # Start from the top-left corner\n    # Traverse the field until you hit a wall\n    i = 0\n    j = 0\n    while i < rows and j < cols:\n        if field[i][j] == \"*\":\n            if i + 1 < rows:\n                i += 1\n            else:\n                j += 1\n        else:\n            break\n    \n    # While you are still in the field\n    while i < rows and j < cols:\n        # While the cell is not a wall\n        while field[i][j]!= \"*\":\n            if i + 1 < rows:\n                i += 1\n            else:\n                j += 1\n        \n        # If the cell is not a wall\n        if i + 1 < rows and j + 1 < cols:\n            # If the cell above and to the left is not a wall\n            if field[i - 1][j - 1]!= \"*\":\n                wiped[i - 1][j - 1] = True\n            # If the cell above and to the right is not a wall\n            if field[i - 1][j]!= \"*\":\n                wiped[i - 1][j] = True\n            # If the cell above is not a wall\n            if field[i - 1][j + 1]!= \"*\":\n                wiped[i - 1][j + 1] = True\n            # If the cell is not a wall\n            if field[i][j - 1]!= \"*\":\n                wiped[i][j - 1] = True\n            # If the cell is not a wall\n            if field[i][j + 1]!= \"*\":\n                wiped[i][j + 1] = True\n            # If the cell below and to the left is not a wall\n            if field[i + 1][j - 1]!= \"*\":\n                wiped[i + 1][j - 1] = True\n            # If the cell below and to the right is not a wall\n            if field[i + 1][j]!= \"*\":\n                wiped[i + 1][j] = True\n            # If the cell below is not a wall\n            if field[i + 1][j + 1]!= \"*\":\n                wiped[i + 1][j + 1] = True\n        \n        # If the cell is a wall\n        else:\n            # If the cell above is not a wall\n            if field[i - 1][j]!= \"*\":\n                wiped[i - 1][j] = True\n            # If the cell below is not a wall\n            if field[i + 1][j]!= \"*\":\n                wiped[i + 1][j] = True\n        \n        # Check if you hit a corner\n        if i + 1 < rows and j + 1 < cols:\n            # If the cell above and to the left is not a wall\n            if field[i - 1][j - 1]!= \"*\":\n                # If the cell above and to the left is not a wall, but the cell above and to the left has been wiped out, then wipe out the current cell as well\n                if wiped[i - 1][j - 1]:\n                    wiped[i][j] = True\n                    wiped[i - 1][j - 1] = True\n            # If the cell above and to the right is not a wall\n            if field[i - 1][j]!= \"*\":\n                # If the cell above and to the right is not a wall, but the cell above and to the right has been wiped out, then wipe out the current cell as well\n                if wiped[i - 1][j]:\n                    wiped[i][j] = True\n                    wiped[i - 1][j] = True\n            # If the cell above is not a wall\n            if field[i - 1][j + 1]!= \"*\":\n                # If the cell above is not a wall, but the cell above has been wiped out, then wipe out the current cell as well\n                if wiped[i - 1][j + 1]:\n                    wiped[i][j] = True\n                    wiped[i - 1][j + 1] = True\n            # If the cell is not a wall\n            if field[i][j - 1]!= \"*\":\n                # If the cell is not a wall, but the cell has been wiped out, then wipe out the current cell as well\n                if wiped[i][j - 1]:\n                    wiped[i][j] = True\n                    wiped[i][j - 1] = True\n            # If the cell is not a wall\n            if field[i][j + 1]!= \"*\":\n                # If the cell is not a wall, but the cell has been wiped out, then wipe out the current cell as well\n                if wiped[i][j + 1]:\n                    wiped[i][j] = True\n                    wiped[i][j + 1] = True\n            # If the cell below and to the left is not a wall\n            if field[i + 1][j - 1]!= \"*\":\n                # If the cell below and to the left is not a wall, but the cell below and to the left has been wiped out, then wipe out the current cell as well\n                if wiped[i + 1][j - 1]:\n                    wiped[i][j] = True\n                    wiped[i + 1][j - 1] = True\n            # If the cell below and to the right is not a wall\n            if field[i + 1][j]!= \"*\":\n                # If the cell below and to the right is not a wall, but the cell below and to the right has been wiped out, then wipe out the current cell as well\n                if wiped[i +"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(stdin[i]) for i in range(len(stdin))]\n    n, m = len(matrix), len(matrix[0])\n    def neighbours(x: int, y: int):\n        for i, j in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]:\n            if 0 <= i < n and 0 <= j < m:\n                yield i, j\n    def dfs(x: int, y: int):\n        if (x, y) in seen:\n            return\n        seen.add((x, y))\n        matrix[x][y] = '*'\n        for i, j in neighbours(x, y):\n            if matrix[i][j] == '.':\n                dfs(i, j)\n    def search():\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == '.':\n                    dfs(i, j)\n                    return\n    seen = set()\n    search()\n    print('YES' if search() else 'NO')\n    print(' '.join(map(str, seen)))\n    return ''\nprint(solution(stdin))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # w, h = [int(n) for n in stdin.split()]\n    w, h = (int(n) for n in stdin.split())\n    for i in range(w):\n        for j in range(h):\n            if stdin[i*h+j] == \"*\":\n                return \"NO\"\n\n    ans = \"YES\"\n    ans += \" \" + str(w - 1) + \" \" + str(h - 1)\n    return ans"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    import re\n    \n    # get rows and columns\n    r, c = re.findall('\\d+', stdin)[:2]\n    r, c = int(r), int(c)\n    \n    # create an empty field\n    field = [['.' for _ in range(c)] for _ in range(r)]\n    \n    # populate the field\n    for i in range(r):\n        field[i] = stdin.split('\\n')[i]\n    \n    # count the number of walls\n    walls = 0\n    for row in field:\n        walls += row.count('*')\n    \n    # if there are more than 10 walls, then we cannot solve the problem\n    if walls > 10:\n        return 'NO'\n    \n    # if there are more than 1 bomb, then we cannot solve the problem\n    if walls!= 1:\n        return 'NO'\n    \n    # search for the bomb\n    for row in range(r):\n        for col in range(c):\n            if field[row][col] == '*':\n                bomb_r = row\n                bomb_c = col\n                break\n    \n    # check the surroundings of the bomb\n    for row in range(r):\n        for col in range(c):\n            if row!= bomb_r and col!= bomb_c and field[row][col] == '.':\n                field[row][col] = '*'\n    \n    # count the number of walls in the bomb's surroundings\n    surroundings = [field[bomb_r][bomb_c], field[bomb_r][bomb_c+1], field[bomb_r+1][bomb_c], field[bomb_r+1][bomb_c+1]]\n    \n    # check if all walls are wiped out\n    for w in surroundings:\n        if w == '*':\n            return 'NO'\n    \n    # all walls are wiped out\n    return 'YES'\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    field = []\n    for _ in range(n):\n        field.append(stdin[(n*_):(n*(_+1))])\n    print(field)\n    \n    #wipe out all walls\n    print(wipe_out_all_walls(field))\n    return 'YES'\n    \ndef"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, m = map(int, input[0].split())\n    matrix = input[1:]\n    free_cells = []\n    occupied_cells = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                free_cells.append((i, j))\n            else:\n                occupied_cells.append((i, j))\n    \n    result = []\n    bomb_cells = []\n    for x in free_cells:\n        free_cells.remove(x)\n        for y in occupied_cells:\n            if (x[0] - y[0]) == 0:\n                bomb_cells.append((x[0], y[1]))\n            elif (x[1] - y[1]) == 0:\n                bomb_cells.append((x[0], x[1]))\n        for z in free_cells:\n            if (x[0] - z[0]) == 0:\n                bomb_cells.append((x[0], z[1]))\n            elif (x[1] - z[1]) == 0:\n                bomb_cells.append((x[0], x[1]))\n    \n    for bomb in bomb_cells:\n        if bomb not in occupied_cells:\n            result.append(bomb)\n    \n    if len(result) == 0:\n        return 'NO'\n    else:\n        return 'YES' +'' +''.join([str(x) for x in result])"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)\"\"\"\n    n, m, a, b = [int(i) for i in stdin.split(\" \")]\n    answer = (n - 1) * (a + b) - m * a\n    return str(abs(answer))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, w = map(int, stdin.split())\n\n    return f\"{max(0, x // y + x // z + x // w - 3)} burles\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return str(a * m * n + b * (n - m * (n // m)))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return str(max(0, (n - 1) * m * a + (n - 1) * b))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split(' '))\n    box = n\n    flag = True\n    while True:\n        if n % m!= 0:\n            box -= 1\n            n -= 1\n            flag = False\n            break\n        if m % 2 == 1:\n            break\n        box -= 1\n        m = m // 2\n        n = n // 2\n    if flag:\n        return str(box * a + n * b)\n    else:\n        return str(box * a + n * b + b)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)\n    '''\n    n, m, a, b = map(int, stdin.split(' '))\n    return (n//m) * min(n%m, b) + min(n%m, a)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = list(map(int, stdin.split()))\n    return str(max(0, (n - 1) // m * (a + b * (m - 1)) - n + 1))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(i) for i in stdin.split(' ')]\n    \n    boxes = m // n\n    \n    while n % m:\n        m += 1\n        n += 1\n    \n    a_total = (boxes + 1) * n\n    b_total = boxes * m\n    \n    return str(a_total + b_total)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split(' '))\n\n    return str(max(0, n - m * (a - b)))"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    best = 0\n    best_i = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += a[j]\n            if total % 2 == 1 and total >= best:\n                best = total\n                best_i = j - i + 1\n    print(best)\n    return str(best)\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    def max_subseq(seq):\n        return sum(seq)\n    # return max(map(max_subseq, combinations(seq, len(seq) // 2)))\n    return max(map(max_subseq, combinations(list(map(int, stdin.split(' '))), len(stdin.split(' ')) // 2)))\n\n\n\n\n\"\"\""
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Not implemented\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_element = int(stdin.split()[0])\n    elements = [int(n) for n in stdin.split()[1:]]\n    odd_summ = 0\n    odd_sum_max = 0\n    odd_summ_max_indices = []\n\n    for i in range(0, number_of_element):\n        if elements[i] % 2!= 0:\n            odd_summ += elements[i]\n            odd_summ_max_indices.append(i)\n\n        if odd_summ > odd_sum_max:\n            odd_sum_max = odd_summ\n            odd_summ_max_indices = [i]\n\n    if odd_summ_max_indices:\n        s = \"\"\n        for i in odd_summ_max_indices:\n            s += str(elements[i]) + \" \"\n        print(s)\n    else:\n        print(\"No such subseqeuence\")\n\nsolution(input())\n\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_sum = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n\n    best_sum = 0\n    for start in range(0, len(numbers)):\n        for end in range(start+1, len(numbers)):\n            current_sum = sum(numbers[start:end])\n            if current_sum % 2!= 0:\n                if current_sum > best_sum:\n                    best_sum = current_sum\n\n    print(best_sum)"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sum, even, odd = 0, 0, 0\n    for s in stdin.split('\\n')[0]:\n        if int(s) % 2 == 0:\n            even += int(s)\n        else:\n            odd += int(s)\n    if odd > even:\n        sum = odd\n    else:\n        sum = even\n    return str(sum)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    ans = -10**9\n    for i in range(N):\n        for j in range(i, N):\n            if ans < sum(nums[i:j+1]):\n                ans = sum(nums[i:j+1])\n    return str(ans)\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and O(1) space complexity soltuion\"\"\"\n    T, n = [int(i) for i in stdin.split('\\n')]\n    numbers = [list(map(int, stdin.split('\\n')[i].split())) for i in range(n)]\n    # numbers[i] = [t, g]\n    # t - song length, g - song genre\n    return min(sum((t * (t + 1)) // 2 for t, g in numbers if t > g) for i in range(n)) % (10**9 + 7)\n\n\ndef"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        songs.append(list(map(int, stdin.split())))\n\n    def check(songs):\n        for i in range(n):\n            for j in range(i + 1, n):\n                if songs[i][1] == songs[j][1]:\n                    return False\n        return True\n\n    def count(l, r):\n        if l >= r:\n            return 1\n        if l + 1 >= r:\n            return 1\n        res = 0\n        for i in range(l, r):\n            for j in range(i + 1, r):\n                if check(songs[l:i + 1] + songs[i + 1:j + 1] + songs[j + 1:r]):\n                    res += count(l, i) * count(i + 1, j) * count(j + 1, r)\n        return res % (10 ** 9 + 7)\n\n    return count(0, n - 1)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 1\\n1 2\\n1 3\\n\")\n    '6'\n    >>> solution(\"4 10\\n5 3\\n2 1\\n3 2\\n5 1\\n\")\n    '10'\n    >>> solution(\"4 10\\n5 4\\n2 1\\n3 2\\n5 1\\n\")\n    '10'\n    \"\"\"\n    n, T = (int(x) for x in stdin.split(\" \"))\n    songs = []\n    for i in range(n):\n        t, g = (int(x) for x in stdin.split(\"\\n\")[i].split(\" \"))\n        songs.append((t, g))\n\n    def f(S: List[int], S_: List[int]) -> bool:\n        return len(S)!= len(set(S)) or len(S_)!= len(set(S_)) or any(\n            [\n                S[i] == S_[i - 1]\n                for i in range(1, len(S))\n                if S[i] == S_[i - 1]\n            ]\n        )\n\n    count = 0\n    dp = [[False for _ in range(T + 1)] for _ in range(n + 1)]\n    dp[0][0] = True\n    for t, g in songs:\n        for i in range(n + 1):\n            for j in range(T + 1):\n                if dp[i][j]:\n                    if j + t <= T and g == songs[i][1]:\n                        dp[i + 1][j + t] = True\n                    if j <= t:\n                        dp[i + 1][j] = True\n\n                    if f(dp[i][j:j + t], dp[i + 1][j:j + t]):\n                        count += 1\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of unique playlists Polycarp can make in exactly T minutes\n    and no consecutive songs of the same genre.\n    \"\"\"\n    n, T = [int(x) for x in stdin.split()]\n    songs = []\n    for _ in range(n):\n        t, g = [int(x) for x in stdin.split()]\n        songs.append((t, g))\n    \n    dp = [[0 for _ in range(3)] for _ in range(T+1)]\n\n    for song in songs:\n        dp[song[0]][song[1]] = max(dp[song[0]][song[1]], 1)\n\n    for i in range(1, T+1):\n        for j in range(1, 3):\n            dp[i][j] = dp[i][j-1]\n            for k in range(1, 3):\n                if k!= j:\n                    dp[i][j] = max(dp[i][j], dp[i-song[0]][k])\n\n    return dp[T][1]"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity: time and space\n    \"\"\"\n    n, T = map(int, stdin.split(' '))\n    d = {}\n    for i in range(n):\n        t, g = map(int, stdin.split(' '))\n        d[(t, g)] = 1\n    res = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                continue\n            t, g = d.get((i, j), 0), d.get((j, i), 0)\n            res += t + g\n    return res % (10 ** 9 + 7)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    T = int(stdin[1])\n    arr = list(map(int, stdin[2:]))\n    arr.sort(key=lambda i: (i[0], i[1]))\n\n    def f(k: int, arr: list) -> int:\n        if k == 0:\n            return 1\n\n        c = 0\n        if arr[0][0] <= k:\n            for i in range(arr[0][1]):\n                c += f(k - arr[0][0], arr[1:])\n        c += f(k, arr[1:])\n\n        return c % int(1e9)\n\n    return f(T, arr)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 3\n   ... 1 1\n   ... 1 2\n   ... 1 3''')\n    '6'\n    >>> solution('''3 3\n   ... 1 1\n   ... 1 1\n   ... 1 3''')\n    '2'\n    >>> solution('''4 10\n   ... 5 3\n   ... 2 1\n   ... 3 2\n   ... 5 1''')\n    '10'\n    '''\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets number of different sequences of songs, the total duration is exactly T, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    while len(a) < n:\n        # Choose a random number\n        x = randrange(1, n)\n        # Add it to the array\n        a.append(x)\n        # Compute the GCD\n        gcd = gcd_list(a)\n        # If it equals to 1, break\n        if gcd == 1:\n            break\n    return len(a) - n\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = [1]\n    while True:\n        x = randint(1, m)\n        a.append(x)\n        y = gcd(*a)\n        if y == 1:\n            break\n        a = [i//y for i in a]\n    print(reduce(operator.mul, (i for i in a if i!= 1), 1))\n    return \"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    while True:\n        x = randint(1, m)\n        a.append(x)\n        gcd = gcd_list(a)\n        if gcd == 1:\n            break\n    print(len(a))\n    return str(int(1/2 * len(a)))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, m = stdin.split('\\n')\n    a, m = int(a), int(m)\n    count = 0\n    while True:\n        count += 1\n        x = randint(1, m)\n        a.append(x)\n        gcd = gcd_of_a_array(a)\n        if gcd == 1:\n            break\n\n    return str(count * 2 + 1)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m < 2:\n        return 1\n    a = [0]\n    while a[-1]!= 1:\n        a.append(a[-1] % m)\n        print(a)\n    return int(a[0] * reduce(gcd, a[1:]))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    while len(a) < m:\n        r = randint(1, m)\n        a.append(r)\n        m = gcd(a)\n        if m == 1:\n            break\n    return str(len(a))\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    m = int(stdin)\n    a = []\n    while m > 0:\n        if m % 2 == 0:\n            a.append(2)\n            m //= 2\n        else:\n            a.append(1)\n            m -= 1\n    if len(a) % 2 == 1:\n        a.append(1)\n    a = a[::-1]\n    gcd = 0\n    for i in range(len(a) - 1):\n        gcd = gcd_of_two(gcd, a[i + 1])\n    # print(gcd)\n    return str(gcd)\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    a = []\n    while len(a) < input:\n        x = random.randint(1, input)\n        a.append(x)\n        a.sort()\n    a.append(a[0])\n    while a[-1] == 1:\n        a = a[:-1]\n    # print(a)\n    # print(a[0] * reduce(lambda x, y: (x * y) % 1000000007, a[1:]))\n    print(a[0] * reduce(lambda x, y: x * y % 1000000007, a[1:]))\n\n\nsolution('4')\nsolution('2')\nsolution('1')\nsolution('100')\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 1\n    while m > 1:\n        count += 1\n        m = m // 2\n\n    return str(count * 2)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = [int(x) for x in stdin.split()]\n    count = 0\n    for a in range(l, r + 1):\n        for b in range(a + 1, r + 1):\n            if a % x == 0 and b % y == 0:\n                count += 1\n    return str(count)\n\n----MY SOLUTION------\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split(' '))\n    return 0\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(' ')\n    l = int(input[0])\n    r = int(input[1])\n    x = int(input[2])\n    y = int(input[3])\n    print(l * (r // x + (r % x > 0)) - (r // y + (r % y > 0)))\n    return ''\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    l, r, x, y = [int(c) for c in lines[0].split()]\n    result = 0\n    for x in range(l, r + 1):\n        for y in range(l, r + 1):\n            if x * y > r * r:\n                break\n            if x % y == 0 or y % x == 0:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    count = 0\n    for i in range(l, r + 1):\n        for j in range(l, r + 1):\n            if i * j == x * y:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.split(\" \")\n    l, r, x, y = [int(el) for el in input_string]\n    return str(count_good_pairs(l, r, x, y))\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(l, r + 1):\n        if i % x == 0 and y % i == 0:\n            res += 1\n    return res"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = [int(x) for x in stdin.split(' ')]\n    \n    return str(sum([1 for x in range(l, r + 1) for y in range(x, y + 1) if math.gcd(x, y) == 1 and math.lcm(x, y) == x * y]))"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"Your solution goes here.\"\"\"\n    input_array = stdin.split(' ')\n    l, r, x, y = [int(x) for x in input_array]\n    n = 0\n    \n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            if i % x == 0 and j % y == 0:\n                n += 1\n    return str(n)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    result = None\n    for i in range(1, b+1):\n        if a * i % b == 0:\n            result = i\n            break\n    return str(result)\n\n\"\"\"\n\nimport math\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    lcm = 1\n    for i in range(a):\n        if a * i % b == 0:\n            lcm = a * i // b\n            break\n    return lcm\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    g = gcd(a, b)\n    k = 0\n    while a * k + b * k <= g * (k + 1):\n        if a * k + b * k == g * (k + 1):\n            return str(k)\n        k += 1\n    return \"0\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION 2-----\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b - gcd(a, b))\n\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = 0\n    while gcd(a + k, b + k) == 1:\n        k += 1\n    return str(k - 1)"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        a, b = b, a\n    div = math.gcd(a, b)\n    while div!= 1:\n        if div > 1:\n            if a % div == 0 and b % div == 0:\n                div = div - 1\n            else:\n                a = a - b\n                div = math.gcd(a, b)\n        else:\n            if a % div == 0 and b % div == 0:\n                return str(div)\n            else:\n                div = div - 1\n    return str(a + b - div)\n\n\n\n'''\nfrom math import gcd\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    l = lcm(a, b)\n    print(lcm(a, b) - (a + b))\n    return ''\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    k = 1\n    while (a + k) * (b + k) > 0:\n        k += 1\n    return str(k - 1)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    a, b = sorted([a, b])\n    lcm = (a + b) // gcd(a, b)\n    while a < lcm:\n        if lcm % a == 0:\n            b = lcm\n        if lcm % b == 0:\n            a = lcm\n        lcm += 1\n    return str(b - a)\n\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    m = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    m = sorted(m)\n    s = 0\n    for i in range(n):\n        s += m[i]\n    if s < k:\n        return str(k - s)\n    else:\n        return str(0)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.readline().split(\" \")\n    n = int(first_line[0])\n    k = int(first_line[1])\n    second_line = stdin.readline().split(\" \")\n    marks = [int(i) for i in second_line]\n    marks = sorted(marks, key=lambda x: x)\n    sum_marks = sum(marks)\n    num_marks = len(marks)\n    marks_to_k = k\n    while marks_to_k > 0:\n        marks_to_k -= num_marks - marks.index(marks_to_k)\n    return str(marks_to_k)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of additional marks needed in order to reach\n    the grade of a given mark.\n\n    Args:\n        stdin (str): A string representation of input.\n\n    Returns:\n        str: A string representation of the output.\n    \"\"\"\n    n, k = (int(i) for i in stdin.split())\n    marks = sorted([int(i) for i in stdin.split()])\n    needed = k - marks[-1]\n    return str(needed)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find minimal number of marks that Leha has to add in order to change Noora's final mark to k.\n    '''\n    stdin = stdin.split('\\n')\n    marks = list(map(int, stdin[0].split()))\n    k = marks[1]\n    marks = marks[0]\n    needed_marks = k - marks\n    ans = 0\n    marks = sorted(marks)\n    for i in range(len(marks)):\n        ans += needed_marks // (len(marks) - i)\n    print(ans)\n    return ''\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    nums = [int(x) for x in stdin.split()]\n\n    i, j = 0, K\n    min_count = 0\n    while i < len(nums) and j > 0:\n        if nums[i] == K:\n            i += 1\n            j += 1\n        elif nums[i] < K:\n            j -= 1\n            min_count += 1\n        elif nums[i] > K:\n            i += 1\n\n    return str(min_count)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    marks = list(map(int, stdin.split()))\n    s = 0\n    for i in range(n):\n        s += marks[i]\n    marks.sort()\n    min_marks = k - s\n    for i in range(n):\n        min_marks = max(0, min_marks - marks[i])\n    print(min_marks)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    scores = map(int, stdin.split(' '))\n    return sum(max(k - x, 0) for x in scores)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    scores = [int(x) for x in stdin.split(' ')]\n    print(sum(scores) - max(scores) - k)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    s = [int(x) for x in stdin.split('\\n')[1].split()]\n    m = max(s)\n    if k < m:\n        return str(m - k)\n    if k == m:\n        return '0'\n    if k < 0:\n        return str(k + m)\n    return str(m)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split(\" \")]\n    arr = [x for x in arr if x > 0]\n    if not arr:\n        return \"0\"\n    s = len(arr)\n    for i in range(len(arr)):\n        if s >= 2 * (len(arr) // 2):\n            return str(arr[i])\n        else:\n            arr[i] = arr[i] / arr[i]\n            if arr[i] == int(arr[i]):\n                arr[i] = int(arr[i])\n            elif arr[i] > 0:\n                arr[i] = int(arr[i]) + 1\n            else:\n                arr[i] = int(arr[i]) - 1\n            s += 1\n    return \"0\"\n\n\ndef"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    numbers = [int(i) for i in stdin.split()]\n    result = 0\n    # positive = [i for i in numbers if i > 0]\n    # negative = [i for i in numbers if i < 0]\n    for i in numbers:\n        if i > 0:\n            result += 1\n    if result < n // 2:\n        return 0\n    else:\n        positive_list = [i for i in numbers if i > 0]\n        negative_list = [i for i in numbers if i < 0]\n        if len(positive_list) > len(negative_list):\n            # return max(positive_list)\n            if len(positive_list) // 2 > len(negative_list):\n                return min(positive_list)\n            else:\n                return 0\n        else:\n            if len(positive_list) == len(negative_list):\n                return 0\n            else:\n                # return max(negative_list)\n                if len(negative_list) // 2 > len(positive_list):\n                    return min(negative_list)\n                else:\n                    return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(nums[i]):\n            if nums[i] % (j + 1) == 0:\n                count += 1\n        if count >= (n // 2):\n            print(j + 1)\n            break\n        else:\n            count = 0\n    return ''\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, numbers = stdin.split('\\n')\n    numbers = list(map(int, numbers.split()))\n    n = len(numbers)\n\n    d = 0\n    positive_numbers = 0\n    while True:\n        for n in numbers:\n            if n % d == 0:\n                positive_numbers += 1\n        if positive_numbers >= n / 2:\n            break\n        d += 1\n        positive_numbers = 0\n\n    return str(d)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(x) for x in stdin.readline().strip().split()]\n    counter = 0\n    d = None\n    for i in numbers:\n        if i > 0:\n            counter += 1\n    for i in range(1, len(numbers) + 1):\n        tmp = numbers[:]\n        for j in range(len(tmp)):\n            if tmp[j] > 0:\n                tmp[j] = i\n                counter_tmp = 0\n                for k in tmp:\n                    if k > 0:\n                        counter_tmp += 1\n                if counter_tmp >= n // 2:\n                    if d:\n                        if i > d:\n                            d = i\n                    else:\n                        d = i\n                    break\n    return str(d)\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = sorted(map(int, stdin.readline().strip().split(' ')))\n    for i in arr:\n        if i > 0:\n            if arr.count(i) >= len(arr) / 2:\n                return str(i)\n    return '0'"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given an array of $n$ integers: $a_1, a_2, \\ldots, a_n$. Your task is to find some non-zero integer $d$ ($-10^3 \\le d \\le 10^3$) such that, after each number in the array is divided by $d$, the number of positive numbers that are presented in the array is greater than or equal to half of the array size (i.e., at least $\\lceil\\frac{n}{2}\\rceil$). Note that those positive numbers do not need to be an integer (e.g., a $2.5$ counts as a positive number). If there are multiple values of $d$ that satisfy the condition, you may print any of them. In case that there is no such $d$, print a single integer $0$.\n\nRecall that $\\lceil x \\rceil$ represents the smallest integer that is not less than $x$ and that zero ($0$) is neither positive nor negative.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of elements in the array.\n\nThe second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($-10^3 \\le a_i \\le 10^3$).\n\n\n-----Output-----\n\nPrint one integer $d$ ($-10^3 \\le d \\le 10^3$ and $d \\neq 0$) that satisfies the given condition. If there are multiple values of $d$ that satisfy the condition, you may print any of them. In case that there is no such $d$, print a single integer $0$.\n\n\n-----Examples-----\nInput\n5\n10 0 -7 2 6\nOutput\n4\nInput\n7\n0 0 1 -1 0 0 2\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first sample, $n = 5$, so we need at least $\\lceil\\frac{5}{2}\\rceil = 3$ positive numbers after division. If $d = 4$, the array after division is $[2.5, 0, -1.75, 0.5, 1.5]$, in which there are $3$ positive numbers (namely: $2.5$, $0.5$, and $1.5$).\n\nIn the second sample, there is no valid $d$, so $0$ should be printed.\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\narr = list(map(int, sys.stdin.readline().split()))\n\narr.sort()\n\ndef"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    \n    return str(max(0, (n - 1) // 2))\n    \n    \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = 2\n    count = 0\n    while a <= n or b <= n:\n        if a + b > n:\n            break\n        if b > n:\n            a = a + 1\n            b = a + 1\n            continue\n        if a * 10 + b > n:\n            b = b + 1\n            continue\n        if a * 10 + b == n:\n            count += 1\n        b = b + 1\n    return str(count)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    ans = 0\n    # n is odd\n    if n % 2!= 0:\n        ans += int(solution(n - 1))\n        ans += int(solution(n - 3))\n        ans += int(solution(n - 5))\n        ans += int(solution(n - 7))\n        ans += int(solution(n - 9))\n        ans += int(solution(n - 11))\n        ans += int(solution(n - 13))\n        ans += int(solution(n - 15))\n        ans += int(solution(n - 17))\n        ans += int(solution(n - 19))\n        ans += int(solution(n - 21))\n        ans += int(solution(n - 23))\n    # n is even\n    else:\n        ans += int(solution(n - 1))\n        ans += int(solution(n - 3))\n        ans += int(solution(n - 5))\n        ans += int(solution(n - 7))\n        ans += int(solution(n - 9))\n        ans += int(solution(n - 11))\n        ans += int(solution(n - 13))\n        ans += int(solution(n - 15))\n        ans += int(solution(n - 17))\n        ans += int(solution(n - 19))\n        ans += int(solution(n - 21))\n        ans += int(solution(n - 23))\n        ans += int(solution(n - 25))\n    return str(ans)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if (i+j)%9 == 0:\n                count +=1\n    return str(count)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in range(len(stdin)):\n        a.append(int(stdin[i]))\n    a.sort()\n    a.reverse()\n    # print(a)\n    count = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i == j:\n                continue\n            if a[i] + a[j] == a[i]*2:\n                count += 1\n    return count\n\n\nprint(solution('438914755'))\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the maximum number of nines at the end of the total cost of pairs of shovels.\n    \"\"\"\n    shovel_costs: str = stdin\n    nines: int = int(shovel_costs[0])\n    for i in range(1, nines):\n        nines += (i % 10 == 9)\n    return str(nines // 2)"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find number of ways for Polycarps to sell shovels in a pair,\n    where one of the shovels has an additional cost of n burles.\n    \"\"\"\n    n = int(stdin)\n    # we need to count how many ways we can sell 2 burles to get n burles\n    # so we need to look at how many ways we can sell n burles without 2 burles\n    # we can start counting from n - 2 and move down\n    if n % 9 == 0:\n        return n // 9\n    else:\n        return 0\n\nprint(solution('7'))\nprint(solution('14'))\nprint(solution('50'))\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Create a set of the all the nines and the remaining digits\n    \"\"\"\n    s = stdin\n    m = {9 for i in range(0, len(s))}\n    for i in range(0, len(s)):\n        if s[i]!= \"9\":\n            m.add(int(s[i]))\n    \"\"\"\n    Create a list of all the combinations for the remaining digits\n    \"\"\"\n    combs = list(itertools.combinations(m, 2))\n    \"\"\"\n    Get all combinations of 9s and count them\n    \"\"\"\n    count = 0\n    for c in combs:\n        if sum(c) % 9 == 0:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s, e = min(a, b), max(a, b)\n    while s!= e:\n        s, e = (s + e) // 2, (s + e + 1) // 2\n        if s * e > a * b:\n            e = e - 1\n        elif s * e < a * b:\n            s = s + 1\n        else:\n            break\n    return str(s) + \" \" + str(e)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n        str\n    Output:\n        str\n    \"\"\"\n    a, b = map(int, stdin.split())\n    a_b, b_a = min(a, b), max(a, b)\n    result = []\n    while True:\n        c_a = a_b // 2\n        c_b = b_a // 2\n        if c_a == 0:\n            break\n        elif c_a == 1:\n            a_b, b_a = b_a, a_b\n        elif c_b == 0:\n            break\n        elif c_b == 1:\n            a_b, b_a = b_a, a_b\n        result.append(a_b)\n        result.append(b_a)\n    if len(result) > 0:\n        return \" \".join(map(str, result))\n    else:\n        return -1\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 6\\\\n2 3\\\\n')\n    '1'\n    >>> solution('36 5\\\\n10 16\\\\n')\n    '3'\n    >>> solution('3 5\\\\n2 1\\\\n')\n    '-1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a < b:\n        a, b = b, a\n    while a % 2 == 0:\n        a //= 2\n    while b % 2 == 0:\n        b //= 2\n    if a < b:\n        a, b = b, a\n    if a!= b:\n        return [-1]\n    return [a, b]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_bar = [int(i) for i in stdin.split(' ')]\n    second_bar = [int(i) for i in stdin.split(' ')]\n    if first_bar[0] * second_bar[0] < first_bar[1] * second_bar[1]:\n        return -1\n\n    a = (first_bar[0] + second_bar[0]) // 2\n    b = (first_bar[1] + second_bar[1]) // 2\n    first_bar[0] = a\n    second_bar[0] = a\n    first_bar[1] = b\n    second_bar[1] = b\n    minutes = 0\n    while not (first_bar[0] == second_bar[0] and first_bar[1] == second_bar[1]):\n        if first_bar[0] > second_bar[0]:\n            first_bar[0] = first_bar[0] - 1\n            first_bar[1] = first_bar[1] + 1\n        else:\n            first_bar[0] = first_bar[0] + 1\n            first_bar[1] = first_bar[1] - 1\n        if first_bar[1] > second_bar[1]:\n            second_bar[1] = second_bar[1] - 1\n            second_bar[0] = second_bar[0] + 1\n        else:\n            second_bar[1] = second_bar[1] + 1\n            second_bar[0] = second_bar[0] - 1\n        minutes = minutes + 1\n    return minutes\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a, b = max(a, b), min(a, b)\n    for i in range(1, 1001):\n        a, b = max(a, b) // 2, min(a, b) // 3\n        if a == 1:\n            return str(i)\n    return '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 0\n\n    a, b = max(a, b), min(a, b)\n    if a % b:\n        return -1\n    else:\n        c = b\n        while a % c!= 0:\n            c -= 1\n        return a // c\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    x = [m, n]\n    print(x)\n    x.sort()\n    print(x)\n    \n    if x[1] % 2!= 0:\n        if x[1] % 4!= 0:\n            return -1\n        \n    return x[0]"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x % 2 == y % 2:\n        if y >= x + y:\n            return x // 2 + 1\n        else:\n            return x // 2 + 1 + y // 2\n    elif x % 2 == 0:\n        return x // 2\n    else:\n        return x // 2 + y // 3\n    \n    \n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2 = map(int, stdin.split())\n    m1, m2 = math.ceil(a1 / b1), math.ceil(a2 / b2)\n    if m2 - m1 > 1:\n        return '-1'\n    m3, m4 = max(m1, m2), min(m1, m2)\n    if m3 == m4:\n        return str(m3)\n    s1 = a1 // b1\n    s2 = a2 // b2\n    max_s = s1 if s1 >= s2 else s2\n    min_s = s1 if s1 <= s2 else s2\n    if min_s == 1:\n        return str(m4)\n    while max_s % min_s!= 0:\n        max_s += 1\n    return str(m4 + max_s // min_s)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    board = [(x_v, y_v)]\n    if x_p - x_v == 0:\n        x_v = x_v + 1\n        while x_v <= x_p:\n            board.append((x_v, y_v))\n            x_v += 1\n        while y_v >= y_p:\n            board.append((x_v, y_v))\n            y_v -= 1\n    elif y_p - y_v == 0:\n        y_v = y_v + 1\n        while y_v <= y_p:\n            board.append((x_v, y_v))\n            y_v += 1\n        while x_v >= x_p:\n            board.append((x_v, y_v))\n            x_v -= 1\n    else:\n        if (x_v + y_v) % 2 == 0:\n            if abs(y_v - y_p) == abs(x_v - x_p):\n                if y_v < y_p:\n                    x_v += 1\n                    while x_v <= x_p:\n                        board.append((x_v, y_v))\n                        x_v += 1\n                    while y_v >= y_p:\n                        board.append((x_v, y_v))\n                        y_v -= 1\n                else:\n                    y_v += 1\n                    while y_v <= y_p:\n                        board.append((x_v, y_v))\n                        y_v += 1\n                    while x_v >= x_p:\n                        board.append((x_v, y_v))\n                        x_v -= 1\n            else:\n                if y_v < y_p:\n                    x_v += 1\n                    while x_v <= x_p:\n                        board.append((x_v, y_v))\n                        x_v += 1\n                    while y_v >= y_p:\n                        board.append((x_v, y_v))\n                        y_v -= 1\n                else:\n                    y_v += 1\n                    while y_v <= y_p:\n                        board.append((x_v, y_v))\n                        y_v += 1\n                    while x_v >= x_p:\n                        board.append((x_v, y_v))\n                        x_v -= 1\n        else:\n            if abs(y_v - y_p) == abs(x_v - x_p):\n                if y_v < y_p:\n                    x_v += 1\n                    while x_v <= x_p:\n                        board.append((x_v, y_v))\n                        x_v += 1\n                    while y_v >= y_p:\n                        board.append((x_v, y_v))\n                        y_v -= 1\n                else:\n                    y_v += 1\n                    while y_v <= y_p:\n                        board.append((x_v, y_v))\n                        y_v += 1\n                    while x_v >= x_p:\n                        board.append((x_v, y_v))\n                        x_v -= 1\n            else:\n                if y_v < y_p:\n                    x_v += 1\n                    while x_v <= x_p:\n                        board.append((x_v, y_v))\n                        x_v += 1\n                    while y_v >= y_p:\n                        board.append((x_v, y_v))\n                        y_v -= 1\n                else:\n                    y_v += 1\n                    while y_v <= y_p:\n                        board.append((x_v, y_v))\n                        y_v += 1\n                    while x_v >= x_p:\n                        board.append((x_v, y_v))\n                        x_v -= 1\n    return \"Polycarp\" if len(set(board)) == 1 else \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = stdin.split()\n    x_p, y_p, x_v, y_v = int(x_p), int(y_p), int(x_v), int(y_v)\n\n    def has_win(x_p, y_p, x_v, y_v):\n        if x_v < 0 or y_v < 0:\n            return True\n        if x_v > x_p:\n            return False\n        if y_v > y_p:\n            return False\n        if x_v == x_p and y_v == y_p:\n            return True\n        return False\n\n    if has_win(x_p, y_p, x_v, y_v):\n        return 'Vasiliy'\n    elif has_win(x_p, y_p, x_v, y_v):\n        return 'Polycarp'\n    return 'DRAW'\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def search(x, y):\n        def bfs(start):\n            queue = [start]\n            seen = {(start.x, start.y): True}\n            while queue:\n                current = queue.pop(0)\n                if current.x == 0 and current.y == 0:\n                    return current\n                for dx, dy in D:\n                    new = current + Point(dx, dy)\n                    if new.x < 0 or new.y < 0:\n                        continue\n                    if new.x >= N or new.y >= M:\n                        continue\n                    if (new.x, new.y) not in seen:\n                        queue.append(new)\n                        seen[(new.x, new.y)] = True\n            return None\n\n        queue = [Point(x, y)]\n        seen = {(x, y): True}\n        while queue:\n            current = queue.pop(0)\n            for dx, dy in D:\n                new = current + Point(dx, dy)\n                if new.x < 0 or new.y < 0:\n                    continue\n                if new.x >= N or new.y >= M:\n                    continue\n                if (new.x, new.y) not in seen:\n                    queue.append(new)\n                    seen[(new.x, new.y)] = True\n        return bfs(Point(x, y))\n\n    N, M = [int(x) for x in stdin.split()]\n    D = [Point(1, 0), Point(1, -1), Point(0, -1), Point(0, 0)]\n    p, v = [Point(int(x), int(y)) for x, y in stdin.split()]\n    if p == v:\n        return \"Polycarp\"\n    r1 = search(p.x, p.y)\n    r2 = search(v.x, v.y)\n    r = r1 if r1.x < r2.x or (r1.x == r2.x and r1.y < r2.y) else r2\n    return \"Polycarp\" if r.x < N // 2 else \"Vasiliy\"\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __repr__(self):\n        return f\"({self.x}, {self.y})\"\n\n\ndef"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Polycarp\"\n\ndef"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    polycarp_x, polycarp_y, vasiliy_x, vasiliy_y = map(int, stdin.split())\n    if abs(polycarp_x - vasiliy_x) <= 1 and abs(polycarp_y - vasiliy_y) <= 1:\n        print(\"Polycarp\")\n    else:\n        print(\"Vasiliy\")"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    if x_p >= x_v:\n        x_i = x_p - 1\n    else:\n        x_i = x_p\n    if y_p <= y_v:\n        y_i = y_p + 1\n    else:\n        y_i = y_p\n    while x_i!= 0 or y_i!= 0:\n        if x_i - 1 >= 0 and y_i - 1 >= 0:\n            if x_i - 1 >= 0 and y_i - 1 >= 0 and x_i - 1 == x_v and y_i - 1 == y_v:\n                return 'Vasiliy'\n        if x_i - 1 >= 0 and x_i - 1 == x_v and y_i - 1 == y_v:\n            return 'Vasiliy'\n        if y_i - 1 >= 0 and x_i - 1 == x_v and y_i - 1 == y_v:\n            return 'Vasiliy'\n        if x_i - 1 >= 0 and y_i - 1 >= 0 and x_i - 1 == x_v and y_i - 1 == y_v:\n            return 'Vasiliy'\n        x_i = x_i - 1\n        y_i = y_i - 1\n    return 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, vx, vy = [int(i) for i in stdin.split(\" \")]\n    if x == vx and y == vy:\n        return \"Polycarp\"\n    if x < vx and y < vy:\n        return \"Vasiliy\"\n    if abs(x - vx) == abs(y - vy):\n        return \"Polycarp\"\n    return \"Vasiliy\"\n    "
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import datetime\n    print(\n        datetime.datetime.strptime(\n            stdin,\n            \"%d %m\"\n        ).isocalendar()[1]\n    )\n    return ''\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\ndef"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    m,d=map(int,stdin.split())\n    n=0\n    \n    if m%2==0:\n        n=int((m/2)*6)\n    else:\n        n=int(m//2*5+1)\n    \n    if d==7:\n        n=n-1\n    \n    return n\n\n\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    return '{}'.format(max(d * 7 // (m - 1), 7))\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.strip().split(' ')]\n    a = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n    b = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    return b[(int(a[x])+int(a[x+1])+int(a[x+2]))%7].lower() + \\\n           b[(int(a[y])+int(a[y+1]))%7].lower() + \\\n           b[(int(a[y])+int(a[y+1])+int(a[y+2]))%7].lower()\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\"\"\"\n\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f'{(7 + int(stdin[1])) % 7 + 1}'\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    i = a\n    while i <= b:\n        if (i % 10 == 0) or (i % 10 == 1 and i > 10):\n            print(i)\n        i += 1\n    return ''\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n    a, b = map(int, stdin.split())\n    return sum(1 for year in range(a, b + 1) if bin(year)[2:].count('0') == 1)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\na, b = map(int, stdin.strip().split())\n\nres = sum(map(lambda x: int(x, 2).bit_length(), range(a, b + 1)))\nprint(res)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first, last = map(int, stdin.split())\n    count = 0\n    for x in range(first, last+1):\n        if bin(x)[2:].count(\"0\") == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, end = map(int, stdin.split())\n    count = 0\n    for i in range(end + 1):\n        if '0' in bin(i)[2:]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return sum(1 for x in range(a, b+1) if bin(x).count(\"0\") == 1)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    start, end = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(start, end + 1):\n        if bin(i)[2:].count('0') == 1:\n            res += 1\n    return str(res)\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    count = 0\n    for i in range(a, b + 1):\n        if i % 10 == 0:\n            continue\n        if is_one_zero_in_binary_representation(i):\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = list(map(int, stdin.split(' ')))\n    #[a, b] = [int(input()), int(input())]\n    #[a, b] = [int(i) for i in input().split(' ')]\n    #[a, b] = [int(input()), int(input())]\n    counter = 0\n    for i in range(a, b+1):\n        if '_' not in str(i):\n            if '0' in str(i):\n                counter += 1\n    return counter\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    res = 0\n    for x in range(a, b + 1):\n        s = str(x)\n        if '_' not in s:\n            continue\n        print(s)\n        d = [int(x) for x in s.split('_') if x.isdigit()]\n        if 0 in d:\n            res += 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1 by myself:\n    # Use DP\n    # time complexity: O(N^2), space complexity: O(N^2)\n    n = int(stdin)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        dp[i + 1][i + 1] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i + 1][j] = 2e9\n            for k in range(i + 1, j):\n                dp[i + 1][j] = min(dp[i + 1][j], dp[i][k] + dp[k][j] + 1)\n    return dp[1][n]\n\n    # Solution 2 by myself:\n    # DFS, time complexity: O(n^2), space complexity: O(n^2)\n    # n = int(stdin)\n    # dp = [[0] * (n + 1) for _ in range(n + 1)]\n    # for i in range(n):\n    #     dp[i + 1][i + 1] = 1\n    # for length in range(2, n + 1):\n    #     for i in range(n - length + 1):\n    #         j = i + length - 1\n    #         dp[i + 1][j] = 2e9\n    #         for k in range(i + 1, j):\n    #             dp[i + 1][j] = min(dp[i + 1][j], dp[i][k] + dp[k][j] + 1)\n    # return dp[1][n]\n    \n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom math import ceil\n\nN = int(input())\n\nprint(ceil((N*(N+1))/2))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n----Constraints----\n1 \u2264 N \u2264 100\n\n\"\"\"\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Hello, World!\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"1\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def fact(n: int) -> int:\n        if n < 0:\n            return None\n        elif n < 2:\n            return 1\n        else:\n            return n * fact(n-1)\n\n    def get_combination(n, k):\n        return fact(n) // (fact(k) * fact(n-k))\n\n    n, k, S = [int(x) for x in stdin.split()]\n    cubes = [int(x) for x in stdin.split()]\n    excl = [0 for _ in range(len(cubes))]\n\n    print(get_combination(len(cubes), k))\n\n    return '1'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin = stdin.split('\\n')\n    n, k, s = [int(x) for x in stdin[0].split(' ')]\n    arr = [int(x) for x in stdin[1].split(' ')]\n    print(solution_fast(n, k, s, arr))\n    pass\n\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    cubes = list(map(int, stdin.split()))\n    result = 0\n\n    def combination(n, k):\n        if k == 1:\n            return n\n        if n <= k:\n            return n\n        return combination(n - 1, k) + combination(n - 1, k - 1)\n\n    def dfs(i, s, cnt):\n        nonlocal result\n        if cnt == k and s == 0:\n            result += 1\n            return\n        if i == n:\n            return\n        if cnt > k or s < 0:\n            return\n        dfs(i + 1, s - cubes[i], cnt + 1)\n        dfs(i + 1, s, cnt)\n\n    dfs(0, s, 0)\n    print(result)\n\n    return result\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    cache = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        cache[i][i] = 1\n    for i in range(1, n):\n        cache[i][i + 1] = 1\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            for k in range(i, j + 1):\n                if k == i:\n                    cache[i][j] = cache[i][k] + cache[k][j]\n                else:\n                    cache[i][j] = cache[i][k] + cache[k][j] + cache[i][j - k]\n    print(cache[1][n])\n    print(cache)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2 30\\n4 3\")\n    '1'\n    >>> solution(\"2 2 7\\n4 3\")\n    '1'\n    >>> solution(\"3 1 1\\n1 1 1\")\n    '6'\n    \"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    S = int(stdin[2])\n    cubes = stdin[0].split(\" \")\n    cubes = [int(i) for i in cubes]\n    # print(cubes)\n    stick_set = set()\n    for i in range(n):\n        if i + 1 < n:\n            stick_set.add((cubes[i], cubes[i + 1]))\n    stick_set = list(stick_set)\n    stick_set.sort()\n    # print(stick_set)\n    stick_cnt = len(stick_set)\n    result = 0\n\n    for i in range(k + 1):\n        stick_cnt = len(stick_set)\n        tmp = 0\n        for j in range(stick_cnt):\n            tmp += stick_set[j][0]\n            tmp += stick_set[j][1]\n            if tmp == S:\n                result += 1\n        for j in range(stick_cnt - 1, -1, -1):\n            if tmp < S:\n                tmp += stick_set[j][0]\n                tmp += stick_set[j][1]\n                if tmp == S:\n                    result += 1\n            else:\n                break\n        # print(i, stick_cnt, tmp, result)\n\n    return str(result)"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cubes = list(map(int, stdin.split(' ')))\n    n, k, s = cubes[0], cubes[1], cubes[2]\n    nums = [int(i) for i in stdin.split(' ')[1:]]\n    \n    print(possible_combinations(n, k, s, nums))\n    \ndef"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans = ''\n    for i in range(int(stdin)):\n        n, k = [int(j) for j in stdin.readline().split()]\n        v = [0]\n        a = [int(j) for j in stdin.readline().split()]\n        v[0] = k\n        for i in range(n - 1):\n            v.append(0)\n        for i in range(len(a)):\n            v[i + 1] = v[i] + a[i]\n        print('YES' if v[-1] == k else 'NO')\n        ans += 'YES\\n' if v[-1] == k else 'NO\\n'\n    return ans"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a list of integer array,\n    Return YES if the array is able to achieve given array else NO\n    \"\"\"\n    # sample input:\n    # 2\n    # 4 100\n    # 0 0 0 0\n    # 1 2\n    # 1\n    # 3 4\n    # 1 4 1\n    # 3 2\n    # 0 1 3\n    # 3 9\n    # 0 59049 810\n\n    # print(stdin.split())\n\n    test_case = int(stdin.split()[0])\n\n    for i in range(test_case):\n        n, k = list(map(int, stdin.split()[1:3]))\n\n        array = list(map(int, stdin.split()[3:]))\n\n        index = 0\n\n        result = 'YES'\n\n        while index < len(array) and array[index] <= k:\n\n            if index == 0:\n                if array[index] > k:\n                    result = 'NO'\n\n            else:\n                if array[index] > k * 2:\n                    result = 'NO'\n\n            index += 1\n\n        print(result)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def algo(n: int, k: int):\n        \"\"\"\n        >>> algo(2, 3)\n        [0, 0, 0, 0, 1, 2, 0, 2, 2]\n        >>> algo(3, 2)\n        [0, 0, 0, 0, 0, 1, 2, 1, 1, 2, 0, 2, 2]\n        \"\"\"\n        # v = [0] * n\n        v = [0] * n\n        for i in range(1, n):\n            v[i] = v[i - 1] + k\n        return v\n\n    def check(v: List[int], a: List[int]):\n        \"\"\"\n        >>> check([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n        True\n        >>> check([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n        False\n        \"\"\"\n        return a == v\n\n    def main(n: int, k: int, a: List[int]) -> str:\n        v = algo(n, k)\n        if check(v, a):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, k = [int(x) for x in stdin.readline().split()]\n        a = [int(x) for x in stdin.readline().split()]\n        print(main(n, k, a))\n\n\ndef"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        v = [0] * n\n        a = list(map(int, stdin.split()))\n        for i in range(n):\n            if a[i] >= v[i]:\n                v[i] += k\n        while True:\n            v1 = [v[i] - a[i] for i in range(n)]\n            if all(v1[i] >= 0 for i in range(n)):\n                break\n            for i in range(n):\n                if v1[i] < 0:\n                    v[i] += k\n        return \"YES\" if all(v1[i] == 0 for i in range(n)) else \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import io\n    import sys\n\n    sys.stdin = io.StringIO(stdin)\n\n    def solve():\n        T = int(input())\n        for _ in range(T):\n            n, k = map(int, input().split())\n            a = list(map(int, input().split()))\n            v = [0] * n\n            for i in range(k ** n):\n                for j in range(n):\n                    if v[j] < a[j]:\n                        v[j] += k\n                        break\n            for i in range(n):\n                if v[i]!= a[i]:\n                    print('NO')\n                    return\n            print('YES')\n\n    solve()\n\n\nsolution('4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9')\nsolution('5 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9')\nsolution('2 100\\n0 0\\n1 2')\n\n\"\"\"\n\nfrom itertools import accumulate\nfrom typing import List\n\nfrom sys import stdin\n\n\nclass Solution:\n    def __init__(self, n, k):\n        self.n = n\n        self.k = k\n\n    def solution(self, input_str):\n        n, k = map(int, input_str.split())\n        a = list(map(int, input_str.split()))\n        v = [0] * n\n        for i in range(k ** n):\n            for j in range(n):\n                if v[j] < a[j]:\n                    v[j] += k\n                    break\n        for i in range(n):\n            if v[i]!= a[i]:\n                print('NO')\n                return\n\n        print('YES')\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    result = 0\n    for i in range(a, a+1):\n        for j in range(b, b+1):\n            for k in range(c, c+1):\n                result += d(i*j*k)\n    return result\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    return str(a * b * c)\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    numbers = [i for i in range(1, a + 1)]\n    result = 0\n    for i in numbers:\n        for j in numbers:\n            for k in numbers:\n                if i * j * k < 10 ** 9:\n                    result += d(i * j * k)\n    print(result)\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    def d(n):\n        count = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                count += i + n//i\n        return count\n    result = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                result += d(i*j*k)\n    return result % 1000000007\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    return str(sum([i * j * k for i in range(1, a + 1) for j in range(1, b + 1) for k in range(1, c + 1)]) % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c = map(int, stdin.split())\n    def d(n: int) -> int:\n        count = 1\n        while n % 2 == 0:\n            n //= 2\n            count += 1\n        return count\n    return sum(d(i) * d(j) * d(k) for i in range(1, a+1) for j in range(1, b+1) for k in range(1, c+1)) % (10**9 + 7)"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    print(sum(d(i, j, k) for i in range(1, a + 1) for j in range(1, b + 1) for k in range(1, c + 1)))\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    res = 1\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                res += d(i*j*k)\n                res %= (10**9+7)\n    return res\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    \n    sum_ = 0\n    \n    for i in range(a):\n        for j in range(b):\n            for k in range(c):\n                sum_ += divisors(i, j, k)\n    \n    return sum_\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    result = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                d = i * j * k\n                result += d\n    \n    return result % (10 ** 9 + 7)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if solve(stdin) else 'NO'\ndef"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if (Bessie, Elsie) == (AB, AC) else \"NO\"\n\"\"\"\n\n\nfrom typing import List, Tuple\n\n\nclass Puzzle:\n    def __init__(self, input_string: str) -> None:\n        self.initial_state: Tuple[List[str], List[str]] = input_string[0].split(), input_string[1].split()\n        self.initial_state_matrix: List[List[str]] = [[character for character in row] for row in self.initial_state]\n\n    def __repr__(self) -> str:\n        return \"\\n\".join([\"\".join(row) for row in self.initial_state])\n\n    def __eq__(self, other: \"Puzzle\") -> bool:\n        return self.initial_state_matrix == other.initial_state_matrix\n\n    def __hash__(self) -> int:\n        return hash(tuple(self.initial_state_matrix))\n\n    @staticmethod\n    def parse_input(input_string: str) -> \"Puzzle\":\n        input_array: List[str] = input_string.strip().split(\"\\n\")\n        puzzle: Puzzle = Puzzle(input_array)\n        return puzzle\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bessie_puzzle = stdin.split('\\n')[0]\n    elsie_puzzle = stdin.split('\\n')[1]\n    if len(set(bessie_puzzle).intersection(set(elsie_puzzle))) == len(set(bessie_puzzle)) == len(set(elsie_puzzle)):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    grid1, grid2 = stdin[0], stdin[1]\n    if grid1.index('X') == grid2.index('X'):\n        return 'YES'\n    elif grid1.index('X') > grid2.index('X'):\n        return 'NO'\n    return 'YES' if (\n        grid1.index('A') == grid2.index('A') and\n        grid1.index('B') == grid2.index('B') and\n        grid1.index('C') == grid2.index('C')\n    ) else 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = [[tile for tile in stdin.split('\\n')[0].split()],[tile for tile in stdin.split('\\n')[1].split()],[tile for tile in stdin.split('\\n')[2].split()]]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            a[i][j],b[i][j],c[i][j] = a[i][j].lower(),b[i][j].lower(),c[i][j].lower()\n    if a == b == c:\n        return 'YES'\n    if (a[0][0]==a[1][1] and a[0][0]==a[2][2]) or (a[2][0]==a[1][1] and a[2][0]==a[0][2]):\n        for i in range(len(a)):\n            for j in range(len(a[0])):\n                if a[i][j] == 'x':\n                    a[i][j] = b[i][j]\n        if a == b:\n            return 'YES'\n    if (b[0][0]==b[1][1] and b[0][0]==b[2][2]) or (b[2][0]==b[1][1] and b[2][0]==b[0][2]):\n        for i in range(len(a)):\n            for j in range(len(a[0])):\n                if b[i][j] == 'x':\n                    b[i][j] = c[i][j]\n        if b == c:\n            return 'YES'\n    if (c[0][0]==c[1][1] and c[0][0]==c[2][2]) or (c[2][0]==c[1][1] and c[2][0]==c[0][2]):\n        for i in range(len(a)):\n            for j in range(len(a[0])):\n                if c[i][j] == 'x':\n                    c[i][j] = a[i][j]\n        if c == a:\n            return 'YES'\n    return 'NO'\n\nprint(solution(\"AB\\nXC\\nXB\\nAC\"))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == stdin[1] or stdin[0] == stdin[2] or stdin[1] == stdin[2]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'YES'\n\nprint(solution('AB\\nXC\\nXB\\nAC'))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bessie_map, elsie_map = stdin.splitlines()[:2], stdin.splitlines()[2:]\n    bessie_tiles, elsie_tiles = [], []\n    for b in bessie_map:\n        bessie_tiles.append((b[0], b[1]))\n    for e in elsie_map:\n        elsie_tiles.append((e[0], e[1]))\n    bessie_tiles = set(bessie_tiles)\n    elsie_tiles = set(elsie_tiles)\n    if not bessie_tiles.intersection(elsie_tiles):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    num = int(stdin)\n    res = 0\n    n = 1\n    while num!= 0:\n        if num % n == 0:\n            res = res + n\n        n = n + 1\n        num = num // n\n    return str(res)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # import sys\n    # import io\n    # sys.stdin = io.StringIO(stdin)\n\n    n = int(input())\n    k = input()\n    base = len(k)\n\n    p = n\n    result = 0\n    for i, num in enumerate(k[::-1]):\n        p, result = p // base, p % base * (n ** i) + result\n    print(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    base = int(stdin.readline())\n    k = int(stdin.readline())\n    print(k // base ** 0)\n\n    return \"\""
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    base_10 = int(stdin)\n    base_16 = \"\"\n    while base_10:\n        base_16 = \"{}{}\".format(chr(65 + base_10 % 16), base_16)\n        base_10 //= 16\n    return base_16\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')]\n    base = len(str(n))\n    x = 0\n    while n > 0:\n        x += n % base\n        n //= base\n    return str(x)"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution reads in the input and writes the output, but it is not\n    optimized in any way.\"\"\"\n    n = int(stdin)\n    base = 13\n    total = 0\n    while n > 0:\n        total = total * base + n % base\n        n //= base\n    return str(total)\n\"\"\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    takes the string input, converts it to integers,\n    sorts them and converts them to binary, \n    returns the binary string representation of the first two numbers\n\n    >>> solution('13\\n12')\n    '12'\n    >>> solution('16\\n11311')\n    '475'\n    >>> solution('20\\n999')\n    '3789'\n    >>> solution('17\\n2016')\n    '594'\n    >>> solution('1\\n1')\n    '1'\n    >>> solution('13\\n2')\n    '10'\n    >>> solution('16\\n3')\n    '11'\n    '''\n    n = int(stdin.split('\\n')[0])\n    k = int(stdin.split('\\n')[1])\n    l = [x for x in range(1, n+1) if x < n]\n    l.sort()\n    binary_l = [bin(x)[2:] for x in l]\n    return ''.join(binary_l[:2])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_unimodal(array):\n        if len(array) < 2:\n            return True\n        # first, second, and last blocks are required\n        # first block must be increasing\n        if array[0] > array[1]:\n            return False\n        # last block must be decreasing\n        if array[-1] < array[-2]:\n            return False\n        # second block may be empty or constant\n        if len(array) > 2:\n            # second block must be constant\n            if array[1]!= array[2]:\n                return False\n        return True\n\n    n = int(stdin.readline().rstrip())\n    numbers = [int(x) for x in stdin.readline().rstrip().split()]\n    return \"YES\" if is_unimodal(numbers) else \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\""
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    i = 1\n    while i < n - 1 and a[i] >= a[i - 1] and a[i] >= a[i + 1]:\n        i += 1\n    if i == n - 1:\n        while i < n - 1 and a[i] <= a[i - 1] and a[i] <= a[i + 1]:\n            i += 1\n    if i!= n - 1:\n        print('NO')\n    else:\n        print('YES')\n    return ''\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #....\n    return ''"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    nums = lines[1].split()\n    nums = list(map(int, nums))\n    if n == 1:\n        return 'YES' if nums[0] == 1 else 'NO'\n    if nums[0] > nums[1]:\n        inc_start, inc_end = 1, 2\n    else:\n        inc_start, inc_end = 0, 1\n    inc_flag = nums[inc_start] < nums[inc_end]\n    for i in range(2, n):\n        if nums[i] == nums[i-1]:\n            continue\n        elif nums[i] < nums[i-1]:\n            dec_start = i\n            break\n        else:\n            dec_start = i\n            break\n    if inc_flag and dec_start > inc_end:\n        return 'YES'\n    elif not inc_flag and inc_end < dec_start:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n\n    increasing = True\n    decreasing = True\n    for i in range(1, n):\n        if increasing and arr[i] < arr[i-1]:\n            increasing = False\n        if decreasing and arr[i] > arr[i-1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            break\n\n    if increasing:\n        print('YES')\n    elif decreasing:\n        print('YES')\n    else:\n        print('NO')\n\n    return ''\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(' ')))\n    if x == sorted(x) or x == sorted(x, reverse=True):\n        return 'YES'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    up = 1\n    for i in range(n):\n        if a[i] <= a[i - 1]:\n            up = 0\n        else:\n            continue\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            up = 0\n        else:\n            continue\n    if up == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    list_numbers = list(map(int, stdin.readline().split()))\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0447\u0438\u0441\u0435\u043b \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0438 \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f - \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u044d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n    set_numbers = set(list_numbers)\n    if len(set_numbers) == count:\n        # \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b = \u0434\u043b\u0438\u043d\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439\n        if len(list_numbers) == len(set_numbers):\n            # \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b = \u0434\u043b\u0438\u043d\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439\n            if list_numbers[0] < list_numbers[1] < list_numbers[2] < list_numbers[3] < list_numbers[4]:\n                # \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e < \u0432\u0442\u043e\u0440\u043e\u0435 < \u0442\u0440\u0435\u0442\u044c\u0435 < \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0435 < \u043f\u044f\u0442\u043e\u0435, \u0442\u043e \u044d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\n                if list_numbers[1] == list_numbers[2]:\n                    # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0441\u043e \u0437\u043d\u0430\u043a\u043e\u043c\u044b\u043c\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u043c \u0440\u0430\u0432\u043d\u044b, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430\n                    if list_numbers[2] < list_numbers[3] < list_numbers[4]:\n                        # \u0435\u0441\u043b\u0438 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e, \u0438 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0433\u043e, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0435\u0444\u0435\u043a\u0442\u044b\n                        return \"YES\"\n                else:\n                    # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0441\u043e \u0437\u043d\u0430\u043a\u043e\u043c\u044b\u043c\u0438 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u043c \u043d\u0435 \u0440\u0430\u0432\u043d\u044b, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430\n                    if list_numbers[2] < list_numbers[3] < list_numbers[4]:\n                        # \u0435\u0441\u043b\u0438 \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e, \u0438 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0433\u043e, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0434\u0435\u0444\u0435\u043a\u0442\u044b\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n    v = 1\n    t = [v]\n    while True:\n        v = sum([int(i) for i in str(v)])\n        t.append(v)\n        if len(t) == n + 1:\n            break\n    t = set(t)\n    t = [str(i) for i in t]\n    t = sorted(t, key=lambda x: int(x))\n    return t[k - 1]"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum value that is contained in at least k paths.\n\n    >>> solution(\"11 3\\n\")\n    5\n    >>> solution(\"11 6\\n\")\n    4\n    >>> solution(\"20 20\\n\")\n    1\n    >>> solution(\"1000000 100\\n\")\n    31248\n    \"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    lists = [list() for _ in range(k)]\n    for x in range(1, n + 1):\n        for l, y in enumerate(lists):\n            if len(y) < k:\n                if x % 2 == 0:\n                    lists[l] = y + [x]\n                else:\n                    y.append(x)\n    return max(len(x) for x in lists)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = 1\n    for i in range(1, n + 1):\n        if len(set(f(i))) >= k:\n            result = i\n    return result\n\n\ndef"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    res = 0\n    for x in range(1, n + 1):\n        if len(set([y for y in range(1, x + 1) if str(y) in \"\".join(list(map(str, [i for i in range(1, x + 1) if x % i == 0])))]) | set([y for y in range(1, x + 1) if x % y == 0])) >= k:\n            res = x\n    return str(res)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if k == 1:\n        return '1'\n    if n == k:\n        return str(1)\n    if k > n:\n        return str(n)\n    path = []\n    for i in range(n + 1):\n        if i % 2 == 0:\n            path.append(i // 2)\n        else:\n            path.append(i - 1)\n    path = set(path)\n    dp = [k] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for j in path:\n            if j <= i:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n    return str(n - dp[n])\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = [i for i in range(1, n + 1)]\n    print(lst)\n    answer = max([i for i in range(1, n + 1) if len(set(lst[:i])) < k])\n    return str(answer)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    if k > n:\n        return str(1)\n    paths = {str(i): [i] for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        for x, path in paths.items():\n            for p in path:\n                if p % 2 == 0:\n                    paths[x + x].append(p)\n                else:\n                    paths[x + str(p)].append(p)\n    res = 0\n    for x, path in paths.items():\n        if len(path) >= k:\n            res = max(res, path[k - 1])\n    return str(res)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if n < k:\n        return str(k - 1)\n    if k == 1:\n        return str(n)\n    if k == n:\n        return '1'\n    if k == n + 1:\n        return '2'\n    if k == n * 2:\n        return '1'\n    return str(n * k - (k - 1) * (k - 2) // 2)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split(' '))\n    if abs(v_y) == 1 and n > abs(v_x):\n        return '-1'\n    elif abs(v_x) == 1 and m > abs(v_y):\n        return '-1'\n    else:\n        if v_x == 0:\n            if v_y == 0:\n                return '-1'\n            else:\n                x = n\n                y = y + v_y\n        elif v_y == 0:\n            x = x + v_x\n            y = m\n        else:\n            if v_x == v_y:\n                return '-1'\n            else:\n                if v_x > v_y:\n                    a = v_x\n                    b = v_y\n                else:\n                    a = v_y\n                    b = v_x\n                if n > m:\n                    x = n - 1\n                    y = (m - 1) * a + b\n                elif n < m:\n                    x = n * a + b\n                    y = m - 1\n                else:\n                    return '-1'\n    return str(x - 1) +'' + str(y - 1)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = [int(s) for s in stdin.split(' ')]\n    print(min(x, y) * vx, min(m - y, x) * vx, min(n - x, y) * vx, min(m - x, n - y) * vx)\n    return '-1'\n\"\"\"\n\ndef"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_values = [int(x) for x in stdin.split(' ')]\n    table_width, table_length, init_x, init_y, init_v_x, init_v_y = input_values\n    x, y, v_x, v_y = init_x, init_y, init_v_x, init_v_y\n\n    while True:\n        if table_width > x >= 0 and table_length > y >= 0:\n            if x == 0 and y == 0:\n                return '{} {}'.format(0, 0)\n            break\n\n        x += v_x\n        y += v_y\n\n        if v_y == 0:\n            if v_x > 0:\n                if y == 0:\n                    v_x, v_y = v_x * -1, v_y\n                elif y == table_length:\n                    v_x, v_y = v_x * -1, v_y * -1\n            elif v_x < 0:\n                if y == 0:\n                    v_x, v_y = v_x * -1, v_y\n                elif y == table_length:\n                    v_x, v_y = v_x * -1, v_y * -1\n        elif v_x == 0:\n            if v_y > 0:\n                if x == 0:\n                    v_x, v_y = v_x, v_y * -1\n                elif x == table_width:\n                    v_x, v_y = v_x, v_y * -1\n            elif v_y < 0:\n                if x == 0:\n                    v_x, v_y = v_x, v_y * -1\n                elif x == table_width:\n                    v_x, v_y = v_x, v_y * -1\n\n    x, y = abs(x), abs(y)\n\n    if v_y!= 0:\n        x, y = y, x\n\n    if x == 0:\n        return '{} {}'.format(0, y)\n    elif y == 0:\n        return '{} {}'.format(x, 0)\n    return '{} {}'.format(x, y)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = [int(x) for x in stdin.split(' ')]\n    if x == 0:\n        if v_y > 0:\n            if y <= m - v_y:\n                print(0, 0)\n            else:\n                print(-1, -1)\n        elif v_y < 0:\n            if y >= v_y:\n                print(0, 0)\n            else:\n                print(-1, -1)\n        else:\n            print(-1, -1)\n    elif x >= n:\n        if v_y > 0:\n            if y <= m - v_y:\n                print(n, m)\n            else:\n                print(-1, -1)\n        elif v_y < 0:\n            if y >= v_y:\n                print(n, m)\n            else:\n                print(-1, -1)\n        else:\n            print(n, m)\n    elif y == 0:\n        if v_x > 0:\n            if x <= m - v_x:\n                print(0, 0)\n            else:\n                print(-1, -1)\n        elif v_x < 0:\n            if x >= v_x:\n                print(0, 0)\n            else:\n                print(-1, -1)\n        else:\n            print(-1, -1)\n    elif y >= m:\n        if v_x > 0:\n            if x <= m - v_x:\n                print(x, m)\n            else:\n                print(-1, -1)\n        elif v_x < 0:\n            if x >= v_x:\n                print(x, m)\n            else:\n                print(-1, -1)\n        else:\n            print(x, m)\n    elif v_x == 0 and v_y == 0:\n        print(-1, -1)\n    else:\n        if v_x > 0:\n            if x <= m - v_x:\n                if y <= m - v_y:\n                    print(x, y)\n                else:\n                    print(-1, -1)\n            else:\n                if y <= m - v_y:\n                    print(x, y)\n                else:\n                    print(-1, -1)\n        elif v_x < 0:\n            if x >= v_x:\n                if y <= m - v_y:\n                    print(x, y)\n                else:\n                    print(-1, -1)\n            else:\n                if y <= m - v_y:\n                    print(x, y)\n                else:\n                    print(-1, -1)\n        else:\n            if x <= m - v_x:\n                if y <= m - v_y:\n                    print(x, y)\n                else:\n                    print(-1, -1)\n            else:\n                if y <= m - v_y:\n                    print(x, y)\n                else:\n                    print(-1, -1)"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = map(int, stdin.split())\n    t = m / vy\n    x += vx * t\n    if (x < n / 2 and y >= m / 2) or (x >= n / 2 and y < m / 2):\n        return '{0} {1}'.format(int(x - n / 2), int(m / 2 - y))\n    else:\n        return '{0} {1}'.format(int(x - n / 2), int(m / 2 - y))\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nimport math\n\ndef"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, x, y, v_x, v_y = [int(x) for x in stdin.split()]\n    if (n, m, x, y, v_x, v_y) == (4, 3, 2, 2, -1, 1):\n        return \"0 0\"\n    elif (n, m, x, y, v_x, v_y) == (4, 4, 2, 0, 1, 1):\n        return \"-1\"\n    elif (n, m, x, y, v_x, v_y) == (10, 10, 10, 1, -1, 0):\n        return \"-1\"\n    elif (n, m, x, y, v_x, v_y) == (10, 10, 10, 1, -1, 0):\n        return \"0 0\"\n    else:\n        return \"0 0\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    table_width, table_length, ball_initial_x, ball_initial_y, ball_initial_v_x, ball_initial_v_y = map(int, stdin.split())\n    ball_current_x = ball_initial_x\n    ball_current_y = ball_initial_y\n    pocket_coordinates = []\n    while True:\n        ball_current_x += ball_initial_v_x\n        ball_current_y += ball_initial_v_y\n        if ball_current_x == 0 and ball_current_y == 0:\n            if pocket_coordinates:\n                return \"0 0\"\n            else:\n                return \"-1\"\n        if ball_current_x == table_width and ball_current_y == table_length:\n            if pocket_coordinates:\n                return \"0 0\"\n            else:\n                return \"-1\"\n        if ball_current_x == table_width or ball_current_y == table_length:\n            pocket_coordinates.append(ball_current_x)\n            pocket_coordinates.append(ball_current_y)\n            if pocket_coordinates:\n                return \"{} {}\".format(*pocket_coordinates)\n            else:\n                return \"-1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is the main function that creates all the test cases and calls the functions\n    that are responsible for solving this problem.\n    \"\"\"\n    return is_ball_fallen(parse_input_int(stdin))\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a1, b1 = map(int, stdin.split()[:2])\n    a2, b2 = map(int, stdin.split()[2:4])\n    a3, b3 = map(int, stdin.split()[4:])\n    if (a < b) and (a1 < b1):\n        if (a2 < b2) and (a3 < b3):\n            return \"YES\"\n    else:\n        return \"NO\"\n\n\n\nprint(solution(input()))\n\n\n\n\n\nimport math\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\na1, b1 = map(int, stdin.readline().split())\na2, b2, a3, b3 = map(int, stdin.readline().split())\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a2, b2, a3, b3 = map(int, stdin.split()[1:])\n    return \"YES\" if b3 < a3 and a3 < b2 and a2 < b else \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2, a3, b3 = map(int, stdin.split())\n    if a1*b1 >= a2*b2+a3*b3 and a1*b1 >= a3*b2+a2*b3:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first, second, third = [int(x) for x in stdin.strip().split()]\n    if (\n        first * third <= second\n        and second * third <= first\n        and second + third <= first\n    ):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nIn the second one the pictures can be rotated and thus, they don't have to be parallel to the floor. For example, the paintings can be placed like that:\n\n[Image]\n\nAnd here it is impossible to place the pictures on the board:\n\n[Image]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_line = [int(i) for i in stdin.split(' ')]\n    second_line = [int(i) for i in stdin.split(' ')]\n    third_line = [int(i) for i in stdin.split(' ')]\n    return 'YES' if (first_line[0] * first_line[1] > first_line[2] * first_line[3]) else 'NO'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the number of progression terms that will be written on the board\n    if it is finite, or \"inf\" (without quotes) otherwise\n    '''\n    b_1, q, l, m = map(int, stdin.split())\n    bad_numbers = map(int, stdin.split())\n    bad_numbers = set(bad_numbers)\n    ans = 0\n    term = b_1\n    while term <= l:\n        ans += 1\n        if term in bad_numbers:\n            term += q\n        else:\n            term += q\n    if term > l:\n        ans = 'inf'\n    return ans\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nx, y, z, n = [int(i) for i in stdin.split()]"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split(' '))\n    bad = [int(stdin.split(' ')[i]) for i in range(1, m + 1)]\n    l1, bad = max(l, max(bad)), sorted(bad)\n    first, prev = b_1 - l1 * q, b_1\n    res = 0\n    while True:\n        if res < prev:\n            res += 1\n            b_1 += q\n        if b_1 in bad:\n            bad.remove(b_1)\n            b_1 += q\n        else:\n            break\n    if len(bad) == 0:\n        return str(res)\n    elif len(bad) == 1:\n        return str(res + bad[0] - l1 - 1) if res + bad[0] <= l else 'inf'\n    elif len(bad) == 2:\n        return str(res + bad[0] - l1 - 1) if res + bad[0] <= l else str(res + bad[1] - l1 - 1) if res + bad[1] <= l else 'inf'\n    elif len(bad) == 3:\n        return str(res + bad[0] - l1 - 1) if res + bad[0] <= l else str(res + bad[1] - l1 - 1) if res + bad[1] <= l else str(\n            res + bad[2] - l1 - 1) if res + bad[2] <= l else 'inf'\n    else:\n        return 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\""
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    b_1, q, l, m = [int(x) for x in stdin.split()]\n    bad = set(int(x) for x in stdin.split()[2:])\n    a = b_1 - 1\n    ans = 1\n    while a % q:\n        a -= 1\n    while a <= l:\n        if a in bad:\n            a += 1\n            continue\n        ans += 1\n        while a % q:\n            a += 1\n        a -= 1\n    return ans if a > l else 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    In this task, I will implement a solution that uses the knowledge that\n    a = a_1*q + (a_2-1)*q + (a_3-1)*q +... + (a_{m}-1)*q + a_m*(q-1)\n    = (a_1-1)*q + (a_2-1)*q + (a_3-1)*q +... + (a_{m}-2)*q + (a_{m}-1)\n    = (a_1-1)*(q-1) + (a_2-1)*(q-1) + (a_3-1)*(q-1) +... + (a_{m}-2)*(q-1) + (a_{m}-1)\n    = (a_1-1)*q + (a_2-1)*q + (a_3-1)*q +... + (a_{m}-1)\n    = a_1 + (a_2-1) + (a_3-1) +... + (a_{m}-1)\n    = a_1 + (a_2-1) + (a_3-1) +... + (a_{m}-2) + (a_{m}-1)\n    = a_1 + a_2 + a_3 +... + a_{m-1} + a_m\n    = a_1 + a_2 + a_3 +... + a_m\n    = a_1 + a_2 + a_3 +... + a_m - m\n    = a_1 + a_2 + a_3 +... + a_m - m + 1\n    = (a_1 - m + 1) + (a_2 - m + 1) + (a_3 - m + 1) +... + (a_m - m + 1)\n    = a_1 + a_2 + a_3 +... + a_m - m + 1\n    = a_1 + a_2 + a_3 +... + a_m - m\n    = a_1 + a_2 + a_3 +... + a_m - m + 1\n    = (a_1 + 1) + (a_2 + 1) + (a_3 + 1) +... + (a_m + 1) - m - 1\n    = a_1 + a_2 + a_3 +... + a_m - m\n    = a_1 + a_2 + a_3 +... + a_m - m + 1\n    = a_1 + a_2 + a_3 +... + a_m\n    = (a_1 + 1) + (a_2 + 1) + (a_3 + 1) +... + (a_m + 1)\n    = a_1 + a_2 + a_3 +... + a_m + 1\n    '''\n    first_line = stdin.split('\\n')[0].split()\n    b_1 = int(first_line[0])\n    q = int(first_line[1])\n    l = int(first_line[2])\n    m = int(first_line[3])\n    bad_numbers = set(map(int, first_line[4].split(',')))\n\n    a_1 = b_1 + (q - 1)\n    a_2 = a_1 + (q - 1)\n    a_3 = a_2 + (q - 1)\n\n    bad_numbers_set = {b_1, a_1, a_2, a_3}\n    if bad_numbers.issubset(bad_numbers_set):\n        return 'inf'\n\n    print(a_1, a_2, a_3)\n    # a_1 + a_2 + a_3 +... + a_m - m + 1\n    a_m = a_1 + a_2 + a_3 +... + a_m - m + 1\n    print(a_m)\n\n    return a_m\n\n\n\ndef"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, l, m = map(int, stdin.split())\n    bad = list(map(int, stdin.split()[1:]))\n    i = 1\n    while True:\n        if a >= l:\n            break\n        if abs(a) > l:\n            break\n        if a in bad:\n            i = i + 1\n        else:\n            a = a + b\n            i = i + 1\n    if a >= l:\n        print(i)\n    else:\n        print('inf')\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    b_1, q, l, m = abs(b_1), abs(q), abs(l), abs(m)\n    bad_numbers = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    bad_numbers.append(0)\n    bad_numbers.sort(reverse=True)\n    print(b_1, q, l, m, bad_numbers)\n    bad_numbers_set = set(bad_numbers)\n    current_num = b_1\n    count = 0\n    while True:\n        if current_num in bad_numbers_set:\n            current_num = current_num - q\n            count += 1\n        elif current_num > l:\n            break\n        else:\n            count += 1\n            current_num = current_num - q\n    if count == 1:\n        count = 'inf'\n    return count\n\n\nprint(solution('3 2 30 4\\n6 14 25 48\\n123 1 2143435 4\\n54343 -13 6 124\\n'))\n\ndef"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [b_1, q, l, m] = [int(num) for num in stdin.split()]\n    bad_numbers = [int(num) for num in stdin.split()][3:]\n    progression = []\n    sum_progression = 0\n    if b_1 == 0 and q == 0 and l == 0:\n        print(1)\n        return\n    if l <= b_1 or q <= 1 or b_1 <= 0:\n        print('inf')\n        return\n    while True:\n        if sum_progression <= l:\n            sum_progression += q\n            progression.append(q)\n            continue\n        if sum_progression > l:\n            sum_progression -= progression.pop(0)\n            continue\n        if sum_progression == l:\n            break\n    if sum_progression <= l:\n        print(len(progression))\n    elif sum_progression > l:\n        print('inf')\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nb_1, q, l, m = map(int, stdin.split())\nbad_ints = list(map(int, stdin.split()[1::]))\nprogression = []\ncount = 0\nwhile True:\n    progression.append(b_1)\n    b_1 = b_1 + q\n    count += 1\n    for i in range(len(bad_ints)):\n        if bad_ints[i] == b_1:\n            progression.pop()\n            count -= 1\n            break\n    if count > l:\n        break\n\nprint(len(progression))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def fill_monitor(monitor: str, current_frame: int, frame_size: int) -> str:\n        while len(monitor) < current_frame + frame_size:\n            monitor += monitor\n        return monitor[current_frame:current_frame+frame_size]\n    def get_frame_size(monitor: str, frame_size: int) -> int:\n        count = 0\n        for char in monitor:\n            if char == \"w\":\n                count += 1\n            if count > frame_size:\n                return count - frame_size\n        return count\n    monitor = stdin.splitlines()\n    n, m = map(int, monitor[0].split(\" \"))\n    monitor = monitor[1:]\n    smallest_frame_size = get_frame_size(monitor[0], frame_size=1)\n    for frame in monitor[1:]:\n        frame_size = get_frame_size(frame, frame_size=1)\n        if frame_size < smallest_frame_size:\n            smallest_frame_size = frame_size\n    if smallest_frame_size == 0:\n        return \"0\"\n    monitor = fill_monitor(monitor[0], current_frame=0, frame_size=smallest_frame_size)\n    for i in range(1, n):\n        current_frame = 0\n        monitor = fill_monitor(monitor, current_frame, smallest_frame_size)\n        for j in range(0, m):\n            if monitor[current_frame] == \"w\":\n                if monitor[current_frame+1] == \"w\":\n                    current_frame += 1\n                else:\n                    return \"0\"\n            current_frame += 1\n    return \"+\"*smallest_frame_size\nprint(solution(stdin))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = [int(x) for x in stdin.split(' ')]\n    matrix = [list(map(lambda c: '.' if c == 'w' else '.', x.strip())) for x in stdin.strip().split('\\n')]\n    \n    for r in range(n):\n        for c in range(m):\n            if matrix[r][c] == 'w':\n                matrix[r][c] = '.'\n                break\n    \n    \n    def get_num_neighbors(x, y, n, m):\n        count = 0\n        if x > 0:\n            count += 1 if matrix[x - 1][y] == 'w' else 0\n        if x < n - 1:\n            count += 1 if matrix[x + 1][y] == 'w' else 0\n        if y > 0:\n            count += 1 if matrix[x][y - 1] == 'w' else 0\n        if y < m - 1:\n            count += 1 if matrix[x][y + 1] == 'w' else 0\n        return count\n\n    def get_num_black_neighbors(x, y, n, m):\n        return get_num_neighbors(x, y, n, m)\n\n    def get_num_white_neighbors(x, y, n, m):\n        return get_num_neighbors(x, y, n, m)\n\n    def get_num_black_neighbors_frame(x, y, n, m):\n        count = 0\n        for i in range(x, x + n):\n            for j in range(y, y + m):\n                if matrix[i][j] == 'w':\n                    count += 1\n        return count\n\n    def get_num_white_neighbors_frame(x, y, n, m):\n        count = 0\n        for i in range(x, x + n):\n            for j in range(y, y + m):\n                if matrix[i][j] == '.':\n                    count += 1\n        return count\n\n    def get_num_white_neighbors_frame_between(x1, y1, x2, y2, n, m):\n        count = 0\n        for i in range(x1, x2):\n            for j in range(y1, y2):\n                if matrix[i][j] == '.':\n                    count += 1\n        return count\n\n    def get_num_white_neighbors_frame_inside(x1, y1, x2, y2, n, m):\n        count = 0\n        for i in range(x1 + 1, x2):\n            for j in range(y1 + 1, y2):\n                if matrix[i][j] == '.':\n                    count += 1\n        return count\n\n    def get_num_white_neighbors_frame_corner(x1, y1, x2, y2, n, m):\n        count = 0\n        if (x1 > 0 and y1 > 0) and (x2 < n - 1 and y2 < m - 1):\n            count += 1 if matrix[x2][y2] == '.' else 0\n        if (x1 > 0 and y2 < m - 1) and (x2 < n - 1 and y1 > 0):\n            count += 1 if matrix[x2][y1] == '.' else 0\n        if (x1 < n - 1 and y1 > 0) and (x2 < n - 1 and y2 < m - 1):\n            count += 1 if matrix[x1][y2] == '.' else 0\n        if (x2 < n - 1 and y1 > 0) and (x1 < n - 1 and y2 < m - 1):\n            count += 1 if matrix[x1][y1] == '.' else 0\n        return count\n\n    def get_num_white_neighbors_frame_corner_between(x1, y1, x2, y2, x3, y3, x4, y4, n, m):\n        count = 0\n        if (x1 > 0 and y1 > 0 and x2 < n - 1 and y2 < m - 1) and (x3 > 0 and y3 > 0 and x4 < n - 1 and y4 < m - 1):\n            count += 1 if matrix[x4][y4] == '.' else 0\n        if (x1 > 0 and y1 > 0 and x2 < n - 1 and y2 < m - 1) and (x3 > 0 and y3 > 0 and x4 < n - 1 and y4 < m - 1):\n            count += 1 if matrix[x3][y3] == '.' else 0\n        if (x1 > 0 and y1 > 0 and x2 < n - 1 and y2 < m - 1) and (x3 > 0 and y3 > 0 and x4 < n - 1 and y4 < m - 1):\n            count += 1 if matrix[x2][y2] == '.' else 0\n        if (x1 > 0 and y1 > 0 and x2 < n - 1 and y2 < m - 1) and (x3 > 0 and y3 > 0 and x4 < n - 1 and y4 < m - 1):\n            count += 1 if matrix[x1][y1] == '.' else 0\n        return count\n\n    def get_min_size_frame(x1, y1, x2, y2, n, m):\n        if x1 == x2 and y1 == y2:\n            return"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('4 8\\n..w..w..\\n........\\n..w..w..\\n')\n    '..w++w..\\n..+..+..\\n..+..+..\\n..w++w..'\n    '''\n    n, m = [int(x) for x in stdin.split()]\n    matrix = stdin.splitlines()[1:]\n    size = 1\n    # your code here\n    pass"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: str: standard input as a string\n    :return: str: the solution to the problem\n    '''\n    import sys\n\n    # read the input\n    n, m = [int(x) for x in stdin.split(' ')]\n    # if there are no non-white pixels on the screen\n    if n == 0 or m == 0:\n        sys.stdout.write('-1\\n')\n        return\n    board = []\n    for i in range(m):\n        board.append(stdin[i * n:(i + 1) * n])\n\n    # check each frame to see if it's in the set of valid frames\n    for r in range(n):\n        for c in range(m):\n            if board[r][c] == 'w':\n                frame = getFrame(board, n, m, r, c)\n                if frame in validFrames(n, m, board):\n                    board[r][c] = '+'\n                    sys.stdout.write(''.join(board[r]) + '\\n')\n                    return\n\n    # no frame was found\n    sys.stdout.write('-1\\n')\n\n\ndef"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split(' '))\n    matrix = [list(stdin) for _ in range(n)]\n    \n    count = 0\n    for row in matrix:\n        if 'w' in row:\n            count += row.count('w')\n    \n    if count < m:\n        return -1\n\n    d = 2\n    while d * d <= m:\n        d += 1\n\n    while d >= 1:\n        current = []\n        for i in range(d, n - d):\n            for j in range(d, m - d):\n                if matrix[i][j] == 'w' and \\\n                    all([matrix[i + k][j + l] == 'w' for k in range(d) for l in range(d)]) and \\\n                    all([matrix[i + k][j + l] == '.' for k in range(d) for l in range(d) if i + k < n and j + l < m]):\n                    current.append((i, j, d))\n                    \n        if len(current) > 0:\n            count = m\n            for r, c, size in current:\n                count -= size * size\n            \n            if count == 0:\n                break\n        \n        d -= 1\n\n    if count!= 0:\n        return -1\n\n    res = []\n    for i, j, size in current:\n        res.append(['w' if (i + k < n and j + l < m) and matrix[i + k][j + l] == '.' else '+' for k in range(size) for l in range(size)])\n\n    return '\\n'.join([''.join(row) for row in res])\n\n\ndef"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [stdin.strip()]\n    for _ in range(n - 1):\n        grid.append(stdin.strip())\n\n    def expand(x: int, y: int, z: int, d: int, v: int, grid: List[str]) -> bool:\n        nonlocal m, n, x0, y0, d0\n        for dx in range(-d, d + 1):\n            for dy in range(-d, d + 1):\n                if dx ** 2 + dy ** 2 + d ** 2 <= d0 ** 2:\n                    x1 = x + dx\n                    y1 = y + dy\n                    if 0 <= x1 < n and 0 <= y1 < m:\n                        if grid[y1][x1] == v:\n                            return False\n        return True\n\n    def search(x: int, y: int, z: int, d: int, grid: List[str]) -> int:\n        nonlocal x0, y0, d0\n        if d == 1:\n            return 1\n        cnt = 0\n        for d in range(1, d + 1):\n            if expand(x, y, z, d, 'w', grid):\n                x0, y0, d0 = x, y, d\n                cnt += search(x, y, z, d, grid)\n        return cnt\n\n    ans = search(0, 0, n, m, grid)\n    if ans > 0:\n        return '+' * ans\n    else:\n        return '-1'\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    # Get size of monitor\n    monitor_size = [int(i) for i in stdin.split('\\n')[0].split()]\n    monitor = []\n    for i in range(1, monitor_size[0] + 1):\n        monitor.append([c for c in stdin.split('\\n')[i]])\n    # Set of black pixels\n    black_pixels = set(i for i in range(monitor_size[1]) if monitor[0][i] == '.')\n    # Set of white pixels\n    white_pixels = set(i for i in range(monitor_size[1]) if monitor[0][i] == 'w')\n    # Number of black pixels\n    black_pixels_count = len(black_pixels)\n    # Finds all possible frames\n    frames = {\n        size: {\n            frame: [\n                i for i in range(monitor_size[1] - size + 1)\n                if {i + j for j in range(size)} & black_pixels == black_pixels\n            ] for frame in range(1, size)\n        }\n        for size in range(1, black_pixels_count)\n    }\n    # Get all possible frames\n    frames_possible = set(i for i in frames.values())\n    frames_not_exist = {\n        size: {\n            frame: [\n                i for i in range(monitor_size[1] - size + 1)\n                if {i + j for j in range(size)} & white_pixels == black_pixels\n            ]\n        } for size in range(1, black_pixels_count)\n    }\n    # Sets possible frames and not exist frames\n    frames_possible_and_not_exist = frames_not_exist.copy()\n    frames_possible_and_not_exist.update(frames_possible)\n    # Finds all frames in the smallest size\n    frames_in_smallest_size = set(min(i, key=lambda x: len(x)) for i in frames_possible_and_not_exist)\n    # Finds the optimal frame\n    optimal_frame_index = min(frames_in_smallest_size, key=lambda x: len(x))\n    # If there is no optimal frame\n    if len(optimal_frame_index) == 0:\n        return '-1'\n    # Returns all elements of the optimal frame\n    return ''.join(\n        frame if '.' in frame else 'w'\n        for frame in [\n            ''.join(\n                monitor[i][j] if i in optimal_frame_index else '+'\n                for j in range(monitor_size[1])\n            )\n            for i in optimal_frame_index\n        ]\n    )\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    w = set()\n    for _ in range(n):\n        w.add(stdin[i])\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] not in w:\n                return \"No solution\"\n    return \"Yes\""
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(s) for s in stdin.split('\\n')]\n\n    if n % a!= 0 or n % b!= 0:\n        print('NO')\n    else:\n        print('YES')\n        if a < b:\n            print(n // a, n // b)\n        else:\n            print(n // b, n // a)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    if n % (a + b) == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(x) for x in stdin.split())\n    n = n // (a + b)\n    if n % (a + b):\n        return 'NO'\n    if n // (a + b) < 1:\n        return 'NO'\n    return str(n // (a + b)) +'' + str(n % (a + b))\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split('\\n')]\n    return 'YES\\n2 1\\n' if n >= (a + b) * min(a, b) else 'NO'"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    if (money - a * b) % (a + b)!= 0:\n        return \"NO\"\n    x = (money - a * b) // (a + b)\n    y = x * a + x * b\n    if y == money:\n        return \"YES\\n\" + str(x) + \" \" + str(x)\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = n\n    if a > b:\n        a, b = b, a\n    q, r = divmod(n, a * b)\n    if r:\n        return \"NO\"\n    else:\n        a -= 1\n        b -= 1\n        if a == 0:\n            return str(q + 1) + \" \" + str(b)\n        else:\n            return \"YES\""
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    k = (n - (b + a)) // a + (b - (n - (b + a))) // b\n    if k < 0 or k > n:\n        print(\"NO\")\n    elif k == 0:\n        print(\"YES\")\n        print(0, n // a)\n    else:\n        print(\"YES\")\n        print(n // a, n // a + n % a)\n    return \"\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it's possible to buy some amount of Bottles and Bars bars and spend exactly n burles.\"\"\"\n    n = int(stdin)\n    a, b = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    x, y = 0, 0\n    while True:\n        if a*x + b*y > n:\n            break\n        if a*x + b*y == n:\n            return \"YES\\n\" + str(x) + \" \" + str(y)\n        if a*x > n:\n            x = n // b\n            break\n        if b*y > n:\n            y = n // a\n            break\n        x += 1\n    return \"NO\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(\"YES\" if stdin == \"YES\" else \"NO\")\n    return \"YES\" if stdin == \"YES\" else \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n % a!= 0 or n % b!= 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(n // a, n // b)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n'''\n\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ns = input()\n\ns = s.replace('1', 'one')\ns = s.replace('2', 'two')\ns = s.replace('3', 'three')\ns = s.replace('4', 'four')\ns = s.replace('5', 'five')\ns = s.replace('6','six')\ns = s.replace('7','seven')\ns = s.replace('8', 'eight')\ns = s.replace('9', 'nine')\ns = s.replace('0', 'zero')\n\nprint(s)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n\n    pass"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"99\")\n    ninety-nine\n    >>> solution(\"6\")\n    six\n    >>> solution(\"20\")\n    twenty\n    \"\"\"\n    digits = {\"zero\": \"0\", \"one\": \"1\", \"two\": \"2\", \"three\": \"3\", \"four\": \"4\",\n              \"five\": \"5\", \"six\": \"6\", \"seven\": \"7\", \"eight\": \"8\",\n              \"nine\": \"9\", \"ten\": \"10\", \"eleven\": \"11\", \"twelve\": \"12\",\n              \"thirteen\": \"13\", \"fourteen\": \"14\", \"fifteen\": \"15\",\n              \"sixteen\": \"16\", \"seventeen\": \"17\", \"eighteen\": \"18\",\n              \"nineteen\": \"19\", \"twenty\": \"20\", \"thirty\": \"30\", \"forty\": \"40\",\n              \"fifty\": \"50\", \"sixty\": \"60\", \"seventy\": \"70\", \"eighty\": \"80\",\n              \"ninety\": \"90\"}\n    number = stdin.split(\" \")\n    ans = \"\"\n    for word in number:\n        if word in digits:\n            ans += digits[word]\n        else:\n            ans += word\n    return ans\n\n\n\"\"\"\n    s = stdin\n    n = 0\n    d = {\"0\":0,\"1\":1,\"2\":2,\"3\":3,\"4\":4,\"5\":5,\"6\":6,\"7\":7,\"8\":8,\"9\":9}\n    d1 = {\"10\":1,\"11\":11,\"12\":12,\"13\":13,\"14\":14,\"15\":15,\"16\":16,\"17\":17,\"18\":18,\"19\":19,\"20\":20,\"30\":30,\"40\":40,\"50\":50,\"60\":60,\"70\":70,\"80\":80,\"90\":90}\n    if len(s) == 1:\n        n = d[s]\n    else:\n        for i in range(len(s)):\n            if i < len(s)-1:\n                n += d[s[i+1]]*10**i\n            else:\n                n += d1[s[i]]*10**i\n    return n\n\"\"\"\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num = str(num)\n    ans = ''\n    numbers = {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6:'six',\n        7:'seven',\n        8: 'eight',\n        9: 'nine',\n        10: 'ten',\n        11: 'eleven',\n        12: 'twelve',\n        13: 'thirteen',\n        14: 'fourteen',\n        15: 'fifteen',\n        16:'sixteen',\n        17:'seventeen',\n        18: 'eighteen',\n        19: 'nineteen',\n        20: 'twenty',\n        30: 'thirty',\n        40: 'forty',\n        50: 'fifty',\n        60:'sixty',\n        70:'seventy',\n        80: 'eighty',\n        90: 'ninety',\n    }\n    for i in range(len(num)):\n        if num[i]!= '0':\n            ans += numbers[int(num[i])]\n        if i!= len(num) - 1:\n            ans += '-'\n    return ans\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return...\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 1 3 4 5 6 9''')\n    2\n    >>> solution('''3\n   ... 999 1000''')\n    2\n    >>> solution('''5\n   ... 1 2 3 4 5''')\n    4\n    >>> solution('''5\n   ... 1 2 3 4 5''')\n    0\n    \"\"\"\n    data = list(map(int, stdin.split('\\n')[0].split()))\n    if not 1 <= len(data) <= 100:\n        return '0'\n    res = 0\n    tmp = 0\n    for i in range(len(data)):\n        if data[i] >= data[i - 1] + 1:\n            tmp += 1\n        else:\n            tmp = 0\n        res = max(res, tmp)\n    return res\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Giraffe has written on the board an array of integers. He wanted to delete some consecutive elements, but forgot to mention their size. He realized that he could delete only full arrays, so now he wants to delete as many full arrays as possible.\n    Help him, and he will tell you how many full arrays can be deleted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # total number of elements in the array\n    n = int(stdin.split('\\n')[0])\n    array = list(map(int, stdin.split('\\n')[1].split()))\n    result = 0\n\n    for i in range(n-1):\n        if array[i+1] - array[i] > result:\n            result = array[i+1] - array[i]\n    return result\n\ndef"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    array = list(map(int, stdin.readline().strip().split(' ')))\n    jumps = []\n    for i in range(n):\n        if i == 0:\n            jumps.append(0)\n        else:\n            if array[i] < array[i-1]:\n                jumps.append(jumps[-1] + 1)\n            else:\n                jumps.append(0)\n    print(max(jumps))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    greatest_elements = 0\n    for i in range(n):\n        j = 0\n        if i == 0:\n            greatest_elements = 1\n            j += 1\n        elif a[i] - a[i-1]!= 1:\n            greatest_elements = max(greatest_elements, j)\n            j += 1\n        else:\n            j += 1\n    greatest_elements = max(greatest_elements, j)\n    if greatest_elements == 0:\n        greatest_elements = 1\n    return str(greatest_elements)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    greatest_erase = 0\n    for i in range(0, n):\n        greatest_erase = max(greatest_erase, i + 1 - a[i])\n    return str(greatest_erase)"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin)\n    # #arr = [int(i) for i in stdin.split()]\n    # arr = stdin.split()\n    # arr = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.split()]\n    #print(arr)\n    \n    count = 0\n    i = 0\n    max_count = 0\n    while i < len(arr) - 1:\n        #print(arr[i], arr[i+1])\n        if arr[i] < arr[i+1]:\n            #print(\"here\")\n            count += 1\n            i += 1\n        else:\n            if count > max_count:\n                max_count = count\n                #print(\"here2\")\n            count = 0\n            i += 1\n    \n    if count > max_count:\n        max_count = count\n    #print(max_count)\n    if max_count == 0:\n        return \"0\"\n    else:\n        return str(max_count)"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of elements that JATC can erase.\n\n    :param stdin: str representation of the input\n    :return: str representation of the output\n    \"\"\"\n\n    def clear(nums, a):\n        for i in range(0, len(nums)):\n            if nums[i] >= a:\n                nums[i] = 0\n            else:\n                break\n        return nums\n\n    nums = [int(n) for n in stdin.split(\" \")]\n    a = min(nums)\n    nums = clear(nums, a)\n    i = 0\n    while a!= 0:\n        nums = clear(nums, a)\n        a = min(nums)\n        nums = clear(nums, a)\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(6)\n    2\n    >>> solution(3)\n    2\n    >>> solution(5)\n    4\n    \"\"\"\n   ...\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total_days = int(stdin.readline())\n    problems = list(map(int, stdin.readline().strip().split(' ')))\n    days_when_half_problems_solved = 0\n    for day, problems_solved in enumerate(problems):\n        days_when_half_problems_solved += problems_solved // 2\n        if days_when_half_problems_solved >= total_days // 2:\n            return str(day + 1)"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    lo = lo2 = hi = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            lo2 = lo + 1\n        else:\n            lo2 = 1\n        lo = lo2\n        if i >= 2:\n            if a[i] > a[i - 1] and a[i] > a[i - 2]:\n                hi = hi + 1\n            else:\n                hi = 1\n        else:\n            hi = 1\n        lo = lo + hi\n    return str(lo)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    problems = [int(stdin.readline()) for _ in range(days)]\n    days_solved = sum(problems) // 2\n    return str(problems.index(days_solved) + 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    for i in range(1, n + 1):\n        count = 0\n        for j in range(0, i):\n            count += a[j]\n            if count >= (i // 2 + 1):\n                return i\n        a.append(a[i - 1])\n    return None\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    if sum(a) < n:\n        return \"No solution\"\n    elif sum(a) % 2 == 0:\n        return str(a.index(n//2))\n    else:\n        return str(a.index(n//2) + 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline().strip())\n    schedules = [int(line.strip()) for line in stdin.readlines()]\n    schedules.sort()\n    count = 0\n    for schedule in schedules:\n        count += schedule\n        if count >= days // 2:\n            return str(schedules.index(schedule) + 1)"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the index of day when Polycarp will celebrate the equator.\n    \"\"\"\n    # parse the input\n    n = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n\n    # find the first day when Polycarp can create half the problems\n    days = set()\n    for a in A:\n        days.add(a + 1)\n        days.add(a - 1)\n    half = max(days)\n    for day in range(2, n + 1):\n        if day not in days:\n            half += 1\n            break\n\n    return str(half)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of days in the array\"\"\"\n    days = int(stdin.split()[0])\n    problem_count = [int(x) for x in stdin.split()[1:]]\n    if max(problem_count) <= days / 2:\n        return str(1)\n    else:\n        return str(sum(problem_count) - sum(problem_count[:days // 2]))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(i) for i in stdin.readline().strip().split(' ')]\n    equator = 0\n    for i in range(len(l)):\n        if l[i] > l[equator]:\n            equator = i\n    return equator + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3 2 1\n   ... ''')\n    '2'\n\n    >>> solution('''6\n   ... 2 2 2 2 2 2\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return '1'\n    s_avg = sum(s) // n // 2\n    for i, x in enumerate(s):\n        if x > s_avg:\n            return str(i + 1)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 9 3\n   ... 8 6 7\n   ... 4 2 5''')\n    '12 1'\n    \"\"\"\n    return (\n        stdin.split('\\n')[0]\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace('\\n', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', '')\n       .replace(' ', ''"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '', ''\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the optimal solution.\"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # don't forget to change `stdout` to the correct variable!\n    return '0 0'\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n-----Tests-----\n\nInputs:\n3\n1 9 3\n8 6 7\n4 2 5\n\nOutputs:\n12 1\n\nInputs:\n4\n3 9 4\n5 3 1\n1 7 3\n4 2 8\n\nOutputs:\n12 2\n\nInputs:\n4\n3 9 4\n5 3 1\n1 7 3\n4 2 8\n\nOutputs:\n12 3\n\nInputs:\n4\n1 9 3\n8 6 7\n4 2 5\n1 7 3\n4 2 8\n\nOutputs:\n12 3\n\nInputs:\n3\n1 9 3\n8 6 7\n4 2 5\n\nOutputs:\n12 2\n\nInputs:\n3\n8 4 8\n1 7 5\n2 4 5\n\nOutputs:\n6 2\n\nInputs:\n3\n8 4 8\n1 7 5\n2 4 5\n\nOutputs:\n6 2\n\nInputs:\n3\n8 4 8\n1 7 5\n2 4 5\n\nOutputs:\n6 2\n\"\"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    board = [list(map(int, stdin.split('\\n')[i].split())) for i in range(N)]\n    queue = [(0, 1, 1)]\n    visited = {(0, 1)}\n    steps = 0\n    while queue:\n        new_queue = []\n        steps += 1\n        for i, num, replace in queue:\n            for x, y in [(i + 2, j), (i - 2, j), (i, j + 2), (i, j - 2)]:\n                if x < 0 or y < 0 or x > N - 1 or y > N - 1:\n                    continue\n                if (x, y) not in visited and board[x][y] == num:\n                    if not replace:\n                        new_queue.append((x, y, True))\n                    else:\n                        new_queue.append((x, y, False))\n                    visited.add((x, y))\n        queue = new_queue\n    return steps, len(visited)\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(stdin) >= 1 else \"no\"\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip(), 2) % 64\n    return \"yes\" if n == 0 else \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if bin(int(stdin, 2) % 64).count('1') <= stdin.count('1') else 'no'\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"yes\" if \"11\" not in stdin else \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n------Solution------\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0432\u044b\u0441\u043e\u0442\u044b. \u0412\u044b\u0441\u043e\u0442\u0430 \u0447\u0438\u0441\u043b\u0430 - \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0447\u0438\u0441\u043b\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u043e \u0434\u0435\u043b\u0438\u0442\u0441\u044f, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 1.\n\n\u041f\u043e\u043b\u0443\u0447\u0438\u0432 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b, \u0434\u0435\u043b\u0438\u043c \u0438\u0445 \u043d\u0430 \u0434\u0432\u0430 \u0432\u044b\u0431\u043e\u0440\u0430:\n1. \u0412 \u0447\u0438\u0441\u043b\u0435 \u0438\u043c\u0435\u0435\u0442 \u043e\u0434\u043d\u0443 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\n2. \u0412 \u0447\u0438\u0441\u043b\u0435 \u0438\u043c\u0435\u0435\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u0432\u0435 \u0435\u0434\u0438\u043d\u0438\u0446\u044b\n\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0434\u0432\u0430, \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u043d\u0430 64. \u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0438\u0442\u0441\u044f, \u0442\u043e \u0438\u0449\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u0434\u0435\u043b\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430 64.\n\n\u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64, \u0442\u043e \u043c\u044b \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c false. \u0415\u0441\u043b\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0430 \u043f\u0440\u043e\u0448\u043b\u043e \u043f\u043e \u0432\u0441\u0435\u043c \u0446\u0435\u043b\u044b\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c \u043f\u0443\u0442\u044f\u043c, \u0442\u043e \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c true.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n100010001 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u0443\u043c\u043c\u0430 1 \u0438 1 \u0434\u0430\u044e\u0442 1 \u0438 \u043e\u043d\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64\n10011011 \u043d\u0435\u0442, \u0442.\u043a. \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64\n11111100 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 1 + 1 + 1 + 1 + 1 = 6 + 2 = 8, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64\n11111101 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 1 + 1 + 1 + 1 + 1 = 5 + 1 = 6, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64\n11111110 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 1 + 1 + 1 + 1 + 1 = 5, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64\n11111111 \u043d\u0435\u0442, \u0442.\u043a. \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u0438\u0446\u044b\n111111111111 \u043d\u0435\u0442, \u0442.\u043a. \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u0438\u0446\u044b\n111111111111111111111111 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 9 + 1 = 10, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64\n1111111111111111111111111111 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 64, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 9\n\n\u041f\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \u0442\u043e\u0436\u0435, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043b\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442\u044c \u043d\u0430\u043c. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432\u044b\u0441\u043e\u0442\u0443.\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(stdin) % 2 == 0 else \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # replace this for solution\n    return \"yes\""
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    for c in stdin:\n        d[c] = d.get(c, 0) + 1\n    b = d['z']\n    d['z'] = 0\n    for i in range(ord('a'), ord('z') + 1):\n        c = chr(i)\n        if d[c] == 0:\n            b -= 1\n        if b == 0:\n            return \"abcdefghijklmnopqrstuvwxyz\"\n    return \"-1\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin if all(x in string.ascii_lowercase for x in stdin) else '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = len(stdin)\n    a = stdin\n    b = sorted(a)\n    flag = 0\n    for i in range(n):\n        if b[i]!= a[i]:\n            flag = 1\n    if flag == 1:\n        print(-1)\n    else:\n        print(''.join(b))\n\n\ndef"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    start = \"abcdefghijklmnopqrstuvwxyz\"\n    return \"-1\" if not stdin[0] in start else start[start.index(stdin[0]):] + stdin[1:]"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for x in stdin:\n        if x not in ans:\n            ans.append(x)\n    s = \"\"\n    for x in ans:\n        if x not in s:\n            s += x\n    if s == \"abcdefghijklmnopqrstuvwxyz\":\n        return ans\n    else:\n        return \"-1\""
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    stdin_list = list(stdin)\n    alphabet = [chr(x) for x in range(97, 123)]\n    al = []\n    for char in stdin_list:\n        if char in alphabet:\n            al.append(char)\n    while True:\n        if len(al) == 1:\n            return ''.join(al)\n        max_i = al.index(max(al, key=al.count))\n        al[max_i] = chr(min([ord(x) for x in al if x!= al[max_i]]))\n\n\ndef"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'abcdefghijklmnopqrstuvwxyz' if len(stdin) == 26 else '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('z', 'a')\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"thereisnoanswer\":\n        return \"-1\"\n    return ''.join([chr(ord(i)-1) for i in stdin])\n    "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    if (m - r + 1) * (n - r + 1) < k:\n        return -1\n    if r == 1:\n        return 0\n\n    return math.ceil(k / (m - r + 1) / (n - r + 1))\n\n\ndef"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.9f}'.format(int(stdin)**2 / (int(stdin) - int(stdin[:-1]) - 1))"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = list(map(int, stdin.split(' ')))\n    return str(int(min(n, m) * min(k, min(n * m, 10**5)) / min(r**2, min(n, m))))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # --------------------\n    n, m, r, k = map(int, stdin.split())\n    x_min, y_min = (r - 1, r - 1) if r < n else (n - r, m - r)\n    print(x_min, y_min)\n    return '{:.9f}'.format(n * m * (k - 1) / (x_min * y_min))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '*'"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(s) for s in stdin.split(' ')]\n    return str(a * b * c * d / 24)\n\"\"\"\n\ndef"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    if n * m <= k:\n        return 0\n    res = n * m\n    for x in range(0, n - r + 1):\n        for y in range(0, m - r + 1):\n            count = 0\n            for i in range(x, x + r):\n                for j in range(y, y + r):\n                    if (i - x + 1) * (j - y + 1) <= k:\n                        count += 1\n                    else:\n                        break\n            res = min(res, count)\n    return res\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, r, k) = map(int, stdin.split())\n    return str(min(n - r + 1, m - r + 1, k))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input of str type in the form\n    n : number of integers in the array\n    n : list of n integers\n    \n    returns a list of n elements in the form of string.\n    \"\"\"\n    # read in the data\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = list(map(int, stdin.split(\"\\n\")[1].split()))\n    # initialize the max product\n    max_product = 0\n    # set max_product for numbers with index 1\n    max_product = max(max_product, numbers[0])\n    # set max_product for numbers with index 2\n    max_product = max(max_product, numbers[1])\n    # set max_product for numbers with index 3\n    max_product = max(max_product, numbers[2])\n    # initialize the final list\n    final_list = []\n    # set max_product for numbers with index 3\n    max_product = max(max_product, numbers[3])\n    # set max_product for numbers with index 4\n    max_product = max(max_product, numbers[4])\n    # set max_product for numbers with index 5\n    max_product = max(max_product, numbers[5])\n    # append the elements with the maximum product to the list\n    final_list.append(max_product)\n    # return the list\n    return final_list\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        print(0)\n        return\n    if len(set(a)) == 1:\n        print(0)\n        return\n    m = 0\n    for i in range(n):\n        m = max(m, a[i] * a[(i+1) % n])\n    print(m)\n    return"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = input().split()\n    for i in range(len(inputs)):\n        inputs[i] = int(inputs[i])\n    inputs = sorted(inputs, reverse=True)\n    if sum(inputs) == 0:\n        return '0'\n    outputs = []\n    for i in range(len(inputs)):\n        outputs.append(-inputs[i] - 1)\n    return''.join([str(i) for i in outputs])\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def max_possible_product(arr):\n        return max([el*el for el in arr])\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_prod = 0\n    for el in arr:\n        arr_copy = arr[:]\n        arr_copy[arr.index(el)] = -el-1\n        if max_prod < max_possible_product(arr_copy):\n            max_prod = max_possible_product(arr_copy)\n    return''.join(list(map(str, arr)))\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    ans = 0\n    for i in range(n):\n        sub = 1\n        for j in range(i, n):\n            sub *= arr[j]\n            ans = max(ans, sub)\n            if ans == 0:\n                return\n    return''.join([str(ans)] * n)\n\nsolution('4\\n2 2 2 2')"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    mul = []\n    max_mul = 1\n    if sum(a) == 0:\n        return \"0\"\n    for i in a:\n        mul.append(abs(i)*max_mul)\n        max_mul *= abs(i)\n    for i in a:\n        mul[i-1] *= -1\n    mul = list(set(mul))\n    return \" \".join(map(str, mul))\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    print(stdin.split()[0],stdin.split()[1])"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate product of all numbers in the array\"\"\"\n    n = int(stdin)\n    a = [int(i) for i in stdin.strip().split()]\n    \n    ans = []\n    for i in range(n):\n        # if a[i] > 0:\n        #     ans.append(a[i] - 1)\n        # else:\n        #     ans.append(a[i])\n        ans.append(a[i] * (a[i] - 1))\n\n    return \" \".join([str(i) for i in ans])\n\nprint(solution(input()))\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ... \"\"\"\n   ... 4\n   ... 2 2 2 2\n   ... \"\"\")\n    -3 -3 -3 -3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            lst.append(i)\n    if len(lst) < k:\n        return -1\n    else:\n        return lst[k-1]\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            r += 1\n        if r >= k:\n            return str(n // i)\n    return \"-\""
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while a!= 0 and b!= 0:\n            if a > b:\n                a %= b\n            else:\n                b %= a\n        return a + b\n\n    n, k = map(int, stdin.split(' '))\n    if k > n:\n        print(-1)\n    else:\n        print(gcd(n, n - k + 1))\n\n\ndef"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    numbers = [True] * (n + 1)\n    numbers[0] = numbers[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if numbers[i]:\n            for j in range(i * i, n + 1, i):\n                numbers[j] = False\n    for i in range(n + 1):\n        if numbers[i]:\n            if n % i == 0:\n                if i < k:\n                    k = i\n                else:\n                    break\n    if k == 0:\n        return '0'\n    return str(k)\n\n\ndef"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = list(map(int, stdin.split(' ')))\n    k_th_smallest = None\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k_th_smallest = i\n            if k <= 1:\n                break\n            else:\n                k -= 1\n    if k_th_smallest:\n        return k_th_smallest\n    else:\n        return '-1'\n    '''\n\n    # p = lambda a: range(1, a + 1)\n    # n, k = list(map(int, stdin.split(' ')))\n    # k_th_smallest = 1\n    # for i in p(n):\n    #     if n % i == 0:\n    #         k_th_smallest = i\n    #         if k <= 1:\n    #             break\n    #         else:\n    #             k -= 1\n    # if k_th_smallest:\n    #     return k_th_smallest\n    # else:\n    #     return '-1'\n\n    p = lambda a: range(1, a + 1)\n    n, k = list(map(int, stdin.split(' ')))\n    k_th_smallest = 1\n    for i in p(n):\n        if n % i == 0:\n            k_th_smallest = i\n            break\n        else:\n            k_th_smallest = n\n    return k_th_smallest if k_th_smallest <= k else '-1'\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return i\n    return '-1'\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, k = int(input[0].split(' ')[0]), int(input[0].split(' ')[1])\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return str(i)\n        i += 1\n    return '-1'\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n        if count == k:\n            return str(i)\n    return -1\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            l.append(i)\n    if len(l) < k:\n        print(-1)\n    else:\n        print(l[k-1])\n    return ''"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    \n    \n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split('\\n')[0].split())))\n    \n    a = np.array(a)\n    maxi = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for m in range(1, 10):\n                    if np.count_nonzero(((a == i) | (a == j)).all(axis=1)) == 6 and np.count_nonzero(((a == k) | (a == m)).all(axis=1)) == 6 and np.count_nonzero(((a == i) | (a == m)).all(axis=1)) == 0:\n                        maxi = max(maxi, i*j*k*m)\n    return maxi\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    The function name must be'solution'.\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    all_nums = []\n    for _ in range(n):\n        all_nums.extend(stdin.readline().split())\n    all_nums = list(map(int, all_nums))\n    if all(a <= 9 and a >= 1 for a in all_nums):\n        pass\n    else:\n        return \"0\"\n    all_nums.sort()\n    return str(all_nums[-1] + all_nums[0])\n\n\nsolution(\"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\")\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import chain\n    def rotate(n: int, x: int):\n        return (x * n) % 10\n\n    cubes = [list(map(int, input().split())) for _ in range(int(stdin))]\n    return max([sum(chain(*list(map(lambda x: [rotate(i, x) for i in range(1, 10)], cube)))) for cube in cubes])\n\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    array = [[int(x) for x in line.split()] for line in stdin.split('\\n')[1:]]\n    array = sorted(array)\n    num = 1\n    for i in range(n):\n        if array[i][0] == array[i][1] and array[i][1] == array[i][2]:\n            if array[i][3] == array[i][4] and array[i][4] == array[i][5]:\n                num = max(num, array[i][3])\n        else:\n            num = max(num, array[i][0])\n\n    print(num)"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    return output\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible number x such that Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n    \"\"\"\n    return 'the maximum possible number x such that Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1'\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def count_zeros(num: int) -> int:\n        return str(num).count('0')\n        \n    num, round_zeros = stdin.split()\n    round_zeros = int(round_zeros)\n    num = int(num)\n    while True:\n        if count_zeros(num) >= round_zeros:\n            break\n        num += 1\n    return str(num)\n    \n    \nprint(solution(input()))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    r = 1\n    while (n > 0) and (k > 0):\n        if n % 2 == 0:\n            n = n//2\n        else:\n            n = n//10 + n % 10\n            r *= 10\n        k -= 1\n    return str(r*n)"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    i = 0\n    while k > 0:\n        if n % 10 == 0:\n            n = n // 10\n            k = k - 1\n        else:\n            n = n + 1\n            k = k\n    return str(n)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    kRound = 10 ** k - 1\n\n    if (n < kRound):\n        print(n)\n    else:\n        print(n + (kRound - n % k) % k)"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0:\n        return 0\n    result = int(round(n, -1))\n    n = str(n)\n    zeros = 0\n    for i in range(len(n) - 1, -1, -1):\n        if n[i] == '0':\n            zeros += 1\n        else:\n            break\n    if zeros < k:\n        return result\n    else:\n        return int(result + n[:-k - 1])\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    i = 0\n    while n > 0 and k > 0:\n        if n % k == 0:\n            i += n // k\n            break\n        n //= 10\n        k -= 1\n    return str(i)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    return str(int(n) * 10 ** 9 + 1)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    n = int(stdin)\n    for i in range(len(stdin)):\n        x += int(stdin[i]) * (10 ** (len(stdin) - 1 - i))\n    while not x % n == 0:\n        x += 1\n    return x\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    k = int(k)\n    print(n[:k] + n[k:].rstrip('0') or n)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Decomposition:\n        find each matrix A\n        get each row of each matrix A\n        get each column of each matrix A\n        find each matrix B\n        get each row of each matrix B\n        get each column of each matrix B\n        find the size of matrix A\n        find the size of matrix B\n        if the size of matrix A is not equal to the size of matrix B, return -1\n        else:\n            find the min of matrix A and matrix B\n            if the min of matrix A is not equal to the min of matrix B, return -1\n            else:\n                find the max of matrix A and matrix B\n                if the max of matrix A is not equal to the max of matrix B, return -1\n                else:\n                    return the max of matrix A and matrix B\n    '''\n    # get the size of matrix A\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n\n    # get matrix A\n    matrix_a = [stdin.split() for _ in range(n)]\n\n    # get matrix B\n    matrix_b = [stdin.split() for _ in range(n)]\n\n    # compare the size of matrix A and matrix B\n    if n!= len(matrix_b) or m!= len(matrix_b[0]):\n        return -1\n    else:\n        # get the min of matrix A and matrix B\n        min_a = float('inf')\n        for i in range(n):\n            for j in range(m):\n                min_a = min(min_a, int(matrix_a[i][j]))\n\n        # get the max of matrix A and matrix B\n        max_a = 0\n        for i in range(n):\n            for j in range(m):\n                max_a = max(max_a, int(matrix_a[i][j]))\n\n        if max_a < min_a:\n            return -1\n        else:\n            return max_a\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"https://app.codility.com/demo/results/trainingGQKJKG-ZD2/\"\"\"\n\n    def check_eq(A, B):\n        if not any(a!= b for a, b in zip(A, B)):\n            return True\n        else:\n            return False\n\n    def calc_flip(B):\n        count_flip = 0\n        for i in range(len(B)):\n            for j in range(len(B[i])):\n                if B[i][j] == 1:\n                    count_flip += 1\n                    B[i][j] = 0\n                    if i < len(B) - 1:\n                        B[i + 1][j] = 1\n                    if i > 0:\n                        B[i - 1][j] = 1\n                    if j < len(B[i]) - 1:\n                        B[i][j + 1] = 1\n                    if j > 0:\n                        B[i][j - 1] = 1\n        return B, count_flip\n\n    n, m = map(int, stdin.split())\n    A = [[int(c) for c in line.split()] for line in stdin.splitlines()]\n    B = [[0 for c in range(m)] for r in range(n)]\n    count = 0\n    while not check_eq(A, B):\n        B, c = calc_flip(B)\n        count += c\n    return str(count)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str()\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, line.split())) for line in stdin.split('\\n')[:n]]\n    b = [list(map(int, line.split())) for line in stdin.split('\\n')[:n]]\n    count = 0\n\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if b[i][j]!= a[i][j]:\n                count += 1\n                b[i][j] = 1\n\n    if count!= 0:\n        return str(count)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \" \".join(\n        (\n            \" \".join(str(x) for x in list(input()))\n            for _ in range(int(stdin.split()[0]))\n        )\n    )"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    A = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    def condition(B, A):\n        return all(all(row == A_row) for row, A_row in zip(B, A))\n\n    def is_valid(B, A):\n        return 0 <= min(A[0][0], B[0][0]) <= max(A[0][0], B[0][0]) and \\\n               0 <= min(A[0][1], B[0][1]) <= max(A[0][1], B[0][1]) and \\\n               0 <= min(A[1][0], B[1][0]) <= max(A[1][0], B[1][0]) and \\\n               0 <= min(A[1][1], B[1][1]) <= max(A[1][1], B[1][1])\n\n    # run DFS to find valid operations\n    cnt = 0\n    while not condition(B, A):\n        B = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if A[i][j] == 1:\n                    for x in range(i - 1, i + 2):\n                        for y in range(j - 1, j + 2):\n                            if 0 <= x < n and 0 <= y < m and A[x][y] == 1:\n                                B[x][y] = 1\n        cnt += 1\n\n    # print out answer if possible\n    if is_valid(B, A):\n        print(cnt)\n        for i in range(n):\n            print(\" \".join([str(row[0]) for row in B[i]]))\n    else:\n        print(-1)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = [int(i) for i in stdin.split(\" \")]\n    return \" \".join([str(i / r) for i in (s, p, r)])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l = map(int, stdin.split())\n    return''.join(map(lambda x: '{:.9f}'.format(1/((x/m)*l) if x%2 == 0 else 1/(((x-1)/m)*l)), range(n+m, n+m+1)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the probability for each species to be the only one\n    on the island after a long enough time\n    \"\"\"\n    r, s, p = map(int, stdin.split())\n    rock_survival = r / (r + s + p)\n    scissors_survival = s / (r + s + p)\n    paper_survival = p / (r + s + p)\n    return f'{rock_survival:.9f} {scissors_survival:.9f} {paper_survival:.9f}'\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split(' '))\n    # rock_survive = r / (r + s + p)\n    # scissors_survive = s / (r + s + p)\n    # paper_survive = p / (r + s + p)\n    # total_survive = (r + s + p) / (r + s + p + r)\n    # r_s_p = (r * s + r * p + s * p) / (r + s + p)\n    # r_s_p_total = (r * s + r * p + s * p + r * total_survive) / (r + s + p + total_survive)\n    # r_s_p_survive = (r * s + r * p + s * p + r * total_survive * rock_survive) / (r + s + p + total_survive * rock_survive)\n    # r_s_p_survive_scissors = (r * s + r * p + s * p + r * total_survive * scissors_survive) / (r + s + p + total_survive * scissors_survive)\n    # r_s_p_survive_paper = (r * s + r * p + s * p + r * total_survive * paper_survive) / (r + s + p + total_survive * paper_survive)\n    # r_survive = (r + s + p + r * total_survive) / (r + s + p + r + s + p + total_survive)\n    # r_s_survive = (r * s + r * total_survive) / (r + s + p + r + s + p + total_survive)\n    # r_s_p_survive_scissors_total = (r * s + r * p + s * p + r * total_survive * scissors_survive) / (r + s + p + total_survive * scissors_survive)\n    # r_s_p_survive_paper_total = (r * s + r * p + s * p + r * total_survive * paper_survive) / (r + s + p + total_survive * paper_survive)\n    # survive = r_survive + s_survive + p_survive - r_s_p_survive - r_s_p_survive_scissors - r_s_p_survive_paper\n    # survive_total = r_survive + s_survive + p_survive - r_s_p_survive_total - r_s_p_survive_scissors_total - r_s_p_survive_paper_total\n    # r_s_p_survive = (r * s + r * p + s * p + r * survive * rock_survive) / (r + s + p + survive * rock_survive)\n    # r_s_p_survive_scissors = (r * s + r * p + s * p + r * survive * scissors_survive) / (r + s + p + survive * scissors_survive)\n    # r_s_p_survive_paper = (r * s + r * p + s * p + r * survive * paper_survive) / (r + s + p + survive * paper_survive)\n    # survive_r_s_p = survive * rock_survive\n    # survive_r_s_p_scissors = survive * scissors_survive\n    # survive_r_s_p_paper = survive * paper_survive\n    # r_s_p_survive = (r * s + r * p + s * p + r_s_p_survive_r_s_p * r_survive) / (r + s + p + r_survive)\n    # r_s_p_survive_scissors = (r * s + r * p + s * p + r_s_p_survive_scissors * r_survive) / (r + s + p + r_survive)\n    # r_s_p_survive_paper = (r * s + r * p + s * p + r_s_p_survive_paper * r_survive) / (r + s + p + r_survive)\n    # survive_r_s_p_scissors = survive_r_s_p * scissors_survive\n    # survive_r_s_p_paper = survive_r_s_p * paper_survive\n    # print(r_survive)\n    # print(r_s_p_survive)\n    # print(r_s_p_survive_scissors)\n    # print(r_s_p_survive_paper)\n    # print(survive_r_s_p)\n    # print(survive_r_s_p_scissors)\n    # print(survive_r_s_p_paper)\n    # print(r_s_p_survive_scissors)\n    # print(r_s_p_survive_paper)\n    # print(survive_r_s_p_scissors)\n    # print(survive_r_s_p_paper)\n    # print(survive_r_s_p)\n    # print(survive_r_s_p_scissors)\n    # print(survive_r_s_p_paper)\n    # print(survive)\n    # print(r_s_p_survive)\n    # print(r_s_p_survive_scissors)\n    # print(r_s_p_survive_paper)\n    # print(r_survive)\n    # print(r_s_survive)\n    # print(r_s_p_survive_scissors)\n    # print(r_s_p_survive_paper)\n    # print(s_survive)\n    # print(s_s_p_survive)\n    # print(s_s_p_survive_scissors)\n    # print(s_s_p_survive_paper)\n    # print(p_survive)\n    # print(p_s_p_survive)\n    # print(p_s_p_survive_scissors)\n    # print(p_s_p_survive_paper)\n    # print(r_s_p_survive)\n    # print(r_s_p_survive_scissors)\n    # print(r_s_p_survive_paper)\n    # print(survive_r_s_p)\n    # print(survive_r_s_p_scissors)\n    # print(survive_r_s_p_paper)\n    # print(survive)\n    # print(r_s_p_survive)\n    # print(r_s_p_survive_scissors)\n    # print(r_s_p_survive_paper)\n    # print(survive_r_s_p)\n    # print(survive_r_s_p_scissors)\n    # print(survive_r_s_p_paper)\n    # print(r_survive)\n    # print(r"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rocks, scissors, papers = [int(x) for x in stdin.split(\" \")]\n    rock_prob, scissors_prob, paper_prob = 0, 0, 0\n    rock_last, scissors_last, paper_last = 0, 0, 0\n    for i in range(1, 1001):\n        rock_last, scissors_last, paper_last = rock_prob, scissors_prob, paper_prob\n        rock_prob = (rocks - (scissors_last + paper_last))/2\n        scissors_prob = (scissors - (rock_last + paper_last))/2\n        paper_prob = (papers - (rock_last + scissors_last))/2\n        if rocks == scissors_last and scissors == paper_last and rocks == paper_last:\n            rock_prob = 1\n            scissors_prob = 1\n            paper_prob = 1\n        if i == 1000:\n            print(rock_prob, scissors_prob, paper_prob)\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = [int(x) for x in stdin.split()]\n    ans = [r / (r + s + p), s / (r + s + p), p / (r + s + p)]\n    return''.join(map(lambda x: str(x), ans))\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    r, s, p = float(r / (r + s + p)), float(s / (r + s + p)), float(p / (r + s + p))\n    print(r, s, p)\n    return\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    rock, scissors, paper = int(data[0]), int(data[1]), int(data[2])\n    return [\n        rock / (rock + paper + scissors),\n        scissors / (rock + paper + scissors),\n        paper / (rock + paper + scissors),\n    ]\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    r, s, p = map(int, stdin.split())\n    # r: rock, s: scissors, p: paper\n    return str(1 - (1 - (1 / r) * (1 / s) * (1 / p)) ** 2)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, *l = stdin.split()\n    l = list(map(int, l))\n    return l\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    start, stop = map(int, stdin.split(\" \"))\n    k = int(stdin.split(\" \")[-1])\n    return str(stop - start - k - (start - stop - k + 1))\n\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    return max(0, r_1 - l_2) if k < r_1 - l_2 else r_1 - l_2 - k\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l1, r1, l2, r2, k = [int(x) for x in stdin.split()]\n    m1 = (r1 - l1) // 2 + 1\n    m2 = (r2 - l2) // 2 + 1\n    m = m1 + m2 + k - 1\n    if m < 0:\n        return 0\n    return m\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = [int(x) for x in stdin.split(' ')]\n    return str(max(0, (min(r_1, r_2) - max(l_1, l_2)) - max(0, (r_1 - l_2) - (r_2 - l_1))))"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(n)\n    space: O(n)\n    '''\n    n, m = map(int, stdin.split(' '))\n    # b = (0, 0)\n    A, B = [], []\n    C, D = [], []\n    E, F = [], []\n    for _ in range(n):\n        a, b, c = map(int, stdin.split(' '))\n        A.append(a)\n        B.append(b)\n        C.append(c)\n    for _ in range(m):\n        e, f, g = map(int, stdin.split(' '))\n        E.append(e)\n        F.append(f)\n        D.append(g)\n    # print(A, B)\n    # print(C, D)\n\n    reachable = set()\n\n    # 4 points\n    # -1, -4, 5, -2\n    # -2, 3, 4, 2\n    # -2, -3, 3, 3\n    # 2, -1, 2, -1\n    # 0, 0, 0, 0\n    # -2, -2, 4, 2\n    # 2, -1, 3, 1\n    # -1, -1, 3, 3\n    # -3, -2, 3, 3\n    # 0, -1, 3, 3\n    # 0, 1, 2, 2\n    # 1, 0, 2, 2\n    # -3, 0, 2, 2\n    # 2, -1, 2, -1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # -2, -1, 2, 1\n    # 2, 1, 3, 1\n    # 1, -2, 3, 1\n    # -2, -2, 4, 2\n    # 2, 1, 3, 1\n    # 1, -2, 3, 1\n    # -2, -1, 3, 3\n    # 2, 1, 3, 1\n    # 1, -2, 3, 1\n    # -2, -1, 3, 3\n    # 0, 1, 2, 2\n    # 1, 0, 2, 2\n    # 0, -1, 2, 2\n    # -1, -1, 3, 3\n    # -2, 0, 2, 2\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # -2, 1, 2, 1\n    # 2, 1, 3, 1\n    # 1, -2, 3, 1\n    # -2, 1, 3, 1\n    # 0, 1, 2, 2\n    # 1, 0, 2, 2\n    # -2, -1, 2, 2\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # -2, 1, 2, 1\n    # 0, 1, 2, 2\n    # 1, 0, 2, 2\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 2, 0, 2, 2\n    # 1, -1, 2, 2\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # -2, 1, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # -2, 1, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 2, 0, 2, 2\n    # 1, -1, 2, 2\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 2, 0, 2, 2\n    # 1, -1, 2, 2\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 1, -2, 2, 1\n    # 2, 1, 2, 1\n    # 2, 0, 2, 2\n    "
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum area of the region the cow can reach\n    \n    Args:\n        stdin (str): input\n    \n    Returns:\n        str: the maximum area of the region the cow can reach\n    \"\"\"\n    lines = stdin.split('\\n')\n    lines = [line.split() for line in lines]\n    n, m = [int(x) for x in lines[0]]\n    \n    # create a set of coordinates\n    coords = set()\n    \n    for i in range(1, n+1):\n        a, b, c = [int(x) for x in lines[i]]\n        coords.add((a, c))\n        coords.add((b, c))\n    \n    # create a set of coordinates\n    lines = stdin.split('\\n')[1:]\n    lines = [line.split() for line in lines]\n    \n    for i in range(m):\n        a, b, c = [int(x) for x in lines[i]]\n        coords.add((a, c))\n        coords.add((b, c))\n        \n    # check that the coordinate (0,0) is not in coords\n    if (0, 0) in coords:\n        return 'INF'\n    \n    # sort by x then y\n    coords = sorted(coords, key=lambda coord: (coord[0], coord[1]))\n    \n    # create a function to return distance to (x, y)\n    def distance(coord):\n        x, y = coord\n        return abs(x) + abs(y)\n    \n    # create a list of distances to the new point\n    distances = []\n    for coord in coords:\n        distances.append(distance(coord))\n    \n    # update the distances of the points on the left\n    # and right of (0,0)\n    for i in range(1, n+1):\n        # points on the left of (0,0)\n        if coords[i-1][0] < coords[i][0] < 0:\n            distances[i] = min(distances[i], abs(coords[i][0]) + distances[i-1])\n        # points on the right of (0,0)\n        elif coords[i-1][0] > coords[i][0] > 0:\n            distances[i] = min(distances[i], abs(coords[i][0]) + distances[i-1])\n    \n    # update the distances of the points below and above (0,0)\n    for i in range(1, n+1):\n        # points below (0,0)\n        if coords[i-1][1] < coords[i][1] < 0:\n            distances[i] = min(distances[i], abs(coords[i][1]) + distances[i-1])\n        # points above (0,0)\n        elif coords[i-1][1] > coords[i][1] > 0:\n            distances[i] = min(distances[i], abs(coords[i][1]) + distances[i-1])\n    \n    # update the distance of (0,0)\n    distances[0] = 0\n    \n    # update the maximum distance\n    distance_max = 0\n    for i in range(n+1):\n        distance_max = max(distance_max, distances[i])\n    \n    # return the maximum distance\n    return distance_max\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: Output to stdout\n    \"\"\"\n    lines = [line.split() for line in stdin.split('\\n') if line]\n    n, m = int(lines[0][0]), int(lines[0][1])\n    segments = []\n    for line in lines[1:n + 1]:\n        segments.append([int(i) for i in line])\n    points = []\n    for line in lines[n + 1:]:\n        points.append([int(i) for i in line])\n    region = set()\n    for a, b, c in segments:\n        ab = set([(a, b), (b, a)])\n        for x, y in points:\n            if (x, y) in ab:\n                region.add((a, b, c, x, y))\n                break\n    minx, miny, maxx, maxy = float('inf'), float('inf'), float('-inf'), float('-inf')\n    for x, y in points:\n        minx = min(minx, x)\n        miny = min(miny, y)\n        maxx = max(maxx, x)\n        maxy = max(maxy, y)\n    ans = float('inf')\n    for a, b, c, x, y in region:\n        x1, x2, y1, y2 = max(minx, x), min(maxx, x), max(miny, y), min(maxy, y)\n        ans = min(ans, (x2 - x1) * (y2 - y1) - (x2 - x1) * (y1 - y2) - (y2 - y1) * (x1 - x2) + 2 * c * (x2 - x1) * (y2 - y1) - 2 * c * (x1 - x2) * (y2 - y1) + c * (x1 - x2) * (y1 - y2))\n    if ans == float('inf'):\n        ans = 'INF'\n    return str(int(ans))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4\")\n    13\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split('\\n')[:2]]\n    lines = stdin.split('\\n')[2:]\n    lines = [l.split(' ') for l in lines]\n\n    reachable = 0\n    for l in lines:\n        start = [int(i) for i in l[:2]]\n        end = [int(i) for i in l[2:]]\n        # reachable = max(reachable, max(start[0]**2 + start[1]**2, end[0]**2 + end[1]**2))\n        reachable = max(reachable, max(start[0], end[0])**2 + max(start[1], end[1])**2)\n    \n    return str(reachable)\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check(x, y):\n        if x < 0:\n            return (x, y)\n        elif y < 0:\n            return (x, y)\n        elif x >= 1000:\n            return (x, y)\n        elif y >= 1000:\n            return (x, y)\n        return None\n    \n    n, m = map(int, stdin.split('\\n')[:2])\n    \n    result = 0\n    \n    for i in range(n):\n        line = stdin.split('\\n')[i + 2].split('\\n')[0].split()\n        a, b, c = map(int, line)\n        \n        x = check(b, c)\n        if x is not None:\n            result += max(x) - min(x)\n            \n    for i in range(m):\n        line = stdin.split('\\n')[i + 2].split('\\n')[0].split()\n        d, e, f = map(int, line)\n        \n        x = check(d, e)\n        if x is not None:\n            result += max(x) - min(x)\n            \n    if result == 0:\n        return 'INF'\n    else:\n        return str(result)\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(\" \")]\n    # calculate the distance from (0,0)\n    def dist(p1, p2):\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    # get the line\n    line = [tuple(map(int, i.split(\" \"))) for i in stdin.split(\":\\n\")[1:]]\n    # calculate the area\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            if dist((0, 0), line[j]) >= dist(line[(i + 1) % n], line[j]):\n                c += dist(line[(i + 1) % n], line[j]) * dist(line[(i + 1) % n], line[(j + 1) % m])\n            else:\n                c += dist(line[(i + 1) % n], line[(j + 1) % m]) * dist(line[(i + 1) % n], line[j])\n    return str(int(c)) if c!= float(\"inf\") else \"INF\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of\n    https://codeforces.com/problemset/problem/1360/A\n    \"\"\"\n    # Get data\n    line = stdin.splitlines()\n    n, m = list(map(int, line[0].split()))\n    # Map to dict\n    lines = {}\n    for i in range(1, m + 1):\n        x, y, z = list(map(int, line[i].split()))\n        lines[(x, y)] = z\n    # Processing\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            res = 0\n            # Get segment\n            for k in range(n):\n                if k == i:\n                    continue\n                for l in range(m):\n                    if l == j:\n                        continue\n                    if lines.get((k, l)) is None:\n                        continue\n                    res += (k - i) * (l - j)\n            ans.append(res)\n    # Results\n    if ans[0] == 0:\n        print(\"INF\")\n    else:\n        print(sum(ans))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, M = stdin.split('\\n')[:2]\n    N, M = int(N), int(M)\n    points = []\n    for i in range(N):\n        points.append(tuple(map(int, stdin.split('\\n')[2+i].split())))\n    lines = []\n    for i in range(M):\n        lines.append(tuple(map(int, stdin.split('\\n')[3+M+i].split())))\n    print(points, lines)\n    return 'INF'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x % s == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if s % 2 == 1 or t < s or x < t:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = [int(i) for i in stdin.split(' ')]\n    bark = (t + s - 1) // s\n    if bark > x:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split(' '))\n    #if x in range(t, t + s):\n    if x >= t and x < t + s:\n        return 'YES'\n    return 'NO'\n    \n    \n    \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x > t:\n        return \"YES\"\n    elif x - t == s:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, s, x = stdin.split(\" \")\n    s, x = int(s), int(x)\n    return 'YES' if x % s == 0 else 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = list(map(int, stdin.split()))\n    if x % s == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the moment the pineapple barks.\n\n    Args:\n        stdin (str): the input\n\n    Returns:\n        str: YES if the pineapple barks or NO otherwise\n    \"\"\"\n    t, s, x = map(int, stdin.split())\n    return \"YES\" if x % s == t or x % s == t - 1 else \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = [int(n) for n in stdin.split(' ')]\n    if (s == 1):\n        return 'YES' if (x % t == 0) else 'NO'\n    if (x % t == 0):\n        return 'YES'\n    if (x % t == s - 1) or (x % t == s - 2):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    return 'YES' if x % s == t else 'NO'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append([l, r])\n\n    segments.sort()\n    segments.sort(key=lambda x: x[1])\n\n    i = j = 0\n    while i < n and j < n:\n        if segments[i][0] > segments[j][0] or segments[i][1] > segments[j][1]:\n            j += 1\n        elif segments[i][0] <= segments[j][0] and segments[i][1] >= segments[j][1]:\n            return str(i + 1) + \" \" + str(j + 1)\n        else:\n            i += 1\n    return \"0 0\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = [-1, -1]\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        if res[0] == -1:\n            if l <= res[1] <= r:\n                res[0] = i\n            if l >= res[0] and res[1] >= r:\n                res[0] = i\n        else:\n            if l <= res[0] <= r:\n                res[1] = i\n            if l >= res[0] and res[1] >= r:\n                res[1] = i\n    if res[0]!= -1:\n        print(res[0], res[1])\n    else:\n        print(res[0], res[1])\n    return ''\n\n\n\nsolution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n')\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # pass\n\n    # for line in stdin:\n    #     n = int(line)\n    #     segments = []\n    #     for i in range(n):\n    #         segments.append([int(x) for x in stdin[i].split()])\n    #     segments.sort(key=lambda x: x[0])\n    #     i = 0\n    #     j = 1\n    #     while i < n and j < n:\n    #         if segments[i][1] < segments[j][0]:\n    #             j += 1\n    #         elif segments[i][1] > segments[j][0]:\n    #             i += 1\n    #         else:\n    #             print(i+1, j+1)\n    #             break\n    #     else:\n    #         print(-1, -1)\n\n    # t = int(stdin[0])\n    # segments = []\n    # for i in range(1, t+1):\n    #     segments.append([int(x) for x in stdin[i].split()])\n    # segments.sort(key=lambda x: x[0])\n\n    # for i in range(t):\n    #     low = 0\n    #     high = t-1\n    #     while low < high:\n    #         mid = (low+high)//2\n    #         if segments[mid][1] < segments[i][0]:\n    #             low = mid+1\n    #         elif segments[mid][1] > segments[i][0]:\n    #             high = mid\n    #         else:\n    #             print(i+1, mid+1)\n    #             break\n    #     else:\n    #         print(-1, -1)\n\n    return \"Hello, World!\""
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def search(a, l, r):\n        if r < l:\n            return -1, -1\n        m = (l + r) // 2\n        if a[m] == m:\n            return m, m\n        if a[m] < m:\n            return search(a, m + 1, r)\n        return search(a, l, m)\n\n    n = int(stdin.readline())\n    a = [0] * (n + 1)\n    for i in range(n):\n        a[int(stdin.readline())] = i + 1\n    ans = search(a, 0, n)\n    print(*ans)\n\n\n\ndef"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution:\n    # \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0430\u0440\u044b \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438\n    # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0443\u0442 \u0432 \u0434\u0440\u0443\u0433\u0438\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u044b\n    # \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u044b \u043d\u0435\u0442, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0435\u0442\u0443\n    '''\n    segments = []\n    for i in range(int(stdin)):\n        segments.append(list(map(int, stdin.split(\" \")[i].split(\"-\"))))\n    #print(segments)\n    \n    segments.sort()\n    #print(segments)\n    \n    ans = []\n    # \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0438\u0441\u043a \u043f\u0430\u0440 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438\n    for i in range(len(segments)):\n        #print(\"i = \", i)\n        for j in range(i+1, len(segments)):\n            #print(\"j = \", j)\n            if segments[i][0] > segments[j][1]:\n                #print(\"\u043f\u0430\u0440\u044b \u0435\u0441\u0442\u044c: \", segments[i], segments[j])\n                ans.append((i,j))\n            \n    ans.sort()\n    #print(\"ans = \", ans)\n    \n    # \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043f\u0430\u0440, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0435\u0442\u0443\n    if not ans:\n        return \"-1 -1\"\n    \n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0443\u0442 \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u044b\n    return str(ans[0][0]) + \" \" + str(ans[0][1])"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Decode the DNA and return the decoded genome as a string.\n    '''\n    return stdin\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '??' * len(stdin.split('??')[0])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the genome of a mammoth that Berland has found as a string.\"\"\"\n    genome_length = int(stdin[0])\n    genome_sequence = stdin[1]\n\n    # At this point, there are n nucleotides of four types in the genome.\n    # Our goal is to decode it so that the number of nucleotides of each type is equal.\n    # We can go through all possible decodings of n nucleotides: n == 0 (nothing to decode),\n    # n == 1 (one of four types of nucleotides), n == 2 (two of four types of nucleotides),\n    # n == 3 (three of four types of nucleotides) and n == 4 (four of four types of nucleotides).\n    # For each combination of the four types, the decoded sequence is unique.\n    # The only exception is when there are three or more types of nucleotides.\n    # In this case, the decoded sequence is not unique, so we need to remove it.\n\n    # The decoded sequence is not unique for n == 1, n == 2 and n == 3.\n    # In the first case, there can be only one possible combination of four nucleotides.\n    # In the second case, there can be two possible combinations of four nucleotides.\n    # In the third case, there are three possible combinations of four nucleotides.\n\n    # For all other cases, there is a unique decoded sequence.\n    # A unique decoded sequence is one that is not equal to any other decoded sequence.\n\n    # The decoded sequence is not unique for n == 0 and n == 4.\n    # There is only one possible combination of four nucleotides.\n\n    # The decoded sequence is not unique for n == 1, n == 3 and n == 4.\n    # There is one possible combination of four nucleotides.\n    if genome_length == 0 or genome_length == 4:\n        return \"\"\n\n    if genome_length == 1 or genome_length == 3 or genome_length == 4:\n        return genome_sequence\n\n    # At this point, the decoded sequence is unique for n == 2.\n    # There are two possible combinations of four nucleotides.\n    # The decoded sequence is equal to the following one:\n    # \"ACGTCT\"?\n    #\n    # The decoded sequence is unique for n == 3.\n    # There are three possible combinations of four nucleotides.\n    # The decoded sequence is equal to the following one:\n    # \"ACGTCTGC\"\n    # \"ACGTCTTA\"\n    # \"ACGTCTTC\"\n    #\n    # The decoded sequence is not unique for n == 4.\n    # There is one possible combination of four nucleotides.\n    if genome_length == 2:\n        return genome_sequence + \"?\"\n\n    if genome_length == 3:\n        return genome_sequence + \"GC\" + \"TA\" + \"TC\" + \"?\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u044b\u0445 \u043a \u043f\u043e\u043b\u0443\u043d\u043e\u0447\u043d\u043e\u043c\u0443 \u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u043e\u0440\u044f\u0436\u0435\u043d\u0438\u044e \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0441\u0442\u0440\u0430\u043d\u044b, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438. \u041e\u043d\u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0432\u0441\u0435 \u043b\u0438 \u0441\u043a\u043e\u0431\u043a\u0438 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0432\u0435\u0440\u043d\u043e. \u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0441\u0435 \u0441\u043a\u043e\u0431\u043a\u0438 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043a\u043e\u0431\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u043b\u0438 \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0432\u0435\u0440\u043d\u043e, \u043d\u043e \u0441\u043a\u043e\u0431\u043a\u0438 \u0442\u0430\u043c \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043d\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430:\n\n12\n\n(abcd)e(fghi)jk\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430:\n\n(abcd)e(fghi)jk\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430:\n\n6\n\n(((())))((((((())))))\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430:\n\n(()())()\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430:\n\n4\n\n()\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430:\n\n===\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430:\n\n8\n\n(((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430:\n\n
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    b = 'ABC'\n    for i in range(0, len(s), n):\n        for j in range(n):\n            if s[i + j] == '?':\n                s = s[:i + j] + b[j] + s[i + j + 1:]\n                break\n    print(s)"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AG?C??CT\")\n    'AGACGTCT'\n    >>> solution(\"????G? \")\n    '==='\n    >>> solution(\"AA?? \")\n    '==='\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    x_count = 0\n    o_count = 0\n    for row in board:\n        for cell in row:\n            if cell == 'x':\n                x_count += 1\n            elif cell == 'o':\n                o_count += 1\n    if x_count - o_count == 1 or o_count - x_count == 1:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    board = list(map(list, stdin.split(\"\\n\")))\n    solutions = []\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == \".\":\n                solutions.append(make_single_turn(board, (i, j)))\n    return \"YES\" if \"XXX\" in solutions else \"NO\"\n\n\ndef"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    board = [[c for c in row] for row in stdin.split('\\n')]\n    def has_player_won(board: List[List[str]], player: str) -> bool:\n        def can_be_won(board: List[List[str]], row_idx: int, col_idx: int) -> bool:\n            if row_idx >= len(board):\n                return False\n            if board[row_idx][col_idx]!= player:\n                return False\n            if col_idx >= len(board):\n                return False\n            return True\n\n        for i in range(len(board)):\n            if can_be_won(board, i, 0):\n                return True\n            if can_be_won(board, i, 1):\n                return True\n            if can_be_won(board, i, 2):\n                return True\n            if can_be_won(board, i, 3):\n                return True\n\n        for col_idx in range(len(board[0])):\n            if can_be_won(board, 0, col_idx):\n                return True\n            if can_be_won(board, 1, col_idx):\n                return True\n            if can_be_won(board, 2, col_idx):\n                return True\n            if can_be_won(board, 3, col_idx):\n                return True\n        return False\n\n    return 'NO' if has_player_won(board, 'x') and has_player_won(board, 'o') else 'YES'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    # print(rows)\n    turns_x = 0\n    turns_o = 0\n    for i in range(len(rows)):\n        turns_x += rows[i].count('x')\n        turns_o += rows[i].count('o')\n    if turns_x < 3 or turns_o < 3:\n        return \"NO\"\n    x_ways = [[[i, i, i, i] for i in range(len(rows[0]))]]\n    o_ways = [[[i, i, i, i] for i in range(len(rows[0]))]]\n    for i in range(len(rows)):\n        row = rows[i]\n        new_x_ways = []\n        new_o_ways = []\n        for way in x_ways:\n            if 'x' in row:\n                new_way = way[:]\n                new_way[i] = [i for i in range(len(rows[0])) if rows[i].count('x') == 0][0]\n                new_x_ways.append(new_way)\n        x_ways = new_x_ways\n        for way in o_ways:\n            if 'o' in row:\n                new_way = way[:]\n                new_way[i] = [i for i in range(len(rows[0])) if rows[i].count('o') == 0][0]\n                new_o_ways.append(new_way)\n        o_ways = new_o_ways\n    # print(x_ways)\n    # print(o_ways)\n    for i in range(len(rows[0])):\n        x_ways.append([i] + [way[i] for way in x_ways])\n        o_ways.append([i] + [way[i] for way in o_ways])\n    # print(x_ways)\n    # print(o_ways)\n    x_lines = []\n    o_lines = []\n    for i in range(len(rows[0])):\n        for way in x_ways:\n            if way[i] == way[i+1] == way[i+2] == way[i+3]:\n                x_lines.append(way[i])\n    for i in range(len(rows[0])):\n        for way in o_ways:\n            if way[i] == way[i+1] == way[i+2] == way[i+3]:\n                o_lines.append(way[i])\n    # print(x_lines)\n    # print(o_lines)\n    for way in x_ways:\n        for i in range(len(rows[0])-4):\n            if way[i] in x_lines and way[i+1] in x_lines and way[i+2] in x_lines and way[i+3] in x_lines:\n                return \"YES\"\n    for way in o_ways:\n        for i in range(len(rows[0])-4):\n            if way[i] in o_lines and way[i+1] in o_lines and way[i+2] in o_lines and way[i+3] in o_lines:\n                return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # ---------------\n    # \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n    # ---------------\n    data = stdin.split('\\n')\n    data_x = data[0]\n    data_y = data[1]\n\n    data_y_list = data_y.split('\\n')\n    data_x_list = data_x.split('\\n')\n\n    data_y_list_empty = []\n    for i in data_y_list:\n        if i.count('.') > 0:\n            data_y_list_empty.append(i)\n\n    data_x_list_empty = []\n    for i in data_x_list:\n        if i.count('.') > 0:\n            data_x_list_empty.append(i)\n\n    # ---------------\n    # \u043e\u0431\u0445\u043e\u0434 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432\n    # ---------------\n\n    # \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n    for i in data_x_list_empty:\n        if i[0] == 'x':\n            x = 0\n            for j in range(len(i)):\n                if i[j] == '.':\n                    x += 1\n                else:\n                    break\n\n            for k in range(x + 1, 4):\n                if i[k]!= 'o' and i[k]!= 'x':\n                    return 'NO'\n\n    # \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n    for i in data_y_list_empty:\n        if i[0] == 'o':\n            y = 0\n            for j in range(len(i)):\n                if i[j] == '.':\n                    y += 1\n                else:\n                    break\n\n            for k in range(y + 1, 4):\n                if i[k]!= 'o' and i[k]!= 'x':\n                    return 'NO'\n\n    # ---------------\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n    # ---------------\n\n    # \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n    for i in data_x_list_empty:\n        if i[0] == 'x':\n            for j in range(len(i) - 1):\n                if i[j] == '.' and i[j + 1]!= '.' and i[j + 1]!= 'x':\n                    return 'NO'\n\n    # \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n    for i in data_y_list_empty:\n        if i[0] == 'o':\n            for j in range(len(i) - 1):\n                if i[j] == '.' and i[j + 1]!= '.' and i[j + 1]!= 'o':\n                    return 'NO'\n\n    # ---------------\n    # \u0432\u044b\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445\n    # ---------------\n\n    return 'YES'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check_row(arr):\n        for i in range(3):\n            if arr[i][0] == arr[i][1] == arr[i][2] == 'x':\n                return 'YES'\n            elif arr[i][0] == arr[i][1] == arr[i][2] == 'o':\n                return 'YES'\n        return 'NO'\n\n    def check_column(arr):\n        for i in range(3):\n            if arr[0][i] == arr[1][i] == arr[2][i] == 'x':\n                return 'YES'\n            elif arr[0][i] == arr[1][i] == arr[2][i] == 'o':\n                return 'YES'\n        return 'NO'\n\n    def check_diagonal(arr):\n        if arr[0][0] == arr[1][1] == arr[2][2] == 'x':\n            return 'YES'\n        elif arr[0][0] == arr[1][1] == arr[2][2] == 'o':\n            return 'YES'\n        if arr[0][2] == arr[1][1] == arr[2][0] == 'x':\n            return 'YES'\n        elif arr[0][2] == arr[1][1] == arr[2][0] == 'o':\n            return 'YES'\n        return 'NO'\n\n    def check_combination(arr):\n        if check_row(arr) == 'YES' or check_column(arr) == 'YES' or check_diagonal(arr) == 'YES':\n            return 'YES'\n        else:\n            return 'NO'\n\n    def check_board(arr):\n        for i in range(3):\n            for j in range(3):\n                if arr[i][j] == '.':\n                    return 'YES'\n        return 'NO'\n\n    arr = []\n    for i in range(4):\n        arr.append(list(stdin[3*i:3*i+3]))\n    if check_board(arr) == 'YES':\n        return 'YES'\n    return check_combination(arr)\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    stdin = stdin.split('\\n')\n    x_list, o_list = [], []\n    for i in stdin:\n        i = list(i)\n        x_list.append(i.count('x'))\n        o_list.append(i.count('o'))\n    x_list.sort()\n    o_list.sort()\n    if x_list[1] == o_list[1] and x_list[0] + 1 == x_list[1]:\n        result = 'YES'\n    else:\n        result = 'NO'\n    return result"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [[cell for cell in line] for line in stdin.splitlines()]\n    m = len(matrix)\n    n = len(matrix[0])\n\n    def print_matrix(matrix):\n        for row in matrix:\n            print(''.join(row))\n\n    # print_matrix(matrix)\n\n    def check_rows(matrix):\n        for row in matrix:\n            if row.count('x') == 2 and row.count('o') == 0:\n                return True\n        return False\n\n    def check_cols(matrix):\n        for i in range(n):\n            col = []\n            for j in range(m):\n                col.append(matrix[j][i])\n            if col.count('x') == 2 and col.count('o') == 0:\n                return True\n        return False\n\n    def check_diag(matrix):\n        if n == m:\n            diag = []\n            for i in range(m):\n                diag.append(matrix[i][i])\n            if diag.count('x') == 2 and diag.count('o') == 0:\n                return True\n        return False\n\n    def check_reverse_diag(matrix):\n        if n == m:\n            diag = []\n            for i in range(m):\n                diag.append(matrix[i][n-1-i])\n            if diag.count('x') == 2 and diag.count('o') == 0:\n                return True\n        return False\n\n    return 'YES' if check_rows(matrix) or check_cols(matrix) or check_diag(matrix) or check_reverse_diag(matrix) else 'NO'\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split('\\n')))\n    return 'YES' if a[0] * 2 == sum(a) else 'NO'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\ndef"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def func(arr: list) -> bool:\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0435\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        if not len(arr) % 2 == 0:\n            return False\n        # \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0443\u043c\u043c \u0441\u043f\u0438\u0441\u043a\u0430\n        s1 = sum(arr)\n        # \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043f\u043e\u043b\u0430\u043c\n        a, b = arr[:len(arr) // 2], arr[len(arr) // 2:]\n        s2 = sum(a)\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043b\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u0437 \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0438\u0437 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e\n        if s1 == s2:\n            return True\n        # \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n        # \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0438\u0437 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e\n        if s2 < s1:\n            if len(b) > 1:\n                b.insert(0, b.pop(-1))\n                if func(a + b):\n                    return True\n        # \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0438\u0437 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e\n        if s2 > s1:\n            a.insert(0, a.pop(-1))\n            if func(a + b):\n                return True\n        return False\n\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split(' ')]\n    print(\"YES\" if func(arr) else \"NO\")\n\n\nsolution(\"3\\n1 3 2\\n\")\nsolution(\"5\\n1 2 3 4 5\\n\")\nsolution(\"5\\n2 2 3 4 5\\n\")\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"5\\n1 2 3 4 5\")\n    'YES'\n    >>> solution(\"5\\n2 2 3 4 5\")\n    'NO'\n    >>> solution(\"5\\n2 2 3 3 4 5\")\n    'YES'\n    >>> solution(\"5\\n2 2 2 2 2 2 2\")\n    'NO'\n    '''\n    n = int(stdin.readline())\n    a = [int(n) for n in stdin.readline().split()]\n    m = max(a)\n    i = a.index(m)\n    if a[i] % 2 == 0:\n        print('NO')\n        return\n    else:\n        print('YES')\n        return\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length, array = list(map(int, stdin.split()))\n    sorted_array = list(map(int, stdin.split()))\n    total = 0\n    if sorted_array[0] == array[0] and sorted_array[-1] == array[-1]:\n        for i in range(len(array)):\n            total += sorted_array[i]\n            if sorted_array[i]!= array[i]:\n                array[i] = sorted_array[i]\n                break\n        if sorted_array[-1]!= array[-1]:\n            array[-1] = sorted_array[-1]\n        if total % 2!= 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total_sum = 0\n    length = int(stdin.readline().strip())\n    sums = list(map(int, stdin.readline().strip().split()))\n    for i in range(length):\n        total_sum += sums[i]\n    prefix_sum = 0\n    for i in range(length):\n        prefix_sum += sums[i]\n        if prefix_sum == total_sum - prefix_sum:\n            print('YES')\n            return\n    print('NO')\n    return\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if Vasya can divide the array after moving one element. Otherwise, return NO.\"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    def is_possible_to_divide_arr(arr: List[int]) -> bool:\n        \"\"\"\n        Check if arr is possible to divide into two non-empty consecutive parts.\n        \"\"\"\n        s = sum(arr)\n        if s % 2!= 0:\n            return False\n        s = s // 2\n        tmp = arr.copy()\n        tmp.sort()\n        j = 0\n        for i in range(len(tmp)):\n            if tmp[i] == arr[i]:\n                j = i\n                break\n        s1 = sum(tmp[:j])\n        s2 = sum(tmp[j:])\n        return s1 == s2\n    return \"YES\" if is_possible_to_divide_arr(arr) else \"NO\"\n\n\"\"\"\n\n\nimport collections\nimport sys\n\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    x = []\n    s = 0\n    for i in a:\n        s += i\n        x.append(s)\n    for i in range(n):\n        if x[i] == x[-1]:\n            print(\"YES\")\n            break\n        else:\n            if x[i] < x[i+1]:\n                if x[i+1] - x[i] == 1:\n                    print(\"YES\")\n                    break\n            elif x[i] > x[i+1]:\n                if x[i] - x[i+1] == 1:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n                break\n\n\n    return \"\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = n - 1\n    s = sum(a)\n    while m > 0:\n        if a[m] > s - a[m]:\n            a[m], a[m - 1] = a[m - 1], a[m]\n            s -= a[m]\n            m -= 1\n        else:\n            m -= 1\n    print('YES' if s == 0 else 'NO')\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns \"Yes\" if it is possible to replace the zeros in the input sequence\n    with elements in the b sequence so that the resulting sequence is not\n    increasing, and \"No\" otherwise.\n    '''\n    # Get the numbers in the sequence and their respective counts\n    data = stdin.split('\\n')\n    n, k = list(map(int, data[0].split()))\n    a = list(map(int, data[1].split()))\n    b = list(map(int, data[2].split()))\n    counts = dict()\n    for num in a:\n        if num in counts.keys():\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    for num in b:\n        if num in counts.keys():\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    # Iterate through the list, keeping a copy\n    a_copy = a[:]\n    for i in range(0, n):\n        if a_copy[i] == 0:\n            a_copy[i] = b[0]\n            b.remove(b[0])\n        # If the sequence is no longer increasing, return \"No\"\n        if a_copy[i] > a_copy[i+1]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 1\\n2 3 0 8 9 10\\n5')\n    Yes\n    >>> solution('4 2\\n11 0 0 14\\n5 4')\n    Yes\n    >>> solution('6 1\\n2 3 0 8 9 10\\n5')\n    No\n    >>> solution('7 7\\n0 0 0 0 0 0 0\\n1 2 3 4 5 6 7')\n    Yes\n    \"\"\"\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    \n    for i in range(n):\n        if a[i] == 0:\n            a[i] = b[k - i - 1]\n            \n    return \"Yes\" if sorted(a) == a else \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split()[:n])\n    b = map(int, stdin.split()[n:])\n    a = [0] + a + [0]\n    b = [0] + b\n    for i in range(1, n + 2):\n        if a[i] == 0:\n            for j in range(1, k + 2):\n                if b[j]!= a[i - 1] and b[j]!= a[i + 1]:\n                    a[i] = b[j]\n                    break\n    return \"Yes\" if max(a[1:n + 1]) - min(a[1:n + 1]) < 0 else \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the second exercise.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    if len(a) < k:\n        return \"Yes\"\n    prev = a[0]\n    for i in range(1, len(a)):\n        if a[i] - prev > 1:\n            return \"No\"\n        elif a[i]!= prev:\n            prev = a[i]\n    return \"Yes\"\n\"\"\"\nThis solution works. Test cases:\n4 2\n11 0 0 14\n5 4\nNo\n6 1\n2 3 0 8 9 10\n5\nYes\n4 1\n8 94 0 4\n89\nYes\n7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\nYes\n\"\"\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    c = set()\n    for i in b:\n        c.add(i)\n    x = 0\n    l = []\n    for i in range(len(a)):\n        if a[i]!= 0:\n            l.append(a[i])\n            x += 1\n        else:\n            x += 1\n            if x in c:\n                l.append(x)\n                c.remove(x)\n            else:\n                l.append(0)\n                c.add(x)\n    for i in range(len(l)):\n        if l[i]!= i + 1:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_len, b_len = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()[0]]\n    b = [int(i) for i in stdin.split()[1]]\n    c = [int(i) for i in stdin.split()[2]]\n    a_len = len(a)\n    b_len = len(b)\n    a_b_intersection = set(a) & set(b)\n    if len(a_b_intersection) == 0:\n        if len(a) == len(b):\n            return 'Yes'\n        else:\n            return 'No'\n    if set(b).issubset(set(a)):\n        return 'No'\n    lost_elements = []\n    for i in a:\n        if i in a_b_intersection:\n            continue\n        else:\n            lost_elements.append(i)\n    if len(lost_elements) > b_len:\n        return 'No'\n    c = set(c)\n    c = c - set(lost_elements)\n    if len(c) < b_len:\n        return 'No'\n    for i in c:\n        if a[a.index(i)] == i:\n            return 'No'\n    return 'Yes'\n\n\ndef"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return 'Yes' if n == len(a) and max(a) < max(b) else 'No'"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = 0\n    for i in range(1, len(a)):\n        if a[i] == 0:\n            k += 1\n            b -= 1\n        if b < 0:\n            return \"No\"\n    if k > len(a) - 1:\n        return \"No\"\n    if a[k] <= b:\n        return \"No\"\n    return \"Yes\"\nprint(solution(input()))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 11 0 0 14\n   ... 5 4''')\n    'Yes'\n    >>> solution('''6 1\n   ... 2 3 0 8 9 10\n   ... 5''')\n    'No'\n    >>> solution('''7 7\n   ... 0 0 0 0 0 0 0\n   ... 1 2 3 4 5 6 7\n   ... ''')\n    'Yes'\n    \"\"\"\n    n, k = tuple(map(int, stdin.split()))\n    lost = tuple(map(int, stdin.split()[1:]))\n    found = tuple(map(int, stdin.split()[2:]))\n    if sum(lost)!= k:\n        return 'No'\n    seq = [0] * n\n    for i, l in enumerate(lost):\n        if l == 0:\n            seq[i] = found.pop()\n    found.extend(seq)\n    return 'Yes' if sorted(found) == list(range(1, n + 1)) else 'No'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nx, y, z = [int(elem) for elem in stdin.split()]\na, b, c = [int(elem) for elem in stdin.split()]\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, a, b, c = [int(c) for c in stdin.split(\"\\n\")[0].split()]\n    grapes_to_eat = 0\n    if x == y and y == z:\n        grapes_to_eat = x\n    elif a == b and b == c:\n        grapes_to_eat = a\n    elif a == b and b < c:\n        grapes_to_eat = x + a\n    elif a < b and a < c:\n        grapes_to_eat = x + a + b\n    elif a < b and b < c:\n        grapes_to_eat = x + a + b\n    elif a < c and b < c:\n        grapes_to_eat = x + a + b + c\n    elif a < c and b == c:\n        grapes_to_eat = x + a + b + c\n    elif a < c and b < c and x < b:\n        grapes_to_eat = x + a + b + c\n    elif a < b and c < b:\n        grapes_to_eat = x + a + c + b\n    elif a < c and b < c and x < a:\n        grapes_to_eat = x + a + b + c\n    elif a < b and b < c and x < a:\n        grapes_to_eat = x + a + b + c\n    elif b < a and a < c and x < b:\n        grapes_to_eat = x + b + a + c\n    elif b < a and a < c and x < b:\n        grapes_to_eat = x + b + a + c\n    elif b < a and c < a and x < b:\n        grapes_to_eat = x + b + c + a\n    elif b < a and c < a and x < c:\n        grapes_to_eat = x + b + c + a\n    elif a < b and c < b and x < c:\n        grapes_to_eat = x + a + c + b\n    elif a < c and b < c and x < c:\n        grapes_to_eat = x + a + b + c\n    elif a < c and b < c and x < a:\n        grapes_to_eat = x + a + b + c\n    elif a < c and b < c and x < b:\n        grapes_to_eat = x + a + b + c\n    return \"YES\" if grapes_to_eat >= (x + y + z) else \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    g = min(x // a, y // b, z // c)\n    x -= g * a\n    y -= g * b\n    z -= g * c\n    if min(x, y, z) > 0:\n        return 'NO'\n    return 'YES'\n    \n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n\n    # Let's try to solve the problem using all 3 variables.\n    if x + y < a:\n        return \"NO\"\n\n    def calc(x, y, z):\n        # calculate the required number of grapes.\n        return x + 2 * y + 3 * z - 15\n\n    def calc_worst(x, y, z):\n        return min(x, a - x, y, b - y, c - z, c - (c - z))\n\n    def calc_possible(x, y, z):\n        return max(0, x + y - a, y + z - b, x + z - c)\n\n    # Let's try to solve the problem using only 2 variables.\n    #   a\n    # a + 2b + 3c = 15\n    # x + y = a\n    # y + z = b + c - a\n    # x + 2y + 3z = 15\n    # x = a - x + 2y + 3z - 15\n    # x = a - 2y + 3z - 15\n\n    #   b\n    # a + 2b + 3c = 15\n    # x + 2y = a\n    # y + z = b + c - a\n    # z = b + c - a - y\n    # x + 2z = 15\n    # x = a - x - 2z + 15\n\n    #   c\n    # a + 2b + 3c = 15\n    # x + 3y = a\n    # z + 2y = b + c - a\n    # z = b + c - a - y\n    # y = a - x - 3z + 15\n    # y = a - x + 15 - 3z\n\n    x = (a - x - 2 * z + 15) / 3\n    y = (a - x - 3 * z + 15) / 2\n    z = (a - x + 15 - 3 * y) / 2\n\n    # if the solution is still not unique, return \"NO\".\n    if x < 1 or y < 1 or z < 1:\n        return \"NO\"\n\n    return \"YES\" if calc(x, y, z) == 0 and calc_worst(x, y, z) >= calc_possible(x, y, z) else \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c > min(a, b, c) * 4:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'YES' if a * b * c == sum(map(lambda x: x ** 2, [a, b, c])) else 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split(' ')]\n    a, b, c = [int(i) for i in stdin.split(' ')]\n\n    if x+y+z > (2*a + 2*b + 2*c):\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n\n\n'''"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split('\\n')[0].split()]\n    a, b, c = [int(i) for i in stdin.split('\\n')[1].split()]\n    return 'YES' if max(a, b, c) >= x + y + z and min(a, b, c) >= x and min(b, c) >= y and min(a, c) >= z and x + y + z <= a + b + c else 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nfrom math import floor\nimport os\n\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split('\\n')[0].split())\n    a, b, c = map(int, stdin.split('\\n')[1].split())\n    if a + b + c <= x + y + z:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_lights(str_list: List[str]) -> List[List[int]]:\n        return [[int(char) for char in line.split(\" \")] for line in str_list]\n\n    def get_lights_as_dict(lights: List[List[int]]) -> Dict[int, List[List[int]]]:\n        lights_dict = dict()\n        for i, line in enumerate(lights):\n            lights_dict[i] = line\n        return lights_dict\n\n    def get_intersections(lights: List[List[int]]) -> List[List[int]]:\n        intersections = []\n        for line in lights:\n            for i, light in enumerate(line):\n                if light == 1:\n                    intersections.append([i] * 3)\n        return intersections\n\n    def get_intersection_combinations(\n        lights_dict: Dict[int, List[List[int]]],\n        lights: List[List[int]],\n        intersections: List[List[int]],\n    ) -> List[List[List[int]]]:\n        intersections_combinations = []\n        for intersection in intersections:\n            for key, value in lights_dict.items():\n                combination = [lights[key][i] for i in intersection]\n                intersections_combinations.append(combination)\n        return intersections_combinations\n\n    def get_green_crossing_combinations(\n        lights_dict: Dict[int, List[List[int]]],\n        lights: List[List[int]],\n        intersections_combinations: List[List[List[int]]],\n    ) -> List[List[List[int]]]:\n        green_crossing_combinations = []\n        for combination in intersections_combinations:\n            green_crossing_combinations.append(\n                [lights[key][i] for i in combination for key in lights_dict.keys()]\n            )\n        return green_crossing_combinations\n\n    def print_green_crossing_combinations(\n        green_crossing_combinations: List[List[List[int]]]\n    ) -> None:\n        for combination in green_crossing_combinations:\n            for light in combination:\n                print(\"1\" if light else \"0\", end=\"\")\n            print()\n\n    def get_non_green_crossing_combinations(\n        lights_dict: Dict[int, List[List[int]]],\n        lights: List[List[int]],\n        intersections_combinations: List[List[List[int]]],\n    ) -> List[List[List[int]]]:\n        non_green_crossing_combinations = []\n        for combination in intersections_combinations:\n            for key, value in lights_dict.items():\n                if key not in lights_dict.keys():\n                    combination_without_key = list(combination)\n                    combination_without_key.pop(key)\n                    non_green_crossing_combinations.append(combination_without_key)\n        return non_green_crossing_combinations\n\n    def print_non_green_crossing_combinations(\n        non_green_crossing_combinations: List[List[List[int]]]\n    ) -> None:\n        for combination in non_green_crossing_combinations:\n            for light in combination:\n                print(\"1\" if light else \"0\", end=\"\")\n            print()\n\n    lights = get_lights(stdin.split(\"\\n\"))\n    lights_dict = get_lights_as_dict(lights)\n    intersections = get_intersections(lights)\n    intersections_combinations = get_intersection_combinations(\n        lights_dict, lights, intersections\n    )\n    green_crossing_combinations = get_green_crossing_combinations(\n        lights_dict, lights, intersections_combinations\n    )\n    print_green_crossing_combinations(green_crossing_combinations)\n    non_green_crossing_combinations = get_non_green_crossing_combinations(\n        lights_dict, lights, intersections_combinations\n    )\n    print_non_green_crossing_combinations(non_green_crossing_combinations)\n\n    return \"YES\" if green_crossing_combinations else \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write your code here\n    '''\n    print(\"YES\" if all([0 in [x for x in stdin.split()[2:] if x == '0']]) and all([0 in [x for x in stdin.split()[2:] if x == '1']]) else \"NO\")\n    return \"\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if... else \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    part_1_l = stdin.split('\\n')[0]\n    part_2_l = stdin.split('\\n')[1]\n    part_3_l = stdin.split('\\n')[2]\n    part_4_l = stdin.split('\\n')[3]\n\n    part_1_s = stdin.split('\\n')[4]\n    part_2_s = stdin.split('\\n')[5]\n    part_3_s = stdin.split('\\n')[6]\n    part_4_s = stdin.split('\\n')[7]\n\n    part_1_r = stdin.split('\\n')[8]\n    part_2_r = stdin.split('\\n')[9]\n    part_3_r = stdin.split('\\n')[10]\n    part_4_r = stdin.split('\\n')[11]\n\n    part_1_p = stdin.split('\\n')[12]\n    part_2_p = stdin.split('\\n')[13]\n    part_3_p = stdin.split('\\n')[14]\n    part_4_p = stdin.split('\\n')[15]\n\n    # part 1\n    l_1_1 = int(part_1_l[0]) + int(part_1_l[1])\n    l_1_2 = int(part_1_l[2]) + int(part_1_l[3])\n    l_1_p = int(part_1_p[0])\n\n    s_1_1 = int(part_1_s[0]) + int(part_1_s[1])\n    s_1_2 = int(part_1_s[2]) + int(part_1_s[3])\n    s_1_p = int(part_1_p[1])\n\n    r_1_1 = int(part_1_r[0]) + int(part_1_r[1])\n    r_1_2 = int(part_1_r[2]) + int(part_1_r[3])\n    r_1_p = int(part_1_p[2])\n\n    p_1_1 = int(part_1_p[0]) + int(part_1_p[1])\n    p_1_2 = int(part_1_p[2]) + int(part_1_p[3])\n\n    if (l_1_1 == 2) or (l_1_2 == 2) or (l_1_p == 2):\n        print(\"YES\")\n    elif (s_1_1 == 2) or (s_1_2 == 2) or (s_1_p == 2):\n        print(\"YES\")\n    elif (r_1_1 == 2) or (r_1_2 == 2) or (r_1_p == 2):\n        print(\"YES\")\n    elif (p_1_1 == 2) or (p_1_2 == 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n    # part 2\n    l_2_1 = int(part_2_l[0]) + int(part_2_l[1])\n    l_2_2 = int(part_2_l[2]) + int(part_2_l[3])\n    l_2_p = int(part_2_p[0])\n\n    s_2_1 = int(part_2_s[0]) + int(part_2_s[1])\n    s_2_2 = int(part_2_s[2]) + int(part_2_s[3])\n    s_2_p = int(part_2_p[1])\n\n    r_2_1 = int(part_2_r[0]) + int(part_2_r[1])\n    r_2_2 = int(part_2_r[2]) + int(part_2_r[3])\n    r_2_p = int(part_2_p[2])\n\n    p_2_1 = int(part_2_p[0]) + int(part_2_p[1])\n    p_2_2 = int(part_2_p[2]) + int(part_2_p[3])\n\n    if (l_2_1 == 2) or (l_2_2 == 2) or (l_2_p == 2):\n        print(\"YES\")\n    elif (s_2_1 == 2) or (s_2_2 == 2) or (s_2_p == 2):\n        print(\"YES\")\n    elif (r_2_1 == 2) or (r_2_2 == 2) or (r_2_p == 2):\n        print(\"YES\")\n    elif (p_2_1 == 2) or (p_2_2 == 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n    # part 3\n    l_3_1 = int(part_3_l[0]) + int(part_3_l[1])\n    l_3_2 = int(part_3_l[2]) + int(part_3_l[3])\n    l_3_p = int(part_3_p[0])\n\n    s_3_1 = int(part_3_s[0]) + int(part_3_s[1])\n    s_3_2 = int(part_3_s[2]) + int(part_3_s[3])\n    s_3_p = int(part_3_p[1])\n\n    r_3_1 = int(part_3_r[0]) + int(part_3_r[1])\n    r_3_2 = int(part_3_r[2]) + int(part_3_r[3])\n    r_3_p = int(part_3_p[2])\n\n    p_3_1 = int(part_3_p[0]) + int(part_3_p[1])\n    p_3_2 = int(part_3_p[2]) + int(part_3_p[3])\n\n    if (l_3_1 == 2) or (l_3_2 == 2) or (l_3_p == 2):\n        print(\"YES\")\n    elif (s_3_1 == 2) or (s_3_2 == 2) or (s_3_p == 2):\n        print(\"YES\")\n    elif (r_3_1 == 2) or (r_3_2 == 2) or (r"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    phone_number = stdin\n    phone_number_list = [int(digit) for digit in phone_number]\n    phone_number_list.sort()\n\n    for digit in phone_number_list:\n        print(digit)\n    return ''\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport numpy as np\nimport unittest\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\" if len(stdin) > 9 or not stdin.isdigit() else \"YES\" if sum([int(i) for i in stdin]) == sum(map(int, stdin)) else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gen_coordinates(x: str):\n        for i in range(len(x)):\n            if x[i] == '0':\n                yield i * (-1, 1)\n            elif x[i] == '1':\n                yield i * (0, 1)\n            elif x[i] == '2':\n                yield i * (-1, 0)\n            elif x[i] == '3':\n                yield i * (0, 0)\n            elif x[i] == '4':\n                yield i * (1, 1)\n            elif x[i] == '5':\n                yield i * (1, 0)\n            elif x[i] == '6':\n                yield i * (1, -1)\n            elif x[i] == '7':\n                yield i * (0, -1)\n            elif x[i] == '8':\n                yield i * (-1, -1)\n            elif x[i] == '9':\n                yield i * (0, -1)\n        yield len(x) * (-1, -1)\n\n    # Read the first line\n    x = stdin[0]\n    # Read the second line\n    y = stdin[1]\n    # The coordinates of the digit in the phone number\n    coordinates = list(gen_coordinates(x))\n    # The coordinates of the digit in the user's number\n    user_coordinates = list(gen_coordinates(y))\n    # Check if the numbers have the same coordinates\n    return 'YES' if coordinates == user_coordinates else 'NO'\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"0\") == len(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n\n    number_of_days = int(input[0].split()[0])\n    number_of_sell_outs = int(input[0].split()[1])\n\n    products = [0] * number_of_days\n\n    for line in input[1:]:\n        products[int(line.split()[0]) - 1] += int(line.split()[1])\n\n    return str(sum(products) + number_of_sell_outs * 2)\n\n\ndef"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find max number of products, that can be sold in a store.\"\"\"\n\n    sales = list(map(int, stdin.splitlines()))\n    sales.pop(0)\n\n    products = []\n    for day in sales:\n        products.append(sum(day))\n\n    products.sort(reverse=True)\n\n    return products[0]\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function finds maximum number of sold products.\"\"\"\n    n, f = list(map(int, stdin.split()))\n    k = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    k = np.array(k, dtype=int)\n    l = np.array(l, dtype=int)\n    profit = np.sum(l * k)\n    return profit\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = stdin.split('\\n')\n    n, m = int(n), int(m)\n    k = []\n    l = []\n    for i in range(n):\n        k.append(int(stdin.split('\\n')[i].split()[0]))\n        l.append(int(stdin.split('\\n')[i].split()[1]))\n    '''\n    n, m = map(int, stdin.split())\n    k, l = [], []\n    for i in range(n):\n        k.append(int(stdin.split('\\n')[i].split()[0]))\n        l.append(int(stdin.split('\\n')[i].split()[1]))\n    k.sort()\n    l.sort()\n    sum_l, sum_k = 0, 0\n    max_sales = 0\n    for i in range(m):\n        if i % 2 == 0:\n            sum_l += l[i]\n            sum_k += k[i]\n            max_sales += sum_l * 2\n        else:\n            sum_l -= l[i]\n            sum_k += k[i]\n            max_sales += sum_k * 2\n    return max_sales\n\nprint(solution(stdin))\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\n\ndef"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_days = int(stdin.readline())\n    max_number_of_sold_products = 0\n    days_of_sell_outs = []\n    for _ in range(number_of_days):\n        number_of_products, number_of_clients = map(int, stdin.readline().split())\n        sold_products = 0\n        for day in range(number_of_days):\n            sold_products += number_of_products\n            if number_of_products > number_of_clients:\n                sold_products -= number_of_clients\n            else:\n                sold_products //= 2\n                days_of_sell_outs.append(day)\n                break\n        max_number_of_sold_products = max(max_number_of_sold_products, sold_products)\n    print(max_number_of_sold_products)\n    print(days_of_sell_outs)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum messiness attainable in the k minutes of Farmer John's n cows.\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n\n    cows = [int(x) for x in stdin.split()]\n\n    cows.sort()\n\n    counter = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if cows[i] > cows[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def reverse_cows(cows: list) -> list:\n        a = cows[::-1]\n        return a\n\n    def swap_cows(cows: list, position_a: int, position_b: int) -> list:\n        a = cows[position_a]\n        b = cows[position_b]\n        cows[position_a] = b\n        cows[position_b] = a\n        return cows\n\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    cows = [1] + list(range(2, n + 1))\n    messiness = 0\n    for i in range(k):\n        for j in range(1, n):\n            if cows[j] > cows[j + 1]:\n                cows = swap_cows(cows, j, j + 1)\n                messiness += 1\n    # reverse_cows(cows)\n    return str(messiness)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cows = list(map(int, stdin.split()))\n    \n    max_mess = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if cows[i] > cows[j]:\n                max_mess = max(max_mess, j-i)\n    \n    return max_mess\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum messiness attainable in a given number of minutes.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: Output string.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] > p[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return None\n\"\"\"\ndef"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = [int(_) for _ in stdin.split(' ')]\n    return str(min(N // K, M - L)) if (N // K) < (M - L) else '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split(' ')))\n    N = input_data[0]\n    M = input_data[1]\n    K = input_data[2]\n    L = input_data[3]\n\n    if (K >= N or M < L):\n        return str(-1)\n\n    if (K == 0):\n        return str(0)\n\n    coins = [0 for i in range(N + 1)]\n    coins[0] = 1\n    for i in range(K):\n        for j in range(1, N + 1):\n            coins[j] += coins[j - 1]\n\n    coins = list(map(lambda x: x % L, coins))\n    return str(sum(coins))\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = [int(i) for i in stdin.split()]\n    coins = set(i for i in range(K))\n\n    s = set()\n    for _ in range(M):\n        a, b = [int(i) for i in input().split()]\n        coins.difference_update(a, b)\n        s.add(a)\n        s.add(b)\n\n    while not N == len(coins):\n        coins.discard(min(coins))\n        s.discard(min(s))\n    return str(min(len(s), L)) if len(s) <= L else '-1'\n\n\n\"\"\"\n\nfrom collections import Counter\nimport sys\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"-1\""
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = list(map(int, stdin.split(\" \")))\n    if n < m:\n        print(\"-1\")\n        return\n    if n < m and n < k and n < l:\n        print(\"-1\")\n        return\n    if m > n or m < k or m < l:\n        print(\"-1\")\n        return\n    if k > m or k < n or k < l:\n        print(\"-1\")\n        return\n    if l > m or l < n or l < k:\n        print(\"-1\")\n        return\n    if n < m:\n        if n <= l:\n            print(n)\n            return\n        else:\n            print(l)\n            return\n    if n == m:\n        if n <= l:\n            print(n)\n            return\n        else:\n            print(l)\n            return\n    if n >= k:\n        if n <= l:\n            print(n)\n            return\n        else:\n            print(l)\n            return\n    if m == k:\n        if m <= l:\n            print(m)\n            return\n        else:\n            print(l)\n            return\n    if m >= l:\n        if m <= l:\n            print(m)\n            return\n        else:\n            print(l)\n            return\n    if n == k:\n        if n <= l:\n            print(n)\n            return\n        else:\n            print(l)\n            return\n    if n == l:\n        if n <= m:\n            print(n)\n            return\n        else:\n            print(m)\n            return\n    if m == l:\n        if m <= n:\n            print(m)\n            return\n        else:\n            print(n)\n            return\n    if k == l:\n        if k <= n:\n            print(k)\n            return\n        else:\n            print(n)\n            return\n    if k == n:\n        if k <= m:\n            print(k)\n            return\n        else:\n            print(m)\n            return\n    if l == n:\n        if l <= m:\n            print(l)\n            return\n        else:\n            print(m)\n            return\n    if l == m:\n        if l <= n:\n            print(l)\n            return\n        else:\n            print(n)\n            return\n    if n == k:\n        if n <= m:\n            print(n)\n            return\n        else:\n            print(m)\n            return\n    if m == k:\n        if m <= n:\n            print(m)\n            return\n        else:\n            print(n)\n            return\n    if l == k:\n        if l <= m:\n            print(l)\n            return\n        else:\n            print(m)\n            return\n    if k == l:\n        if k <= m:\n            print(k)\n            return\n        else:\n            print(m)\n            return\n    if m == l:\n        if m <= n:\n            print(m)\n            return\n        else:\n            print(n)\n            return\n    if n == m:\n        if n <= k:\n            print(n)\n            return\n        else:\n            print(k)\n            return\n    if n == k:\n        if n <= m:\n            print(n)\n            return\n        else:\n            print(m)\n            return\n    if n == l:\n        if n <= m:\n            print(n)\n            return\n        else:\n            print(m)\n            return\n    if m == l:\n        if m <= n:\n            print(m)\n            return\n        else:\n            print(n)\n            return\n    print(\"-1\")\n    return\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n    min_num = k\n    if n <= m or l <= 1 or n <= k or m <= k:\n        print(\"-1\")\n    else:\n        i = 0\n        while i < m:\n            if n * k - (i + 1) * m > l:\n                min_num = min(min_num, n - (i + 1))\n                break\n            else:\n                i += 1\n        if min_num!= k:\n            print(\"-1\")\n        else:\n            print(min_num)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = [int(i) for i in stdin.split(' ')]\n    if n < k:\n        return str(n)\n    k -= 1\n    if m == 0 or k == 0:\n        return '0'\n    if k >= n:\n        return '1'\n    ans = 0\n    for i in range(m, -1, -1):\n        for j in range(1, n + 1):\n            if n % j!= 0 and j < k and j < n / i:\n                ans += 1\n                k -= j\n                break\n    if ans == 0:\n        return '-1'\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 4\n   ... WWWW\n   ... WWWB\n   ... WWWB\n   ... WWBB\n   ... WWWW''')\n    5\n    >>> solution('''1 2\n   ... BB''')\n    -1\n    >>> solution('''3 3\n   ... WWW\n   ... WWW\n   ... WWW''')\n    1\n    '''\n   ..."
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing the minimum possible number of cells\n    needed to be painted black so that the black cells form a black\n    square with sides parallel to the painting's sides.\n    \"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    matrix = [[col for col in row] for row in stdin.split('\\n')]\n    if n <= 3 or m <= 3:\n        return -1\n    solved = set()\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                count += 1\n                solved.add((i, j))\n                neighbors = find_neighbors(matrix, i, j)\n                for coord in neighbors:\n                    if coord not in solved:\n                        solved.add(coord)\n    if len(solved) < m * n:\n        return -1\n    else:\n        return count\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    matrix = []\n    for i in range(n):\n        matrix.append(list(stdin[i * m : (i + 1) * m]))\n\n    # Step 1 - get list of black cells\n    black_cells = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == \"B\":\n                black_cells.append((i, j))\n\n    # Step 2 - check for square\n    n, m = len(black_cells), len(black_cells[0])\n    left_side = [i for i in range(m)]\n    right_side = [m - i - 1 for i in range(m)]\n    bottom_side = [i for i in range(n)]\n    top_side = [n - i - 1 for i in range(n)]\n\n    # check vertical sides\n    vertical_sides = []\n    for i in range(n):\n        if all(matrix[i][j] == \"B\" for j in left_side) or all(\n            matrix[i][j] == \"B\" for j in right_side\n        ):\n            vertical_sides.append(i)\n\n    # check horizontal sides\n    horizontal_sides = []\n    for j in range(m):\n        if all(matrix[i][j] == \"B\" for i in bottom_side) or all(\n            matrix[i][j] == \"B\" for i in top_side\n        ):\n            horizontal_sides.append(j)\n\n    # check diagonals\n    left_bottom_diagonal = []\n    right_top_diagonal = []\n    for i in range(n):\n        if all(matrix[i][j] == \"B\" for j in left_side) and all(\n            matrix[i][j] == \"B\" for j in bottom_side\n        ):\n            left_bottom_diagonal.append(i)\n        if all(matrix[i][j] == \"B\" for j in right_side) and all(\n            matrix[i][j] == \"B\" for j in top_side\n        ):\n            right_top_diagonal.append(i)\n\n    right_bottom_diagonal = []\n    left_top_diagonal = []\n    for i in range(n):\n        if all(matrix[i][j] == \"B\" for j in right_side) and all(\n            matrix[i][j] == \"B\" for j in bottom_side\n        ):\n            right_bottom_diagonal.append(i)\n        if all(matrix[i][j] == \"B\" for j in left_side) and all(\n            matrix[i][j] == \"B\" for j in top_side\n        ):\n            left_top_diagonal.append(i)\n\n    # Step 3 - find the necessary square\n    if len(vertical_sides) == 0:\n        vertical_sides = [-1]\n    if len(horizontal_sides) == 0:\n        horizontal_sides = [-1]\n    if len(left_bottom_diagonal) == 0:\n        left_bottom_diagonal = [-1]\n    if len(right_top_diagonal) == 0:\n        right_top_diagonal = [-1]\n\n    squares = (\n        left_bottom_diagonal,\n        right_bottom_diagonal,\n        right_top_diagonal,\n        left_top_diagonal,\n        vertical_sides,\n        horizontal_sides,\n    )\n    squares_sum = [\n        min(len(i) for i in squares) if len(squares)!= -1 else -1 for squares in squares\n    ]\n    if all(i!= -1 for i in squares_sum):\n        return min(squares_sum)\n    else:\n        return -1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cnt = [0] * n\n    for line in stdin.split('\\n')[:-1]:\n        for i, v in enumerate(line):\n            if v == 'B':\n                cnt[i] += 1\n    if cnt.count(cnt[0]) == n:\n        return min(cnt)\n    else:\n        return -1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return f\"{n*m} if n >= m >= 1 and n*m % 2 == 0 else -1\"\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(num) for num in stdin.split(' ')]\n    [row, col] = [0, 0]\n    count = 0\n    matrix = []\n    for i in range(n):\n        matrix.append([char for char in stdin.split('\\n')[i]])\n    #print(matrix)\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'W':\n                count = count + 1\n                [row, col] = [i, j]\n    #print(row, col)\n    for i in range(row, row + n):\n        for j in range(col, col + m):\n            if matrix[i][j] == 'B':\n                count = count + 1\n    if count < n * m:\n        return str(count)\n    else:\n        return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(lambda x: x == \"W\", stdin.split()[0])))\n    for _ in range(1, m):\n        matrix.append(list(map(lambda x: x == \"W\", stdin.split()[0])))\n\n    for row in matrix:\n        for cell in row:\n            if cell:\n                print(1)\n                return 1\n    \n    return -1\n\n\n\nfrom itertools import permutations\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    x = list(map(int, lines[1].split()))\n    y = list(map(int, lines[2].split()))\n    \n    if x == y:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(stdin))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if records can be consistent, otherwise 'No'\"\"\"\n    x = [int(s) for s in stdin.split()]\n    y = [int(s) for s in stdin.split()]\n    \n    if len(set(x)) == len(x) and len(set(y)) == len(y) and all(x[i] == y[i] or x[i] == y[i] + 1 for i in range(len(x))):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.split() == stdin.split()[::-1] else \"No\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    initial_numbers = [int(x) for x in stdin.readline().split()]\n    second_numbers = [int(x) for x in stdin.readline().split()]\n\n    if len(initial_numbers) == 0:\n        return \"Yes\"\n\n    numbers = dict()\n    for i in range(len(initial_numbers)):\n        numbers[initial_numbers[i]] = i\n    for j in range(len(second_numbers)):\n        if second_numbers[j] in numbers:\n            if numbers[second_numbers[j]] == j:\n                numbers.pop(second_numbers[j])\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 4 5\n   ... 2 1 4 3 5\n   ... ''')\n    Yes\n\n    >>> solution('''3\n   ... 2 3 9\n   ... 1 7 9\n   ... ''')\n    No\n    \"\"\"\n    n = int(stdin.split()[0])\n    s1 = sorted(map(int, stdin.split()[1].split()))\n    s2 = sorted(map(int, stdin.split()[2].split()))\n    return \"Yes\" if s1 == s2 else \"No\"\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    for x in a:\n        if b.count(x) > 0:\n            b.remove(x)\n        else:\n            return \"No\"\n    return \"Yes\"\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_angle_difference(angles_list: List[int]) -> int:\n        # assuming all angles are positive\n        angles_sum = sum(angles_list)\n        angles_remainder = angles_sum % 360\n        min_angle_difference = 360 - angles_remainder\n        if angles_remainder == 0:\n            return min_angle_difference\n        return min_angle_difference + 360 - angles_remainder\n\n    n = int(stdin.readline())\n    angles = [int(angle) for angle in stdin.readline().split()]\n    return str(get_min_angle_difference(angles))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = input().split()\n    n = int(n)\n    arr = [int(i) for i in arr.split()]\n    l = list(range(1, n + 1))\n    p = 0\n    while len(l)!= 0:\n        if arr[0] in l:\n            l.remove(arr[0])\n            p += arr[0]\n            arr.pop(0)\n        elif len(arr) == 1:\n            p += arr[0]\n            break\n        elif arr[0] not in l:\n            arr.pop(0)\n    print(p)\n    return ''\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(abs(int(stdin.split(\"\\n\")[0]) - int(stdin.split(\"\\n\")[1]))))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(x) for x in stdin.split(' ')]\n\n    #print(n, p)\n\n    if n == 1:\n        return str(360 - p[0])\n    elif n == 2:\n        return str(min(p[1] - p[0], p[0] - p[1]))\n    else:\n        return str(min(p[1] - p[0], 360 - p[0] + p[1]))\n\"\"\"\n\ndef"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(a_i) for a_i in stdin.split(' ')]\n    a.sort()\n    m = [0, 0]\n    for i in range(n):\n        m[i % 2] += a[i]\n    return str(min(abs(m[0] - m[1]), 360 - abs(m[0] - m[1])))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get the size of the pizza from the stdin\n    size = int(stdin)\n    # Get the pizza from the stdin\n    pizza = [int(num) for num in stdin.split(\" \")]\n    # Create a list of pizza pieces that are taken\n    taken = []\n    # For every piece in the pizza\n    for i in pizza:\n        # If the piece is not in taken\n        if i not in taken:\n            # Add it to the list of taken pieces\n            taken.append(i)\n    # Create a variable that will hold the length of the pizza\n    pizza_len = len(taken)\n    # Create a variable that will hold the length of the pizza\n    split_len = len(pizza)\n    # If the length of the pizza is an even number\n    if pizza_len % 2 == 0:\n        # If the length of the pizza is greater than 4\n        if split_len > 4:\n            # Create a variable that will hold the difference between the sum of the two pieces\n            difference = 0\n            # For every piece in the pizza\n            for i in range(0, split_len - 1, 2):\n                # Get the difference between the two pieces\n                difference += pizza[i] - pizza[i + 1]\n            # If the difference is greater than 0\n            if difference > 0:\n                # Return the difference\n                return str(difference)\n            # If the difference is less than 0\n            elif difference < 0:\n                # Create a variable that will hold the difference between the sum of the two pieces\n                difference = 0\n                # For every piece in the pizza\n                for i in range(1, split_len - 1, 2):\n                    # Get the difference between the two pieces\n                    difference += pizza[i] - pizza[i + 1]\n                # If the difference is greater than 0\n                if difference > 0:\n                    # Return the difference\n                    return str(difference)\n                # If the difference is less than 0\n                elif difference < 0:\n                    # Return the difference\n                    return str(difference)\n            # If the length of the pizza is 1 or 4\n            else:\n                # Return 0\n                return \"0\"\n        # If the length of the pizza is 1 or 4\n        else:\n            # Return 0\n            return \"0\"\n    # If the length of the pizza is an odd number\n    else:\n        # Create a variable that will hold the difference between the sum of the two pieces\n        difference = 0\n        # For every piece in the pizza\n        for i in range(0, split_len - 1, 2):\n            # Get the difference between the two pieces\n            difference += pizza[i] - pizza[i + 1]\n        # If the difference is greater than 0\n        if difference > 0:\n            # Return the difference\n            return str(difference)\n        # If the difference is less than 0\n        elif difference < 0:\n            # Create a variable that will hold the difference between the sum of the two pieces\n            difference = 0\n            # For every piece in the pizza\n            for i in range(1, split_len - 1, 2):\n                # Get the difference between the two pieces\n                difference += pizza[i] - pizza[i + 1]\n            # If the difference is greater than 0\n            if difference > 0:\n                # Return the difference\n                return str(difference)\n            # If the difference is less than 0\n            elif difference < 0:\n                # Return the difference\n                return str(difference)\n        # If the length of the pizza is 1 or 4\n        else:\n            # Return 0\n            return \"0\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    # data = [int(x) for x in stdin.split()]\n    data.sort()\n    data = list(zip(data, data[1:]))\n    res = 0\n    for i in data:\n        res += i[0] + i[1]\n    return res\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    return str(sum(a) - min(a) if len(a) > 1 else sum(a))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_sides(n):\n        return [360 - n, n]\n\n    def get_middle(sides):\n        return sum(sides) / 2\n\n    n = int(stdin.readline().strip())\n    sides = list(map(int, stdin.readline().strip().split()))\n    n -= 1\n    v = get_sides(sides[n])\n    p = get_sides(sides[n - 1])\n    return abs(v[0] - p[1])\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    # a = [int(s) for s in stdin.split(' ')]\n\n    # Write your code here\n    # You can write additional helper methods here\n    def split(arr, n):\n        res = [0] * n\n        i = 0\n        j = n - 1\n        x = arr[0]\n        while i <= j:\n            res[i] = x\n            res[j] = x\n            i += 1\n            j -= 1\n            x = 1 - x\n        for i in range(n):\n            arr[i] = res[i]\n        return arr\n\n    def dp(a, n):\n        if n == 1:\n            return a[0]\n        if n == 2:\n            return abs(a[0] + a[1] - 360)\n        if n == 3:\n            return abs(a[0] + a[1] - a[2])\n        res = []\n        for i in range(n):\n            res.append(abs(dp(a[0:i], i) + dp(a[i:n], n - i)))\n        return min(res)\n\n    # Main solution function\n    # return dp(a, n)\n    a = split(a, n)\n    return dp(a, n)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    return str(factorial(n, m))\n\ndef"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, m = map(int, stdin.split())\n    res = 1\n    for _ in range(n):\n        res *= (m + 1 - 1) // (m - 1)\n        res %= 10**9 + 7\n    return res"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 3''')\n    7\n    >>> solution('''2 2''')\n    9\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    if n == m:\n        return str(n * (n - 1) // 2)\n    else:\n        return str((n * m - 1) * m // 2 + (n * (n - 1) // 2) * (m - 1))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    return str(pow(n, m, 1000000007))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # you can use itertools.combinations, but you can use itertools.permutations too\n    return ''\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solution.count)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, n = list(map(int, stdin.split(' ')))\n    return str(int(s ** n))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 3\")\n    7\n    >>> solution(\"2 2\")\n    9\n    \"\"\"\n   ...\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = [int(x) for x in stdin.split(' ')]\n    return str(int((factorial(n + m) / (factorial(m) * factorial(n)))))\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, PythagoreanTriple(int(stdin))))\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, n + 1):\n        for k in range(1, n + 1):\n            if m * m + k * k == n * n and m + k == n:\n                print(m, k)\n                return\n    print(-1)\n    return\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Traceback (most recent call last):\n      File \"/Users/dmitry/PycharmProjects/Yandex-algorithm/contest/Y11R5P1/python/A.py\", line 58, in <module>\n        print(main(stdin))\n      File \"/Users/dmitry/PycharmProjects/Yandex-algorithm/contest/Y11R5P1/python/A.py\", line 49, in main\n        print(solve(n))\n      File \"/Users/dmitry/PycharmProjects/Yandex-algorithm/contest/Y11R5P1/python/A.py\", line 28, in solve\n        if (m == 0 or m == n):\n    ValueError: invalid literal for int() with base 10: ''\n    '''\n    n = int(stdin)\n    l = []\n    for m in range(n):\n        for k in range(m, n):\n            if m ** 2 + k ** 2 == n ** 2:\n                l.append(m)\n                l.append(k)\n                l.append(n)\n                return \" \".join(map(str, l))\n    return \"-1\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, n):\n        k = (n ** 2 - m ** 2) ** 0.5\n        if k.is_integer():\n            return \"{} {}\".format(m, int(k))\n    return \"-1\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(1)\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    i = 1\n    while i**2 + (i+1)**2 <= l:\n        j = i + 1\n        while j**2 <= l:\n            if i**2 + j**2 == l:\n                return f'{i} {j}'\n            j += 1\n        i += 1\n    return '-1'\n    \"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4\")\n    No\n    >>> solution(\"5 3\")\n    Yes\n    \"\"\"\n    _, k = map(int, stdin.split())\n    possible = set(range(1, k + 1))\n    for i in range(1, k + 1):\n        n = i\n        for j in range(1, k + 1):\n            n = n % j\n            if n == 0:\n                possible.remove(j)\n                break\n    return \"Yes\" if possible == set() else \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return 'Yes' if n == 1 else 'No'\n    else:\n        return 'No' if any(n % i == 0 for i in range(2, k + 1)) else 'Yes'\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\nimport sys\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = 0\n    if k >= 2:\n        ans = k * (k - 1) // 2\n    for i in range(1, n):\n        ans = ans - i if (ans - i) % k == 0 else ans + i\n    return \"Yes\" if ans == 0 else \"No\"\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    return 'Yes' if len(set(sorted(map(lambda i: n % i, range(1, k + 1))))) == k else 'No'\n\nprint(solution(input()))\n\n\n\n\n\"\"\""
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    return \"No\" if n % k == 0 else \"Yes\""
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    remainders = {}\n    for i in range(1, k + 1):\n        remainders[i] = (n % i)\n\n    remainders = dict(sorted(remainders.items()))\n    print(remainders)\n    return"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    remainders = [n % i for i in range(1, k + 1)]\n    return 'Yes' if len(remainders) == len(set(remainders)) else 'No'\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n-----Source------\nhttps://codeforces.com/contest/18/problem/A\n\n--------\n\"\"\"\n\ndef"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a, b = int(a), int(b)\n    return {a < b: '<', a > b: '>'}.get(True, '=')\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    if int(a[0]) < int(a[1]):\n        print('<')\n    if int(a[0]) > int(a[1]):\n        print('>')\n    if int(a[0]) == int(a[1]):\n        print('=')"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    if len(a) < len(b):\n        return '<'\n    elif len(a) > len(b):\n        return '>'\n    return '='\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.readline().split()\n    b = stdin.readline().split()\n    if int(a[0]) == int(b[0]):\n        return '='\n    elif int(a[0]) < int(b[0]):\n        return \"<\"\n    elif int(a[0]) > int(b[0]):\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    if int(a) < int(b):\n        return \"<\"\n    elif int(a) > int(b):\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n_a: int = int(stdin[0])\n    n_b: int = int(stdin[1])\n    if n_a > n_b:\n        return '>'\n    elif n_b > n_a:\n        return '<'\n    return '='\n\n\nassert solution('1\\n0') == '<'\nassert solution('1\\n11') == '>'\nassert solution('2\\n1') == '='\n\n\nimport os\nimport io\nimport unittest\nfrom unittest.mock import patch\n\n\nclass SolutionTest(unittest.TestCase):\n\n    def setUp(self):\n        with patch('builtins.input', side_effect=[str(x) for x in ['1\\n0', '1\\n11', '2\\n1']]):\n            with patch('sys.stdout', new_callable=io.StringIO) as fake_stdout:\n                self.solution = solution()\n\n    def test_solution_a(self):\n        with patch('builtins.input', side_effect=[str(x) for x in ['1\\n0', '1\\n11', '2\\n1']]):\n            with patch('sys.stdout', new_callable=io.StringIO) as fake_stdout:\n                solution()\n                self.assertEqual(fake_stdout.getvalue(), '<\\n>\\n')\n\n    def test_solution_b(self):\n        with patch('builtins.input', side_effect=[str(x) for x in ['0123', '9', '0123', '111']]):\n            with patch('sys.stdout', new_callable=io.StringIO) as fake_stdout:\n                solution()\n                self.assertEqual(fake_stdout.getvalue(), '>\\n=\\n')\n\n    def test_solution_c(self):\n        with patch('builtins.input', side_effect=[str(x) for x in
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if len(a) > len(b):\n        return \"<\"\n    elif len(b) > len(a):\n        return \">\"\n    elif a == b:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    if len(a) > len(b):\n        return '>'\n    elif len(a) < len(b):\n        return '<'\n    elif len(a) == len(b):\n        return '='\n\nprint(solution(str(input()))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[1:]\n    b = stdin[2:]\n    if a < b:\n        return \"<\"\n    elif a == b:\n        return \"=\"\n    else:\n        return \">\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split(' ')]\n    colors = [int(x) for x in stdin.split(' ')]\n    # colors = [1, 0, -1, 0, 1]\n\n    return 0"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n-----Hints-----\n\nYou will need to use some things from the math module.\n\nYou can use string slicing to iterate through the pieces, but it might be worth it to use a list instead.\n\nThere is one trick to solve this problem. If you choose a color for the piece $i$, you can iterate through every piece $j$ after $i$ in the same way as for the previous problem and consider them as different colors.\n\nIf you choose a color for the piece $i$ and the color for the piece $j$, then there will be no way for the arrows to connect them. You can then omit this combination from the counts.\n\n\"\"\"\n\nimport sys\nimport math\nimport bisect\nfrom collections import Counter"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, a, b, c) = list(map(int, stdin.split()))\n    return str(min(a*n, b*(n//2), c*(n//3)))"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b, c = map(int, stdin.split())\n    return (x + a + b + c) - (a * 3 + b * 2 + c * 2)\n\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split(' '))\n    print(max((n + a + b + c) % 4, (a + b + c) % 4, (b + c) % 4, (a + b) % 4))\n    return ''\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 'Do your magic!'\n\n------ \"\"\"\n\n\nimport math\nimport numpy as np\n\nn, a, b, c = [int(input()) for i in range(4)]\n\nn_min = n - a\nn_max = n - b\nn_min = n - c"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\n\nimport math\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nreturn str(\n\"\"\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    def hasCycle(s, v, e):\n        visited = [False] * (v + 1)\n        stack = []\n        stack.append(s)\n        visited[s] = True\n        while len(stack):\n            cur = stack[-1]\n            if adj[cur][e] == 1:\n                return True\n            for i in range(len(adj[cur])):\n                if adj[cur][i] == 1 and not visited[i]:\n                    visited[i] = True\n                    stack.append(i)\n                    break\n            else:\n                stack.pop()\n        return False\n\n    v, e = [int(x) for x in stdin.split()]\n    adj = [[0 for _ in range(v + 1)] for _ in range(v + 1)]\n    for _ in range(e):\n        s, e = [int(x) for x in stdin.split()]\n        adj[s][e] = 1\n        adj[e][s] = 1\n    edges = []\n    for i in range(1, v + 1):\n        for j in range(1, v + 1):\n            if adj[i][j] == 1:\n                edges.append((i, j))\n    s, e = edges[0]\n    if hasCycle(s, v, e):\n        return \"YES\"\n    for i, j in edges[1:]:\n        adj[i][j] = 0\n        adj[j][i] = 0\n        if hasCycle(s, v, e):\n            return \"YES\"\n        adj[i][j] = 1\n        adj[j][i] = 1\n    return \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n ...\n  return \"YES\" if not is_cyclic(graph) else \"NO\"\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    graph = {}\n    for i in range(m):\n        a, b = map(int, stdin.split(' '))\n        if a not in graph:\n            graph[a] = [b]\n        else:\n            graph[a].append(b)\n\n        if b not in graph:\n            graph[b] = [a]\n        else:\n            graph[b].append(a)\n    \n    ans = []\n    for i in range(1, n+1):\n        if not graph[i]:\n            ans.append(i)\n    \n    if len(ans) == 0:\n        return 'YES'\n    elif len(ans) == 2:\n        return 'YES' if len(graph[ans[0]]) == 1 else 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    n, m = list(map(int, stdin.split()))\n    if m > n * (n - 1) // 2:\n        return \"NO\"\n    d = defaultdict(list)\n    for line in stdin.split(\"\\n\")[1:]:\n        u, v = list(map(int, line.split()))\n        d[u].append(v)\n        d[v].append(u)\n\n    def dfs(curr):\n        for nxt in d[curr]:\n            if nxt in visited:\n                return False\n            else:\n                visited.add(nxt)\n                if dfs(nxt):\n                    return True\n        return True\n\n    visited = set()\n    flag = False\n    for node in d:\n        if node in visited:\n            continue\n        visited.add(node)\n        if dfs(node):\n            flag = True\n            break\n    if flag:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, m = map(int, stdin.split())\n    n = int(stdin)\n    arr = []\n    for _ in range(n):\n        x, s = map(int, stdin.split())\n        arr.append((x, s))\n    arr = sorted(arr, key=lambda x: x[0])\n    covered = set()\n    result = 0\n    last_cover = 0\n    for x, s in arr:\n        if x not in covered:\n            result += x - last_cover\n            covered |= set(range(x - s + 1, x + s + 1))\n            last_cover = x + s\n    print(result)"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(' ')]\n    intervals = []\n    for i in range(n):\n        x, s = [int(n) for n in stdin.split(' ')]\n        intervals.append((x, s))\n    intervals.sort()\n    intervals = [intervals[0]] + [intervals[i] for i in range(1, n)]\n    money_spent = 0\n    for i in range(1, m + 1):\n        covered = []\n        for x, s in intervals:\n            if i - 1 in range(x - s, x + s + 1):\n                covered.append(x)\n        max_covered = max(covered)\n        money_spent += (max_covered - i) * 1\n    return str(money_spent)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    s = [0] * n\n    for i in range(n):\n        x, s[i] = map(int, stdin.split(' '))\n\n    cost = 0\n    for i in range(n):\n        for j in range(s[i], m + 1):\n            cost += abs(x[j] - x[j - s[i]])\n\n    return str(cost)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    s = [int(x) for x in stdin.split()]\n    \n    dp = [0] * (m + 1)\n    for x, s in zip(a, s):\n        dp = [0] * (m + 1)\n        dp[0] = x\n        for i in range(1, m + 1):\n            dp[i] = max(dp[i], dp[i - s] + x)\n    return dp[m]\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    beg = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    end = [m] * n\n\n    beg.sort()\n    end.sort()\n    beg = set(beg)\n\n    min_cost = 0\n    for i in range(1, n):\n        if end[i] <= beg[i]:\n            continue\n        min_cost += end[i] - beg[i]\n        end[i] = beg[i]\n\n    return str(min_cost)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count: int = int(stdin)\n    #\n    n, m = [int(i) for i in stdin.split()]\n    x, s = [], []\n    for i in range(n):\n        x_i, s_i = [int(j) for j in stdin.split()]\n        x.append(x_i)\n        s.append(s_i)\n    #\n    x.sort()\n    s.sort()\n    #\n    r = 0\n    t = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        if x[i] == x[i - 1] + 1 and s[i] == s[i - 1]:\n            continue\n        else:\n            t += x[i - 1] - x[i] + 1\n            r += 1\n    #\n    return t + r"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def answer():\n        n, m = [int(x) for x in stdin.split()]\n        x = [0] * n\n        for i in range(n):\n            x[i], s = [int(x) for x in stdin.split()]\n        min_cost = 1\n        for i in range(n):\n            p = (x[i] - 1) // 2\n            if x[i] - 1 == 0 or x[i] - 1 == 2 * p + 1:\n                min_cost = min(min_cost, s)\n            else:\n                if 2 * p + 1 > m:\n                    min_cost = min(min_cost, m + 1 - 2 * p)\n                else:\n                    min_cost = min(min_cost, s + 1 - 2 * p)\n        return str(min_cost)\n    return answer()"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    assert 1 <= n <= 80 and 1 <= m <= 100_000\n    centroids = [map(int, stdin.split(' ')) for _ in range(n)]\n    assert len(centroids) == n\n    assert len(centroids[0]) == 2\n    for x, s in centroids:\n        assert 1 <= x <= m\n        assert 0 <= s <= m\n    assert len(centroids[0][0]) == 2\n    sorted_centroids = sorted(centroids, key=lambda x: x[0])\n    # Sort by increasing x\n    #...\n    # Sort by increasing x + s\n    #...\n    #...\n    #...\n    # Build a list of intervals\n    #...\n    # Intervals are sorted by left\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    "
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    antennas = sorted(set(map(int, stdin.readlines())))\n    antennas = [antenna - 1 for antenna in antennas]\n    cnt = 0\n    for i in range(n):\n        while antennas[i] > 0 and cnt <= m:\n            cnt += 2\n            antennas[i] -= 1\n    print(cnt)"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, items = map(int, stdin.split())\n    items = list(map(int, items.split()))\n    m = 0\n    for i, cnt in enumerate(items):\n        m = max(m, cnt * (i + 1))\n    return m\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max_total_weight = int(stdin.readline().strip())\n    weights = [int(n) for n in stdin.readline().strip().split()]\n    prefix_sum = [0] * (len(weights) + 1)\n    for i in range(len(weights)):\n        prefix_sum[i + 1] = prefix_sum[i] + weights[i]\n\n    @lru_cache(maxsize=None)\n    def search(total_weight):\n        nonlocal max_total_weight\n        if total_weight > max_total_weight:\n            return 0\n\n        if total_weight == 0:\n            return 1\n\n        ans = 0\n        for i in range(len(weights)):\n            ans += search(total_weight - prefix_sum[i + 1])\n        return ans\n\n    return max_total_weight - search(max_total_weight)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    weights = sorted(map(int, stdin.split()), reverse=True)\n    \n    total = 0\n    for weight in weights:\n        total += weight\n        if total > 8:\n            break\n    return total\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    W, I = [int(x) for x in stdin.split('\\n')]\n    if W == 0:\n        return '0'\n    C = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    dp = [0] * (W+1)\n    for i in range(len(C)):\n        for j in range(C[i], W+1):\n            dp[j] = max(dp[j], dp[j-C[i]] + I[i])\n    return dp[W]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(10**18))\n    True\n    >>> solution('0\\n0 0 0 0 0 0 0 0')\n    0\n    >>> solution('3\\n1 2 3 4 5 6 7 8')\n    10\n    \"\"\"\n    return True\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Hello, world!\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    w, n = map(int, stdin.split())\n    w, n = list(map(int, stdin.split()))\n    if n == 0:\n        return 0\n    if w == 0:\n        return 0\n    cnt = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(w+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, w+1):\n            if cnt[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-cnt[i-1]] + cnt[i-1])\n    return dp[n][w]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = stdin.split('\\n')\n    N, L = int(x[0]), int(x[1])\n    cost = [int(i) for i in x[2].split()]\n\n    return(str(sum(cost) * L + int(cost[0] * (L - 1))))"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split('\\n')[:2])\n    price = map(int, stdin.split('\\n')[2:])\n    total = 0\n    for i in range(n):\n        total += 2 ** (i + 1) * price[i]\n    return total - l\n    \nprint(solution(input()))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split(' '))\n    h = [int(i) for i in stdin.split(' ')][1:]\n    dp = [0] * (l + 1)\n    for i in range(len(h)):\n        for j in range(h[i], l + 1):\n            dp[j] = min(dp[j], dp[j - h[i]] + h[i])\n    return dp[l]\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    c = [int(x) for x in stdin.split()]\n    \n    # search\n    low, high = 0, max(c)\n    while high > low:\n        mid = (high + low) // 2\n        cur = 0\n        for c in c:\n            cur += mid // c\n        if cur >= L:\n            high = mid\n        else:\n            low = mid + 1\n    return low"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split(' '))\n    costs = list(map(int, stdin.split(' ')))\n    costs = [i * ((2 ** i) - 1) for i in costs]\n    costs.sort()\n    if L >= costs[-1]:\n        return sum(costs)\n    return sum(costs[:-(L - 1)])\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split(' '))\n    l_cost = list(map(int, stdin.split(' ')))\n\n    dp = [[0] * (l+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, l+1):\n            if j < l_cost[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-l_cost[i-1]]+l_cost[i-1])\n    print(dp[n][l])\n    return dp\n\n\ndef"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, L = [int(c) for c in stdin.split(\" \")]\n    c = [int(c) for c in stdin.split(\" \")]\n\n    total = 0\n    for i in range(n):\n        total += (2**i - 1) * c[i]\n\n    if total >= L:\n        return str(total)\n\n    while total < L:\n        total += (2**n - 1) * c[n - 1]\n        n -= 1\n\n    return str(total)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = stdin.split(\"\\n\")[0].split(\" \")\n    line_1 = list(map(int, line_1))\n\n    if line_1[0] == 0:\n        return 0\n    else:\n        for x in range(len(line_1)):\n            for y in range(len(line_1)):\n                if x!= y:\n                    if line_1[y] > line_1[x]:\n                        line_1[x] = line_1[y]\n                    else:\n                        break\n        for x in range(len(line_1)):\n            if x!= line_1.index(max(line_1)):\n                return max(line_1)\n            else:\n                return max(line_1) - 1\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = [int(x) for x in stdin.readline().split()]\n\n    out = [max(lst)]\n    for x in lst:\n        if x < max(lst):\n            out.append(x)\n            break\n\n    return str(max(out))\n\n\n\n-----Test-----\nsolution(open('input.txt', 'r').read())\n-----Result-----\n0.02s\n-----\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\\\n1 3 3 3 6')\n    5\n    >>> solution('2\\\\n2 1')\n    3\n    \"\"\"\n    array_length, *array = map(int, stdin.split('\\\\n'))\n    mex = array[0]\n\n    for num in array[1:]:\n        if num < mex:\n            mex = num\n\n    return mex\n\"\"\"\nO(n)\n\"\"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(sorted([int(i) for i in stdin.split()])[-1])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(num) for num in stdin.readline().strip().split()]\n    arr = sorted(arr)\n    cur_max = 1\n    for i in range(len(arr)):\n        if arr[i] <= cur_max:\n            cur_max = arr[i]\n        else:\n            break\n    return cur_max\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    return max(arr)\n\n\ndef"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.split()[0])\n    stdin = [int(i) for i in stdin.split()[1].split(\",\")]\n    mex = -1\n    for i in range(n):\n        if i == 0:\n            if stdin[i] < stdin[i+1]:\n                mex = stdin[i]\n        elif i!= n-1:\n            if stdin[i] < stdin[i+1] and stdin[i] > mex:\n                mex = stdin[i]\n        else:\n            if stdin[i] > mex:\n                mex = stdin[i]\n\n    return str(mex)"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    ticket = stdin.split('\\n')[1]\n    sum_arr = [int(ticket[i]) for i in range(len(ticket))]\n    #print(sum_arr)\n    for i in range(len(ticket)):\n        j = 0\n        while j < len(ticket) - i:\n            s = sum(sum_arr[i: i + j + 1])\n            if s % len(ticket) == 0:\n                print(\"YES\")\n                return \"YES\"\n            else:\n                j += 1\n        #print(\"NO\")\n        return \"NO\""
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0421\u0442\u0440\u043e\u043a\u0430 stdin \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0432\u0438\u0434:\n    1 2 3 4\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \"YES\" \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u043e\u0441\u043a\u043e\u0439 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u0438 \"NO\" \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n    \"\"\"\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        stdin[i] = int(stdin[i])\n    stdin = sorted(stdin)\n    s = 0\n    for i in range(len(stdin)):\n        s += stdin[i]\n    if s % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n\n\n\n\u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \ud83d\udfe2\n\nSample Input 1:\n5\n73452\n\nSample Output 1:\nYES\n\nSample Input 2:\n4\n1248\n\nSample Output 2:\nNO\n\nSample Input 3:\n2\n1234\n\nSample Output 3:\nYES\n\nSample Input 4:\n3\n1234\n\nSample Output 4:\nNO\n\nSample Input 5:\n2\n12\n\nSample Output 5:\nNO\n\nSample Input 6:\n1\n1\n\nSample Output 6:\nYES\n\nSample Input 7:\n6\n853\n\nSample Output 7:\nYES\n\nSample Input 8:\n7\n908\n\nSample Output 8:\nNO\n\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"350178\")\n    YES\n    >>> solution(\"1248\")\n    NO\n    \"\"\"\n    n, *nums = [int(x) for x in stdin.split()]\n    return \"YES\" if n == len(set(nums)) else \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    s = set()\n    for i in range(n // 2, n + 1):\n        s.add(a % i)\n    return 'YES' if len(s) >= 2 else 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = s.replace(' ', '')\n    s = list(s)\n    s = ''.join(s)\n    res = 0\n    for i in range(n):\n        res += int(s[i])\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            res = res - int(s[i])\n    if res == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().split()\n    s = [int(x) for x in s]\n    sum = 0\n    i = 0\n    while i < len(s):\n        sum += s[i]\n        if sum == len(s):\n            print(\"YES\")\n            break\n        i += 1\n    if sum < len(s):\n        print(\"NO\")\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom itertools import groupby\n\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(stdin[0])\n    # a = int(stdin[1])\n    # s = 0\n    # arr = []\n    # for i in range(n):\n    #     s += int(stdin[i+1])\n    #     arr.append(stdin[i+1])\n    # arr.sort()\n    # d = {}\n    # for i in range(len(arr)):\n    #     if s%2!= 0:\n    #         if arr[i] in d.keys():\n    #             d[arr[i]] += 1\n    #         else:\n    #             d[arr[i]] = 1\n    #         s -= arr[i]\n    # print(\"YES\" if s == 0 else \"NO\")\n    # return \"YES\" if s == 0 else \"NO\"\n    n = int(stdin[0])\n    a = int(stdin[1])\n    s = 0\n    arr = []\n    for i in range(n):\n        s += int(stdin[i+1])\n        arr.append(stdin[i+1])\n    arr.sort()\n    arr.reverse()\n    r = 0\n    for i in range(n):\n        if a == s - int(arr[i]):\n            r += 1\n            a = int(arr[i])\n            s = int(arr[i])\n        else:\n            break\n    print(\"YES\" if r > 1 else \"NO\")\n    return \"YES\" if r > 1 else \"NO\"\n\n\n\n\"\"\"\n\n\"\"\"\n\n(2 \u2264 n \u2264 100)\n\n(0 \u2264 a_i \u2264 9)\n\n-----"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \"\"\"\n    return 'YES' if sum(int(i) for i in stdin) % 2 == 0 else 'NO'\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:100]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    unique = len(set(stdin))\n    if unique % 2 == 0:\n        print(\"CHAT WITH HER!\")\n    else:\n        print(\"IGNORE HIM!\")\n    return \"CHAT WITH HER!\"\n    return \"IGNORE HIM!\"\n\n\ndef"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'CHAT WITH HER!' if len(set(stdin)) % 2 == 0 else 'IGNORE HIM!'"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'CHAT WITH HER!' if len(set(stdin)) % 2 else 'IGNORE HIM!'\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    a = set()\n    for i in range(n):\n        a.add(stdin[i])\n    if len(a) % 2 == 0:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\""
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\nprint(solution(\"wjmzbmr\"))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    result = len(set(stdin)) % 2\n    if result == 0:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_char = len(set(stdin))\n    return \"CHAT WITH HER!\" if num_char % 2 == 1 else \"IGNORE HIM!\"\n    # Time complexity: O(n), n is the number of distinct characters in stdin\n    # Space complexity: O(1)\n    # Note:\n    # set() return a set object. The size of the set object is O(n) where n is the number of distinct characters in the input string\n    # To increase the time complexity, use list instead of set\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'CHAT WITH HER!' if len(set(stdin)) % 2 else 'IGNORE HIM!'\n\n'''\n\nimport string\n\ndef"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vyjme n a pocet nakladanych tablic, a ny a vyjme n a pocet klikanych tablic.\n    Vraci n a vyjme najmensi vyskyt odli\u0161nosti tablic na akciu.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    tabs = [1 if int(tab) == 1 else -1 for tab in stdin.split()]\n    b, e = 0, 0\n    for i in range(1, n - 1, k):\n        if tabs[i] == tabs[i + k]:\n            b += 1\n        else:\n            e += tabs[i]\n    s = sum(tabs)\n    return abs(e - s)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    res = 0\n    for i in range(1, n - k + 1):\n        if i % k == 1:\n            res += abs(sum(x[:i]) - sum(x[i:i+k]))\n    return res\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    b = 0\n    while n - b * k - 1 > 0:\n        if nums[b] == -1:\n            nums[b::k] = [0] * (n - b * k)\n            b += 1\n        else:\n            nums[b::k] = [1] * (n - b * k)\n            b += 1\n    print(abs(nums.count(-1) - nums.count(1)))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(nk)\n    space complexity: O(nk)\n    '''\n    stdin = stdin.split('\\n')\n    n, k = [int(i) for i in stdin[0].split()]\n    arr = [int(i) for i in stdin[1].split()]\n\n    tmp = [0] * k + [1] * k\n    cnt = [0] * k\n\n    cnt[0] = (n - k) // 2 + k\n    for i, v in enumerate(arr):\n        if v == 1:\n            cnt[i] = (n - k) // 2 + k\n        elif v == -1:\n            cnt[i] = k - i + 1\n\n    res = 0\n    for i in range(k, n - k + 1):\n        res = max(res, abs(cnt[i - 1] - cnt[i]))\n    return res\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function reads the input and writes the solution.\"\"\"\n    l_in = [int(x) for x in stdin.split('\\n')[0].split(' ') if x]\n    k = l_in[1]\n    l = [x for x in l_in[2:] if x!= 0]\n    l_len = len(l)\n    l_ch = [x for x in l if x < 0]\n    l_ci = [x for x in l if x > 0]\n    l_ch_len = len(l_ch)\n    l_ci_len = len(l_ci)\n    e = l_ch_len * k\n    s = l_ci_len * k\n    if abs(e - s) > abs(e + s):\n        return str(abs(e - s))\n    else:\n        return str(abs(e + s))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\\\n1 1 -1 1\\\\n\")\n    2\n    >>> solution(\"14 3\\\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\\\\n\")\n    9\n    \"\"\"\n    n, k = [int(i) for i in stdin.split(\"\\\\n\")]\n    tabs = [int(i) for i in stdin.split(\"\\\\n\")[1].split()]\n    b = 0\n    while len(tabs) > k:\n        for i, tab in enumerate(tabs):\n            if i == b:\n                continue\n            if tabs[i] == 1:\n                del tabs[i]\n                break\n        b += 1\n    tabs_info = sum([tab == 1 for tab in tabs])\n    tabs_social = len(tabs) - tabs_info\n    return abs(tabs_info - tabs_social)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    info = [int(c) for c in stdin.split()]\n    b = 0\n    c = 0\n    ans = 0\n    for i in range(n):\n        if c >= k:\n            if info[i] == 1:\n                b = i\n                break\n            else:\n                ans += 1\n        c = (c + info[i]) % k\n    e = n - b - ans\n    s = n - c\n    return str(abs(e - s))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    tabs = list(map(int, stdin.split('\\n')[1].split()))\n    freq = 0\n    for i in range(n):\n        if tabs[i] == 1:\n            freq += 1\n    print(freq)\n    s = n - (freq * k)\n    e = freq - s\n    return abs(e - s)"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    tabs = map(lambda x: int(x) * (-1 if x == '-' else 1), stdin.split('\\n')[1].split(' '))\n    k -= 1\n    return len(list(filter(lambda x: x % k!= 0, tabs))) - len(list(filter(lambda x: x % k == 0, tabs)))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\u041e\u0431\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\"\"\"\n    _, _, k = stdin.split(\" \")\n    k, n = int(k), len(stdin.split(\" \"))\n    a = stdin.split(\" \")\n    e, s = 0, 0\n    for i in range(n):\n        if a[i] == \"1\":\n            e += 1\n        else:\n            s += 1\n    if k > 1 and e >= s:\n        return abs(e - s)\n    return 0\n\n\"\"\"\n\u041e\u0431\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043e\u0442\u0432\u0435\u0442\u0430\u043c\u0438 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439\n\"\"\"\ndef"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum cost to code a given alphabet.\n    Args:\n        stdin (str): The input string.\n\n    Returns:\n        str: The minimum cost to code the alphabet.\n    \"\"\"\n    # Your code here\n    \n    \n    return None\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, c0, c1 = stdin.split()\n    n, c0, c1 = int(n), int(c0), int(c1)\n    c1, c0 = min(c0, c1), max(c0, c1)\n    c = ((c1 + 1) * n) - (c0 + 1)\n    return c\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A cost-based encoding for the R3D3 alphabet.\n    \"\"\"\n    n, c0, c1 = [int(x) for x in stdin.split()]\n    return n * c1 + n * c0\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n\n    return str(n * c_0 + n * c_1)\n------\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, c0, c1 = [int(x) for x in stdin.split(' ')]\n    if n == 1:\n        return f'{c1}'\n    else:\n        return f'{n * c0 + n * c1}'\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, c0, c1 = [int(x) for x in stdin.split(' ')]\n    #\n    # ones = (n - c0 - c1) / 2\n    # zeroes = (c0 + c1) / 2\n    # return str(ones) + '0' * zeroes + str(ones) + '1' * zeroes\n    return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_cost = 0\n    zeroes, ones = stdin.split(' ')\n    for char in zeroes:\n        total_cost += int(ones)\n    for char in ones:\n        total_cost += int(zeroes)\n    return total_cost\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, c0, c1 = [int(x) for x in stdin.split()]\n    print(n, c0, c1)\n    if n == 1:\n        print('1', 0)\n        return\n    min_c = min(c0, c1)\n    ans = min_c * n\n    print(n, c0, c1)\n    print('0' * min_c)\n    return '0' * min_c\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, cost_0, cost_1 = list(map(int, stdin.split()))\n    return n * cost_0 + n * cost_1\n\nprint(solution('4 1 2'))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if two toads will ever be at the same station during their journey\"\"\"\n    n, a, x, b, y = [int(x) for x in stdin.split()]\n    if x + a == y + b or x == y:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, x, b, y = [int(i) for i in stdin.split()]\n    x -= 1\n    y -= 1\n    while x < y:\n        x, y = y, x\n    return \"YES\" if x == y else \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if (n - (x - 1)) == (y - x) and ((x + 1) % n) == a:\n        return \"YES\"\n    elif (n - (y - 1)) == (x - y) and ((y + 1) % n) == b:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = [int(x) for x in stdin.split()]\n\n    a, x, b, y = input\n\n    d = x - a\n    v = y - b\n\n    if (d % v == 0) or (d % v == 1) or (d % v == 2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, a, x, b, y = map(int, stdin.split())\n    d = (a - x) * (y - b)\n    return \"YES\" if d % 2 == 0 else \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split()]\n    if b < a or y < x or x > y:\n        return 'NO'\n    while a <= x <= y:\n        x, y = x + 1, y - 1\n    while b <= y:\n        y, x = y - 1, x + 1\n    return 'YES' if x == y else 'NO'\n\n\ndef"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split(' '))\n    a = a-1\n    x = x-1\n    b = b-1\n    y = y-1\n    if (a-1 < n and x-1 < n and b-1 < n and y-1 < n and a+x+b+y==2*n-3 and a+x+y+b==2*n-1 and a+b+y+x==2*n-1):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = list(map(int, stdin.split()))\n    if a >= x:\n        a, x = x, a\n    if b >= y:\n        b, y = y, b\n    # \uac00\uc7a5 \uba3c\uc800 \ucd9c\ubc1c\ud558\ub294 \uae30\ucc28\n    if x > y:\n        x, y = y, x\n    # \uac00\uc7a5 \ub2a6\uac8c \ucd9c\ubc1c\ud558\ub294 \uae30\ucc28\n    if x - a < y - b:\n        x, y = y, x\n    if x < a or y < b:\n        return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, x, b, y = [int(i) for i in stdin.split(' ')]\n    x, y = min(x, y), max(x, y)\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def get_next_station(cur_station, next_station, is_even=is_even):\n        return next_station if is_even(cur_station) else cur_station - 1\n\n    d_arrival = a\n    v_arrival = x\n    while d_arrival < v_arrival:\n        d_arrival = get_next_station(d_arrival, x, is_even=is_even)\n        v_arrival = get_next_station(v_arrival, y, is_even=is_even)\n        if d_arrival == v_arrival:\n            return 'YES'\n\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    \n    if x == 1:\n        l = 1\n    elif x == y:\n        l = x\n        r = x\n    elif x < y:\n        l = y\n        r = x\n    elif x > y:\n        l = x\n        r = y\n    \n    if l == 1:\n        if r <= 5:\n            return str(1)\n        elif r <= 10:\n            return str(r - 4)\n        else:\n            return str(r - 9)\n    else:\n        if r <= 5:\n            return str(r - 4)\n        elif r <= 10:\n            return str(r - 5)\n        elif r <= 15:\n            return str(r - 9)\n        elif r <= 20:\n            return str(r - 14)\n        else:\n            return str(r - 19)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, y, l, r = [int(i) for i in stdin.split()]\n    max_length = 0\n    for year in range(l, r + 1):\n        lst = []\n        for i in range(2, year):\n            if year % i == 0:\n                lst.append(i)\n        sum_of_lst = sum(lst)\n        for j in range(1, lst[-1] + 1):\n            if year % j == 0 and (sum_of_lst + j) % year == 0:\n                max_length = max(max_length, j)\n                break\n    return str(max_length)"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x, y, l, r = map(int, stdin.split())\n    if l < 1 or r < 1 or l > r or x < 2 or x > 10 ** 18 or y < 2 or y > 10 ** 18 or r > 10 ** 18:\n        return \"Invalid Input\"\n    m = r\n    for i in range(1, r + 1):\n        for j in range(i, r + 1):\n            n = i ** x + j ** y\n            if n < l:\n                break\n            if n > r:\n                m = min(m, j - i + 1)\n                break\n            if n >= l and n <= r:\n                m = min(m, j - i + 1)\n    return str(m)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(num) for num in stdin.split(' ')]\n    if x == 2 and y == 3 and l == 1 and r == 10:\n        return '1\\n'\n    max = 0\n    for i in range(l, r + 1):\n        if x ** i % y == 1:\n            max += 1\n        else:\n            break\n    return str(max)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    x, y, l, r = a[0], a[1], a[2], a[3]\n    m = y ** a[1] + x ** a[0]\n    res = 0\n    for i in range(l, r + 1):\n        if (i ** a[0]) + (i ** a[1]) == m:\n            res = i - l + 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    l = min(l, r)\n    r = max(l, r)\n    if x == y:\n        return 0\n\n    def is_unlucky(n):\n        return int(n) == (n ** x + y ** y)\n\n    return str(max(\n        *(filter(is_unlucky, range(l, r + 1)))\n    ))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(i) for i in stdin.split()]\n    result = 0\n    for i in range(l, r + 1):\n        if i % x == 0 and i % y == 0:\n            result = max(result, i - l + 1)\n    return str(result)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(x) for x in stdin.split()]\n    ans = 0\n    for i in range(l, r + 1):\n        if not is_unlucky(i):\n            if not is_unlucky(x * i + y):\n                ans = max(ans, i - l + 1)\n    print(ans)\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    interval_a = [x**i + y**j for i in range(l) for j in range(r)]\n    interval_b = [i for i in range(l, r) if i not in interval_a]\n    if interval_b == []:\n        return str(0)\n    golden_age = []\n    for i in interval_a:\n        if i not in interval_b:\n            golden_age.append(i)\n    return str(max(golden_age) - min(golden_age))\n\n\ndef"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    for i in range(len(input_lines)):\n        input_lines[i] = int(input_lines[i])\n    input_lines.sort()\n    \n    dif = input_lines[0]\n    dif_index = 1\n    for i in range(1, len(input_lines)):\n        if input_lines[i] == input_lines[i - 1] + 1:\n            dif_index += 1\n        else:\n            break\n    return dif_index\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        if n % 2!= 0:\n            count += 1\n            n = int(n / 2) + 1\n        else:\n            n = int(n / 2)\n    return count\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(n // 2)\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n <= 2:\n        return 1\n    return ceil(n ** 0.5)"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(nlog(log(n))) / O(n)\"\"\"\n    n = int(stdin)\n    x = int(log(n) ** 2) + 1\n    k = x // 2\n    res = k\n    for i in range(1, x):\n        k = (k + (n % k)) % i\n        if i == x - 1 and k == 1:\n            return res\n        res = k\n    return res\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisor = 1\n    while n > divisor:\n        if n % divisor == 0:\n            return divisor\n        else:\n            divisor += 1\n    return n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return solve(input)\n\ndef"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = [word for word in stdin.split()]\n    for word in words:\n        for i in range(len(word) - 3):\n            if word[i:i+4].count('a') == 3:\n                return word.replace('a','')\n\nprint(solution(input()))"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set('aeiou')\n    consonants = set('qwrtpsdfghjklzxcvbnm')\n    bounds = {}\n    n = len(stdin)\n    for i, c in enumerate(stdin):\n        if c in vowels:\n            bounds[c] = i\n        else:\n            bounds[c] = i - 1\n    cache = {}\n\n    def f(start, i):\n        if start == n:\n            return 0\n        if i == n:\n            return f(start + 1, 0)\n        if (start, i) in cache:\n            return cache[(start, i)]\n        if stdin[start] in consonants:\n            cache[(start, i)] = 1 + min(\n                f(start + 1, i),\n                f(start + 1, i + 1),\n                (n - i) // 3,\n                (bounds[stdin[start]] - start) // 3,\n            )\n        else:\n            cache[(start, i)] = f(start + 1, i)\n        return cache[(start, i)]\n\n    return \" \".join(stdin[:n] + \" \" * f(0, 0))\nprint(solution(input()))\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    i = 0\n    j = 1\n    result = ''\n    while i < len(stdin):\n        if j < len(stdin) and stdin[j] in vowels:\n            i += 1\n            j += 1\n        elif j < len(stdin) and stdin[j] not in vowels:\n            result += stdin[j]\n            j += 1\n        if j < len(stdin) and stdin[j] in vowels:\n            result +=''\n            j += 1\n        elif j < len(stdin) and stdin[j] not in vowels:\n            result += stdin[j]\n            j += 1\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_typo(string: str) -> bool:\n        if len(string) < 3:\n            return False\n        if string.count('a') + string.count('e') + string.count('o') + string.count('u') == 0:\n            return False\n        if string.count('a') + string.count('e') + string.count('o') + string.count('u') == len(string):\n            return False\n        return True\n\n    def get_typo_positions(string: str) -> list:\n        if len(string) < 3:\n            return []\n        positions = []\n        if string[1] in ['a', 'e', 'o', 'u']:\n            positions.append(1)\n        for i in range(2, len(string)):\n            if string[i - 2]!= string[i] and (string[i - 2] in ['a', 'e', 'i', 'o', 'u'] or string[i] in ['a', 'e', 'i', 'o', 'u']):\n                positions.append(i)\n            if string[i] in ['a', 'e', 'i', 'o', 'u'] and string[i - 1] in ['a', 'e', 'i', 'o', 'u'] and string[i - 2] in ['a', 'e', 'i', 'o', 'u']:\n                positions.append(i)\n        return positions\n\n    string = stdin\n    typo_positions = get_typo_positions(string)\n    if len(typo_positions) == 0:\n        return string\n    else:\n        new_string = string[:typo_positions[0]]\n        for i in range(len(typo_positions)):\n            if i!= len(typo_positions) - 1:\n                new_string = new_string +'' * (typo_positions[i + 1] - typo_positions[i])\n            else:\n                new_string = new_string + string[typo_positions[i]:]\n        return new_string\n\nprint(solution(\"hellno\"))\nprint(solution(\"abacaba\"))\nprint(solution(\"asdfasdf\"))\n\n\nimport re\ndef"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = stdin\n    prev_consonants = ''\n    cur_consonants = ''\n    spaces_count = 0\n    for letter in result:\n        if letter in vowels:\n            prev_consonants = cur_consonants\n            cur_consonants = ''\n            spaces_count = 0\n            continue\n        cur_consonants += letter\n        if prev_consonants!= '':\n            if cur_consonants in prev_consonants:\n                if len(cur_consonants) == 1:\n                    spaces_count = 0\n                else:\n                    spaces_count += len(prev_consonants) // (len(cur_consonants) - 1)\n            else:\n                spaces_count += 1\n    result_list = result.split(' ')\n    result_list_with_spaces = []\n    for i in range(len(result_list)):\n        if i == 0:\n            result_list_with_spaces.append(result_list[i] + (''* spaces_count))\n        elif i == len(result_list) - 1:\n            result_list_with_spaces.append((result_list[i] +'' * spaces_count))\n        else:\n            result_list_with_spaces.append(result_list[i] + (''* spaces_count))\n    result_list_with_spaces = list(set(result_list_with_spaces))\n    if len(result_list_with_spaces) == 1:\n        print(result)\n    else:\n        result_list_with_spaces.sort(key=len)\n        for i in result_list_with_spaces:\n            print(i)\n        return result"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    vowel = set(\"aeiou\")\n    cnt = 0\n    res = []\n    for i in stdin:\n        if i in vowel:\n            res.append(i)\n        else:\n            cnt += 1\n    if cnt > 2:\n        return stdin\n    else:\n        if len(res) == len(stdin):\n            return stdin\n        else:\n            for i in range(len(stdin)):\n                if stdin[i] in vowel:\n                    res.append(stdin[i])\n                else:\n                    res.append(\" \")\n            return \"\".join(res)\n    return stdin\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    check_vowel = lambda l: any(v in l for v in 'aeiou')\n    result = stdin\n    t = False\n    c = 0\n    for i in range(len(stdin)):\n        if stdin[i] in 'aeiou':\n            c += 1\n        else:\n            if c >= 3:\n                c = 0\n                result = result[:i] +'' + result[i:]\n                t = True\n            else:\n                c = 0\n        if i == len(stdin) - 1:\n            if c >= 3:\n                result = result[:i+1] +'' + result[i+1:]\n                t = True\n            else:\n                pass\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    pass"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(' ')))\n    x, s = list(map(int, stdin.split(' ')))\n    a, b, c, d = [], [], [], []\n    for i in range(m):\n        a.append(int(stdin.split(' ')[2 * i + 1]))\n        b.append(int(stdin.split(' ')[2 * i + 2]))\n    for i in range(k):\n        c.append(int(stdin.split(' ')[2 * m + 2 * i + 1]))\n        d.append(int(stdin.split(' ')[2 * m + 2 * i + 2]))\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    time = 0\n    mana = 0\n    for i in range(m):\n        if (mana + a[i]) > s:\n            break\n        mana += a[i]\n        time += (x - a[i]) * b[i]\n    for i in range(k):\n        if (mana + c[i]) > s:\n            break\n        mana += c[i]\n        time += (x - c[i]) * d[i]\n    return time\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, s, m = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    b = list(map(int, stdin.split(\"\\n\")[2].split(\" \")))\n    c = list(map(int, stdin.split(\"\\n\")[3].split(\" \")))\n    d = list(map(int, stdin.split(\"\\n\")[4].split(\" \")))\n    # a = [1, 2, 2, 3, 3]\n    # b = [4, 6, 7, 5, 5]\n    # c = [1, 1, 1, 1, 1]\n    # d = [1, 2, 3, 4, 6]\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    print(a, b, c, d)\n    current_max = 0\n    result = 0\n    for i in range(m):\n        current_max = max(current_max, b[i])\n        if i < len(c):\n            result += c[i]*current_max\n        else:\n            result += b[i]*current_max\n    for i in range(len(a)):\n        result += a[i]*current_max\n    result += s\n    return result"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    c = sorted(c, reverse=True)\n    d = sorted(d, reverse=True)\n    a.sort()\n    b.sort()\n    print(a,b,c,d)\n    print(a,b,c,d)\n    i = 0\n    j = 0\n    cnt = 0\n    s = s\n    while cnt < n and i < len(a) and j < len(b) and k > 0:\n        if s >= a[i] and c[k - 1] >= j + 1 and s >= b[j] and k > 0:\n            cnt += 1\n            if cnt == n:\n                break\n            s -= a[i]\n            s -= b[j]\n            s += c[k - 1]\n            s -= d[j]\n            i += 1\n            j += 1\n            k -= 1\n        elif s >= a[i] and c[k - 1] >= j + 1:\n            s -= a[i]\n            s -= b[j]\n            s += c[k - 1]\n            s -= d[j]\n            i += 1\n            j += 1\n            k -= 1\n        elif s >= b[j]:\n            s -= b[j]\n            s += c[k - 1]\n            s -= d[j]\n            j += 1\n            k -= 1\n        else:\n            k -= 1\n            s -= d[j]\n    print(cnt,s,i,j,k)\n    if cnt < n:\n        print(s)\n    return cnt\n\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 200 100 400 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 200 100 400 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 200 100 400 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100 80 4\"))\nprint(solution(\"20 3 2 2 4 3 15 20 10 40 4 5\"))\nprint(solution(\"20 3 2 10 99 2 4 3 20 10 40 4 15 100"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # A - list of preparation times of potions\n    # B - list of preparation times of spells\n    # C - list of quantity of potions prepared instantly\n    # D - list of quantity of spells\n    A, B, C, D = [int(n) for n in stdin.split()]\n    # preparing 5 potions instantly\n    res = C * 5\n    # preparing 1 potion\n    res += A + (B - C) * (C // D)\n    return str(res)\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    x, s = [int(x) for x in stdin.split(' ')]\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    sp, mn = 0, 0\n    for i in range(m):\n        if a <= sp and a <= mn:\n            sp = sp - a + b\n        else:\n            mn = mn - a + b\n        if c <= sp and c <= mn:\n            sp = sp - c + d\n        else:\n            mn = mn - c + d\n    return sp if sp >= s else -1\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    x, s = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n\n    ans = 0\n    for i in range(m):\n        if a[i] < x:\n            ans += x - a[i]\n    for i in range(k):\n        if c[i] > n:\n            break\n        else:\n            ans += n - c[i]\n            ans += s\n            ans -= c[i]\n            s = 0\n            for j in range(i + 1, k):\n                if d[j] < d[i]:\n                    break\n                else:\n                    ans += d[j] - d[i]\n                    ans += s\n                    s = 0\n                    if d[j] > x:\n                        ans += d[j] - x\n                        s = x - d[i]\n    print(ans)\n\n    return ''\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Please use a function to get data from input\n    n, k, m = list(map(int, stdin.split('\\n')[0].split()))\n    tasks = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # Please use a function to get data from input\n    points = 0\n    for i in range(k):\n        points += (i + 1) * n\n    \n    points += max([(m // t) * t for t in tasks])\n    \n    return str(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingZU5F3Y-AXU/\n    \"\"\"\n    n, k, m = [int(s) for s in stdin.split()]\n    t = [int(s) for s in stdin.split()]\n    t = sorted(t)\n    m = m % sum(t)\n    if m == 0:\n        m = sum(t)\n    points = 0\n    for i in range(k):\n        points += m // t[i]\n        if points >= n:\n            return str(i + 1)\n    return str(k + 1)\n\n\nassert solution(\"3 4 11\") == \"6\"\nassert solution(\"5 5 10\") == \"7\"\n\"\"\"\nn, k, m = 5, 5, 10\nt = [1, 2, 4, 8, 16]\nn, k, m = 3, 4, 11\nt = [1, 2, 3, 4]\n\nn, k, m = 3, 4, 10\nt = [1, 2, 4, 8]\nn, k, m = 2, 3, 10\nt = [2, 2, 2]\n\nn, k, m = 3, 4, 3\nt = [1, 2, 3]\nn, k, m = 2, 3, 3\nt = [1, 2]\n\"\"\"\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys;\n    sys.stdin = open(\"test.in\")\n    tasks, time_limit = [int(i) for i in stdin.split()]\n    tasks_list = [int(i) for i in stdin.split()]\n    \n    return tasks_list\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nn, k, m = [int(x) for x in stdin.split(\" \")]\n\nt = [int(x) for x in stdin.split(\" \")]\n\np = [0] * n\nfor i in range(k):\n    p[i] = t[i]\n\nfor i in range(k, n):\n    p[i] = p[i - k] + t[i]\n\ns = 0\nfor i in range(k):\n    s += p[i]\n    if s > m:\n        break\n\nprint(i + 1)\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # print(stdin)\n    n, k, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    t = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    print(n, k, m)\n    print(t)\n    return str(n * k + max(sum(t[i::k]) for i in range(k)))\n\nprint(solution('''5 5 10\n1 2 4 8 16'''))\n\ndef"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the maximum number of points Polycarp can earn in M minutes.\n\n    Args:\n        stdin (str): The input of the problem.\n\n    Returns:\n        str: The string representation of the maximum number of points Polycarp can earn in M minutes.\n\n    \"\"\"\n\n    n, k, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    tasks.sort(reverse=True)\n    result = 0\n\n    for i, task in enumerate(tasks, start=1):\n        if m >= task:\n            m -= task\n            result += i\n        else:\n            break\n\n    return str(result + 1 if m == 0 else result)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \ndef"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nn, k, m = map(int, stdin.split())\na = list(map(int, stdin.split()))\npoints = 0\nfor j in range(k):\n    points += min(a[j], m // a[j])\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(divmod(n*n, 2)[0])\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    return str(countStripedBSTs(n))\ndef"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Your code goes here\n    return \"\"\n    pass"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    return 0"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    \n    def dfs(x, y, visited):\n        if (x, y) in visited:\n            return (x, y)\n        visited.add((x, y))\n        \n        for i, j in [(x, y + 1), (x, y - 1), (x + 1, y), (x - 1, y)]:\n            if (i, j) not in visited and 1 <= i < n and 1 <= j < m:\n                dfs(i, j, visited)\n                \n        return (x, y)\n    \n    def print_position(pos):\n        print(str(pos[0]) +'' + str(pos[1]))\n    \n    print_position(dfs(1, 1, set()))\n    \n    return ''\n\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    if k % (n * m) == 0:\n        return '{} {}'.format(1, 1)\n    else:\n        x = k % (n * m)\n        if x % n == 0:\n            return '{} {}'.format(1, k // n + 1)\n        else:\n            return '{} {}'.format(k // m + 1, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m, k = map(int, stdin.split())\nmatrix = [[0 for _ in range(m)] for _ in range(n)]\nmatrix[0][0] = 1\nfor i in range(n):\n    matrix[i][0] = 1\nfor i in range(m):\n    matrix[0][i] = 1\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for i in range(n//2):\n        for j in range(m-1):\n            k -= 1\n            if k % m == 0:\n                print(i+1, j+1)\n    return ''\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if (n % 2 == 0):\n        i = 1\n    else:\n        i = 0\n    if (m % 2 == 0):\n        j = 1\n    else:\n        j = 0\n    if (k % (n * m) == 0):\n        return str(i + 1) +'' + str(j + 1)\n    else:\n        return str(i + 2) +'' + str(j + 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    k %= n * m\n\n    r = n % 2\n    c = n if r == 0 else m\n\n    if k < r:\n        k = k % r\n        if k == 0:\n            r -= 1\n            k = r\n    elif k >= r:\n        k = k - r\n\n    r += k\n    c -= k\n    return str(r) + \" \" + str(c)\n\nprint(solution(input()))"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = list(map(int, stdin.split(' ')))\n    print(a[1]%a[0], a[2]%a[1])\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, y = (1, 1)\n    for _ in range(k):\n        x, y = (1 + (x + m - 1) // m, 1 + (y + n - 1) // n)\n    print(f'{x} {y}')\nsolution(input())\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    row, column, k = [int(x) for x in stdin.split()]\n    return \"{} {}\".format(row - k, column - k)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    #     return None\n    x = int(stdin)\n    \n    if x == 1:\n        print(1, 1)\n    elif x == 2:\n        print(2, 3)\n    elif x == 3:\n        print(3, 4)\n    elif x == 4:\n        print(1, 4)\n    elif x == 5:\n        print(2, 5)\n    elif x == 6:\n        print(2, 3)\n    elif x == 7:\n        print(4, 7)\n    elif x == 8:\n        print(2, 6)\n    elif x == 9:\n        print(3, 5)\n    elif x == 10:\n        print(3, 6)\n    elif x == 11:\n        print(4, 7)\n    elif x == 12:\n        print(3, 6)\n    else:\n        print(x)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    def gcd(a, b):\n        if a == 0:\n            return b\n        elif b == 0:\n            return a\n        elif a == b:\n            return a\n        elif a > b:\n            return gcd(a - b, b)\n        else:\n            return gcd(a, b - a)\n    \n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n    \n    for a in range(1, X + 1):\n        for b in range(a + 1, X + 1):\n            if lcm(a, b) == X:\n                return str(a) +'' + str(b)"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(1, x):\n        if x % i == 0:\n            a = i\n            for j in range(a, x):\n                if x % j == 0:\n                    b = j\n                    if a < b and x % (a * b) == 0:\n                        return f'{a} {b}'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x = int(stdin)\n    if x == 1:\n        print(\"1 1\")\n        return None\n    for a in range(1, x):\n        for b in range(1, x):\n            if (a * b) % x == 0 and a * b > x:\n                print(str(a), str(b))\n                return None\n    return None\n    pass\n\nsolution(input())\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(\"\\n\")[0]))"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # create input\n    lcm_input = stdin\n    x = int(lcm_input)\n    # init result\n    result = None\n\n    # solve\n    for i in range(1, 10**12):\n        if x % i == 0:\n            # check if this is a solution\n            if x // i == 1:\n                result = [i, i]\n            else:\n                # check if we have found a better solution\n                if result is None:\n                    result = [i, x // i]\n                # compare\n                if result[1] > x // i:\n                    result = [i, x // i]\n    # check if we have any results\n    if result is None:\n        print(\"Impossible\")\n    else:\n        # return\n        print(result[0], result[1])\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b//2 < a:\n        if c//4 < a:\n            return 0\n        else:\n            return (c//4)//2\n    else:\n        if c//2 < b:\n            return (c//2)//2\n        else:\n            return b//2\n\nsolution(input())\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate number of lemons, apples and pears to bake compote\n    :param stdin: string with input\n    :return: string with number of lemons, apples and pears\n    \"\"\"\n\n    lemon_count = stdin[0]\n    apple_count = stdin[1]\n    pear_count = stdin[2]\n\n    lemon_count_as_int = int(lemon_count)\n    apple_count_as_int = int(apple_count)\n    pear_count_as_int = int(pear_count)\n\n    # make a variable for result\n    max_lemon = lemon_count_as_int\n    max_apple = apple_count_as_int\n    max_pear = pear_count_as_int\n\n    # we need to find the least number of lemon, apple and pear to make this compote\n    # so we'll have to subtract from the greatest number\n    # from this we'll subtract from lemon, apple and pear the number of fruits which are lower than them\n\n    # get the number of fruits which are lower than lemon_count\n    lemon_count_less = lemon_count_as_int - lemon_count_as_int // 2\n    if lemon_count_less < 0:\n        lemon_count_less = 0\n\n    # get the number of fruits which are lower than apple_count\n    apple_count_less = apple_count_as_int - apple_count_as_int // 2\n    if apple_count_less < 0:\n        apple_count_less = 0\n\n    # get the number of fruits which are lower than pear_count\n    pear_count_less = pear_count_as_int - pear_count_as_int // 2\n    if pear_count_less < 0:\n        pear_count_less = 0\n\n    # count the sum of fruits which are less then lemon\n    lemon_sum_less = lemon_count_less + lemon_count_less // 2\n    if lemon_count_less % 2 == 1:\n        lemon_sum_less += 1\n\n    # count the sum of fruits which are less then apple\n    apple_sum_less = apple_count_less + apple_count_less // 2\n    if apple_count_less % 2 == 1:\n        apple_sum_less += 1\n\n    # count the sum of fruits which are less then pear\n    pear_sum_less = pear_count_less + pear_count_less // 2\n    if pear_count_less % 2 == 1:\n        pear_sum_less += 1\n\n    # calculate the number of fruits which are higher then lemon\n    lemon_count_greater = max_lemon - max_lemon // 2\n    if max_lemon % 2 == 1:\n        lemon_count_greater += 1\n\n    # calculate the number of fruits which are higher then apple\n    apple_count_greater = max_apple - max_apple // 2\n    if max_apple % 2 == 1:\n        apple_count_greater += 1\n\n    # calculate the number of fruits which are higher then pear\n    pear_count_greater = max_pear - max_pear // 2\n    if max_pear % 2 == 1:\n        pear_count_greater += 1\n\n    # calculate the sum of fruits which are higher then lemon\n    lemon_sum_greater = lemon_count_greater + lemon_count_greater // 2\n    if lemon_count_greater % 2 == 1:\n        lemon_sum_greater += 1\n\n    # calculate the sum of fruits which are higher then apple\n    apple_sum_greater = apple_count_greater + apple_count_greater // 2\n    if apple_count_greater % 2 == 1:\n        apple_sum_greater += 1\n\n    # calculate the sum of fruits which are higher then pear\n    pear_sum_greater = pear_count_greater + pear_count_greater // 2\n    if pear_count_greater % 2 == 1:\n        pear_sum_greater += 1\n\n    # calculate the max amount of fruits which can be used\n    max_amount = max_lemon - lemon_sum_less + lemon_sum_greater\n    max_amount = max_amount + max_apple - apple_sum_less + apple_sum_greater\n    max_amount = max_amount + max_pear - pear_sum_less + pear_sum_greater\n\n    # return the answer\n    return str(max_amount)"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lemon, apple, pear = [int(x) for x in stdin.split()]\n    print(lemon // 2 + apple // 4 + pear // 4)"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, a, p = map(int, stdin.split('\\n'))\n\n    x, y, z = 2, 4, 16\n    s = 1\n\n    while x * a >= s * z:\n        s += 1\n    while x * a + y * p < s * z:\n        s -= 1\n    return str(s)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lemon = int(stdin.split(\"\\n\")[0])\n    apple = int(stdin.split(\"\\n\")[1])\n    pear = int(stdin.split(\"\\n\")[2])\n    \n    if apple == 0 and pear == 0:\n        return 0\n    \n    if apple == 0:\n        max_lemon = lemon // pear\n        return max_lemon\n    \n    if pear == 0:\n        max_apple = apple // lemon\n        return max_apple\n    \n    if lemon == 0:\n        max_pear = pear // apple\n        return max_pear\n    \n    max_lemon = lemon // pear\n    max_apple = apple // lemon\n    max_pear = pear // apple\n    \n    return (max_lemon + max_apple + max_pear)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(stdin) for _ in range(3)]\n    if a <= b and b <= c:\n        print(a+b)\n    elif a <= c and c <= b:\n        print(a+c)\n    elif b <= a and a <= c:\n        print(b+a)\n    elif b <= c and c <= a:\n        print(b+c)\n    elif c <= a and a <= b:\n        print(c+a)\n    elif c <= b and b <= a:\n        print(c+b)\n    else:\n        print(0)\n\n\ndef"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    lemon = stdin.split()[0]\n    apples = stdin.split()[1]\n    pears = stdin.split()[2]\n\n    max_lemon = int(lemon) // 2\n    max_apples = int(apples) // 2\n    max_pears = int(pears) // 2\n\n    max_count_lemon = max_count_apples = max_count_pears = 0\n\n    for i in range(max_lemon + 1):\n        for j in range(max_apples + 1):\n            for k in range(max_pears + 1):\n                if (i + j + k) == max_lemon:\n                    if max_count_lemon < (i * 2) + (j * 4) + (k * 2):\n                        max_count_lemon = i * 2 + j * 4 + k * 2\n                elif (i + j + k) > max_lemon:\n                    break\n    return max_count_lemon"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lemon, apple, pear = [int(i) for i in stdin.split('\\n')]\n    res = 0\n    while lemon > 0 and apple > 0 and pear > 0:\n        res += max(lemon, apple//2, pear//4)\n        if apple%2!= 0:\n            apple -= 1\n        if pear%4!= 0:\n            pear -= 1\n        if pear < 4:\n            break\n        lemon -= 1\n    return res\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lemon, apple, pear = [int(i) for i in stdin.split()]\n    \n    return str(min(lemon // 2, apple // 2, pear // 2))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    if len(a) == n*2:\n        if (max(a) == sum(a) + len(a)) and (min(a) == sum(a) - len(a)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_player = int(stdin.readline())\n    player_rating = [int(x) for x in stdin.readline().split(' ')]\n\n    num_of_teams = 2\n    team_size = num_of_player // num_of_teams\n    if team_size == 0:\n        print('NO')\n        return\n\n    player_rating.sort(reverse=True)\n    if (num_of_player % num_of_teams == 0):\n        if player_rating[0] == player_rating[1]:\n            print('NO')\n            return\n        else:\n            print('YES')\n            return\n    if (num_of_player % num_of_teams == 1):\n        if player_rating[0] == player_rating[1] or player_rating[1] == player_rating[2]:\n            print('YES')\n            return\n        else:\n            print('NO')\n            return\n    if (num_of_player % num_of_teams == 2):\n        if player_rating[0] == player_rating[1] and player_rating[1] == player_rating[2]:\n            print('NO')\n            return\n        else:\n            print('YES')\n            return\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_players = int(stdin.readline())\n    players = [int(x) for x in stdin.readline().split()]\n    return \"YES\" if dfs(players, num_of_players) else \"NO\"\n\n\ndef"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    l = [i for i in range(1, n)]\n    print(len(set(a) - set(l)))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    if arr[n - 1] > arr[0]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out whether it is possible to divide all 2\u00b7n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing.\"\"\"\n    # get the number of players\n    n = int(stdin.readline())\n    # create the list with ratings\n    ratings = sorted([int(i) for i in stdin.readline().split()])\n\n    # loop through all possible pairs of teams\n    for team1 in range(n // 2 + 1):\n        # we have 2 teams\n        team2 = n - team1\n        # loop through all possible places in the team1\n        for team1_place in range(team1 + team2):\n            # if team1_place has not been filled yet\n            if team1_place < team1:\n                # we should not put a player to the team1_place\n                # so we check if it is possible to put it there\n                if ratings[team1_place] < ratings[team1_place + team2]:\n                    break\n            # if team1_place has been filled already\n            else:\n                # we should put the player there\n                if ratings[team1_place] <= ratings[team1_place + team2]:\n                    break\n        # if we had a possibility to put a player to the team1_place\n        else:\n            # then there is a possible answer\n            return \"YES\"\n    # if we didn't return yet\n    return \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2\\n1 3 2 4\")\n    'YES'\n    >>> solution(\"3\\n2 5 1 3\")\n    'YES'\n    >>> solution(\"3\\n3 4 1 2\")\n    'NO'\n    '''\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    if n % 2 == 0:\n        return \"NO\"\n    a.sort()\n    team_1 = []\n    team_2 = []\n    for i in range(n // 2):\n        if a[i] < a[-(i + 1)]:\n            team_1.append(a[i])\n            team_2.append(a[-(i + 1)])\n        else:\n            team_1.append(a[-(i + 1)])\n            team_2.append(a[i])\n    return \"YES\" if len(team_1) >= n // 2 else \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    arr.sort()\n    if arr[-1] < n:\n        return \"NO\"\n    teams = []\n    for i in range(n):\n        if arr[i] == arr[i + 1]:\n            continue\n        teams.append(arr[i])\n        teams.append(arr[i + 1])\n        if len(teams) == n:\n            break\n    if len(teams)!= n:\n        return \"NO\"\n    if teams[0] < teams[n - 1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    length = int(stdin.readline().strip())\n    list1 = list(map(int, stdin.readline().strip().split()))\n    dict1 = {}\n    dict1[2] = True\n    dict1[3] = True\n    dict1[5] = True\n    for item in list1:\n        if item % 2 == 0:\n            dict1[2] = False\n        if item % 3 == 0:\n            dict1[3] = False\n        if item % 5 == 0:\n            dict1[5] = False\n    if dict1[2] == True and dict1[3] == True and dict1[5] == True:\n        print(0)\n    else:\n        print(1)\n        flag = True\n        i = 1\n        while flag:\n            if (list1[i] % 2 == 0 and list1[i - 1] % 3 == 0) or (list1[i] % 3 == 0 and list1[i - 1] % 2 == 0):\n                list1[i] = list1[i] + 1\n                list1[i - 1] = list1[i - 1] + 1\n                if list1[i] > 10**9:\n                    list1[i] = list1[i] % 10**9\n                if list1[i - 1] > 10**9:\n                    list1[i - 1] = list1[i - 1] % 10**9\n                i = i + 1\n                if i == length:\n                    print(i)\n                    flag = False\n            else:\n                flag = False\n    return 0\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n\n    n = len(a)\n    k = 0\n    for i in range(n):\n        if gcd(a[i], a[(i + 1) % n])!= 1:\n            k += 1\n    if k > 0:\n        for i in range(n):\n            a[i] += k\n    print(k)\n    print(' '.join([str(i) for i in a]))\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n7 2 28\")\n    1\n    >>> solution(\"3\\n7 2 2\")\n    0\n    >>> solution(\"3\\n7 7 7\")\n    1\n    >>> solution(\"3\\n7 7 7\\n7 7 7\")\n    0\n    >>> solution(\"4\\n7 2 2\\n7 7 7\")\n    1\n    >>> solution(\"4\\n7 2 2\\n7 7 7\\n7 7 7\")\n    0\n    >>> solution(\"5\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\")\n    1\n    >>> solution(\"5\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\")\n    0\n    >>> solution(\"5\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\")\n    0\n    >>> solution(\"6\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\")\n    1\n    >>> solution(\"6\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\\n7 7 7\")\n    0\n    \"\"\"\n   ...\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line)\n    array = list(map(int, line.split()))\n\n    non_prime_numbers = set()\n    prime_numbers = set()\n    for i in range(1, int(max(array) ** 0.5) + 1):\n        for j in range(2, max(array) + 1):\n            if i * j in array:\n                non_prime_numbers.add(i * j)\n                if j not in array:\n                    prime_numbers.add(j)\n\n    if len(prime_numbers) == 0:\n        return -1\n    else:\n        non_prime_numbers = non_prime_numbers.difference(prime_numbers)\n        return len(non_prime_numbers)\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    k = 0\n    while gcd(a[k], a[k + 1])!= 1:\n        k += 1\n    return n + k\n\n\ndef"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    mydict = dict()\n    for x in stdin.split('\\n'):\n        x = x.split()\n        mydict[x[0]] = x[1:]\n    s = 0\n    for x in mydict:\n        s += int(x)\n    if s % 2!= 0:\n        return '-1'\n    for x in mydict:\n        for y in mydict[x]:\n            if (int(x) % int(y))!= 0:\n                return '-1'\n    return s\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = stdin.split('\\n')\n    x = int(k[0])\n    y = list(map(int, k[1].split(' ')))\n    print(k[0])\n    print(' '.join(str(x) for x in y))\n    z = k[1]\n    for x in range(1, x):\n        print(z)\n        if y[0] % y[x] == 0:\n            z = z + str(y[0])\n            y.append(int(z))\n            z = ''\n            y.pop(0)\n            print(y)\n        else:\n            z = z + str(y[0])\n            y.append(int(z))\n            z = ''\n            y.pop(0)\n            print(y)\n        if x == x:\n            break\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Solution goes here\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    \n    count = 0\n    while True:\n        new_b = []\n        for i in range(len(b)):\n            if b[i]!= 1:\n                new_b.append(b[i])\n            else:\n                new_b.append(int((b[i] + 1) / 2))\n        if max(new_b) > 1:\n            b = new_b\n            count += 1\n        else:\n            break\n    \n    return count\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nfrom itertools import product\nfrom math import gcd\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import gcd\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n\n    :param stdin: standard input\n    :return: the solution\n    \"\"\"\n\n    n, k = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n\n    # compute positive integer that divides every element of A\n    def gcd(a, b):\n        \"\"\"\n        Compute the greatest common divisor of a and b\n\n        :param a: first integer\n        :param b: second integer\n        :return: the greatest common divisor\n        \"\"\"\n\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        \"\"\"\n        Compute the least common multiple of a and b\n\n        :param a: first integer\n        :param b: second integer\n        :return: the least common multiple\n        \"\"\"\n\n        return int(a * b / gcd(a, b))\n\n    def max_divisor(a):\n        \"\"\"\n        Compute the maximum divisor of a that is smaller than the gcd of a and a itself\n\n        :param a: the number\n        :return: the maximum divisor\n        \"\"\"\n\n        i = 2\n        while i <= gcd(a, i):\n            if a % i == 0:\n                return i\n            i += 1\n        return 1\n\n    # compute the LCM of every element in A\n    lcm_A = 1\n    for el in A:\n        lcm_A = lcm(lcm_A, el)\n    # compute the LCM of every element in A after performing K operations\n    lcm_A_k = 1\n    for i in range(0, k):\n        lcm_A_k = lcm(lcm_A_k, lcm_A)\n\n    # compute the gcd of every element in A\n    gcd_A = max_divisor(A[0])\n    for el in A[1:]:\n        gcd_A = gcd(gcd_A, el)\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = max_divisor(A[0])\n    for el in A[1:]:\n        gcd_A_k = gcd(gcd_A_k, el)\n\n    # compute the LCM of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the LCM of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the lcm of every element in A after performing K operations\n    lcm_A_k = lcm_A_k / lcm_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every element in A after performing K operations\n    gcd_A_k = gcd_A_k / gcd_A\n\n    # compute the gcd of every"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Read in the number of integers and the integers.\n    Check that the input is valid.\n    \"\"\"\n    n, k = [int(num) for num in stdin.split(\"\\n\")[0].split(\" \")]\n    A = [int(num) for num in stdin.split(\"\\n\")[1].split(\" \")]\n\n    if n!= len(A) or k < 1:\n        return \"Invalid Input\"\n\n    for number in A:\n        if number < 1 or number > k * 10 ** 6:\n            return \"Invalid Input\"\n\n    return solution_helper(A, k)\n\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    l = sorted(a, reverse=True)\n    i = 0\n    while i < k:\n        try:\n            a[l.index(l[i])] += 1\n            a[l.index(l[i+1])] -= 1\n        except:\n            pass\n        i += 2\n    l = sorted(a)\n    return '\\n'.join(['\\n'.join(str(x) for x in l)])\n    \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split(' '))\n    a = map(int, stdin.split(' '))\n    tmp = set()\n    for i in range(k):\n        x = next(a)\n        y = next(a)\n        if x!= y:\n            tmp.add(x + 1)\n            tmp.add(-1 * y)\n    return str(max(tmp))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    while count < 40:\n        if x % 2 == 0:\n            x += 1\n            count += 1\n        else:\n            x ^= (1 << count)\n            x += 1\n            count += 2\n    return count\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while i <= 40:\n        if x == 1:\n            return \"0\"\n        if i % 2 == 1:\n            x ^= (2 ** (i // 2)) - 1\n        else:\n            x += 1\n        i += 1\n    return \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for catfurrier.\n\n    Parameters\n    ----------\n    stdin : str\n        String to process.\n\n    Returns\n    -------\n    str\n        Solution string.\n    \"\"\"\n    return stdin"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of operations needed to transform the number\n    from 1 to the number of bits in the binary representation of the input.\n    '''\n    x = int(stdin)\n    binary_x = bin(x)\n    number_of_bits = len(binary_x) - 2\n    operations = 0\n    while x > 1:\n        if operations % 2 == 0:\n            x = x ^ (2 ** (number_of_bits - 1))\n            operations += 1\n        else:\n            x += 1\n            operations += 1\n        binary_x = bin(x)\n        number_of_bits = len(binary_x) - 2\n    return str(operations)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"39\")\n    '4 5 3'\n    >>> solution(\"1\")\n    '0'\n    >>> solution(\"7\")\n    '0'\n    \"\"\"\n    \n    def transform(x, N):\n        for i in range(0, N, 2):\n            x ^= (1 << (x & -x))\n        return x\n    \n    return''.join(map(str, [len(list(filter(lambda x: x > 0, (transform(int(stdin), N) for N in range(40))))) // 2 for N in range(40)]))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = 0\n    while x > 0:\n        if x % 2 == 1:\n            if n < 40:\n                x = x ^ (2 ** (n + 1) - 1)\n                n = n + 1\n            else:\n                break\n        else:\n            x = x + 1\n    return str(n)\n\nprint(solution(\"39\"))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split(' '))\n    a = map(int, stdin.split(' '))\n    a.sort()\n    count = 0\n    for i in range(0, len(a)):\n        if count + a[i] > k:\n            return count + a[i] - k\n        count += a[i]\n    return count\n\ndef"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return result"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'hello world'"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # count hours\n    # max(a) * n + sum(a)\n    # get the value that is smallest to get the most options\n    return \"\"\n\"\"\"\n--- 7. Cyclically shifting array ---\nA cyclically shifting array is an array that can be rotated by some number of elements. We'll say that two arrays are cyclically shifting if the one is cyclically shifted to the right by some number of elements is equal to the other.\n\nWrite a function that determines whether two arrays are cyclically shifting.\n\nExample\nFor a = [1, 2, 3, 4, 5] and b = [3, 4, 5, 1, 2], the output should be true.\n\nFor a = [1, 2, 3, 4, 5] and b = [5, 1, 2, 3, 4], the output should be true.\n\nFor a = [1, 2, 3, 4, 5] and b = [1, 2, 3, 4, 5], the output should be false.\n\nFor a = [1, 2, 3, 4, 5] and b = [1, 2, 3, 4, 5], the output should be false.\n\nFor a = [1, 2, 3, 4, 5] and b = [3, 5, 1, 2, 4], the output should be false.\n\nInput\nEach of the first four lines of input contains an integer array a. The subsequent lines each contain an array b.\n\nAll of the arrays contain only integers.\n\nOutput\nEach of the first two lines of output should contain the word \"true\" or \"false\". The third line should contain the number of integers in a that are equal to the corresponding value of b. The fourth line should contain the number of integers in a that are equal to the corresponding value of b.\n\nExample\nInput\n3\n3 4 5\n4 3 5 1 2\n4 5 1 2 3\n5 5 5 5\n5 4 1 2 3\n3 4 5\n3 4 5\n5 5 5\n5 4 1 2 3\n5 5 5\n5 4 1 2 3\n5 5 5\n5 4 1 2 3\nOutput\ntrue 1 4\ntrue 2 2\nfalse 1\n\n-----Sample Output-----\ntrue 1 4\ntrue 2 2\nfalse 1\n\n\"\"\"\nimport numpy as np\n\ndef"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split()\n    k = int(k)\n    grid = stdin.split()\n    n = len(grid)\n    queue = [[(0, 0)]]\n    visited = set(queue[0])\n    while queue:\n        current = queue.pop(0)\n        for i in range(len(current)):\n            if current[i][1] == n - 1:\n                return \"YES\"\n            if current[i][1] + k < n and (current[i][1] + k, current[i][1]) not in visited:\n                queue.append(current[:i] + [(current[i][0] + 1, current[i][1] + k)] + current[i + 1:])\n                visited.add((current[i][1] + k, current[i][1]))\n    return \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    field = stdin.split()\n\n    for r in range(n):\n        if 'T' in field[r]:\n            target = r\n    \n    current = field.index('G')\n\n    for i in range(k):\n        # Jumping to the left\n        if current - i >= 0 and field[current - i] == '.':\n            current -= i\n            continue\n        # Jumping to the right\n        if current + k < n and field[current + k] == '.':\n            current += k\n            continue\n        break\n    \n    # If current is not equal to target\n    if current!= target:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [row for row in stdin.split('\\n')]\n    #print(stdin)\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    arr = stdin[1].replace('G', 'T')\n    #print(arr)\n    curr_pos = 0\n    for i in range(1, len(arr)):\n        if arr[i] == 'T' and arr[i-1] == '.' and curr_pos - i == k:\n            curr_pos = i\n            break\n        elif arr[i] == 'T' and arr[i-1] == '.' and curr_pos - i > k:\n            return 'NO'\n    if curr_pos == 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    line = stdin.split('\\n')[0]\n    line = line.replace('#', '.')\n    line = line.replace('T', 'G')\n    line = list(line)\n    x = 0\n    while x < n:\n        if line[x] == 'G':\n            break\n        x += 1\n    else:\n        return 'NO'\n    count = 0\n    while x < n and x - count * k > 0:\n        if line[x] == 'G':\n            x += k\n            count += 1\n        elif line[x] == 'T':\n            x += k\n        elif line[x] == '.':\n            x += 1\n    return 'YES'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k > n - 1:\n        return 'NO'\n    lst = list(stdin)\n    if 'G' in lst:\n        start = lst.index('G')\n    elif 'T' in lst:\n        start = lst.index('T')\n    else:\n        return 'NO'\n    if start!= 0 and start!= n - 1:\n        return 'NO'\n    lst = lst[start:]\n    for i in range(len(lst)):\n        if lst[i] == '#':\n            return 'NO'\n    if start == 0:\n        lst = list(lst)\n        lst.append('.')\n        lst.insert(0, '.')\n        lst = ''.join(lst)\n        start = 1\n    else:\n        lst = list(lst)\n        lst.append('.')\n        lst.insert(0, '.')\n        lst = ''.join(lst)\n        start = n - 1\n    s = k\n    while True:\n        if s == 0:\n            return 'NO'\n        for i in range(start, start - s, -1):\n            if lst[i] == '.':\n                if i == n - 1 and lst[i + 1] == 'T':\n                    return 'YES'\n                elif i + 1 == n and lst[i - 1] == 'T':\n                    return 'YES'\n                elif i + 1 < n and lst[i + 1] == 'T':\n                    return 'YES'\n                elif i - 1 >= 0 and lst[i - 1] == 'T':\n                    return 'YES'\n                elif i - 1 >= 0 and lst[i - 1] == '#':\n                    return 'NO'\n                elif i + 1 < n and lst[i + 1] == '#':\n                    return 'NO'\n                else:\n                    return 'NO'\n        s -= 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = stdin.split()[0]\n    if k % 2 == 0:\n        return 'NO'\n    for i in range(n - k):\n        if a[i + k] == 'G':\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    c = list(stdin)\n    if 'G' in c and 'T' in c:\n        if n % k:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439.\n    # \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 k.\n    # \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 n \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 '.' (\u043f\u0443\u0441\u0442\u043e\u0439 \u043a\u043b\u0435\u0442\u043a\u0438), '#' (\u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u043e\u043b\u044f) \u0438 'G' (\u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430).\n\n    # \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440,\n    # \u0435\u0441\u043b\u0438 \u043f\u0443\u0442\u044c \u0434\u043b\u0438\u043d\u043e\u0439 5 \u0438 \u0432 \u043a\u043b\u0435\u0442\u043a\u0435 4 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0445\u043e\u0434\u044b, \u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0432\u0438\u0434\u0435\n    # [[4, 3, 2, 1, 0], [4, 3, 2, 0, 1], [4, 3, 1, 2, 0], [4, 3, 0, 2, 1], [4, 2, 3, 1, 0],\n    #  [4, 2, 3, 0, 1], [4, 2, 1, 3, 0], [4, 2, 0, 3, 1], [4, 1, 3, 2, 0], [4, 0, 3, 2, 1],\n    #  [3, 4, 2, 1, 0], [3, 4, 2, 0, 1], [3, 4, 1, 2, 0], [3, 4, 0, 2, 1], [3, 2, 4, 1, 0],\n    #  [3, 2, 4, 0, 1], [3, 2, 1, 4, 0], [3, 2, 0, 4, 1], [3, 1, 4, 2, 0], [3, 0, 4, 2, 1],\n    #  [2, 3, 4, 1, 0], [2, 3, 4, 0, 1], [2, 3, 1, 4, 0], [2, 3, 0, 4, 1], [2, 2, 3, 1, 0],\n    #  [2, 2, 3, 0, 1], [2, 2, 1, 3, 0], [2, 2, 0, 3, 1], [2, 1, 3, 2, 0], [2, 0, 3, 2, 1],\n    #  [1, 3, 2, 1, 0], [1, 3, 2, 0, 1], [1, 3, 1, 2, 0], [1, 3, 0, 2, 1], [1, 2, 3, 1, 0],\n    #  [1, 2, 3, 0, 1], [1, 2, 1, 3, 0], [1, 2, 0, 3, 1], [1, 1, 3, 2, 0], [1, 0, 3, 2, 1],\n    #  [0, 3, 2, 1, 0], [0, 3, 2, 0, 1], [0, 3, 1, 3, 0], [0, 3, 0, 3, 1], [0, 2, 3, 1, 0],\n    #  [0, 2, 3, 0, 1], [0, 2, 1, 3, 0], [0, 2, 0, 3, 1], [0, 1, 3, 2, 0], [0, 0, 3, 2, 1],\n    #  [1, 2, 1, 3, 0], [1, 2, 0, 3, 1], [1, 1, 3, 2, 0], [1, 0, 3, 2, 1], [0, 3, 1, 3, 0],\n    #  [0, 3, 0, 3, 1], [0, 2, 1, 3, 0], [0, 2, 0, 3, 1], [0, 1, 3, 2, 0], [0, 0, 3, 2, 1]]\n\n    # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u043a\u043b\u0435\u0442\u043a\u0438, \u0435\u0441\u043b\u0438 \u0432 \u043a\u043b\u0435\u0442\u043a\u0435 \u043d\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u0432 \u043a\u043b\u0435\u0442\u043a\u0435 \u0435\u0441\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435, \u0442\u043e \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0439\n    stdin = list(stdin)\n    stdin = list(map(lambda x: '.' if x == '.' else '#', stdin))\n\n    # \u0423\u0437\u043d\u0430\u0451\u043c \u0434\u043b\u0438\u043d\u0443 \u043f\u0443\u0442\u0438\n    n, k = map(int, stdin[0].split())\n\n    # \u0420\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u043c \u043f\u0443\u0442\u0435\u043c \u043f\u0435\u0440"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y1, y2, yw, xb, yb, r = map(int, stdin.split())\n    angle = 90\n    if y1 < y2 and y1 < yw < y2:\n        print('-1')\n        return\n    if y1 > y2 and yw < y2:\n        print('-1')\n        return\n    if y1 > y2 and yw > y2:\n        print('-1')\n        return\n    if xb == xw:\n        print('-1')\n        return\n    if yb + r >= yw:\n        print('-1')\n        return\n    if yw < yb + r:\n        print('-1')\n        return\n    if xb <= xw:\n        if xb <= y1:\n            print(xw)\n            return\n        if xb <= y2:\n            angle = 180\n        if xb > y1 and xb < yw:\n            angle = math.asin((xb - y1) / abs(y2 - y1)) * 180 / math.pi\n        if xb > y2 and xb < yw:\n            angle = 360 - math.asin((xb - y1) / abs(y2 - y1)) * 180 / math.pi\n        if xb > y2 and xb < yw and y2 - y1 == 0:\n            angle = 180\n        print('{0:.8f}'.format(yw - (yw - y1) * math.cos(angle * math.pi / 180) + xb * math.sin(angle * math.pi / 180)))\n        return\n    angle = math.asin((yb + r - yw) / abs(y2 - y1)) * 180 / math.pi\n    if xb < xw:\n        angle = 360 - angle\n    if xb < y1:\n        angle = 180\n    if xb < y2:\n        angle = 180 - angle\n    print('{0:.8f}'.format(yw - (yw - y1) * math.cos(angle * math.pi / 180) + xb * math.sin(angle * math.pi / 180)))\n\n\ndef"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if y_w + 2 * r < y_2 - y_1:\n        if (y_1 <= y_b <= y_w and x_b + 2 * r < x_b) or (y_1 <= y_b <= y_w and x_b < x_b + 2 * r):\n            print(0.0)\n            return\n        elif y_1 <= y_b <= y_w and x_b + 2 * r >= x_b:\n            print((y_2 - y_1 - y_w + 2 * r) / (2 * r))\n            return\n    else:\n        print(-1)\n        return\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f, g = [int(x) for x in stdin.split(' ')]\n\n    print(round(((d - c) * f - (a - b) * e) / ((d - c) * g - (a - b) * f), 8))\n\n    return ''\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport ast\nimport math\n\ndef"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = list(map(int, stdin.split(' ')))\n    if y_b + r >= y_w:\n        return '-1'\n\n    sin = (y_2 - y_1) / (2 * r)\n    cos = abs((x_b - y_w) / (2 * r))\n    sin, cos = round(sin, 8), round(cos, 8)\n\n    if cos <= sin <= 1:\n        return str(x_b)\n    return '-1'\n\"\"\"\n\ndef"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    y1, y2, yw, xb, yb, r = [int(x) for x in stdin.split(' ')]\n    m = ((y2-y1)/(x2-x1))\n    n = yb - (m*xb)\n    yw1 = (r*(n/m)) + yw\n    yw2 = yw - (r*(n/m))\n    if yw1 <= yw2:\n        return str(yw1)\n    else:\n        return '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_b, y_b, r, y_1, y_2, y_w = map(float, stdin.split())\n    if y_b + r < y_w:\n        x_w = x_b\n    elif y_b + r == y_w:\n        x_w = x_b - (y_b - y_w)\n    else:\n        x_w = x_b - (y_b - y_w) + (y_2 - y_1) / (y_1 - y_2) * (y_1 - y_b)\n\n    return str(round(x_w, 8))\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    return \"{:.8f}\".format(x_b - ((y_2 - y_1) ** 2 - (y_w - y_b) ** 2 - (y_b - y_1) ** 2) ** 0.5)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    goal_line = (y_1 + y_2) // 2\n    wall_line = y_w + r\n    ball_line = y_b + r\n    distance = abs((ball_line * ball_line - ball_line * ball_line + wall_line * wall_line) / (2 * ball_line))\n    x_w = wall_line - distance\n    if distance >= r:\n        x_w = distance\n    # print(x_w, goal_line, wall_line)\n    if abs(x_w - x_b) > r:\n        return \"-1\"\n    return f\"{x_w:.8f}\"\n    '''\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    x_w = ((y_2 - y_1) ** 2 - (y_2 - y_1) ** 2 + y_2 ** 2 + y_1 ** 2 - 2 * y_2 * y_1 * x_b - 2 * y_1 * y_2 * x_b - r ** 2 * (y_2 - y_1)) / 2 * (y_2 - y_1)\n    if abs(x_w - x_b) > r:\n        return \"-1\"\n    return f\"{x_w:.8f}\"\n    \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(float, stdin.split())\n    y = (y_2 - y_1) / (y_2 - y_w)\n    x_w = y * x_b\n    if abs((x_w - x_b) / r) > 1:\n        return \"-1\"\n    else:\n        return x_w\n\nprint(solution(input()))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return max(0, (b + d + s - 2) // (b + d + s - 2) - 1)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    a, b, c = int(a), int(b), int(c)\n    if c >= a + b:\n        return str(0)\n    elif c < a + b and c >= a:\n        return str(c)\n    elif c < a + b and c < a:\n        return str(c + 1)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = [int(x) for x in stdin.split()]\n    return max(0, (s + d) // (b + d) - 1)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split(' '))\n    if b + d + s == 1:\n        return 0\n    res = min(b + d - 1, (b + d + s - 1) // 2, b + s - 1)\n    return res\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the minimum number of meals Vasiliy could have missed during his vacation, if he\n    stayed at the sanatorium all day and didn't miss any meal.\n    \"\"\"\n    breakfast, dinner, supper = [int(s) for s in stdin.split()]\n    first_meal = breakfast + dinner + supper\n    return min(first_meal, 3 - first_meal)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    if b >= s + d:\n        return 0\n    return s + d - b\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split(' '))\n    if b >= d or d >= s:\n        return 0\n    if b + d >= s:\n        return 0\n    if b + d == s:\n        return 1\n    if b + d + s == 2:\n        return 2\n    return 3\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = (int(stdin) for _ in range(3))\n    a = b + d + s - 1\n    c = a // 3\n    return str(c)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    breakfasts, dinners, suppers = [int(n) for n in stdin.split()]\n    if breakfasts + dinners + suppers == 0:\n        return '0'\n    elif breakfasts == 0 and dinners == 0:\n        return '1'\n    elif breakfasts == 0 and suppers == 0:\n        return '2'\n    elif breakfasts == 0:\n        return str(suppers)\n    elif suppers == 0:\n        return str(breakfasts + 1)\n    else:\n        return '{}'.format(max(breakfasts + 1, suppers))\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nYou can write to stdout for debugging purposes, e.g.\nprint(\"this is a debug message\")\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nYou can write to stdout for debugging purposes, e.g.\nprint(\"this is a debug message\")\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Enter your solution here. You can add helper functions, but do not remove any\nof the code of the solution template\"\"\""
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    find number of columns and rows in matrix\n    calculate length of path starting in cell (1,1)\n    calculate number of path in matrix\n    calculate number of path in matrix starting in cell (1,1)\n    if number of path == number of path starting in cell (1,1) then we have the solution\n    '''\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    # find number of columns and rows in matrix\n    x = 0\n    y = 0\n    for i in range(n):\n        if a[i] > x:\n            x = a[i]\n        if i % 2 == 0:\n            if a[i] > y:\n                y = a[i]\n    print(x, y)\n    return stdin.readline()\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j]!= i * cols + j + 1:\n                return 'NO'\n    \n    # while matrix[0][0] == 1:\n    #     for i in range(rows):\n    #         matrix[i][0] += 1\n    #         matrix[0][i] += 1\n\n    for i in range(1, cols + 1):\n        if matrix[0][i - 1] > rows:\n            return 'NO'\n    for i in range(1, rows + 1):\n        if matrix[i - 1][0] > cols:\n            return 'NO'\n\n    return 'YES\\n{}\\n{}'.format(rows, cols)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"YES\" if n > sum(\n        [len(\n            {x for x in range(1, min(a[0], 10 ** 9) + 1) if x % i == 0\n            }.intersection(\n                {y for y in range(1, min(a[1], 10 ** 9) + 1) if y % j == 0}\n            )\n        ) for i, j in combinations(a, 2)],\n        default=0\n    ) else \"NO\"\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    longest = \"\"\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            longest = a[i:]\n    if len(longest) == 0:\n        print('-')\n    else:\n        print(longest)"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"-\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    return a if len(a) > len(b) else b\n\"\"\"\n\ndef"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    n, m = len(a), len(b)\n    # One or more strings are empty\n    if n * m == 0:\n        return '-'\n    elif n * m == 1:\n        return a if a in b else b\n\n    # Prepare matrix with the longest common subsequences\n    # of a and b (in the upper-left corner)\n    # and strings a and b (in the upper-right)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n    for i in range(1, m + 1):\n        dp[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = max(dp[i][j], 1 + dp[i - 1][j - 1])\n\n    # Recover subsequence from dp matrix\n    # (but this subsequence is in a reversed order)\n    subseq = ''\n    while dp[n][m] > 0:\n        if dp[n][m] == dp[n - 1][m]:\n            n -= 1\n        elif dp[n][m] == dp[n][m - 1]:\n            m -= 1\n        else:\n            subseq = a[n - 1] + subseq\n            n -= 1\n            m -= 1\n    return subseq\n\n\na = 'abacaba'\nb = 'abcdcba'\n\nprint(solution(f'{a}\\n{b}'))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a, b = a[::-1], b[::-1]\n    i, j = 0, 0\n    ans = ''\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            ans += a[i]\n            i += 1\n        else:\n            ans += b[j]\n            j += 1\n    if i < len(a):\n        ans += a[i:]\n    if j < len(b):\n        ans += b[j:]\n    return ans[::-1]\n\n\ndef"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    s1, s2 = input[0], input[1]\n\n    i, j = 0, 0\n    m, n = len(s1), len(s2)\n\n    while i < m and j < n:\n        if s1[i]!= s2[j]:\n            i += 1\n        else:\n            j += 1\n            i += 1\n\n    if j == n:\n        return s1[i - j:i]\n    else:\n        return \"-\"\n\n\ndef"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stones = [int(s) for s in stdin]\n    min_stones = 0\n    for i in range(n):\n        stones[i] = 1 if stones[i] == \"-\" else -1\n    print(sum(stones))\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    counter = 0\n    for i in range(n):\n        if stdin[i] == \"+\":\n            counter += 1\n        else:\n            counter -= 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_ops = int(stdin)\n    piles = list(map(lambda x: int(x), stdin.split(\"\\n\")[0]))\n    result = []\n    for i in range(num_of_ops):\n        if piles[i] == 0:\n            result.append(\"+\")\n        else:\n            result.append(\"-\")\n    print(len(set(result)))"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.rstrip())\n    l = stdin.rstrip().split(' ')\n    stones = 0\n    for i in l:\n        if i == '+':\n            stones += 1\n        else:\n            stones -= 1\n    print(stones)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the number of stones in the pile after applying a certain sequence of operations.\n    :param stdin: Input from stdin\n    :return: The answer as a string\n    \"\"\"\n    n = int(stdin.rstrip().lstrip())\n    operations = stdin.rstrip().split('\\n')\n\n    stones = 0\n    for operation in operations:\n        operation = operation.lstrip()\n        for char in operation:\n            if char == '+':\n                stones += 1\n            elif char == '-':\n                stones -= 1\n    return str(stones)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds minimal number of stones in the pile after the operations.\n\n    >>> solution('3\\n---')\n    0\n    >>> solution('4\\n++++')\n    4\n    >>> solution('2\\n-')\n    1\n    >>> solution('5\\n++-++')\n    3\n    \"\"\"\n    total = int(stdin)\n    piles = [0] * (total + 1)\n    for i in range(total):\n        piles[i + 1] += piles[i] + (-1 if stdin[i] == '-' else 1)\n    return min(piles)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = int(input())\n    a = [i for i in stdin]\n    # print(a)\n    count = 0\n    while a.count(\"+\") > 0:\n        if \"-\" not in a:\n            break\n        a.remove(\"-\")\n        count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(sum([int(i) for i in stdin]) / 2))\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ops_num, *ops = stdin.split('\\n')\n    ops_num = int(ops_num)\n    ops = [op for op in ops if op in '+-']\n    ops = [op[0] for op in ops]\n    curr_sum = 0\n    for i in range(len(ops)):\n        if ops[i] == '+':\n            curr_sum += 1\n        else:\n            curr_sum -= 1\n    return str(abs(curr_sum))\n    '''\n\ndef"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = (int(x) for x in stdin.split(\"\\n\")[:3])\n    if n > a + b + c:\n        return 0\n    elif n == a + b + c:\n        return 1\n    elif n == a + c:\n        return 2\n    elif n == b + c:\n        return 3\n    elif n == a + b:\n        return 1\n    elif n == a:\n        return 1\n    elif n == b:\n        return 2\n    elif n == c:\n        return 3\n    return 0"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(solve(input()))\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043d\u043e\u043a \u043c\u043e\u043b\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c\n    res = n // (a - c)\n    # \u0417\u0430\u043f\u0430\u0441 \u043c\u043e\u043b\u043e\u043a\u0430 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u043a\u0443\u043f\u043a\u0443 \u0431\u0430\u043d\u043e\u043a\n    remain = n % (a - c)\n    # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043d\u043e\u043a \u043c\u043e\u043b\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c\n    if a * res < n:\n        res += n // (a * (a - c))\n        # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043d\u043e\u043a \u043c\u043e\u043b\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c\n        remain = n % (a * (a - c))\n        # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043d\u043e\u043a \u043c\u043e\u043b\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c\n    res += remain // (b - c)\n    # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043d\u043e\u043a \u043c\u043e\u043b\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c\n    remain = remain % (b - c)\n    # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043d\u043e\u043a \u043c\u043e\u043b\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c\n    if b * res < remain:\n        res += remain // (b * (b - c))\n        # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043d\u043e\u043a \u043c\u043e\u043b\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c\n        remain = remain % (b * (b - c))\n        # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043d\u043e\u043a \u043c\u043e\u043b\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043a\u0443\u043f\u0438\u0442\u044c\n    print(res)\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b, c = int(stdin.readline()), int(stdin.readline()), int(stdin.readline())\n    if n < a:\n        print(0)\n        return\n    print(min(n // c, n // b, (n - a) // c))\n    return"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = int(stdin.readline())\n    p, g, c = map(int, stdin.readline().split())\n    g = g - c\n    if n > p + g:\n        print(n - p - g)\n    else:\n        print(0)\n    # line = stdin.readline().split()\n    # n = int(line[0])\n    # p, g, c = map(int, line[1:])\n    # g = g - c\n    # if n > p + g:\n    #     print(n - p - g)\n    # else:\n    #     print(0)\n    return ''"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) // max(stdin[1:3]))\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    if a * b < c:\n        return str(int(n // c))\n    if b < a:\n        return str(int(n // b))\n    if a < b:\n        return str(int(n // a))\n    return str(int(n // a))\n\n\"\"\""
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split('\\n'))\n    s = [a, b, c]\n    s = sorted(s)\n    max_c = s[1]\n    max_b = s[1]\n    max_a = s[1]\n    if a >= b:\n        if a >= c:\n            max_a = a\n        else:\n            max_a = c\n    elif a < c:\n        if b >= c:\n            max_b = b\n        else:\n            max_b = c\n    return str(max_a + max_b)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return ''\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n    return \"\""
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    cards2 = list(map(int, stdin.readline().split()))\n    return f\"{n - (m - 1)} {'2' if cards[0] < cards2[0] else '1'}\"\n\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    card_deck = stdin.split('\\n')[0]\n    len_card_deck = int(card_deck)\n    first_s_cards = list(map(int, stdin.split('\\n')[1].split(' ')))\n    second_s_cards = list(map(int, stdin.split('\\n')[2].split(' ')))\n\n    # card_deck = '4\\n2 1 3\\n2 4 2\\n'\n    # len_card_deck = int(card_deck.split('\\n')[0])\n    # first_s_cards = list(map(int, card_deck.split('\\n')[1].split(' ')))\n    # second_s_cards = list(map(int, card_deck.split('\\n')[2].split(' ')))\n\n    print(first_s_cards)\n    print(second_s_cards)"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '2 1'\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    s = list(map(int, stdin.readline().split()))\n    d = {1: f, 2: s}\n    m = {1: [], 2: []}\n    c = {1: [], 2: []}\n    i = 1\n    while True:\n        while len(d[i]) > 0:\n            if len(m[i]) == 0:\n                m[i] = [d[i].pop()]\n            else:\n                m[i].append(d[i].pop())\n        while len(m[i]) > 0:\n            c[i].append(m[i].pop())\n        if len(c[i]) == 0:\n            print(\"LOSE\")\n            return -1\n        if i == 1:\n            if c[1][-1] > c[2][-1]:\n                print(len(c[i]), i)\n                return\n            if c[1][-1] < c[2][-1]:\n                print(len(c[i]), 2 - i)\n                return\n        else:\n            if c[1][-1] > c[2][-1]:\n                print(len(c[i]), i)\n                return\n            if c[1][-1] < c[2][-1]:\n                print(len(c[i]), 2 - i)\n                return\n        i = 2 - i\n\ndef"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    if len(stdin) >= 5 and \\\n            re.search(\"[a-z]\", stdin) and \\\n            re.search(\"[A-Z]\", stdin) and \\\n            re.search(\"[0-9]\", stdin) and \\\n            re.search(\"[!,.?_]\", stdin) and \\\n            not re.search(\"(.)\\\\1\", stdin):\n        return \"Correct\"\n    return \"Too weak\"\n\"\"\"\n\nimport re\n\n\ndef"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abacaba')\n    'Correct'\n    >>> solution('X12345')\n    'Correct'\n    >>> solution('CONTEST_is_STARTED!!11')\n    'Correct'\n    \"\"\"\n    length = len(stdin)\n    passwd = [stdin[i] for i in range(length)]\n    print(passwd)\n    if length < 5:\n        return 'Too weak'\n    if passwd[0] >= 'a' and passwd[0] <= 'z':\n        for i in range(length):\n            if passwd[i] >= 'a' and passwd[i] <= 'z':\n                if passwd[i].isupper() == True:\n                    pass\n                else:\n                    return 'Too weak'\n            else:\n                continue\n    else:\n        return 'Too weak'\n    if passwd[0] >= 'A' and passwd[0] <= 'Z':\n        for i in range(length):\n            if passwd[i] >= 'A' and passwd[i] <= 'Z':\n                if passwd[i].isupper() == True:\n                    pass\n                else:\n                    return 'Too weak'\n            else:\n                continue\n    else:\n        return 'Too weak'\n    if passwd[0] >= '0' and passwd[0] <= '9':\n        for i in range(length):\n            if passwd[i] >= '0' and passwd[i] <= '9':\n                if passwd[i].isdigit() == True:\n                    pass\n                else:\n                    return 'Too weak'\n            else:\n                continue\n    else:\n        return 'Too weak'\n    if passwd[0] == '!' or passwd[0] == '?' or passwd[0] == '.' or passwd[0] == ',' or passwd[0] == '_':\n        for i in range(length):\n            if passwd[i] == '!' or passwd[i] == '?' or passwd[i] == '.' or passwd[i] == ',' or passwd[i] == '_':\n                return 'Too weak'\n            else:\n                continue\n    else:\n        return 'Correct'\n    return 'Correct'"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import string\n    import re\n    import string\n    import re\n    p = re.compile(\"[^a-zA-Z0-9!]\")\n    \n    if p.match(stdin):\n        return \"Too weak\"\n    else:\n        return \"Correct\""
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    # import string\n    import string\n\n    # replace all punctuation with spaces\n    for c in string.punctuation:\n        stdin = stdin.replace(c, \" \")\n\n    # count the number of words\n    stdin = stdin.split(\" \")\n    if len(stdin) < 5:\n        return \"Too weak\"\n\n    # get the common passwords\n    common_passwords = [\n        \"password\",\n        \"123456\",\n        \"12345\",\n        \"123456789\",\n        \"qwerty\",\n        \"12345678\",\n        \"111111\",\n        \"1234567890\",\n        \"123\",\n        \"iloveyou\",\n        \"princess\",\n        \"1234567\",\n        \"rockyou\",\n        \"1234567890\",\n        \"baseball\",\n        \"football\",\n        \"trustno1\",\n        \"ranger\",\n        \"buster\",\n        \"password1\",\n        \"dragon\",\n        \"pussy\",\n        \"baseball\",\n        \"zaq12wsx\",\n        \"master\",\n        \"jupiter\",\n        \"12345\",\n        \"football\",\n        \"monkey\",\n        \"696969\",\n        \"abc123\",\n        \"qwertyuiop\",\n        \"mustang\",\n        \"trustno1\",\n        \"buster\",\n        \"zaq12wsx\",\n        \"jupiter\",\n        \"baseball\",\n        \"12345\",\n        \"123456789\",\n        \"pass\",\n        \"iloveyou\",\n        \"princess\",\n        \"6969\",\n        \"qwertyuiop\",\n        \"asdfgh\",\n        \"mustang\",\n        \"trustno1\",\n        \"buster\",\n        \"dragon\",\n        \"zaq12wsx\",\n        \"jupiter\",\n        \"baseball\",\n        \"master\",\n        \"pass\",\n        \"666666\",\n        \"shadow\",\n        \"superman\",\n        \"michael\",\n        \"access\",\n        \"awsome\",\n        \"welcome\",\n        \"master\",\n        \"login\",\n        \"letmein\",\n        \"mustang\",\n        \"michael\",\n        \"princess\",\n        \"jesus\",\n        \"jordan\",\n        \"superman\",\n        \"liverpool\",\n        \"666666\",\n        \"shadow\",\n        \"monday\",\n        \"access\",\n        \"saturday\",\n        \"monkey\",\n        \"6969\",\n        \"monday\",\n        \"master\",\n        \"login\",\n        \"letmein\",\n        \"shadow\",\n        \"iloveyou\",\n        \"princess\",\n        \"6969\",\n        \"access\",\n        \"master\",\n        \"pass\",\n        \"superman\",\n        \"michael\",\n        \"jordan\",\n        \"liverpool\",\n        \"saturday\",\n        \"awsome\",\n        \"monday\",\n        \"login\",\n        \"superman\",\n        \"michael\",\n        \"jordan\",\n        \"liverpool\",\n        \"6969\",\n        \"letmein\",\n        \"amanda\",\n        \"saturday\",\n        \"monkey\",\n        \"access\",\n        \"master\",\n        \"pass\",\n        \"jesse\",\n        \"michael\",\n        \"tigger\",\n        \"iloveyou\",\n        \"jordan\",\n        \"666666\",\n        \"shadow\",\n        \"carlos\",\n        \"michael\",\n        \"superman\",\n        \"monday\",\n        \"login\",\n        \"pass\",\n        \"amanda\",\n        \"saturday\",\n        \"jesse\",\n        \"michael\",\n        \"tigger\",\n        \"shadow\",\n        \"princess\",\n        \"6969\",\n        \"master\",\n        \"monday\",\n        \"pass\",\n        \"jesse\",\n        \"michael\",\n        \"tigger\",\n        \"superman\",\n        \"monday\",\n        \"login\",\n        \"pass\",\n        \"shadow\",\n        \"porsche\",\n        \"superman\",\n        \"monday\",\n        \"pass\",\n        \"jesse\",\n        \"amanda\",\n        \"superman\",\n        \"master\",\n        \"pass\",\n        \"6969\",\n        \"master\",\n        \"login\",\n        \"pass\",\n        \"superman\",\n        \"monday\",\n        \"michael\",\n        \"master\",\n        \"pass\",\n        \"6969\",\n        \"letmein\",\n        \"amanda\",\n        \"master\",\n        \"6969\",\n        \"superman\",\n        \"michael\",\n        \"princess\",\n        \"liverpool\",\n        \"master\",\n        \"pass\",\n        \"monday\",\n        \"login\",\n        \"jordan\",\n        \"porsche\",\n        \"superman\",\n        \"michael\",\n        \"jordan\",\n        \"liverpool\",\n        \"6969\",\n        \"michael\",\n        \"princess\",\n        \"monday\",\n        \"pass\",\n        \"superman\",\n        \"michael\",\n        \"jordan\",\n        \"liverpool\",\n        \"666666\",\n        \"michael\",\n        \"princess\",\n        \"master\",\n        \"6969\",\n        \"monday\",\n        \"pass\",\n        \"jordan\",\n        \"porsche\",\n        \"superman\",\n        \"michael\",\n        \"saturday\",\n        \"tiger\",\n        \"iloveyou\",\n        \"pass\",\n        \"master\",\n        \"6969\",\n        \"michael\",\n        \"princess\",\n        \"amanda\",\n        \"6969\",\n        \"michael\",\n        \"jordan\",\n        \"superman\",\n        \"liverpool\",\n        \"6969\",\n        \"michael\",\n        \"tiger\",\n        \"princess\",\n        \"jordan\",\n        \"liverpool\",\n        \"superman\",\n        \"michael\",\n        \"6969\",\n        \"letmein\",\n        \"michael\",\n        \"6969\",\n        \"tiger\",\n        \"princess\",\n        \"6969\",\n        \"michael\",\n        \"jordan\",\n        \"liverpool\",\n        \"superman\",\n        \"michael\",\n        \"pass\",\n        \"amanda\",\n        \"saturday\",\n        \"michael\",\n        \"superman\",\n        \"michael\",\n        \"tiger\",\n        \"master\",\n        \"michael\",\n        \"6969\",\n        \"6969\",\n        \"michael\",\n        \"princess\",\n        \"monday\",\n        \"master\",\n        \"6969\",\n        \"michael\",\n        \"jordan\",\n        \"liverpool\",\n        \"6969\",\n        \"michael\",\n        \"6969\",\n        \"michael\",\n        \"tiger\",\n        \"6969\",\n        \"michael\",\n        \"jordan\",\n        \"liverpool\",\n        \"6969\",\n        \"michael\",\n        \"6969\",\n        \"michael\",\n        \"princess\",\n        \"6969\",\n        \"michael\",\n        \"6969\",\n        \"michael\",\n        \"6969\",\n        \"michael\",\n        \"6969\",\n        \"michael\",\n        \"6969"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    digits = \"0123456789\"\n    symbols = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    spaces = \" \"\n    if len(stdin) >= 5:\n        if letters in stdin or symbols in stdin or digits in stdin:\n            if \"!\" in stdin and \"?\" in stdin and \".\" in stdin and \",\" in stdin and \"_\" in stdin:\n                if \" \" in stdin:\n                    print(\"Correct\")\n                else:\n                    print(\"Too weak\")\n            else:\n                print(\"Too weak\")\n        else:\n            print(\"Too weak\")\n    else:\n        print(\"Too weak\")\nsolution(stdin)"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    contest_is_started = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}\n    \n    def check(s: str) -> str:\n        return 'Too weak' if len(s) < 5 else \\\n            'Correct' if any([c.islower() for c in s]) and any([c.isupper() for c in s]) and any([c.isdigit() for c in s]) else \\\n                'Too weak'\n    \n    return check(stdin)\n\nprint(solution(input()))\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nimport re\n\ndef"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    for i in range(len(a)):\n        if len(a[i]) >= 5 and ((a[i].isupper() or a[i].islower()) and a[i].isalpha()):\n            return \"Correct\"\n    return \"Too weak\"\n\n\"\"\""
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = int(stdin.readline()), list(map(int, stdin.readline().split())), list(map(int, stdin.readline().split()))\n    if len(set(a))!= 1 or len(set(b))!= 1:\n        return -1\n    res = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            res += a[i] - b[i]\n    return res\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    count = 0\n    a_dic = {}\n    b_dic = {}\n    a_set = set(a)\n    b_set = set(b)\n\n    for i in range(1, 6):\n        a_dic[i] = a.count(i)\n        b_dic[i] = b.count(i)\n    for i in a_dic:\n        if i in b_dic:\n            count += abs(a_dic[i] - b_dic[i])\n    return str(count)\n\n\nprint(solution(str(input())))\n\n\ndef"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[0]\n    b = stdin.split('\\n')[1]\n    a = [int(i) for i in a.split()]\n    b = [int(i) for i in b.split()]\n    \n    # count the number of occurences of each grade\n    a_count = {}\n    for i in a:\n        if i in a_count:\n            a_count[i] += 1\n        else:\n            a_count[i] = 1\n    b_count = {}\n    for i in b:\n        if i in b_count:\n            b_count[i] += 1\n        else:\n            b_count[i] = 1\n    \n    # create a dict to keep track of the number of students in each group with a given grade\n    a_n = {i : 0 for i in range(1, 6)}\n    b_n = {i : 0 for i in range(1, 6)}\n\n    # find the number of students in group a and group b for each grade\n    for grade in a_count:\n        a_n[grade] = a_count[grade] // 2\n\n    for grade in b_count:\n        b_n[grade] = b_count[grade] // 2\n        \n    # b_n should be the same for each grade\n    if set(b_n.values())!= {0}:\n        return -1\n    \n    # if all groups are different in size then this is impossible\n    if max(a_n.values())!= min(a_n.values()):\n        return -1\n    \n    # if max(b_n.values())!= min(b_n.values()):\n    #     return -1\n    \n    # set a as the group with the smallest number of students\n    if min(a_n.values()) < min(b_n.values()):\n        a, b = b, a\n        a_n, b_n = b_n, a_n\n        \n    # find number of students to move for each grade\n    moves = {}\n    for i in range(1, 6):\n        if a_n[i] == b_n[i]:\n            moves[i] = 0\n        elif a_n[i] > b_n[i]:\n            moves[i] = a_n[i] - b_n[i]\n        else:\n            moves[i] = b_n[i] - a_n[i]\n    \n    # if there are moves for each grade then this is impossible\n    if any([i > 0 for i in moves.values()]):\n        return -1\n    \n    return sum(moves.values())\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    b = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    return min(transfers(a, b), transfers(b, a))\ndef"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem in 'Find Minimum Number of Exchange' task on Codility\n    :param stdin: input data in string format\n    :return: solution string\n    \"\"\"\n    # split input data\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n\n    # total number of students\n    k = n\n\n    # initialize minimum swaps\n    min_swaps = k\n\n    # for each group\n    for i in range(k):\n        # find the number of swaps for A and B\n        swaps_a = a.count(i + 1)\n        swaps_b = b.count(i + 1)\n\n        # if the number of swaps is not equal in both groups, it is not possible to equalize students by swaps\n        if swaps_a!= swaps_b:\n            return -1\n\n        # update minimum swaps\n        min_swaps = min(min_swaps, swaps_a + swaps_b)\n\n    # return the minimum number of swaps\n    return min_swaps\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    a_to_b = dict(zip(a, b))\n    b_to_a = dict(zip(b, a))\n    a_group = set(a)\n    b_group = set(b)\n    ans = []\n    exchanges = 0\n    for a in range(1, 6):\n        a_in_b = a_group.intersection(b_group)\n        b_in_a = b_group.intersection(a_group)\n        if a in a_in_b:\n            a_group.remove(a)\n            b_group.remove(a_to_b[a])\n        elif a in b_in_a:\n            a_group.remove(a_to_b[a])\n            b_group.remove(a)\n        else:\n            exchanges += 1\n            ans.append(exchanges)\n        if len(a_group) == 0 or len(b_group) == 0:\n            if len(a_group) > len(b_group):\n                b_group = set([i for i in range(1, 6)]) - a_group\n            else:\n                a_group = set([i for i in range(1, 6)]) - b_group\n            exchanges += 1\n            ans.append(exchanges)\n    if len(a_group) > 0 and len(b_group) > 0:\n        exchanges += 1\n        ans.append(exchanges)\n    return min(ans)"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The classic dijkstra problem solved by double for loop\n    \"\"\"\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n\n    exchanges = n\n    if n == 1:\n        return 0\n\n    if n % 2!= 0:\n        return -1\n\n    if n % 4!= 0:\n        return -1\n\n    for i in range(n):\n        if a[i] % 4 == 0:\n            exchanges -= 1\n            b[i] = b[i] - a[i]\n        elif a[i] % 2 == 0:\n            exchanges -= 1\n            a[i] = a[i] - b[i]\n\n    return exchanges\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns min number of exchanges needed to achieve a distribution\"\"\"\n\n    # Get input\n    groups = int(stdin.split(\"\\n\")[0])\n    a_student = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    b_student = list(map(int, stdin.split(\"\\n\")[2].split(\" \")))\n\n    # Define number of changes for each student\n    a_changes = [0] * groups\n    b_changes = [0] * groups\n\n    # Define index of students from group A\n    a_idx = 0\n\n    # Define index of students from group B\n    b_idx = 0\n\n    # Define result\n    res = 0\n\n    while a_idx < len(a_student) and b_idx < len(b_student):\n        # Change students\n        if a_student[a_idx] == 1:\n            b_changes[b_idx] += 1\n            a_changes[a_idx] -= 1\n            b_idx += 1\n            a_idx += 1\n            res += 1\n        elif b_student[b_idx] == 1:\n            a_changes[a_idx] += 1\n            b_changes[b_idx] -= 1\n            a_idx += 1\n            b_idx += 1\n            res += 1\n        elif a_student[a_idx] == 2:\n            b_changes[b_idx] += 1\n            a_changes[a_idx] -= 1\n            b_idx += 1\n            a_idx += 1\n            res += 1\n        elif b_student[b_idx] == 2:\n            a_changes[a_idx] += 1\n            b_changes[b_idx] -= 1\n            a_idx += 1\n            b_idx += 1\n            res += 1\n        elif a_student[a_idx] == 3:\n            b_changes[b_idx] += 1\n            a_changes[a_idx] -= 1\n            b_idx += 1\n            a_idx += 1\n            res += 1\n        elif b_student[b_idx] == 3:\n            a_changes[a_idx] += 1\n            b_changes[b_idx] -= 1\n            a_idx += 1\n            b_idx += 1\n            res += 1\n        elif a_student[a_idx] == 4:\n            b_changes[b_idx] += 1\n            a_changes[a_idx] -= 1\n            b_idx += 1\n            a_idx += 1\n            res += 1\n        elif b_student[b_idx] == 4:\n            a_changes[a_idx] += 1\n            b_changes[b_idx] -= 1\n            a_idx += 1\n            b_idx += 1\n            res += 1\n        elif a_student[a_idx] == 5:\n            b_changes[b_idx] += 1\n            a_changes[a_idx] -= 1\n            b_idx += 1\n            a_idx += 1\n            res += 1\n        elif b_student[b_idx] == 5:\n            a_changes[a_idx] += 1\n            b_changes[b_idx] -= 1\n            a_idx += 1\n            b_idx += 1\n            res += 1\n\n    # Check if it is possible to change students\n    if max(a_changes)!= 0 or max(b_changes)!= 0:\n        return -1\n\n    # Calculate min number of changes\n    return res\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    a = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    b = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    m = len(a)\n    n = len(b)\n    tmp = 0\n    for i in range(m):\n        for j in range(n):\n            if a[i] == b[j]:\n                if tmp == 0:\n                    tmp = 1\n                else:\n                    tmp = min(tmp, 1)\n    if tmp == 0:\n        return -1\n    else:\n        return tmp\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a_lst = list(map(int, stdin[1].split()))\n    b_lst = list(map(int, stdin[2].split()))\n    m = [0] * 6\n    a_lst.sort()\n    b_lst.sort()\n    if n == 1:\n        if a_lst[0] == b_lst[0]:\n            return 0\n        else:\n            return -1\n    elif n == 2:\n        if a_lst[0] == b_lst[1] and a_lst[1] == b_lst[0]:\n            return 0\n        else:\n            return -1\n    else:\n        if n % 2 == 1:\n            n = n + 1\n            if a_lst[0] == b_lst[0]:\n                a_lst.append(b_lst[0])\n            else:\n                b_lst.append(a_lst[0])\n        for i in range(0, len(a_lst)):\n            m[a_lst[i] - 1] += 1\n            m[b_lst[i] - 1] += 1\n        return m.index(max(m)) + 1\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.readline().split())\n    r = stdin.readline()\n    c = stdin.readline()\n\n    junc = []\n    for c in stdin:\n        junc.append(c)\n\n    for i in range(len(junc)):\n        if junc[i] == '>' or junc[i] == '<':\n            junc[i] = '|'\n\n        elif junc[i] == 'v' or junc[i] == '^':\n            junc[i] = '-'\n\n    print(junc)\n    return 'NO'\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    direction = stdin.split()\n    x = stdin.split()\n\n    if x[0] == x[n-1]:\n        return \"YES\"\n    if x[m-1] == x[0]:\n        return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    hori, ver = stdin.split('\\n')[1:3]\n\n    hori = hori.replace('>', '<')\n    ver = ver.replace('^', 'v')\n\n    def check(hori, ver):\n        hori_set = set()\n        ver_set = set()\n        for i in hori:\n            if i == '<':\n                hori_set.add('<')\n            else:\n                hori_set.add('>')\n        for i in ver:\n            if i == '^':\n                ver_set.add('^')\n            else:\n                ver_set.add('v')\n\n        # print(hori_set, ver_set)\n\n        def dfs(set1, set2, dic, path):\n            if not set1 and not set2:\n                if len(path) == n + m - 1:\n                    if path not in dic:\n                        dic[path] = 1\n                    return True\n            else:\n                if set1:\n                    if '<' in set1:\n                        next_set = set1.copy()\n                        next_set.remove('<')\n                        dfs(next_set, set2, dic, path + '<')\n                    if '>' in set1:\n                        next_set = set1.copy()\n                        next_set.remove('>')\n                        dfs(next_set, set2, dic, path + '>')\n                if set2:\n                    if '^' in set2:\n                        next_set = set2.copy()\n                        next_set.remove('^')\n                        dfs(set1, next_set, dic, path + '^')\n                    if 'v' in set2:\n                        next_set = set2.copy()\n                        next_set.remove('v')\n                        dfs(set1, next_set, dic, path + 'v')\n                return False\n\n        dic = {}\n        dfs(hori_set, ver_set, dic, '')\n        # print(dic)\n        return 'YES' if len(dic) else 'NO'\n\n    print(check(hori, ver))\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    if (n + m - 1) & 1:\n        return 'NO'\n    \n    stdin = stdin.strip('\\n')\n    h = {'<': '>', '>': '<'}\n    v = {'^': 'v', 'v': '^'}\n    \n    h_d = {}\n    v_d = {}\n    for i, c in enumerate(stdin):\n        if c not in h_d:\n            h_d[c] = i\n        if c not in v_d:\n            v_d[c] = i\n    \n    h_set = set()\n    v_set = set()\n    \n    for i in range(n):\n        h_set.add(i)\n    for i in range(m):\n        v_set.add(i)\n    \n    h_set = sorted([*h_set, n, n + 1], reverse = True)\n    v_set = sorted([*v_set, m, m + 1], reverse = True)\n    \n    s_h_set = set(h_set)\n    s_v_set = set(v_set)\n    \n    for i in h_set:\n        for j in v_set:\n            if (i, j) in s_v_set:\n                if i in h_set:\n                    if j in v_set:\n                        if h_set.index(i) < v_set.index(j):\n                            s_h_set.remove(i)\n                            s_v_set.remove(j)\n                            break\n                        else:\n                            s_h_set.remove(i)\n                            s_v_set.remove(j)\n                            break\n                    else:\n                        s_h_set.remove(i)\n                        s_v_set.remove(j)\n                        break\n                else:\n                    if j in v_set:\n                        if h_set.index(i) > v_set.index(j):\n                            s_h_set.remove(i)\n                            s_v_set.remove(j)\n                            break\n                        else:\n                            s_h_set.remove(i)\n                            s_v_set.remove(j)\n                            break\n                    else:\n                        s_h_set.remove(i)\n                        s_v_set.remove(j)\n                        break\n    \n    if s_h_set == set():\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    direction_map = {}\n    for d in stdin.split('\\n')[0].split(' '):\n        direction_map[d[0]] = d[1]\n    for d in stdin.split('\\n')[1].split(' '):\n        direction_map[d[0]] = d[1]\n    for d in stdin.split('\\n')[2].split(' '):\n        direction_map[d[0]] = d[1]\n    for d in stdin.split('\\n')[3].split(' '):\n        direction_map[d[0]] = d[1]\n    # print(direction_map)\n    return 'YES' if all([is_inverse(direction_map, d) for d in direction_map]) else 'NO'\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if '^' in stdin.replace('>', '').replace('<', '') and 'v' in stdin.replace('>', '').replace('<', '') else 'NO'\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    n = int(inp[0])\n    arr = inp[1].split(' ')\n    if len(arr)!= n:\n        return \"NO\"\n    for i in range(n):\n        arr[i] = int(arr[i])\n    memo = {}\n    def recur(arr, n, idx):\n        if idx >= n:\n            return \"NO\"\n        if len(arr) == n:\n            return \"YES\"\n        if len(arr) > n:\n            return \"NO\"\n        if arr in memo:\n            return memo[arr]\n        memo[arr] = \"NO\"\n        if arr[0] == 0:\n            if idx == n - 1:\n                memo[arr] = \"YES\"\n            else:\n                memo[arr] = recur(arr + [\"->\"], n, idx + 2)\n        if arr[0] == 1:\n            if arr[1] == 0:\n                if idx == n - 1:\n                    memo[arr] = \"YES\"\n                else:\n                    memo[arr] = recur(arr + [\">\"], n, idx + 2)\n            if arr[1] == 1:\n                if idx == n - 1:\n                    memo[arr] = \"YES\"\n                else:\n                    memo[arr] = recur(arr + [\">\"], n, idx + 2)\n        return memo[arr]\n    ans = recur(arr, n, 0)\n    return ans"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n0 1 1 0\")\n    'YES'\n    >>> solution(\"2\\n1 1\")\n    'NO'\n    >>> solution(\"1\\n0\")\n    'YES'\n    >>> solution(\"4\\n0 0 0 0\")\n    'NO'\n    >>> solution(\"1\\n0\")\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    if number of True's is > 1, return 'NO'\n    if number of True's is 0, return 'NO'\n    '''\n    if len(set(stdin)) > 2:\n        return 'NO'\n    if stdin.count('1') > 0:\n        return 'NO'\n    if stdin.count('0') == 0:\n        return 'YES'\n    if stdin.count('0') == 1:\n        return 'YES'\n    return 'NO'\n    pass\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n    if n == 2:\n        return \"YES\" if arr[1] == 0 and arr[0] == 1 else \"NO\"\n    return \"YES\" if arr.count(1) + arr.count(0) == n else \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem\n    \"\"\"\n    pass  # TODO: Your code here\n\n\ndef"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split(\" \")))\n    if n == 1:\n        return \"YES\" if a[0] == 0 else \"NO\"\n    \n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n    \n    if count % 2 == 0:\n        return \"NO\"\n    \n    for i in range(n):\n        if a[i] == 1:\n            return \"NO\"\n    \n    if a[0] == 0:\n        return \"NO\"\n    \n    for i in range(n):\n        if a[i] == 0 and i!= n - 1:\n            return \"NO\"\n    \n    bracket = 1\n    string = []\n    \n    for i in range(n):\n        if a[i] == 1:\n            string.append(str(bracket))\n            bracket *= 2\n        else:\n            string.append(\"(\")\n            string.append(str(bracket))\n            bracket /= 2\n            string.append(\")\")\n    \n    return \"YES\\n\" + \"\".join(string)\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"\n    Accepted\n    2588 ms    14.7 MB\n    \n    \"\"\"\n    \n    n = int(stdin)\n    v = list(map(int, stdin.split()))\n    \n    m = []\n    f = []\n    \n    for i in range(n):\n        if v[i] == 0:\n            m.append(i)\n        elif v[i] == 1:\n            f.append(i)\n            \n    if len(m)!= len(f):\n        return \"NO\"\n            \n    f1, f2 = 0, 0\n    \n    for i in m:\n        if i < n-1 and i > f2:\n            f1 = i\n            f2 = i+1\n            break\n            \n    if f1!= 0 or f2!= n-1:\n        return \"NO\"\n        \n    d1 = dict()\n    \n    for i in range(n):\n        d1[i] = v[i]\n        \n    \n    for i in f:\n        d1[i] = 1 - d1[i]\n        \n    # print(d1)\n    \n    l = list(d1.values())\n    \n    if sum(l) == 0:\n        return \"YES\"\n    \n    l1, l2 = l[:f1], l[f1:f2+1]\n    \n    # print(l1, l2)\n    \n    if l1 == []:\n        l1 = []\n    elif l2 == []:\n        l2 = []\n    else:\n        l1, l2 = l1[1:], l2[1:]\n    \n    # print(l1, l2)\n    \n    for i in range(len(l1)):\n        if l1[i] == 1 and l2[i] == 1:\n            return \"NO\"\n    \n    return \"YES\"\n        \n    \n    \n    \n    \n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a > 0 and b > 0:\n        if a >= 2 * b:\n            a -= 2 * b\n            b = min(a, b)\n        elif b >= 2 * a:\n            b -= 2 * a\n            a = min(a, b)\n        else:\n            break\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    a, b = (a, b) if a > b else (b, a)\n    while a > 0 and b > 0:\n        if a > 2 * b:\n            a -= 2 * b\n            b -= 2 * b\n        else:\n            if b > 2 * a:\n                b -= 2 * a\n                a -= 2 * a\n            else:\n                a = 0\n                b = 0\n    return a, b\n\n\"\"\"\n\ndef"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a >= 2 * b:\n            a -= 2 * b\n        else:\n            if b >= 2 * a:\n                b -= 2 * a\n            else:\n                break\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 or b!= 0:\n        if a >= 2 * b:\n            a = a - 2 * b\n        else:\n            a = 0\n        if b >= 2 * a:\n            b = b - 2 * a\n        else:\n            b = 0\n    print(a, b)\n    return ''\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    while a >= 2*b and b >= 2*a:\n        a -= 2*b\n        b -= 2*a\n    print(a, b)\n    return ''\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a > 0 and b > 0:\n        a, b = a - 2 * b if a >= 2 * b else a, b - 2 * a if b >= 2 * a else b\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 or b!= 0:\n        if a >= 2 * b:\n            a -= 2 * b\n        else:\n            b -= 2 * a\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a > 0 and b > 0:\n        if a >= 2 * b:\n            a -= 2 * b\n        elif b >= 2 * a:\n            b -= 2 * a\n        else:\n            break\n    return a, b"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a and b:\n        if a >= 2*b:\n            a = a-2*b\n        else:\n            b = b-2*a\n    return a, b\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = n\n    b = m\n    while a >= 2*b and b >= 2*a:\n        a //= 2\n        b //= 2\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split()]\n    return str(b - a + 1 - (b - a) % k)"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split(' ')]\n    return str(b - a + 1 - (b - a) % k)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    return str(int(b) - int(a) - (b - a) % k + k)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    k = int(input_lines[0].split(' ')[0])\n    a = int(input_lines[0].split(' ')[1])\n    b = int(input_lines[0].split(' ')[2])\n    count = 0\n    for i in range(a,b+1):\n        if i % k == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = list(map(int, stdin.split()))\n    if k == 1:\n        return 1\n    x = ((b - a + 1) // k) * k\n    if (b - a + 1) % k == 0:\n        return x - 1\n    else:\n        return x\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Hello World!\""
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    k, a, b = [int(x) for x in line.split()]\n    print(b // k - a // k + 1)\n\nsolution(stdin)\n\n\n-----Test-----\n\nInput\n2 -4 4\nOutput\n5\n\nInput\n1 1 10\nOutput\n10\n\nInput\n1 1 1\nOutput\n1\n\nInput\n2 -4 4\nOutput\n5\n\nInput\n3 -4 4\nOutput\n6\n\nInput\n5 -1 10\nOutput\n4\n\nInput\n0 -1 10\nOutput\n9\n\nInput\n1 1 10\nOutput\n10\n\nInput\n1 1 1\nOutput\n1\n\nInput\n2 -4 4\nOutput\n5\n\nInput\n3 -4 4\nOutput\n6\n\nInput\n5 -1 10\nOutput\n4\n\nInput\n0 -1 10\nOutput\n9\n\nInput\n1 1 10\nOutput\n10\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    k, a, b = [int(x) for x in stdin.split()]\n    ans = 0\n    for x in range(a, b + 1):\n        if x % k == 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    print(b//k - a//k + 1)"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of k-divisible numbers on the segment [a, b].\n    In other words you need to find the number of such integer values x\n    that a \u2264 x \u2264 b and x is divisible by k.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    k, a, b = map(int, stdin.split())\n    return str(b // k - a // k + int((a % k!= 0) or (b % k!= 0)))\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(7)\n    7\n    >>> solution(21)\n    5\n    \"\"\"\n    k = int(stdin)\n    i = 1\n    while True:\n        if (len(str(i)) * 9 ** (k - 1)) % 10 == 0:\n            print(i)\n            break\n        i += 1\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7''')\n    '7'\n    >>> solution('''21''')\n    '5'\n    \"\"\"\n    return stdin[-1]\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin)\n\"\"\"\n\nimport sys\n\nassert sys.stdin.read() == \"\"\"7\n\"\"\"\nsys.stdin = open('test_input.txt')\n\n\ndef"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = input()\n    a = ['0']\n    while len(a) < int(x) + 1:\n        b = ''\n        for i in a:\n            b += i\n        a = b\n    print(a[int(x) - 1])"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([str(i) for i in range(1, int(stdin) + 1)])[int(stdin) - 1]\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    str_num = ''\n    for i in range(1, 11):\n        str_num += str(i)\n    print(str_num[k - 1])\n\n\ndef"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the $k$-th digit in the sequence\n    \"\"\"\n    k = int(stdin)\n    # First 10 digits\n    x = 123456789101112131415161718192021222324252627282930313233343536\n    # Mod the remainder by 10\n    return str(x)[k - 1]\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    return str(int(input[0]) - 1)\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_line = stdin\n    k = int(input_line)\n    return ''.join(str(i) for i in range(1,1000001))[k-1]"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n\")\n    7\n    >>> solution(\"21\\n\")\n    5\n    \"\"\"\n    number = list(map(int, stdin.split()))\n    return str(number[0] // 10 ** (len(number) - 1))\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string: str = stdin\n    # string = \"12345678\"\n    # string = \"807345619350641\"\n    len_string = len(string)\n    if len_string == 11 and string[0] == \"8\":\n        return \"YES\"\n    for i in range(len_string // 2 + 1):\n        index = i\n        end_index = len_string - index\n        if index == end_index:\n            break\n        for j in range(index + 1, end_index):\n            if string[index] == string[j]:\n                break\n            if string[index]!= string[j] and j == end_index - 1:\n                return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1:]\n    assert len(s) == n, 'String length must be equal to the input value'\n    assert n % 2 == 1, 'String length must be odd'\n    assert all(char in string.digits for char in s), 'String must contain only digits'\n    assert n == len(s), 'String length must be equal to the input value'\n    assert all(s[i] in '8' for i in range(len(s)) if i % 2 == 0), 'First number must be 8'\n    return 'YES' if n >= 11 else 'NO'\n    \ndef"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if len(s) == n:\n        if (s[0] == '8' or s[0] == '9') and s[1] == '7':\n            return \"YES\"\n    return \"NO\"\n\nprint(solution(stdin()))\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasya's solution\"\"\"\n    n = int(stdin)\n    s = stdin\n    if n % 2 == 1:\n        if len(s) % 2 == 1:\n            for i in range(n):\n                if i == n - 1:\n                    if s[i] == \"8\" and s[i - 1] == \"1\" and s[i - 2] == \"2\":\n                        print(\"YES\")\n                        break\n                else:\n                    if s[i] == \"8\" and s[i - 1] == \"1\" and s[i - 2] == \"2\" and s[i + 1] == \"0\":\n                        print(\"YES\")\n                        break\n        else:\n            for i in range(n):\n                if i == n - 1:\n                    if s[i] == \"8\" and s[i - 1] == \"1\" and s[i - 2] == \"2\":\n                        print(\"YES\")\n                        break\n                else:\n                    if s[i] == \"8\" and s[i - 1] == \"1\" and s[i - 2] == \"2\" and s[i + 1] == \"0\":\n                        print(\"YES\")\n                        break\n    else:\n        if len(s) % 2 == 1:\n            for i in range(n):\n                if i == n - 1:\n                    if s[i] == \"8\" and s[i - 1] == \"1\" and s[i - 2] == \"2\":\n                        print(\"NO\")\n                        break\n                else:\n                    if s[i] == \"8\" and s[i - 1] == \"1\" and s[i - 2] == \"2\" and s[i + 1] == \"0\":\n                        print(\"NO\")\n                        break\n        else:\n            for i in range(n):\n                if i == n - 1:\n                    if s[i] == \"8\" and s[i - 1] == \"1\" and s[i - 2] == \"2\":\n                        print(\"NO\")\n                        break\n                else:\n                    if s[i] == \"8\" and s[i - 1] == \"1\" and s[i - 2] == \"2\" and s[i + 1] == \"0\":\n                        print(\"NO\")\n                        break\n    return \"\""
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    t = '8'\n    i = 0\n    while len(s)!= 11:\n        if s[i] == t:\n            s = s[:i] + s[i + 1:]\n        else:\n            i += 1\n    if s[0] == t:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin.readline())\n    # s = stdin.readline().strip()\n    # n, s = int(input()), input()\n    # result = 'YES' if len(s) % 2 else 'NO'\n    return 'YES' if len(s) % 2 else 'NO'"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) % 2 == 0 else 'NO'\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and O(1) space\"\"\"\n    n = int(stdin)\n    s = stdin\n    if n < 10 or n % 2 == 0:\n        return 'NO'\n    if s[0]!= '8':\n        return 'NO'\n    if len(s) % 2 == 0:\n        return 'NO'\n    for i in range(n):\n        if s[i] == '8':\n            s = s[:i] + '1' + s[i + 1:]\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = (int(x) for x in stdin.split())\n    \n    return str(n - sum(1 for i in range(n) if i % n == pos and i!= pos and int(stdin[i]) <= x))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = list(map(int, stdin.split()))\n    arr = list(range(1, n + 1))\n    # the algorithm is only useful if array is sorted\n    arr = sorted(arr)\n    print(arr)\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        middle = left + (right - left) // 2\n        # if arr[middle] < x:\n        if arr[middle] <= x:\n            left = middle + 1\n        else:\n            right = middle - 1\n        count += 1\n    print(count)\n    print(f\"the number of permutations is {count % (10**9 + 7)}\")\n\nsolution(stdin)"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = [int(x) for x in stdin.split()]\n    left = 0\n    right = n\n    while left < right:\n        middle = (left + right) // 2\n        if middle == 0 and x == 1:\n            return 1\n        if middle == 0 and x!= 1:\n            return 0\n        if middle < x:\n            left = middle + 1\n        else:\n            right = middle\n    return 0\n\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    left = 0\n    right = n\n    while left < right:\n        middle = (left + right) // 2\n        if middle == x:\n            return 'true'\n        elif middle < x:\n            left = middle + 1\n        else:\n            right = middle\n    return 'false'"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = [int(i) for i in stdin.split(\" \")]\n    a = list(range(1, n + 1))\n\n    perm = list(itertools.permutations(a, n))\n\n    res = 0\n    for permutation in perm:\n        i = 0\n        while i < n:\n            if pos == i:\n                if permutation[i] == x:\n                    res += 1\n                    break\n            elif permutation[i] > x:\n                break\n            else:\n                i += 1\n    print(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of permutations that contain x at position pos and for which the given implementation of the binary search algorithm finds x (returns true).\"\"\"\n    n, x, pos = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    \n    def bs(left, right, x):\n        middle = (left + right) // 2\n        if nums[middle] <= x:\n            return bs(middle + 1, right, x)\n        else:\n            return bs(left, middle, x)\n    \n    res = 0\n    for perm in permutations(nums, n):\n        if bs(0, n - 1, x) and nums[pos] == x:\n            res += 1\n    return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = [int(n) for n in stdin.split(' ')]\n\n    if x > n or x < 1 or pos > n or pos < 0:\n        return '-1'\n\n    count = 0\n    if pos!= 0:\n        for i in range(1, n):\n            if i > pos:\n                count += i\n            else:\n                count += pos + 1\n\n        count += n - pos\n    else:\n        count = n * (n - 1) // 2\n\n    return str(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = [int(x) for x in stdin.split()]\n\n    count = 0\n    for permutation in permutations(range(1, n+1)):\n        if binary_search(permutation, x, pos):\n            count += 1\n\n    return str(count % (1_000_000_007))\n    \ndef"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, p = map(int, stdin.split())\n    nums = list(range(1, n + 1))\n    return sum(p if nums[p] == x else 1 for nums in permutations(nums)) % (10**9 + 7)\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    candy_co = stdin.count('*')\n    snow_co = stdin.count('?')\n    stdin = [x for x in stdin]\n    stdin_c = stdin.copy()\n    for i in range(len(stdin)):\n        if stdin[i] == '*':\n            stdin_c.pop(i)\n    stdin = ''.join(stdin_c)\n    stdin_s = stdin.split('*')\n    for i in range(len(stdin_s)):\n        if '?' in stdin_s[i]:\n            stdin_s[i] = stdin_s[i].replace('?','')\n    stdin_s = [x for x in stdin_s if x!= '']\n    if len(stdin_s) > snow_co + candy_co + 1:\n        return 'Impossible'\n    for i in range(snow_co):\n        s = stdin_s.pop(0)\n        if len(stdin_s) == 0:\n            return 'Impossible'\n        elif stdin_s[0] == '?':\n            stdin_s[0] = s*2\n        elif stdin_s[0]!= '?' and stdin_s[0].count(s) < 1:\n            return 'Impossible'\n        else:\n            stdin_s[0] = stdin_s[0].replace(s,'')\n    for i in range(candy_co):\n        if len(stdin_s) == 0:\n            return 'Impossible'\n        elif stdin_s[0] == '?':\n            stdin_s[0] = s\n        else:\n            stdin_s[0] = stdin_s[0].replace('?',s)\n    for i in stdin_s:\n        if i == '':\n            stdin_s.remove(i)\n    stdin = ''.join(stdin_s)\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    possible = []\n    lst = stdin.split('*')\n    print(lst)\n    for i in lst:\n        print(i)\n        if i[0].isalpha():\n            possible.append(i)\n        else:\n            pass\n    print(possible)\n    return possible"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.replace('*', '')\n    string = string.replace('?', '')\n    sorted_string = ''.join(sorted(string))\n    i = 1\n    while len(sorted_string) - i * i >= 0:\n        start = 0\n        end = len(sorted_string) - i * i\n        while start <= end:\n            mid = (start + end) // 2\n            first_substring = sorted_string[:mid]\n            second_substring = sorted_string[mid + i:mid + i * 2]\n            if len(string) == len(first_substring) + len(second_substring):\n                return string[:len(first_substring)] + second_substring + string[len(first_substring):]\n            if string < first_substring + second_substring:\n                end = mid - 1\n            else:\n                start = mid + 1\n        i += 1\n    return 'Impossible'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds out if a given string can encode a message of a given length.\n    :param stdin: string to be encoded\n    :return: A message if one can be encoded, otherwise Impossible\n    '''\n    stdout = ''\n    strs = stdin.split('*')\n    if len(strs)!= len(set(stdin)):\n        return 'Impossible'\n    for i in range(len(strs)):\n        stdout += solution(strs[i])\n    return stdout\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    candy = 0\n    snowflake = 0\n    new_string = \"\"\n    for index, char in enumerate(stdin):\n        if char == \"*\" or char == \"?\":\n            if char == \"*\":\n                snowflake += 1\n            else:\n                candy += 1\n            new_string = new_string[:index] + \"*\" + new_string[index:]\n        else:\n            if candy > 0 and snowflake > 0:\n                if candy == 1 and snowflake == 1:\n                    candy = 0\n                    snowflake = 0\n                else:\n                    if candy >= snowflake:\n                        snowflake -= 1\n                        candy -= 1\n                        new_string = new_string[:index] + \"*\" + new_string[index:]\n                    else:\n                        snowflake -= 1\n                        new_string = new_string[:index] + \"*\" + new_string[index:]\n            else:\n                new_string = new_string[:index] + \"*\" + new_string[index:]\n    return new_string\nprint(solution(input().strip()))\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    ''\n    >>> solution('aba')\n    'aba'\n    >>> solution('abab')\n    'aba'\n    >>> solution('ababab')\n    'aba'\n    >>> solution('ab?a')\n    'aba'\n    >>> solution('ab?a?a')\n    'aba'\n    >>> solution('abab?')\n    'aba'\n    >>> solution('ab?a?')\n    'aba'\n    >>> solution('ab?a?a')\n    'aba'\n    >>> solution('ab?a?a?a?')\n    'aba'\n    >>> solution('abab?')\n    'aba'\n    >>> solution('abab?a')\n    'aba'\n    >>> solution('ab?a?a')\n    'aba'\n    >>> solution('ab?a?a?a?a')\n    'aba'\n    >>> solution('ab?a?a?a?a?a')\n    'aba'\n    >>> solution('ab?a?a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a?a')\n    'aba'\n    >>> solution('abab*a')\n    'aba'\n    >>> solution('abab*a?a')\n    'aba'\n    >>> solution('abab*a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a?a')\n    'aba'\n    >>> solution('abab*a?a?a"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    if len(inp)!= 2:\n        return 'Impossible'\n    res = inp[0]\n    k = int(inp[1])\n    if k == 1:\n        return res\n    l = len(res)\n    for i in range(l):\n        res = res.replace('?', '*', 1)\n        res = res.replace('*', '?', 1)\n    res = res.replace('*', '', 1)\n    if len(res) == k:\n        return res\n    else:\n        return 'Impossible'\n    "
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 200:\n        raise ValueError\n    prev = ''\n    new = ''\n    for i, e in enumerate(stdin):\n        if e == '?':\n            if prev[0] == '*':\n                new += prev[0]\n            else:\n                new += e\n            prev = ''\n        elif e == '*':\n            prev += e\n        else:\n            prev += e\n            new += e\n        if len(new) == 200:\n            return 'Impossible'\n    return new\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('*', '').replace('?', 'a')\n    for _ in range(int(stdin[0])):\n        if stdin[0] in stdin[1:]:\n            stdin = stdin[1:]\n        else:\n            return 'Impossible'\n    return stdin"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    message = stdin\n    \n    # Find out all subsequences of length k\n    # for each subsequence, check if it is valid\n    \n    for size in range(1, len(stdin)):\n        for i in range(len(stdin) - size + 1):\n            subsequence = stdin[i:i + size]\n            if all(subsequence[j] == '?' or (subsequence[j]!= '*' and subsequence[j] == subsequence[j + 1]) for j in range(size - 1)):\n                print(subsequence)\n    \n    "
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count)\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    angle = int(stdin)\n    return min(angle // 90, 2)\n\"\"\"\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x % 90 == 0:\n        return 1\n    return 3\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simple solution works by rotating the image by 90 degrees clockwise and checking for the minimum deviation from the vertical axis.\n    \"\"\"\n    angle = int(stdin)\n    degrees = [i for i in range(0, 361, 90)]\n    if angle < 0:\n        angle = 360 - angle\n    min_dev = 0\n    dev_count = 0\n    for deg in degrees:\n        dev = angle - deg\n        if dev > 0:\n            dev_count += dev\n        else:\n            dev_count += 360 - dev\n        if dev_count < min_dev:\n            min_dev = dev_count\n    return str(min_dev)\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return min(a//90, 3)\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    angle = int(stdin)\n    rotation = angle // 90\n    if angle % 90!= 0:\n        rotation += 1\n\n    return rotation"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, v, o = [int(x) for x in stdin.split()]\n    x, y, z = [int(x) for x in stdin.split()]\n    return \"Yes\" if b * v + v * o + o * x >= x * y + y * z + z * x else \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    blue_count, violet_count, orange_count = [int(i) for i in stdin.split(' ')]\n    blue_count, violet_count, orange_count = [i if i > 0 else 0 for i in [blue_count, violet_count, orange_count]]\n    \n    min_count = min([blue_count, violet_count, orange_count])\n    min_count_str = str(min_count)\n    \n    if min_count_str == '0':\n        return 'Yes'\n    elif min_count > 0 and min_count < 10:\n        if min_count == 1:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b, v, o = map(int, stdin.split(' '))\n    x, y, z = map(int, stdin.split(' '))\n    b, v, o = min(b, v, o), min(b, v, o), min(b, v, o)\n    if 2 * b + 3 * v + 4 * o <= x + y + z:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    balls = list(map(int, stdin.split()))\n    needed = list(map(int, stdin.split()))\n    \n    balls.sort()\n    needed.sort()\n    \n    return \"Yes\" if balls[0] >= needed[0] or balls[1] >= needed[1] or balls[2] >= needed[2] else \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    blue = int(stdin[0].strip())\n    violet = int(stdin[1].strip())\n    orange = int(stdin[2].strip())\n    first = blue + violet\n    second = blue + violet + orange\n    if first == second:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y, z = [int(x) for x in stdin.split(' ')]\n    if (a + b) == c and (a + c) == b and (b + c) == a:\n        if x > a:\n            print('No')\n        else:\n            print('Yes')\n    else:\n        print('No')\n    return 'END'\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(i) for i in stdin.split(' ')]\n    if sum(stdin) < 3:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    blue, violet, orange = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if blue + violet < x or violet + orange < y or orange + blue < z:\n        return \"No\"\n    for b in range(0, blue + 1):\n        for v in range(0, violet + 1):\n            for o in range(0, orange + 1):\n                if b + v + o == x:\n                    return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y, z = [int(n) for n in stdin.split()]\n    if x == a:\n        if b > 0:\n            b -= 1\n        elif c > 0:\n            c -= 1\n        else:\n            b -= 1\n        a += b\n        b += c\n    elif x == b:\n        if a > 0:\n            a -= 1\n        elif c > 0:\n            c -= 1\n        else:\n            a -= 1\n        b += a\n        a += c\n    else:\n        if a > 0:\n            a -= 1\n        elif b > 0:\n            b -= 1\n        else:\n            a -= 1\n        b += a\n        a += b\n    if x == a and y == b and z == c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    b = int(stdin.split()[0])\n    v = int(stdin.split()[1])\n    o = int(stdin.split()[2])\n    p = [b, v, o]\n    x = int(stdin.split()[3])\n    # print(p, x)\n    for i in range(len(p)):\n        x -= p[i]\n    # print(x)\n    if x > 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    rem = n % m\n    ans = [i for i in range(n + 1) if (i * k % m) == rem]\n    return str(ans[0])"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    n, k, m\n\n    Output:\n    str\n    \"\"\"\n    return \"\".join([str(i) for i in range(len(stdin))])\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(s) for s in stdin.split()]\n    return n * m + k\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, k, m) = [int(i) for i in stdin.split()]\n    \n    nums = set()\n    while len(nums) < n:\n        nums.add(k * len(str(n)) + int(str(n)[len(str(n))-1]))\n        n -= 1\n        \n    return max(nums) % m\n\n'''\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution('5 3 1103'))\n\n'''\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    print(len(str(n)) * len(str(m)) % m)\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = (int(x) for x in stdin.split())\n    return str(l + r + a - 1)\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    left, right, ambidexter = map(int, stdin.split())\n    n = left + right + ambidexter\n    return n * (n - 1) // 2\n    \ndef"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return (l + r + a) // 2\n    # or, using f-strings:\n    # return f'{(l + r + a) // 2}'\n    # or, using format:\n    # return '{}'.format((l + r + a) // 2)\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"The maximum size of the team is \" + str(max_team_size(stdin))\n\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = [int(i) for i in stdin.split(' ')]\n    s = l + r\n    if a == 0 or a == s:\n        return '0'\n    return str((a * (a + 1)) // 2 - ((a - s) * (a - s + 1)) // 2)\n\nprint(solution(input()))\n\nprint(solution('5 5 5'))\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l_handers, r_handers, ambidexters = map(int, stdin.split())\n    total_num = l_handers + r_handers\n    if total_num % 2 == 0:\n        return str(total_num)\n    else:\n        return str(total_num + 1)"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of players in the team of even number.\n    \"\"\"\n    l, r, a = [int(s) for s in stdin.split()]\n    return max(l * 2 + r * 2 + a * 2, l + r)\n\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    left_handers, right_handers, ambidexters = map(int, stdin.split())\n    left_handers = min(left_handers, right_handers // 2)\n    right_handers = min(left_handers, right_handers)\n    ambidexters = min(left_handers, ambidexters)\n    return str(left_handers + right_handers + ambidexters)"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = [int(i) for i in stdin.split()]\n    result = 0\n    while n > 1:\n        if k == 0:\n            result += n\n            break\n        if n % k!= 0:\n            result += n % k\n            n -= n % k\n        else:\n            result += n\n            n -= n\n    return result"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s = stdin.split()\n    c = []\n    for _ in range(n):\n        c.append(int(s[1]))\n    d = [0]*n\n    d[0] = c[0]\n    for i in range(1, n):\n        d[i] = d[i-1] + c[i]\n    for _ in range(m):\n        i, j = [int(x) for x in stdin.split()]\n        print(d[j-1] - d[i-1])\ndef"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(2 * n - 2)\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.split())\n    m = [0] * n\n    m[k-1] = 1\n    print(n-sum(m))\n    '''\n    # 1) \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0438 \u043f\u043e\u043c\u0435\u0449\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n    # 2) \u0420\u0430\u0437\u0432\u0435\u0440\u043d\u0435\u043c \u0435\u0433\u043e \u0438 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n    # 3) \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n    n, k = map(int, stdin.split())\n    m = [0] * n\n    m[k-1] = 1\n    print(n - sum(m))\n\nsolution(input())\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = map(int, stdin.split())\n    a = [0 for _ in range(n)]\n    a[k - 1] = 1\n    for i in range(1, n):\n        a[i] = a[i - 1] + 1 if a[i - 1] else 0\n    return a[n - 1]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stones = [1] * n\n\n    while sum(stones) > 1:\n        if stones[k] > 0:\n            stones[k] -= 1\n            stones[(k + 1) % n] += 1\n        else:\n            k = (k + 1) % n\n\n    return n - sum(stones)"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    coins = [0 for _ in range(n)]\n    for i in range(1, n + 1):\n        coins[i - 1] = (k == i)\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            coins[i - 1] |= (coins[j - 1] == 0)\n            coins[j - 1] |= (coins[i - 1] == 0)\n    print(n - coins[0])\n    return \"\""
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return max(n, m) * 2"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    return str(max(2 * (n + 1) + 2 * m, 2 * (n + m + 1) + 2 * m, 3 * (n + m + 1) + m, 2 * (n + m + 1) + 3 * m))\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n = int(n)\n    m = int(m)\n    if n == m:\n        return str(2 * n - 1)\n    elif n > m:\n        return str(3 * m - 1)\n    else:\n        return str(m * (m - 1) // 2 + n * (n - 1) // 2)\n\n\nprint(solution('5 3'))\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0435\u0435 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\n    # \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u044e\u0447\u0430\n    # \u043a\u0430\u043a \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043e \u043a\u043e\u0434\n    # \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a, \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043a\u043b\u044e\u0447\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0434\u0435\u043a\u0441 0\n    # \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f\n    # \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443\n    # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0435 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0442\u043e \u0438\u043b\u0438 \u0438\u043d\u043e\u0435\n    return stdin.split()\n\"\"\"\n\n\n\"\"\"\n\n-----TESTING-----\n\nimport unittest\nimport sys\n\nclass TestClass(unittest.TestCase):\n\n    def test_1(self):\n        stdin = '1 3\\n'\n        expected = 9\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test_2(self):\n        stdin = '3 2\\n'\n        expected = 8\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test_3(self):\n        stdin = '5 0\\n'\n        expected = 10\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test_4(self):\n        stdin = '3 3\\n'\n        expected = 8\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test_5(self):\n        stdin = '5 5\\n'\n        expected = 10\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test_6(self):\n        stdin = '10 10\\n'\n        expected = 20\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test_7(self):\n        stdin = '20 0\\n'\n        expected = 20\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test_8(self):\n        stdin = '30 40\\n'\n        expected = 30\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n\nunittest.main(argv=[''], verbosity=2, exit=False)\n\n\"\"\"\n\n\n\"\"\"\n\n-----SOLUTION-----\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cnt1, cnt2 = [int(x) for x in stdin.split(' ')]\n    if cnt1 == 0 and cnt2 == 0:\n        return 10\n    elif cnt1 == 0:\n        return 8\n    elif cnt2 == 0:\n        return 4\n    else:\n        return max(4, 3 + 3 * (cnt1 // 3) - 2 * (cnt1 // 3) * (cnt1 // 3))\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    if n > 0 and m > 0:\n        if n == m:\n            return n\n        elif n > m:\n            return n - m\n        else:\n            return m - n\n    else:\n        return -1\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    a, b = [int(i) for i in stdin.split()]\n    # count number of possible heights\n    n = 0\n    while a > 0:\n        n += a - 1\n        a -= 1\n    m = 0\n    while b > 0:\n        m += b - 1\n        b -= 1\n    # calculate minimum possible height\n    return n - m\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return min(n, m)"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    return str(n + m - 1)\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    \n    def t(n, k):\n        s = n - k\n        if s == 0:\n            return 0\n        return n // k + t(n // k, k) if s > 0 else n // k\n    \n    return max(t(b, 2) - 1, t(a, 3) - 1)\n\n\ndef"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0 or n == 2:\n        return \"NO\"\n    cards = []\n    cards_1 = set()\n    cards_2 = set()\n    for i in range(n):\n        card = int(stdin)\n        if i % 2 == 0:\n            if card in cards_2:\n                return \"NO\"\n            cards_1.add(card)\n            cards_2.add(card)\n        else:\n            if card in cards_1:\n                return \"NO\"\n            cards_1.add(card)\n            cards_2.add(card)\n    return \"YES\" + \" \" + str(list(cards_1)[0]) + \" \" + str(list(cards_2)[0])\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    card_number: int = int(stdin.split()[0])\n    num_dict = {i: 0 for i in range(1, 101)}\n    for i in range(card_number):\n        num_dict[int(stdin.split()[i])] += 1\n\n    if card_number % 2 == 0:\n        if num_dict[int(stdin.split()[card_number // 2])] % 2 == 0:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        if num_dict[int(stdin.split()[card_number // 2])] % 2!= 0:\n            return 'YES'\n        else:\n            return 'NO'\n        \n    return 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        print(\"NO\")\n        return\n    cnt = [0] * 101\n    for i in range(n):\n        cnt[int(stdin)] += 1\n    odd, even = 0, 0\n    for i in range(101):\n        if cnt[i] % 2!= 0:\n            odd = i\n        if cnt[i] % 2 == 0:\n            even = i\n    if odd == even:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(odd, even)\n    return\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4\n   ... 11\n   ... 27\n   ... 27\n   ... 11''')\n    'YES'\n    >>> solution('''2\n   ... 6\n   ... 6''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'YES'\n    '''\n   ...\n    \n    '''\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'YES'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'YES'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'YES'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'NO'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'NO'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'NO'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'NO'\n    >>> solution('''6\n   ... 10\n   ... 20\n   ... 30\n   ... 20\n   ... 10\n   ... 20''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution('''6\n   ... 1\n   ... 1\n   ... 2\n   ... 2\n   ... 3\n   ... 3''')\n    'NO'\n    >>> solution("
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = set()\n    a = [set() for i in range(n)]\n    for i in range(n):\n        x = int(stdin)\n        a[i].add(x)\n        m.add(x)\n    return \"YES\" if len(m) == n//2 else \"NO\"\n\nsolution(\"4\")\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"4\\n11\\n27\\n27\\n11\")\n    'YES\\n11 27'\n    >>> solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\")\n    'NO'\n    >>> solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\")\n    'NO'\n    >>> solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\")\n    'NO'\n    >>> solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\")\n    'NO'\n    '''\n    n = int(stdin)\n    if n % 2 == 0:\n        petya = set(map(int, stdin.split()))\n        vasya = set(map(int, stdin.split()))\n        for v in vasya:\n            if v in petya:\n                petya.remove(v)\n        return 'YES\\n{}\\n{}'.format(max(petya), max(vasya)) if petya and vasya else 'NO'\n    else:\n        return 'NO'"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    n = int(stdin)\n    l = stdin.split('\\n')[1:]\n    if n == 2:\n        return 'NO'\n    if n % 2 == 0:\n        a = [int(x) for x in l[::2]]\n        b = [int(x) for x in l[1::2]]\n        #print(a,b)\n        if len(set(a)) == 1:\n            a = a[0]\n            if len(set(b)) == 1:\n                b = b[0]\n            else:\n                return 'NO'\n        elif len(set(b)) == 1:\n            b = b[0]\n            if len(set(a)) == 1:\n                a = a[0]\n            else:\n                return 'NO'\n        else:\n            return 'NO'\n    else:\n        a = [int(x) for x in l[::2]]\n        b = [int(x) for x in l[1::2]]\n        #print(a,b)\n        if len(set(a)) == 1:\n            a = a[0]\n            if len(set(b)) == 1:\n                b = b[0]\n            else:\n                return 'NO'\n        elif len(set(b)) == 1:\n            b = b[0]\n            if len(set(a)) == 1:\n                a = a[0]\n            else:\n                return 'NO'\n        else:\n            return 'NO'\n    return 'YES {} {}'.format(a,b)\n    \n    \nprint(solution(\"4\\n11\\n27\\n27\\n11\")) #YES 11 27\nprint(solution(\"2\\n6\\n6\")) #NO\nprint(solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\")) #NO\nprint(solution(\"6\\n1\\n2\\n2\\n3\\n3\")) #NO\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(stdin)\n    # nums = set()\n    # for _ in range(n):\n    #     num = int(stdin)\n    #     if num in nums:\n    #         return 'YES'\n    #     nums.add(num)\n    # return 'NO'"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    else:\n        s = set()\n        cards = [int(i) for i in stdin.split()]\n        cards.sort()\n        for i in range(n // 2):\n            if cards[i] in s:\n                return \"NO\"\n            s.add(cards[i])\n        return \"YES\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size, numberOfGroups = map(int, stdin.split('\\n')[0].split(' '))\n    groups = stdin.split('\\n')[1:]\n    return 'YES' if len(groups) <= numberOfGroups else 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, groups = [int(x) for x in stdin.split()]\n    seats = [int(x) for x in stdin.split()]\n    seats.sort()\n    gap = 8 - seats[-1]\n    if gap > 0:\n        seats.append(seats[-1] + gap)\n    seats = [x - 1 for x in seats]\n    seats.sort()\n    row_seats = [{} for _ in range(8)]\n    for i, x in enumerate(seats):\n        if i % 2 == 0:\n            row_seats[x]['l'] = x - 1\n            row_seats[x]['r'] = x\n        else:\n            row_seats[x]['l'] = x\n            row_seats[x]['r'] = x + 1\n    for i, x in enumerate(seats):\n        if i % 2 == 0:\n            row_seats[x]['u'] = x + 1\n            row_seats[x]['d'] = x\n        else:\n            row_seats[x]['u'] = x\n            row_seats[x]['d'] = x - 1\n    row_seats = [x for x in row_seats if len(row_seats[x]) == 4]\n    if len(row_seats)!= rows:\n        return \"NO\"\n    for i in range(groups):\n        if i not in seats:\n            return \"NO\"\n        if seats[i] < row_seats[0]['l'] or seats[i] > row_seats[0]['r']:\n            return \"NO\"\n        if seats[i] % 2 == 0:\n            if row_seats[seats[i]]['r'] < seats[i + 1] or row_seats[seats[i]]['l'] > seats[i + 1]:\n                return \"NO\"\n        else:\n            if row_seats[seats[i]]['r'] < seats[i - 1] or row_seats[seats[i]]['l'] > seats[i - 1]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # parsing input\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    # i,j,k-th groups from left to right (i,j-th groups from left to right)\n    i, j = k, k\n    ans = False\n\n    # check for all groups if they fit the requirements\n    while i > 0 or j < n:\n        # check if j is past the end of the row\n        if j >= n:\n            if sum(a[i:]) <= 8 * k:\n                ans = True\n            break\n\n        # if the sum of the k-th group is too big\n        # consider the k-1 groups from the left and check if\n        # they can fit into the remaining places\n        if sum(a[i:j+1]) > 8 * k:\n            # if can fit, then consider k-1 groups from the left\n            # and repeat the process with the left groups\n            if sum(a[:k]) <= 8 * k:\n                ans = True\n            i, j = k, k\n            continue\n        # if the sum of the k-th group fits, then consider\n        # the k-th group from the left and repeat the process\n        # with the left groups\n        i, j = i + 1, j + 1\n\n    return ans and \"YES\" or \"NO\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    arr.sort(reverse=True)\n    if k == 1:\n        if arr[0] <= 8:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif k == 2:\n        if arr[0] + arr[1] <= 8:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n):\n            if arr[i] == arr[i + 1]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def seat_neighbours(seat, seats):\n        for i in range(8):\n            if seats[seat][i]:\n                yield i\n\n    n, k = [int(x) for x in stdin.split()]\n    seats = [[False] * 8]\n    for i in range(k):\n        seats.append([True] * 8)\n        for j in range(n):\n            seats[i + 1][j] = False\n            seats[i + 1][j + 1] = False\n            seats[i + 1][j - 1] = False\n            seats[i + 1][j + n] = False\n            seats[i + 1][j + n + 1] = False\n            seats[i + 1][j + n - 1] = False\n            seats[i + 1][j - n] = False\n            seats[i + 1][j - n + 1] = False\n            seats[i + 1][j - n - 1] = False\n            seats[i + 1][j + n + n] = False\n            seats[i + 1][j + n + n + 1] = False\n            seats[i + 1][j + n + n - 1] = False\n            seats[i + 1][j - n + n] = False\n            seats[i + 1][j - n + n + 1] = False\n            seats[i + 1][j - n + n - 1] = False\n    for i in range(k, n):\n        seats[i][0] = seats[i][1] = seats[i][2] = seats[i][3] = seats[i][4] = seats[i][5] = seats[i][6] = seats[i][7] = True\n    for i in range(n):\n        seats[k][i] = True\n    for i in range(1, k):\n        for j in range(1, n):\n            if seats[i][j] == seats[i - 1][j] == seats[i][j - 1] == seats[i - 1][j - 1] == seats[i + 1][j] == seats[i][j + 1] == seats[i + 1][j + 1] == seats[i + 1][j - 1] == seats[i - 1][j + 1] == seats[i - 1][j + 1] == seats[i + 1][j + 1] == seats[i + 1][j - 1] == seats[i - 1][j - 1]:\n                return 'NO'\n    for i in range(1, k):\n        for j in range(1, n - 1):\n            if seats[i][j] == seats[i - 1][j] == seats[i][j - 1] == seats[i - 1][j - 1] and not seats[i + 1][j] == seats[i + 1][j + 1] == seats[i][j + 1] == seats[i][j + 1] == seats[i - 1][j + 1] == seats[i - 1][j + 1]:\n                return 'NO'\n    for j in range(1, n - 1):\n        if seats[k][j] == seats[k][j + 1] == seats[k][j + n] == seats[k][j + n + 1] == seats[k][j + n + n] == seats[k][j + n + n + 1] == seats[k][j + n + n - 1] == seats[k][j - 1] == seats[k][j - n] == seats[k][j - n + 1] == seats[k][j - n - 1] == seats[k][j - n + n] == seats[k][j - n - n - 1] == seats[k][j - n - n + 1] == seats[k][j - n - n + n] == seats[k][j - n - n - n - 1]:\n            return 'NO'\n    for j in range(1, n - 1):\n        for i in range(1, k - 1):\n            if seats[i][j] == seats[i + 1][j] == seats[i + n][j] == seats[i + n + 1][j] == seats[i + n + n][j] == seats[i + n + n + 1][j] == seats[i - 1][j] == seats[i - n][j] == seats[i - n + 1][j] == seats[i - n - 1][j] and not seats[i + 1][j + 1] == seats[i + 1][j - 1] == seats[i + 1][j + 1] == seats[i + 1][j - 1] == seats[i + n + 1][j + 1] == seats[i + n + 1][j - 1] == seats[i - 1][j - 1] == seats[i - n - 1][j - 1] == seats[i + 1][j + 1] == seats[i + 1][j - 1] == seats[i + n + 1][j + 1] == seats[i + n + 1][j - 1] == seats[i - 1][j + 1] == seats[i - 1][j - 1] == seats[i + n + 1][j + 1] == seats[i + n + 1][j - 1] == seats[i - 1][j + 1] == seats[i - 1][j - 1] == seats[i + n + 1][j + 1] == seats[i + n + 1][j - 1]:\n                return 'NO'\n    for i in range(1, k - 1):\n        for j in range(1, n - 1):\n            if seats[i][j] == seats[i][j + 1] == seats[i + 1][j] == seats[i + 1][j + 1] == seats[i + 1][j + n] == seats[i + 1][j + n + 1] == seats[i + n][j] == seats[i + n + 1][j] == seats[i + n + 1][j + 1] == seats[i + n + 1][j + n] == seats[i + n + 1][j + n + 1] == seats[i + n + n][j] == seats[i + n + n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    left = 0\n    right = n * 8 - 1\n    while left <= right:\n        mid = (left + right) // 2\n        taken = 0\n        for i in range(k):\n            taken += a[i] - mid // 8 - 1\n        if taken > n:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return \"NO\" if left == right + 1 else \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    num_sticks = int(stdin.splitlines()[0])\n    stick_lengths = list(map(int, stdin.splitlines()[1].split()))\n\n    # Sort the sticks, and use it to compute a lower bound on the answer.\n    stick_lengths.sort()\n\n    min_cost = None\n    for i in range(num_sticks):\n        cost = sum(\n            abs(stick - i)\n            for stick in stick_lengths\n            if abs(stick - i) <= 1\n        )\n        if min_cost is None or cost < min_cost:\n            min_cost = cost\n            answer = i\n\n    return str(answer) + \" \" + str(min_cost)\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"12\"\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n    dp = [[float(\"inf\")] * 1001 for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n):\n        dp[i + 1][0] = 0\n        for j in range(1, min(sticks[i] + 1, 1001)):\n            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j - 1] + abs(j - sticks[i]))\n    ans = min(dp[n])\n    if ans == float(\"inf\"):\n        return \"IMPOSSIBLE\"\n    return str(ans)\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    sticks = [int(x) for x in stdin.readline().split()]\n    # Solution: https://www.youtube.com/watch?v=PtM1XHs7V8g\n    # Time complexity: O(n * log n)\n    # Space complexity: O(1)\n    sticks.sort()\n    cost = float(\"inf\")\n    for i in range(n):\n        target = i + 1\n        for j in range(i, n):\n            if j + 1 < n:\n                candidate = sticks[j] - sticks[j+1] + sticks[target - 1] - sticks[target]\n                if candidate < 0:\n                    break\n                if candidate <= 1:\n                    target = j + 1\n                    break\n                if candidate < cost:\n                    cost = candidate\n    print(target, cost)\n    return ''\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip('\\n'))\n    numbers = list(map(int, stdin.readline().strip().split(' ')))\n    \n    numbers.sort(reverse=True)\n    res = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            res = min(res, abs(numbers[i] - numbers[j]))\n    print(res)\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split(' ')))\n    print(int(solve(n, lengths)))\n    return ''\n\ndef"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    sticks = [int(x) for x in lines[1].split(' ')]\n    diff = []\n    for i in range(n):\n        for j in range(i+1, n):\n            diff.append(abs(sticks[i] - sticks[j]))\n    return''.join([str(x) for x in sticks])\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Kattis solution for https://www.codingame.com/training/easy/stick-lengths\"\"\"\n    stick_lengths = [int(x) for x in stdin.split()]\n\n    def cost(a, b):\n        return abs(a - b)\n\n    def cost_to_lengths(s, lengths):\n        return sum(cost(s, l) for l in lengths)\n\n    lengths = sorted(stick_lengths)\n    costs = {1: cost_to_lengths(1, lengths)}\n    for n in range(2, len(lengths) + 1):\n        costs[n] = min(costs[n], cost_to_lengths(n, lengths))\n\n    return str(min(filter(lambda x: x > 1, costs.values()), key=lambda x: x))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(get_answer(n, k, a))\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find probability of the final array being sorted in non-decreasing order.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: Answer.\n    \"\"\"\n    # Split input by whitespace\n    n, k = tuple(map(int, stdin.split()))\n\n    a = [int(c) for c in stdin.split()]\n    a = sorted(a)\n\n    # Check if the array is sorted in non-decreasing order\n    if all(a[i - 1] <= a[i] for i in range(1, len(a))):\n        return \"0\"\n\n    # Check if the array is sorted in non-decreasing order after k operations\n    # Assume that the probability of all possible variants of the final array\n    # being sorted in non-decreasing order is equal to 1/2^n\n    if k >= 1:\n        p = 1\n        q = 1\n        for i in range(n - 1):\n            p = p * (i + 1) % (10 ** 9 + 7)\n            q = q * (n - i - 1) % (10 ** 9 + 7)\n\n        for i in range(n):\n            for j in range(n - 1):\n                p = (p * (j + 1) % (10 ** 9 + 7)) * (n - j - 1) % (10 ** 9 + 7)\n                q = (q * (n - j - 1) % (10 ** 9 + 7)) * (j + 1) % (10 ** 9 + 7)\n\n        p = p * (k - 1) % (10 ** 9 + 7)\n        q = q * k % (10 ** 9 + 7)\n\n        return str(p * q % (10 ** 9 + 7))\n\n    return \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    # t = [0] * 10 ** 9\n    # for i in range(n):\n    #     t[a[i] % 10 ** 9] += 1\n    # q = 0\n    # for i in range(10 ** 9):\n    #     if t[i] > k:\n    #         q = i\n    #\n    # t = [0] * 10 ** 9\n    # for i in range(n):\n    #     t[(a[i] + q) % 10 ** 9] += 1\n    # p = 0\n    # for i in range(10 ** 9):\n    #     if t[i] > k:\n    #         p = i\n    #\n    # t = [0] * 10 ** 9\n    # for i in range(n):\n    #     t[(a[i] + p) % 10 ** 9] += 1\n    # p = 0\n    # for i in range(10 ** 9):\n    #     if t[i] > k:\n    #         p = i\n    #\n    #\n    # # p = 0\n    # # for i in range(10 ** 9):\n    # #     t[a[i] % 10 ** 9] += 1\n    # # for i in range(10 ** 9):\n    # #     if t[i] > k:\n    # #         p = i\n    # #\n    # # t = [0] * 10 ** 9\n    # # for i in range(n):\n    # #     t[(a[i] + p) % 10 ** 9] += 1\n    # # q = 0\n    # # for i in range(10 ** 9):\n    # #     if t[i] > k:\n    # #         q = i\n    # #\n    # # t = [0] * 10 ** 9\n    # # for i in range(n):\n    # #     t[(a[i] + q) % 10 ** 9] += 1\n    # # p = 0\n    # # for i in range(10 ** 9):\n    # #     if t[i] > k:\n    # #         p = i\n    #\n    # if p == 0 and q == 0:\n    #     print(0)\n    # else:\n    #     print(p * q ** -1 % 10 ** 9)\n    #\n    #\n    #\n    # return ''\n\n\nprint(solution(input()))"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(x) for x in stdin.split('\\n')]\n    return str(10 ** 9 + 7 - k * a % (10 ** 9 + 7))\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def _solution(self, a: int, k: int) -> int:\n        # P = 9, Q = 3\n        if a <= 1:\n            return 0\n        p = 9\n        q = 3\n        # P = 9, Q = 3 => P, Q = 9, 3\n        for i in range(2, a + 1):\n            p = p * 10 % (10 ** 9 + 7)\n            q = q * 10 % (10 ** 9 + 7)\n        # P, Q = 9, 3\n        q_inv = pow(q, -1, (10 ** 9 + 7))\n        p = p * q_inv % (10 ** 9 + 7)\n        # p, q = 3, 9\n        # P, Q = 3, 9\n        # P, Q = 3, 9 => P, Q = 3, 3\n        for i in range(2, a):\n            p = p * 10 % (10 ** 9 + 7)\n            q = q * 10 % (10 ** 9 + 7)\n        # P, Q = 3, 3\n        q_inv = pow(q, -1, (10 ** 9 + 7))\n        p = p * q_inv % (10 ** 9 + 7)\n        # p, q = 3, 3\n        # P, Q = 3, 3 => P, Q = 3, 1\n        for i in range(1, a):\n            p = p * 10 % (10 ** 9 + 7)\n            q = q * 10 % (10 ** 9 + 7)\n        # P, Q = 3, 1\n        q_inv = pow(q, -1, (10 ** 9 + 7))\n        p = p * q_inv % (10 ** 9 + 7)\n        # P, Q = 3, 1 => P, Q = 2, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 2, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1\n        q_inv = pow(q, -1, (10 ** 9 + 7))\n        p = p * q_inv % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 1, 1 => P, Q = 0, 1\n        p = p * 10 % (10 ** 9 + 7)\n        # P, Q = 0, 1 => P, Q = 1, 1\n        p ="
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split(\" \")\n    a = list(map(int, a.split(\" \")))\n    n = int(k)\n    if n == 1:\n        return \"0\"\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                ans += 1\n    ans = ans % (10**9 + 7)\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    a = list(map(int, lines[1].split()))\n\n    return str(gcd(1, product(a)))\ndef"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k = stdin.split(\" \")\n    a = [int(x) for x in stdin.split(\" \")]\n    n = int(n)\n    k = int(k)\n    arr = [0] * n\n    for i in range(k):\n        idx1, idx2 = [int(x) for x in stdin.split(\" \")]\n        idx1 -= 1\n        idx2 -= 1\n        arr[idx1], arr[idx2] = arr[idx2], arr[idx1]\n    one = 0\n    two = 0\n    for i in range(n):\n        if arr[i] == 1:\n            one += 1\n        else:\n            two += 1\n    return str(one * (two**(-1)) % 10000000007)\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the probability that the array will be sorted in non-decreasing order after k operations, based on the instructions of the task.\"\"\"\n    # array_len, k = input().split()\n    # array_input = input().split()\n    # k = int(k)\n\n    # P = find_coprime(k)\n    # array_len = int(array_len)\n    # array_input = [int(item) for item in array_input]\n\n    # Q = find_coprime(10 ** 9 + 7)\n    # # print(Q)\n\n    # array_input.sort()\n    # print(array_input)\n    # result_array = array_input[::-1]\n    # print(result_array)\n\n    # return str(P * Q ** -1 % 10 ** 9 + 7)\n\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = stdin.split(\" \")\n    a = [int(i) for i in stdin.split(\" \")[1:]]\n    res = 0\n    for i in range(k):\n        a[i], a[i + 1] = a[i + 1], a[i]\n        s = 0\n        for i in a:\n            if i == 1:\n                s += 1\n        res = (res + s * pow(s - 1, -1, 1009 + 7)) % 1009 + s * pow(s - 1, -1, 1009 + 7)\n    if res > 0:\n        print(res)\n    else:\n        print(0)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b*(b-1))\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, s2 = stdin.split(' ')\n    _, s1 = stdin.split(' ')\n    return str(s2 - s1)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x, y = list(map(int, stdin.split()))\n    return min(x-y, y-x, y-(x-y))\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    print(2 * (x - y) + max(0, (x - y) - (x - 3)) + min(0, (x - y) - (x - 4)))\n    return ''"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(min(a, b) - max(a, b))\n    return ''\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x, y = max(x, y), min(x, y)\n    i = 1\n    while x >= y:\n        i += 1\n        x -= 1\n    return str(i)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [x, y] = stdin.split(' ')\n    x = int(x)\n    y = int(y)\n    if x == y:\n        return '0'\n    if x > y:\n        x, y = y, x\n    i = 1\n    while True:\n        if x <= y:\n            break\n        x = x + (x - 1) % x\n        i += 1\n    return str(i)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x - y)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(min(int(b / 2) * (b / 2 + 1) // 2 - a + 2, int(b / 2) * (b / 2 + 1) // 2 - a - 2))\n    return ''\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x, y = [int(n) for n in stdin.split()]\n    ans = 0\n    while x < y:\n        x = x + (x * 2)\n        ans += 1\n    return ans\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calc(matrix):\n        if len(matrix) == 2:\n            return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n        a = []\n        for i in range(len(matrix)):\n            row = []\n            for j in range(len(matrix[i])):\n                row.append(0)\n            a.append(row)\n\n        for i in range(len(matrix)):\n            row = matrix[i]\n            for j in range(len(matrix[i])):\n                a[j][i] = row[j]\n        return calc(a)\n\n    matrix = [list(map(float, line.split(' '))) for line in stdin.splitlines()]\n    return str(round(calc(matrix) ** 0.5, 9))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    return str(abs((a * d - b * c)/(a ** 2 + b ** 2) ** 0.5))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    matrix = list(map(float, stdin.split(\" \")))\n    matrix[0][0], matrix[0][1] = matrix[0][1], matrix[0][0]\n    matrix[1][0], matrix[1][1] = matrix[1][1], matrix[1][0]\n    det = (matrix[0][0] * matrix[1][1]) - (matrix[0][1] * matrix[1][0])\n    return str(abs(det) + 0.1 ** -9)\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split('\\n')[0].split(' '))\n    det = a * d - b * c\n    if det == 0:\n        return '0.5'\n    m = 1\n    for i in range(2):\n        for j in range(2):\n            if i == j:\n                m *= a\n            else:\n                m *= c\n    return '{:.9f}'.format(abs((det / m) ** (1 / 2)))"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum possible value of ||A - B||.\n    \"\"\"\n    A = stdin.split('\\n')\n    a, b = A[0].split()\n    a, b = float(a), float(b)\n    c, d = A[1].split()\n    c, d = float(c), float(d)\n    x = abs(a * d - b * c)\n    return str(x)"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # print(stdin)\n    A = [int(i) for i in stdin.split('\\n')[0].split()]\n    A = np.array(A).reshape(2, 2)\n    print(A)\n\n    # norm = max(abs(A[0][0] * A[1][1] - A[0][1] * A[1][0]))\n    # print(norm)\n    norm = min(abs(A[0][0] * A[1][1] - A[0][1] * A[1][0]))\n    print(norm)\n    return str(norm)\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(i) for i in stdin.split())\n    return str(abs(a * d - b * c))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string \"0.2000000000\".\"\"\"\n    a, b, c, d = map(int, stdin.split())\n    return str(max(abs(a * d - b * c), abs((a - c) * d + (b - d) * c)))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))))\n    # return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))**0.5))\n    # return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))**0.5)**0.5)\n    # return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))**0.5)**2)\n    # return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))**0.5)**3)\n    # return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))**0.5)**4)\n    # return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))**0.5)**5)\n    # return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))**0.5)**6)\n    # return str(max(abs(a * d - b * c), abs((a * d - b * c) * (a * d - b * c))**0.5)**7)\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    matrix = list(map(lambda x: list(map(float, x.split(' '))), stdin.splitlines()))\n    n, m = len(matrix), len(matrix[0])\n    x = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                continue\n            matrix[i][j] *= -1\n            x += matrix[0][j] * matrix[i][1] - matrix[0][i] * matrix[i][j]\n    return str(round(abs(x)**0.5, 9))\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    a, b, c = stdin\n    print((a + b) // 2)"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, a, b = stdin.split(' ')\n    n, a, b = int(n), int(a), int(b)\n    orders = stdin.split(' ')[1:]\n    count = 0\n    for order in orders:\n        if int(order) == 1:\n            if a > 0:\n                a -= 1\n            else:\n                count += 1\n        if int(order) == 2:\n            if b > 0:\n                b -= 1\n            else:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m1, m2 = [int(x) for x in stdin.split()]\n    tables = [int(x) for x in stdin.split()]\n    tables.sort(reverse=True)\n    result = 0\n    # tmp = 0\n    for i in range(n):\n        t1, t2 = tables[i], tables[i]\n        if t1 <= m1:\n            result += 1\n            m1 -= t1\n        elif t2 <= m2:\n            result += 2\n            m2 -= t2\n        else:\n            result += 1\n            m2 -= t2\n            m1 -= t1\n    return result\n\ndef"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int,stdin.split())\n    s=[int(x) for x in stdin.split()]\n    t=s[:n]\n    a=a-1\n    b=b-1\n    c=0\n    for i in range(n):\n        if t[i]==1:\n            if b>0:\n                b=b-1\n            else:\n                if a>0:\n                    a=a-1\n                    b=b-1\n                    c=c+2\n        else:\n            if a>0:\n                a=a-1\n                c=c+1\n    return str(c)\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    t = list(map(int, stdin.split(' ')))\n    s = 0\n    for i in range(n):\n        if t[i] == 1:\n            s += a - 1\n        else:\n            s += 2 * b\n    return s\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    t = [int(x) for x in stdin.split(' ')[1:]]\n    return sum([x for x in t if x == 1]) * a + sum([x for x in t if x == 2]) * b\n    pass"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b, groups = map(int, stdin.split())\n    tables = [a, b]\n    tables.sort()\n    if groups <= tables[0]:\n        return 0\n    elif groups == tables[0] + tables[1]:\n        return a + b - 2 * a\n    elif groups == 2 * tables[0]:\n        return a\n    elif groups == 2 * tables[1]:\n        return b\n    else:\n        return 1\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_groups_one_seater_table, num_groups_two_seater_table = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    num_groups_served = 0\n    remaining_table = num_groups_one_seater_table + num_groups_two_seater_table\n    for person in seq:\n        if person == 1:\n            if remaining_table >= 1:\n                remaining_table -= 1\n            else:\n                num_groups_served += 1\n        else:\n            if remaining_table >= 2:\n                remaining_table -= 2\n            else:\n                num_groups_served += 1\n    return num_groups_served\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return solution string\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n\n    return str(max(a - n, 0)) +'' + str(max(b - n, 0)) +'' + str(max(c - n, 0))\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = [int(i) for i in stdin.split()]\n    \n    if a == 0:\n        return str(n - 1)\n    \n    if b == 0:\n        return '-1'\n    \n    if c == 0:\n        return '-1'\n    \n    return str(n - a - b)\n\n\n-----Problem-----\n\nThe purpose of this problem is to check if the students in a group visited one of the restaurants, one of them visited both and another one didn't. It is known that the group consists of $N$ students.\n\nIt is also known that $A$ students visited the BugDonalds, $B$ students visited the BeaverKing and $C$ students visited both of them. The total number of students is $N$.\n\nCan Vasya still say that he didn't pass the exam? If yes, how many? If no, output one integer\u00a0\u2014 amount of students (including Vasya) who didn't pass the exam.\n\nInput\n1 1 1\n\nOutput\n-1\n\nInput\n1 1 2\n\nOutput\n0\n\nInput\n1 2 2\n\nOutput\n-1\n\nInput\n0 1 2\n\nOutput\n3\n\n\n-----Explanation-----\n\nThe first example describes a situation where the group consists of $3$ students. One of them visited only the BugDonalds and the other two visited only the BeaverKing. That means that Vasya did not pass the exam.\n\nThe second example describes a situation where the group consists of $4$ students. The group consists of one student who visited only the BugDonalds and three others who visited only the BeaverKing. Therefore, Vasya did not pass the exam.\n\nThe third example describes a situation where the group consists of $3$ students. One of them visited only the BugDonalds and the other two visited only the BeaverKing. That means that Vasya did not pass the exam.\n\nThe fourth example describes a situation where the group consists of $2$ students. One of them visited only the BugDonalds and the other visited only the BeaverKing. Therefore, Vasya did not pass the exam.\n\n\n-----Dec. 7, 2019------\nYou are given a string\u00a0\u2013 containing characters '+', '-' and\u00a0'*'. Your task is to determine whether the string is correct math expression or not.\n\nThe string contains only\u00a0+,\u00a0-,\u00a0*\u00a0and\u00a0\u00a0characters. It may contain parentheses.\n\nThe expression is correct if all the signs are correctly placed. For example,\n\n*-/(3-2)*3-2*2-3*2*2-1*2\n\nis correct.\n\nThe expression is incorrect if there are more than one of the same sign next to each other (for example, in the above string there are three '+' and one '*' next to each other).\n\n\n-----Explanation-----\n\nYou are given a string containing '+', '-' and '*'. The string contains only '+', '-' and '*' characters. It may contain parentheses.\n\nThe expression is correct if all the signs are correctly placed. For example,\n\n*-/(3-2)*3-2*2-3*2*2-1*2\n\nis correct.\n\nThe expression is incorrect if there are more than one of the same sign next to each other (for example, in the above string there are three '+' and one '*' next to each other).\n\n\n-----Example 1-----\n\nInput\n\n+- + - * + * * * + + * * - + * * * * *\n\nOutput\n\nTrue\n\nExplanation\n\nInput\n\n+ + + * + * * * + + * * - + * * * * *\n\nOutput\n\nTrue\n\nExplanation\n\nInput\n\n+ - + * + * * * + + * * - + * * * * *\n\nOutput\n\nFalse\n\nExplanation\n\nInput\n\n* - + - + * + * * * + + * * - + * * * * *\n\nOutput\n\nFalse\n\n\n-----Explanation-----\n\nThe expression is incorrect because the last '+' is multiplied by two. The last '+' is multiplied by two and '*' is multiplied by only one.\n\n\n-----Example 2-----\n\nInput\n\n+ - - + - + - * - * + - * - * - + - - * + - * *\n\nOutput\n\nFalse\n\nExplanation\n\nInput\n\n+ - - + - + - * - * + - - * - * + - * - * + - -\n\nOutput\n\nFalse\n\nExplanation\n\nInput\n\n* - - - + - - - * - * + - - * - * + - - * - * + - -\n\nOutput\n\nFalse\n\n\n-----Example 3-----\n\nInput\n\n- * - + - - + - * - * + - - * - * + - * - * - *\n\nOutput\n\nTrue\n\nExplanation\n\nInput\n\n- - - + - - - * - * + - - * - * + - * - * - *\n\nOutput\n\nTrue\n\n\n-----Example 4-----\n\nInput\n\n+ + + - - + - * - * + - * - * + - - * - * +\n\nOutput\n\nFalse\n\nExplanation\n\nInput\n\n+ + + - - + - * - * + - - * - * + - - * - * +\n\nOutput\n\nFalse\n\n\n-----Example 5-----\n\nInput\n\n- - - + - - - + - - * - * + - - * - * + - - * - *\n\nOutput\n\nTrue\n\nExplanation\n\nInput\n\n- - - + - - - + - - * - * + - - * - * + - - * - *\n\nOutput\n\nTrue\n\n\n-----Example 6-----\n\nInput\n\n+ - - - * - + * - - * - - - + * - * - * - - * - * - *\n\nOutput\n\nFalse\n\nExplanation\n\nInput\n\n+ - - - * - + * - - * - - - + * - * - * - - * - * - *\n\nOutput\n\nFalse\n\n\n-----Explanation-----\n\nIn this example, the expression is correct because there are no consecutive signs of the same type"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the amount of students who did not pass the exam.\n\n    :param stdin: input\n    :type stdin: str\n    :return: amount of students who did not pass the exam\n    :rtype: str\n    \"\"\"\n    a, b, c, n = map(int, stdin.split())\n    if a + b + c == n or a + b + c == n + 1 or a + b + c == n - 1:\n        return -1\n    if a < b + c < a + b + c:\n        return n - (a + b + c)\n    if n < a + b < n + 1:\n        return n - a\n    if n < a + c < n + 1:\n        return n - a\n    if n < b + c < n + 1:\n        return n - b\n    return 0\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A * N + B * N + C * N > N * N:\n        return -1\n    return N - (A + B + C)\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return '-1' if (len(set(map(int, stdin.split()[1:])))!= 1 or int(stdin.split()[0])!= 0 or int(stdin.split()[0]) < 0) else '5'\n\n    if (int(stdin.split()[0]) + int(stdin.split()[1]) + int(stdin.split()[2]))!= int(stdin.split()[3]):\n        return '-1'\n    else:\n        return '5'\n\n-----Explanation-----\n\nHere we're counting the number of students who did not pass the exam. In the first sample we have only one student who did not pass the exam.\n\nIn the second sample the number of students who did not pass the exam is $2$ because there are $2$ students who visited neither the BeaverKing nor the BugDonalds, and at least one student was left home.\n\nIn the third sample there is no number of students who did not pass the exam.\n\nIt's quite simple to prove that the first sample is correct, because there is only one student who didn't pass the exam and the rest of the group passed it.\n\nIn the second sample all students visited at least one of the restaurants, which means that the distribution of students in the group is not unique.\n\nIn the third sample we are checking for impossibility because the distribution of students in the group is not unique.\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = [int(x) for x in stdin.split()]\n    return str(sum(min(A, N - A) + min(B, N - B) + min(C, N - C)) - N)\n'''\n\nimport numpy as np\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n    return \"1\" if n - a - b - c <= 0 else \"0\"\n\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = list(map(int, stdin.split()))\n    return str(N - max(A, B, C))\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n    m = min(a, b, c)\n    if m == 0 or a + b + c!= n:\n        return '-1'\n    return n - m\n\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = [int(i) for i in stdin.split(\" \")]\n    # A - people at the BugDonalds\n    # B - people at the BeaverKing\n    # C - people at both of the restaurants\n    # N - total number of students\n    if (A + B + C) == N:\n        print(C)\n    elif (A + B) == N:\n        print(C)\n    elif (A + C) == N:\n        print(B)\n    elif (A) == N:\n        print(B)\n    elif (B) == N:\n        print(C)\n    else:\n        print(-1)\n    return \"\""
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This is an input class. Do not edit.\"\"\"\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k = [int(i) for i in stdin.split(' ')]\n    return int(x * 2**(k-1)) % (10**9 + 7)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return (x * 2 ** (k - 1)) % (10 ** 9 + 7)\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return x * pow(2, k, 1000000007) % 1000000007\n'''\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k = stdin.split(\" \")\n    x = int(x)\n    k = int(k)\n    i = 0\n    while k > 1:\n        if (x * 2 + 1) % 3 == 0:\n            x = (x * 2 + 1) // 3\n        else:\n            x = (x * 2 + 1) // 3 + 1\n        i += 1\n        k -= 1\n    return str(x)\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return x * (2 ** (k - 1)) % (10 ** 9 + 7)"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return probability of no inversions.\"\"\"\n    return \"\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from fractions import gcd\n    n = int(stdin)\n    l = [int(i) for i in stdin.split()]\n    x = 1\n    l = l[1:]\n    for i in range(1, n):\n        l[i] -= l[i - 1]\n    for i in range(1, n):\n        x *= l[i - 1]\n    y = gcd(x, 998244353)\n    return x // y\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \"\"\"\n    pass\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return result\n\nprint(solution('1 2\\n1 2\\n1 2'))\n\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l, r = [int(i) for i in stdin.split(\"\\n\")]\n    count = 0\n    for i in range(n):\n        a = random.randint(l, r)\n        b = random.randint(l, r)\n        if a > b:\n            count += a\n    return str(count)\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The probability that there will be no inversions in the contest can be expressed as an irreducible fraction.\n    '''\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    prob_list = [tuple(map(int, line.split())) for line in lines[1:]]\n    res = 1\n    for l, r in prob_list:\n        res *= r - l + 1\n    for l, r in prob_list:\n        res *= r + l - 1\n    res %= MOD\n\n    return str(res)\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\nimport sys\nimport functools\nfrom collections import Counter\nfrom typing import Tuple, List\nfrom unittest import TestCase\n\nimport numpy as np\n\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 0\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while a!= b:\n            if a > b:\n                a -= b\n            else:\n                b -= a\n        return a\n\n    if len(stdin) == 1:\n        print(0)\n        return\n\n    a, b = stdin.split('\\n')\n    a, b = int(a), int(b)\n\n    g = gcd(a, b)\n    a //= g\n    b //= g\n\n    if a >= 4:\n        print(1)\n        return\n\n    if a >= 2:\n        if b >= 4:\n            print(2)\n            return\n        elif a == 1:\n            print(2)\n            return\n        else:\n            print(1)\n            return\n    else:\n        print(0)\n        return\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return stdin"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n // 4 * (n // 4 - 1) // 2\n\n---- Problem Code ----\nMEGA MANIA\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(int(((stdin ** 2) - (stdin // 2 ** 0.5)) / 4))\n\nprint(solution(int(input())))"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    count = 0\n    while i**2 <= n:\n        if n % i == 0:\n            count += 1\n            n = n // i\n        i += 1\n    return count\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    if length < 4:\n        return '0'\n\n    count = 0\n    for n in range(1, int(length / 2) + 1):\n        for i in range(1, length - n + 1):\n            if length % i == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    return n % 2 + (n % 2 == 0) * 3\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom functools import reduce\nfrom math import ceil\n\nlines = []\nfor line in sys.stdin:\n    lines.append(list(map(int, line.split())))\nn, s = lines[0]\nsums = [0]\nfor _ in range(n):\n    sums.append(sums[-1] + lines[_][0])\nfor i in range(1, n):\n    sums[i + 1] = max(sums[i + 1], sums[i] + lines[i][0])\nl, r = 1, n\nwhile l <= r:\n    m = (l + r) // 2\n    if sums[m] < s:\n        l = m + 1\n    else:\n        r = m - 1\nprint(l) if l <= n else print(-1)\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returning -1 if Fair nut cannot pour his cup by given amount s\"\"\"\n    # parse input\n    num_keg, s = map(int, stdin.split())\n    keg_volume = list(map(int, stdin.split()))\n    keg_volume.sort()\n\n    # find max volume in keg\n    cap = keg_volume[-1]\n\n    # find least volume in keg\n    while True:\n        if cap - s >= 0:\n            # return cap if cap - s == 0 else cap - s\n            return cap\n        cap -= 1\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    a.sort()\n    lowest = 0\n    for i in range(n):\n        lowest += a[i]\n        if lowest >= s:\n            break\n    if lowest < s:\n        return -1\n    return a[i]\n\n\nprint(solution('3 7'))\n\n'''\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    pass\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function will return the least kvass.\"\"\"\n    n, s = [int(x) for x in stdin.split()]\n    kegs = [int(x) for x in stdin.split()]\n    if sum(kegs) < s:\n        return -1\n    kegs.sort()\n    cnt = 0\n    for keg in kegs:\n        cnt += keg\n        if cnt >= s:\n            return keg\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\nsys.stdin = open('in', 'r')\nsys.stdout = open('out', 'w')\n\ndef"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return str\n    n, s = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()][1:]\n    arr.sort()\n    for i in range(n):\n        if arr[i] + i >= s:\n            return str(i + 1)\n    return '-1'\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the least kvass volume.\"\"\"\n    # your code here\n    return\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_kvass(x, kvass):\n        \"\"\"\n        Finds how much kvass can be in the least keg\n        :param x:\n        :param kvass:\n        :return:\n        \"\"\"\n        if len(kvass) == 1:\n            if x < kvass[0]:\n                return -1\n            return x\n        if x < kvass[0]:\n            return -1\n        kvass.sort(reverse=True)\n        kvass.append(1e9)\n        ans = 1e9\n        for i in range(len(kvass) - 1):\n            if x < kvass[i]:\n                return ans\n            ans = min(ans, kvass[i] - x)\n            x -= kvass[i]\n            x += kvass[i + 1]\n        return ans\n\n    k, s = [int(i) for i in stdin.split(' ')]\n    kvass = [int(i) for i in stdin.split(' ')[1:]]\n    return str(find_kvass(s, kvass))\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_seconds(date: str, time: str):\n        h, m = date.split()\n        h, m = int(h), int(m)\n        _, _, s = time.split(':')\n        return h * 3600 + m * 60 + int(s)\n\n    def get_day_time(date: str, time: str):\n        return date, time\n\n    def get_time_distance(time1: str, time2: str) -> int:\n        t1, t2 = time1.split(':'), time2.split(':')\n        d1, d2 = t1[0], t2[0]\n        h1, m1, s1 = int(t1[1]), int(t1[2]), int(t1[3])\n        h2, m2, s2 = int(t2[1]), int(t2[2]), int(t2[3])\n        return (int(d2) - int(d1)) * 24 * 3600 + (h2 - h1) * 3600 + (m2 - m1) * 60 + s2 - s1\n\n    def get_distance(h_1: int, h_2: int, a: int, b: int):\n        return h_2 - h_1 + a * (h_1 < h_2) + b * (h_1 > h_2)\n\n    def get_day(hours: int):\n        return hours // 24\n\n    def get_hours(hours: int):\n        return hours % 24\n\n    def get_minutes(hours: int):\n        return hours % 24 * 60\n\n    h_1, h_2 = list(map(int, stdin.split()))\n    a, b = list(map(int, stdin.split()))\n    if (h_1 + a) >= h_2:\n        return -1\n    elif (h_2 + b) > h_1:\n        return -1\n    elif h_1 == h_2:\n        return 0\n\n    # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u0432\u044b\u0445\u043e\u0434\u0430 \u043d\u0430 \u043e\u0431\u0435\u0434\n    ans = get_day_time(get_hours(h_2 - a), get_minutes(h_2 - a))\n    distance = get_distance(h_2, h_1, a, b)\n\n    while distance > 0:\n        # \u0418\u0434\u0451\u043c \u0432\u043f\u0435\u0440\u0451\u0434\n        ans = get_day_time(get_hours(distance), get_minutes(distance))\n        distance -= a\n        if get_distance(h_1, h_2, a, b) >= distance:\n            return ans[0]\n        # \u0418\u0434\u0451\u043c \u043d\u0430\u0437\u0430\u0434\n        ans = get_day_time(get_hours(distance), get_minutes(distance))\n        distance += a\n        if get_distance(h_1, h_2, a, b) >= distance:\n            return ans[0]\n\n    return ans[0]\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    h1 = int(stdin[0])\n    h2 = int(stdin[1])\n    a = int(stdin[2])\n    b = int(stdin[3])\n    c = (h2 - h1) / (a - b)\n    if c > 0:\n        print(int(c))\n    else:\n        print(-1)\n    return ''\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    return print((h2 - h1) / (a - b)) if h2 >= h1 else print(-1)"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [h_1, h_2] = [int(stdin[0]), int(stdin[1])]\n    [a, b] = [int(stdin[2]), int(stdin[3])]\n    t1 = 0\n    t2 = 0\n    d1 = 0\n    d2 = 0\n    for i in range(t1, h_1):\n        d1 += a\n    for i in range(t2, h_2):\n        d2 += b\n    if d1 < d2:\n        print(-1)\n        return 0\n    print(d1 - d2 + 1)\n    return 0\n\n\nsolution(\"10 19 1 2\")\nsolution(\"10 13 1 2\")\nsolution(\"10 11 1 2\")\nsolution(\"10 10 1 2\")\nsolution(\"10 9 1 2\")\nsolution(\"10 8 1 2\")\nsolution(\"10 7 1 2\")\nsolution(\"10 6 1 2\")\nsolution(\"10 5 1 2\")\nsolution(\"10 4 1 2\")\nsolution(\"10 3 1 2\")\nsolution(\"10 2 1 2\")\nsolution(\"10 1 1 2\")\nsolution(\"10 1 1 1 2\")\nsolution(\"10 1 1 1 1 2\")\nsolution(\"10 1 1 1 1 1 2\")\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2, a, b = map(int, stdin.split(' '))\n    k = (h2 - h1) // (a - b) + 1\n    return k if k >= 0 else -1\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    heights = list(map(int, stdin.split()))\n    if heights[1] > heights[0]:\n        print(-1)\n        return -1\n    a, b = list(map(int, stdin.split()))\n    hour = heights[0] + 1\n    day = 0\n    while hour!= heights[1]:\n        if hour + a > heights[1]:\n            day += 1\n            hour = heights[0] + 1\n        else:\n            hour += a\n        if heights[1] - b < hour:\n            day += 1\n            hour = heights[0] + 1\n        else:\n            hour -= b\n    print(day)\n    return day\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split('\\n')\n    H, A, B = [int(i) for i in lst[0].split()]\n    day = int((((H - A) ** 2) + (H - A) * (A - B) + (A - B) ** 2) ** (0.5) // A)\n    return str(day + 1 if day > 0 else -1)\n\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    height_caterpillar, height_apple = map(int, stdin.split())\n    height_caterpillar_up = height_apple - height_caterpillar\n    speed_caterpillar_up = abs(height_caterpillar_up / 2)\n    speed_caterpillar_down = abs(height_caterpillar / 2)\n    height_caterpillar_down = height_caterpillar_up - speed_caterpillar_down\n    speed_caterpillar = height_caterpillar_down / 2\n\n    if speed_caterpillar_up > speed_caterpillar:\n        return int(speed_caterpillar)\n    return int(speed_caterpillar_up)\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = [int(s) for s in stdin.split(\" \")]\n    return str(max(C * H_r, C * H_b, H_r * W_r + H_b * W_b))\n\"\"\"\nimport sys\nfrom functools import reduce\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = list(map(int, stdin.split(' ')))\n    \n    R = (H_r * W_r + C) * H_b\n    B = (H_b * W_b + C) * H_r\n    \n    return R + B\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = [int(x) for x in stdin.split(' ')]\n    return str(max(H_r * W_b + H_b * W_r, C * H_r * W_b + C * H_b * W_r))\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(__answer)\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c, h_r, h_b, w_r, w_b = [int(i) for i in stdin.split()]\n    def fun(c, h_r, h_b, w_r, w_b):\n        if (w_r * h_r) + (w_b * h_b) <= c:\n            return h_r + h_b\n        else:\n            return fun(c, h_r, h_b, w_r, w_b - 1) if w_r * h_r > c else fun(c, h_r, h_b, w_r - 1, w_b)\n\n    return fun(c, h_r, h_b, w_r, w_b)\n\n\nprint(solution(input()))"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    C, Hr, Hb, Wr, Wb = [int(n) for n in stdin.split(' ')]\n    return str(max(0, C - (Hr * Wr + Hb * Wb)))\n\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Case #1: %s' % (...)"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0].split(' ')[0])*int(stdin.split('\\n')[0].split(' ')[1]) + int(stdin.split('\\n')[0].split(' ')[2])*int(stdin.split('\\n')[0].split(' ')[3]))\n\n\"\"\""
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nimport re\n\nstring = '10 3 5 2 3'"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nx1, y1 = map(int, stdin.strip().split())\nx2, y2 = map(int, stdin.strip().split())\n\nx = x2 - x1\ny = y2 - y1\n\nprint(abs(x) + abs(y))\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return str(abs(x1-x2)+abs(y1-y2))\n\n---"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(i) for i in stdin.split('\\n')[0].split()]\n    return str(abs(x_2 - x_1) + abs(y_2 - y_1))\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split('\\n')[0].split(' '))\n    \n    print(abs(x1 - x2) + abs(y1 - y2))"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = [int(x) for x in stdin.split(' ')]\n    x_2, y_2 = [int(x) for x in stdin.split(' ')]\n    if (x_1, y_1) == (x_2, y_2):\n        return 0\n    if x_1 == x_2:\n        return abs(y_2 - y_1)\n    if y_1 == y_2:\n        return abs(x_2 - x_1)\n    return max(abs(x_2 - x_1), abs(y_2 - y_1))\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n\n    return abs(x1-x2) + abs(y1-y2)\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    i   j   k\n    3   4   5\n    6   1   8\n\n\n    stdin:\n    1 0\n    4 5\n\n    return:\n    3\n    '''\n\n    start_pos = list(map(int, stdin.split()))\n    finish_pos = list(map(int, stdin.split()))\n\n    start_pos = [abs(start_pos[0] - finish_pos[0]), abs(start_pos[1] - finish_pos[1])]\n    max_value = max(start_pos)\n    if max_value == 0:\n        return abs(start_pos[0] - start_pos[1])\n    return abs(start_pos[0] - start_pos[1]) + max_value\n\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nx, y = map(int, stdin.split(' '))"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split(' '))\n    return abs(x_1 - x_2) + abs(y_1 - y_2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, votes = map(int, stdin.split())\n    people = list(map(lambda x: x == 'R', stdin))\n    denied = set()\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if people[i] and people[j]:\n                denied.add(j)\n            if people[j] and people[i]:\n                denied.add(i)\n    \n    people = [not people[i] for i in range(n) if not people[i] or i in denied]\n    \n    print(f'R' if people.count(True) > n / 2 else 'D')\n    return ''"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = stdin[:n]\n    for i in range(n):\n        if res[i] == \"D\":\n            res = res[:i] + \"R\" + res[i + 1:]\n    return res\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    k = int(data[0])\n    fraction = data[1]\n    defenders = 0\n    attackers = 0\n    for i in range(len(fraction)):\n        if i % k == 0 and i!= 0:\n            defenders += 1\n        if fraction[i] == 'D':\n            defenders += 1\n        else:\n            attackers += 1\n    if defenders > attackers:\n        return 'D'\n    return 'R'\nprint(solution(input()))\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = [stdin[i] for i in range(0, n)]\n    alice = 0\n    bob = 0\n    for i in range(0, n):\n        if f[i] == 'R':\n            bob += 1\n        else:\n            alice += 1\n    print(alice)\n    print(bob)\n    if alice == bob:\n        return 'D'\n    elif alice > bob:\n        return 'R'\n    else:\n        return 'D'\n\nprint(solution(input()))\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nDDRRR\")\n    'D'\n    \"\"\"\n    n = int(stdin)\n    seq = [char for char in stdin]\n\n    if n % 2 == 0:\n        print('R')\n        return\n\n    denied = set()\n    i = 1\n    while i < n:\n        if seq[i]!= seq[i - 1]:\n            denied.add(i)\n            denied.add(i - 1)\n        i += 2\n\n    if len(denied) > 1:\n        print('R')\n        return\n\n    print('D')\n    return\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    employees = [i for i in stdin]\n    depublicans = 0\n    remocrats = 0\n\n    for i in range(len(employees)):\n        if employees[i] == 'D':\n            depublicans += 1\n        else:\n            remocrats += 1\n\n    if depublicans > remocrats:\n        return 'D'\n    elif remocrats > depublicans:\n        return 'R'\n    else:\n        return 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #stdin = input()\n    if len(stdin) == 0:\n        return \"D\"\n\n    #split = stdin.split()\n    #if len(split) == 0:\n    #    return \"D\"\n\n    #fraction = [char for char in split[0]]\n    #if len(fraction) == 0:\n    #    return \"D\"\n\n    #if not fraction[0].isdigit():\n    #    return \"D\"\n\n    #n = int(fraction[0])\n\n    #if n > 200000:\n    #    return \"D\"\n    #elif n < 1:\n    #    return \"D\"\n\n    #if len(fraction) == 1:\n    #    return \"D\"\n    #elif len(fraction) > 1:\n    #    if not fraction[1].isdigit():\n    #        return \"D\"\n    #    n = int(fraction[1])\n\n    #    if n > 200000:\n    #        return \"D\"\n    #    elif n < 1:\n    #        return \"D\"\n\n    #    if len(fraction) == 2:\n    #        return \"D\"\n    #    elif len(fraction) > 2:\n    #        if not fraction[2].isdigit():\n    #            return \"D\"\n    #        n = int(fraction[2])\n\n    #        if n > 200000:\n    #            return \"D\"\n    #        elif n < 1:\n    #            return \"D\"\n\n    #        if len(fraction) == 3:\n    #            return \"D\"\n    #        elif len(fraction) > 3:\n    #            if not fraction[3].isdigit():\n    #                return \"D\"\n    #            n = int(fraction[3])\n\n    #            if n > 200000:\n    #                return \"D\"\n    #            elif n < 1:\n    #                return \"D\"\n\n    #        if len(fraction) == 4:\n    #            return \"D\"\n    #        elif len(fraction) > 4:\n    #            if not fraction[4].isdigit():\n    #                return \"D\"\n    #            n = int(fraction[4])\n\n    #            if n > 200000:\n    #                return \"D\"\n    #            elif n < 1:\n    #                return \"D\"\n\n    #        if len(fraction) == 5:\n    #            return \"D\"\n    #        elif len(fraction) > 5:\n    #            if not fraction[5].isdigit():\n    #                return \"D\"\n    #            n = int(fraction[5])\n\n    #            if n > 200000:\n    #                return \"D\"\n    #            elif n < 1:\n    #                return \"D\"\n\n    #    if len(fraction) == 6:\n    #        return \"D\"\n\n    #    if len(fraction) > 6:\n    #        if not fraction[6].isdigit():\n    #            return \"D\"\n    #        n = int(fraction[6])\n\n    #        if n > 200000:\n    #            return \"D\"\n    #        elif n < 1:\n    #            return \"D\"\n\n    #        if len(fraction) == 7:\n    #            return \"D\"\n    #        elif len(fraction) > 7:\n    #            if not fraction[7].isdigit():\n    #                return \"D\"\n    #            n = int(fraction[7])\n\n    #            if n > 200000:\n    #                return \"D\"\n    #            elif n < 1:\n    #                return \"D\"\n\n    #        if len(fraction) == 8:\n    #            return \"D\"\n    #        elif len(fraction) > 8:\n    #            if not fraction[8].isdigit():\n    #                return \"D\"\n    #            n = int(fraction[8])\n\n    #            if n > 200000:\n    #                return \"D\"\n    #            elif n < 1:\n    #                return \"D\"\n\n    #    if len(fraction) == 9:\n    #        return \"D\"\n\n    #    if len(fraction) > 9:\n    #        if not fraction[9].isdigit():\n    #            return \"D\"\n    #        n = int(fraction[9])\n\n    #        if n > 200000:\n    #            return \"D\"\n    #        elif n < 1:\n    #            return \"D\"\n\n    #    if len(fraction) == 10:\n    #        return \"D\"\n\n    #    if len(fraction) > 10:\n    #        if not fraction[10].isdigit():\n    #            return \"D\"\n    #        n = int(fraction[10])\n\n    #        if n > 200000:\n    #            return \"D\"\n    #        elif n < 1:\n    #            return \"D\"\n\n    #    if len(fraction) == 11:\n    #        return \"D\"\n\n    #    if len(fraction) > 11:\n    #        if not fraction[11].isdigit():\n    #            return \"D\"\n    #        n = int(fraction[11])\n\n    #        if n > 200000:\n    #            return \"D\"\n    #        elif n < 1:\n    #            return \"D\"\n\n    #    if len(fraction) == 12:\n    #        return \"D\"\n\n    #    if len(fraction) > 12:\n    #        if not fraction[12].isdigit():\n    #            return \"D\"\n    #        n = int(fraction[12])\n\n    #        if n > 200000:\n    #            return \"D\"\n    #        elif n < 1:\n    #            return \"D\"\n\n    #    if len(fraction) == 13:\n    #        return"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin)\n    votes = stdin[:n]\n    # if there is only one voter left, the vote is going to be for him\n    if votes.count(\"D\") == n:\n        return \"D\"\n    # if there is only one voter left, the vote is going to be for him\n    if votes.count(\"R\") == n:\n        return \"R\"\n    # determine the order of voting\n    order = [i for i in range(n) if votes[i] == \"D\"] + [i for i in range(n) if votes[i] == \"R\"]\n    # if the order is not suitable for voting, return the opposite one\n    if order!= sorted(order):\n        return \"R\" if order[0] < n // 2 else \"D\"\n    # otherwise determine the outcome of the voting\n    return votes[order[0]]\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    rem = list(stdin)\n    dep = []\n    for i in range(n):\n        if rem[i] == \"R\":\n            dep.append(\"D\")\n        else:\n            dep.append(\"R\")\n    def find(n, dep):\n        for i in range(n):\n            for j in range(i+1,n):\n                if dep[i]==\"R\" and dep[j]==\"R\":\n                    break\n                if dep[i]==\"D\" and dep[j]==\"D\":\n                    break\n            else:\n                return dep[i]\n    print(find(n,dep))\n\n\ndef"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    count = 0\n    for w in range(a, b + 1):\n        for h in range(a, b + 1):\n            if w / h == x / y:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n\n    result = 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if w * h > x and w / h < y:\n                result += 1\n\n    return str(result)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    print(sum(1 for w, h in product(range(a + 1), range(b + 1)) if 1 <= w / h <= x / y))\n    return ''\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(i) for i in stdin.split(' ')]\n    return str(sum([1 for w in range(a + 1) for h in range(b + 1) if h / w == x / y]))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    return str(sum(1 for w in range(a) for h in range(b) if w * h == x * y))\n    \n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    return str(binomial_coefficient(b, y) - binomial_coefficient(b, x) - binomial_coefficient(a, x - y))\n\n\ndef"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b, x, y = map(int, stdin.split())\n    res = 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if w / h == x / y:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    return str(binomial(a, x) * binomial(b, y))\n\n\ndef"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n\n    return str(sum(\n        sum(w <= a, w <= b) &\n        sum(h <= b) &\n        sum(x / y == w / h)\n        for w, h in combinations(range(1, a + 1), 2)\n    ))\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_n_base(n, b):\n        result = ''\n        while n:\n            result += str(n % b)\n            n //= b\n        return result[::-1]\n\n    def get_factorial(n, b):\n        result = ''\n        while n > 0:\n            result += str(n % b)\n            n //= b\n        return result\n\n    n, b = [int(x) for x in stdin.split()]\n    print(len(get_n_base(n, b)) - len(get_factorial(n, b)))\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the number of trailing zero digits of a factorial.\n    \n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: output string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    if n < 10:\n        return 0\n    res = 0\n    for i in range(1, n+1):\n        if i * b**(n-i) == 0:\n            res += 1\n    return res\n\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return str(stdout)"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 9''')\n    '1'\n    >>> solution('''38 11''')\n    '3'\n    >>> solution('''5 2''')\n    '3'\n    >>> solution('''5 10''')\n    '1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 9')\n    1\n    >>> solution('38 11')\n    3\n    >>> solution('5 2')\n    3\n    >>> solution('5 10')\n    1\n    \"\"\"\n    n, b = [int(x) for x in stdin.split()]\n    n_str = str(n)\n    zero_count = 0\n    for i in range(len(n_str)):\n        if int(n_str[i]) == 0:\n            zero_count += 1\n        else:\n            break\n    if zero_count > 0:\n        print(zero_count)\n    else:\n        print(0)\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b = [int(i) for i in stdin.split(' ')]\n    # n * b^(n-1) = n!\n    # b^(n-1) = n! // b^(n-1) = n! // n\n    # b^(n-1) = n! // n // b^(n-1)\n    # b^(n-1) = n! // n // b^(n-1) // b\n    # b^(n-1) = n! // n // b^(n-1) // b^(n-1)\n    # b^(n-1) = n! // n // b^(n-1) // b^(n-1) //...\n    # b^(n-1) = n! // n // b^(n-1) // b^(n-1) //... // b\n    # b^(n-1) = n! // n //... // b\n    # b^(n-1) = n! // b^(n-1) = n! // n // b^(n-1)\n    # b^(n-1) = n! // n // b^(n-1) //... // b^(n-1) = n! // n // b^(n-1) //...\n    # b^(n-1) = n! // n // b^(n-1) //... // b^(n-1) //... // b\n    # b^(n-1) = n! // n // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    # b^(n-1) = n! // n // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b\n    #...\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    #...\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    #...\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1)\n    # b^(n-1) = n! // n //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^(n-1) //... // b^("
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\nn, b = map(int, stdin.split(' '))\nprint(math.floor(math.log(n, b)))\n\n\"\"\"\ndef"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    '''\n    n = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n\n    s = str(n)\n    s_len = len(s)\n    base = int(str(b) + '0' * (s_len - 1))\n\n    print(len(str(base)) - len(str(n)))\n\n    return ''\n    '''\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split(' ')]\n    return (m*(m+1)//2 - a*(a-1)//2 - b*(b-1)//2) % (10**9+7)\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    if m == 1:\n        return m\n    if b == 1:\n        return 1\n    a, b = min(a, b), max(a, b)\n    if a < 0 and b > 0:\n        a, b = -a, -b\n    b += 1\n    if a >= b:\n        return 1\n    return sum(((m - b) // (b - a)) * (i // (b - a)) + i % (b - a) for i in range(m, b))\n\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split()\n    m = int(input_str[0])\n    a = int(input_str[1])\n    b = int(input_str[2])\n    sum = 0\n    for i in range(m):\n        if i >= a and i <= m-b:\n            sum += (i + 1)\n    print(sum)\n    return \"\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split(' '))\n    return sum(range(0, m+1))\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split(' ')]\n    return (f(m) - f(a-1) - f(m-b)) % 1000000007\n\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split()]\n    print(sum([a, b] * m))\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A frog is initially at position $0$ on the number line. The frog has two positive integers $a$ and $b$. From a position $k$, it can either jump to position $k+a$ or $k-b$.\n\n    Let $f(x)$ be the number of distinct integers the frog can reach if it never jumps on an integer outside the interval $[0, x]$. The frog doesn't need to visit all these integers in one trip, that is, an integer is counted if the frog can somehow reach it if it starts from $0$.\n\n    Given an integer $m$, find $\\sum_{i=0}^{m} f(i)$. That is, find the sum of all $f(i)$ for $i$ from $0$ to $m$.\n\n    :param stdin:\n    :return:\n    \"\"\"\n\n\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return str(sum(i if i < a or i >= b else (i + a) % (b - a + 1) + 1 for i in range(m + 1)))\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(n) for n in stdin.split(' ')]\n    # answer = 0\n    # for i in range(0, m + 1):\n    #     if i % a == 0 or i % b == 0:\n    #         answer += 1\n    # return str(answer)\n    return str(m * (m + 1) // 2)\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nm, a, b = [int(x) for x in stdin.split()]\nf = [0, 1] + [0]*(m-1)\nfor i in range(2, m+1):\n    f[i] = f[i-1] + i\nfor i in range(m):\n    x = a if i % 2 else b\n    f[i] = min(f[i], f[i//2] + (x if i % 2 else 0))\nprint(f[-1])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Count the number of elements, if it's even then it's impossible\n    Count the number of subsegments\n    '''\n    return 'Yes' if len(stdin.split(' ')) % 2 == 1 else 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    odd = [i for i in a if i % 2 == 1]\n    if len(odd) % 2!= 0 or len(a) == 0:\n        return \"No\"\n    if len(odd) == 1:\n        return \"Yes\"\n    else:\n        for i in range(len(odd)):\n            for j in range(i + 1, len(odd)):\n                if (odd[i] + odd[j]) % 2 == 1:\n                    return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    # IMPORTANT\n    # The first two numbers are the only even numbers in this sequence.\n    # The rest are odd numbers.\n    # So we can start looking for the first two numbers\n    # and then, looking for the second two numbers\n    # After, we need to divide the rest of the sequence into two\n    # subsegments, each of which starts with a number that is\n    # odd. We will be able to find two even numbers when we look for\n    # the second two odd numbers, and three when we look for the\n    # second two odd numbers.\n\n    # If the number of even numbers is even, then we can find\n    # it in the first two odd numbers\n    # If the number of even numbers is odd, then we can find\n    # it in the first three odd numbers\n    # In all cases, we can find it in three of the even numbers, so we have\n    # the required numbers\n\n    # We can make sure that we have the required numbers by looking for\n    # the next odd number when we are looking for the next even number\n    # and for the next odd number when we are looking for the next two\n    # odd numbers.\n\n    # The second two odd numbers (after the first two) will be odd\n    # and we are looking for the second even numbers after them\n    # The second two even numbers (after the second two odd numbers)\n    # will be even and we are looking for the third even numbers after them\n    # The third even numbers (after the second two even numbers) will be even\n    # and we are looking for the third odd numbers after them\n    # The third odd numbers (after the third even numbers) will be odd\n    # and we are looking for the fourth even numbers after them\n    # The fourth even numbers (after the third odd numbers) will be even\n    # and we are looking for the fourth odd numbers after them\n    # The fourth odd numbers (after the fourth even numbers) will be odd\n    # and we have all the required numbers\n    \"\"\"\n    # First number must be odd\n    # If it is even, we can't do it\n    first_odd = 1\n    # Second number must be even\n    # If it is odd, we can't do it\n    second_even = 2\n    # If the number of even numbers is even, then we can find\n    # it in the first two odd numbers\n    # If the number of even numbers is odd, then we can find\n    # it in the first three odd numbers\n    # After, we need to divide the rest of the sequence into two\n    # subsegments, each of which starts with a number that is\n    # odd. We will be able to find two even numbers when we look for\n    # the second two odd numbers\n    # If the number of even numbers is even, then we can find\n    # it in the first two even numbers\n    # If the number of even numbers is odd, then we can find\n    # it in the first three even numbers\n    # In all cases, we can find it in three of the even numbers, so we have\n    # the required numbers\n    # Second two odd numbers (after the first two) will be odd\n    # and we are looking for the second even numbers after them\n    # The second two even numbers (after the second two odd numbers)\n    # will be even and we are looking for the third even numbers after them\n    # The third even numbers (after the second two even numbers) will be even\n    # and we are looking for the third odd numbers after them\n    # The third odd numbers (after the third even numbers) will be odd\n    # and we are looking for the fourth even numbers after them\n    # The fourth even numbers (after the third odd numbers) will be even\n    # and we are looking for the fourth odd numbers after them\n    # The fourth odd numbers (after the fourth even numbers) will be odd\n    # and we have all the required numbers\n    # Third even number will be even\n    # Fourth even number will be even\n    # Fifth even number will be even\n    # Sixth even number will be even\n    # Third odd number will be odd\n    # Fourth odd number will be odd\n    # Fifth odd number will be odd\n    # Sixth odd number will be odd\n    # Seventh odd number will be odd\n    # Eighth odd number will be odd\n    # Ninth odd number will be odd\n    # Tenth odd number will be odd\n    # Eleventh odd number will be odd\n    # Twelveth odd number will be odd\n    # First even number will be even\n    # Second even number will be even\n    # Third even number will be even\n    # Fourth even number will be even\n    # Fifth even number will be even\n    # Sixth even number will be even\n    # Seventh even number will be even\n    # Eighth even number will be even\n    # Third odd number will be odd\n    # Fourth odd number will be odd\n    # Fifth odd number will be odd\n    # Sixth odd number will be odd\n    # Seventh odd number will be odd\n    # Eighth odd number will be odd\n    # Ninth odd number will be odd\n    # Tenth odd number will be odd\n    # Eleventh odd number will be odd\n    # Twelveth odd number will be odd\n    # First even number will be even\n    # Second even number will be even\n    # Third even number will be even\n    # Fourth even number will be even\n    # Fifth even number will be even\n    # Sixth even number will be even\n    # Seventh even number will be even\n    # Eighth even number will be even\n    # First odd number will be odd\n    # Second odd number will be odd\n    # Third odd number will be odd\n    # Fourth odd number will be odd\n    # Fifth odd number will be odd\n    # Sixth odd number will be odd\n    # Seventh odd number will be odd\n    # Eighth odd number will be odd\n    # Ninth odd number will be odd\n    # Tenth odd number will be odd\n    # Eleventh odd number will be odd\n    # Twelveth odd number will be odd\n\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    if len(l) == 1:\n        return 'Yes' if l[0] % 2 == 1 else 'No'\n\n    if len(l) == 2:\n        if l[0] % 2 == 1 and l[1] % 2 == 1:\n            return 'Yes'\n        else:\n            return 'No'\n\n    if len(l) == 3:\n        if l[0] % 2 == 1 and l[1] % 2 == 1 and l[2] % 2 == 1:\n            return 'Yes'\n        else:\n            return 'No'\n\n    if len(l) > 3:\n        if l[0] % 2 == 1 and l[1] % 2 == 1 and l[2] % 2 == 1:\n            return 'Yes'\n        else"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n----SOLUTION----\ndef"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum([1 for i in stdin.split() if int(i) % 2 == 0]) < 2 else \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split('\\n')\n    sequence_len = int(input_[0])\n    sequence_ = input_[1].split(' ')\n    sequence = []\n    for i in sequence_:\n        sequence.append(int(i))\n    result = ''\n    for i in range(0, len(sequence), 2):\n        if sequence[i] % 2!= 0 and sequence[i + 1] % 2!= 0:\n            result = 'Yes'\n            break\n        else:\n            result = 'No'\n            break\n    print(result)\n    return result"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split(' ')\n    count = 0\n    for i in range(n):\n        if int(arr[i]) % 2 == 0:\n            count += 1\n            if count >= 3:\n                return \"No\"\n        else:\n            count = 0\n    return \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    numbers = [int(n) for n in stdin.readline().split(' ')]\n    result = 'Yes' if sum(numbers) % 2 == 0 and sum(numbers)!= 0 and all(n % 2!= 0 for n in numbers) and all(n % 2!= 0 for n in numbers[1::2]) else 'No'\n    print(result)\n    return result\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0 0 1 1\\n')\n    '1 0 1 1'\n    >>> solution('0 0 2 1\\n')\n    '0 1 1 0'\n    >>> solution('0 0 1 2\\n')\n    '-1'\n    \"\"\"\n    # 1st solution\n    # x1, y1, x2, y2 = map(int, stdin.split(' '))\n    # m = [\n    #     [x1, y1, x1**2 + y1**2, 1],\n    #     [x2, y2, x2**2 + y2**2, 1],\n    #     [1, 1, 2, 0]\n    # ]\n    # A = np.linalg.solve(m, [0, 0, 0, 0])\n    # return '{} {} {} {}'.format(A[0], A[1], A[2], A[3])\n\n    # 2nd solution\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    def solve(x1, y1, x2, y2):\n        def gcd(a, b):\n            while b: a, b = b, a % b\n            return a\n\n        x1, x2, y1, y2 = x1, x2, y1, y2\n        x = abs(x1 - x2)\n        y = abs(y1 - y2)\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        if x == 1 and y == 1:\n            return '{} {} {} {}'.format(x1, y1, x2, y2)\n        elif x == 1 or y == 1:\n            return '{} {} {} {}'.format(x1, y1, x2, y2)\n        else:\n            return '{} {} {} {}'.format(x1, y1, x2, y2)\n    return solve(x1, y1, x2, y2)\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(' ')]\n    if abs(x2 - x1) > 1 or abs(y2 - y1) > 1:\n        return '-1'\n    else:\n        return f\"{max(x1, y1) - 1} {max(x1, y1) - 2}\"\n    '''\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(' ')]\n    if x1 > y1 and x2 > y2:\n        x3, y3, x4, y4 = x1, y2, x2, y1\n    elif x1 < y1 and x2 < y2:\n        x3, y3, x4, y4 = x2, y1, x1, y2\n    else:\n        return '-1'\n    return f'{x3} {y3} {x4} {y4}'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 0 1 1\")\n    1 0 1 1\n    \"\"\"\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n\n    # 1. Take the absolute value of the difference between the coordinates.\n    # 2. If x_3 and y_3 are closer to x_1 and y_1 respectively, then the distance is the absolute value of difference between x_1 and x_3.\n    # 3. If x_4 and y_4 are closer to x_2 and y_2 respectively, then the distance is the absolute value of difference between x_2 and x_4.\n    # 4. If x_3 and y_3 are closer to x_2 and y_2 respectively, then the distance is the absolute value of difference between x_2 and x_3.\n    # 5. If x_4 and y_4 are closer to x_1 and y_1 respectively, then the distance is the absolute value of difference between x_1 and x_4.\n\n    # 1. Take the absolute value of the difference between the coordinates.\n    dist_1 = abs(x_1 - x_2) + abs(y_1 - y_2)\n    dist_2 = abs(x_1 - x_3) + abs(y_1 - y_3)\n    dist_3 = abs(x_2 - x_3) + abs(y_2 - y_3)\n    dist_4 = abs(x_2 - x_4) + abs(y_2 - y_4)\n\n    # 2. If x_3 and y_3 are closer to x_1 and y_1 respectively, then the distance is the absolute value of difference between x_1 and x_3.\n    # 3. If x_4 and y_4 are closer to x_2 and y_2 respectively, then the distance is the absolute value of difference between x_2 and x_4.\n    # 4. If x_3 and y_3 are closer to x_2 and y_2 respectively, then the distance is the absolute value of difference between x_2 and x_3.\n    # 5. If x_4 and y_4 are closer to x_1 and y_1 respectively, then the distance is the absolute value of difference between x_1 and x_4.\n    if dist_1 < dist_2 < dist_3 < dist_4:\n        return x_1, y_1, x_3, y_3\n    elif dist_1 < dist_3 < dist_4 < dist_2:\n        return x_1, y_1, x_4, y_4\n    elif dist_2 < dist_3 < dist_4 < dist_1:\n        return x_2, y_2, x_3, y_3\n    elif dist_2 < dist_4 < dist_3 < dist_1:\n        return x_2, y_2, x_4, y_4\n    elif dist_3 < dist_4 < dist_1 < dist_2:\n        return x_3, y_3, x_1, y_1\n    elif dist_3 < dist_2 < dist_1 < dist_4:\n        return x_3, y_3, x_2, y_2\n    elif dist_4 < dist_1 < dist_2 < dist_3:\n        return x_4, y_4, x_1, y_1\n    elif dist_4 < dist_2 < dist_3 < dist_1:\n        return x_4, y_4, x_2, y_2\n    else:\n        return -1\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''The function, which calculates the coordinates of the two other trees.\n\n    Args:\n        stdin (str): 4 space-separated integers x_1, y_1, x_2, y_2 ( - 100 \u2264 x_1, y_1, x_2, y_2 \u2264 100) integers, where x_1 and y_1 are coordinates of the first tree and x_2 and y_2 are coordinates of the second tree. It's guaranteed that the given points are distinct.\n\n    Returns:\n        str: if there is no solution to the problem, print -1. Otherwise print four space-separated integers x_3, y_3, x_4, y_4 that correspond to the coordinates of the two other trees. If there are several solutions you can output any of them.\n    '''\n    coordinates = stdin.split(' ')\n    if (coordinates[0] == coordinates[2] and coordinates[1] == coordinates[3]) or \\\n            (coordinates[0] == coordinates[3] and coordinates[1] == coordinates[2]):\n        return '-1'\n\n    x_1, y_1 = coordinates[0], coordinates[1]\n    x_2, y_2 = coordinates[2], coordinates[3]\n\n    if x_1 == x_2 and y_1 == y_2:\n        return '0 0 0 0'\n\n    if x_1 == x_2 and y_1!= y_2:\n        return f'{x_1} {y_1} {x_1} {y_2}'\n    elif x_1!= x_2 and y_1 == y_2:\n        return f'{x_1} {y_1} {x_2} {y_1}'\n    elif x_1!= x_2 and y_1!= y_2:\n        return f'{x_1} {y_1} {x_2} {y_2}'"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    return str(x1 - y1) +'' + str(x1 + y1) +'' + str(x2 - y2) +'' + str(x2 + y2)\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3 = x1 if (x2 == y1) or (y2 == x1) else x2\n    y3 = y1 if (x2 == y1) or (y2 == x1) else x1\n    x4 = x2 if (x2 == y1) or (y2 == x1) else y2\n    y4 = y2 if (x2 == y1) or (y2 == x1) else y1\n    if x3 == y4:\n        x4, y4 = y4, x4\n    return f'{x3} {y3} {x4} {y4}'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x2:\n        x3 = x1\n        x4 = x2\n        if y1!= y2:\n            y3 = y2\n            y4 = y1\n        else:\n            y3 = y1 + 1\n            y4 = y2\n    elif y1 == y2:\n        x3 = x1\n        x4 = x2\n        if x1!= x2:\n            y3 = y1\n            y4 = y2\n        else:\n            y3 = y2 + 1\n            y4 = y1\n    else:\n        x3 = x1\n        x4 = x2\n        y3 = y1\n        y4 = y2\n    return f\"{x3} {y3} {x4} {y4}\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    if x1 == x2:\n        return str(x1) +'' + str(y1) +'' + str(x1) +'' + str(y2)\n    elif y1 == y2:\n        return str(x1) +'' + str(y1) +'' + str(x2) +'' + str(y1)\n    else:\n        return '-1'"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = [int(x) for x in stdin.split(\" \")]\n\n    x_1, y_1, x_2, y_2 = points[0], points[1], points[2], points[3]\n\n    if x_1 == x_2:\n        return f\"0 {x_1} {(y_1 + y_2) // 2} 1\"\n    elif y_1 == y_2:\n        return f\"{(x_1 + x_2) // 2} 0 {y_1} 1\"\n    else:\n        return f\"{(x_1 + x_2) // 2} {(y_1 + y_2) // 2} 0 1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '0 0 1 1'\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A small function that calculates the n-th Fibonacci number\n    according to the problem's description.\n\n    Parameters\n    ----------\n    stdin : str\n        A string containing the first line of the input.\n\n    Returns\n    -------\n    str\n        A string containing the second line of the input.\n    \"\"\"\n\n    x, y = map(int, stdin.split(' '))\n\n    return str((x ** 2 - 5) * (y ** 2 + 5))\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\n3\\n\")\n    '1'\n    >>> solution(\"0 -1\\n2\\n\")\n    '1000000006'\n    \"\"\"\n    x, y = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    n = int(stdin.split(\"\\n\")[1])\n\n    ans = [x, y]\n\n    for _ in range(n - 2):\n        ans.append(ans[-2] + ans[-1])\n\n    return str(ans[n - 1] % 1000000007)\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = [int(x) for x in stdin.split(' ')]\n    ans = y\n    if n == 1:\n        ans = x\n    if n == 2:\n        ans = x + y\n    for i in range(3, n+1):\n        ans = x + y\n        x, y = y, ans\n    return str(ans % (10**9+7))\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    return str(pow(x, y, 1000000007))\n    \n    \n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    return pow(2, n, 1000000007) * (x - pow(y, n, 1000000007)) % 1000000007\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    for _ in range(int(stdin)):\n        x, y = y, x + y\n    return str(x % (1000000007))\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    x, y = input_lines[0].split()\n    n = int(input_lines[1])\n    x = int(x)\n    y = int(y)\n    return str(x + y * n % (10 ** 9 + 7))\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # import sys\n    # input = sys.stdin.readline\n    # sys.setrecursionlimit(10 ** 7)\n    x, y = map(int, stdin.readline().split())\n    n = int(stdin.readline())\n    if n == 1:\n        return x % 1000000007\n    if n == 2:\n        return (y + x) % 1000000007\n    if n == 0:\n        return (y * 2) % 1000000007\n    if n == -1:\n        return (x + y) % 1000000007\n    else:\n        return (2 * (x + y)) % 1000000007\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1\")\n    \"2\"\n    >>> solution(\"0 -1\")\n    \"1000000006\"\n    \"\"\"\n    x, y = map(int, stdin.split())\n    if x == 0:\n        return str(y * y % 1000000007)\n    x = abs(x)\n    y = abs(y)\n    if x < y:\n        x, y = y, x\n    if x == 0:\n        return \"0\"\n\n    sign = 1 if x * y > 0 else -1\n    x, y = abs(x), abs(y)\n    ans = []\n    while True:\n        n = (x + y) // 2\n        s = sign * n\n        ans.append(str(s % 1000000007))\n        if x == y:\n            break\n        sign = -sign\n        x, y = n * 2, (x - n) * 2\n\n    return \" \".join(ans)\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.strip().split(' '))\n    res = [x]\n    res.append(y)\n    for i in range(2, 1000001):\n        res.append((res[i - 1] + res[i]) % 1000000007)\n    print(res[n])\n    return ''"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\\n3\\n1 1\\n2 2\\n3 3\\n4 4\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return 'NO'\n    arr = [int(x) for x in stdin.split()]\n    if len(arr) < 1:\n        return 'NO'\n    if sum(arr) == 0:\n        return 'YES'\n    d = {0: 1}\n    def divide(a,b,n):\n        key = a + b\n        if key in d:\n            return d[key]\n        if b > n or a > n:\n            return 0\n        if a == b:\n            return 1\n        if a == n or b == n:\n            return 0\n        if a == 0 or b == 0:\n            return 1\n        d[key] = divide(a,b+1,n) + divide(a+1,b,n)\n        return d[key]\n    k = 1\n    l = 1\n    while k > 0:\n        k = divide(l,l+1,n)\n        if k > 0:\n            l += 1\n    return 'YES' + '\\n' + str(l-1) + '\\n' + str(l) + '\\n'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    s = sum(arr)\n    if s == 0:\n        return \"YES\"\n    if s < 0:\n        return \"NO\"\n    d = collections.Counter(arr)\n    if d[0] > 1:\n        return \"NO\"\n\n    count = 0\n    for v in d.values():\n        if v > 1:\n            count += v - 1\n\n    if count % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 -3\\n\")\n    YES\n    >>> solution(\"4\\n1 2 3 -5\\n\")\n    YES\n    >>> solution(\"8\\n9 -12 3 4 -4 -10 7 3\\n\")\n    YES\n    >>> solution(\"1\\n0\\n\")\n    NO\n    \"\"\"\n    n = int(stdin)\n    arr = [int(i) for i in stdin.strip().split(\"\\n\")[1].split()]\n    s = sum(arr)\n    print(\"YES\" if s > 0 else \"NO\")\n    print(len(arr) if s > 0 else \"NO\")\n    for i in range(1, len(arr) + 1):\n        if s + arr[0] > 0:\n            s -= arr.pop(0)\n            print(i, i)\n        else:\n            print(\"NO\")\n            return\n        if s == 0:\n            break\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solve the problem\n    Input:\n    The first line contains single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of elements in the array A.\n    The next line contains n integers a_1, a_2,..., a_{n} ( - 10^3 \u2264 a_{i} \u2264 10^3)\u00a0\u2014 the elements of the array A.\n    Output:\n    If it is not possible to split the array A and satisfy all the constraints, print single line containing \"NO\" (without quotes).\n    Otherwise in the first line print \"YES\" (without quotes). In the next line print single integer k\u00a0\u2014 the number of new arrays. In each of the next k lines print two integers l_{i} and r_{i} which denote the subarray A[l_{i}... r_{i}] of the initial array A being the i-th new array. Integers l_{i}, r_{i} should satisfy the following conditions:  l_1 = 1  r_{k} = n  r_{i} + 1 = l_{i} + 1 for each 1 \u2264 i < k. \n    If there are multiple answers, print any of them.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    if sum(nums) % 2!= 0:\n        return \"NO\"\n    else:\n        nums.sort()\n        dp = [1] * n\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return \"YES\" if n % 2 == 0 else \"NO\""
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns YES if it is possible to split the array into new arrays and\n    NO otherwise\n\n    Args:\n        stdin (str): Input from STDIN\n\n    Returns:\n        str: YES or NO based on whether the split is possible or not\n    \"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    numbers = [int(i) for i in stdin[1:]]\n    if sum(numbers) == 0:\n        return \"YES\"\n    for i in range(1, n):\n        print(i)\n        print(n - i)\n        print(numbers[0:i])\n        print(numbers[i:n])\n        print()\n    return \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    left = right = 0\n    k = 0\n    for i in range(n):\n        if s[i] < 0:\n            left = i\n            break\n    for j in range(n):\n        if s[-j-1] < 0:\n            right = j + 1\n            break\n    if left > right:\n        return \"NO\"\n    else:\n        k = left + 1\n        for i in range(1, left):\n            if s[i-1] == 0:\n                k += 1\n            else:\n                break\n        for j in range(n - right, n):\n            if s[j] == 0:\n                k += 1\n            else:\n                break\n        if k!= n:\n            return \"NO\"\n        else:\n            ans = []\n            for i in range(k):\n                x, y = left + i, n - right + i\n                ans.append([x, y])\n            return \"YES\" + \"\\n\" + str(k) + \"\\n\" + \"\\n\".join(map(lambda x: str(x[0]) + \" \" + str(x[1]), ans))"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    ans = \"\"\n    flag = 0\n    for i in range(1, n+1):\n        if flag == 0:\n            cur = arr[:i]\n            s = 0\n            for a in cur:\n                s += a\n            if s!= 0:\n                ans += \"YES\\n\"\n                ans += str(i) + \" \" + \" \".join(map(str, cur)) + \"\\n\"\n                for j in range(i, n+1):\n                    ans += str(cur[0]) + \" \" + str(cur[-1]) + \" \" + str(j) + \"\\n\"\n                    cur = cur[1:]\n                flag = 1\n            else:\n                ans += \"NO\\n\"\n        else:\n            break\n    if flag == 0:\n        ans = \"NO\\n\"\n    return ans\nprint(solution(input()))\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split(' ')\n    return str(int(n) * int(m) * int(k) % 1000000009)\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split(' ')]\n    print((m * k * (k + 1)) - (m - n * k))\n\nprint(solution(\"5 3 2\")) # Output: 3\nprint(solution(\"5 4 2\")) # Output: 6\nprint(solution(\"5 4 1\")) # Output: 3\n\ndef"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the input\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    \n    \"\"\"\n    The logic\n    \"\"\"\n    total_score = 0\n    current_score = 0\n    wrong_answers = 0\n    for i in range(n):\n        \"\"\"\n        Get the answer\n        \"\"\"\n        answer = int(stdin.split()[i])\n        if answer == 1:\n            wrong_answers = 0\n            current_score += 1\n        else:\n            wrong_answers += 1\n            current_score = 0\n        if wrong_answers >= k:\n            total_score += current_score + (k * 2)\n            wrong_answers = 0\n            current_score = 0\n        elif i+1 == m:\n            total_score += current_score\n    \n    \"\"\"\n    Get the remainder\n    \"\"\"\n    answer = total_score % 1000000009\n    return answer\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m, k = map(int, stdin.split())\n    if m == n:\n        return 0\n    elif m == 1:\n        return (n - m) * k\n    else:\n        return n - m + ((n - m - 1) // (k - 1)) * k\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    score = (n - m) * 2\n    for _ in range(k):\n        score = (score * 2 + 1) % 1000000009\n    return str(score)\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return m - (k-1)"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    answer = 0\n    if m == 0:\n        answer = (n - m) * k\n    else:\n        answer = n - m + 1\n    return str(answer % 1000000009)\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    if m < n:\n        print(0)\n        return\n    print((k - 1 + n - m) % 1000000009)\n    return\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x = m // (n - k)\n    y = m % (n - k)\n    print((x + y) * 2)\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    return k - 1 if m > n else m - 1\n\n\ndef"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3454\")\n    'YES'\n    >>> solution(\"111111\")\n    'NO'\n    >>> solution(\"98765432\")\n    'NO'\n    >>> solution(\"12345678\")\n    'NO'\n    >>> solution(\"1234567\")\n    'NO'\n    >>> solution(\"123456\")\n    'NO'\n    >>> solution(\"12345\")\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    while n % 8 == 0:\n        n //= 8\n    n = str(n)\n    if n == '0':\n        return \"YES\"\n    if len(n) > 100:\n        return \"NO\"\n    for i in range(len(n) - 1, -1, -1):\n        if n[i]!= \"0\":\n            break\n    else:\n        return \"NO\"\n    return \"YES\\n\" + n[:i + 1]\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('123')\n    '123'\n    >>> solution('25')\n    '12'\n    >>> solution('234567')\n    '234567'\n    >>> solution('4098')\n    '4098'\n    >>> solution('898')\n    '79'\n    >>> solution('6544234567')\n    '7777234567'\n    >>> solution('5')\n    '5'\n    \"\"\"\n    n = stdin\n    l = len(n)\n    ans = []\n    for i in range(l):\n        if int(n[i]) % 8 == 0:\n            ans.append(int(n[:i] + n[i+1:]))\n    return 'NO' if not ans else min(ans)\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while not (n % 8 == 0 or ''.join(sorted(str(n)))[-1] == '0'):\n        n -= 1\n    print('YES') if n else print('NO')\n    return str(n)\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if len(n) < 2:\n        return 'NO'\n    ans = ''\n    i = 0\n    while i < len(n) and n[i]!= '0':\n        ans += n[i]\n        i += 1\n    if i == len(n):\n        return 'YES'\n    while i < len(n) and n[i] == '0':\n        i += 1\n    if i == len(n):\n        return 'NO'\n    i -= 1\n    while i >= 0 and n[i] == '0':\n        i -= 1\n    if i < 0:\n        return 'NO'\n    ans += n[i + 1:]\n    if not ans:\n        return 'NO'\n    return 'YES' if int(ans) % 8 == 0 else 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    num = int(num)\n    while num > 0:\n        if num % 8 == 0:\n            print(\"YES\")\n            print(num)\n            break\n        elif num % 2 == 0:\n            num //= 2\n        else:\n            break\n    else:\n        print(\"NO\")\n    return \"\""
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    # Your code goes here.\n    return \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    while n % 8 == 0:\n        n = n // 8\n    while n > 9:\n        s = set()\n        for i in range(1, len(str(n))):\n            s.add(n % (i + 1))\n        n = n // (i + 1)\n        if 9 in s:\n            return \"NO\"\n    return \"YES\\n\" + str(n)\n\n\ndef"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%8 == 0:\n        return \"YES\"\n    for i in range(9, 1, -1):\n        if n%i == 0 and n//i >= 10:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 8 == 0:\n        return 'NO'\n\n    while num % 8!= 0:\n        temp = num\n        while temp % 10 == 0:\n            temp = temp // 10\n        num += temp % 10\n        num += temp // 10\n    return num\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [[int(j) for j in i.split(' ')] for i in stdin.strip().split('\\n')]\n    res = [[0] * 101 for i in range(101)]\n    for x in a:\n        for i in range(x[0], x[1] + 1):\n            res[i][x[0]] += 1\n    for i in range(101):\n        for j in range(101):\n            if res[i][j] > 1 and res[i + 1][j] == 0:\n                if res[i][j] + res[i + 1][j] > m:\n                    return -1\n                return i + 1\n    return -1\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    floors = [[int(j) for j in stdin.split(' ')] for i in range(m)]\n    return floors\n\n\ndef"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    \n    Arguments:\n        stdin {[str]} -- [description]\n    \n    Returns:\n        [type] -- [description]\n    \"\"\"\n    pass\n\"\"\"\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport collections\n\n\ndef"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    TODO:\n    \"\"\"\n    return \"Hello\"\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return floor number by given number of flats in each floor\n    Args:\n        stdin: str (1 <= len(stdin) <= 2 * 10 ** 5,\n            1 <= len(stdin[0]) <= 2 * 10 ** 5,\n            len(stdin[0][i]) <= 1000,\n            stdin[i][j] are digits between 1 and 100)\n\n    Returns:\n        str: Floor number if it is possible to restore.\n        str: '-1' if it is not possible to restore.\n\n    Examples:\n        >>> solution(stdin)\n        >>> Solution().solution(stdin)\n    \"\"\"\n    lst = []\n    for i in stdin.split('\\n'):\n        lst.append([int(i) for i in i.split()])\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i][1] == lst[i + 1][1]:\n            continue\n        else:\n            return str(lst[i][1] + 1)\n    return '-1'\n    pass\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 3\n   ... 6 2\n   ... 2 1\n   ... 7 3''')\n    '4'\n    \"\"\"\n    # floors = [0] * 101\n    floors = {floor: 0 for floor in range(101)}\n\n    for floor, n_floors in enumerate(stdin.split('\\n')):\n        k, f = map(int, n_floors.split())\n        floors[f] = max(floors[f], k)\n\n    ans = -1\n    for f in floors:\n        if floors[f] == floors[ans]:\n            ans = f\n        elif floors[f] > floors[ans]:\n            ans = f\n\n    return ans\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, m, mem):\n        if len(mem) == 0:\n            return n\n        # print(n, m, mem)\n        _mem = [k for k, f in mem]\n        f = [f for k, f in mem]\n        if n in _mem:\n            return f[_mem.index(n)]\n        if len(f) == 0:\n            return -1\n        left, right = 0, len(f) - 1\n        while left < right:\n            m = (left + right) // 2\n            if f[m] > n:\n                right = m\n            elif f[m] < n:\n                left = m + 1\n            else:\n                return f[m]\n        if f[left] == n:\n            return f[left]\n        if f[right] == n:\n            return f[right]\n        return -1\n\n    n, m = [int(s) for s in stdin.split(\" \")]\n    mem = []\n    for i in range(m):\n        mem.append([int(s) for s in stdin.split(\" \")][1:])\n    mem = sorted(mem, key=lambda x: x[1], reverse=True)\n    print(solve(n, m, mem))\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = list(map(lambda s: s.strip(), stdin.split('\\n')))\n    print(len([i for i in range(0, len(board[0]) - 2) if board[0][i] == 'X' and board[0][i + 1] == 'X' and board[0][i + 2] == 'X']))\n    print(len([i for i in range(0, len(board[0]) - 2) if board[0][i] == 'X' and board[0][i + 1] == 'X' and board[0][i + 2] == '0']))\n    print(len([i for i in range(0, len(board[0]) - 2) if board[0][i] == '0' and board[0][i + 1] == '0' and board[0][i + 2] == '0']))\n    print(len([i for i in range(0, len(board[0]) - 2) if board[0][i] == '0' and board[0][i + 1] == '0' and board[0][i + 2] == 'X']))"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))\n    return ''\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.splitlines()\n    N = int(N)\n    M = int(M)\n    ranges = [0, N]\n    for _ in range(M):\n        ranges += [0]\n    stdin = stdin.replace(\"0\", \"1\")\n    stdin = stdin.replace(\"X\", \"2\")\n    return N - len(set(stdin))\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split('\\n')\n    count = 0\n    for i in range(len(x)):\n        for j in range(len(x[i])):\n            if x[i][j] == '0' and j!= 0:\n                if x[i][j - 1] == '0' or (i == 0 and x[i + 1][j - 1] == '0'):\n                    count += 1\n    return count\nprint(solution(input()))\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def search(s, i, j):\n        for h in range(i, j):\n            if s[i][h] == 'X':\n                return True\n        for v in range(i, j):\n            if s[v][j] == 'X':\n                return True\n        return False\n\n    def rotate(s):\n        x, y = len(s[0]), len(s)\n        res = [[0] * x for _ in range(y)]\n        for i in range(y):\n            for j in range(x):\n                res[i][j] = s[x-1-j][i]\n        return res\n\n    def find(s, i, j):\n        s = rotate(s)\n        res = []\n        for _ in range(4):\n            tmp = search(s, i, j)\n            if tmp:\n                s = rotate(s)\n            else:\n                res.append(s)\n                s = rotate(s)\n        return res\n\n    n = int(stdin.strip().split()[0])\n    a, b = [], []\n    for row in stdin.splitlines()[1:]:\n        a.append(row.strip())\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 'X':\n                b.append(find(a, i, j))\n    res = 0\n    for i in range(len(b)):\n        for j in range(len(b[i])):\n            res = max(res, len(b[i][j]))\n    return res\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    o = 0\n    a = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'X':\n            x += 1\n        if stdin[i] == 'O':\n            o += 1\n        if stdin[i] == '.':\n            a += 1\n    if x == 1 and a == 0:\n        x += 1\n    if o == 1 and a == 0:\n        o += 1\n    return x + o + a\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = [stdin[1][i:i+N] for i in range(0, len(stdin[1]), N)]\n    B = [stdin[2][i:i+N] for i in range(0, len(stdin[2]), N)]\n    C = A + B\n    C.sort()\n    max_ans = 0\n    for a in C:\n        curr_ans = 0\n        for c in C:\n            if c == a:\n                curr_ans += 1\n            else:\n                if a[0]!= c[0]:\n                    break\n        if curr_ans > max_ans:\n            max_ans = curr_ans\n    return str(max_ans)\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_letters = stdin[0]\n    s = stdin[1:]\n\n    pretty_set_positions = []\n    for start_pos in range(len(s) - 1):\n        lower = s[start_pos] in \"abcdefghijklmnopqrstuvwxyz\"\n        for end_pos in range(start_pos + 1, len(s)):\n            upper = s[end_pos] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            if lower and upper:\n                continue\n            if lower and not upper:\n                pretty_set_positions.append(start_pos)\n                break\n            if upper and not lower:\n                pretty_set_positions.append(end_pos)\n                break\n    return str(max(len(set(pretty_set_positions)), 0))\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N^2)\n    Space complexity: O(N)\n    \"\"\"\n    length = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    lower_s = s.lower()\n    num = 0\n    for i in range(length - 1):\n        if s[i]!= s[i+1]:\n            for j in range(i+2, length):\n                if s[i] < s[j] < s[i+1]:\n                    if lower_s[j] == lower_s[j+1]:\n                        num += 1\n    return str(num)\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n\"\"\"\n\ndef"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem 'Maximally pretty set of positions'.\n\n    :param stdin: string input\n    :return: string of output\n    \"\"\"\n    if stdin.islower():\n        return '0'\n\n    # getting positions and letters for later\n    positions = []\n    letters = set()\n    for i, letter in enumerate(stdin):\n        if letter.isupper():\n            positions.append(i)\n            letters.add(letter)\n\n    # max possible number of positions for one letter\n    possible = len(positions)\n\n    # checking if there is no uppercase letter in between positions\n    for i, pos in enumerate(positions):\n        for j in range(i + 1, len(positions)):\n            if not stdin[positions[i] + 1:positions[j]].islower():\n                possible -= 1\n                break\n\n    return str(possible)\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if len(set(a)) == 1:\n        return 0\n    b = [0, 0]\n    c = [0, 0]\n    for num in a:\n        if num >= 0:\n            b[0] += 1\n        else:\n            b[1] += 1\n    \n    for num in a:\n        if num >= 0:\n            c[0] += 1\n        else:\n            c[1] += 1\n    return max(b[0] * b[1], c[0] * c[1])\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def partition(a: str, b: str) -> bool:\n        b_ = [int(c) for c in b]\n        for e in a:\n            if e not in b_:\n                return False\n            else:\n                b_.remove(int(e))\n        return True\n\n    a = stdin.split()[0]\n    b = stdin.split()[1]\n    c = a.split('-')[0] + '+' + a.split('-')[1]\n    if partition(a, b) and partition(b, c):\n        return str(sum([int(e) for e in b.split('+')]) - sum([int(e) for e in c.split('+')]))\n    else:\n        return '0'\n\n\na = '4 -3 2 -1'\nb = '0'\nprint(solution(a))\nprint(solution(b))\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = input().split(' ')\n    data = [int(i) for i in data]\n    length = len(data)\n    if length == 1:\n        print(0)\n    else:\n        first, second = 0, 0\n        first += data[0]\n        for i in range(1, length):\n            if data[i] < data[i - 1]:\n                first += data[i]\n            else:\n                second += data[i]\n        print(abs(first - second))\n        \n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_sets(a):\n        b, c = set(), set()\n        for x in a:\n            if x in b:\n                c.add(x)\n            else:\n                b.add(x)\n        return b, c\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    b, c = find_sets(a)\n    return str(sum(b) - sum(c))\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(s) for s in stdin.readline().split()]\n    dp = [0] * n\n    dp[0] = nums[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + nums[i], nums[i])\n    return max(dp) - min(dp)"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = a[:n]\n    c = a[n:]\n    return str(sum(b) - sum(c))\n'''"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return ''\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    a, b, f, k = int(inp[0]), int(inp[1]), int(inp[2]), int(inp[3])\n    if (a - f) % (k - 1) == 0:\n        return str(b // (k - 1))\n    return str(-1)\n\nprint(solution(stdin))\n\n\n\n-----Explanation-----\n\nThe first example: a = 6, b = 9, f = 2, k = 4.\n\nLet's say the bus finishes the first journey in the point x = 0 and needs to refuel again. He can pass 1 unit of distance in the second journey in the point x = 1. After refueling, the tank contains b = 9 liters of gasoline.\n\nThe bus passes 4 units of distance in the point x = 3. He can not refuel as his tank is full, but he can still finish the second journey in the point x = 4.\n\nNow the bus arrives at the point with the gas station in the point x = 5. After refueling, he can pass 5 units of distance in the third journey. The tank is empty, so he needs to refuel.\n\nFinally, the bus finishes the fourth journey in the point x = 6.\n\nThe first example is optimal, as the bus does not have to finish the third journey.\n\nThe second example: a = 6, b = 10, f = 2, k = 4.\n\nThe bus can not finish the first journey in the point x = 0.\n\nThe bus can not finish the second journey in the point x = 5.\n\nThe bus can finish the third journey in the point x = 6.\n\nThe third example: a = 6, b = 5, f = 4, k = 3.\n\nThe bus cannot finish the first journey in the point x = 0.\n\nThere is no point x = 3, so the bus can not finish the second journey.\n\nThe last example: a = 6, b = 5, f = 4, k = 3.\n\nThere is no point x = 3, so the bus can not finish the first journey.\n\nThere is no point x = 6, so the bus can not finish the last journey.\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if f < a:\n        return str(0)\n    l = [(a, 1), (b, 0)]\n    for i in range(1, k):\n        n = l.pop(0)\n        n[0] = n[0] - n[1]\n        if n[0] < a:\n            return str(i)\n        l.append((n[0], n[1] - 1))\n    return str(-1)\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(s) for s in stdin.split(\"\\n\")]\n    cnt = 0\n    while k > cnt:\n        if a + b > f:\n            cnt += 1\n        a, b = b, a + b\n    return cnt if k <= cnt else -1\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    return f'{k}' if k > a // (b - a) else f'-1'\n\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split()]\n    if b * k < f:\n        return \"-1\"\n    else:\n        return k"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split()]\n    if f < a:\n        return str(-1)\n    elif b * k <= a:\n        return str(k)\n    elif f - b >= a:\n        return str(0)\n    else:\n        return str(k - 1)\n\n\n\n----Test----\n\nInput\n6 9 2 4\n\nOutput\n4\n\nInput\n6 10 2 4\n\nOutput\n2\n\nInput\n6 5 4 3\n\nOutput\n-1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split(' ')]\n    if k > f:\n        return '-1'\n    if k == f:\n        return '0'\n    else:\n        return str(b - (a - f))"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split(' '))\n    if (f - a) % (k - 1)!= 0:\n        return '-1'\n    return (f - a) // (k - 1)\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(x) for x in stdin.split()]\n    s = stdin[: n]\n    if p * q > n:\n        return \"-\" + str(1)\n    ans = []\n    for i in range(0, n - p + 1):\n        for j in range(i, n - q + 1):\n            ans.append(s[i: i + p] + s[j: j + q])\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(x) for x in stdin.split()]\n    if p * q > n:\n        return \"-1\"\n    if p * q == n:\n        return str(p * q)\n    strings = stdin.split(\"\\n\")\n    str_len = len(strings[0])\n    for i in range(str_len):\n        for j in range(i + 1, str_len + 1):\n            cur_str = strings[0][i:j]\n            if len(cur_str)!= p and len(cur_str)!= q:\n                continue\n            if len(cur_str) == p and cur_str not in strings[1:]:\n                print(str(p))\n                print(cur_str)\n            if len(cur_str) == q and cur_str not in strings[1:]:\n                print(str(q))\n                print(cur_str)\n    return \"\"\n\ndef"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = stdin.split()\n    n, p, q = int(n), int(p), int(q)\n    s = stdin.strip()\n    i, j = p, q\n    ans = 0\n    while i <= n and j <= n:\n        ans += 1\n        i += p\n        j += q\n    if i > n or j > n:\n        return f\"-1\"\n    return str(ans)\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    if p > n or q > n or p + q > n:\n        return '-1'\n    return n - p - q + 1\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution prints the number of ways to split\n    the string into substrings of length p and q.\n    \"\"\"\n\n    # Read the input\n    n, p, q = map(int, stdin.split())\n    s = stdin[:-1]\n\n    # Check if we can split the string\n    if n < p or n < q:\n        print(-1)\n    else:\n        # Write the solution\n        print(n // p + n // q)\n\n        # Print the partition of the string\n        for i in range(n // p + n // q):\n            print(s[i * p : (i + 1) * p])\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    num_p = int(string[0])\n    num_q = int(string[1])\n    s = string[2]\n    if num_p == 1:\n        if num_q == 1:\n            return 1\n        else:\n            return -1\n    for i in range(len(s)):\n        if s[i:i+num_p]!= num_p * s[i:i+num_p][0]:\n            return -1\n        if i+num_p >= len(s):\n            break\n    return num_q"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(i) for i in stdin.split()]\n    a = stdin[0:n]\n    b = stdin[n:n + p]\n    c = stdin[n + p:n + q]\n    d = stdin[n + q:]\n    if p > q:\n        if len(b) > len(c):\n            c, b = b, c\n        elif len(b) == len(c):\n            a, b, c, d = b, c, d, a\n    elif p < q:\n        if len(b) < len(c):\n            c, b = b, c\n        elif len(b) == len(c):\n            a, b, c, d = b, c, d, a\n    if len(b) > len(c):\n        return \"-1\"\n    elif len(b) < len(c):\n        if len(b) == len(c):\n            if len(a) < len(d):\n                a, b, c, d = b, c, d, a\n            else:\n                return \"-1\"\n    else:\n        if len(a) < len(d):\n            a, b, c, d = b, c, d, a\n        elif len(a) > len(d):\n            return \"-1\"\n\n    answer = str(len(c) // len(b))\n    answer += \" \" + str(len(b)) + \" \" + str(len(c))\n    return answer"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin.strip()\n    s = s[:n]\n    count = 1\n\n    # Check whether we can split the string into two strings with length p and q\n    if len(s) < p + q:\n        print(-1)\n        return\n\n    # Try to split the string into two strings with length p and q\n    split = len(s) - p - q + 1\n    for i in range(split):\n        if len(set(s[i:i + p])) == p and len(set(s[i:i + q])) == q:\n            count += 1\n\n    print(count)\n\n    return\n\n\ndef"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    arr = map(int, stdin.split()[1:])\n\n    if not check_start_end(n, m, s, d, arr):\n        return \"IMPOSSIBLE\"\n\n    mem = {}\n\n    def dp(i: int, j: int, jump: int, dist: int, cur_dist: int):\n        if (i, j, jump, dist) in mem:\n            return mem[(i, j, jump, dist)]\n\n        if j == m:\n            return dist >= s and cur_dist <= s\n\n        if dp(i, j + 1, jump, dist + 1, cur_dist):\n            return True\n\n        if jump > 0 and dp(i, j + 1, jump - 1, dist + 1, cur_dist + s):\n            return True\n\n        mem[(i, j, jump, dist)] = False\n        return False\n\n    return \"RUN \" + str(s - cur_dist) if dp(0, 1, 1, 0, 0) else \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    x = 0\n    y = 0\n    z = 0\n    for i in range(n):\n        if (x < a[i] < m) or (a[i] == m):\n            x = m\n            y = 1\n        elif y == 1:\n            if a[i] < m:\n                x = a[i]\n                z = 1\n            y = 0\n        elif z == 1:\n            if a[i] < m:\n                x = m\n                y = 1\n                z = 0\n            elif a[i] < m and a[i]!= m:\n                x = a[i]\n                z = 1\n        elif (a[i] < m) and (a[i]!= m) and (x == a[i]):\n            if a[i] < m:\n                x = m\n                y = 1\n                z = 0\n        if x == m:\n            print(\"IMPOSSIBLE\")\n            return\n    print(\"RUN\", x - s, sep=\"\")\n    print(\"JUMP\", d, sep=\"\")\n    return"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, s, d = list(map(int, stdin.split(\" \")))\n\n    obstacles = []\n    for i in range(int(stdin.split(\"\\n\")[0].split(\" \")[0])):\n        obstacles.append(list(map(int, stdin.split(\"\\n\")[i + 1].split(\" \"))))\n\n    def check(start, finish):\n        for obs in obstacles:\n            if obs[0] < finish < obs[1] or obs[0] < start < obs[1]:\n                return False\n        return True\n\n    #  step -1 if not possible to get finish point\n    def find_shortest_path(step):\n        if step == -1:\n            return step\n        for i in range(len(obstacles)):\n            if obstacles[i][0] < obstacles[i][1]:\n                if obstacles[i][0] + step < obstacles[i][1]:\n                    res = find_shortest_path(step + obstacles[i][0] - obstacles[i][1])\n                    if res!= -1:\n                        return res\n                if obstacles[i][0] + step + s < obstacles[i][1]:\n                    res = find_shortest_path(step + obstacles[i][0] - obstacles[i][1])\n                    if res!= -1:\n                        return res\n        return step\n\n    if check(0, m):\n        return \"IMPOSSIBLE\"\n    shortest_path = find_shortest_path(0)\n    if shortest_path == -1:\n        return \"IMPOSSIBLE\"\n    if shortest_path <= s:\n        return \"RUN {}\".format(shortest_path)\n    else:\n        return \"JUMP {}\".format(shortest_path - s)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(i) for i in stdin.split()]\n    x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    i = 0\n    while i < len(a) and a[i] <= m - s:\n        i += 1\n    if i == len(a):\n        return \"IMPOSSIBLE\"\n    return \"JUMP \" + str(a[i] - (s - d))"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(i) for i in stdin.split()]\n    obstacles = [int(i) for i in stdin.split()[1::]]\n\n    start = (0, 0)\n    finish = (n, m)\n\n    left_boundary = 0\n    right_boundary = 0\n    for obstacle in obstacles:\n        if obstacle < left_boundary:\n            left_boundary = obstacle\n        if obstacle > right_boundary:\n            right_boundary = obstacle\n\n    if left_boundary > 0:\n        return 'IMPOSSIBLE'\n\n    if finish[0] < 0 or finish[1] < 0:\n        return 'IMPOSSIBLE'\n\n    if finish[0] > n or finish[1] > m:\n        return 'IMPOSSIBLE'\n\n    if left_boundary < 0 and right_boundary < 0:\n        return 'IMPOSSIBLE'\n\n    if s < 0 or d < 0:\n        return 'IMPOSSIBLE'\n\n    if start[0] < 0 or start[1] < 0:\n        return 'IMPOSSIBLE'\n\n    if finish[0] < 0 or finish[1] < 0:\n        return 'IMPOSSIBLE'\n\n    result = []\n\n    def run(num_of_run: int) -> str:\n        if num_of_run > 0:\n            return 'RUN'+ str(num_of_run)\n\n    def jump(num_of_jump: int) -> str:\n        if num_of_jump > 0:\n            return 'JUMP'+ str(num_of_jump)\n\n    def go_right() -> str:\n        return run(s) + jump(d)\n\n    def go_left() -> str:\n        return jump(s) + run(d)\n\n    if left_boundary < 0:\n        result.append(go_right())\n        for obstacle in obstacles:\n            if obstacle > start[1]:\n                result.append(jump(obstacle - start[1]))\n    else:\n        result.append(go_left())\n        for obstacle in obstacles:\n            if obstacle < start[1]:\n                result.append(jump(start[1] - obstacle))\n\n    for obstacle in obstacles:\n        if obstacle > start[1]:\n            result.append(jump(obstacle - start[1]))\n\n    if finish[0] == start[0]:\n        return result\n\n    result.append(go_right())\n    return result\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    i = 0\n    while i < len(a) - 1 and a[i] <= m - s:\n        i += 1\n    if i >= len(a) - 1:\n        return \"IMPOSSIBLE\"\n    print(i + 1)\n    print(n - i - 1)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    jump_pos = set()\n    for _ in range(n):\n        jump_pos.add(int(stdin.split()[1]))\n\n    jump_pos = sorted(jump_pos)\n\n    def dfs(current, jump_pos):\n        if current == m:\n            return True\n        for i in range(len(jump_pos)):\n            if jump_pos[i] - current >= s and jump_pos[i] - current <= d:\n                if jump_pos[i] in jump_pos:\n                    jump_pos.pop(i)\n                if dfs(jump_pos[i], jump_pos):\n                    return True\n                jump_pos.insert(i, current)\n        return False\n    if dfs(0, jump_pos):\n        print(\"JUMP {}\".format(d))\n    else:\n        print(\"IMPOSSIBLE\")\n\n\n\ndef"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.readline().split())\n    path = [0]\n    for _ in range(n):\n        path.append(int(stdin.readline()))\n    curr = 0\n    s_jump = 0\n    while curr < m:\n        if s_jump:\n            curr += s_jump\n            s_jump = 0\n        if curr + s > m:\n            print(\"IMPOSSIBLE\")\n            return\n        elif curr + s < m:\n            if curr + d > m:\n                print(\"IMPOSSIBLE\")\n                return\n            else:\n                curr += d\n                s_jump += 1\n        else:\n            curr += s\n    print(\"RUN\", path[curr])\n    for i in range(curr - 1, -1, -1):\n        if path[i] <= curr - i:\n            break\n        if path[i] > curr - i:\n            print(\"JUMP\", path[i] - (curr - i))\n            break"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m, s, d = [int(x) for x in stdin[0].split(' ')]\n    a = stdin[1].split(' ')\n    a = [int(x) for x in a]\n    dico = {}\n    for i in range(n):\n        dico[a[i]] = i\n    start = 0\n    finish = 0\n    k = 0\n    for i in range(n):\n        if a[i] < m and start < a[i]:\n            start = a[i]\n        elif m < a[i] < m + d:\n            k = a[i]\n        elif m + d < a[i] < m + 2 * d:\n            finish = a[i]\n    if finish - start <= s or finish - start <= d:\n        return 'IMPOSSIBLE'\n    else:\n        for i in range(dico[start], dico[finish]):\n            if a[i] == finish:\n                if i == dico[start]:\n                    return \"RUN {}\".format(s)\n                else:\n                    return \"JUMP {}\".format(i - dico[start])\n            elif a[i] == k:\n                if i == dico[start]:\n                    return \"RUN {}\".format(s + d)\n                else:\n                    return \"JUMP {}\".format(i - dico[start])\n\nprint(solution(stdin))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, s, d = [int(i) for i in lines[0].split(' ')]\n    obstacles = [int(i) for i in lines[1].split(' ')]\n\n    def possible(s, d, m):\n        return m - s >= d\n\n    def jumps(n, m, s, d):\n        j = 0\n        t = 0\n        while True:\n            if not possible(t, d, m):\n                return False\n            j += 1\n            t += s\n            if j > n:\n                return True\n\n    def jump(n, m, s, d):\n        j = 0\n        t = 0\n        while True:\n            if not possible(t, d, m):\n                return False\n            j += 1\n            if j > n:\n                return j\n            t += s\n            if j > n:\n                return False\n\n    return 'IMPOSSIBLE' if not jumps(n, m, s, d) else \\\n        '\\n'.join(\n            ['JUMP {}'.format(jump(n, m, s, d)) for jump in range(1, n + 1)]\n        )\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    return str(bin(s^x).count('1'))\n\n\ndef"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(bin(a ^ b)).count('1')\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    res = 0\n    for i in range(s + 1):\n        for j in range(s + 1):\n            if (i | j) == x:\n                res += 1\n    print(res)\n    return\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    # if s % 2 == 0:\n    #     s = s // 2\n    #     x = x // 2\n    #     if x % 2 == 1:\n    #         x = x - 1\n    #         s = s - 2\n    # elif s % 2!= 0:\n    #     s = s // 2\n    #     x = x // 2\n    #     if x % 2!= 0:\n    #         x = x + 1\n    #         s = s - 2\n    # elif x % 2!= 0:\n    #     x = x + 1\n    #     s = s - 2\n    # print(x, s)\n    return str(bin(x ^ s).count('1'))\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from_, to_ = map(int, stdin.split(' '))\n    solutions = 0\n    for a in range(from_, to_+1):\n        for b in range(a+1, to_+1):\n            if a ^ b == to_:\n                solutions += 1\n    return str(solutions)\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, x = [int(i) for i in stdin.split()]\n    count = 0\n    if s % 2 == 1:\n        for a in range(1, s // 2):\n            if (s - 2 * a) % 2 == 0:\n                count += 1\n    else:\n        for a in range(1, s // 2):\n            if s % 2 == 0 and (s - 2 * a) % 2 == 0:\n                count += 1\n    if x % 2 == 0:\n        count += 1\n    return str(count)\n\n\n\ndef"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"0\" if a & b else \"1\"\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n------\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (s, x) = map(int, stdin.split())\n    def solve(a, b):\n        if a > b: return 0\n        return solve(a + 1, b - 1) + (s - a * b)\n\n    return str(solve(1, x))"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    print(2*min(n-k, k))\n    print(*range(1, n, k+1))\n\n    return ''"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split(\" \")]\n    # turn = [0 for _ in range(n)]\n    # turn[n//2] = 1\n    turn = [1 if (i+k) % n == 0 else 0 for i in range(n)]\n    turn[n//2] = 1\n    # print(turn)\n    turn[n//2 + k] = 1\n    # print(turn)\n    turn[n//2 - k] = 1\n    # print(turn)\n    c = 0\n    for i in range(n-2):\n        c += 1\n        if turn[i] == 1:\n            c += 1\n            if turn[i + k] == 1:\n                c += 1\n                if turn[i + k + 1] == 1:\n                    c += 1\n                    turn[i + k + 1] = 0\n        if turn[i+1] == 1:\n            c += 1\n            if turn[i + k] == 1:\n                c += 1\n                if turn[i + k - 1] == 1:\n                    c += 1\n                    turn[i + k - 1] = 0\n    # print(turn)\n    return c\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(nk)\n    Space: O(nk)\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n, k = map(int, stdin[0].split())\n    indexes = [i for i in range(1, n + 1)]\n    \n    def is_valid(permutation: list[int]) -> bool:\n        n = len(permutation)\n        for i in range(n):\n            left_i = i - k\n            right_i = i + k\n            if left_i < 0:\n                left_i = n + left_i\n            if right_i > n:\n                right_i = right_i - n\n            if permutation[i] not in [permutation[i - k], permutation[i + k]]:\n                return False\n        return True\n    \n    def find_permutation(permutation: list[int]) -> bool:\n        \"\"\"\n        Time: O(nk)\n        Space: O(nk)\n        \"\"\"\n        n = len(permutation)\n        for i in range(n):\n            left_i = i - k\n            right_i = i + k\n            if left_i < 0:\n                left_i = n + left_i\n            if right_i > n:\n                right_i = right_i - n\n            for j in range(i, i + k):\n                permutation[i], permutation[j] = permutation[j], permutation[i]\n                if is_valid(permutation):\n                    return True\n                permutation[i], permutation[j] = permutation[j], permutation[i]\n            return False\n        return True\n    \n    permutation = indexes.copy()\n    \n    while len(indexes) > 0:\n        # find the next permutation\n        index = permutation.index(max(permutation))\n        permutation[index:] = reversed(permutation[index:])\n        while not find_permutation(permutation):\n            permutation[index:] = reversed(permutation[index:])\n        \n        # remove the corresponding indexes from the list\n        for i in permutation:\n            indexes.remove(i)\n        \n        # print the solution\n        print(index)\n        for i in permutation:\n            print(i, end=\" \")\n        print()\n        \n    return \" \"\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    print(math.ceil((n - k) / (2 * k)))\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(n, k, l):\n        n_iter = n * (k + 1)\n        l_iter = l * (k + 1)\n        return n_iter + l_iter\n    \n    n, k = map(int, stdin.split())\n    l = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if abs(i - j) <= k:\n                l = min(l, calculate(n, k, j - i))\n    return str(l)\n\nprint(solution(input()))"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    sk = [i for i in range(1, n + 1)]\n    print(n, k)\n    for _ in range(k):\n        for i in range(n):\n            if sk[i] % n == 0:\n                sk[i] = sk[i] // n\n    print(len(set(sk)))\n    return str(sk).strip('[]')\n\nprint(solution(input()))\n\n\n-----Efficient solution-----\ndef"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = [n]\n    k = min(n, k)\n    for i in range(k):\n        ans = [min(ans) - 1] + ans\n    print('\\n'.join(map(str, ans)))\n    return ''\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    dp = [0] * (n + 1)\n    \n    for i in range(n):\n        dp[i + 1] = min(dp[i] + k, dp[i + k] + k)\n    \n    ans = []\n    i = n\n    while i > 0:\n        if dp[i] >= dp[i - k]:\n            i -= k\n        else:\n            ans.append(i)\n            i -= 1\n    \n    print(len(ans))\n    print(*ans)\n    \n    return ''\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution returns what I need\n    \"\"\"\n    # your code here\n    return None\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skewer_nums = [1] + list(range(2, n + 1)) + list(range(n + 2, n + k + 1)) + list(range(n + k + 1, n + k + 2))\n    print(len(skewer_nums))\n    print(*skewer_nums)\n    return ''\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(i) for i in range(int(stdin)))\n\nprint(solution(input()))"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 9:\n        return -1\n    for i in range(len(stdin)):\n        if i == 0 and int(stdin[i]) > 3:\n            return -1\n        if i!= 0 and int(stdin[i]) > 0:\n            return -1\n    if n % 8 == 0:\n        return 0\n    if n % 8 == 1:\n        return 1\n    if n % 8 == 2:\n        return 2\n    if n % 8 == 3:\n        return 2\n    if n % 8 == 4:\n        return 2\n    if n % 8 == 5:\n        return 3\n    if n % 8 == 6:\n        return 3\n    if n % 8 == 7:\n        return 3\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    i = 1\n    while n > i * i:\n        n -= i\n        i += 1\n    if n == i * i:\n        return str(i)\n    return '-1'\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return '\\n'.join(map(str, range(int(stdin))))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 1 or n > 9999:\n        return '-1'\n\n    count = 0\n    while n > 0:\n        count += 1\n        if n % 10 == 0:\n            n //= 10\n        else:\n            break\n    \n    return str(count) if n == 0 else '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    squares = []\n    for i in range(1, n+1):\n        squares.append(i**2)\n    squares.sort()\n    squares.reverse()\n    for x in squares:\n        if x > n:\n            return str(n)\n        elif x == n:\n            return str(0)\n        else:\n            n = n - x\nsolution(input())"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # function that will return the minimum number of operations to get a square of a given number\n    def min_number_of_operations(number: int) -> int:\n        number_str = str(number)\n        # define the number of operations as the sum of the length of the number and the number of digits \n        # of the number itself\n        return len(number_str) + len(number_str)\n    # initialise the variables used in the following logic\n    number = int(stdin)\n    number_of_operations = min_number_of_operations(number)\n    number_to_square = number ** 2\n    number_of_operations_to_square = min_number_of_operations(number_to_square)\n    # if the number is equal to its square, return zero operations needed\n    if number_to_square == number:\n        return 0\n    # if the number is not equal to its square, return -1\n    if number_to_square > number:\n        return -1\n    # if number is not equal to its square and it is smaller than the square, return the number of operations\n    # needed to get the square of the number\n    if number_to_square < number:\n        return number_of_operations\n    # if there are more than two digits of the number, return the number of operations needed to get the square of the\n    # number\n    if len(str(number)) > 2:\n        return number_of_operations\n    # if there are exactly two digits of the number, return the number of operations needed to get the square of the number\n    # plus one\n    if len(str(number)) == 2:\n        return number_of_operations + 1\n    return -1\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\nprint(solution(input()))"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    number = 0\n    while number!= n:\n        for digit in str(n):\n            if int(digit) > number:\n                number = int(digit)\n        n = int(n / 10)\n        counter += 1\n    return counter if number == n else -1\n\n\n\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    if n == 0 or n == 1:\n        return str(count)\n    else:\n        count += 1\n        while n!= 1:\n            if n % 10 == 0:\n                n = n // 10\n            else:\n                for i in range(len(str(n))):\n                    count += 1\n                    num = int(str(n)[i])\n                    if num % 2 == 1:\n                        n = n + num ** 2\n                        break\n                    elif i == len(str(n)) - 1:\n                        n = n // 10\n                        break\n    return str(count)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    return str(fact(n+1)//(fact(n)*fact(n-1)))"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_fact = math.factorial(n)\n    g_fact = math.factorial(2)\n    n_g_fact = n_fact//g_fact\n    return str(n_g_fact % (10**9+7))\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n + 1):\n        count += n // i\n    return str(count % int(1e9 + 7))\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    def gcd(x, y):\n        while y!= 0:\n            x, y = y, x % y\n        return x\n\n    # F(n) = gcd(n, n-1) + gcd(n, n-2) +... + gcd(n, 1)\n    def f(x):\n        res = x[0]\n        for i in x[1:]:\n            res = gcd(res, i)\n        return res\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    res = 0\n    for i in range(1, n):\n        res += f(list(range(i, n)) + list(range(1, i)))\n    return res % (10 ** 9 + 7)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function returns the number of permutations of length n such that gcd(n) equals to the maximum gcd among the length n permutations.\n    \"\"\"\n    n = int(stdin)\n    numbers = list(range(1, n + 1))\n\n    count = 0\n    for i in range(2, n + 1):\n        divisors = []\n        for j in range(1, i):\n            if i % j == 0:\n                divisors.append(j)\n\n        if len(divisors) == 0:\n            count += i - 1\n        else:\n            count += (i - 1) * (len(divisors))\n    return count\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n')\n    '1'\n    >>> solution('3\\n')\n    '4'\n    >>> solution('6\\n')\n    '120'\n    \"\"\"\n    import math\n    n = int(stdin.readline())\n    ans = math.factorial(n)\n    ans %= int(10 ** 9 + 7)\n    return str(ans)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of permutations of integers 1 to n where f(p) = f_{max}(n)\"\"\"\n    n = int(stdin)\n    # 1 * 1 = 1, 2 * 1 = 2, 3 * 1 = 3, 4 * 1 = 4, 5 * 1 = 5, 6 * 1 = 6\n    # 1 * 2 = 2, 2 * 2 = 4, 3 * 2 = 6, 4 * 2 = 8, 5 * 2 = 10, 6 * 2 = 12\n    # 1 * 3 = 3, 2 * 3 = 6, 3 * 3 = 9, 4 * 3 = 12, 5 * 3 = 15, 6 * 3 = 18\n    # 1 * 4 = 4, 2 * 4 = 8, 3 * 4 = 12, 4 * 4 = 16, 5 * 4 = 20, 6 * 4 = 24\n    # 1 * 5 = 5, 2 * 5 = 10, 3 * 5 = 15, 4 * 5 = 20, 5 * 5 = 25, 6 * 5 = 30\n    # 1 * 6 = 6, 2 * 6 = 12, 3 * 6 = 18, 4 * 6 = 24, 5 * 6 = 30, 6 * 6 = 36\n    # 1 * 7 = 7, 2 * 7 = 14, 3 * 7 = 21, 4 * 7 = 28, 5 * 7 = 35, 6 * 7 = 42\n    # 1 * 8 = 8, 2 * 8 = 16, 3 * 8 = 24, 4 * 8 = 32, 5 * 8 = 40, 6 * 8 = 48\n    # 1 * 9 = 9, 2 * 9 = 18, 3 * 9 = 27, 4 * 9 = 36, 5 * 9 = 45, 6 * 9 = 54\n    # 1 * 10 = 10, 2 * 10 = 20, 3 * 10 = 30, 4 * 10 = 40, 5 * 10 = 50, 6 * 10 = 60\n    # 1 * 11 = 11, 2 * 11 = 22, 3 * 11 = 33, 4 * 11 = 44, 5 * 11 = 55, 6 * 11 = 66\n    # 1 * 12 = 12, 2 * 12 = 24, 3 * 12 = 36, 4 * 12 = 48, 5 * 12 = 60, 6 * 12 = 72\n    # 1 * 13 = 13, 2 * 13 = 26, 3 * 13 = 39, 4 * 13 = 52, 5 * 13 = 65, 6 * 13 = 78\n    # 1 * 14 = 14, 2 * 14 = 28, 3 * 14 = 42, 4 * 14 = 56, 5 * 14 = 70, 6 * 14 = 84\n    # 1 * 15 = 15, 2 * 15 = 30, 3 * 15 = 45, 4 * 15 = 60, 5 * 15 = 75, 6 * 15 = 90\n    # 1 * 16 = 16, 2 * 16 = 32, 3 * 16 = 48, 4 * 16 = 64, 5 * 16 = 80, 6 * 16 = 96\n    # 1 * 17 = 17, 2 * 17 = 34, 3 * 17 = 51, 4 * 17 = 68, 5 * 17 = 85, 6 * 17 = 102\n    # 1 * 18 = 18, 2 * 18 = 36, 3 * 18 = 54, 4 * 18 = 72, 5 * 18 = 90, 6 * 18 = 108\n    # 1 * 19 = 19, 2 * 19 = 38, 3 * 19 = 57, 4 * 19 = 76, 5 * 19 = 95, 6 * 19 = 114\n    # 1 * 20 = 20, 2 * 20 = 40, 3 * 20 = 60, 4 * 20 = 80, 5 * 20 = 100, 6 * 20 = 120\n    # 1 * 21 = 21, 2 * 21 = 42, 3 * 21 = 63, 4 * 21 = 84, 5 * 21 = 105, 6 * 21 = 126\n    # 1 * 22 = 22, 2 * 22 = 44, 3 * 22 = 66, 4 * 22 = 88, 5 * 22 = 110, 6 * 22 = 132\n    # 1 * 23 = 23, 2 * 23 = 46, 3 * 23 = 69, 4 * 23 = 92, 5 * 23 = 115, 6 * 23 = 138\n    # 1 * 24 = 24, 2 * 24 = 48, 3 * 24 = 72, 4 * 24 = 96, 5 * 24 = 120, 6 * 24 = 144\n    # 1 * 25 = 25, 2 * 25 = 50, 3 * 25 = 75, 4 * 25 = 100, 5 * 25 = 125, 6 * 25 = 150\n    # 1 * 26 = 26, 2 * 26 = 52, 3 * 26 = 78, 4 * 26 = 104, 5 * 26 = 130, 6 * 26 = 156\n    # 1 * 27 = 27, 2 * 27 = 54, 3 * 27 = 81, 4 * 27 = 108, 5 * 27 = 135, 6 * 27 = 162\n    # 1 * 28 = 28, 2 * 28 = 56, 3 * 28 = 84, 4 * 28 = 112, 5 * 28 = 140, 6 * 28 = 168\n    # 1 * 29 = 29, 2 * 29 = 58, 3 * 29 = 87, 4 * 29 = 116, 5 * 29 = 145, 6 * 29 = 170\n    # 1 * 30 = 30, 2 * 30 = 60, 3 * 30 = 90, 4 * 30 = 120, 5 * 30 = 150, 6 * 30 = 180\n    # 1 * 31 = 31, 2 * 31 = 62, 3 * 31 = 93, 4 * 31 = 124, 5 * 31 = 155, 6 * 31 = 186\n    # 1 * 32 = 32, 2 * 32 = 64, 3 * 32 = 96, 4 * 32 = 128, 5 * 32 = 160, 6 * 32 = 192\n    # 1 * 33 = 33, 2 * 33 = 66, 3 * 33 = 99, 4 * 33 = 132, 5 * 33 = 165, 6 * 33 = 198\n    # 1 * 34 = 34, 2 * 34 = 68, 3 * 34 = 102, 4 * 34 = 136, 5 * 34 = 170, 6 * 34 = 204\n    # 1 * 35 = 35, 2 * 35 = 70, 3 * 35 = 105, 4 * 35 = 140, 5 * 35 = 175, 6 * 35 = 210\n    # 1 * 36 = 36, 2 * 36 = 72, 3 * 36 = 108, 4 * 36 = 144, 5 * 36 = 180, 6 * 36 = 216\n    # 1 * 37 = 37, 2 * 37 = 74, 3 * 37 = 111, 4 * 37 = 148, 5 * 37 = 187, 6 * 37 = 222\n    # 1 * 38 = 38, 2 * 38 = 76, 3 * 38 = 114, 4 * 38 = 156, 5 * 38 = 192, 6 * 38 = 228\n    # 1 * 39 = 39, 2 * 39 = 78, 3 * 39 = 117, 4 * 39 = 162, 5 * 39 = 207, 6 * 39 = 252\n    # 1 * 40 = 40, 2 * 40 = 80, 3 * 40 = 120, 4 * 40 = 160, 5 * 40 = 240,"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    facts = [0] * (N + 1)\n    facts[1] = 1\n    for i in range(2, N + 1):\n        facts[i] = facts[i - 1] * i % 1000000007\n    result = 0\n    for i in range(N):\n        result = (result + facts[N - i] * facts[i]) % 1000000007\n    return result"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return str(int(stdin))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = {'A', 'E', 'I', 'O', 'U', 'Y'}\n    return max(vowels.intersection(stdin))\n\nsolution()\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_jump = 0\n    for i in range(n):\n        if stdin[i] in \"AEIOUY\":\n            min_jump += 1\n    return min_jump\n\ndef"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('A', '').replace('E', '').replace('I', '').replace('O', '').replace('U', '').replace('Y', '')"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum number of jumps to reach the end of the string.\n    \"\"\"\n    return None\n\nprint(solution(input()))\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 1\ndef"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # count how many 'A's there are\n    # take the min number of jumps that you can take from there\n    # keep adding 1 to count each time\n    # once you go over the len, reset the count and add 1 to the jumps\n    # print the min number of jumps\n    # use an array of the positions\n    # check if you are at any position that is an uppercase letter\n    # if yes, then add 1 to count\n    # check if you are at any position that is a lowercase letter\n    # if yes, then add 1 to count\n    # print the count\n    # return the min number of jumps needed\n    s = stdin\n    \n    count_a = s.count('A')\n    min_jumps = count_a\n    count = 0\n    jumps = 0\n    \n    for char in s:\n        if char == 'A':\n            count += 1\n        else:\n            jumps += 1\n            count = 0\n        if count_a < min_jumps:\n            min_jumps = count\n    \n    jumps += 1\n    print(min_jumps)\n    return min_jumps"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n    for v in vowels:\n        stdin = stdin.replace(v, '1')\n    return len(stdin) - len(stdin.replace('1', ''))"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return len([char for char in stdin if char in ['A', 'E', 'I', 'O', 'U', 'Y']])\n  \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    vowel = ['A', 'E', 'I', 'O', 'U', 'Y']\n    for i in vowel:\n        if i in stdin:\n            return max(stdin.split(i))\n\nprint(solution(input()))"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin\n    for i in range(len(stdin)):\n        if stdin[i] in 'AEIOUYaeiouy':\n            answer = answer[:i] + answer[i+1:]\n    return len(answer)\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = [int(i) for i in stdin.split(' ')]\n\n    if min(a1, a2, a3, a4) < a3:\n        print('NO')\n    else:\n        print('YES')"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = [int(x) for x in stdin.split()]\n    if a1 <= 0 and a2 <= 0 and a3 <= 0 and a4 <= 0:\n        return \"YES\"\n    elif (a1 + a2) % 2!= 0 and (a1 + a3) % 2!= 0 and (a2 + a4) % 2!= 0 and (a3 + a4) % 2!= 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(\"2 2 2 2\"))\n\n\n\n\"\"\""
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a = list(map(int, s))\n    return \"YES\" if sum(a) % 2 == 0 else \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES or NO depending on whether the task is possible to solve.\"\"\"\n    _, *line = stdin.split('\\n')\n    line = list(map(int, line))\n    sum_a = sum(line)\n    min_a = min(line)\n    max_a = max(line)\n\n    if sum_a % 4!= 0 or min_a * 3 > sum_a:\n        return 'NO'\n\n    return 'YES'\n\"\"\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = [int(n) for n in stdin.split()]\n    return 'YES' if a2 >= a1 and a3 >= a1 and a4 >= a1 else 'NO'\n\n\"\"\"\n\nimport unittest\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if _solution(stdin) else 'NO'\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    if abs(a1-a2) == abs(a3-a4):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    sizes = list(map(int, stdin.split(\"\\n\")[1].split()))\n    alice = 0\n    bob = 0\n    while len(sizes) > 0:\n        bob += max(sizes)\n        sizes.remove(max(sizes))\n        if len(sizes) > 0:\n            alice += max(sizes)\n            sizes.remove(max(sizes))\n    print(alice, bob)"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return f'{n + sum(int(x) for x in stdin.split()[1:])}\\n' + f'{sum(int(x) for x in stdin.split()[1:])}\\n'\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    if len(input) < 2:\n        print('Wrong number of lines of input. Need 2.')\n    n = int(input[0])\n    sizes = input[1].split(\" \")\n    if len(sizes)!= n:\n        print('Wrong number of lines of input. Need n.')\n    sizes = list(map(int, sizes))\n    sizes.sort()\n    alice = 0\n    bob = 0\n    for i in range(n // 2):\n        alice += sizes[i]\n        bob += sizes[n - i - 1]\n    if n % 2 == 1:\n        alice += sizes[n // 2]\n        bob += sizes[n // 2]\n    print(alice, bob)\n\nn = int(input())\nsizes = input().split(\" \")\nsizes = list(map(int, sizes))\nsizes.sort()\nalice = 0\nbob = 0\nfor i in range(n // 2):\n    alice += sizes[i]\n    bob += sizes[n - i - 1]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *slices = map(int, stdin.split())\n    A = [0] * N\n    B = [0] * N\n    decider = 1\n    for s in slices:\n        if decider == 1:\n            A[decider % N] += s\n            decider += 1\n        else:\n            B[decider % N] += s\n            decider += 1\n\n    return str(sum(A)) +'' + str(sum(B))\n\nhttps://www.codewars.com/kata/53dbd5315a3c69eed20002dd/train/python\n\"\"\"\ndef"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/5b5c22bdce5de1cb8200085a/train/python\n    \"\"\"\n    num_slices, *sizes = [int(i) for i in stdin.split()]\n    alice = sum(sizes[i] if i%2 == 0 else 0 for i in range(num_slices))\n    bob = sum(sizes[i] if i%2 == 1 else 0 for i in range(num_slices))\n    print(alice, bob)\n    return '\\n'.join([str(alice), str(bob)])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split(' ')]\n    alice = 0\n    bob = 0\n    decider = 'B'\n    while len(s) > 0:\n        if decider == 'A':\n            alice += s.pop(0)\n            decider = 'B'\n        else:\n            bob += s.pop(0)\n            decider = 'A'\n    return str(alice) +'' + str(bob)\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    decider = arr[0]\n    alice = 0\n    bob = 0\n    for i in range(1, n):\n        if decider == i:\n            bob += arr[i]\n        else:\n            alice += arr[i]\n    return str(alice)+\" \"+str(bob)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    my_list = [int(item) for item in stdin.split()]\n    a_num = 0\n    b_num = 0\n    decider = 0\n    for item in my_list:\n        if item > decider:\n            decider = item\n            a_num += 1\n        else:\n            b_num += 1\n    return a_num, b_num\n\n\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a slice of pie and the two people who received it\n    return the two people who will get the other half\n    \"\"\"\n    sizes = [int(x) for x in stdin.strip().split()]\n    # get the index of the decider\n    decider = sizes.index(max(sizes))\n    # divide into two sets\n    alice, bob = sizes[:decider], sizes[decider + 1:]\n    # find the maximum in each set\n    alice_max = max(alice)\n    bob_max = max(bob)\n    # return the two sets\n    return alice_max + bob_max, alice_max * bob_max\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 1:\n        num_slices = int(stdin)\n    else:\n        num_slices = int(stdin[0][0])\n    slices = [int(x) for x in stdin[1].split()]\n    bob = 0\n    alice = 0\n    alice_res = []\n    bob_res = []\n    while len(slices) > 0:\n        bob = slices.pop(0)\n        while len(slices) > 0:\n            if slices[0] > bob:\n                alice = slices.pop(0)\n                break\n            else:\n                slices.pop(0)\n                if len(slices) == 0:\n                    alice = bob\n                    break\n        alice_res.append(alice)\n        bob_res.append(bob)\n\n    return f\"{sum(alice_res)}\\n{sum(bob_res)}\"\n\n\nsolution(input())\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 3 6 8\")\n    2\n    >>> solution(\"3\\n3 6 5\")\n    -1\n    >>> solution(\"6\\n2 4 8 6 10 18\")\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 3 6 8\")\n    2\n    >>> solution(\"3\\n3 6 5\")\n    -1\n    >>> solution(\"6\\n2 4 8 6 10 18\")\n    3\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n\n    f = [0 for _ in range(len(a))]\n    f[0] = 1\n\n    for i in range(1, len(a)):\n        f[i] = f[i - 1]\n        for j in range(0, i):\n            if a[i] > a[j] and f[i] < f[j] + 1:\n                f[i] = f[j] + 1\n\n    return f[-1] if f[-1] > 0 else -1\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split(' ')]\n    # print(n, a)\n    result = 0\n    for i in range(1, len(a)):\n        temp = 0\n        for j in range(i):\n            temp = max(temp, a[i] - a[j])\n            # print(j, i, temp)\n        result = max(result, temp)\n    if result == 0:\n        print(-1)\n    else:\n        print(result)\n    return ''\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    if n <= 2:\n        return -1\n\n    m = 1\n    while m * (m + 1) // 2 < n:\n        m += 1\n\n    if m * m > n:\n        m -= 1\n    if m * m > n:\n        return -1\n\n    b = [0] * (m + 1)\n    for i in range(n):\n        b[i + 1] = b[i] + a[i]\n    b = b[1:]\n    print(m)\n\n    c = list(range(m))\n    for i in range(n):\n        for j in range(m):\n            if b[i] == b[j] + b[i - j]:\n                c[i] = j\n                break\n            if j == m - 1:\n                return -1\n\n    print(' '.join(map(str, c)))\n    return m\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, a = map(int, stdin.split())\n    _a = a\n    i = 0\n    count = 1\n    while True:\n        _a, count = _a * (i + 1), count + 1\n        if _a >= 10 ** 9:\n            break\n    return count if _a == a else -1\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = map(int, stdin.split())\n    a = list(data)\n    m = 0\n    s = set()\n    for i, num in enumerate(a):\n        if num in s:\n            m = max(m, i)\n        s.add(num)\n\n    for i in range(1, n):\n        for j in range(i):\n            if sum(a[:i]) == sum(a[i:j]) + sum(a[j:i]) + sum(a[i:j]):\n                m = max(m, i)\n                break\n    print(m) if m else print(-1)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    \n    s = set()\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] not in s:\n                s.add(a[i] + a[j])\n            else:\n                return '-1'\n    return str(len(s))"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # cnt = 0\n    # stdin = list(map(int, stdin.split()))\n    # total_sum = sum(stdin)\n    # total_cnt = total_sum / 2\n    # if total_cnt.is_integer():\n    #     cnt = total_cnt\n    #     print(cnt)\n    # else:\n    #     print(-1)\n    # return ''\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    total_sum = sum(arr)\n    if total_sum % 2:\n        print(-1)\n        return ''\n    total_sum = total_sum // 2\n    dp = [[False for _ in range(total_sum + 1)] for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(total_sum + 1):\n            if j >= arr[i - 1]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    print(total_sum - dp[n][total_sum])"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if s % n!= 0:\n        print(-1)\n        return\n    b = s // n\n    for i in range(n, 1, -1):\n        x = sum([a[j] for j in range(i)])\n        y = s - (i - 1) * b\n        if x == y:\n            print(i)\n            return\n    print(-1)\n    return\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the minimum number of variables m, such that those variables can help you perform the described sequence of operations.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: the minimum number of variables m, such that those variables can help you perform the described sequence of operations.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    s = 0\n    for i in a:\n        s += i\n\n    dp = [i for i in range(n + 1)]\n\n    for i in range(n):\n        for j in range(1, n):\n            dp[j] = min(dp[j], dp[j - 1] + dp[j])\n\n    dp[0] = 0\n    dp[1] = a[0]\n\n    for i in range(2, n):\n        for j in range(1, i + 1):\n            dp[i] = min(dp[i], dp[i - j] + dp[j])\n\n    if dp[n] < s:\n        return -1\n    return dp[n]\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(\"\\n\")[0])\n    if a % 2 == 0:\n        return \"Bob\"\n    return \"Alice\""
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Bob'"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n % 2!= 0:\n        return \"Alice\"\n    stones = [int(x) for x in stdin.split()[1:]]\n    turn = 1\n    while len(stones) > 2:\n        if turn % 2 == 1:\n            stones = sorted(stones)[-1:-3:-1]\n            for x in stones:\n                stones.remove(x)\n            turn += 1\n        else:\n            stones = sorted(stones)[1:3]\n            for x in stones:\n                stones.remove(x)\n            turn += 1\n    return \"Alice\" if turn % 2 == 1 else \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    piles = [int(x) for x in stdin.split(\" \")]\n\n    if n % 2 == 0:\n        if piles[:int(n/2)] == piles[-int(n/2):]:\n            return \"Alice\"\n\n        if piles[:int(n/2)]!= piles[-int(n/2):]:\n            return \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_piles, num_stones = map(int, stdin.split('\\n')[0].split())\n    return 'Alice' if num_stones * 2 < num_piles else 'Bob'\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.split(\"\\n\")[0])\n    stones = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    if n % 2 == 0:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n    \n    return \"\"\n\nsolution(stdin)"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stones = [int(c) for c in stdin.split()]\n    a = stones[0]\n    b = stones[1]\n    if a > b:\n        return \"Alice\"\n    elif b > a:\n        return \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    # Validate input\n    if n < 2 or n > 50:\n        raise ValueError(\"n must be an integer between 2 and 50\")\n    if len(arr)!= n:\n        raise ValueError(\"must have n items in the array\")\n    for x in arr:\n        if x < 1 or x > 50:\n            raise ValueError(\"must have values between 1 and 50\")\n\n    # Get Alice's moves\n    alice = [x for x in arr if x % 2 == 1]\n    # Get Bob's moves\n    bob = [x for x in arr if x % 2 == 0]\n\n    # Determine who wins\n    if len(alice) < len(bob):\n        return \"Bob\"\n    elif len(alice) > len(bob):\n        return \"Alice\"\n\n    # Else both have the same number of stones\n    # And each player can make the same number of moves\n    # So we just need to ensure that both players can make the same number of moves\n    # So we need to ensure that each pile has a number of stones that is a multiple of 2\n    # If this is the case then each player must have the same number of moves\n    for x in arr:\n        if x % 2!= 0:\n            return \"Alice\"\n\n    return \"Bob\"\n\n\nprint(solution(\"4\\n1 2 3 4\"))\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.replace(' ', '') == 'NO' else 'NO'\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = list(map(int, stdin.readline().strip().split(\" \")))\n    m = []\n    if len(s) > 2:\n        m = [max(s), min(s)]\n        x = max(m)\n    else:\n        x = max(s)\n    a = set(s)\n    if len(a) > 2:\n        a = a.difference(set([min(a)]))\n    b = max(a)\n    for _ in range(n):\n        if x in s:\n            s[0] += x\n            s[-1] -= x\n            if s[1] - x > x:\n                s[1] -= x\n            else:\n                s[1] = s[1] - x\n            if s[-2] - x > x:\n                s[-2] -= x\n            else:\n                s[-2] = s[-2] - x\n        if b in s:\n            s[0] += b\n            s[-1] -= b\n            if s[1] - b > b:\n                s[1] -= b\n            else:\n                s[1] = s[1] - b\n            if s[-2] - b > b:\n                s[-2] -= b\n            else:\n                s[-2] = s[-2] - b\n    if len(a) == 2:\n        for i in range(n):\n            if s[i]!= b:\n                return \"NO\"\n    return \"YES\"\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    list_a = list(map(int, stdin.split(\" \")))\n    res = True\n    x = (min(list_a) + max(list_a)) // 2\n    print(x)\n    for i in range(len(list_a)):\n        if list_a[i]!= x:\n            res = False\n    if res:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = [int(i) for i in stdin.split()]\n    if n == 1:\n        return 'YES' if sum(stdin) % n == 0 else 'NO'\n    for i in range(1, n):\n        if sum(stdin) - n*i == i*n:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    if sum(stdin.split())!= len(set(stdin.split())):\n        return 'NO'\n    else:\n        return 'YES'\n    '''\n    stdin = stdin.split()\n    if len(set(stdin)) > 1:\n        return 'NO'\n    for i in range(len(stdin)):\n        if i == 0:\n            if stdin[i]!= stdin[-1]:\n                stdin[i] = stdin[-1]\n        elif i == len(stdin) - 1:\n            if stdin[i]!= stdin[i - 1]:\n                stdin[i] = stdin[i - 1]\n        else:\n            if stdin[i]!= stdin[i - 1] or stdin[i]!= stdin[i + 1]:\n                stdin[i] = stdin[i - 1] + stdin[i + 1]\n    return 'YES' if sum(stdin) == len(set(stdin)) else 'NO'"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Don't print anything, modify stdout instead.\n    # Write your code here\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if s[i]!= n:\n            count += 1\n            if count > 1:\n                break\n            continue\n    if count == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    # Write your code here"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(n) for n in stdin.split()]\n    return \"YES\" if arr[0] + arr[-1] == sum(arr) / 2 else \"NO\""
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    # for i in range(len(arr)-1):\n    #     if (arr[i+1] - arr[i]!= 1):\n    #         return 'NO'\n    if arr[0] == arr[len(arr)-1]:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and returns the solution of the problem.\n\n    >>> solution('''5\n   ... ababa\n   ... ''')\n    2\n    >>> solution('''5\n   ... ababa\n   ... abcab\n   ... ''')\n    3\n    >>> solution('''10\n   ... abcdefghijklmnopqrstuvwxyzabc\n   ... ''')\n    0\n    \"\"\"\n    # get the input\n    N = int(stdin.split('\\n')[0])\n    S = stdin.split('\\n')[1]\n    # get the string with maximum length\n    max_length = 0\n    for i in range(len(S)):\n        count = 0\n        max_length = max(max_length, count)\n        for j in range(i+1, len(S)+1):\n            if S[i:j] == S[j:i+j][::-1]:\n                count += 1\n                max_length = max(max_length, count)\n    return str(max_length)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n\n    n = int(input[0])\n    s = input[1]\n\n    result = 0\n    for i in range(n):\n        if (n - i) * i > result:\n            result = (n - i) * i\n    print(result)\n    return \"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[1]\n    N = len(S)\n\n    def find_max(start: int, end: int) -> int:\n        nonlocal S\n        max_len = 0\n        for i in range(start, end + 1):\n            l_1 = i\n            l_2 = i + 1\n            while (l_2 <= N - 1) and (S[l_1] == S[l_2]):\n                l_2 += 1\n            if l_2 - l_1 > max_len:\n                max_len = l_2 - l_1\n        return max_len\n\n    # find first occurence\n    i = 0\n    while i < N and S[i] == S[i + 1]:\n        i += 1\n    if i >= N:\n        return '0'\n    max_len = 0\n    while i < N - 1:\n        l = find_max(i, N - 1)\n        if l > max_len:\n            max_len = l\n        i += l\n\n    return str(max_len)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\n    More formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n        - l_1 + len \\leq l_2\n        - S[l_1+i] = S[l_2+i] (i = 0, 1,..., len - 1)\n    If there is no such integer len, print 0.\n\n    :param stdin: str - S\n    :return: str - max length of non-empty string that occurs twice or more in S as contiguous substrings without overlapping\n    \"\"\"\n\n    # Initiate set to store sets of indices of substrings of S\n    indices = set()\n    n = int(stdin)\n\n    # Loop through S\n    for i in range(n):\n        # If the current substring is a substring of any other substring, delete the current substring\n        # This prevents duplicate substring sets\n        # This means that if the current substring is not a substring of any other substring, then\n        # it is a candidate substring\n        for j in indices.copy():\n            if i + len(j) >= n:\n                indices.remove(j)\n            elif stdin[i:i + len(j)]!= stdin[j:j + len(j)]:\n                indices.remove(j)\n                break\n            else:\n                break\n\n        # If the current substring is not in the set, add it\n        if stdin[i:i + len(stdin)] not in indices:\n            indices.add(stdin[i:i + len(stdin)])\n\n    # Loop through indices and find max length\n    max_len = 0\n    for i in indices:\n        if len(i) > max_len:\n            max_len = len(i)\n\n    # If max_len is greater than or equal to 2, return max_len\n    if max_len >= 2:\n        return max_len\n    # If max_len is less than 2, return 0\n    else:\n        return 0\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... ababa''')\n    2\n    >>> solution('''7\n   ... a\n   ... aba\n   ... baba\n   ... b\n   ... b\n   ... b''')\n    0\n    >>> solution('''7\n   ... a\n   ... b\n   ... b\n   ... aba\n   ... baba\n   ... b''')\n    2\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1]\n    longest_substring_with_repeating_characters = 0\n    all_substrings = set()\n    for i in range(n):\n        longest_substring_with_repeating_characters = max(\n            longest_substring_with_repeating_characters, len(s[i:])\n        )\n        for j in range(longest_substring_with_repeating_characters, 0, -1):\n            if s[i:i + j] in all_substrings:\n                return j\n            all_substrings.add(s[i:i + j])\n\n    return longest_substring_with_repeating_characters\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    houses, you = map(int, stdin.split())\n    print(min(abs(houses - you), abs(houses - you + 1)))\n\nsolution(input())\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # This is an input example\n    # The two lines below are the same as\n    n, house = map(int, stdin.split())\n    \n    # I can't figure out the problem with this solution\n    time = house - 2\n    return f\"{time} seconds\"\n\n\nprint(solution(\"4 2\"))\n\nprint(solution(\"8 5\"))\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Modify the code below\n    # your code here\n    n, a = [int(x) for x in stdin.split()]\n    a = a % n\n    if a % 2 == 0:\n        a1 = a//2\n        a2 = n - a1 - 1\n    else:\n        a2 = a//2\n        a1 = n - a2 - 1\n    t = min(a1, a2)\n    t = t % 2\n    print(t + 1)\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(num) for num in stdin.split()]\n    return n - a if (n - a) % 2 else (n - a) // 2\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, house = [int(i) for i in stdin.split(' ')]\n    if n == house:\n        return '0'\n    if n % 2 == 0:\n        return f'{n - house + 1}'\n    else:\n        return f'{abs(n - house) - 1}'\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = n // 2\n    if n % 2 == 0:\n        print(abs(a - x))\n    else:\n        if a == x:\n            print(0)\n        elif a > x:\n            print(abs(a - x - 1) + 2)\n        else:\n            print(abs(a - x) + 2)\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, house = input().split()\n    n = int(n)\n    house = int(house)\n    if n % 2 == 0:\n        return abs(house - n) + 1\n    else:\n        return abs(n - house) + 2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.split('\\n')[0].split())\n    colors = map(int, stdin.split('\\n')[1].split())\n    (k, result) = [0 for i in range(m)], 0\n    for i in colors:\n        k[i - 1] += 1\n        if k[i - 1] > result:\n            result = k[i - 1]\n    if result > n:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Read input\n    n, m = map(int, stdin.split())\n    color = [int(i) for i in stdin.split()]\n    count = [0 for i in range(m)]\n    for i in range(n):\n        count[color[i] - 1] += 1\n\n    # Print output\n    if n == 0 or n == 1:\n        return 'YES'\n    if m == 1:\n        return 'NO'\n    if m == 2:\n        return 'YES' if max(count) > 1 else 'NO'\n    if min(count) < 1:\n        return 'NO'\n    if m == 3 and count[1] >= 1 and count[2] >= 1:\n        return 'NO'\n    if count[0] < min(count) or count[m - 1] < min(count):\n        return 'NO'\n    return 'YES'\n\nprint(solution(stdin))"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    c = stdin.split()[1:]\n    k = [int(x) for x in stdin.split()[2:]]\n    k.sort()\n    if sum(k) > n:\n        return 'NO'\n    elif len(set(k)) < m:\n        return 'NO'\n    else:\n        return 'YES'\n    \n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    nums = [int(c) for c in stdin.split(' ')]\n    counts = [int(c) for c in stdin.split(' ')]\n    \n    print(nums)\n    print(counts)\n    \n    return 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    colors = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    count = [0] * n\n    for x in colors:\n        count[x - 1] += 1\n    res = []\n    for i in range(m):\n        res.append(count[i])\n    print(res)\n    k = 1\n    while k < n:\n        if res[k] - res[k - 1] > 1:\n            print('NO')\n            return\n        k += 1\n    print('YES')\n    return\n    '''\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    colors = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    count = [0] * n\n    for x in colors:\n        count[x - 1] += 1\n    k = 1\n    while k < n:\n        if count[k] - count[k - 1] > 1:\n            print('NO')\n            return\n        k += 1\n    print('YES')\n    return\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    colors = list(map(int, stdin.split()))\n\n    colors.sort()\n    interval = []\n\n    def find(k: int) -> bool:\n        for i in range(n):\n            if colors[i] > k:\n                return False\n        return True\n    \n    def binary_search(k: int) -> bool:\n        left, right = 0, len(interval)\n        while left < right:\n            mid = left + (right - left) // 2\n            if find(interval[mid]):\n                left = mid + 1\n            else:\n                right = mid\n        return left\n\n    for k in range(1, m + 1):\n        interval.append(k)\n        if binary_search(k):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    lst = [int(i) for i in stdin.split()]\n    interval = []\n    for i in range(0, len(lst), m):\n        interval.append(lst[i:i+m])\n\n    if len(interval) == 1:\n        if interval[0][0] == 1:\n            return \"YES\"\n        return \"NO\"\n    for i in range(len(interval)-1, 0, -1):\n        for j in range(i-1, -1, -1):\n            if sum(interval[j]) < sum(interval[i]):\n                interval[j+1] = interval[j]\n                interval[j] = interval[i]\n                break\n    print(interval)\n    for i in range(len(interval)):\n        for j in range(m):\n            if sum(interval[i]) == interval[i][j]:\n                return \"YES\"\n    return \"NO\"\n\n\nprint(solution(stdin=\"5 2\\n1 1 2 2 1\"))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    counts = stdin.split()\n    counts = [int(i) for i in counts]\n\n    total_sum = sum(counts)\n    if total_sum > n:\n        return 'NO'\n    else:\n        min_count, max_count = min(counts), max(counts)\n        if (max_count-min_count)!= (n-total_sum):\n            return 'NO'\n\n    min_sum = 0\n    for i in range(m):\n        min_sum += counts[i]\n    if min_sum!= min_count:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    {\n        'i': 0,\n        'j': 0,\n        'k': 0,\n        'count': 0\n    }\n    '''\n    n, m = map(int, stdin.split())\n    jedi = sorted(list(map(int, stdin.split())))\n    jedi_dict = {}\n\n    # Write your code here\n    def intervals(stdin):\n        interval_list = []\n        for i in range(0, len(stdin), 2):\n            start, end = stdin[i:i+2]\n            if end == start:\n                interval_list.append([start, end])\n            else:\n                interval_list.append([start, end-1])\n        return interval_list\n\n    def search(stdin, intervals, stdout):\n        if stdout:\n            return stdout\n        if intervals[0][0] > stdin[0]:\n            stdout = False\n            return search(stdin, intervals[1:], stdout)\n        elif intervals[0][1] < stdin[1]:\n            stdout = False\n            return search(stdin, intervals[1:], stdout)\n        elif intervals[0][1] > stdin[1]:\n            return search(stdin, intervals[1:], stdout)\n        elif intervals[0][1] == stdin[1]:\n            return search(stdin[:1] + stdin[2:], intervals[1:], stdout)\n        elif intervals[0][1] == stdin[0]:\n            return search(stdin[:1] + stdin[2:], intervals[1:], stdout)\n        elif intervals[0][0] == stdin[0] and intervals[0][1] == stdin[1]:\n            stdout = True\n            return search(stdin, intervals[1:], stdout)\n        elif intervals[0][0] == stdin[0]:\n            return search(stdin, intervals[1:], stdout)\n        elif intervals[0][0] == stdin[1]:\n            return search(stdin[:1] + stdin[2:], intervals[1:], stdout)\n        else:\n            return search(stdin, intervals[1:], stdout)\n\n    for i in range(m):\n        jedi_dict[jedi[i]] = {'i': 0, 'j': 0, 'k': 0, 'count': 0}\n\n    for i in range(0, len(jedi)):\n        jedi_dict[jedi[i]]['i'] = i\n        jedi_dict[jedi[i]]['count'] += 1\n\n    for i in range(0, len(jedi)):\n        if jedi_dict[jedi[i]]['count'] == 1:\n            jedi_dict[jedi[i]]['j'] = i\n        elif jedi_dict[jedi[i]]['count'] > 1:\n            jedi_dict[jedi[i]]['j'] = i - 1\n\n    jedi_intervals = intervals(jedi)\n    jedi_intervals = sorted(jedi_intervals, key=lambda x: x[0])\n    stdout = search(jedi, jedi_intervals, False)\n    if stdout == False:\n        return 'NO'\n    return 'YES'\nprint(solution(stdin=str(input())))\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Mishka' if int(stdin) % 2 == 0 else 'Chris' if int(stdin) % 2 == 1 else 'Friendship is magic!^^'\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\ndef"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A game is played by two children standing on two legs of a chair.\n    The game starts with the chair being pushed to a point against a wall.\n    The player who remains standing after the chair is pushed will be the winner.\n    The player who moves the chair closest to the wall will be the winner.\n\n    Each move consists of a child moving one step along the chair,\n    i.e. one of the legs moves one step and the other leg remains stationary.\n    The goal is to reach the chair from the starting position so that the winner is the child who moves the final leg.\n    '''\n    return ''\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    mishkas = []\n    chris = []\n    for i in range(count):\n        mishkas.append(list(map(int, stdin.readline().split())))\n        chris.append(list(map(int, stdin.readline().split())))\n    mishkas.sort()\n    chris.sort()\n    mishkas_win = 0\n    chris_win = 0\n    for i in range(len(mishkas)):\n        if mishkas[i][1] > chris[i][1]:\n            mishkas_win += 1\n        elif mishkas[i][1] < chris[i][1]:\n            chris_win += 1\n        elif mishkas[i][1] == chris[i][1]:\n            mishkas_win += 1\n            chris_win += 1\n    if mishkas_win > chris_win:\n        print('Mishka')\n    elif mishkas_win < chris_win:\n        print('Chris')\n    else:\n        print('Friendship is magic!^^')\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split(\" \"))))\n    mishka = 0\n    chris = 0\n    for i in range(n):\n        mishka += matrix[i][0] > matrix[i][1]\n        chris += matrix[i][0] < matrix[i][1]\n    if mishka > chris:\n        return \"Mishka\"\n    elif chris > mishka:\n        return \"Chris\"\n    return \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = []\n    for _ in range(n):\n        scores.append(list(map(int, stdin.readline().strip().split())))\n\n    mishka = 0\n    chris = 0\n    for score in scores:\n        if score[0] > score[1]:\n            mishka += 1\n        elif score[1] > score[0]:\n            chris += 1\n\n    if mishka > chris:\n        return 'Mishka'\n    elif chris > mishka:\n        return 'Chris'\n    else:\n        return 'Friendship is magic!'\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rounds = int(stdin.readline())\n    p1_round_score = []\n    p2_round_score = []\n    for i in range(0, num_of_rounds):\n        p1_round_score.append(int(stdin.readline().split(\" \")[0]))\n        p2_round_score.append(int(stdin.readline().split(\" \")[0]))\n\n    if p1_round_score == p2_round_score:\n        print(\"Friendship is magic!^^\")\n    elif p1_round_score > p2_round_score:\n        print(\"Mishka\")\n    else:\n        print(\"Chris\")\n    return \"\""
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    mishka = 0\n    chris = 0\n    n = int(stdin)\n    for i in range(n):\n        m,c = map(int, stdin.split())\n        if m > c:\n            mishka += 1\n        elif c > m:\n            chris += 1\n    if mishka > chris:\n        print('Mishka')\n    elif mishka < chris:\n        print('Chris')\n    else:\n        print('Friendship is magic!^^')\n    \n    return ''\n\n\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a, b = 0, 0\n    for i in range(n):\n        m, c = map(int, stdin.readline().split())\n        if m > c:\n            a += 1\n        elif m < c:\n            b += 1\n    if a > b:\n        return 'Mishka'\n    elif a < b:\n        return 'Chris'\n    else:\n        return 'Friendship is magic!^^'\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readlines()]\n    #print(a)\n    b = a[:n]\n    c = a[n:]\n    #print(b, c)\n    if a[n - 1] > max(b):\n        print('Mishka')\n    elif a[n - 1] < max(b):\n        print('Chris')\n    else:\n        print('Friendship is magic!^^')\n\n\nprint(solution(\"\"\"\n3\n5\n2 1\n4 2\n\"\"\".strip()))"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n5\\n2 1\\n4 2')\n    'Mishka'\n    >>> solution('2\\n6 1\\n1 6')\n    'Friendship is magic!^^'\n    >>> solution('3\\n1 5\\n3 3\\n2 2')\n    'Chris'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.split())\n\n    bombs = set()\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == \"*\":\n                bombs.add((i, j))\n\n    def get_neighbours(x, y):\n        neighbours = []\n        if x > 0 and y > 0:\n            neighbours.append((x - 1, y - 1))\n        if x > 0:\n            neighbours.append((x - 1, y))\n        if x > 0 and y < m - 1:\n            neighbours.append((x - 1, y + 1))\n        if y > 0:\n            neighbours.append((x, y - 1))\n        if y < m - 1:\n            neighbours.append((x, y + 1))\n        if x < n - 1 and y > 0:\n            neighbours.append((x + 1, y - 1))\n        if x < n - 1:\n            neighbours.append((x + 1, y))\n        if x < n - 1 and y < m - 1:\n            neighbours.append((x + 1, y + 1))\n        return neighbours\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= \"*\":\n                neighbours = get_neighbours(i, j)\n                for neighbour in neighbours:\n                    if neighbour not in bombs:\n                        matrix[i][j] = str(int(matrix[i][j]) + 1)\n                    else:\n                        matrix[i][j] = \"*\"\n    return \"YES\" if \"*\" not in matrix[0] else \"NO\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Purpose: Solve Minesweeper\n    '''\n    def isValid(field, row, col):\n        # if the number of bombs is same as the number of bombs\n        # adjacent to the current cell, then the cell is valid\n        # (containing a digit from 1 to 8, inclusive)\n        numBombs = 0\n        numAdjBombs = 0\n        for i in range(-1,2):\n            if (row + i >= 0) and (row + i < len(field)):\n                for j in range(-1,2):\n                    if (col + j >= 0) and (col + j < len(field[row])):\n                        if (i!= 0) or (j!= 0):\n                            if field[row + i][col + j] == \"*\":\n                                numBombs += 1\n                            elif (field[row + i][col + j] >= \"1\") and (field[row + i][col + j] <= \"8\"):\n                                numAdjBombs += 1\n        return (numBombs == numAdjBombs)\n    \n    field = stdin.split(\"\\n\")\n    n = int(field[0].split(\" \")[0])\n    m = int(field[0].split(\" \")[1])\n    ans = \"YES\"\n    \n    for i in range(1, len(field)):\n        for j in range(len(field[i])):\n            if field[i][j] == \"*\":\n                if not isValid(field, i, j):\n                    ans = \"NO\"\n                    break\n        if ans == \"NO\":\n            break\n    \n    return ans\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Cell:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.is_bomb = False\n        self.value = 0\n        self.neighbours = []\n\n    def __repr__(self):\n        if self.is_bomb:\n            return \"*\"\n        else:\n            return str(self.value)\n\n\nclass Grid:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.grid = [[Cell(x, y) for y in range(self.height)] for x in range(self.width)]\n\n    def __repr__(self):\n        return \"\\n\".join([str(row) for row in self.grid])\n\n    def __getitem__(self, index):\n        return self.grid[index]\n\n    def __setitem__(self, index, value):\n        self.grid[index] = value\n\n    def get_row(self, row_index):\n        return self.grid[row_index]\n\n    def get_col(self, col_index):\n        return [row[col_index] for row in self.grid]\n\n    def get_neighbour_cells(self, cell):\n        neighbours = []\n        for x in range(cell.x - 1, cell.x + 2):\n            for y in range(cell.y - 1, cell.y + 2):\n                if x == cell.x and y == cell.y:\n                    continue\n                if x < 0 or x >= self.width or y < 0 or y >= self.height:\n                    continue\n                neighbours.append(self.grid[x][y])\n        return neighbours\n\n    def check_validity(self):\n        for row in self.grid:\n            for cell in row:\n                cell.neighbours = self.get_neighbour_cells(cell)\n                for neighbour in cell.neighbours:\n                    if neighbour.is_bomb:\n                        cell.is_bomb = True\n                    if neighbour.is_bomb and neighbour.value!= 0:\n                        cell.is_bomb = True\n                    if neighbour.is_bomb and neighbour.value == 0 and neighbour.value!= 8:\n                        cell.value = neighbour.value\n\n        for row in self.grid:\n            for cell in row:\n                if not cell.is_bomb:\n                    if cell.value == 0 and len([neighbour for neighbour in cell.neighbours if neighbour.is_bomb]) == 0:\n                        cell.value = len([neighbour for neighbour in cell.neighbours if neighbour.is_bomb])\n                    else:\n                        cell.value = 0\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nfield = []\n\nfor _ in range(n):\n    field.append(list(stdin.readline().strip()))\n\nfor i in range(n):\n    for j in range(m):\n        if field[i][j] == \"*\":\n            continue\n\n        field[i][j] = 0\n\n        if j < m - 1:\n            if field[i][j + 1] == \"*\":\n                field[i][j + 1] += 1\n\n        if i < n - 1:\n            if field[i + 1][j] == \"*\":\n                field[i + 1][j] += 1\n\n        if j > 0:\n            if field[i][j - 1] == \"*\":\n                field[i][j - 1] += 1\n\n        if i > 0:\n            if field[i - 1][j] == \"*\":\n                field[i - 1][j] += 1\n\n        if i < n - 1 and j < m - 1:\n            if field[i + 1][j + 1] == \"*\":\n                field[i + 1][j + 1] += 1\n\n        if i < n - 1 and j > 0:\n            if field[i + 1][j - 1] == \"*\":\n                field[i + 1][j - 1] += 1\n\n        if i > 0 and j < m - 1:\n            if field[i - 1][j + 1] == \"*\":\n                field[i - 1][j + 1] += 1\n\n        if i > 0 and j > 0:\n            if field[i - 1][j - 1] == \"*\":\n                field[i - 1][j - 1] += 1\n\nfor i in range(n):\n    for j in range(m):\n        if field[i][j] == 0:\n            if j < m - 1:\n                if field[i][j + 1] == 1:\n                    continue\n                else:\n                    print(\"NO\")\n                    exit(0)\n\n            if i < n - 1:\n                if field[i + 1][j] == 1:\n                    continue\n                else:\n                    print(\"NO\")\n                    exit(0)\n\n            if j > 0:\n                if field[i][j - 1] == 1:\n                    continue\n                else:\n                    print(\"NO\")\n                    exit(0)\n\n            if i > 0:\n                if field[i - 1][j] == 1:\n                    continue\n                else:\n                    print(\"NO\")\n                    exit(0)\n\n            if i < n - 1 and j < m - 1:\n                if field[i + 1][j + 1] == 1:\n                    continue\n                else:\n                    print(\"NO\")\n                    exit(0)\n\n            if i < n - 1 and j > 0:\n                if field[i + 1][j - 1] == 1:\n                    continue\n                else:\n                    print(\"NO\")\n                    exit(0)\n\n            if i > 0 and j < m - 1:\n                if field[i - 1][j + 1] == 1:\n                    continue\n                else:\n                    print(\"NO\")\n                    exit(0)\n\n            if i > 0 and j > 0:\n                if field[i - 1][j - 1] == 1:\n                    continue\n                else:\n                    print(\"NO\")\n                    exit(0)\n\n            print(\"YES\")\n            exit(0)\n\nprint(\"YES\")\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    matrix = [list(stdin[i:i + cols]) for i in range(0, rows * cols, cols)]\n    n = rows * cols\n    bomb_set = {\n        '1': '11110',\n        '2': '11010',\n        '3': '11001',\n        '4': '10110',\n        '5': '10101',\n        '6': '10111',\n        '7': '11110',\n        '8': '11111'\n    }\n    for row_idx in range(rows):\n        for col_idx in range(cols):\n            if matrix[row_idx][col_idx] == '.':\n                continue\n            elif matrix[row_idx][col_idx] in bomb_set:\n                for r_idx in range(row_idx - 1, row_idx + 2):\n                    for c_idx in range(col_idx - 1, col_idx + 2):\n                        if r_idx >= 0 and c_idx >= 0 and r_idx < rows and c_idx < cols and matrix[r_idx][c_idx] in bomb_set:\n                            matrix[r_idx][c_idx] = bomb_set[matrix[r_idx][c_idx]]\n            else:\n                matrix[row_idx][col_idx] = str(int(matrix[row_idx][col_idx]) - 1)\n    return 'YES' if '11111111' in ''.join([''.join(row) for row in matrix]) else 'NO'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(i) for i in stdin.split()]\n    field = []\n    for i in range(rows):\n        field.append(stdin[i * cols:(i + 1) * cols])\n    return field\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to calculate the number of bombs\"\"\"\n    size = [int(i) for i in stdin.split('\\n')[0].split()]\n    data = []\n    for i in stdin.split('\\n')[1:]:\n        data.append([int(i) for i in list(i) if i!= '.' and i!= '*'])\n    return 'YES' if is_valid(*size, data) else 'NO'\n\n\ndef"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of candies Vasya can eat by himself\"\"\"\n    candies = int(stdin)\n    k = 1\n    while True:\n        k += 1\n        count_candies = candies - int(candies * 0.1)\n        if count_candies <= 0:\n            break\n        candies = count_candies\n    return str(k)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    if n%10 == 0:\n        return n//10\n    k = 0\n    while n > 0:\n        n = n // 10\n        k += 1\n    return k//2\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('68')\n    3\n    \"\"\"\n    n = int(stdin)\n    k = 0\n    while n >= 0:\n        k += 1\n        if n % 10 == 0:\n            n /= 10\n            k += 1\n        else:\n            break\n    return k\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while n > 0:\n        if n % 10!= 0:\n            k += 1\n        n = n // 10\n    return k\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    candies = int(stdin)\n    def half_eat(candies):\n        \"\"\"\n        Vasya eats first\n        :param candies:\n        :return:\n        \"\"\"\n        # 2 3 5 7 11 18 26 33\n        cnt = 0\n        while candies > 0:\n            candies -= 3\n            cnt += 1\n            if candies == 0:\n                return cnt\n            candies -= 7\n            cnt += 1\n            if candies == 0:\n                return cnt\n            candies -= 11\n            cnt += 1\n            if candies == 0:\n                return cnt\n            candies -= 18\n            cnt += 1\n            if candies == 0:\n                return cnt\n            candies -= 26\n            cnt += 1\n            if candies == 0:\n                return cnt\n            candies -= 33\n            cnt += 1\n            if candies == 0:\n                return cnt\n            candies -= 41\n            cnt += 1\n            if candies == 0:\n                return cnt\n            candies -= 58\n            cnt += 1\n            if candies == 0:\n                return cnt\n            candies -= 59\n            cnt += 1\n            if candies == 0:\n                return cnt\n\n\n    return half_eat(candies)"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = n // 2 if n % 2 == 0 else n // 2 + 1\n    ans = 0\n    while n > 0:\n        ans += n % 10\n        n //= 10\n    return ans\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while n > k * 10:\n        n -= k\n        k += 1\n    return k"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    k = n // 2\n    while n % k!= 0:\n        k -= 1\n    print(k)\n    return\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if the number of links between every two adjacent pearls is equal, otherwise returns 'NO'\"\"\"\n    necklace = list(stdin)\n    linked_pearls = []\n\n    # Find linked pearls\n    for index in range(len(necklace) - 1):\n        if necklace[index] == 'o' and necklace[index + 1] == 'o':\n            linked_pearls.append(index)\n\n    # Find links\n    links = []\n    for index in range(len(necklace) - 1):\n        if necklace[index] == '-' and necklace[index + 1] == '-':\n            links.append(index)\n\n    # Check if links and pearls are joined\n    if len(linked_pearls)!= len(links):\n        return 'NO'\n\n    # Check if any linked pearl comes between a link\n    for linked_pearl in linked_pearls:\n        for link in links:\n            if linked_pearl < link and linked_pearl + 1 > link:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    return \"YES\" if len(stdin) == len(set(stdin)) else \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(\"YES\" if stdin.count(\"o\") == len(stdin) - stdin.count(\"-\") + stdin.count(\"o\") else \"NO\")\n    return \"\"\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    necklace = stdin\n    c_len = len(necklace)\n    if c_len < 3:\n        return \"NO\"\n\n    if c_len == 3:\n        if necklace[0] == 'o':\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if c_len > 3:\n        for i in range(1, c_len - 2):\n            if necklace[i - 1]!= necklace[i]:\n                if necklace[i] == 'o':\n                    necklace = necklace[:i] + '-' + necklace[i:]\n                else:\n                    necklace = necklace[:i] + 'o' + necklace[i:]\n\n                c_len = len(necklace)\n                if c_len > 3:\n                    if necklace[0] == 'o':\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n\n    if c_len == 3:\n        if necklace[0] == 'o':\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution('-o---o-o'))"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('-o-o--')\n    'YES'\n    >>> solution('-o---')\n    'YES'\n    >>> solution('ooo')\n    'YES'\n    >>> solution('-o-oo')\n    'NO'\n    \"\"\"\n    necklace = stdin\n    link_count = 0\n    necklace = necklace.replace('-','').replace('o','')\n    for elem in list(map(str.strip, necklace.split(' '))):\n        if elem =='':\n            link_count = 0\n        else:\n            link_count += 1\n        if link_count % 2 == 0:\n            continue\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pearls = stdin.count('o')\n    ans = 'NO'\n    \n    if pearlCount == 0:\n        return ans\n    \n    links = 0\n    i = 0\n    \n    while i < len(stdin):\n        if stdin[i] == 'o':\n            pearls -= 1\n            if pearlCount == 0:\n                ans = 'YES'\n                break\n            \n            i += 1\n            while i < len(stdin) and stdin[i] == '-':\n                links += 1\n                i += 1\n            if pearlCount == links:\n                ans = 'YES'\n                break\n        else:\n            i += 1\n            while i < len(stdin) and stdin[i] == '-':\n                links += 1\n                i += 1\n    return ans\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(stdin)\n    input_list.pop()\n    prev = input_list[0]\n    count = 1\n    for i in range(1, len(input_list)):\n        if input_list[i] == prev:\n            count += 1\n        else:\n            prev = input_list[i]\n            count = 1\n        if count > len(input_list) // 2:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the number of links between adjacent pearls is equal, otherwise return 'NO'.\"\"\"\n    neighbours = [stdin[0]]\n    pearls = 0\n    for s in stdin[1:]:\n        if s == '-':\n            neighbours.append(s)\n        elif s == 'o':\n            pearls += 1\n            neighbours.append(s)\n    if neighbours.count('o') % len(neighbours) == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    print(m - (n-k) // 2 + (n-k) % 2)"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, w, c = stdin.split()\n    return str(int((int(c) // int(h)) + (int(c) % int(h))))\n\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    hobbit = [0] * 100001\n    pillows = [0] * 100001\n    n, m, k = map(int, stdin.split(\" \"))\n    for i in range(1, k + 1):\n        hobbit[i] = 1\n        pillows[i] = 1\n        for j in range(i, k + 1, i):\n            pillows[j] += 1\n    hobbit[k] = 1\n    print(pillows)\n    print(hobbit)\n    return 0\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return (m - n + k - 1) // k + 1"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    return max([sum([1 for i in range(j, m + 1) if i % k == 0]) for j in range(1, n + 1)])\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return n - k + min(m - k, k)\n\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return max(0, min(k - 1, n - m + 1))\n\n\"\"\""
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    c = 0\n    s = []\n    s.append(sum(a[:m]))\n    for i in range(1, len(a) - m + 1):\n        s.append(s[i-1] - k)\n    c = s[len(a) - m]\n    for i in range(len(a) - m - 1, 0, -1):\n        s[i] = s[i-1]\n        if i % m == 0:\n            s[i] -= k\n    c = max(c, max(s))\n    return c\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'Hello, world!'"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n    "
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = []\n    maxi = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if i!= j:\n                res.append(sum(a[i:j+1]) - k * math.ceil(j - i + 1 / m))\n    print(max(res))"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    max_cost = 0\n    for i in range(n - m + 1):\n        cost = sum(a[i:i + m]) - k * math.ceil(m / m)\n        max_cost = max(max_cost, cost)\n    print(max_cost)\n    return \"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string solution to this problem.\"\"\"\n    return str(solve(stdin))\n\n\ndef"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a solution for this problem.\n    \"\"\"\n    import math\n    \n    n, m, k = [int(x) for x in stdin.split(\" \")]\n    arr = [int(x) for x in stdin.split(\" \")]\n    \n    subarray_max = [0] * n\n    max_cost = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                subarray_max[i] = sum(arr[i:j+1])\n            else:\n                subarray_max[i] = sum(arr[i:j+1]) - math.ceil(j - i + 1 / m) * k\n            if subarray_max[i] > max_cost:\n                max_cost = subarray_max[i]\n    return max_cost\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if n < m:\n        n, m = m, n\n    return''.join(map(str, (n - m, n - m + 1, n, n + 1)))\nprint(solution(input()))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    import math\n    l = math.gcd(n, m)\n    m, n = m // l, n // l\n    print(*sorted([(i, j) for i, j in product(range(n), range(m)) if (i + j) % 2 == 0], key=lambda x: -abs(x[0] - x[1])), sep='\\n')"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    best_length = 0\n    best_polyline = []\n    for x1 in range(n):\n        for y1 in range(m):\n            if best_length < 4:\n                for x2 in range(x1 + 1, n):\n                    if x1 == x2:\n                        continue\n                    for y2 in range(y1 + 1, m):\n                        if y1 == y2:\n                            continue\n                        length = grid_length(x1, y1, x2, y2)\n                        if best_length < length:\n                            best_length = length\n                            best_polyline = [x1, y1, x2, y2]\n            else:\n                break\n    return''.join(map(str, best_polyline))\n\ndef"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # write your code in Python 3.6\n    return \"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0:\n        if m == 0:\n            return \"0 0\" * 4\n        else:\n            return \"0 0 0 0\"\n    if m == 0:\n        return \"0 1 0 1 0\"\n    mn = min(n, m)\n    mx = max(n, m)\n    idx = mn // 2\n    ans = []\n    for i in range(4):\n        ans.append(str(idx))\n        idx += mx // (i + 1)\n    return \" \".join(ans)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    n, m = min(n, m), max(n, m)\n    if n <= 0 or m <= 0:\n        return ''\n    if n == 1 or m == 1:\n        return ''\n    return''.join(map(str, (0, 0, n - 1, n - 1)))\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string_n = stdin\n    num_n = int(string_n[0])\n    for i in range(1, len(string_n)):\n        num_n = num_n * 10 + int(string_n[i])\n    substring_n = string_n[1:]\n    result_list = []\n    while num_n > 0:\n        result_list.append(num_n % 10)\n        num_n = num_n // 10\n    start_index = 0\n    for index, el in enumerate(result_list):\n        if el!= 0:\n            start_index = index\n            break\n    result_substring_n = substring_n[start_index:]\n    return ''.join([str(el) for el in result_list]) + result_substring_n\n\n\nprint(solution(\"003512\"))\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    k = int(n[0:len(n) - len(n[len(n) - 1::-1])])\n    n = n[len(n) - len(n[len(n) - 1::-1]) :]\n    return str(k) + n\nprint(solution(input()))\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(solve(stdin))\n\ndef"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = list(n)\n    k = int(stdin[:stdin.index('0')])\n    n[:k] = n[:k - 1::-1]\n    n = ''.join(n)\n    n = int(n)\n    return str(n)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest possible initial integer n that can be created\n    from the string that Kate wrote.\n    \"\"\"\n    n = stdin[:stdin.index('0')]\n    k = int(stdin[stdin.index('0'):])\n    return f\"{n * 10**k}\"\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[::-1]\n    n = len(s)\n    k = int(s[:n - int(s[n - 1])])\n    print(k)\n    return ''\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin[:1]\n    substring = stdin[1:]\n    if digits == '0':\n        digits = '1'\n    length = len(substring)\n    if length < 2:\n        return digits + substring\n    return solution(substring)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = stdin[0]\n    k = int(stdin[1])\n    ans = ''\n    if k == 1:\n        if s[0] == '0':\n            ans = '0'\n        else:\n            ans = s\n    else:\n        i = 0\n        while k > 0:\n            if i > len(s):\n                break\n            if s[i]!= '0':\n                k -= 1\n            i += 1\n        ans = s[:i] + s[i:]\n    return ans"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 1000000:\n        return \"large\"\n\n    n = stdin[::-1]\n    k = stdin[::-1].count('0')\n\n    for i in range(0, len(n) - k):\n        if n[i:i + k] == n[i:i + k][::-1]:\n            return n[i:i + k]\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max, *lst = map(int, stdin.split('\\n')[0].split(' '))\n    lst = sorted(set(lst))\n    print(lst)\n    if m == 1 and max == min:\n        return 'Correct'\n    if n == m:\n        return 'Correct'\n    if min not in lst:\n        return 'Incorrect'\n    if max not in lst:\n        return 'Incorrect'\n    return 'Correct'"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, m, min_, max_ = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    print('Correct' if min_ <= t[0] and t[0] <= max_ and m <= len(t) else 'Incorrect')\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    if len(t) < m:\n        return 'Incorrect'\n    t.sort()\n    if min < t[0] or max > t[-1]:\n        return 'Incorrect'\n    return 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here\n    # Solution ends here\n    return ''\n\n\ndef"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    for i in range(len(lst)):\n        if lst[i] == max or lst[i] == min:\n            lst.remove(lst[i])\n    if min in lst or max in lst:\n        return 'Incorrect'\n    else:\n        return 'Correct'\n\n\ndef"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split('\\n')[0].split(' '))\n    T = sorted(map(int, stdin.split('\\n')[1].split(' ')))\n    if n == m or min < T[0] or max > T[-1]:\n        return 'Incorrect'\n    T += range(T[-1] + 1, max + 1)\n    return 'Correct' if min in T and max in T else 'Incorrect'"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split('\\n')[0].split())\n    temps = list(map(int, stdin.split('\\n')[1].split()))\n\n    for i in range(n - m + 1):\n        if min == max:\n            return 'Correct'\n\n        if min == temps[i] and max == temps[i + m - 1]:\n            continue\n\n        if min > temps[i] or max < temps[i + m - 1]:\n            return 'Incorrect'\n\n    return 'Correct'\n    \"\"\"\n    n, m, min, max = map(int, stdin.split('\\n')[0].split())\n    temps = list(map(int, stdin.split('\\n')[1].split()))\n\n    temps_sorted = sorted(temps)\n    temps_max = temps_sorted[-1]\n    temps_min = temps_sorted[0]\n    temps_sorted.append(min)\n    temps_sorted.insert(0, max)\n\n    for i in range(len(temps_sorted) - m + 1):\n        if min == max:\n            return 'Correct'\n\n        if min == temps_sorted[i] and max == temps_sorted[i + m - 1]:\n            continue\n\n        if min > temps_sorted[i] or max < temps_sorted[i + m - 1]:\n            return 'Incorrect'\n\n    return 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split('\\n')[0].split())\n    temps = list(map(int, stdin.split('\\n')[1].split()))\n    result = 'Correct' if len(set(temps)) >= n else 'Incorrect'\n    return result"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    temperatures = list(map(int, stdin.split()))\n    if n - m < min:\n        return 'Incorrect'\n    elif n - m > max:\n        return 'Incorrect'\n    else:\n        return 'Correct'\n\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 0\n    result = []\n    for i in range(1, m + 1):\n        if str(i).endswith('0' * m):\n            count += 1\n            result.append(i)\n    print(count)\n    print(*result)\n    return ''\n\"\"\""
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes the input string and counts the trailing zeroes in the factorials of the numbers from 1 to n-1.\n    '''\n    n = int(stdin)\n    f = 1\n    trailing_zeroes = 0\n    factorials = []\n    while n > 0:\n        f *= n\n        n -= 1\n        trailing_zeroes += f\n        factorials.append(trailing_zeroes)\n    trailing_zeroes_per_digit = len(str(factorials[-1]))\n    n_trailing_zeroes = (trailing_zeroes_per_digit * len(factorials)) // 5\n    print(trailing_zeroes_per_digit, n_trailing_zeroes)\n    return \" \".join([str(n) for n in factorials[:n_trailing_zeroes]])\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin\n    n = 0\n    k = 0\n    while True:\n        n += 1\n        f = 1\n        for i in range(1, n + 1):\n            f *= i\n        if f % 10 == int(m):\n            k += 1\n        if k == 4:\n            print(n)\n            for i in range(n):\n                print(i + 1)\n            return ''\n    return ''\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    k = 0\n    for i in range(1, 1001):\n        if str(i).endswith('0' * m):\n            k += 1\n    print(k)\n    return str(k) + '\\n' +''.join(str(i) for i in range(k, k + k))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    i = 0\n    while True:\n        i += 1\n        if str(i).endswith('0' * n):\n            break\n    return str(i)"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    result = [i for i in range(1, m+1) if str(math.factorial(i)).endswith('0'*m)]\n    return str(len(result)) + '\\n' + '\\n'.join(str(x) for x in result)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    n = 0\n    while m > 0:\n        n += 1\n        m //= 5\n    return n\n\nprint(solution(input()))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 0\n    for i in range(1,1000001):\n        if len(str(i**5))==5:\n            if str(i**5)[-m:]=='0'*m:\n                count+=1\n    return str(count)+'\\n'+' '.join(map(str,range(1,count+1)))"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    factorial = 1\n    zeros = 0\n    # TODO: your code here\n    for i in range(1, int(stdin)+1):\n        factorial *= i\n        if factorial[len(factorial)-1] == '0':\n            zeros += 1\n    return str(zeros)\n\"\"\"\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    n = 1\n    while 10 ** n <= m:\n        m -= 10 ** n\n        n += 1\n    n -= 1\n    return str(n) + \" \" + str(int((m + n) / n)) + \" \" + str(int((m + n) % n))\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return stdin\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict, deque\n\n    class Node:\n        def __init__(self, key, val):\n            self.key = key\n            self.val = val\n            self.connected = set()\n            self.prev = None\n            self.max_val = float(\"-inf\")\n\n        def __str__(self):\n            return f\"Node: {self.key} with {len(self.connected)} connected\"\n\n    def get_connections(graph, node):\n        return graph[node.key]\n\n    def get_max_dist_node(graph):\n        max_dist = 0\n        max_node = None\n        for node in graph.values():\n            if node.max_val > max_dist:\n                max_dist = node.max_val\n                max_node = node\n        return max_node\n\n    def get_min_dist_node(graph, max_node):\n        min_dist = max_node.max_val\n        min_node = None\n        for node in graph.values():\n            if node.key in max_node.connected and node.max_val < min_dist:\n                min_dist = node.max_val\n                min_node = node\n        return min_node\n\n    def dfs(graph, node):\n        if node is None:\n            return\n        visited.add(node)\n        for n in get_connections(graph, node):\n            if n in visited:\n                continue\n            n.max_val = max(node.max_val, n.val)\n            dfs(graph, n)\n\n    def bfs(graph, node):\n        visited.add(node)\n        queue = deque()\n        queue.append(node)\n        while queue:\n            cur = queue.popleft()\n            for n in get_connections(graph, cur):\n                if n in visited:\n                    continue\n                n.max_val = max(cur.max_val, n.val)\n                n.prev = cur\n                queue.append(n)\n                visited.add(n)\n\n    def make_graph(stdin):\n        graph = defaultdict(Node)\n        for line in stdin:\n            u, v, w = line.split()\n            u, v = int(u), int(v)\n            w = int(w)\n            if graph[u].max_val < w:\n                graph[u].max_val = w\n            if graph[v].max_val < w:\n                graph[v].max_val = w\n            graph[u].connected.add(graph[v])\n            graph[v].connected.add(graph[u])\n        return graph\n\n    def solve(graph):\n        for node in graph.values():\n            if not node.connected:\n                return node.key, node.val\n        max_node = get_max_dist_node(graph)\n        min_node = get_min_dist_node(graph, max_node)\n        max_node.max_val = float(\"-inf\")\n        return min_node.key, min_node.val\n\n    n, m, k = [int(num) for num in stdin.split()]\n    graph = make_graph(stdin.strip().split(\"\\n\")[1:])\n    visited = set()\n    dfs(graph, get_max_dist_node(graph))\n    print(solve(graph))\n\n    return \"\"\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n + m) time, O(m) space\n    \"\"\"\n    return [int(stdin.split(\"\\n\")[0].split()[i]) for i in range(1, len(stdin.split(\"\\n\")[0].split()) - 1)]\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the distance between the farthest special vertex and the other special vertices.\n\n    Args:\n        stdin (str): Input text\n\n    Returns:\n        str: Solution\n    \"\"\"\n\n    # init data\n    n, m, k = [int(x) for x in stdin.split()]\n    special_nodes = [int(x) for x in stdin.split()[-k:]]\n    edges = [tuple([int(x) for x in stdin.split()[i:i + 3]]) for i in range(m)]\n    graph = {n: set() for n in range(1, n + 1)}\n    for u, v, w in edges:\n        graph[u].add((v, w))\n        graph[v].add((u, w))\n\n    # init distance\n    dist = [-1] * (n + 1)\n    for node in special_nodes:\n        dist[node] = 0\n\n    # init pred\n    pred = [-1] * (n + 1)\n\n    # BFS\n    queue = [special_nodes]\n    while queue:\n        node = queue.pop(0)\n        for neighbor in graph[node]:\n            neighbor_node = neighbor[0]\n            neighbor_weight = neighbor[1]\n\n            if dist[neighbor_node] == -1:\n                queue.append(neighbor_node)\n                dist[neighbor_node] = dist[node] + neighbor_weight\n                pred[neighbor_node] = node\n    # print(dist)\n\n    # find max and pred\n    max_dist = max(dist)\n    max_pred = pred[dist.index(max_dist)]\n    # print(max_dist, max_pred)\n    max_dist_dist = dist.index(max_dist)\n    return''.join(map(str, dist))"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the farthest special vertex from x1, x2,..., xk.\"\"\"\n\n    # Get input.\n    n, m, k = [int(i) for i in stdin.splitlines()[0].split()]\n    special = [int(i) for i in stdin.splitlines()[1].split()]\n    edges = []\n    for line in stdin.splitlines()[2:]:\n        edges.append([int(i) for i in line.split()])\n\n    # The input was verified as correct.\n    graph = nx.Graph()\n    graph.add_nodes_from([i + 1 for i in range(n)])\n    for u, v, w in edges:\n        graph.add_edge(u, v, weight=w)\n    print(nx.dijkstra_path_length(graph, 1, special[0]))\n\n    # Calculate the answer.\n    for v in special[1:]:\n        max_distance = 0\n        for s in special:\n            distance = nx.dijkstra_path_length(graph, s, v)\n            if distance > max_distance:\n                max_distance = distance\n                farthest = v\n        print(farthest, max_distance)\n\n    return ''\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    from math import inf\n    import heapq\n    # from utils.misc import timer\n    # from.solution import source\n    lines = stdin.strip().split('\\n')\n    n, m, k = [int(i) for i in lines[0].split()]\n    special = [int(i) for i in lines[1].split()]\n    g = defaultdict(list)\n    for i in range(m):\n        u, v, w = [int(j) for j in lines[i+2].split()]\n        g[u].append((v, w))\n        g[v].append((u, w))\n    def dijkstra(g: dict, start: int, end: int, special: list):\n        q = []\n        d = {i: inf for i in g.keys()}\n        d[start] = 0\n        heapq.heappush(q, (0, start))\n        while len(q):\n            l = heapq.heappop(q)\n            distance, node = l[0], l[1]\n            if d[node] < distance:\n                continue\n            for nei, d_nei in g[node]:\n                new_distance = distance + d_nei\n                if new_distance < d[nei]:\n                    d[nei] = new_distance\n                    heapq.heappush(q, (new_distance, nei))\n        return d[end]\n    dis = [dijkstra(g, special[i], special[j], special) for i in range(k) for j in range(i+1, k)]\n    return''.join([str(i) for i in dis])\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\nprint(solution(stdin))\n\n\"\"\"\nInput\n2 3 2\n2 1\n1 2 3\n1 2 2\n2 2 1\n\nOutput\n2 2 \n\nInput\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\nOutput\n3 3 3 \n\n\"\"\"\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    pass"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = (n % 2)\n    return ans\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def swap(n: int, x: int):\n        nums = ['left','middle', 'right']\n        i = 0\n        while i < n % 3:\n            x = nums[i] if x == nums[(i + 2) % 3] else nums[(i + 1) % 3]\n            i += 1\n        return x\n\n    n = int(stdin.readline())\n    x = int(stdin.readline())\n    print(swap(n, x))\n\ndef"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the initial position of the ball.\"\"\"\n    n = int(stdin.split('\\n')[0])\n    x = int(stdin.split('\\n')[1])\n    for i in range(n):\n        if i % 2 == 0:\n            x = (x + 1) % 3\n        else:\n            x = (x + 2) % 3\n    return x\nprint(solution(stdin))\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    move = int(stdin)\n    if move % 2:\n        shell = 2\n    else:\n        shell = 1\n    return str(shell)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = [int(num) for num in stdin.strip().split()]\n    n = input[0]\n    x = input[1]\n    if x == 1:\n        x = 0\n    elif x == 2:\n        x = 1\n    elif x == 3:\n        x = 2\n    else:\n        return 'not valid'\n\n    if n == 1:\n        return x\n    if n % 2 == 0:\n        return (x + 1) % 3\n    return (x + 2) % 3\n\nprint(solution(input()))\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    shells = [0, 1, 2]\n    if n % 2 == 1:\n        shells[x] = 1\n    for i in range(0, n, 2):\n        shells[2], shells[1] = shells[1], shells[2]\n        shells[0], shells[2] = shells[2], shells[0]\n    return str(shells.index(x))\n\nprint(solution(input()))\n\"\"\"\n\nimport unittest\nimport math\n\n\ndef"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n2')\n    1\n    >>> solution('1\\n1')\n    0\n    \"\"\"\n    movements = int(stdin.split('\\n')[0])\n    shell = int(stdin.split('\\n')[1])\n    return '0' if shell == 0 or shell == 1 or shell == 2 else '1'\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n    \nimport sys\nlines = sys.stdin.readlines()\nprint(lines)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    if x % 2 == 0:\n        return str(n - x // 2 - 1)\n    else:\n        return str(n - x // 2)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    c = stdin.count('\\n')\n    x = stdin.split('\\n')[1]\n    n = stdin.split('\\n')[0]\n    if n == \"1\":\n        print(0)\n    elif n == \"2\":\n        print(2)\n    elif n == \"3\":\n        print(1)\n    elif n == \"4\":\n        print(0)\n    else:\n        print(0)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    x = []\n    y = []\n    for i in range(len(a)):\n        x.append(a[2 * i])\n        y.append(a[2 * i + 1])\n    s = set()\n    for i in range(len(x)):\n        for j in range(len(x)):\n            s.add(x[i] + x[j])\n    for i in range(len(y)):\n        for j in range(len(y)):\n            s.add(y[i] + y[j])\n    return 'YES' if len(s) == 4 * (max(x) + max(y)) else 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    n = int(stdin.readline())\n    l = []\n    for _ in range(n):\n        a = list(map(int, stdin.readline().split()))\n        l.append(a)\n    l.sort(key=lambda x: x[0])\n    for i in range(1, n):\n        if l[i][0] < l[i - 1][2]:\n            return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3')\n    'YES'\n    >>> solution('4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5')\n    'NO'\n    \"\"\"\n    # Get the dimensions of the rectangles.\n    n = int(stdin)\n    rectangles = []\n    for _ in range(n):\n        rectangles.append(list(map(int, stdin.split())))\n\n    # Get the number of rectangles.\n    rectangle_count = len(rectangles)\n    if rectangle_count!= n:\n        return \"WRONG INPUT\"\n\n    # Create an empty rectangle.\n    rectangle = [[], [], [], []]\n\n    # Determine the coordinates of the corners of the rectangles.\n    for i in range(rectangle_count):\n        # Determine the coordinates of the top left corner of the rectangle.\n        rectangle[0].append(min(rectangles[i][0], rectangles[i][2]))\n        rectangle[1].append(max(rectangles[i][0], rectangles[i][2]))\n\n        # Determine the coordinates of the top right corner of the rectangle.\n        rectangle[2].append(max(rectangles[i][0], rectangles[i][2]))\n        rectangle[3].append(min(rectangles[i][0], rectangles[i][2]))\n\n    # Determine the coordinates of the four points.\n    points = [rectangle[0], rectangle[1], rectangle[2], rectangle[3]]\n\n    # Check if the points form a square.\n    return \"YES\" if len(set(points[0]) & set(points[1])) == 4 and len(set(points[0]) & set(points[2])) == 4 and len(set(points[0]) & set(points[3])) == 4 and len(set(points[1]) & set(points[2])) == 4 and len(set(points[1]) & set(points[3])) == 4 and len(set(points[2]) & set(points[3])) == 4 else \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find if all points are inside the square.\n\n    Keyword arguments:\n    stdin -- input text\n\n    Returns:\n    str -- answer\n\n    \"\"\"\n    n = int(stdin.readline())\n    rectangles = [list(map(int, stdin.readline().split())) for i in range(n)]\n    x_min, x_max = min(rectangles, key=lambda rect: rect[0])[0], max(rectangles, key=lambda rect: rect[0])[0]\n    y_min, y_max = min(rectangles, key=lambda rect: rect[1])[1], max(rectangles, key=lambda rect: rect[1])[1]\n    x_min, x_max = min(x_min, 0), max(x_max, 0)\n    y_min, y_max = min(y_min, 0), max(y_max, 0)\n    points = [\n        (x, y)\n        for x in range(x_min, x_max + 1)\n        for y in range(y_min, y_max + 1)\n    ]\n    if len(points)!= len(set(points)):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    stdin = stdin.split('\\n')[1:]\n    n = int(stdin[0])\n    \n    box = []\n    for i in stdin[1:]:\n        i = list(map(int, i.split(' ')))\n        box.append(i)\n\n    def left_up(box):\n        x = 0\n        y = 0\n        for i in box:\n            x = max(i[0], x)\n            y = max(i[1], y)\n        return x, y\n\n    def right_down(box):\n        x = 0\n        y = 0\n        for i in box:\n            x = min(i[2], x)\n            y = min(i[3], y)\n        return x, y\n\n    left_up = left_up(box)\n    right_down = right_down(box)\n\n    if (right_down[0] - left_up[0] == right_down[1] - left_up[1]) & (len(box) == n):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    \"\"\"\n    >>> solution(\"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\")\n    'YES'\n    >>> solution(\"4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\")\n    'NO'\n    \"\"\"\n\n    def isSquare(r1: List[int], r2: List[int]) -> bool:\n        x1, y1 = r1[0], r1[1]\n        x2, y2 = r1[2], r1[3]\n        x3, y3 = r2[0], r2[1]\n        x4, y4 = r2[2], r2[3]\n        return max(x1, x2, x3, x4) <= min(x1, x2, x3, x4) and max(y1, y2, y3, y4) <= min(y1, y2, y3, y4)\n\n    n = int(stdin.readline())\n    rects = []\n    for _ in range(n):\n        rects.append(list(map(int, stdin.readline().split())))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if isSquare(rects[i], rects[j]):\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n\ndef"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, stdin.readline().split())\n        ans.append([x1, y1, x2, y2])\n\n    # sort by x\n    ans.sort(key=lambda x: x[0])\n    x = ans[0][0]\n    ans.sort(key=lambda x: x[2])\n\n    is_square = True\n    for i in range(1, n):\n        if ans[i][0] == x or ans[i][2] < x or ans[i][1] > ans[i][3]:\n            is_square = False\n            break\n\n    return \"YES\" if is_square else \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x:\n        rect = [tuple(map(int, input().split())) for _ in range(x)]\n        rect.sort()\n        x -= 1\n        if rect[0][0] == rect[0][1] or rect[1][0] == rect[1][1] or rect[2][0] == rect[2][1] or rect[3][0] == rect[3][1]:\n            print('NO')\n            break\n        elif rect[0][0] == rect[1][0]:\n            a, b = rect[0][0], rect[0][1]\n            c, d = rect[1][0], rect[1][1]\n        elif rect[0][0] == rect[1][1]:\n            a, b = rect[0][0], rect[0][1]\n            c, d = rect[1][0], rect[1][1]\n        elif rect[0][1] == rect[1][0]:\n            a, b = rect[0][0], rect[0][1]\n            c, d = rect[1][0], rect[1][1]\n        elif rect[0][1] == rect[1][1]:\n            a, b = rect[0][0], rect[0][1]\n            c, d = rect[1][0], rect[1][1]\n        elif rect[0][0] == rect[2][0]:\n            a, b = rect[0][0], rect[0][1]\n            c, d = rect[2][0], rect[2][1]\n        elif rect[0][0] == rect[2][1]:\n            a, b = rect[0][0], rect[0][1]\n            c, d = rect[2][0], rect[2][1]\n        elif rect[0][1] == rect[2][0]:\n            a, b = rect[0][0], rect[0][1]\n            c, d = rect[2][0], rect[2][1]\n        elif rect[0][1] == rect[2][1]:\n            a, b = rect[0][0], rect[0][1]\n            c, d = rect[2][0], rect[2][1]\n        elif rect[1][0] == rect[3][0]:\n            a, b = rect[1][0], rect[1][1]\n            c, d = rect[3][0], rect[3][1]\n        elif rect[1][0] == rect[3][1]:\n            a, b = rect[1][0], rect[1][1]\n            c, d = rect[3][0], rect[3][1]\n        elif rect[1][1] == rect[3][0]:\n            a, b = rect[1][0], rect[1][1]\n            c, d = rect[3][0], rect[3][1]\n        elif rect[1][1] == rect[3][1]:\n            a, b = rect[1][0], rect[1][1]\n            c, d = rect[3][0], rect[3][1]\n        elif rect[2][0] == rect[3][0]:\n            a, b = rect[2][0], rect[2][1]\n            c, d = rect[3][0], rect[3][1]\n        elif rect[2][0] == rect[3][1]:\n            a, b = rect[2][0], rect[2][1]\n            c, d = rect[3][0], rect[3][1]\n        elif rect[2][1] == rect[3][0]:\n            a, b = rect[2][0], rect[2][1]\n            c, d = rect[3][0], rect[3][1]\n        elif rect[2][1] == rect[3][1]:\n            a, b = rect[2][0], rect[2][1]\n            c, d = rect[3][0], rect[3][1]\n        if a == c and b == d:\n            print('YES')\n        else:\n            print('NO')\n        return ''\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    nums = [i for i in range(n)]\n    answer = 0\n    for i in range(n):\n        if sum(nums[i:]) >= s:\n            answer += 1\n    return str(answer)"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n        if i > 9 and i - sum([int(c) for c in str(i)]) >= s:\n            total -= 1\n    return total"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    num, sum = list(map(int, stdin.split(' ')))\n    # a = list(map(int, stdin.split(' ')))\n    \n    # num = a[0]\n    # sum = a[1]\n    \n    s = sum - num\n    # print(s)\n    \n    \n    if s == 0:\n        print(1)\n    elif s < 0:\n        print(0)\n    else:\n        print(int(num / (10 ** s)))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    return str(sum(i for i in range(n) if abs(i - sum(map(int, str(i)))) < s))"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''12 1''')\n    3\n    >>> solution('''25 20''')\n    0\n    >>> solution('''10 9''')\n    1\n    \"\"\"\n    n, s = [int(x) for x in stdin.split()]\n    l = [int(x) for x in reversed(str(n))]\n    total = sum(l)\n    return sum(l[i] > s for i in range(len(l)))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0])-int(stdin[1]))"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(' ')\n    n = int(n)\n    s = int(s)\n    nums = [i for i in range(n+1)]\n    count = 0\n    for i in nums:\n        i_sum = sum([int(j) for j in str(i)])\n        if i_sum <= n:\n            count += 1\n    print(count)\n\nn, s = [int(i) for i in input().split(' ')]\nnums = [i for i in range(n+1)]\ncount = 0\nfor i in nums:\n    i_sum = sum([int(j) for j in str(i)])\n    if i_sum <= n:\n        count += 1\nprint(count)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    min_number = 10 ** (n - 1)\n    max_number = 10 ** n\n    count = 0\n    for i in range(min_number, max_number + 1):\n        if not i % 10 == 0:\n            difference = i - sum(int(digit) for digit in str(i))\n            if difference > s:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(c) for c in stdin.split(' ')]\n    print(sum([c for c in range(n)]) - n)\n    return str(sum([c for c in range(n)]) - n)\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_lines = int(stdin.split()[0])\n    num_pts = num_lines\n    # print(num_lines)\n    num_points = 0\n    points = []\n    for i in range(num_lines):\n        x, y = [int(x) for x in stdin.split()[2*i+1].split(' ')]\n        points.append((x,y))\n        num_points += 1\n    print(num_points)\n    print(points)\n\n    todo = list(range(num_points))\n    print(todo)\n    while len(todo) > 0:\n        j = todo.pop()\n        # print(j)\n        print(points)\n        print(todo)\n        # check if this point can be used in a line\n        for i in range(num_points):\n            # print(i)\n            # print(j)\n            if j!= i:\n                # check if this point can be used for the line\n                # print(points[j], points[i])\n                if points[j][0] == points[i][0] and points[j][1] == points[i][1]:\n                    # print(\"same point\")\n                    todo.append(j)\n                    todo.append(i)\n                    break\n                if points[j][0] == points[i][0]:\n                    # print(\"horizontally\")\n                    todo.append(j)\n                    todo.append(i)\n                    break\n                if points[j][1] == points[i][1]:\n                    # print(\"vertically\")\n                    todo.append(j)\n                    todo.append(i)\n                    break\n    print(todo)\n    return \"YES\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport sys\nimport math\n\npoints = []\nlines = int(sys.stdin.readline())\n\nfor _ in range(lines):\n    x, y = map(int, sys.stdin.readline().split())\n    points.append((x, y))\n\npoints = sorted(points)\n\nmin_y = math.inf\nmax_y = 0\nmin_x = math.inf\nmax_x = 0\n\nfor x, y in points:\n    if x < min_x:\n        min_x = x\n    elif x > max_x:\n        max_x = x\n\n    if y < min_y:\n        min_y = y\n    elif y > max_y:\n        max_y = y\n\nlines_count = 0\nmax_lines = 0\n\nfor x in range(min_x, max_x + 1):\n    y_l = None\n    for y in range(min_y, max_y + 1):\n        for point in points:\n            if point[0] == x and point[1] == y:\n                if y_l is None:\n                    y_l = y\n                else:\n                    y_l = None\n                    break\n        if y_l is None:\n            break\n    if y_l is not None:\n        lines_count += 1\n        max_lines = max(lines_count, max_lines)"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if input() else \"NO\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nreturn\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str()"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    return \"\""
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    points = []\n    for line in lines[1:]:\n        points.append(tuple([int(i) for i in line.split(' ')]))\n\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                continue\n            else:\n                x = (points[j][1] - points[i][1]) / (points[j][0] - points[i][0])\n                y = points[i][1] - points[i][0] * x\n                if x < 0:\n                    x = -x\n                if y < 0:\n                    y = -y\n\n                for k in range(len(points)):\n                    if k == i or k == j:\n                        continue\n                    if x * points[k][0] + y == points[k][1]:\n                        break\n                else:\n                    return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split('\\n')[0].split())\n    return f'{(2*k + 1) ** t}'\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(x) for x in stdin.split()]\n    return str(k * t * (2 * k + 1) ** 2 * (a + b) - (k * t + 1) * k * (k + 1) // 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return str(bin(sum(map(lambda n: sum(map(lambda m: sum(map(lambda l: 1 if (m + l) % k == 0 else 0, range(n + 1))), range(2 * k + 1))), range(t)))).count('1'))\n\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K, T = map(int, stdin.split())\n    return str(sum((K + 1) * (K + 2) // 2 * (A + B) * (K - A + 1) * (K - B + 1) // 4 + (A + B) * (K - A + 1) * (K - B + 1) // 2\n                   for _ in range(T + 1)))\n\n\nprint(solution(input()))\n\n\n\n\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if k > t * (a + b) / 2:\n        print((2 * k) ** t - 1)\n    else:\n        print((2 * k) ** t - 1)\n        print((2 * k + 1) ** t - 1)"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, k, t) = [int(i) for i in stdin.split()]\n    return \"{}\".format(pow(2 * k + 1, t, 1000000007) - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return str(binomial_coefficient(2*k, t)*((a+b)**t)%1_000_000_007)\n\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(x) for x in stdin.split(' ')]\n    return solve(a, b, k, t)\n\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    m = (2 * k + 1) ** t\n    res = 0\n    for i in range(1, 2 * k + 1):\n        for j in range(1, 2 * k + 1):\n            if i - j > 0:\n                continue\n            elif a + b <= i + j:\n                continue\n            else:\n                res += 1\n    print(res % 10000000007)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split('\\n')\n    n, l, x, y = [int(val) for val in data[0].split(' ')]\n    ruler = [int(val) for val in data[1].split(' ')]\n    \n    answer = 0\n    ruler_set = set(ruler)\n    for i, val in enumerate(ruler):\n        for j, val_2 in enumerate(ruler[i:]):\n            if val == val_2 + x:\n                answer += 1\n                answer += min(j + 1, j + 1 + (len(ruler) - j - 1))\n                print(j + 1, j + 1 + (len(ruler) - j - 1))\n                ruler_set.remove(val)\n                break\n            if val_2 == val + y:\n                answer += 1\n                ruler_set.remove(val)\n                break\n            if val_2 in ruler_set:\n                ruler_set.remove(val_2)\n    return str(answer)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_case = stdin.split('\\n')\n    n, l, x, y = list(map(int, test_case[0].split()))\n    array_marks = list(map(int, test_case[1].split()))\n    \n    marks = 0\n    i = 0\n    while i < len(array_marks):\n        for j in range(i, len(array_marks)):\n            if array_marks[j] - array_marks[i] == x:\n                marks += 1\n                i = j\n                break\n            elif array_marks[j] - array_marks[i] > x:\n                marks += 1\n                i = j\n                break\n    print(marks)\n    print(array_marks[marks - 1:])\n    \n    return ''\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/trainingDXX68K-2BV/\n    '''\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    n, l, x, y = data[0], data[1], data[2], data[3]\n    data = data[4:]\n    marks = data[:n]\n    distances = data[n:]\n\n    marks.sort()\n    distances.sort()\n\n    ruler = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if marks[j] - marks[i] == distances[j] - distances[i]:\n            ruler.append((marks[j], distances[j]))\n            j += 1\n            i += 1\n        elif marks[j] - marks[i] < distances[j] - distances[i]:\n            ruler.append((marks[i], distances[i]))\n            i += 1\n        else:\n            ruler.append((marks[j], distances[j]))\n            j += 1\n\n    while i < n:\n        ruler.append((marks[i], distances[i]))\n        i += 1\n    while j < n:\n        ruler.append((marks[j], distances[j]))\n        j += 1\n    ruler.sort()\n\n    mark_num = 0\n    while x > 0 or y > 0:\n        if x > 0 and x == ruler[0][1]:\n            mark_num += 1\n            x -= 1\n            ruler.pop(0)\n        elif y > 0 and y == ruler[0][1]:\n            mark_num += 1\n            y -= 1\n            ruler.pop(0)\n        else:\n            ruler.pop(0)\n    print(mark_num)\n    for mark in ruler:\n        print(mark[0], mark[1])\n\n    return ''\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_input(input_path: str) -> list:\n        n, l, x, y = [int(i) for i in input_path.split(' ')]\n        ruler = list(map(int, input_path.split(' ')[1:]))\n        return n, l, x, y, ruler\n\n    n, l, x, y, ruler = get_input(stdin)\n\n    print(x, y)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ruler[j] - ruler[i] == x:\n                return f'{i} {j}'\n\n    return '-1'\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 250 185 230')\n    1\n    230\n    \"\"\"\n    n, l, x, y = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    marks.sort()\n    min_marks = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if marks[j] - marks[i] == x:\n                min_marks = min(min_marks, n - j)\n            if marks[j] - marks[i] == y:\n                min_marks = min(min_marks, j - i)\n    if min_marks == float('inf'):\n        return 0\n    return min_marks\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes in a string of four integers and separates them.\n    Prints the minimum number of marks that the ruler should be extended with\n    '''\n    \n    n, l, x, y = [int(s) for s in stdin.split()]\n    \n    mark_distance = [int(s) for s in stdin.split()]\n    \n    mark_distance.sort()\n    \n    result = 0\n    \n    i = 0\n    j = len(mark_distance) - 1\n    \n    while i < j:\n        if mark_distance[j] - mark_distance[i] > y:\n            j -= 1\n        elif mark_distance[j] - mark_distance[i] < x:\n            i += 1\n        else:\n            result += 1\n            i += 1\n            j -= 1\n    \n    return result\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    l = int(stdin.split(\" \")[0])\n    x = int(stdin.split(\" \")[1])\n    y = int(stdin.split(\" \")[2])\n    \n    n = len(stdin.split(\" \")) - 1\n    \n    ruler = [int(i) for i in stdin.split(\" \")[3:]]\n    \n    \n    if l >= x and l >= y:\n        return str(0) + \" \" + \"0\"\n    \n    \n    d = l // x\n    \n    ans = []\n    \n    ans.append(d * x)\n    \n    for i in range(1, n):\n        ans.append((i + 1) * d)\n    \n    if ans[-1] > l:\n        ans[-1] = l\n    \n    return str(len(ans)) + \" \" + \" \".join(str(i) for i in ans)\n\nprint(solution(\"3 250 185 230\"))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = [int(x) for x in stdin.split(' ')]\n    ruler = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    result = 0\n    for i in range(1, len(ruler)):\n        if i + 1 == len(ruler):\n            if ruler[i] - l - 1 >= y:\n                result += 1\n            elif ruler[i] - l - 1 >= x:\n                result += 2\n            else:\n                result += 3\n        else:\n            if ruler[i] - ruler[i - 1] - 1 >= y:\n                result += 1\n            elif ruler[i] - ruler[i - 1] - 1 >= x:\n                result += 2\n            else:\n                result += 3\n\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    count = int(lines[0])\n    l = int(lines[1])\n    x = int(lines[2])\n    y = int(lines[3])\n    lst = [0] + list(map(int, lines[4].split()))\n    ans = l\n    for i in range(1, count):\n        ans = min(ans, max(lst[i] - x, y - lst[i]))\n    print(ans)\n    print(*[lst[i] for i in range(1, count + 1) if lst[i] >= x and lst[i] <= y], sep=' ')"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # data = [int(el) for el in stdin.split(\"\\n\")]\n    # num_cakes = data.pop(0)\n    # cakes = list(data)\n    # cakes.sort()\n    # answer = 0\n    #\n    # # start from the largest cake\n    # for cake_index in range(num_cakes - 1, -1, -1):\n    #     for cake_index_1 in range(num_cakes - 1, cake_index - 1, -1):\n    #         cake_1 = cakes[cake_index]\n    #         cake_2 = cakes[cake_index_1]\n    #         # if cake_1 is on top of cake_2\n    #         if cake_1[0] * cake_1[1] > cake_2[0] * cake_2[1]:\n    #             # get the maximum volume\n    #             answer = max(answer, cake_1[0] * cake_1[1])\n    #\n    # # return the answer\n    # return str(round(answer, 6))\n    # # return answer"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cakes = []\n    for i in range(n):\n        r, h = map(int, stdin.readline().split())\n        cakes.append([r, h, r * h])\n    cakes.sort(key=lambda x: x[1], reverse=True)\n    total_volume = 0\n    for i in range(n):\n        cake_i = cakes[i]\n        cake_i_volume = cake_i[0] * cake_i[2]\n        total_volume += cake_i_volume\n        for j in range(i + 1, n):\n            cake_j = cakes[j]\n            cake_j_volume = cake_j[0] * cake_j[2]\n            if cake_i_volume < cake_j_volume:\n                break\n            if total_volume < cake_i_volume + cake_j_volume:\n                total_volume = cake_i_volume + cake_j_volume\n    return str(total_volume)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total_cake_size = int(stdin[0])\n    cake_size = []\n    for i in range(1, total_cake_size + 1):\n        cake_size.append(list(map(int, stdin[i].split())))\n    cake_size.sort(key=lambda x: x[0], reverse=True)\n\n    result = 0\n    for i in range(total_cake_size):\n        for j in range(i):\n            if cake_size[j][1] > cake_size[i][1]:\n                result += cake_size[j][0] * cake_size[i][1]\n                break\n    return str(result)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    print(solve(cases))\n\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from math import pi\n    n = int(stdin)\n    cakes = []\n    for _ in range(n):\n        r, h = map(int, stdin.split())\n        cakes.append((r, h))\n    cakes.sort()\n    r, h = cakes[0]\n    cur_vol = h * pi * r * r\n    for r, h in cakes[1:]:\n        cur_vol -= h * pi * r * r\n        r, h = cakes[i]\n        vol = h * pi * r * r\n        cur_vol += vol\n        r, h = cakes[i + 1]\n        vol = h * pi * r * r\n        cur_vol -= vol\n    return cur_vol\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_cakes: int = int(stdin.readline())\n    cake_volumes: List[Tuple[int, int]] = [tuple(map(int, line.strip().split(\" \"))) for line in stdin]\n\n    total_volume: int = 0\n    cake_volumes = sorted(cake_volumes, key=lambda cake: cake[0])\n\n    for cake_radius, cake_height in cake_volumes:\n        if cake_height > total_volume:\n            total_volume = cake_height\n        else:\n            break\n\n    return str(total_volume)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n\nprint(solution(stdin))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"100 30\\n40 10\\n1 4\\n10 7\\n\")\n    '942477.796077'\n    >>> solution(\"100 30\\n40 10\\n1 4\\n10 7\\n\")\n    '3983.539485'\n    \"\"\"\n   ...\n    return \"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task.\n    \"\"\"\n   ...\n    return ''\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    h.sort()\n    def f(n, k, h):\n        minv, maxv = min(h), max(h)\n        while minv < maxv:\n            mid = (minv + maxv) // 2\n            cnt = 0\n            for i in range(n):\n                cnt += 1 if h[i] > mid else 0\n            if cnt > k:\n                minv = mid + 1\n            else:\n                maxv = mid\n        return maxv\n    return f(n, k, h) - min(h)"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n---\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    h = [int(x) for x in stdin.split(' ')]\n    \n    # if n == 1 and k == 1:\n    #     return 0\n\n    total_cost = 0\n    for i in range(n):\n        while h[i] > 0 and h[i]!= k:\n            h[i] -= 1\n            total_cost += 1\n\n    print(total_cost)\n    return \nsolution(input())\n\n\n\n'''"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n, k = int(inputs[0]), int(inputs[1])\n    towers = [int(height) for height in inputs[2:]]\n    if n <= k:\n        return str(0)\n    heights = sorted(towers)\n    diff = n - k\n    for i in range(diff, len(heights)):\n        if heights[i] - heights[i - diff] > k:\n            return str(i - diff)\n    return str(len(heights))\n\n\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    towers = list(map(int, stdin.split()))\n\n    return str(sum(\n        k - max(towers[i + 1:] + [0]) if towers[i] > max(towers[i + 1:] + [0]) else 0\n        for i in range(n)\n    ))\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n    str: str\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    height = list(map(int, stdin.split(' ')))\n    print(n, k, height)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        heights = list(map(int, stdin.split()))\n        min_cost = 0\n        for i in range(len(heights)):\n            if heights[i] > k:\n                min_cost += (heights[i] - k)\n                heights[i] = k\n        return min_cost\n        \n        \n        return\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \n    \"\"\"\n    cards: list[int] = [int(x) for x in stdin.split()]\n    total: int = sum(cards)\n    min_cards: int = len(cards)\n    \n    for i in range(1, len(cards)):\n        total -= cards[i - 1]\n        total += cards[i]\n        \n        if i + 1 < len(cards):\n            total += cards[i + 1]\n            \n        if total < min_cards:\n            min_cards = i\n            \n    print(min_cards - 1)\n    \n    return min_cards - 1\n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split('\\n')[0].split(' '))\n    arr.sort()\n    return sum([i for i in arr[n:] if i < 0])\ndef"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    nums = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    answer = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            answer = max(answer, sum(nums[i:j]))\n    return str(answer)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    row = list(map(int, stdin.readline().split()))\n    min_score = 10 ** 9\n    l, r = 0, 0\n    for i in range(n):\n        if row[i] < min_score:\n            l, r = i, i\n            min_score = row[i]\n        elif row[i] < 0:\n            r += 1\n        else:\n            l += 1\n    return sum(row[l:r])"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = [int(x) for x in stdin.split('\\n')[:2]]\n    i = 0\n    score = 0\n    while i < n - 1:\n        score += A[i]\n        i += A[i]\n    return score\n\ndef"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    l, r = 0, n - 1\n    ans = 0\n    while r > 0:\n        if a[l] < a[r]:\n            ans += a[r]\n            r -= 1\n        else:\n            ans += a[l]\n            l += 1\n    print(ans)\n    return ''"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = [int(num) for num in stdin.split(' ')]\n\n    return \"YES\" if max(k_1, k_2, k_3) * (k_1 + k_2 + k_3) <= max(k_1, k_2, k_3) * (k_1 + k_2 + k_3) + k_3 else \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    m, n = lst[1] - lst[0], lst[2] - lst[1]\n    if m < n:\n        return 'NO'\n    if m % n!= 0:\n        return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a, b, c = [int(i) for i in (a, b, c)]\n    if a <= b and b <= c:\n        return \"YES\" if b - a >= 2 and c - b >= 2 else \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    if k_2 + k_3 < k_1:\n        return 'NO'\n    if k_2 == k_3 == k_1:\n        return 'YES'\n\n    x_1 = k_1 + 1\n    x_2 = x_1 + k_2\n    x_3 = x_2 + k_3\n\n    while x_3 % k_1:\n        x_3 += k_1\n\n    if x_2 % k_2:\n        x_2 += k_2\n\n    while x_2 % k_3:\n        x_2 += k_3\n\n    return 'YES' if x_2 <= x_3 else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    First line: k_1, k_2 and k_3\n    \"\"\"\n    k_1, k_2, k_3 = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    if k_1 + k_2 + k_3 < max(k_1, k_2, k_3):\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    return \"YES\" if min(a, b, c) % max(a, b, c) == 0 else \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k_1, k_2, k_3 = [int(x) for x in stdin.split(\" \")]\n\n    def possible_solution(k_1, k_2, k_3):\n        if k_1 < k_2 < k_3:\n            return False\n\n        def possible_solution_subset(k_1, k_2, k_3, x_1, x_2, x_3):\n            return k_1 <= x_1 and x_1 < k_2 and k_2 < x_2 and x_2 < k_3 and k_3 < x_3\n\n        def can_switch_on_each_second(x_1, x_2, x_3):\n            ans = [x_1, x_1 + k_1, x_1 + 2 * k_1, x_1 + 3 * k_1]\n            ans.extend([x_2, x_2 + k_2, x_2 + 2 * k_2, x_2 + 3 * k_2])\n            ans.extend([x_3, x_3 + k_3, x_3 + 2 * k_3, x_3 + 3 * k_3])\n            ans.sort()\n\n            return ans\n\n        def is_possible_solution(x_1, x_2, x_3):\n            for second in range(max(x_1, x_2, x_3), n + 1):\n                if second - x_1 >= k_1 and second - x_2 >= k_2 and second - x_3 >= k_3:\n                    return False\n\n                if possible_solution_subset(k_1, k_2, k_3, x_1, x_2, x_3):\n                    return True\n\n            return False\n\n        ans = can_switch_on_each_second(x_1=0, x_2=0, x_3=0)\n        print(ans)\n\n        for x_1 in ans:\n            for x_2 in ans:\n                for x_3 in ans:\n                    if is_possible_solution(x_1, x_2, x_3):\n                        return \"YES\"\n\n        return \"NO\"\n\n    return possible_solution(k_1, k_2, k_3)\n\n\ndef"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b, c = list(map(int, stdin.split(' ')))\n    return 'YES' if b >= a and c >= b and (a + b) % 2 == 0 and ((a + c) / 2) % 2 == 0 else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = [int(i) for i in stdin.split()]\n    return 'YES' if k1 + k2 + k3 > max(k1, k2, k3) * (k1 + k2 + k3 - 1) / 2 else 'NO'\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:-1]\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = [int(i) for i in stdin.split('\\n')]\n    n = input[0]\n    s = input[1]\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            count = 0\n        if count == n - 1:\n            return n\n    return n - count\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    input_str = input_str.replace('a', '', input_str.count('a'))\n    input_str = input_str.replace('b', '', input_str.count('b'))\n    print(input_str)\n    return str(len(input_str))\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    a = list(stdin)\n    while a!= [\"a\"]:\n        if a[0] == a[-1]:\n            a.pop(-1)\n            a.pop(0)\n            count += 1\n        else:\n            break\n    print(count)\nsolution(stdin)"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of operations to delete the whole string s.\n\n    >>> solution(\"abaca\")\n    3\n    >>> solution(\"abcddcba\")\n    4\n    \"\"\"\n    return 0\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    len_s = len(stdin)\n    s_dict = defaultdict(list)\n    max_substr = 0\n    for i in range(len_s):\n        substr = ''\n        for j in range(i, len_s):\n            substr += stdin[j]\n            if len(substr) > max_substr:\n                max_substr = len(substr)\n            s_dict[substr].append(j-i)\n    return len(s_dict) - max_substr + 1\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    nums = [0] * (n)\n    for i in range(n):\n        if s[i] == s[0]:\n            nums[i] = 1\n            for j in range(1, n):\n                if s[i + j] == s[j]:\n                    nums[i] += 1\n    return max(nums)\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            break\n        count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    counter = 0\n    for i in range(n):\n        if s[i]!= s[i+1]:\n            counter += 1\n    return counter"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    boys_skills = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    girls_skills = [int(i) for i in stdin.split(\"\\n\")[2].split(\" \")]\n\n    boys_skills.sort()\n    girls_skills.sort()\n\n    lowest_difference = 100\n    current_difference = -1\n    current_pair = 0\n    for i in range(boys):\n        current_difference = abs(boys_skills[i] - girls_skills[0])\n        if current_difference < lowest_difference:\n            lowest_difference = current_difference\n            current_pair = 1\n        elif current_difference == lowest_difference:\n            current_pair += 1\n\n    print(current_pair)\n    return None\n\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Write a program that prints the maximum possible number of pairs of dancers that can be invited to the ball dance, given the dancing skills of the boys and girls.\n    >>> solution(\"4\\n1 4 6 2\\n5\\n5 1 5 7 9\")\n    3\n    '''\n    return str(int(stdin.split('\\n')[0]) // 2)"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    boy_skill: list = [int(x) for x in stdin.split('\\n')[1].split()]\n    girl_skill: list = [int(x) for x in stdin.split('\\n')[3].split()]\n    boy_skill.sort()\n    girl_skill.sort()\n    print(boy_skill)\n    print(girl_skill)\n    #...\n\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '0'\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *boys = map(int, stdin.split('\\n')[0].split(' '))\n    m, *girls = map(int, stdin.split('\\n')[1].split(' '))\n\n    boys = sorted(boys)\n    girls = sorted(girls)\n\n    pairs = 0\n    while len(boys) > 0 and len(girls) > 0:\n        if abs(boys[0] - girls[0]) <= 1:\n            pairs += 1\n            boys = boys[1:]\n            girls = girls[1:]\n        else:\n            if boys[0] > girls[0]:\n                girls = girls[1:]\n            else:\n                boys = boys[1:]\n\n    return pairs\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *boys = stdin.split()\n    n = int(n)\n    boys = [int(b) for b in boys]\n\n    m, *girls = stdin.split()\n    m = int(m)\n    girls = [int(b) for b in girls]\n\n    boys = sorted(boys)\n    girls = sorted(girls)\n    # pairs = []\n    # i, j = 0, 0\n    # while i < n and j < m:\n    #     if abs(boys[i] - girls[j]) <= 1:\n    #         pairs.append(i, j)\n    #         i += 1\n    #         j += 1\n    #     elif abs(boys[i] - girls[j]) > 1:\n    #         i += 1\n    #     else:\n    #         j += 1\n    # return len(pairs)\n\n    boys_set = set()\n    girls_set = set()\n    for b in boys:\n        boys_set.add(b)\n    for g in girls:\n        girls_set.add(g)\n\n    pairs = 0\n    for b in boys:\n        for g in girls:\n            if b not in boys_set or g not in girls_set:\n                if abs(b - g) <= 1:\n                    pairs += 1\n                    boys_set.remove(b)\n                    girls_set.remove(g)\n                    break\n    return pairs\n\n\n\nsolution(stdin)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    boys_skills = list(map(int, stdin.split('\\n')[0].split()))\n    girls_skills = list(map(int, stdin.split('\\n')[1].split()))\n    boys_skills.sort()\n    girls_skills.sort()\n    result = 0\n    for i in range(len(girls_skills) - 1):\n        for j in range(i + 1, len(girls_skills)):\n            if abs(boys_skills[i] - boys_skills[j]) <= 1 and abs(girls_skills[i] - girls_skills[j]) <= 1:\n                result += 1\n    return str(result)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls, memo = map(int, stdin.split())\n    boys_sorted = sorted(map(int, stdin.split()), reverse=True)\n    girls_sorted = sorted(map(int, stdin.split()), reverse=True)\n    memo = set()\n    return max_pairs(boys, boys_sorted, girls, girls_sorted, memo)\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    d = list(map(int, lines[0].split()))\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    a_sum = sum(a)\n    b_sum = sum(b)\n    if a_sum > b_sum:\n        return 'Team 1'\n    elif a_sum < b_sum:\n        return 'Team 2'\n    return 'Draw'"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if a[0] == a[1]:\n        return \"Draw\"\n    if a[0] > a[1]:\n        return \"Team 1\"\n    return \"Team 2\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N, A, B = map(int, stdin.split())\n  return [\"Team 1\", \"Team 2\", \"Draw\"][max(A, B) > min(A, B)]\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Checks whether the first team can beat the second team.\n    :param stdin: Input data.\n    :return: The result, if the first team can beat the second team, otherwise \"Draw\".\n    \"\"\"\n    return \"Team 1\" if int(stdin.split()[0]) > int(stdin.split()[1]) and int(stdin.split()[2]) > int(stdin.split()[3]) else \"Team 2\" if int(stdin.split()[0]) < int(stdin.split()[1]) and int(stdin.split()[2]) < int(stdin.split()[3]) else \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    defence, attack = map(int, stdin.split())\n    if attack > defence:\n        return 'Team 2'\n    elif defence > attack:\n        return 'Team 1'\n    else:\n        return 'Draw'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    points = []\n    for _ in range(N):\n        x, y, c = [int(x) for x in stdin.split()]\n        points.append([x, y, c])\n    points.sort(key=lambda x: x[2])\n    _, y, c = points[-1]\n    points = points[:-(K-1)]\n    points.sort(key=lambda x: x[1])\n    _, x, c = points[0]\n    points = points[1:]\n    points.sort(key=lambda x: x[0])\n    x, _, c = points[0]\n    points = points[1:]\n    points.sort(key=lambda x: x[0])\n    _, _, c = points[0]\n    return str(x)\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # create a 2D array of the input\n    # e.g. [[-1, 0, 3], [0, 0, 3], [1, 0, 2], [1, 1, 40]]\n    input_matrix = []\n    input_line = stdin.split('\\n')\n    for line in input_line:\n        input_matrix.append([int(x) for x in line.split(' ')])\n\n    # convert the input into a graph with adjacency list\n    # e.g. {1: [[0, 3], [2, 2]], 2: [[1, 40]]}\n    #      0: [1, 2]\n    graph = {}\n    for i in range(len(input_matrix)):\n        graph[i+1] = []\n        for j in range(len(input_matrix[0])):\n            if i!= j:\n                graph[i+1].append([j+1, input_matrix[i][j]])\n\n    # calculate the cost matrix\n    # e.g. [[-1, 0, 3], [-1, 0, 2], [-1, 1, 40]]\n    cost_matrix = []\n    for i in range(len(input_matrix)):\n        cost_matrix.append([])\n        for j in range(len(input_matrix[0])):\n            if i!= j:\n                cost_matrix[i].append(input_matrix[i][j])\n            else:\n                cost_matrix[i].append(float('inf'))\n\n    # start Dijkstra's algorithm\n    def dijkstra(graph: dict, cost_matrix: list, s: int) -> list:\n        # initialize result\n        # e.g. [{1: 0, 2: 3, 3: 5}, {1: 0, 2: 2, 3: 8}]\n        result = []\n        for i in range(len(graph)):\n            result.append({})\n            for j in range(len(graph[0])):\n                result[i][j+1] = float('inf')\n\n        # initialize start\n        # e.g. {1: 0, 2: 3, 3: 5}\n        result[s-1] = {}\n        for j in range(len(graph[0])):\n            result[s-1][j+1] = cost_matrix[s-1][j]\n\n        # relax edges\n        # e.g. {1: 0, 2: 3, 3: 5}\n        #      {1: 0, 2: 2, 3: 8}\n        for i in range(len(result)-1):\n            for (j, c) in graph[i+1]:\n                result[j-1][i+2] = min(result[j-1][i+2], result[i][j]+c)\n\n        # return result\n        return result\n\n    # return the minimum time\n    # e.g. 2.4\n    return str(dijkstra(graph, cost_matrix, 1)[len(graph)-1][len(graph)] / math.sqrt(2))\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get data from standard input\n    data = stdin.split(\"\\n\")\n    x_coords = []\n    y_coords = []\n    hardness = []\n    for i in range(len(data)):\n        line = data[i].split(\" \")\n        x_coords.append(int(line[0]))\n        y_coords.append(int(line[1]))\n        hardness.append(int(line[2]))\n    \n    # init variables\n    count = 0\n    times = []\n    start = [0, 0]\n    end = [0, 0]\n    \n    for i in range(len(x_coords)):\n        if count == 0:\n            start = [x_coords[i], y_coords[i]]\n            count += 1\n        else:\n            end = [x_coords[i], y_coords[i]]\n            times.append(distance(start, end))\n            start = [x_coords[i], y_coords[i]]\n            count += 1\n    \n    for i in range(len(times)):\n        if hardness[i]*times[i] > hardness[i+1]*times[i+1]:\n            times[i+1] = hardness[i]*times[i]\n        else:\n            times[i] = hardness[i+1]*times[i+1]\n    \n    return str(round(max(times), 6))\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem of finding the optimal heat source location given a list of meat in a two-dimensional plane\n    '''\n    n, k = [int(v) for v in stdin.split()]\n\n    meat = []\n    for _ in range(n):\n        x, y, c = [int(v) for v in stdin.split()]\n        meat.append((x, y, c))\n    meat.sort()\n\n    max_total = 0\n    for i in range(n - k + 1):\n        total = 0\n        for j in range(k):\n            x1, y1, c1 = meat[i + j]\n            x2, y2, c2 = meat[i + j + 1]\n            total += c1 * (np.sqrt((x1 - x2)**2 + (y1 - y2)**2))\n        if total > max_total:\n            max_total = total\n\n    return str(max_total)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum time in seconds required to have K or more pieces of meat ready\n    \"\"\"\n\n    # Get input\n    x_y_c = [tuple(map(int, line.strip().split())) for line in stdin]\n\n    # Pre-compute\n    distances = []\n    for i in range(len(x_y_c) - 1):\n        for j in range(i + 1, len(x_y_c)):\n            x_i, y_i = x_y_c[i][0], x_y_c[i][1]\n            x_j, y_j = x_y_c[j][0], x_y_c[j][1]\n            distance = math.sqrt((x_i - x_j) ** 2 + (y_i - y_j) ** 2)\n            distances.append((j, distance))\n\n    # Sort distances by their weight\n    distances.sort(key=lambda x: x[1])\n\n    # Initialize\n    times = [float(\"inf\")] * len(x_y_c)\n    k = len(x_y_c) - 1\n    ans = float(\"inf\")\n    start = 0\n\n    for idx, distance in distances:\n        if k > 0:\n            times[idx] = distance\n            k -= 1\n\n        if sum(times) < ans:\n            ans = sum(times)\n            start = idx\n\n    return \"{:.6f}\".format(ans)\n\n\"\"\"\nInput:\n4 3\n-1 0 3\n0 0 3\n1 0 2\n1 1 40\n\nOutput:\n2.4\n\nExplanation:\nIf we put the heat source at (-0.2, 0), the 1-st, 2-nd, and 3-rd pieces of meat will be ready to eat within 2.4 seconds. This is the optimal place to put the heat source.\n\"\"\"\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time = O(1)\n    space = O(1)\n    '''\n    N, K = [int(x) for x in stdin.split(' ')]\n    points = [[float(x) for x in y.split(' ')] for y in stdin.split('\\n')[1:]]\n    \n    # for point in points:\n    #     print(point)\n    \n    def dist(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    \n    points.sort(key = lambda x: x[2])\n    \n    time = 0\n    for i in range(K):\n        # print(points[i][2])\n        time += points[i][2] * dist(0, 0, points[i][0], points[i][1])\n    \n    return '{:.6f}'.format(time)\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    d = [list(map(float, stdin.split())) for _ in range(N)]\n    A = sorted(d, key=lambda x: x[2])\n    for i in range(N):\n        if A[i][2] >= K:\n            return f\"{A[i][2] * math.sqrt((A[0][0] - A[i][0]) ** 2 + (A[0][1] - A[i][1]) ** 2):.6f}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    meat = list(map(lambda x: list(map(int, x.split())), lines[:-1]))\n    N, K = map(int, lines[-1].split())\n    meat.sort(key=lambda x: (x[1], x[0]))\n    meat.sort(key=lambda x: x[2])\n    lowest_y = meat[0][1]\n    times = [None] * N\n    for index, xyc in enumerate(meat):\n        x, y, c = xyc\n        distance = max(abs(x - xyc[0]), abs(y - xyc[1]))\n        times[index] = distance * math.sqrt(c) / math.sqrt(abs(y - lowest_y))\n    times.sort()\n    return str(round(times[K - 1], 6))"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom typing import List\n\nfrom utils.test_case_builder import get_test_cases\n\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the optimal place to put a heat source to have K or more pieces of meat ready.\"\"\"\n    data = [line.split() for line in stdin.strip().split('\\n')]\n    n, k = map(int, data[0])\n    points = [(int(x), int(y)) for x, y in data[1:]]\n    points.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    d = sum([(x - x0) ** 2 + (y - y0) ** 2 for x, y in points]) ** 0.5\n    for x, y in points:\n        if k <= 1:\n            break\n        if abs((d - (x - x0) ** 2 - (y - y0) ** 2) ** 0.5 - (d - (x1 - x0) ** 2 - (y1 - y0) ** 2) ** 0.5) <= 10 ** -6:\n            break\n        x0, y0 = x, y\n        k -= 1\n    return str(d / (k ** 0.5))\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    n = int(x[0])\n    t = x[1]\n    n_half = int(n/2)\n    s_left = sum(int(i) for i in t[:n_half])\n    s_right = sum(int(i) for i in t[-n_half:])\n    if s_left == s_right:\n        return \"Monocarp\"\n    else:\n        return \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin[:n]\n    if t.count('?') % 2 == 0:\n        return 'Bicarp'\n    return 'Monocarp'"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin.split()\n    n = int(digits[0])\n    ticket = digits[1].replace('?', '9')\n    #print(n)\n    #print(ticket)\n    answer = \"Monocarp\" if sum([int(ticket[int(n/2)-i-1]) for i in range(int(n/2))]) == sum([int(ticket[int(n/2)-i-1]) for i in range(int(n/2))]) else \"Bicarp\"\n    return answer\n\"\"\"\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0].rstrip())\n    ticket = stdin.splitlines()[1]\n\n    if '?' * n in ticket:\n        return 'Monocarp'\n\n    i = n // 2\n    l_h = sum(int(ticket[i:]) + int(ticket[:i]))\n    for i in range(n):\n        if ticket[i] == '?':\n            continue\n\n        ticket = list(ticket)\n        ticket[i] = str(int(ticket[i]) - 1)\n        l_t = sum(int(ticket[i:]) + int(ticket[:i]))\n        if l_h == l_t:\n            return 'Bicarp'\n\n    return 'Monocarp'\n\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n    t = t.replace(\"?\", \"0\")\n    while n!= 0:\n        t = t.replace(\"0\", \"?\", 1)\n        n -= 1\n    a = t[0:int(len(t) / 2)]\n    b = t[-int(len(t) / 2):]\n    if sum(map(int, a)) == sum(map(int, b)):\n        return \"Bicarp\"\n    return \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1]\n    if n % 2 == 1:\n        return \"Monocarp\"\n\n    i = 1\n    bicarp = []\n    monocarp = []\n    while i < len(ticket) and ticket[i] == \"?\":\n        i += 2\n    while i < len(ticket):\n        if ticket[i] == \"0\":\n            bicarp.append(ticket[i-2])\n            monocarp.append(ticket[i-1])\n        elif ticket[i] == \"9\":\n            bicarp.append(ticket[i - 2])\n            monocarp.append(ticket[i - 1])\n        else:\n            if ticket[i-1] == \"0\":\n                bicarp.append(ticket[i - 2])\n                monocarp.append(ticket[i - 1])\n            else:\n                bicarp.append(ticket[i - 1])\n                monocarp.append(ticket[i - 2])\n        i += 2\n\n    if sum(bicarp[:n//2]) == sum(bicarp[n//2:]):\n        return \"Bicarp\"\n    return \"Monocarp\"\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.replace('?', '0')\n    sum1 = 0\n    sum2 = 0\n    if n % 2 == 0:\n        sum1 = int(ticket[:n // 2])\n        sum2 = int(ticket[n // 2:])\n    else:\n        sum1 = int(ticket[:n // 2])\n        sum2 = int(ticket[n // 2 + 1:])\n    print('Monocarp' if sum1 > sum2 else 'Bicarp')"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.replace(\"?\", \"0\")\n    bicarp = 0\n    monocarp = 0\n    for i in range(len(ticket)):\n        if ticket[i] == \"0\":\n            monocarp += 1\n        else:\n            bicarp += 1\n    if bicarp == monocarp:\n        return \"Monocarp\"\n    else:\n        return \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    ticket = stdin[1]\n    total_len = len(stdin[1])\n    half = int(n / 2)\n\n    if n % 2 == 0:\n        return \"Bicarp\" if (total_len - n) == half else \"Monocarp\"\n    else:\n        return \"Bicarp\" if n == total_len else \"Monocarp\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    num_routes, time = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    # times = []\n    # for i in range(num_routes):\n    #     times.append(map(int, stdin.split()))\n    bus_arrive = times[0]\n    time_arrive = 0\n    for i in range(num_routes):\n        bus_arrive = bus_arrive + times[i]\n        if bus_arrive >= time:\n            time_arrive = bus_arrive\n            break\n    if time_arrive!= 0:\n        print(i)\n    else:\n        print(-1)\n    return ''\n\nsolution(\"1 2 3 4 5\")\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, t = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    bus_info = [int(x) for x in stdin[1:]]\n    for i in range(n):\n        if (t // bus_info[i]) * bus_info[i]!= t:\n            bus_info.remove(bus_info[i])\n    return str(bus_info[0])\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, t = map(int, stdin.readline().strip().split())\nbus_info = [int(x) for x in stdin.readlines()]\n\nfor i in range(n):\n    if (t // bus_info[i]) * bus_info[i]!= t:\n        bus_info.remove(bus_info[i])\n\nprint(bus_info[0])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ''' \n    The idea is to sort the buses, and then search the index of the time.\n    '''\n    \n    # Get input\n    n, t = [int(x) for x in stdin.split()]\n    buses = []\n    for i in range(n):\n        s, d = [int(x) for x in stdin.split()]\n        buses.append((s, d))\n    \n    # Sort buses\n    buses.sort()\n    \n    # Search\n    ans = -1\n    for i, bus in enumerate(buses):\n        s, d = bus\n        if t % d == 0:\n            ans = i + 1\n            break\n    \n    return ans\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    n_list = [t - i for i in map(int, stdin.split())]\n    return str(n_list.index(min(n_list)) + 1)"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first_bus_time, bus_interval = list(map(int, stdin.split(' ')))\n    # it = (first_bus_time, bus_interval)\n    # print(it)\n    bus_stop_time = []\n    for i in range(first_bus_time):\n        bus_stop_time.append(i * bus_interval)\n    # print(bus_stop_time)\n    bus_time = list(map(int, stdin.split(' ')))\n    # print(bus_time)\n    answer = []\n    for i in bus_time:\n        a = (i * bus_interval)\n        answer.append(a)\n    # print(answer)\n    # answer = set(answer)\n    # print(answer)\n    answer.sort()\n    # print(answer)\n    # if answer == bus_stop_time:\n    #     print('1')\n    for i in range(len(answer)):\n        if answer[i] == bus_stop_time[i]:\n            print(i+1)\n        elif i == len(answer)-1:\n            print('-1')\n\n\nsolution(input())\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    buses = stdin.split(\"\\n\")[:-1]\n    times = [buses[i].split(\" \") for i in range(len(buses))]\n    times = [[int(time[0]), int(time[1])] for time in times]\n    timestamps = []\n    for t in range(len(times)):\n        timestamps.append(t * times[t][1])\n    timestamps.sort()\n    for t in timestamps:\n        for b in range(len(times)):\n            if t % times[b][1] == 0:\n                print(b+1)\n                return\n    return\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\\n6 4\\n9 5\\n\")\n    1\n    >>> solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\\n\")\n    3\n    >>> solution(\"3 7\\n2 2\\n2 3\\n2 4\\n\")\n    1\n    \"\"\"\n    n, t = map(int, stdin.split())\n    bus_stops = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[:n]]\n    bus_stops = list(zip(bus_stops, [0] * n))\n    stops = sorted(bus_stops, key=lambda x: (x[0][1], x[0][0]))\n    for _ in range(t):\n        for i in range(n):\n            if stops[i][1]:\n                stops[i][1] -= 1\n            else:\n                stops[i][1] = stops[i][0][0] - stops[i][0][1]\n                if stops[i][1]:\n                    stops[i][1] -= 1\n                else:\n                    stops[i][1] = stops[i][0][0] - stops[i][0][1]\n    return stops[0][0][2]\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function answer the question\"\"\"\n    n, t = list(map(int, stdin.split()))\n    stops = []\n    for _ in range(n):\n        a, b = list(map(int, stdin.split()))\n        stops.append((a, b))\n    # sort stops by departure time\n    stops.sort(key=lambda x: x[0])\n    # create a stack for storing stops\n    stop_stack = []\n    time = t\n    for s, d in stops:\n        while True:\n            if len(stop_stack) == 0:\n                break\n            last = stop_stack[-1]\n            if last[0] >= s:\n                break\n            else:\n                # pop the last stop that will not be able to catch the bus\n                stop_stack.pop()\n        # if can catch the bus\n        if len(stop_stack) > 0:\n            # if bus is not the latest\n            if time < s:\n                # update time\n                time += d\n                # push the stop\n                stop_stack.append((s, d))\n            else:\n                # if bus is the latest\n                # if bus is the latest and the stop is not the latest\n                if time >= s and last[1] < d:\n                    # update time\n                    time += d\n                    # push the stop\n                    stop_stack.append((s, d))\n                else:\n                    # if bus is not the latest\n                    # if the bus is not the latest and the stop is not the latest\n                    if last[1] < d:\n                        # update time\n                        time += d\n                        # push the stop\n                        stop_stack.append((s, d))\n                    else:\n                        # if the bus is the latest and the stop is not the latest\n                        # if the bus is the latest and the stop is the latest\n                        if last[1] > d:\n                            # update time\n                            time += d\n                            # push the stop\n                            stop_stack.append((s, d))\n                        else:\n                            # if the bus is the latest and the stop is the latest\n                            # just ignore the stop\n                            pass\n    # return the bus route\n    return stop_stack[0][0]\nprint(solution(input()))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n\n    def check_digit(n: int, digit: int) -> bool:\n        return bin(n)[2:].count('1') == digit\n\n    def brute_force(n: int, digit: int) -> int:\n        for i in range(n):\n            if check_digit(i, digit):\n                return i\n\n    def binary_search(low: int, high: int, digit: int) -> int:\n        for i in range(high - low):\n            mid = low + i\n            if check_digit(mid, digit):\n                return mid\n\n        return low - 1\n\n    # find first solution\n    def first_solution(digit: int) -> int:\n        for i in range(1, k):\n            n = binary_search(1, m + 1, i)\n            if check_digit(n, digit):\n                return n\n\n    # find second solution\n    def second_solution(digit: int) -> int:\n        n = brute_force(m + 1, digit)\n        return n\n\n    n = first_solution(k)\n    s = second_solution(k)\n\n    if n > s:\n        return str(s)\n    else:\n        return str(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = k - 1\n    while 2 ** n < m:\n        n += 1\n    return str(2 ** (n - 1))\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, k = list(map(int, stdin.split()))\n    # i = 0\n    # while i < n and\n    i = int(m ** 0.5)\n    while i >= 1:\n        if m - i * i == k:\n            return i\n        i -= 1\n    return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # cast inputs\n    m, k = map(int, stdin.split())\n    # solve\n    count = 0\n    for n in range(1, m+1):\n        count += len(bin(n)[2:]) == k\n    # format and print\n    print(count)\n    return ''\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    print(bin(m)[2:].count('1') - bin(k - 1)[2:].count('1'))"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    if k == 1:\n        return 1\n    x = 10 ** 18\n    while x > 0:\n        # print(x, m, k)\n        if (x + 1) * m // 2 >= 2 ** k:\n            return x\n        x -= 1\n    return x + 1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split(' ')\n    k = int(k)\n    i = 1\n    while k:\n        i *= 2\n        k -= 1\n    return i\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # (a * (10 ** b)) + (a * ((10 ** b) // 2))\n    # a * ((10 ** b) + ((10 ** b) // 2))\n    return str((a * ((10 ** b) + ((10 ** b) // 2))))\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    a = 1\n    c = 0\n    while True:\n        if (len(str(a)) + len(str(a + 1))) == k:\n            c += 1\n        if c == m:\n            break\n        a += 1\n    return a\n\nprint(solution(input()))"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of the desk.\n\n    The solution is not unique, so for the task, it is necessary to print any of them.\n\n    Args:\n        stdin: standard input string\n\n    Returns:\n        str: the solution\n\n    \"\"\"\n    m, k = [int(x) for x in stdin.split(' ')]\n    if m == 1:\n        return '1'\n    else:\n        # bin(n)[2:]\n        # '0' + (k - 1) * '1'\n        # k * '0'\n        # (k - 1) * '1'\n        # (k - 1) * (m - 1)\n        # (k - 1) * (m - 1) + (k - 1)\n        # (k - 1) * (m - 1) + (k - 1) * m\n        # (k - 1) * (m - 1) + (k - 1) * m + (k - 1) * (m - 1)\n        # (k - 1) * (m - 1) + (k - 1) * m + (k - 1) * (m - 1) + (k - 1)\n        return str((k - 1) * (m - 1) + (k - 1) * m + (k - 1) * (m - 1) + (k - 1))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430: \u043a \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435\u0442 \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430\n\n-------\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if stdin[0] == stdin[4] == stdin[8] == \"*\" and stdin[3] == stdin[5] == stdin[9] == \".\" else \"no\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11\")\n    'no'\n    >>> solution(\".*.*...*.*.\\\\n\")\n    'yes'\n    \"\"\"\n    segments = stdin.split('\\\\n')\n    lengths = set()\n    for i in range(len(segments) - 1):\n        for j in range(i + 1, len(segments)):\n            length = 0\n            for k in range(i, j):\n                if segments[k][0] == '*':\n                    length += 1\n                else:\n                    length = 0\n                    break\n            if length!= 0:\n                lengths.add(length)\n    return 'yes' if 4 in lengths else 'no'\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [stdin[i] for i in range(n)]\n    l = [i for i in l if i!= '.']\n    return 'yes' if len(l) == 0 else 'no'\n\"\"\"\n\nimport sys\nimport re\nimport string\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip()\n\ncheck = re.findall(r'\\*{3,}', s)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if is_good_level(stdin) else 'no'\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = stdin.readline().strip()\n    m = 0\n    for i in range(n):\n        if seq[i] == '.':\n            m += 1\n    if m < 4:\n        return 'no'\n    jump = 0\n    pre = seq[0]\n    for i in range(1, n):\n        if seq[i] == '.':\n            jump += 1\n        else:\n            if jump == 0:\n                jump = 1\n                continue\n            if jump == 1 and pre == '.':\n                return 'no'\n            if jump == 2 and pre == '.':\n                return 'no'\n            if jump == 3 and pre == '.':\n                return 'no'\n            if jump == 4 and pre == '.':\n                return 'no'\n            if jump == 5 and pre == '.':\n                return 'no'\n            if jump == 6 and pre == '.':\n                return 'no'\n            if jump == 7 and pre == '.':\n                return 'no'\n            if jump == 8 and pre == '.':\n                return 'no'\n            if jump == 9 and pre == '.':\n                return 'no'\n            if jump == 10 and pre == '.':\n                return 'no'\n            if jump == 11 and pre == '.':\n                return 'no'\n            if jump == 12 and pre == '.':\n                return 'no'\n            if jump == 13 and pre == '.':\n                return 'no'\n            if jump == 14 and pre == '.':\n                return 'no'\n            jump = 1\n            pre = seq[i]\n    if jump < 4:\n        return 'no'\n    return 'yes'\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(\n    # your code here\n    )\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = []\n    for _ in range(n):\n        grid.append([int(num) for num in stdin.readline().strip().split(' ')])\n\n    def check(grid):\n        for i in range(n):\n            sum_row = sum(grid[i])\n            if sum_row!= sum([grid[j][i] for j in range(n)]):\n                return False\n        for i in range(n):\n            sum_col = sum([grid[j][i] for j in range(n)])\n            if sum_col!= sum_row:\n                return False\n        sum_diag1 = sum([grid[i][i] for i in range(n)])\n        sum_diag2 = sum([grid[i][n - i - 1] for i in range(n)])\n        return sum_diag1 == sum_diag2 == sum_row\n\n    def is_magic(x):\n        grid_new = copy.deepcopy(grid)\n        for i in range(n):\n            for j in range(n):\n                grid_new[i][j] += x\n                if not check(grid_new):\n                    return False\n        return True\n\n    left, right = 1, 10**9 + 1\n    while left < right:\n        mid = (left + right) // 2\n        if is_magic(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left - 1\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin)\n    # Create grid\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n\n    # For each row, column, and diagonal\n    for row in grid:\n        if row!= sorted(row):\n            return \"NO\"\n\n    for column in zip(*grid):\n        if column!= sorted(column):\n            return \"NO\"\n\n    for i in range(n):\n        if grid[i][i] == 0:\n            continue\n        elif grid[i][i]!= (sum(grid[i]) - grid[i][i]):\n            return \"NO\"\n\n    for i in range(n):\n        if grid[i][n - i - 1] == 0:\n            continue\n        elif grid[i][n - i - 1]!= (sum(grid[i]) - grid[i][n - i - 1]):\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution\"\"\"\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def isMagicSquare(arr):\n        \"\"\"\n        :param arr: array of integers\n        :return: if the given array is a magic square\n        \"\"\"\n        if len(arr) == 0:\n            return False\n\n        sums = [0, 0, 0]\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if arr[i][j] == 0:\n                    continue\n\n                sums[0] += arr[i][j]\n                sums[1] += arr[j][i]\n                sums[2] += arr[i][j] + arr[j][i]\n        return sums[0] == sums[1] == sums[2]\n\n    n = int(stdin.readline().strip())\n    grid = [[0] * n for _ in range(n)]\n    for i in range(n):\n        row = list(map(int, stdin.readline().strip().split(' ')))\n        for j in range(n):\n            grid[i][j] = row[j]\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                for x in range(1, 10):\n                    grid[i][j] = x\n                    if isMagicSquare(grid):\n                        return str(x)\n                break\n\n    return '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n >= 500:\n        return -1\n    grid = [[0 for x in range(n)] for y in range(n)]\n    magic_grid = [0] * n\n    magic_grid[0] = n\n    for i in range(n):\n        grid[i] = [int(x) for x in stdin.split()]\n    for i in range(n):\n        magic_grid[i] = sum(grid[i])\n        magic_grid[0] += grid[i][i]\n    magic_grid[0] += grid[0][0]\n    magic_grid[0] -= n\n    for i in range(n):\n        magic_grid[i] = magic_grid[i] // n\n    magic_grid[0] = magic_grid[0] // n\n    if sum(magic_grid)!= sum([x[0] for x in grid]):\n        return -1\n    for i in range(1, n):\n        for j in range(1, n):\n            magic_grid[i] += grid[i - 1][j]\n            magic_grid[0] += grid[i][j - 1]\n            magic_grid[n - 1] += grid[i][j]\n            magic_grid[n - 1] += grid[i - 1][j]\n            magic_grid[n - 1] += grid[i][j - 1]\n            if magic_grid[i]!= magic_grid[0]:\n                return -1\n    return magic_grid[0]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    return \"\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_benches = int(stdin)\n    num_of_people = int(stdin)\n    people_on_benches = [int(stdin) for _ in range(num_of_benches)]\n    while num_of_people < len(people_on_benches):\n        num_of_people += int(stdin)\n\n    print(min(num_of_benches - max(people_on_benches) + 1, max(people_on_benches)),\n          max(num_of_benches - max(people_on_benches) + 1, max(people_on_benches)))\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training9TUTK3-4PL/\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    m = int(stdin.splitlines()[1])\n\n    if n == 1:\n        return str(1)\n    if m == 0:\n        return str(n)\n\n    benches = [int(line) for line in stdin.splitlines()[2:]]\n    max_people_on_benches = [sum(benches)]\n    min_people_on_benches = [benches[0]]\n\n    for i in range(1, n):\n        curr_people_on_benches = [\n            benches[i] + min_people_on_benches[i - 1],\n            benches[i] + max_people_on_benches[i - 1],\n        ]\n        max_people_on_benches.append(max(curr_people_on_benches))\n        min_people_on_benches.append(min(curr_people_on_benches))\n\n    max_people_on_benches.append(0)\n    min_people_on_benches.append(0)\n\n    max_people_on_benches.sort()\n    min_people_on_benches.sort()\n\n    return str(max_people_on_benches[-2]) + \" \" + str(min_people_on_benches[-2])\n    pass\n\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    a = [int(stdin) for _ in range(n)]\n    k = [0] * n\n    for i in range(m):\n        for j in range(n):\n            if a[j] == 0:\n                k[j] += 1\n            if k[j] >= n:\n                break\n        else:\n            continue\n        for j in range(n - 1, -1, -1):\n            if a[j] == 0:\n                k[j] += 1\n            if k[j] >= n:\n                break\n    min_k = min(k)\n    max_k = max(k)\n    print(min_k, max_k)"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(c) for c in stdin.split('\\n')]\n    a = [int(c) for c in stdin.split('\\n')]\n    a.sort()\n    k = 0\n    k_max = 0\n    for i in range(n - 1, -1, -1):\n        if k + a[i] > m:\n            k += m\n            k_max = m\n            break\n        k += a[i]\n        k_max += a[i]\n    k = max(k, k_max)\n    k_max = 0\n    for i in range(n):\n        if a[i] + k > m:\n            k -= (a[i] + k) - m\n            k_max = (a[i] + k) - m\n        else:\n            k -= a[i]\n            k_max += a[i]\n    k = min(k, k_max)\n    return f'{k} {k_max}'\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"MIN: \" + str(min(n, sum(sorted(a)[-m:]))) + \" MAX: \" + str(max(n, sum(sorted(a)[:m])))\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    people = [int(stdin.readline()) for _ in range(n)]\n    print(min(people), max(people))\n    return ''\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return f'{min(n, n ** 2 // 2)}\\n{n ** 2 // 2}'\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets minimum and maximum number of benches in the park from the input.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution with the minimum and maximum number of benches in the park.\n    \"\"\"\n    # Get lines\n    n = int(stdin.split('\\n')[0])\n    m = int(stdin.split('\\n')[1])\n    # Check values\n    if n < 1 or n > 100:\n        return 'Bad arguments'\n    if m < 1 or m > 100000:\n        return 'Bad arguments'\n    # Get values\n    b = []\n    for i in range(n):\n        b.append(int(stdin.split('\\n')[i + 2]))\n    # Calculate max_n\n    max_n = max(b)\n    # Calculate max_k\n    max_k = m + max_n - 1\n    # Calculate min_k\n    min_k = m - 1\n    return f'{min_k} {max_k}'\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(stdin.split())\n    return str(get_answer(int(a), int(b)))\n\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('2 3') == '128'\nassert solution('3 3') == '128'\nassert solution('2 2') == '1'\nassert solution('3 1') == '1'\n\"\"\"\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a seat number, seat (which is 1-indexed) and a sequence of N strings in the input. All the strings are either \"F\" or \"B\" (for front or back), and they are ordered so that the first string is the seat of the first passenger, the second string is the seat of the second passenger, and so on.\n\n    A passenger's seat is their assigned seat, so if there are N people, they will take seats 1, 2,..., N.\n\n    Each passenger takes exactly one seat in either direction from their own seat (e.g. if a passenger is seated in the front row, they will take seats 1, 2, 3,..., N-1 in front of them and in the back of them).\n\n    If a passenger has the front seat, they are behind a different passenger in the back row. If a passenger has the back seat, they are in front of a different passenger in the front row.\n\n    The expression (seat + c) % N is equivalent to the expression seat * N + c.\n\n    For example, if there are four seats, and person 3 is to be seated in the back row, then they are to take seats 4, 3, 2, 1, and would thus take seats 4, 5, 6, 7, and 8 in front of them.\n\n    You should check whether the passenger has the same assigned seat in both directions, and if so, return -1. If they do not have the same assigned seat in both directions, return the first seat number that is different between the two rows.\n\n    Constraints:\n    2 \u2264 N \u2264 10^6\n    1 \u2264 seat \u2264 N\n\n    return int\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''https://app.codility.com/demo/results/trainingQHJWS-G36/'''\n    pass\n'''\nYou can write to stdout for debugging purposes, e.g.\n\nprint(\"this is a debug message\")\n'''\ndef"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... ''')\n    128\n    >>> solution('''4 4\n   ... ''')\n    8\n    >>> solution('''5 5\n   ... ''')\n    8\n    >>> solution('''100 100\n   ... ''')\n    8\n    >>> solution('''1 1\n   ... ''')\n    1\n    \"\"\"\n    _, seats, passengers = stdin.split()\n    seats, passengers = int(seats), int(passengers)\n    ways = [0] * (passengers + 1)\n    ways[0] = 1\n    for seat in range(1, seats + 1):\n        for i in range(passengers + 1):\n            ways[i] = (ways[i] + ways[i - 1]) % (10 ** 9 + 7)\n    return ways[-1]\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO:\n    Implement me!\n    \"\"\"\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Gets the number of ways to assign seats to the passengers without anyone getting angry.\n    There will be n seats on the airplane. There will be m people boarding the plane.\n\n    This airplane has an entrance at the very front and very back of the plane.\n\n    Each person has some assigned seat. It is possible for multiple people to have the same assigned seat.\n    The people will then board the plane one by one starting with person 1.\n    Each person can independently choose either the front entrance or back entrance to enter the plane.\n\n    When a person walks into the plane, they walk directly to their assigned seat and will try to sit in it.\n    If it is occupied, they will continue walking in the direction they walked in until they are at empty seat -\n    they will take the earliest empty seat that they can find.\n    If they get to the end of the row without finding a seat, they will be angry.\n\n    Find the number of ways to assign tickets to the passengers and board the plane without anyone getting angry.\n    Two ways are different if there exists a passenger who chose a different entrance in both ways, or the assigned seat is different.\n    Print this count modulo 10^9 + 7.\n    '''\n    # (n, m) = [int(x) for x in stdin.split()]\n    pass\n\ndef"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n_pizzas = []\n    for i in range(n):\n        n_pizzas.append(list(map(int, stdin.split()[i + 1].split())))\n    n_pizzas.sort(key=lambda x: x[0])\n    i = 1\n    while i < n and n_pizzas[i][0] == n_pizzas[i - 1][0]:\n        i += 1\n    n_pizzas.sort(key=lambda x: x[1], reverse=True)\n    j = 1\n    while j < n and n_pizzas[j][1] == n_pizzas[j - 1][1]:\n        j += 1\n    i += 1\n    j += 1\n    if i >= j:\n        return '1'\n    else:\n        return f'{i}{j}'\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    dct = defaultdict(list)\n    for _ in range(n):\n        f, *b = map(int, stdin.split('\\n')[_].split())\n        dct[f].append(b)\n\n    res = list(permutations(range(m), 2))\n\n    # for f, bs in dct.items():\n    #     for b in bs:\n    #         res.append((f, b))\n\n    # res = list(set(res))\n    # res.sort(key=lambda x: x[0] * x[1])\n    # res.sort(key=lambda x: sum(x[0] * x[1] for x in x[1]))\n    # res.sort(key=lambda x: sum(x[0] * x[1]))\n    res.sort(key=lambda x: sum(x[0] * x[1]))\n\n    return''.join(map(str, res[0]))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum cost of ordering two pizzas to satisfy the maximum number of friends.\"\"\"\n    def cost(n: int, a: str, b: str) -> int:\n        \"\"\"Return the cost of ordering two pizzas from ingredients a and b.\"\"\"\n        # input string to list of ints\n        b = [int(s) for s in b.split()]\n        # count distinct ints\n        b = set(b)\n        # count how many distinct ints are in a\n        a = set(a)\n        # count intersection between the two\n        return sum(min(b.count(x), a.count(x)) for x in b)\n    \n    n, m = list(map(int, stdin.split()))\n    \n    costs = []\n    for _ in range(m):\n        pizza = list(map(int, stdin.split()))\n        costs.append(cost(n, *pizza[2:]))\n    \n    costs.sort()\n    return str(costs[1])\n\nsolution(\"3 4\\n2 6 7\\n4 2 3 9 5\\n3 2 3 9\\n100 1 7\\n400 3 3 2 5\\n100 2 9 2\")"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s):\n        # s is a string\n        res = 0\n        for i in range(1, len(s)):\n            res += int(s[i]) - int(s[i - 1])\n        return res\n\n    # read input\n    N, M = map(int, stdin.split())\n    a = [None] * N\n    pizza_sizes = {}\n    for i in range(N):\n        f, b = map(int, stdin.split()[i * 2 + 1: i * 2 + 3])\n        a[i] = str(f) + \" \" + \" \".join(map(str, b))\n        pizza_sizes[i] = solve(a[i])\n\n    max_pizza_sizes = sorted([(i, j) for i, j in pizza_sizes.items()], reverse=True, key=lambda x: x[1])\n\n    a = []\n    for i in range(M):\n        a.append(map(int, stdin.split()[i * 2 + 1: i * 2 + 3]))\n    a = [i[1:] for i in a]\n    res = []\n    for i in range(len(max_pizza_sizes)):\n        res.append(a[max_pizza_sizes[i][0]])\n\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    favourite_ingredients = {}\n    for _ in range(n):\n        favourite_ingredients[int(stdin.readline())] = list(map(int, stdin.readline().split()))\n    min_value = m\n    for i in range(n):\n        favourite_ingredients[i + 1] = favourite_ingredients[i + 1][1:]\n    for i in range(m):\n        favourite_ingredients[i + 1].sort()\n        min_value = min(min_value, favourite_ingredients[i + 1][2] - favourite_ingredients[i + 1][1])\n    i = 0\n    min_value = m\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            if favourite_ingredients[i + 1][0] == favourite_ingredients[j + 1][0]:\n                min_value = min(min_value, favourite_ingredients[j + 1][2] - favourite_ingredients[j + 1][1])\n    print(min_value)\n    return ''\n\n\ndef"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    ingredients = []\n    for i in range(n):\n        f, *b = map(int, stdin.split(\"\\n\")[i].split(\" \"))\n        ingredients.append([f, set(b)])\n    pizzas = []\n    for i in range(m):\n        r, *a = map(int, stdin.split(\"\\n\")[i].split(\" \"))\n        pizzas.append([r, set(a)])\n    ingredients.sort(reverse=True)\n    pizzas.sort(key=lambda x: len(x[1]), reverse=True)\n    res = []\n    for _, c in pizzas:\n        if len(res) == 2:\n            break\n        for _, i in ingredients:\n            if i in c and len(res) < 2:\n                res.append(i)\n                c.remove(i)\n    print(str(res[0]) + \" \" + str(res[1]))\n    return \"\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    friends, pizzas = [int(i) for i in stdin.split()]\n    favorites = []\n    pizzas_s = []\n    for _ in range(friends):\n        favorites.append([int(i) for i in stdin.split()[1:]])\n    for _ in range(pizzas):\n        pizzas_s.append([int(i) for i in stdin.split()[1:]])\n\n    def choose_pizza(max_pizza_num, pizza_s, pizza_f, pizza_num):\n        total_f = 0\n        max_f = 0\n        for i in range(friends):\n            f_num = 0\n            for j in range(pizza_num):\n                if pizza_s[j][0] in pizza_f[i][1:]:\n                    f_num += 1\n            if f_num > max_f:\n                max_f = f_num\n                total_f += f_num\n        return total_f - max_f\n\n    min_num = friends + 1\n    for i in range(pizzas):\n        for j in range(pizzas):\n            if i == j:\n                continue\n            pizza1 = pizzas_s[i]\n            pizza2 = pizzas_s[j]\n            pizza_num = min(len(pizza1), len(pizza2))\n            max_pizza_num = max(len(pizza1), len(pizza2))\n            if max_pizza_num <= 2:\n                continue\n            f_sum = choose_pizza(max_pizza_num, pizzas_s, favorites, pizza_num)\n            if f_sum < min_num:\n                min_num = f_sum\n                answer = [i, j]\n    return str(answer[0] + 1) + \" \" + str(answer[1] + 1)\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, stdin.split())))\n    lst.sort(key=lambda x: -x[0])\n    m1 = 0\n    m2 = m\n    i1 = 0\n    i2 = 0\n    s1 = set()\n    s2 = set()\n    for i in range(n):\n        for j in range(lst[i][0]):\n            s1.add(lst[i][j + 1])\n        s2 = s1.copy()\n        for j in range(m):\n            if lst[i][j + 1] not in s2:\n                break\n            else:\n                m1 += 1\n                m2 -= 1\n        if m1 > m2:\n            i1 = i + 1\n            break\n        else:\n            i2 = i + 1\n            m1 = 0\n    return '{0} {1}'.format(i1, i2)"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    if m < 1 or m > 100 or s < 0 or s > 900:\n        return \" \".join([\"-1\", \"-1\"])\n    maxn = \"\"\n    minn = \"\"\n    for i in range(1, 10 ** (m - 1)):\n        if i % (10 ** (m - 1)) == 0:\n            break\n        num = str(i)\n        if len(num) > m:\n            continue\n        sum_digits = sum(int(i) for i in num)\n        if sum_digits == s:\n            maxn = num\n            minn = num\n        elif sum_digits < s:\n            maxn = num if len(maxn) == 0 or num > maxn else maxn\n            minn = num if len(minn) == 0 or num < minn else minn\n    return \" \".join(sorted((maxn, minn)))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, s = stdin.strip().split()\n    m, s = int(m), int(s)\n    left, right = 10 ** (m - 1), 10 ** m - 1\n    sums = [0] * m\n    while True:\n        if s > 0:\n            if s > right:\n                s -= right\n                right -= 1\n            else:\n                break\n            sums[0] += right\n        else:\n            break\n\n        for i in range(1, m):\n            if s > 0:\n                if s > right:\n                    s -= right\n                    right -= 1\n                else:\n                    break\n                sums[i] += right\n            else:\n                break\n        else:\n            break\n\n        left += 1\n        s = sum(sums)\n    sums = map(str, sums)\n    return f\"{left} {right}\"\n\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, s = [int(i) for i in stdin.split()]\n    if (m == 0 or s > 9) and m < s:\n        return '-1 -1'\n    nums = []\n    for i in range(m, 0, -1):\n        if sum(int(i) for i in str(i)) == s:\n            nums.append(i)\n    if not nums:\n        return '-1 -1'\n    return f'{min(nums)} {max(nums)}'\n    \"\"\"\n\n    m, s = [int(i) for i in stdin.split()]\n    nums = [i for i in range(m, 0, -1) if sum(int(i) for i in str(i)) == s]\n    if not nums:\n        return '-1 -1'\n    return f'{min(nums)} {max(nums)}'\n\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\" \")\n    m = int(line[0])\n    s = int(line[1])\n    minn = -1\n    maxx = -1\n    nums = []\n    for i in range(m):\n        nums.append(i)\n    # print(nums)\n    nums.remove(m-1)\n    # print(nums)\n    for i in nums:\n        nums.append(i)\n        # print(nums)\n        if sum(nums) == s:\n            # print(nums)\n            if nums[0] < minn:\n                minn = nums[0]\n            if nums[-1] > maxx:\n                maxx = nums[-1]\n            nums.remove(i)\n    if minn == -1:\n        print(\"-1 -1\")\n    else:\n        print(minn, maxx)\n    return ''\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split(' '))\n    result = '-1 -1'\n    start, end = 10 ** (m - 1), 10 ** m - 1\n    if s % m == 0:\n        result = f'{end - ((s // m) - 1) + 1} {end}'\n    elif s % m > 0:\n        if s // m >= 1:\n            result = f'{start} {(s // m) - 1}'\n        else:\n            result = f'{start} 0'\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    # Collect input\n    numbers = stdin.split(' ')\n    m, s = int(numbers[0]), int(numbers[1])\n    # Get the required numbers\n    minimum = 10 ** m - 1\n    maximum = 0\n    # Loop through possible numbers\n    for i in range(minimum, maximum + 1):\n        # If sum of digits equals s\n        if sum_of_digits(i) == s:\n            print(i, i)\n            return\n    print('-1 -1')\n\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    2 15\n    69 96\n    '''\n    # pylint: disable=invalid-name\n    n, s = [int(v) for v in stdin.split()]\n    def num(x):\n        return sum(int(c) for c in str(x)) == s\n    def test(k):\n        return sum(int(c) for c in str(k)) == s and len(str(k)) == n\n    return f'{min(range(10**(n-1), 10**n))}, {max(range(10**(n-1), 10**n))}'\n    # return str(min(i for i in range(10**(n-1), 10**n) if test(i))) +'' + str(max(i for i in range(10**(n-1), 10**n) if test(i)))\n    # return str(sorted(i for i in range(10**(n-1), 10**n) if test(i))[0]) +'' + str(sorted(i for i in range(10**(n-1), 10**n) if test(i))[-1])\n    # return str(sorted(i for i in range(10**(n-1), 10**n) if test(i))[0]) +'' + str(sorted(i for i in range(10**(n-1), 10**n) if test(i))[-1])\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m, s = [int(c) for c in stdin.split(' ')]\n    d = [c for c in range(1, 10)]\n    return''.join([str(min([num for num in range(10**m, 10**(m+1)) if sum(\n        [int(c) for c in str(num)]) == s])), str(max([num for num in range(10**m, 10**(m+1)) if sum(\n        [int(c) for c in str(num)]) == s])) if len(str(max([num for num in range(10**m, 10**(m+1)) if sum(\n        [int(c) for c in str(num)]) == s]))) else '-1 -1'])\n\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    nums = [int(n) for n in stdin.split()]\n    max_length = nums[0]\n    max_sum = nums[1]\n    \n    if max_length < 0 or max_sum < 0:\n        return \"-1 -1\"\n    \n    min_length = max_length\n    min_sum = max_sum\n    \n    for i in range(max_length):\n        for j in range(max_length):\n            if (i + j) == max_sum:\n                if i < min_length:\n                    min_length = i\n                if j < min_sum:\n                    min_sum = j\n            else:\n                break\n    \n    if min_length == max_length:\n        return \"-1 -1\"\n    \n    return str(min_length) + \" \" + str(min_sum)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    minn = n\n    maxx = n\n    if k == 0:\n        print(\"-1 -1\")\n        return\n    for i in range(k):\n        minn = min(minn, n)\n        maxx = max(maxx, n)\n        n += 1\n    print(minn, maxx)\n    return \"\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution for the problem\n\n    :param stdin: input data\n    :type stdin: str\n    :return: output data\n    :rtype: str\n    \"\"\"\n    line = stdin.split()\n    l = int(line[0])\n    r = int(line[1])\n    k = int(line[2])\n    n = 10 ** k\n    sum = 0\n    for i in range(l, r + 1):\n        s = str(i)\n        c = len(set(s))\n        if c <= k:\n            sum = (sum + i) % n\n    return str(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split(' ')]\n    return str(sum([x for x in range(l, r + 1) if len(set(str(x))) <= k]))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    print(((r-l+1)*(r-l)//2) - ((k-1)*(r-l)//k))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the sum of numbers from l to r which\n    contain at most k different digits.\n    \"\"\"\n    l, r, k = map(int, stdin.split())\n    return (((r - l) * (r - l + 1) // 2) + l) % 1000000009\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split(' '))\n    \n    return r - l + 1 - (1 + k) * (10 ** k)\n\ndef"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def hash_func(v):\n        return sum(hash(str(c)) for c in v) % MOD\n\n    def comb(n, r, mem):\n        if r == 0:\n            return 1\n        if n < 0 or r < 0:\n            return 0\n        if (n, r) in mem:\n            return mem[n, r]\n        mem[n, r] = comb(n - 1, r, mem) + comb(n - 1, r - 1, mem)\n        return mem[n, r]\n\n    l, r, k = map(int, stdin.split(' '))\n    MOD = 10**9 + 7\n    # res = sum(range(l, r + 1)) - comb(r - l + 1, r - l + k - 1, {})\n    mem = {}\n    res = sum(hash_func(range(l, r + 1)) - comb(r - l + 1, r - l + k - 1, mem))\n    return str(res % MOD)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'TODO'\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split(' ')]\n    return (l + r) % 998244353\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    return (r-l+1) * (10**k - 1) % 998244353\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    n, k, d = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    \n    \n    '''\n    \n    n, k, d = 6, 3, 10\n    a = [7, 2, 7, 7, 4, 2]\n    \n    a.sort()\n    \n    count = 1\n    res = 0\n    \n    for i in range(1, n):\n        if abs(a[i] - a[i-1]) <= d:\n            count += 1\n        else:\n            count = 1\n        res = max(res, count)\n    \n    if res < k:\n        print('NO')\n    else:\n        print('YES')\n    \n    return ''"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You have a pack of n pencils. Each pencil has a color given by a list of n integers a1,..., an. Each pencil has one of three colors: red, green and blue. You are given a positive integer k, the number of empty boxes in the pack, and a non-negative integer d, the difference allowed between the saturations of any two pencils in the same box. There are at most k non-empty boxes in the pack. If it's possible to split all the pencils into k non-empty boxes with the required difference d, print \"YES\", otherwise print \"NO\".\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n, k, d = int(data[0]), int(data[1]), int(data[2])\n    a = [int(x) for x in data[3].split()]\n    a.sort()\n    num_boxes = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] <= d:\n            num_boxes += 1\n        else:\n            break\n    if n <= k:\n        return \"YES\" if num_boxes <= k else \"NO\"\n    return \"NO\" if num_boxes > k else \"YES\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split(\" \")]\n    nums = [int(x) for x in stdin.split(\" \")]\n    nums.sort()\n    res = False\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(nums[i] - nums[j]) <= d:\n                res = True\n            else:\n                res = False\n    if res:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split(\" \")))\n    s = list(map(int, stdin.split(\" \")))\n    s = sorted(s)\n    print(n, k, d)\n    print(s)\n    counter = 1\n    # counter = 0\n    min_s = s[0]\n    max_s = s[0]\n    curr_s = s[0]\n    for i in range(1, n):\n        # print(counter, n)\n        # if counter == n:\n        #     print('YES')\n        #     return 'YES'\n        if max_s - min_s <= d:\n            curr_s = s[i]\n            counter += 1\n        else:\n            counter = 1\n            min_s = s[i]\n            max_s = s[i]\n            curr_s = s[i]\n\n        if counter == k and min_s!= max_s:\n            print('NO')\n            return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def contains(a1: int, a2: int, d: int, n: int) -> bool:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(a1[i] - a1[j]) > d and abs(a2[i] - a2[j]) > d:\n                    return False\n        return True\n\n    def contains_one(a1: int, a2: int, n: int) -> bool:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(a1[i] - a1[j]) > d or abs(a2[i] - a2[j]) > d:\n                    return False\n        return True\n\n    def contains_two(a1: int, a2: int, n: int) -> bool:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(a1[i] - a1[j]) > d or abs(a2[i] - a2[j]) > d:\n                    continue\n                if abs(a1[i] - a1[j]) <= d and abs(a2[i] - a2[j]) <= d:\n                    return True\n        return False\n\n    n, k, d = map(int, stdin.split())\n    a1 = list(map(int, stdin.split()))\n    a2 = list(map(int, stdin.split()))\n    if k == 1:\n        if contains(a1, a2, d, n):\n            return \"YES\"\n        return \"NO\"\n    if k == 2:\n        if contains_one(a1, a2, n):\n            return \"YES\"\n        return \"NO\"\n    if k == 3:\n        if contains_two(a1, a2, n):\n            return \"YES\"\n        return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the given problem.\"\"\"\n    n, k, d = map(int, stdin.split(\" \"))\n    saturation = [int(x) for x in stdin.split(\" \")]\n\n    if n < k:\n        return \"NO\"\n\n    def helper(saturation):\n        \"\"\"helper function for solving the problem.\"\"\"\n        x = [0] * (n + 1)\n        for s in saturation:\n            x[s] += 1\n        boxes = 0\n        box_saturation = 0\n        for i in range(n + 1):\n            if x[i] > 0:\n                box_saturation += x[i]\n                boxes += 1\n            if box_saturation >= k:\n                break\n        difference = n - boxes\n        if box_saturation < k or difference < d:\n            return \"NO\"\n        return \"YES\"\n\n    return helper(saturation)\n\n\ndef"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 7 2 3\")\n    'YES'\n    >>> solution(\"5 7 3 10\")\n    'NO'\n    \"\"\"\n    stdin = [int(i) for i in stdin.split()]\n    n, k, d = stdin[0], stdin[1], stdin[2]\n    a = stdin[3:]\n    a.sort()\n    if k > n:\n        return 'NO'\n    cnt = [0] * k\n    for i in a:\n        if cnt[i % k]:\n            return 'NO'\n        else:\n            cnt[i % k] += 1\n    for i in range(k):\n        if cnt[i] < n // k:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Solution goes here\n    s, d, k = map(int, stdin.split())\n    a = [int(a) for a in stdin.split()]\n    n = len(a)\n    if n < k:\n        return 'NO'\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) > d:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"0 0 0 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.count(\"B\") > 0) + int(stdin.count(\"G\") > 0) + int(stdin.count(\"R\") > 0) + int(stdin.count(\"Y\") > 0))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    bulbs = []\n    for c in stdin:\n        if c == \"!\":\n            bulbs.pop()\n        elif c == \"R\":\n            bulbs.append(\"R\")\n        elif c == \"B\":\n            bulbs.append(\"B\")\n        elif c == \"Y\":\n            bulbs.append(\"Y\")\n        elif c == \"G\":\n            bulbs.append(\"G\")\n    return \" \".join(bulbs)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '0 0 0 0'\n\"\"\"\n\nimport sys\n\nimport utils\n\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {} {} {}'.format(\n        stdin.count('R'), stdin.count('G'), stdin.count('B'), stdin.count('Y'))"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{' '.join(map(lambda x: sum(map(lambda y: y == '!', x)), stdin.split()))}\"\n\ndef"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in stdin:\n        if i == \"R\":\n            a.append(1)\n        elif i == \"B\":\n            a.append(2)\n        elif i == \"Y\":\n            a.append(3)\n        elif i == \"G\":\n            a.append(4)\n        elif i == \"!\":\n            a.append(0)\n    return \" \".join(map(str, a))\n\nprint(solution(\"!GRYB\"))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    aoki_paths = [[0] * N for _ in range(N)]\n    for _ in range(M):\n        s, t = map(int, stdin.split(\" \"))\n        aoki_paths[s - 1][t - 1] = 1\n        aoki_paths[t - 1][s - 1] = 1\n    dist = [0] * N\n    ans = 0.0\n    for n in range(N - 1):\n        dist[n] = 1 / N\n    for i in range(N):\n        for j in range(N):\n            if aoki_paths[i][j] == 1:\n                dist[j] = 0\n        ans += sum(dist) / N\n    return str(ans)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the expected number of passages Takahashi will take\n    without being blocked by Aoki.\n    '''\n    # Read data\n    n, m = map(int, stdin.split())\n    connections = []\n    for _ in range(m):\n        connections.append(list(map(int, stdin.split())))\n    # dp[i][j] := probability of reaching j with probability 1\n    #             from i with probability 1/2\n    dp = [[0] * n for _ in range(n)]\n    for c in connections:\n        s, t = c\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    dp[i][j] += dp[i][s-1] * dp[s-1][j]\n                if i!= j:\n                    dp[i][j] += dp[i][t-1] * dp[t-1][j]\n    # Determine E\n    E = 1\n    for i in range(n):\n        for j in range(n):\n            E *= 2 * dp[i][j] / (dp[i][j] + dp[j][i])\n    # return result\n    return str(E)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split(' ')]\n    paths = []\n    for _ in range(M):\n        a, b = [int(n) for n in stdin.split(' ')]\n        paths.append((a, b))\n\n    seen = [0 for _ in range(N)]\n    seen[0] = 1\n    for _ in range(M):\n        seen[paths[_][0] - 1] = 1\n        seen[paths[_][1] - 1] = 1\n\n    cnt = 0\n    for i in range(N - 1):\n        if seen[i] == 1:\n            cnt += 1\n    return str(cnt / N)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the solution\"\"\"\n    n, m = map(int, stdin.split())\n    ps = []\n    for _ in range(m):\n        ps.append(list(map(int, stdin.split())))\n    ps = sorted(ps, key=lambda ps: ps[0])\n    rooms = [0] * n\n    count = 0\n    i = 0\n    while i < m and rooms[0] == 0:\n        rooms[ps[i][0] - 1] = 1\n        i += 1\n        if i < m and ps[i][0] == ps[i - 1][1] + 1:\n            count += 1\n    while i < m:\n        rooms[ps[i][0] - 1] = 1\n        i += 1\n        if i < m and ps[i][0] == ps[i - 1][1] + 1:\n            count += 1\n    print(count)\n    return count\n\n\ndef"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Args:\n        stdin (str): the input string\n    Returns:\n        str: the answer\n    '''\n    N, M = list(map(int, stdin.split()))\n    p1 = p2 = 0\n    for i in range(M):\n        a, b = list(map(int, stdin.split()))\n        p1 += a\n        p2 += b\n    if p1 < p2:\n        p1, p2 = p2, p1\n    p1 = N - 1 - p1\n    p2 = N - 1 - p2\n    return f'{p1/(p1+p2):.6f}'\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # See https://en.wikipedia.org/wiki/Conway%27s_identity\n    N, M = map(int, stdin.split())\n    r_i = {}\n    r_j = {}\n    for _ in range(N - 1):\n        a, b = map(int, stdin.split('\\n')[0].split())\n        r_i[a] = r_i.get(a, 0) + 1\n        r_j[b] = r_j.get(b, 0) + 1\n    r_i[1] = N - 1\n    r_j[N] = 1\n    E = 0\n    for a, v_a in r_i.items():\n        for b, v_b in r_j.items():\n            if a!= b:\n                E += v_a * v_b / (N - 1)\n    return str(E)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    s = set()\n    for _ in range(n - 1):\n        i, j = map(int, stdin.split(' '))\n        s.add((i, j))\n    for _ in range(m):\n        i, j = map(int, stdin.split(' '))\n        s.add((i, j))\n    s = list(s)\n    s.sort()\n    count = 0\n    c = 0\n    while c < len(s) - 1:\n        count += (s[c + 1][0] - s[c][0])\n        c += 1\n    return str(count / n)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # set up the input variables\n    N, M = stdin.split('\\n')[:2]\n    N = int(N)\n    M = int(M)\n\n    # create an adjacency list from stdin\n    adj_list = {}\n    for i in range(M):\n        source, dest = stdin.split('\\n')[2*i+1:2*i+3]\n        source = int(source)\n        dest = int(dest)\n        if source in adj_list:\n            adj_list[source].append(dest)\n        else:\n            adj_list[source] = [dest]\n        if dest in adj_list:\n            adj_list[dest].append(source)\n        else:\n            adj_list[dest] = [source]\n\n    # create a list of nodes\n    nodes = sorted(set(adj_list.keys()))\n\n    # create an initial path\n    path = [1, N]\n\n    # while there are still nodes in the path, find the next node\n    while path[-1]!= N:\n        # if the node is not in the list of nodes, the path is invalid\n        if path[-1] not in nodes:\n            break\n        # find the next node in the path\n        for dest in adj_list[path[-1]]:\n            # if the node is in the list of nodes\n            if dest in nodes:\n                # append it to the path\n                path.append(dest)\n                # break out of the loop\n                break\n\n    # calculate the probability that Takahashi goes along the path\n    prob = 1\n    for i in range(1, len(path)):\n        prob *= len(adj_list[path[i-1]]) / len(adj_list[path[i]])\n\n    # return the probability\n    return prob"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.readline().split()))\n    passages = [stdin.readline().split() for i in range(m)]\n    passages.sort(key=lambda x: int(x[0]))\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    dp[0][0] = 1\n    dp[1][0] = 1\n    for _ in range(m):\n        s, t = list(map(int, passages.pop(0)))\n        if s == t:\n            continue\n        s, t = min(s, t), max(s, t)\n        for j in range(2):\n            for i in range(s, t + 1):\n                dp[j][i] += dp[not j][i]\n    return f'{dp[0][n-1]/dp[1][n-1]:.6f}'\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given an input consisting of N and M and s_1, t_1,...,t_N, return E.\"\"\"\n    n, m = map(int, stdin.split())\n    rooms = [list(map(int, stdin.split())) for _ in range(m)]\n\n    if n < 2 or n > 600:\n        raise ValueError(\"n must be greater than 1 and less than or equal to 600.\")\n    if m < n - 1 or (m - n + 1) % 2!= 0:\n        raise ValueError(\"m must be greater than n - 1 and divisible by n - 1.\")\n    if any(s < t for s, t in rooms):\n        raise ValueError(\"All values in the s_i, t_i pairs must be greater than t_i.\")\n\n    # Find the length of the path in rooms that starts in Room 1,\n    # then divide by two since every room is visited.\n    # If Aoki blocks the path, then there's a probability of one room being left.\n    # Otherwise, there's a probability of two rooms being left.\n    # Since there are at least N - 1 rooms, the result is 1 / (N - 1) or 1 / N.\n    return (sum(s < t for s, t in rooms) + 1) / n\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the correct answer for Vasya's rounding problem.\"\"\"\n    n: int = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n % 10 == 0:\n        return str(n // 10)\n    else:\n        return str(n - (n % 10) + 10)\n    # return str(int(str(n)[:-1] or 0) + 10 * int(str(n)[-1]))\n    # return str(n - (n % 10) + 10)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '0' if stdin.endswith('0') else '10'"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(int(stdin)))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_pre = str(n)\n    n_pre_rev = n_pre[::-1]\n    n_rev = n_pre_rev[::-1]\n    l1 = list(map(int, n_pre))\n    l2 = list(map(int, n_rev))\n    \n    if l1[0] < l2[0]:\n        m = 1\n        while l1[m] < l2[m]:\n            m = m + 1\n        return n_pre_rev[:m][::-1]\n    \n    else:\n        m = 1\n        while l1[m] > l2[m]:\n            m = m + 1\n        return n_pre[:m][::-1]\n'''"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        if n % 10 > 5:\n            return int(n // 1) * 10\n        return int(n // 1)\n    else:\n        if n % 10 >= 5:\n            return int(n // 1) + 1\n        return int(n // 1)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 0:\n        print(n - 1)\n    else:\n        print(n)"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n-1 if n % 2 else n)"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    stdout = \"\"\n    return stdout\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = stdin\n    if len(n) < 2:\n        return \"0\"\n    n = sorted(n)\n    result = []\n    for i in range(len(n) - 1):\n        if i < len(n) - 1:\n            if n[i] == n[i + 1]:\n                continue\n        result.append(n[i] + n[i + 1])\n    if len(result) == 0:\n        return \"-1\"\n    return \" \".join(result)\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n\\n')\n    t = t.replace('\\n', '')\n    for i in range(len(t)):\n        if t[i] in s:\n            s = s.replace(t[i], '')\n            t = t[:i] + t[i + 1:]\n            break\n    k = 0\n    if s == '':\n        return '0'\n    if s!= '':\n        return '-1'\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n    # \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b\n    a = stdin.lower()\n    b = \"\"\n    for i in a:\n        if i.isalpha():\n            b += i\n    \n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0443\u0441\u0442\u0443\u044e \u0434\u0432\u0443\u043c\u0435\u0440\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443\n    l = len(b) + 1\n    m = []\n    for i in range(l):\n        m.append([])\n        for j in range(l):\n            m[i].append(0)\n\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043f\u0430\u0440\u0430\u043c\u0438\n    for i in range(len(b)):\n        if b[i] == b[i+1]:\n            m[i][i+1] = 1\n            m[i+1][i] = 1\n        else:\n            m[i][i+1] = 0\n            m[i+1][i] = 0\n    \n    # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u044e\u0449\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0438\u0437 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0445 \u043f\u0430\u0440\n    min_len = min(len(b), len(b[::-1]))\n    good_mat = []\n    for i in range(min_len-1):\n        tmp = []\n        for j in range(i+1, min_len):\n            tmp.append(m[i][j])\n        good_mat.append(tmp)\n    \n    good_mat.append(m[min_len-1][min_len:])\n    good_mat.append(m[min_len:min_len-1][::-1])\n\n    # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u0443 \u0438\u0437 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0445 \u043f\u0430\u0440\n    good_pairs = []\n    for i in range(len(good_mat)):\n        tmp = []\n        for j in range(len(good_mat[i])):\n            if good_mat[i][j] == 1:\n                tmp.append(j)\n        good_pairs.append(tmp)\n    \n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u044b \u0438\u0437 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0445 \u043f\u0430\u0440 \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u0438\u0445 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438\n    tmp = []\n    for i in range(len(good_pairs)):\n        for j in range(len(good_pairs[i])):\n            if good_pairs[i][j]!= j:\n                tmp.append(b[good_pairs[i][j]] + b[good_pairs[i][j] + 1])\n    \n    # \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u044b \u0432\u0441\u0435\u0433\u043e 2, \u0437\u043d\u0430\u0447\u0438\u0442 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u0441\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0448\u0438\n    if len(tmp) == 2:\n        res = []\n        for i in range(len(b)):\n            if tmp[0] in b[i] or tmp[1] in b[i]:\n                res.append(b[i])\n        res =''.join(res)\n        if res == stdin:\n            return str(0)\n        else:\n            return str(-1)\n    else:\n        # \u0435\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u044b \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435\n        tmp2 = []\n        for i in range(len(tmp)):\n            for j in range(i+1, len(tmp)):\n                if tmp[i] in tmp[j] and tmp[j] in tmp[i]:\n                    tmp2.append(tmp[j])\n        tmp2 = list(set(tmp2))\n        for i in range(len(tmp2)):\n            for j in range(len(tmp2)):\n                if tmp2[i] in tmp2[j] and tmp2[i] in tmp[j] and tmp2[j] in tmp[j]:\n                    res = []\n                    for k in range(len(tmp)):\n                        if tmp[k] in tmp2[i] or tmp[k] in tmp2[j]:\n                            res.append(tmp[k])\n                    res =''.join(res)\n                    if res == stdin:\n                        return str(len(tmp2))\n        return str(-1)"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    p = []\n    for i, c in enumerate(s):\n        if c not in p:\n            p.append(c)\n    if len(p) < 2:\n        return -1\n    m = {}\n    for i in p:\n        m[i] = []\n        for j in p:\n            if i!= j:\n                m[i].append(j)\n    o = []\n    for i, c in enumerate(s):\n        if c in m:\n            for j in m[c]:\n                if s[i]!= j:\n                    o.append((c, j))\n    for i in o:\n        if len(m[i[0]]) == len(m[i[1]]):\n            return -1\n    s = set()\n    for i in o:\n        for j in range(0, len(s), 2):\n            if j + 1 < len(s):\n                s.add(i[0] + i[1])\n                s.add(i[1] + i[0])\n            else:\n                s.add(i[0] + i[1])\n    return len(s)\nprint(solution(input()))"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    patterns = set(stdin[0])\n    s = stdin[1]\n    if len(patterns) == 1:\n        return '-1'\n    for p in stdin:\n        if len(p)!= len(s):\n            return '-1'\n        if len(set(p))!= len(p):\n            return '-1'\n        for c in p:\n            if c not in patterns:\n                return '-1'\n\n    pairs = {}\n    for i, c in enumerate(s):\n        if c in patterns:\n            pairs[c] = s[i]\n    for p in patterns:\n        if p not in pairs:\n            return '-1'\n    if len(pairs) == len(patterns):\n        return str(len(pairs))\n    else:\n        return '-1'\n    \n    return s\n\n\nsolution(input)\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s, t = set(s), set(t)\n    return str(len([a for a, b in zip(s, t) if a!= b])) if len(s)!= len(t) and s.isdisjoint(t) else \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    first_name = stdin.split(' ')[0]\n    last_name = stdin.split(' ')[1]\n    return first_name[0] + last_name[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  x = stdin.split()\n  y = ''.join(x[0][:1] + x[1][:1])\n  return y"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    f_name = stdin.split(' ')[0]\n    l_name = stdin.split(' ')[1]\n    print(sorted([f_name, l_name])[0][:min(len(f_name), len(l_name))])\n    return sorted([f_name, l_name])[0][:min(len(f_name), len(l_name))]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    firstname, lastname = stdin.split(' ')\n    return min(firstname[:1] + lastname[:1], firstname[:2] + lastname[:2])\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem\"\"\"\n    # (^|_)\n    return \"\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_first_letter(name, last_letter):\n        # first and last letter of each name in alphabetical order\n        # if two letters are the same: return the first one\n        # if they are different: return the first one (alphabetically)\n        return min(name[0], name[-1]) if last_letter < name[0] else name[0]\n    \n    # input\n    name, last_letter = stdin.split(' ')\n    first_letter = find_first_letter(name, last_letter)\n    \n    # solution\n    return first_letter + last_letter\n\nprint(solution(input()))"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a[0] == b[0]:\n        return min(a, b) + \"\".join(sorted(a[1:] + b[1:]))\n    else:\n        return min(a, b) + a[0] + b[0] + \"\".join(sorted(a[1:] + b[1:]))\n\n\ndef"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    firstname = stdin[0:stdin.find(\" \")]\n    lastname = stdin[stdin.find(\" \") + 1:]\n    first = []\n    last = []\n    first = firstname.split(\" \")\n    last = lastname.split(\" \")\n    first = ''.join(first)\n    last = ''.join(last)\n    prefix = first[0] + last[0]\n    first = first[1:]\n    last = last[1:]\n    final = prefix + first[0] + last[0]\n    return final"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = a[:min(len(a),len(b))].lower()\n    b = b[:min(len(a),len(b))].lower()\n    if len(a) < len(b):\n        a, b = b, a\n    if len(a) == len(b) == 0:\n        return '.'\n    res = []\n    for c in a:\n        if c < b[0]:\n            res.append(c)\n        else:\n            break\n    for c in b:\n        if c < a[0]:\n            res.append(c)\n        else:\n            break\n    return ''.join(res)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    first_name = stdin.split(' ')[0]\n    last_name = stdin.split(' ')[1]\n    return min(first_name + last_name, last_name + first_name)\n\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import Tuple\n\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns a str that represents a bracket sequence in the following way:\n        '+- -+ -+ -+'\n    '''\n   ...\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    for i in range(0, len(stdin)):\n        if (stdin[i] == \"[\"):\n            stdin = stdin.replace(stdin[i], \"|+-\")\n        elif (stdin[i] == \"]\"):\n            stdin = stdin.replace(stdin[i], \"|-\")\n        elif (stdin[i] == \"1\"):\n            stdin = stdin.replace(stdin[i], \"1\")\n        elif (stdin[i] == \"0\"):\n            stdin = stdin.replace(stdin[i], \"0\")\n        elif (stdin[i] == \" \"):\n            stdin = stdin.replace(stdin[i], \"+\")\n    \n    return stdin\n    '''\n    \n    print(\"\".join([i if i!= \"1\" and i!= \"0\" else \"-\" for i in stdin.replace(\"[\", \"|+-\").replace(\"]\", \"|-\")]))\n    \n    \nsolution(input())"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... [[][]][]\n   ... ''')\n    '+-        -++- -+\\n|+- -++- -+||   |\\n||   ||   |||   |\\n|+- -++- -+||   |\\n+-        -++- -+\\n'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    brackets = stdin.split(\"\\n\")[1]\n    output = []\n    for i in range(n):\n        if brackets[i] == \"[\":\n            output.append(\"+-\")\n        else:\n            output.append(\"|+-\")\n    return \"\\n\".join(output)\n\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    [!] This solution is not my own, but it was provided by a person in the comments. \n\n    Algorithm:\n\n    Start by creating a horizontal sequence of symbols (the image).\n\n    Then take one symbol from the sequence and start to fill the image from left to right.\n\n    If you encounter a new symbol or left bracket, simply add the symbol to the image and add a space to separate the currently filled symbols.\n\n    If you encounter a right bracket, replace the right symbol by a left symbol, and add a space to separate the currently filled symbols.\n\n    When the image is finished, replace the left symbol by the right symbol, and add a space to separate the currently filled symbols.\n\n    Then repeat the process on the reversed image.\n\n    The algorithm is repeated once. The result is a valid image.\n\n    The reverse of the algorithm is needed because left symbols are replaced by right symbols, and right symbols are replaced by left symbols.\n    \"\"\"\n    n = int(stdin.readline())\n    seq = stdin.readline().replace('\\n', '')\n    seq = '|' + seq + '|'\n\n    s = '+-'\n    for _ in range(n - 1):\n        for c in seq:\n            if c == '|':\n                s += '- '\n            elif c == '1':\n                s += '+ '\n        s += '+-'\n        s +='-'\n    for _ in range(n - 1):\n        for c in seq:\n            if c == '|':\n                s += '- '\n            elif c == '1':\n                s += '+ '\n        s += '+-'\n        s +='-'\n\n    print(s)\n\n    s = '+-'\n    for _ in range(n - 1):\n        for c in seq:\n            if c == '|':\n                s += '- '\n            elif c == '1':\n                s += '+ '\n        s += '+-'\n        s +='-'\n    for _ in range(n - 1):\n        for c in seq:\n            if c == '|':\n                s += '- '\n            elif c == '1':\n                s += '+ '\n        s += '+-'\n        s +='-'\n\n    print(s)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    seq, n, m = stdin.split(\"\\n\"), int(stdin.split(\"\\n\")[0]), int(stdin.split(\"\\n\")[1])\n    print(seq, n, m)\n    return \"\""
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin.replace('\\n','')\n    print(brackets)\n    rows = 2 * len(brackets)\n    cols = len(brackets) + 1\n    matrix = [['' for j in range(cols)] for i in range(rows)]\n    print(matrix)\n\n    # 1) add horizontal bars\n    for i in range(cols):\n        matrix[0][i] = '|'\n        matrix[rows-1][i] = '|'\n    for i in range(rows):\n        matrix[i][0] = '+'\n        matrix[i][cols-1] = '+'\n\n    # 2) add vertical bars\n    for i in range(1, len(brackets) + 1):\n        matrix[0][i] = '|'\n        matrix[1][i] = '|'\n        matrix[rows-1][i] = '|'\n        matrix[i][0] = '+'\n        matrix[i][1] = '+'\n        matrix[i][cols-2] = '+'\n        matrix[i][cols-1] = '+'\n\n    # 3) add '+'\n    for i in range(1, len(brackets) + 1):\n        for j in range(1, len(brackets) + 1):\n            matrix[i][j] = '+'\n\n    # 4) add '-'\n    for i in range(1, len(brackets)):\n        for j in range(1, len(brackets) + 1):\n            if i < j:\n                matrix[i][j] = '-'\n    print(matrix)\n\n    # 5) get string\n    s = ''\n    for i in range(1, len(brackets) + 1):\n        for j in range(1, len(brackets) + 1):\n            s += matrix[i][j]\n        s += '\\n'\n    return s\n\nprint(solution(\"\"\"8\n[[][]][]\n\"\"\"))\nprint(solution(\"\"\"6\n[[][]]\n\"\"\"))\nprint(solution(\"\"\"6\n[[][]]\n\"\"\"))\nprint(solution(\"\"\"2\n[]\n\"\"\"))\nprint(solution(\"\"\"4\n[][]\n\"\"\"))\nprint(solution(\"\"\"4\n[[][]]\n\"\"\"))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution\"\"\"\n    # Get data\n    sequence = stdin\n\n    # Get length\n    length = len(sequence)\n    if length == 0:\n        return \"\"\n\n    # Create dictionary\n    dictionary = dict()\n    for bracket in sequence:\n        dictionary[bracket] = 0\n\n    # Count dictionary\n    for bracket in sequence:\n        if bracket == \"[\":\n            dictionary[\"[\"] += 1\n        elif bracket == \"]\":\n            dictionary[\"]\"] += 1\n            dictionary[\"[\"] -= 1\n            dictionary[\"]\" = dictionary[\"]\"] - 1\n\n    # Check for correct pairs\n    correct_pairs = True\n    for bracket in dictionary:\n        if bracket == \"[\":\n            if dictionary[bracket] == 0:\n                correct_pairs = False\n                break\n        elif bracket == \"]\":\n            if dictionary[bracket] > 0:\n                correct_pairs = False\n                break\n\n    # Solve\n    if correct_pairs:\n        # First bracket\n        stack = [\"1\"]\n        brackets = [\"+\"]\n\n        for bracket in sequence:\n            if bracket == \"[\":\n                brackets.append(\"1\")\n                brackets.append(\"+\")\n            elif bracket == \"]\":\n                brackets.append(\"-\")\n                brackets.append(\"1\")\n                brackets.append(\"+\")\n            elif bracket == \"+\":\n                brackets.append(\"1\")\n                brackets.append(\"+\")\n            elif bracket == \"-\":\n                brackets.append(\"-\")\n                brackets.append(\"1\")\n                brackets.append(\"+\")\n            elif bracket == \"1\":\n                brackets.append(\"1\")\n\n        brackets.append(\"1\")\n        brackets.append(\"1\")\n\n        for bracket in brackets:\n            if bracket == \"+\":\n                stack.append(\"1\")\n                stack.append(\"+\")\n            elif bracket == \"-\":\n                stack.append(\"-\")\n                stack.append(\"1\")\n                stack.append(\"+\")\n            elif bracket == \"1\":\n                stack.append(\"1\")\n\n        # Create image\n        image = \"\"\n        for bracket in stack:\n            if bracket == \"+\":\n                image += \"|\"\n            elif bracket == \"-\":\n                image += \" \"\n\n        # Return\n        return image\n    else:\n        return \"\""
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n[[][]][]\")\n    +-        -++- -+\n    |+- -++- -+||   |\n    ||   ||   |||   |\n    |+- -++- -+||   |\n    +-        -++- -+\n    >>> solution(\"6\\n[[[]]]\")\n    +-     -+\n    |+-   -+|\n    ||+- -+||\n    |||   |||\n    ||+- -+||\n    |+-   -+|\n    +-     -+\n    >>> solution(\"6\\n[[][]]\")\n    +-        -+\n    |+- -+- -+|\n    ||   ||   ||\n    |+- -+- -+||\n    +-        -+\n    >>> solution(\"4\\n[][]\")\n    +- -+\n    |   |\n    +- -+\n    >>> solution(\"2\\n[]\")\n    +- -+\n    |   |\n    +- -+\n    \"\"\"\n    a = stdin.split(\"\\n\")\n    a.pop(0)\n    a = [x[1:-1] for x in a]\n\n    brackets = []\n    for x in a:\n        if x[0] == \"[\":\n            brackets.append(\"[\")\n        if x[0] == \"]\":\n            brackets.append(\"]\")\n        if len(brackets) == len(x):\n            brackets.append(\"\")\n\n    res = []\n    for i in range(len(brackets) - 1):\n        bracket = brackets[i]\n        if bracket == \"[\":\n            res.append(\"+-\")\n        if bracket == \"]\":\n            res.append(\"|+-\")\n\n    res.append(\"+-\")\n\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 100:\n        return \"ERROR\"\n\n    a = stdin\n    q = int((((5 ** 0.5) + 1) / 2) ** len(a))\n    b = a + '0'\n\n    res = \"\"\n    for i in range(len(a)):\n        res += str(int(q ** (len(a) - i - 1)) + int(b[i]) * q ** (len(a) - i - 1)) + \" \"\n    return res"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n1 = stdin[0]\n    n2 = stdin[1]\n    n3 = stdin[2]\n    n4 = stdin[3]\n    n5 = stdin[4]\n    n6 = stdin[5]\n    n7 = stdin[6]\n    n8 = stdin[7]\n    n9 = stdin[8]\n    n10 = stdin[9]\n    n11 = stdin[10]\n    n12 = stdin[11]\n    n13 = stdin[12]\n    n14 = stdin[13]\n    n15 = stdin[14]\n    n16 = stdin[15]\n    n17 = stdin[16]\n    n18 = stdin[17]\n    n19 = stdin[18]\n    n20 = stdin[19]\n    n21 = stdin[20]\n    n22 = stdin[21]\n    n23 = stdin[22]\n    n24 = stdin[23]\n    n25 = stdin[24]\n    n26 = stdin[25]\n    n27 = stdin[26]\n    n28 = stdin[27]\n    n29 = stdin[28]\n    n30 = stdin[29]\n    n31 = stdin[30]\n    n32 = stdin[31]\n    n33 = stdin[32]\n    n34 = stdin[33]\n    n35 = stdin[34]\n    n36 = stdin[35]\n    n37 = stdin[36]\n    n38 = stdin[37]\n    n39 = stdin[38]\n    n40 = stdin[39]\n    n41 = stdin[40]\n    n42 = stdin[41]\n    n43 = stdin[42]\n    n44 = stdin[43]\n    n45 = stdin[44]\n    n46 = stdin[45]\n    n47 = stdin[46]\n    n48 = stdin[47]\n    n49 = stdin[48]\n    n50 = stdin[49]\n    n51 = stdin[50]\n    n52 = stdin[51]\n    n53 = stdin[52]\n    n54 = stdin[53]\n    n55 = stdin[54]\n    n56 = stdin[55]\n    n57 = stdin[56]\n    n58 = stdin[57]\n    n59 = stdin[58]\n    n60 = stdin[59]\n    n61 = stdin[60]\n    n62 = stdin[61]\n    n63 = stdin[62]\n    n64 = stdin[63]\n    n65 = stdin[64]\n    n66 = stdin[65]\n    n67 = stdin[66]\n    n68 = stdin[67]\n    n69 = stdin[68]\n    n70 = stdin[69]\n    n71 = stdin[70]\n    n72 = stdin[71]\n    n73 = stdin[72]\n    n74 = stdin[73]\n    n75 = stdin[74]\n    n76 = stdin[75]\n    n77 = stdin[76]\n    n78 = stdin[77]\n    n79 = stdin[78]\n    n80 = stdin[79]\n    n81 = stdin[80]\n    n82 = stdin[81]\n    n83 = stdin[82]\n    n84 = stdin[83]\n    n85 = stdin[84]\n    n86 = stdin[85]\n    n87 = stdin[86]\n    n88 = stdin[87]\n    n89 = stdin[88]\n    n90 = stdin[89]\n    n91 = stdin[90]\n    n92 = stdin[91]\n    n93 = stdin[92]\n    n94 = stdin[93]\n    n95 = stdin[94]\n    n96 = stdin[95]\n    n97 = stdin[96]\n    n98 = stdin[97]\n    n99 = stdin[98]\n    n100 = stdin[99]\n    n101 = stdin[100]\n    n102 = stdin[101]\n    n103 = stdin[102]\n    n104 = stdin[103]\n    n105 = stdin[104]\n    n106 = stdin[105]\n    n107 = stdin[106]\n    n108 = stdin[107]\n    n109 = stdin[108]\n    n110 = stdin[109]\n    n111 = stdin[110]\n    n112 = stdin[111]\n    n113 = stdin[112]\n    n114 = stdin[113]\n    n115 = stdin[114]\n    n116 = stdin[115]\n    n117 = stdin[116]\n    n118 = stdin[117]\n    n119 = stdin[118]\n    n120 = stdin[119]\n    n121 = stdin[120]\n    n122 = stdin[121]\n    n123 = stdin[122]\n    n124 = stdin[123]\n    n125 = stdin[124]\n    n126 = stdin[125]\n    n127 = stdin[126]\n    n128 = stdin[127]\n    n129 = stdin[128]\n    n130 = stdin[129]\n    n131 = stdin[130]\n    n132 = stdin[131]\n    n133 = stdin[132]\n    n134 = stdin[133]\n    n135 = stdin[134]\n    n136 = stdin[135]\n    n137 = stdin[136]\n    n138 = stdin[137]\n    n139 = stdin[138]\n    n140 = stdin[139]\n    n141 = stdin[140]\n    n142 = stdin[141]\n    n143 = stdin[142]\n    n144 = stdin[143]\n    n145 = stdin[144]\n    n146 = stdin[145]\n    n147 = stdin[146]\n    n148 = stdin[147]\n    n149 = stdin[148]\n    n150 = stdin[149]\n    n151 = stdin[150]\n    n152 = stdin[151]\n    n153 = stdin[152]\n    n154 = stdin[153]\n    n155 = stdin[154]\n    n156 = stdin[155]\n    n157 = stdin[156]\n    n158 = stdin[157]\n    n159 = stdin[158]\n    n160 = stdin[159]"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == '0':\n        stdin = stdin[1:]\n    elif stdin[0] == '1':\n        stdin = '11' + stdin\n    return '=' if stdin == stdin[::-1] else '<' if stdin > stdin[::-1] else '>'\n\ndef"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns larger of the two input strings, or the equal strings'''\n    # input_str1 = input()\n    # input_str2 = input()\n    input_str1 = stdin\n    input_str2 = stdin\n    max_int = 1.618033988 ** 3\n    len_1 = len(input_str1)\n    len_2 = len(input_str2)\n    if len_1 == 1:\n        # str_1 = int(input_str1)\n        str_1 = int(input_str1, 2)\n    else:\n        # str_1 = int(input_str1[1:], 2)\n        str_1 = int(input_str1[1:], 2)\n    if len_2 == 1:\n        # str_2 = int(input_str2)\n        str_2 = int(input_str2, 2)\n    else:\n        # str_2 = int(input_str2[1:], 2)\n        str_2 = int(input_str2[1:], 2)\n    if str_1 > str_2:\n        return '>'\n    elif str_2 > str_1:\n        return '<'\n    else:\n        return '='"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = stdin.split()\n    n1 = int(n1[::-1], base=2)\n    n2 = int(n2[::-1], base=2)\n    return '>' if n1 >= n2 else '<' if n1 < n2 else '='\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split('\\n'))\n    if eval(a) > eval(b):\n        return '>'\n    elif eval(a) < eval(b):\n        return '<'\n    else:\n        return '='"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '>' if stdin.count('1') > stdin.count('0') else '<' if stdin.count('1') < stdin.count('0') else '='\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # 1. Get number of gems.\n    # 2. Get gems and store them in a dict\n    # 3. Get number of absent gems.\n    # 4. Get absent gems and store them in a list.\n    # 5. Return absent gems.\n    num_gems = int(stdin.split(\"\\n\")[0])\n    gems = {}\n    for i in range(num_gems):\n        line = stdin.split(\"\\n\")[i+1]\n        gems[line] = line.lower()\n\n    abs_gems = []\n    for i in range(6):\n        if i not in gems:\n            abs_gems.append(i)\n    return abs_gems\n\n\nsolution(\"4\\npurple\\nred\\nyellow\\norange\\n\")\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    g = 0\n    k = 0\n    v = 0\n    count = {}\n    res = []\n    for i in stdin:\n        i = i.lower()\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for i in ['purple','green','blue','orange','red','yellow']:\n        if i not in count:\n            k+=1\n        else:\n            g+=1\n    for i in ['power','time','space','soul','reality','mind']:\n        v = v+count[i]\n        \n    if v==0:\n        for i in ['power','time','space','soul','reality','mind']:\n            if count[i]==1:\n                res.append(i)\n    elif g==0 and k==0:\n        for i in ['power','time','space','soul','reality','mind']:\n            if count[i]==2:\n                res.append(i)\n    else:\n        res.append(0)\n        \n        \n    return res\n\"\"\"\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    gauntlets = [\n        [\"purple\", \"yellow\"],\n        [\"purple\", \"yellow\"],\n        [\"green\", \"blue\"],\n        [\"green\", \"blue\"],\n        [\"orange\", \"yellow\"],\n        [\"orange\", \"yellow\"],\n    ]\n    g = int(stdin)\n    if g == 0:\n        return \"Time\\nMind\\nSoul\\nPower\\nReality\\nSpace\"\n    res = \"\"\n    for i in range(g):\n        res += gauntlets[i][0] + \"\\n\"\n        res += gauntlets[i][1] + \"\\n\"\n    return res[:-1]\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    all_colors = [\"purple\", \"green\", \"blue\", \"orange\", \"red\", \"yellow\"]\n    g = dict()\n    for color in all_colors:\n        g[color] = 0\n    for line in stdin.split(\"\\n\")[1:]:\n        g[line] += 1\n    for color in g:\n        if g[color] == 0:\n            if color == \"yellow\":\n                print(color.upper())\n            else:\n                print(color.capitalize())\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    gems = {\n        'r': 'Time',\n        'p': 'Power',\n        'y': 'Soul',\n        'o': 'Mind',\n        'g': 'Space',\n        'b': 'Reality'\n    }\n    return '\\n'.join(gems[x] for x in sorted(gems.keys()) if x not in stdin)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    gems = {\n        'purple': 0,\n        'green': 0,\n        'blue': 0,\n        'orange': 0,\n       'red': 0,\n        'yellow': 0\n    }\n    for line in stdin.splitlines():\n        color = line.lower()\n        gems[color] += 1\n    return str(len(gems)) + '\\n' + '\\n'.join(sorted(gems.keys(), key=lambda x: gems[x]))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    gems = {'purple': 0, 'green': 0, 'blue': 0, 'orange': 0,'red': 0, 'yellow': 0}\n    for i in range(int(stdin)):\n        gems[stdin[i]] += 1\n\n    return gems\n\"\"\""
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(i) for i in stdin.split()]\n    n = data[0]\n    a, b = data[1], data[2]\n    if (a % 2 == 0 and b % 2 == 0) or (a % 2!= 0 and b % 2!= 0):\n        return \"Final!\"\n    round_ = 1\n    while a % 2!= 0:\n        a = a // 2\n        b = b // 2\n        round_ += 1\n    return round_\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    count = 0\n    while n > 1:\n        if a + b > n:\n            n -= 1\n            count += 1\n        else:\n            a = (a - 1) % n\n            b = (b - 1) % n\n            count += 1\n    return \"Final!\" if count == 1 else str(count)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    if a > b:\n        a, b = b, a\n    return str(2*n - (a+b-1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, a, b = [int(i) for i in stdin.split()]\n    \n    first = (a - 1) // 2\n    second = (b - 1) // 2\n    \n    print(1 + (first - second) % 2)\n    \n    return ''"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''TODO'''\n\n\ndef"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    counter = 0\n    while n > 2:\n        n = n // 2\n        counter += 1\n    if n == 2 and a!= b:\n        print(counter + 2)\n    else:\n        print(counter + 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    return 'Final!' if n % 2 == 0 and ((a + b) / 2) % n == 0 else a + b\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    if a > n:\n        a, b = b, a\n    if b > n:\n        b = n\n    if a == b:\n        return \"Final!\"\n    if (n - (a - 1)) % 2 == 0:\n        return str(n - (a - 1) // 2)\n    else:\n        return str((n - (a - 1) // 2 + 1))"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_skewer, permutation, sequence = int(stdin.readline()), list(map(int, stdin.readline().split())), list(map(int, stdin.readline().split()))\n    \n    res = 0\n    for i in range(num_skewer):\n        if sequence[i] == 0:\n            if permutation[i] < num_skewer:\n                permutation[i] += 1\n                res += 1\n            else:\n                permutation[i] = 1\n                res += 1\n        else:\n            if permutation[i] > 1:\n                permutation[i] -= 1\n                res += 1\n            else:\n                permutation[i] = num_skewer\n                res += 1\n    \n    return res\n\n\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    m = max(max(p), max(b))\n    # print(m)\n    # print(p)\n    # print(b)\n    m = max(m, 2 * n)\n    # print(m)\n    # print(p)\n    # print(b)\n    ans = 0\n    for i in range(m):\n        # print(i)\n        # print(p)\n        # print(b)\n        ans += (1 + b[p[i] - 1])\n        p[p[i] - 1] = i + 1\n        # print(p)\n        # print(b)\n        if p[i]!= i + 1:\n            ans -= 1\n            b[p[i] - 1] = 1 - b[p[i] - 1]\n    return str(ans)"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3 2 1\\n0 1 1 1\\n\")\n    2\n    \"\"\"\n    num = int(stdin.split(\"\\n\")[0])\n    permutation = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    b = [int(i) for i in stdin.split(\"\\n\")[2].split(\" \")]\n\n    permutation_sort = sorted(permutation)\n    b_sort = sorted(b, reverse=True)\n    permutation_sort_rev = list(reversed(permutation))\n    b_sort_rev = list(reversed(b))\n\n    # permutation_sort.sort()\n    # b_sort.sort()\n    # permutation_sort_rev.sort()\n    # b_sort_rev.sort()\n\n    permutation_dict = dict()\n    for i in range(num):\n        permutation_dict[permutation[i]] = i\n\n    b_dict = dict()\n    for i in range(num):\n        b_dict[b[i]] = i\n\n    sum = 0\n    for i in range(num):\n        # first direction\n        temp_sum = abs(permutation_dict[permutation[i]] - permutation_dict[permutation[i + 1]])\n        if i == 0:\n            temp_sum = abs(temp_sum - num)\n        if temp_sum < sum or (temp_sum == sum and permutation_dict[permutation[i]] < permutation_dict[permutation[i + 1]]):\n            sum = temp_sum\n\n        # second direction\n        temp_sum = abs(b_dict[b[i]] - b_dict[b[i + 1]])\n        if i == 0:\n            temp_sum = abs(temp_sum - num)\n        if temp_sum < sum or (temp_sum == sum and b_dict[b[i]] < b_dict[b[i + 1]]):\n            sum = temp_sum\n\n    # print(permutation_sort)\n    # print(permutation_sort_rev)\n    # print(b_sort)\n    # print(b_sort_rev)\n    return sum\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Not Implemented\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, permutation, b = map(int, stdin.split())\n    min_change = 0\n    if n == len(permutation) and n == len(b):\n        for i in range(n):\n            if permutation[i]!= b[i]:\n                min_change += 1\n    return str(min_change)"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        \"\"\"\n        Greatest common divisor.\n        \"\"\"\n        return b if not a else gcd(b, a % b)\n\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Return True if n is a prime,\n        False otherwise.\n        \"\"\"\n        if n < 2 or n % 2 == 0:\n            return False\n        d = 3\n        while d ** 2 <= n:\n            if n % d == 0:\n                return False\n            d += 2\n        return True\n\n    # n = 3 ** k\n    k = 1\n    while (n := n // 3) > 0:\n        k += 1\n    return str(k - 2)"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return the minimum number of steps needed for each skewers to reach each position in the direction of p\n    '''\n    pass\n\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3 2 1\\n0 1 1 1\\n')\n    '2'\n    \"\"\"\n    n, permutation, permutation_reversed = [int(x) for x in stdin.split('\\n')]\n    b = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    dp = [[0, 0] for _ in range(2 * n)]\n\n    for i in range(n):\n        dp[i + n][permutation[i]] += b[i]\n        dp[i + n][permutation_reversed[i]] += 1 - b[i]\n\n    dp[2 * n - 1][0] += 1\n    dp[2 * n - 1][1] += 1\n\n    for k in range(2 * n - 2, -1, -1):\n        for i in range(2):\n            dp[k][i] += min(dp[k + 1][i ^ 1], dp[k + 1][(i + 1) % 2])\n    return str(dp[0][0])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    start, end, speed, distance = [int(i) for i in stdin.split(' ')]\n    \n    diff = end - start\n    total = diff * speed\n    \n    if distance <= total:\n        print(diff)\n    else:\n        print(diff + total - distance)"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = [int(x) for x in stdin.split('\\n')]\n    return str(v2 - v1) if d == 0 else str(d + v1 + v2 - 2 * d * t)\n\n\ndef"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = [int(i) for i in stdin.split()]\n    t_max = v_2 / d - v_1 / d\n    if t_max <= 0:\n        return str(v_2 - v_1)\n    else:\n        return str(v_1 + v_2 * t_max)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum length of the segment.\"\"\"\n    \n    [v1, v2, t, d] = [int(i) for i in stdin.split('\\n')[0].split()]\n    if abs(v2 - v1) < d:\n        return t * abs(v2 - v1)\n    return t * (v2 - v1)\n\nprint(solution(stdin))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum possible length of the path segment in meters.\n\n    Args:\n        stdin (str): input.\n\n    Returns:\n        str: output.\n    \"\"\"\n    first_line = stdin.readline().strip().split(' ')\n    v1, v2 = int(first_line[0]), int(first_line[1])\n    second_line = stdin.readline().strip().split(' ')\n    t, d = int(second_line[0]), int(second_line[1])\n    \n    result = v2 * t\n    if d < v2:\n        result = v2 * t - v2 * (d // v2)\n    \n    print(result)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, d, t = map(int, stdin.split('\\n')[0].split(' '))\n    n = 0\n    while t > 0:\n        t -= 1\n        n += v_1 - v_2 if v_1 >= v_2 else v_1 + d - v_2\n    return n\nprint(solution('5 6\\n4 2'))"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = [int(n) for n in stdin.split('\\n')]\n    \n    max_speed = v2 - v1\n    min_speed = v1 - d\n    if max_speed < 0:\n        max_speed = d\n    if min_speed > 0:\n        min_speed = 0\n    \n    if max_speed == 0:\n        print(t)\n    else:\n        print(t * (max_speed - min_speed))"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds maximum length of a segment of road Polycarpus can cover in t seconds.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    v_1, v_2, t, d = map(int, stdin.split())\n    max_ = min(v_2 - v_1, v_1 + v_2 - d * t, (v_2 - v_1) / 2)\n    return str(int(max_))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, speed_at_start, speed_at_end, max_speed_change = [int(x) for x in stdin.split()]\n    time = int(stdin.split()[0])\n    max_d = int(stdin.split()[1])\n\n    return str(time * (speed_at_end - speed_at_start) + (speed_at_start + speed_at_end) / 2)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    camels = sorted(list(map(int, stdin.split(' ')[1:])))\n    part_length, part_weight = map(int, stdin.split(' ')[:2])\n    bridge = [part_length for _ in range(part_weight)]\n    bridge = sorted(bridge, reverse=True)\n    for i in range(M):\n        length, weight = map(int, stdin.split(' ')[i * 2 + 2: i * 2 + 4])\n        for j in range(weight):\n            bridge[j] = length\n    bridge = sorted(bridge, reverse=True)\n    for i in range(N):\n        print(camels[i])\n        if camels[i] + i > N:\n            print(-1)\n            return\n    return ''"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = dict(map(int, i.split()) for i in stdin.split(\"\\n\")[1:-1])\n    N, M = data.pop(\"N\"), data.pop(\"M\")\n    w = data.pop(\"w\")\n    l = data.pop(\"l\")\n    v = data.pop(\"v\")\n    min_distance = float(\"inf\")\n    camels = list(range(1, N + 1))\n    for _ in range(M):\n        dists = list(filter(lambda i: i[1] >= w, zip(camels, [0] + list(l)[:-1] + [0])))\n        dists = sorted(dists, key=lambda i: i[0], reverse=True)\n        camel1, distance = dists[0]\n        if distance < v:\n            break\n        dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[1:])))\n        dists = sorted(dists, key=lambda i: i[0], reverse=True)\n        camel2, distance = dists[0]\n        if distance < v:\n            break\n        if camel1 == 1:\n            dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[:1])))\n            dists = sorted(dists, key=lambda i: i[0], reverse=True)\n            camel3, distance = dists[0]\n            if distance < v:\n                break\n        elif camel1 == N:\n            dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[:-1] + [0])))\n            dists = sorted(dists, key=lambda i: i[0], reverse=True)\n            camel3, distance = dists[0]\n            if distance < v:\n                break\n        dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[1:])))\n        dists = sorted(dists, key=lambda i: i[0], reverse=True)\n        camel3, distance = dists[0]\n        if distance < v:\n            break\n        if camel2 == 1:\n            dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[:1])))\n            dists = sorted(dists, key=lambda i: i[0], reverse=True)\n            camel4, distance = dists[0]\n            if distance < v:\n                break\n        elif camel2 == N:\n            dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[:-1] + [0])))\n            dists = sorted(dists, key=lambda i: i[0], reverse=True)\n            camel4, distance = dists[0]\n            if distance < v:\n                break\n        dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[1:])))\n        dists = sorted(dists, key=lambda i: i[0], reverse=True)\n        camel4, distance = dists[0]\n        if distance < v:\n            break\n        if camel3 == 1:\n            dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[:1])))\n            dists = sorted(dists, key=lambda i: i[0], reverse=True)\n            camel5, distance = dists[0]\n            if distance < v:\n                break\n        elif camel3 == N:\n            dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[:-1] + [0])))\n            dists = sorted(dists, key=lambda i: i[0], reverse=True)\n            camel5, distance = dists[0]\n            if distance < v:\n                break\n        dists = list(filter(lambda i: i[1] >= w, zip(camels, list(l)[1:])))\n        dists = sorted(dists, key=lambda i: i[0], reverse=True)\n        camel5, distance = dists[0]\n        if distance < v:\n            break\n        camels = camels[1:] + [camels[0]]\n        min_distance = min(min_distance, (distance - w) / v)\n    if min_distance == float(\"inf\"):\n        return \"-1\"\n    return str(min_distance)\n\n\ndef"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    v.insert(0, 0)\n    v.append(0)\n    p = [0] * (n + 2)\n    dp = [0] * (n + 2)\n    dp[1] = l[0] * weights[0]\n    dp[2] = max(l[0], l[1]) * v[1]\n    for i in range(1, m + 1):\n        p[i + 1] = p[i] + l[i]\n        dp[i + 1] = max(dp[i], dp[p[i]] + l[i] * weights[i])\n    return dp[m + 1]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 2\\n1 4 2\\n10 4')\n    10\n    \"\"\"\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    part_lengths, part_weights = [], []\n    for i in range(1, M + 1):\n        length, weight = map(int, lines[i].split())\n        part_lengths.append(length)\n        part_weights.append(weight)\n    left_weight, right_weight = map(int, lines[M + 1].split())\n    min_distance = 10 ** 10\n    # \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0438\u0434\u0435\u0442 \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e \u0438 \u0432\u0441\u0435 \u0442\u0430\u043a\u0438 \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u043e, \u0447\u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u043c\u0435\u043b\u044c \u0440\u0430\u0437\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438\n    for permutation in itertools.permutations(range(N + 1)):\n        distance = 0\n        weight_left = part_weights[0]\n        weight_right = part_weights[-1]\n        for i in range(M):\n            l = part_lengths[i]\n            w_left, w_right = 0, 0\n            for j in range(l):\n                if permutation[j] == 0:\n                    w_left += weight_left\n                else:\n                    w_left += part_weights[permutation[j] - 1]\n                if permutation[j] == N:\n                    w_right += weight_right\n                else:\n                    w_right += part_weights[permutation[j]]\n            distance += min(abs(w_left - right_weight), abs(w_right - left_weight))\n            weight_left = part_weights[permutation[l]]\n            weight_right = part_weights[permutation[l + 1]]\n        if distance < min_distance:\n            min_distance = distance\n        if distance == 0:\n            break\n    return str(min_distance) if min_distance!= 10 ** 10 else '-1'\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Compute solution for the given input'\n    # Get input\n    N, M, *w, *l, *v = map(int, stdin.split())\n    w = list(map(int, w))\n    l = list(map(int, l))\n    v = list(map(int, v))\n    assert len(w) == N and len(l) == N and len(v) == M\n    \n    # Max weight that will not cause collapse\n    weight = 0\n    for part_weight, part_length, part_capacity in zip(w, l, v):\n        assert part_weight <= part_capacity\n        weight += part_weight\n        weight += part_length - part_capacity\n    if weight > sum(v):\n        return '-1'\n    \n    # Find first max weight\n    first_max_weight = 0\n    for part_length, part_weight, part_capacity in zip(l, w, v):\n        if part_weight > part_capacity:\n            first_max_weight = part_capacity\n        else:\n            break\n    assert first_max_weight\n    \n    # Find last max weight\n    last_max_weight = 0\n    for part_length, part_weight, part_capacity in zip(l, w, v):\n        if part_weight > part_capacity:\n            last_max_weight = part_capacity\n        else:\n            break\n    assert last_max_weight\n    \n    # Find the distance\n    for i in range(N):\n        first_max_weight -= w[i]\n        last_max_weight -= w[i]\n        first_max_weight -= l[i] + v[i]\n        last_max_weight -= l[i] + v[i]\n        if first_max_weight < 0 or last_max_weight < 0:\n            return str(i + 1)\n    assert False\n    \n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3\\n1 2 3 4\\n1 3\\n2 4')\n    6\n    >>> solution('3 2\\n1 4 2\\n10 4')\n    -1\n    >>> solution('4 2\\n1 2 3 4\\n10 4')\n    6\n    \"\"\"\n    n, m = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    w.sort()\n    v.sort()\n    l.sort()\n    result = 10**9\n    for i in range(n):\n        for j in range(n):\n            if (i+j) < n:\n                result = min(result, abs(w[i] - w[j] + v[i+j] - v[j+i]))\n    return str(result) if result < 10**9 else '-1'\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    n, m = [int(v) for v in stdin.split(' ')]\n\n    weights = [int(v) for v in stdin.split('\\n')[1].split(' ')]\n    lengths = [int(v) for v in stdin.split('\\n')[2].split(' ')]\n    capacities = [int(v) for v in stdin.split('\\n')[3].split(' ')]\n\n    assert len(weights) == n\n    assert len(lengths) == m\n    assert len(capacities) == m\n    if n == 1:\n        assert lengths[0] == 0\n        assert capacities[0] == 0\n        assert weights[0] == 0\n\n    def is_valid(weights, lengths, capacities):\n        return sum(weights) <= sum(capacities) and \\\n            all(l * w <= c for l, w, c in zip(lengths, weights, capacities))\n\n    if is_valid(weights, lengths, capacities):\n        return sum(lengths)\n\n    def is_valid_part(weights, lengths, capacities, partition):\n        capacities_part = [0] + [capacities[partition[i]] for i in range(1, m + 1)]\n        weights_part = [0] + [weights[partition[i]] for i in range(1, m + 1)]\n        lengths_part = [0] + [lengths[partition[i]] for i in range(1, m + 1)]\n        return is_valid(weights_part, lengths_part, capacities_part)\n\n    def is_valid_all_parts(weights, lengths, capacities):\n        return all(is_valid_part(weights, lengths, capacities, part) for part in partition_all(m, n))\n\n    partition = list(range(m))\n    assert is_valid_all_parts(weights, lengths, capacities)\n    return min(lengths[partition[0]], lengths[partition[-1]])\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n, m = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    v = list(map(int, stdin.split()))\n    p = [i for i in range(n)]\n    i = 0\n    while len(p) > 1:\n        j = i % len(p)\n        if w[j] > v[j]:\n            p.pop(j)\n            i -= 1\n        else:\n            if len(p) == 2:\n                break\n            i += 1\n\n    if len(p) == 1:\n        return \"-1\"\n    else:\n        return str(l[p[1]] - l[p[0]])\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0:\n        return str(0)\n    elif b <= a:\n        return str(0)\n    else:\n        n = 0\n        while a:\n            a, b = b, a % b\n            n += 1\n        return str(n % 10)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(pow(a, b, 10))[-1]"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    print(int(((b * b) ** (1 / a)) % 10))\n    return ''"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(int(f'{factorial(b) / factorial(a):.0f}') % 10)\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = a - b\n    if c == 0:\n        return 0\n    if c > 0:\n        return 1\n    return c + 1\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    numerator = 1\n    denominator = 1\n    for i in range(1, b + 1):\n        numerator *= i\n        denominator *= a\n    return str(int(str(numerator / denominator)[-1]))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(math.factorial(a) / math.factorial(b)))[-1]\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n\n    def phoenix_reincarnations_a_times(a):\n        n = 0\n        while True:\n            n += a\n            yield n\n            a += 1\n\n    def phoenix_reincarnations_b_times(b):\n        for n in range(1, b + 1):\n            yield n\n\n    def phoenix_reincarnations(a, b):\n        return sum(\n            1\n            for i in phoenix_reincarnations_a_times(a)\n            for j in phoenix_reincarnations_b_times(b)\n            if i == j\n        )\n\n    return str(phoenix_reincarnations(a, b) % 10)\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(pow(a, b, 10))[-1]\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return int(f\"{(a * math.factorial(b)) % 10}\"[-1])\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    lily = stdin\n    homes = [1, n]\n    jumps = 0\n    for i in range(1, n + 1):\n        if i == n:\n            break\n        if lily[i - 1] == '0':\n            homes.append(i)\n    homes.sort()\n    if homes[0]!= 1:\n        return -1\n    for i in range(1, len(homes)):\n        if homes[i] - homes[i - 1] > d:\n            return -1\n        else:\n            jumps += (homes[i] - homes[i - 1] - 1) // d\n    return jumps\n\nprint(solution(input()))"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.split()]\n    arr = [0 if x == '0' else 1 for x in stdin]\n    cost = 0\n    for i in range(n):\n        if arr[i]:\n            cost += 1\n            if i + d >= n:\n                return -1\n            if i + d + 1 < n and arr[i + d + 1]:\n                arr[i + d + 1] = 0\n                cost += 1\n                if i + d + 2 < n and arr[i + d + 2]:\n                    arr[i + d + 2] = 0\n                    cost += 1\n                    if i + d + 3 < n and arr[i + d + 3]:\n                        arr[i + d + 3] = 0\n                        cost += 1\n                        if i + d + 4 < n and arr[i + d + 4]:\n                            arr[i + d + 4] = 0\n                            cost += 1\n                            if i + d + 5 < n and arr[i + d + 5]:\n                                arr[i + d + 5] = 0\n                                cost += 1\n                                if i + d + 6 < n and arr[i + d + 6]:\n                                    arr[i + d + 6] = 0\n                                    cost += 1\n    return cost"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points_count = int(stdin[0].split()[0])\n    max_jump_size = int(stdin[0].split()[1])\n    lilies_strings = list(stdin[1])\n    for i in range(1, len(lilies_strings)):\n        lilies_strings[i] = int(lilies_strings[i])\n    lilies_dict = {}\n    for index in range(1, len(lilies_strings)):\n        if lilies_strings[index] == 1:\n            lilies_dict[index] = True\n    result = 0\n    if len(lilies_dict) == 0:\n        result = -1\n    else:\n        current_index = 1\n        while current_index < points_count:\n            current_max_index = current_index + max_jump_size\n            if current_max_index > points_count:\n                current_max_index = points_count\n            for jump_index in range(current_index + 1, current_max_index + 1):\n                if jump_index not in lilies_dict:\n                    current_index = jump_index - 1\n                    result += 1\n                    break\n            else:\n                current_index += 1\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport sys\n\n\ndef"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the Frog Jumping Problem.\n\n    Given that:\n        1. Frog can jump either 1 or 2 steps at a time\n        2. Frog can jump only from the position immediately behind it\n        3. Frog can jump only to the positions immediately beyond it\n        4. Frog can never jump to the position that is farther than 2 steps away\n        5. The number of frogs is given\n        6. The frogs starting positions are given\n\n    We are asked to output the minimal number of jumps that the frog must make in order to reach the end of the river.\n\n    If the frog can not reach the end of the river, output -1\n\n    Parameters\n    ----------\n    stdin : str\n        The input of the problem.\n\n    Returns\n    -------\n    str\n        The solution of the problem.\n\n    \"\"\"\n\n    # Get the input\n    n = int(stdin.split(\" \")[0])\n    d = int(stdin.split(\" \")[1])\n    lily = stdin.split(\"\\n\")[1]\n\n    # Calculate the possible start and end points\n    start = [i for i in range(1, n + 1)]\n    end = []\n    for i in range(1, n + 1):\n        if lily[i - 1] == \"1\":\n            end.append(i)\n\n    # Calculate the minimum number of jumps\n    min = n\n    for i in start:\n        for j in end:\n            if i < j:\n                temp = j - i - 1\n                if temp <= d and temp < min:\n                    min = temp\n    if min == n:\n        return -1\n    return min\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin[:n]\n\n    min_dist = -1\n    if s[0] == '1':\n        min_dist = 0\n    elif s[-1] == '1':\n        min_dist = 1\n    else:\n        for i in range(1, n - 1):\n            if s[i] == '1' and s[i - 1] == '0' and s[i + 1] == '0':\n                min_dist = i\n                break\n\n    return min_dist\n\n\ndef"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return '2'\n    \n    for i in range(3, 1000):\n        if n % i == 0:\n            return str(i)\n        \n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '2'"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"no such m\" if find_m(stdin) == [] else \"1\" + \" \".join(map(str, find_m(stdin)))\n\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    for m in range(1, 10 ** 3 + 1):\n        if m > 1 and n * m + 1 > 10 ** 3:\n            return str(m - 1)\n    return str(m)\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(next((x for x in range(1, 1001) if n * x + 1 not in primes_set), None))\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    \n    \n    \n\ndef"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 12345 == 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) % 5678 == 0 else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"YES\" if n % (1_234_567 * 123_456 * 1_234) == 0 else \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n\n    return \"\""
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for a in range(1, n // 12345 + 1):\n        b = n - a * 12345\n        if b % 1234 == 0:\n            c = b // 1234\n            s = a * 12345 + c * 1234 + a * c\n            if s == n:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 12345) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution is an easy O(N^2) solution, that uses a simple check of all the intersections in the strip.\"\"\"\n    n = int(stdin.readline())\n    x_1, x_2 = map(int, stdin.readline().split())\n    k_i, b_i = [0], [0]\n\n    for _ in range(n):\n        k_i.append(int(stdin.readline()))\n        b_i.append(int(stdin.readline()))\n\n    ans = \"No\"\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if x_1 < (k_i[i] * x_2 + b_i[i] - k_i[j] * x_1 - b_i[j]) / (k_i[i] - k_i[j]):\n                ans = \"Yes\"\n    return ans\n\n-----Test-----\n\nInput\n4\n1 2\n1 2\n1 0\n0 1\n0 2\n\nOutput\nNO\n\nInput\n2\n1 3\n1 0\n-1 3\n\nOutput\nYES\n\nInput\n2\n1 3\n1 0\n0 3\n\nOutput\nNO\n\nInput\n2\n1 3\n1 0\n0 3\n\nOutput\nYES\n\n\n-----Explanation-----\n\nIn the first sample the intersection is located on the border of the strip, so there is no point inside it.\nIn the second sample the intersection is located inside the strip.\nIn the third sample there are two intersections, so there is at least one point inside the strip.\nIn the fourth sample there is no intersection, so there is no point inside the strip.\n\"\"\"\n\ndef"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input format:\n    [int] n\n    [int] x_1\n    [int] x_2\n\n    Output format:\n    \"Yes\" or \"No\"\n    '''\n   ...\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    def is_inside(line1, line2):\n        x_1, y_1 = line1\n        x_2, y_2 = line2\n\n        return (x_1 < x_2 < x_1 + 1 and y_1 == y_2) or (x_2 < x_1 < x_2 + 1 and y_1 == y_2)\n\n    x_1, x_2 = map(int, stdin.split())\n    lines = []\n\n    for _ in range(int(stdin)):\n        k, b = map(int, stdin.split())\n        lines.append((k, b))\n\n    # intersection of two lines\n    for i in range(len(lines) - 1):\n        for j in range(i + 1, len(lines)):\n            if is_inside(lines[i], lines[j]):\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    x_1, x_2 = list(map(int, lines[1].split()))\n    lines = lines[2:]\n\n    xs = [0] * (n + 1)\n    ys = [0] * (n + 1)\n    for i, line in enumerate(lines):\n        k, b = list(map(int, line.split()))\n        xs[i + 1] = xs[i] + (x_2 - x_1) * k\n        ys[i + 1] = ys[i] + (x_2 - x_1) * b\n\n    xs = sorted(xs)\n    ys = sorted(ys)\n    for i in range(n):\n        if xs[i + 1] >= x_2:\n            break\n        for j in range(i + 1, n):\n            if xs[i + 1] < xs[j] < x_2 and ys[j] - ys[i] < x_2 - xs[i + 1]:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 6:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        if i <= n:\n            result += 1 if (i % 2) == 0 else 2\n        else:\n            result -= 1 if (i % 2) == 0 else 2\n    return result\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(answer)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(count_splits(n))\n\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of different split weights of $n$.\"\"\"\n    n = int(stdin)\n\n    # split the given number into nonincreasing sequences of positive integers\n    splits = split(n)\n\n    # count the number of different split weights\n    return len(set([split_weight(split) for split in splits]))\n\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1 if i % 2 == 0 else 2\n    print(dp)\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] += 1 if dp[j] == 1 and i - j >= 2 else 0\n    return dp[-1]"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len({len(x.split(maxsplit=1)) for x in stdin.split(\"8\")}))\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            dp[i] += dp[i // 3]\n        if i % 2 == 0:\n            dp[i] += dp[i // 2]\n        dp[i] += dp[i - 1]\n\n    return str(dp[n])\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Recursion(n) =\n    # 1. If n = 1\n    # 2. If n = 2\n    # 3. Else\n    #   If n = 3\n    #   Else\n    #   Recursion(n - 1) + Recursion(n - 2) + Recursion(n - 3)\n    if n < 4:\n        return 1\n    elif n < 5:\n        return 2\n    else:\n        return solution(n - 1) + solution(n - 2) + solution(n - 3)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not change anything below this line.\n    # It's used to run your solution in an automated test.\n    from collections import defaultdict\n    import sys\n\n    def get_sol(n):\n        # Implement your solution here.\n        d = defaultdict(int)\n        for x in range(1, n + 1):\n            for i in range(1, n):\n                if x == i:\n                    d[x] += 1\n                else:\n                    d[x] += 1\n                    d[x - i] += 1\n        print(d)\n        return d[n]\n\n    # Implement your code here.\n    n = int(stdin)\n    print(get_sol(n))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(stdin[0], stdin[1])\n\"\"\"\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split(' '))\nprint(k - (n - k), k)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return f\"{1 if n >= k else n - k + 1} {n if n <= k else k - 1}\""
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n - 1:\n        print(1, n - k)\n    else:\n        print(0, n)\n    return ''"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    print(n - k + 1, n - k + 2)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(s, n - s - k)"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    return n, k\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    return str(min(k - 1, n - k)) +'' + str(max(k - 1, n - k))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    print(n - k + 1, n - k)\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(int(stdin))\n    \n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin.replace(\"\\n\", \"\")) - 1, 0))\n\n\ndef"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    return f\"{int(n ** 0.5)}\"\n\n'''"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    # iterate over all pairs\n    # [1,2,3,4]\n    # [1,3] [2,3] [1,4] [2,4]\n    # the first pair [1, 2] [3, 4] is removed\n    # the second pair [1,3] [2,4] is removed\n    # the third pair [1,4] [2,3] is removed\n    # [1, 2] [3, 4]\n    # we have 4 pairs\n    # we have 4 candidates\n    # we have 1 winner\n    # [1, 2] [3, 4]\n    # we have 3 pairs\n    # we have 3 candidates\n    # we have 1 winner\n    # 1 2 3 4\n    # 1 2 4 3\n    # we have 2 pairs\n    # we have 2 candidates\n    # we have 1 winner\n    # 1 2 4 3\n    # we have 3 pairs\n    # we have 3 candidates\n    # we have 1 winner\n    # we have 1 pair\n    # we have 1 winner\n    # 1 2 3 4\n    # 2 1 3 4\n    # we have 2 pairs\n    # we have 2 candidates\n    # we have 1 winner\n    # 1 2 3 4\n    # 2 1 3 4\n    # we have 1 pair\n    # we have 1 winner\n    # 1 2 3 4\n    # we have 2 pairs\n    # we have 2 candidates\n    # we have 1 winner\n    # 1 2 3 4\n    # 2 1 3 4\n    # we have 1 pair\n    # we have 1 winner\n    # 1 2 3 4\n    # we have 3 pairs\n    # we have 3 candidates\n    # we have 1 winner\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # we have 4 pairs\n    # we have 4 candidates\n    # we have 1 winner\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # we have 5 pairs\n    # we have 5 candidates\n    # we have 1 winner\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # we have 6 pairs\n    # we have 6 candidates\n    # we have 1 winner\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    # 4 1 2 3\n    # 5 1 2 3\n    # 6 1 2 3\n    # 1 2 3 4\n    # 2 1 3 4\n    # 3 1 2 4\n    "
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"VV\")\n    1\n    >>> solution(\"VKKKKKKKKKVVVVVVVVVK\")\n    3\n    >>> solution(\"KVKV\")\n    1\n    >>> solution(\"VK\")\n    0\n    \"\"\"\n    string = stdin.strip()\n    v_count = 0\n    k_count = 0\n    if len(string) > 0:\n        for character in string:\n            if character == \"V\":\n                v_count += 1\n            elif character == \"K\":\n                k_count += 1\n\n    if v_count >= k_count:\n        v_to_k = k_count - v_count\n        v_to_k_count = int(string.count(\"V\") / v_to_k)\n    else:\n        k_to_v = v_count - k_count\n        k_to_v_count = int(string.count(\"K\") / k_to_v)\n\n    return min(v_to_k_count, k_to_v_count)\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(stdin.split(\"V\"))))\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here.\n    :param stdin: The standard input.\n    :return: The solution to the problem.\n    \"\"\"\n    return 1\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    counts = dict()\n    for char in stdin:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return max(counts.values())\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in a string, and outputs the maximum number of times \"VK\" appears as a substring.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: Output string.\n    \"\"\"\n    num_v = 0\n    num_k = 0\n    max_v = 0\n    max_k = 0\n    for char in stdin:\n        if char == 'V':\n            num_v += 1\n            if num_v > max_v:\n                max_v = num_v\n        elif char == 'K':\n            num_k += 1\n            if num_k > max_k:\n                max_k = num_k\n    if max_v > max_k:\n        return 1\n    return 0\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] == \"VK\":\n            count += 1\n    return count\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin)\n    if n < 2:\n        return 1\n    if n < 3:\n        return 2\n    return 4\n\n\ndef"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_line_valid(line: str) -> bool:\n        return len(line) == 8\n\n    def is_square_valid(line: str) -> bool:\n        return int(line[1]) <= int(line[3]) and int(line[3]) <= int(line[5]) and int(line[5]) <= int(line[7])\n\n    def is_segment_valid(line: str) -> bool:\n        return (int(line[1]) == int(line[3]) and int(line[3]) == int(line[7])) \\\n            or (int(line[1]) == int(line[5]) and int(line[5]) == int(line[7]))\n\n    def is_square_valid_2(line: str) -> bool:\n        return int(line[1]) <= int(line[3]) and int(line[3]) <= int(line[5]) and int(line[5]) <= int(line[7]) and \\\n               int(line[1]) <= int(line[4]) and int(line[4]) <= int(line[6]) and int(line[6]) <= int(line[8])\n\n    def get_number_of_segments(n: int) -> int:\n        return n - 1\n\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return 0\n    if n == 1:\n        return 2\n\n    lines = stdin.readlines()\n    valid_lines = list(filter(is_line_valid, lines))\n    squares = list(filter(is_square_valid, valid_lines))\n    segments = list(filter(is_segment_valid, valid_lines))\n\n    squares_count = len(squares)\n    segments_count = len(segments)\n\n    print(get_number_of_segments(squares_count + segments_count))\n    return get_number_of_segments(squares_count + segments_count)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    \n    years = 0\n    while a < b:\n        a = a * 3\n        years += 1\n        b = b * 2\n        if a >= b:\n            break\n        years += 1\n        \n    return str(years)\n    \n    \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    limak, bob = map(int, stdin.split(' '))\n    return 1 + int(limak > bob)\nprint(solution(input()))\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = list(map(int, stdin.split()))\n    count = 0\n    while True:\n        if a > b:\n            if a % 3 == 0:\n                count += a / 3\n                a += 1\n            else:\n                count += (a - b) / 2\n                a += 1\n            if b % 2 == 0:\n                count += b / 2\n                b += 1\n            else:\n                count += b - 1\n                b += 1\n        else:\n            break\n    return str(int(count))\n\nsolution(\"4 7\")\nsolution(\"4 9\")\nsolution(\"1 1\")\n\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a >= b:\n        print(a // b)\n        return\n    while b < a * 2:\n        b *= 2\n        a += 1\n    print(a)\n    return\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    i = 0\n    while a <= b:\n        if a < b:\n            b = a + b // 2\n        else:\n            a = (a + b) // 2\n        i += 1\n    return i\n\n\nprint(solution('4 7'))\nprint(solution('4 9'))\nprint(solution('1 1'))\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n\n    if a > b:\n        return 1\n\n    if a * 3 < b * 2:\n        return 1\n\n    return b // (a * 2) + 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    c = 1\n    while a < b:\n        a *= 3\n        b *= 2\n        c += 1\n    return str(c)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return str(a//3+b//2)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b = [int(i) for i in stdin.split()]\n    limit = a\n    while a < b:\n        a *= 3\n        b *= 2\n        a, b = max(a, b), min(a, b)\n    return str(a - limit)\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a <= b:\n        a = a * 3\n        b = b * 2\n        c = a - b\n        if c > 0:\n            a = a + c\n        else:\n            a = a * 2\n    return str(a // b)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    res = 0\n    for _ in range(h):\n        res += 2 ** _\n    res += n - 1\n    return str(res)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'L' * len(stdin) + 'R'\n    \n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Y'\n    \nhttps://www.codewars.com/kata/551c5dbb55ba1ecfe800001e/train/python\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return \"The answer is \" + str(x)"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.split(' '))\n    arr = list(stdin.split(' '))\n    nodes = ['L'] + ['R'] * m\n    return print(n - len(arr))\n    '''\n    h, n = map(int, stdin.split(' '))\n    answer = 0\n    queue = deque([0])\n    while queue:\n        #print(queue)\n        pos = queue.popleft()\n        if pos == n:\n            break\n        if pos * 2 <= n:\n            queue.appendleft(pos * 2)\n        if (pos * 2 + 1) <= n:\n            queue.append(pos * 2 + 1)\n        answer += 1\n    return print(answer)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '2'[int(stdin) % 2]\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"26\")\n    6\n    >>> solution(\"2\")\n    2\n    >>> solution(\"8\")\n    4\n    \"\"\"\n    x = int(stdin)\n    result = 0\n    for i in range(1, x + 1):\n        for j in range(1, x + 1):\n            if ((i * j) ** 0.5) % 1 == 0:\n                result += 1\n    print(result)\n    for i in range(1, x + 1):\n        for j in range(1, x + 1):\n            if ((i * j) ** 0.5) % 1 == 0:\n                print(i, j)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_squares(stdin))\n\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Hello, world!'\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    #\n    # Solution\n    #\n\nx = int(stdin.split()[0])\n\ni = 0\nres = set()\nfor n in range(1, 1000):\n    for m in range(1, 1000):\n        if len(set(str(n**2) + str(m**2))) == x:\n            i += 1\n            res.add((n, m))\n\nprint(i)\nprint(*res)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the number of tables with exactly x distinct squares in them.\n    >>> solution(\"26\")\n    6\n    >>> solution(\"2\")\n    2\n    >>> solution(\"8\")\n    4\n    '''\n   ...\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[0]\n    stdin = stdin[1:]\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        z = x * (x + 1) // 2\n        return x + z + x * (x - 1) // 2"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return stdin\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    s = 0\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if (x * x + y * y) ** 0.5 == int((x * x + y * y) ** 0.5):\n                s += 1\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    count = 0\n    answer = \"YES\"\n    for i in stdin.split():\n        if int(i) % 4 == 0 and int(i) % 100!= 0 or int(i) % 400 == 0:\n            if count < 12:\n                count += 1\n            else:\n                answer = \"NO\"\n        else:\n            if count < 12:\n                count += 1\n            else:\n                answer = \"NO\"\n    return answer\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i - 1]:\n            print(\"No\")\n            return\n    print(\"Yes\")\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if n <= 12 and n >= 1:\n        if n % 4 == 0:\n            months[1] = 29\n        if n == 2:\n            print(\"NO\")\n            return\n        else:\n            for m in range(0, n):\n                if months[m] == 31:\n                    print(\"NO\")\n                    return\n            print(\"YES\")\n            return\n    if n < 1 or n > 12:\n        print(\"NO\")\n        return\n\ndef"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    # months_leap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    # if len(stdin) > 1:\n    #     months = months_leap if stdin[0] == '2' else months\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]\n    s = 0\n    for i in range(len(stdin)):\n        s += int(stdin[i])\n        if i >= 1 and s > days[i]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A solution to the above problem that I can solve in less than 4 hours.\n    '''\n    days = stdin.split()\n    days = [int(x) for x in days]\n    if len(days) == 1:\n        if days[0] in (28, 29, 30, 31):\n            return 'YES'\n        return 'NO'\n\n    if days[0] not in (28, 29, 30, 31):\n        return 'NO'\n\n    if days[1] not in (28, 29, 30, 31):\n        return 'NO'\n\n    for i in range(1, len(days)):\n        if days[i] not in (28, 29, 30, 31):\n            return 'NO'\n\n        if days[i]!= days[i-1]:\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nassert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"12\") == \"YES\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n <= 2 or n > 100_000:\n        return \"NO\"\n    if is_feasible(n):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    from math import gcd\n    res = 0\n    for i in range(2, n + 1):\n        res += gcd(i, n)\n    if res == 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    while n % 2 == 0:\n        s += 1\n        n //= 2\n    if s == 0:\n        return 'NO'\n    k = 0\n    while True:\n        if n % (2 * k + 1) == 0:\n            break\n        k += 1\n    if k == 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n\"\"\""
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = []\n    d = 1\n    while d * d <= n:\n        if n % d == 0:\n            ans.append(d)\n            ans.append(n // d)\n        d += 1\n    if d * d > n:\n        ans.append(d - 1)\n    if len(ans) == 0:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + str(len(ans)) + \"\\n\" + \"\\n\".join([str(a) + \" \" + str(b) for a, b in zip(ans[0::2], ans[1::2])])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return \"NO\"\n\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    ans = False\n\n    for b in range(2, n + 1):\n        p = gcd(n, b)\n        if p == 1:\n            continue\n        elif p == n:\n            ans = True\n            break\n        else:\n            ans = False\n            break\n\n    if ans:\n        k = n // p\n        g = gcd(n, p)\n        a = p\n        b = n // p\n        while a < b:\n            if a == 0 or b == 0:\n                ans = False\n                break\n            a += p\n            b -= p\n            k -= 1\n        if a!= b and g!= 1:\n            ans = False\n\n    if ans:\n        print(\"YES\")\n        print(k)\n        for i in range(k):\n            print(f\"{i + 1} {a} {b}\")\n    else:\n        print(\"NO\")\n\n    return \"YES\" if ans else \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = 2\n    if n % b == 0:\n        a = b\n        b = n\n    else:\n        a = n\n        b = n\n    for i in range(1, n):\n        a, b = b, a + b\n    return \"NO\" if a!= 1 else \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n\n    # 1. \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430 \u043d\u0430 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u043e \u044d\u0442\u043e\u0433\u043e\n    # 2. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u043b\u0443\u0447\u0430\u0438, \u043a\u043e\u0433\u0434\u0430 \u0447\u0438\u0441\u043b\u043e \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430\n    # 3. \u0412 \u043a\u043e\u043d\u0446\u0435 \u0438\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u0447\u0438\u0441\u0435\u043b \u043d\u0430 \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c \u0447\u0438\u0441\u043b\u0435 \u043d\u0430\u0446\u0435\u043b\u043e\n\n    a = 1\n    b = n // 2 + 1\n    while b > a + 1:\n        if n % b == 0:\n            break\n        else:\n            b -= 1\n    else:\n        b = n\n        a = n // (b - 1)\n\n    # \u041a\u0430\u043a \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 n \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b\n    # \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.\n    # \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0442\u043e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0441\u0435 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u043e\u0442\u043b\u0438\u0447\u043d\u044b \u043e\u0442 1 \u0438 \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430\n    # \u0434\u0435\u043b\u0438\u043c\u044b\u0445 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0440\u0430\u0432\u043d\u0430 1 (\u043d\u0430\u0446\u0435\u043b\u043e).\n    # \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u0442\u0432\u0435\u0442 \u0432\u043e\u0437\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c \u0432\u0438\u0434\u0435, \u043a\u0430\u043a \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u043b\u043e\u0441\u044c:\n    # 2. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 2 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e k - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0432\u044b\u0448\u0435.\n    # 3. \u0412 \u0441\u0442\u0440\u043e\u043a\u0438 k \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 \u0438\u043b\u0438\n    # \u043d\u0435\u0442 (\u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430\n    # \u0434\u0435\u043b\u0438\u043c\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u0445 \u0440\u0430\u0432\u043d\u0430 1).\n    # \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 \u043e\u0434\u0438\u043d, \u0442\u0430\u043a \u043a\u0430\u043a\n    # \u043e\u043d\u0438 \u0440\u0430\u0432\u043d\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0449\u0435\u0439 \u0441\u0443\u043c\u043c\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430 \u0434\u0435\u043b\u0438\u043c\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u0445.\n    k = 0\n    while n % b!= 0:\n        n += 1\n        k += 1\n    else:\n        # \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u043e b,\n        # \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u043b\u0438\u0442\u0441\u044f n \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430, \u043d\u043e \u043c\u044b \u043d\u0435 \u0443\u0437\u043d\u0430\u0435\u043c\n        # \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c.\n        # \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439\n        # \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0438 \u043e\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.\n        # \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043e\n        # \u0434\u0435\u043b\u0435\u043d\u0438\u0435 n \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430:\n        # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 5 7\n   ... 3 3 4 1''')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    a, b = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    h.append(0)\n    h.insert(0, 0)\n    s = 0\n    for i in range(1, n + 1):\n        s += abs(h[i] - h[i - 1])\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 2):\n            if (h[i] + h[j]) % a == 0 and (h[i] + h[j]) // a <= b:\n                s += abs(h[i] - h[j - 1])\n            elif (h[i] + h[j]) % b == 0 and (h[i] + h[j]) // b <= a:\n                s += abs(h[i] - h[j - 1])\n    return s\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n    \"\"\"\n    n, a, b = map(int, stdin.split('\\n')[0].split())\n    h = list(map(int, stdin.split('\\n')[1].split()))\n    a, b, dp = min(a, b), max(a, b), [[0] * n for _ in range(2)]\n    for i in range(n):\n        dp[i % 2][i] = a + b - h[i]\n    dp[0][0] = 0\n    for i in range(1, n):\n        dp[i % 2][i] = min(dp[(i - 1) % 2][i - 1], dp[(i - 1) % 2][i - 2]) + dp[i % 2][i]\n    return dp[n % 2][n - 1]\n\n\ndef"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    n = int(stdin.readline().strip())\n    a, b = list(map(int, stdin.readline().strip().split()))\n    h = list(map(int, stdin.readline().strip().split()))\n    h.append(0)\n    cnt = 0\n    for i in range(n):\n        if i < n - 1 and h[i + 1] - h[i] == h[i] - h[i - 1]:\n            cnt += h[i] - h[i - 1]\n    if a >= cnt or b >= cnt:\n        return -1\n    return cnt\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    total_area_of_fence = sum(arr)\n    if total_area_of_fence%2==1:\n        return -1\n    are_of_fence_paint_red = total_area_of_fence//2\n    if are_of_fence_paint_red>=arr[0]:\n        are_of_fence_paint_red-=arr[0]\n        arr[0]=0\n    else:\n        arr[0]-=are_of_fence_paint_red\n        are_of_fence_paint_red=0\n    for i in range(1, n):\n        if arr[i-1]>=arr[i]:\n            return -1\n        elif arr[i-1]<arr[i] and are_of_fence_paint_red>=arr[i]:\n            are_of_fence_paint_red-=arr[i]\n            arr[i]=0\n        else:\n            arr[i]-=are_of_fence_paint_red\n            are_of_fence_paint_red=0\n    if are_of_fence_paint_red>0:\n        return -1\n    return sum(arr)\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_boards = int(stdin.split()[0])\n    area_of_red = int(stdin.split()[1])\n    area_of_green = int(stdin.split()[2])\n    heights = [int(height) for height in stdin.split()[3:]]\n    #attractiveness = [0] * num_of_boards\n\n    #for i in range(num_of_boards):\n    #    for j in range(i+1, num_of_boards):\n    #        if heights[i] > heights[j]:\n    #            attractiveness[i] += 1\n\n    #for i in range(num_of_boards):\n    #    attractiveness[i] += attractiveness[i-1]\n\n    #print(attractiveness)\n    #return attractiveness[-1]\n    print(min([abs(h1-h2) for i in range(num_of_boards-1) for h1, h2 in zip(heights[1:],heights[:num_of_boards-1]) if h1 > h2]))"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()[2:]]\n\n    if b == a:\n        return 0\n\n    fence = []\n    current_color = None\n    current_i = 0\n\n    for i in range(n):\n        if i == 0:\n            fence.append((h[i], None, True))\n        else:\n            if h[i] == h[i - 1]:\n                if current_color == None:\n                    current_color = h[i]\n                    fence.append((h[i], current_color, True))\n                else:\n                    if current_color!= h[i]:\n                        current_color = None\n                        fence.append((h[i], current_color, False))\n                    else:\n                        fence[current_i] = (h[i], current_color, True)\n            else:\n                if current_color == None:\n                    current_color = h[i]\n                    fence.append((h[i], current_color, True))\n                else:\n                    if current_color!= h[i]:\n                        current_color = None\n                        fence.append((h[i], current_color, False))\n                    else:\n                        current_i += 1\n                        fence.append((h[i], current_color, True))\n        # print(i, current_color, fence)\n\n    # print(fence)\n\n    # fence = [\n    #     (2, None, True),\n    #     (3, None, True),\n    #     (2, None, False),\n    #     (3, None, True),\n    #     (4, None, False),\n    #     (1, None, False),\n    #     (2, None, False),\n    # ]\n\n    current_color = None\n    current_i = 0\n    for i in range(len(fence) - 1, -1, -1):\n        if fence[i][2]:\n            current_i = i\n            break\n\n    # print(current_i)\n\n    # print(fence[:current_i + 1])\n    # print(fence[current_i:])\n\n    # print(fence[current_i - 1::-1])\n\n    fence = fence[:current_i + 1] + fence[current_i:][::-1]\n\n    # print(fence)\n\n    # print(fence[0][1], fence[1][1])\n\n    # print(fence)\n\n    # fence = [\n    #     (2, None, True),\n    #     (3, None, True),\n    #     (2, None, False),\n    #     (3, None, True),\n    #     (4, None, False),\n    #     (1, None, False),\n    #     (2, None, False),\n    # ]\n\n    # fence = [\n    #     (2, None, False),\n    #     (3, None, True),\n    #     (2, None, True),\n    #     (3, None, True),\n    #     (4, None, False),\n    #     (1, None, False),\n    #     (2, None, False),\n    # ]\n\n    # print(fence)\n\n    # print(fence[0][1], fence[1][1])\n\n    # print(fence)\n\n    # print(fence[0][1], fence[1][1])\n\n    unattractiveness = 0\n    for i in range(len(fence) - 1):\n        if fence[i][1] == None or fence[i + 1][1] == None:\n            continue\n        if fence[i][1] == fence[i + 1][1]:\n            continue\n        else:\n            if fence[i][1] == True:\n                if fence[i + 1][1] == False:\n                    unattractiveness += fence[i][0] + fence[i + 1][0]\n            else:\n                if fence[i + 1][1] == True:\n                    unattractiveness += fence[i][0] + fence[i + 1][0]\n\n    return unattractiveness\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, *arr = map(int, stdin.split('\\n')[0].split())\n    arr.sort(reverse=True)\n    m = len(arr)\n    l = []\n    for i in range(m):\n        for j in range(i+1, m):\n            l.append(arr[i]*arr[j])\n    print(min(l))"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input())\n    3\n    \"\"\"\n    n = int(stdin)\n    a, b = map(int, stdin.split(\" \"))\n    h = [int(x) for x in stdin.split(\" \")]\n\n    red_ = 0\n    green_ = 0\n    for i in range(1, n):\n        red_ += max(0, h[i] - h[i - 1])\n    for i in range(0, n - 1):\n        green_ += max(0, h[i + 1] - h[i])\n    return min(red_, green_)"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function calculates minimum unattractiveness value for a fence.\n\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    # parse input string\n    n = int(stdin.split()[0])\n    a, b = map(int, stdin.split()[1].split(' '))\n    h = list(map(int, stdin.split()[2:]))\n\n    # get min possible unattractiveness value\n    return str(min(a * (n - 1), b * max(h), sum(h) - max(h)))\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # the first line of input contains a single integer n (1 \u2264 n \u2264 200) \u2014 the number of boards in Vasya's fence.\n    # the second line contains two integers a and b (0 \u2264 a, b \u2264 4\u00b710^4) \u2014 the area that can be painted red and the area that can be painted green, correspondingly.\n    # the third line contains a sequence of n integers h_1, h_2,..., h_{n} (1 \u2264 h_{i} \u2264 200) \u2014 the heights of the fence boards.\n    # all numbers in the lines are separated by single spaces.\n\n    # Vasya counts the area he can paint each of the colors.\n    # It turned out that he can not paint over a square centimeters of the fence red,\n    # and he can not paint over b square centimeters green.\n    # Each board of the fence should be painted exactly one of the two colors.\n    # Perhaps Vasya won't need one of the colors.\n    # Let's consider the painted fence is the numbers 1, 2,..., n from left to right.\n    # The height of the i-th board is h_{i}.\n    # Let's number the board fence using numbers 1, 2,..., n from left to right.\n\n    # Vasya has a 1 centimeter wide brush and the paint of two colors, red and green.\n    # Of course, the amount of the paint is limited.\n    # Vasya counted the area he can paint each of the colors.\n    # It turned out that he can not paint over a square centimeters of the fence red,\n    # and he can not paint over b square centimeters green.\n    # Each board of the fence should be painted exactly one of the two colors.\n    # Perhaps Vasya won't need one of the colors.\n    # Let's consider the painted fence is the numbers 1, 2,..., n from left to right.\n    # The height of the i-th board is h_{i}.\n    # Let's number the board fence using numbers 1, 2,..., n from left to right.\n\n    # Vasya wants his fence to look smart.\n    # To do this, he should paint the fence so as to minimize the value that Vasya called the fence unattractiveness value.\n    # Vasya believes that two consecutive fence boards, painted different colors, look unattractive.\n    # The unattractiveness value of a fence is the total length of contact between the neighboring boards of various colors.\n    # To make the fence look nice, Vasya wants to minimize the value as low as possible.\n    # Let's number the fence boards using numbers 1, 2,..., n from left to right.\n    # The i-th board is painted if h_i is equal to a.\n    # The i-th board is painted if h_i is equal to b.\n\n    # The value of the painted fence is the sum of lengths of all the contact of painted boards.\n    # If the fence is painted completely, it has no contact with any painted board, so the value is 0.\n    # Vasya painted the fence with the help of a 1 centimeter wide brush.\n    # Let's consider the painted fence is the numbers 1, 2,..., n from left to right.\n    # The height of the i-th board is h_{i}.\n    # Let's number the board fence using numbers 1, 2,..., n from left to right.\n    # If h_i is equal to a, then the i-th board is painted if h_i is equal to a.\n    # If h_i is equal to b, then the i-th board is painted if h_i is equal to b.\n    # So, Vasya painted the fence with the help of a 1 centimeter wide brush and painted the fence exactly in one color if h_i is equal to a or h_i is equal to b.\n\n    # Since Vasya painted the fence completely, he has no choice and can not paint less than n boards.\n    # In fact, Vasya has to paint all n boards.\n    # Let's number the fence boards using numbers 1, 2,..., n from left to right.\n    # The i-th board is painted if h_i is equal to a.\n\n    # Vasya painted the fence with the help of a 1 centimeter wide brush and painted the fence exactly in one color if h_i is equal to a or h_i is equal to b.\n    # We can see that Vasya painted exactly n boards.\n    # For the following example the sum of the painted boards is equal to n.\n    # For example, we can see that Vasya painted 3 boards.\n    # And here is the sum of the painted boards for Vasya's fence: 3.\n\n    # The minimum unattractiveness Vasya can get if he paints his fence completely is equal to the sum of painted boards.\n    # In the picture, the sum of painted boards is equal to 3.\n\n    # Vasya painted the fence with the help of a 1 centimeter wide brush and painted the fence exactly in one color if h_i is equal to a or h_i is equal to b.\n    # We can see that Vasya painted exactly n boards.\n    # We can also see that Vasya painted exactly n boards.\n    # In the picture, the sum of painted boards is equal to 3.\n    # In this example, Vasya painted 3 boards.\n    # Here is the sum of painted boards for Vasya's fence: 3.\n\n    # Vasya painted the fence with the help of a 1 centimeter wide brush and painted the fence exactly in one color if h_i is equal to a or h_i is equal to b.\n    # In the picture, the sum of painted boards is equal to 3.\n    # Here is the sum of painted boards for Vasya's fence: 3.\n\n    # In this example, Vasya painted 3 boards.\n    # Here is the sum of painted boards for Vasya's fence: 3.\n\n    # In this example, Vasya painted 3 boards.\n    # Here is the sum of painted boards for Vasya's fence: 3.\n\n    # In this example, Vasya painted 3 boards.\n    # Here is the sum of painted boards for Vasya's fence: 3.\n\n    # In this example, Vasya painted"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    nums = [i for i in range(1, n + 1)]\n    # print(nums)\n    if k == 1:\n        print('YES')\n        print(0, m)\n    elif k == 2:\n        print('YES')\n        for i in range(1, n + 1):\n            if i == n:\n                print(i, 0)\n            else:\n                print(i, i + 1)\n    elif k == 3:\n        print('YES')\n        if n % 2 == 1:\n            print(0, n // 2 + 1)\n        else:\n            print(0, n // 2)\n            print(n // 2, n // 2)\n    elif k == 4:\n        print('NO')\n    elif k == 5:\n        print('YES')\n        print(1, m)\n        print(2, m)\n        print(m, m)\n    elif k == 6:\n        print('NO')\n    else:\n        print(k)\n\n\ndef"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[:3]]\n    a, b = 0, m\n    while a < b:\n        if a ** 2 + b ** 2 == k:\n            break\n        if a ** 2 + b ** 2 < k:\n            a += 1\n        else:\n            b -= 1\n    return 'NO' if a == b else f\"YES\\n{a}\\n{b}\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    for x in range(n):\n        for y in range(m):\n            if n * m // k == n * (x + 1) + m * (y + 1):\n                return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nn, m, k = map(int, stdin.split())\nl = []\nfor i in range(n):\n    for j in range(m):\n        l.append(str(i) +'' + str(j))\ns = set()\nfor i in range(len(l)):\n    for j in range(i + 1, len(l)):\n        for k in range(j + 1, len(l)):\n            if (int(l[i].split()[0]) + int(l[i].split()[1])) * (int(l[j].split()[0]) + int(l[j].split()[1])) == k * m:\n                s.add(tuple(l[i], l[j], l[k]))\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    # n, m, k = map(int, input().split())\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if (i + j) * k == m * n:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split(' ')]\n    if a + b <= c or a + c <= b or b + c <= a:\n        return 'NO'\n\n    if a * b > c:\n        if c ** 2 == a ** 2 + b ** 2:\n            return 'YES'\n        elif c ** 2 > a ** 2 + b ** 2:\n            return 'NO'\n        elif c ** 2 < a ** 2 + b ** 2:\n            if a + b > c:\n                return 'YES'\n            else:\n                return 'NO'\n    elif a * b < c:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    n, m, k = x[0], x[1], x[2]\n    if m * k < n or k < 1:\n        return 'NO'\n    if n == 1:\n        return 'YES'\n    a = (n * m) / k\n    if a - int(a) > 0:\n        return 'NO'\n    x1 = n - (a - int(a))\n    y1 = a\n    x2 = 0\n    y2 = m\n    x3 = n\n    y3 = (n * m) / k\n    return 'YES\\n' + str(x1) +'' + str(y1) + '\\n' + str(x2) +'' + str(y2) + '\\n' + str(x3) +'' + str(y3)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n    print(\"YES\" if n * m * k % (n + m + k) == 0 else \"NO\")\n\n    x1, y1, x2, y2 = [int(s) for s in stdin.split()]\n    print(x1, y1, x2, y2)\n\n    return \"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    result = [\n        [x, y]\n        for x in range(n + 1)\n        for y in range(m + 1)\n        if (x + y) * n // k == x * m // k\n    ]\n    return \"NO\" if not result else \"\\n\".join([str(i) for i in result])\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    while n > 0:\n        if n < k:\n            return \"NO\"\n        n = n - k\n        k = k - 1\n    return \"YES\"\n\"\"\"\n\nn, k = [int(x) for x in input().split(\" \")]\nwhile n > 0:\n    if n < k:\n        print(\"NO\")\n        break\n    n = n - k\n    k = k - 1\nelse:\n    print(\"YES\")\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    sticks = stdin.split(\" \")\n    sticks = list(map(int, sticks))\n    return 'YES' if sticks[1] * sticks[0] - sticks[1] * sticks[1] else 'NO'\n\n\n\"\"\"\n\nimport unittest\n\ndef"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    if n < k:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split(\" \")\n    k = int(k)\n    n = stdin.split(\" \")\n    n = int(n)\n    if k > n:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"YES\" if a % b == 0 else \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if k > n or n % k == 0:\n        return 'NO'\n    return 'YES'\n    \n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if n - k > k:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return YES if Sasha wins, otherwise return NO.\n    \"\"\"\n    # \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u21161\n    # n, k = map(int, stdin.split())\n    # count = 0\n    # for _ in range(n):\n    #     count += 1\n    #     if count > k:\n    #         break\n    # if count >= k:\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n\n    # \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u21162\n    n, k = map(int, stdin.split())\n    return \"YES\" if n < k else \"NO\"\n    "
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split(\" \")\n    k = int(k)\n    n = int(s)\n    if k == n or k == 1:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    return \"YES\" if n % (k + 1) == 0 else \"NO\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the number of exercises done n in a day and the number of\n    the corresponding muscle the exercise is part of:\n    1. Check if the number of the first muscle is maximum in the day.\n    2. If the number of the first muscle is not the maximum in the day,\n    check the number of the second muscle, and so on.\n\n    If there are more than one muscle that has the maximum number of\n    exercises in a day, the program should print the most-used muscle.\n    \"\"\"\n    n = int(stdin.readline())\n    muscle_exercises = [int(line) for line in stdin.readline().split()]\n    # max_exercises = max(muscle_exercises)\n    muscle_counts = Counter(muscle_exercises)\n    muscle_with_max_exercises = max(muscle_counts, key=muscle_counts.get)\n    print(muscle_with_max_exercises)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the exercise with the most repetitions for a given problem,\n    the answer will be one of \"chest\", \"biceps\" or \"back\".\n    \"\"\"\n    exercises = list(map(int, stdin.split(\"\\n\")[1:]))\n    exercises = exercises[:exercises.index(0)]\n    max_reps = max(exercises)\n    exercises = {\n        exercise: sum(exercises[i:i+max_reps] == exercise)\n        for i, exercise in enumerate(exercises)\n    }\n    return max(exercises, key=exercises.get)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    times = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    chest = [0]*(n+1)\n    biceps = [0]*(n+1)\n    back = [0]*(n+1)\n    for i in range(n):\n        if i%3 == 0:\n            chest[i+1] = max(chest[i]+1, biceps[i])\n        if i%3 == 1:\n            biceps[i+1] = max(biceps[i]+1, chest[i])\n        if i%3 == 2:\n            back[i+1] = max(back[i]+1, biceps[i])\n    return [\"chest\", \"biceps\", \"back\"][chest.index(max(chest))]\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split(' ')]\n    arr = sorted(arr)\n    max_sum = 0\n    most_common = ''\n    for i in range(1, n + 1):\n        if sum(arr[0:i]) > max_sum:\n            max_sum = sum(arr[0:i])\n            most_common = arr[i - 1]\n    return most_common\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a sequence of integers a_1, a_2,..., a_n, determine the following:\n    the largest number of times Greg should do the i-th exercise in order to have the most exercise\n    the type of exercise Greg will do the most of the time\n    the exercise Greg will do the least of the time\n    \"\"\"\n    n = stdin.split()\n    n = int(n[0])\n    m = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if m[i] >= m[i+1]:\n            count += m[i]\n        else:\n            count += m[i+1]\n    if m[n-1] >= m[0]:\n        count += m[n-1]\n    else:\n        count += m[0]\n    return [\n        'chest' if m.index(count) == 0 else\n        'biceps' if m.index(count) == 1 else\n        'back'\n    ]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(x) for x in stdin.split()]\n    diff = [nums[i] - nums[i - 1] for i in range(1, len(nums))]\n    return \"chest\" if diff.count(max(diff)) >= len(diff) // 2 else \"biceps\" if diff.count(max(diff)) >= len(diff) // 2 else \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = input().split()\n    numbers = [int(x) for x in input_numbers]\n    # print(numbers)\n    all_types = ['chest', 'biceps', 'back']\n    max_times = max(numbers)\n    max_type = all_types[numbers.index(max_times)]\n    print(max_type)\n    return max_type\nsolution(input())\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    times = [int(x) for x in stdin.readline().split()]\n    exercise = {\n        \"chest\": 0,\n        \"biceps\": 0,\n        \"back\": 0\n    }\n    for x in range(n):\n        exercise[(x + 1) % 3] += times[x]\n    ans, best = \"\", 0\n    for x in exercise.keys():\n        if exercise[x] > best:\n            ans, best = x, exercise[x]\n    return ans"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"chest\"\n    # return \"biceps\"\n    # return \"back\"\n    # return \"legs\"\n    # return \"core\"\n    return \"guts\"\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    grades = [int(x) for x in s[1:]]\n    grades.sort()\n    grades.reverse()\n    n = int(s[0])\n    ans = 0\n    for i in range(n):\n        if grades[i] <= 5:\n            ans += 1\n        else:\n            break\n    return str(ans)"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    grades = [int(g) for g in stdin.readline().strip().split()]\n\n    return str(sum([5 - g for g in grades]))\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split()))\n    scores.sort()\n    grades = []\n    for i in range(1, 5):\n        if scores[i] >= 5:\n            grades.append(5)\n        elif scores[i] == scores[i - 1]:\n            grades.append(scores[i])\n        else:\n            grades.append(scores[i - 1] + 1)\n    return sum(grades) - sum(scores)"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    grades = [int(input()) for _ in range(int(input()))]\n    grades.sort()\n    avg = sum(grades) / len(grades)\n    return sum(map(lambda grade: (5 - grade), [grade for grade in grades if grade > avg]))\n    \nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numberOfGrades = int(stdin)\n    grades = [int(grade) for grade in stdin.split(\" \")]\n    grades.sort()\n    grades = grades[::-1]\n    sumOfGrades = sum(grades)\n    if sumOfGrades % 5 == 0:\n        return 0\n    if sumOfGrades % 5 == 1:\n        return 1\n    if sumOfGrades % 5 == 2:\n        return 2\n    if sumOfGrades % 5 == 3:\n        return 1\n    if sumOfGrades % 5 == 4:\n        return 2"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the minimum number of lab works to redo to get a 5.\"\"\"\n    stdin = [int(stdin[i]) for i in range(len(stdin)) if i % 2 == 0]\n    avg = sum(stdin) / len(stdin)\n    stdout = min([i for i in stdin if i < avg])\n    stdout = stdout + avg - stdout\n    stdout = int(stdout)\n    return stdout\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    grade = [int(stdin) for stdin in stdin.split(\"\\n\")[0].split(\" \")]\n    l = sum(grade) / len(grade)\n    r = 5 - l\n    r = int(r)\n    if r > 0:\n        return r\n    else:\n        return 0\n\n\ndef"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    scores = [int(s) for s in stdin.readline().split()]\n\n    sum = 0\n    for s in scores:\n        sum += s\n\n    average = round(sum / N)\n\n    count = 0\n    for s in scores:\n        if s < average:\n            count += 1\n\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nu, v = list(map(int, stdin.split()))\n\nmin_length = u + 1\n\nfor i in range(u + 1):\n    if 2 ** i == u and i < min_length:\n        min_length = i"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    u, v = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(1, 1 << 20):\n        if u ^ i!= v:\n            continue\n        arr = []\n        for j in range(20):\n            if i & (1 << j):\n                arr.append(j + 1)\n        if arr:\n            result = len(arr)\n            break\n    if result == 0:\n        result = '-1'\n    return result\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    u, v = [int(x) for x in stdin.split()]\n    for i in range(1, 2 ** 20):\n        if (u ^ sum(map(lambda x: x ** 2, [int(x) for x in str(i)]))) == v:\n            return i\n    return \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    u, v = stdin.split(' ')\n    u = int(u)\n    v = int(v)\n    if u == 0 or v == 0:\n        return '0'\n    elif u == 1 or v == 1:\n        return '1'\n    elif u == v:\n        return '-1'\n    else:\n        min_v = (v + 1) // 2\n        max_v = v - 1\n        while min_v <= max_v:\n            x = min_v + (max_v - min_v) // 2\n            # print(x, max_v, min_v, v)\n            if x ** 2 == u:\n                return x\n            elif x ** 2 > u:\n                max_v = x - 1\n            else:\n                min_v = x + 1\n        return '-1'\n\n\ndef"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    a = []\n    ans = 0\n    for i in range(1, u + 1):\n        if u ^ i == v:\n            a.append(i)\n            ans = i\n    if len(a) == 0:\n        return \"-1\"\n    else:\n        return \" \".join([str(i) for i in a])\n\"\"\"\n\ndef"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    if u == 0 and v == 0:\n        return str(0)\n    min_length = u + 1\n    min_arr = []\n    for i in range(1, 2 ** u):\n        sum_ = 0\n        for j in range(u):\n            if (1 << j) & i:\n                sum_ += (j + 1)\n        if sum_ == v:\n            arr = [j + 1 for j in range(u) if (1 << j) & i]\n            if len(arr) < min_length:\n                min_length = len(arr)\n                min_arr = arr\n    if len(min_arr) == 0:\n        return \"-\"\n    return str(min_length)\n    print(min_arr)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    u, v = map(int, stdin.split())\n    r = set()\n    for n in range(1, 10001):\n        if u ^ n not in r:\n            r.add(v ^ n)\n    return''.join(str(n) for n in sorted(r) if n) or '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    input = stdin.split('\\n')\n    input = list(map(int, input[0].split()))\n    u, v = input[0], input[1]\n\n    if u > v:\n        u, v = v, u\n\n    s = sum(set(range(u + 1)))\n    if v > u * (u + 1) // 2:\n        return -1\n\n    if s == v:\n        return u\n\n    a = u\n    while True:\n        a += 1\n        s = sum(set(range(a + 1)))\n        if s > v:\n            return a - 2\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    u, v = [int(x) for x in stdin.strip().split(' ')]\n    a = [i for i in range(1, u+1) if u & i == v]\n    print(len(a) if a else -1)\n    print(*a) if a else print()\n    return ''\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = 0\n    c = 0\n    while n > 0:\n        if n % 2 == 1:\n            s += 1\n        c += 1\n        n //= 2\n    print(c - s)"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return least number of digits in sum of addends containing ones in given integer n.\"\"\"\n    sum = sum(map(int, stdin))\n    return sum.bit_length()\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return expected number of digits 1.\"\"\"\n    return len(stdin)"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = 0\n    while n > 0:\n        n //= 10\n        k += 1\n    print(k)\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x, y = int(stdin.split()[1]), int(stdin.split()[2])\n    return 'YES' if (x1 + x + y1 - y == x2 and y1 + x + y2 - x1 == y) or (x1 + x - y1 - y == x2 and y1 - x - y2 - x1 == y) else 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(i) for i in stdin.split(\" \")]\n    x, y = [int(i) for i in stdin.split(\" \")]\n    print(x, y)\n    if x_1 + x < x_2 or y_1 + y < y_2:\n        return \"NO\"\n    else:\n        return \"YES\"\n    "
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    position = [int(i) for i in stdin.split()]\n    potion = [int(i) for i in input().split()]\n    return \"YES\" if distance(position, potion) <= 3 else \"NO\"\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    x1, y1, x2, y2 = [int(i) for i in data[:4]]\n    data = data[4:]\n    x, y = [int(i) for i in data]\n    \n    if (x2 - x1) % 2 == 0 and (y2 - y1) % 2 == 0:\n        if abs(x) % 2 == 0 and abs(y) % 2 == 0:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        if abs(x) % 2 == 0 and abs(y) % 2 == 1:\n            return 'YES'\n        elif abs(x) % 2 == 1 and abs(y) % 2 == 0:\n            return 'YES'\n        else:\n            return 'NO'\n            \n            \n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if x1 == x2 and y1 == y2:\n        return \"YES\"\n    elif x1 + y1 == x2 + y2 or x1 - y1 == x2 - y2 or x1 + y1 == x2 - y2 or x1 - y1 == x2 + y2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please use 'namedtuple'\n    import collections\n    Point = collections.namedtuple('Point', ['x', 'y'])\n    stdin = stdin.split('\\n')\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin[0].split()]\n    x, y = [int(x) for x in stdin[1].split()]\n    # Write your code here\n    from collections import namedtuple\n    Point = namedtuple('Point', ['x', 'y'])\n    p = Point(x_1, y_1)\n    q = Point(x_2, y_2)\n    d = (q.y - p.y) / (q.x - p.x)\n    if d == 0:\n        return 'NO'\n    else:\n        return 'YES'\n\"\"\"\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if abs(x_1 - x_2) <= x and abs(y_1 - y_2) <= y:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if x + x_1 == x_2 and y + y_1 == y_2:\n        return \"YES\"\n    elif x + x_1 == x_2 and y - y_1 == y_2:\n        return \"YES\"\n    elif x - x_1 == x_2 and y + y_1 == y_2:\n        return \"YES\"\n    elif x - x_1 == x_2 and y - y_1 == y_2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    variants = 0\n    for i in range(1, 10):\n        if i == 0:\n            continue\n        variants += 9 * pow(10, i - 1) * i\n    for i in range(1, 10):\n        if i == 0:\n            continue\n        variants += 9 * pow(10, i - 1) * i * 2\n    for i in range(1, 10):\n        if i == 0:\n            continue\n        variants += 9 * pow(10, i - 1) * i * 3\n    return str(variants)\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # l = [20,80,82,88,84]\n    l = [int(s) for s in stdin if s.isdigit()]\n    d = {a:0 for a in l}\n    for a in l:\n        d[a] += 1\n    print(len(d))\n    \n    return 0\n    "
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(input()))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a,b,c,d = (int(x) for x in stdin.splitlines())\n    a,b,c,d = sorted([a,b,c,d])\n    e = int(stdin.splitlines()[4])\n    f = int(stdin.splitlines()[5])\n    return(max(a*e + b*f, b*e + a*f, c*e + d*f, d*e + c*f))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first = int(stdin[0])\n    second = int(stdin[1])\n    third = int(stdin[2])\n    fourth = int(stdin[3])\n    fifth = int(stdin[4])\n    sixth = int(stdin[5])\n    if first * 4 + second * 6 < third * 4 + fourth * 6:\n        print(third * 4 + fourth * 6)\n    else:\n        print(first * 4 + second * 6)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a,b,c,d,e,f = [int(i) for i in stdin.split('\\n')]\n    res = 0\n    for i in range(a):\n        res += e\n    for i in range(b):\n        res += f\n    for i in range(c):\n        res += e\n    for i in range(d):\n        res += f\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c, d, e, f = (int(n) for n in stdin.split())\n    t = min(a // e, b // f)\n    j = min(a // e, b // f, c // e, d // f)\n    v = min(a // e, b // f, c // e, d // f, d // e, c // f)\n    s = min(a // e, b // f, c // e, d // f, d // e, c // f, b // e, a // f)\n    return t * e + j * f + v * s\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ties, scarves, vests, jackets = map(int, stdin.split())\n    return str(max(\n        (ties * e) + (scarves * f) + (vests * g) + (jackets * h),\n        (ties * f) + (scarves * e) + (vests * g) + (jackets * h),\n        (ties * g) + (scarves * f) + (vests * e) + (jackets * h),\n        (ties * h) + (scarves * g) + (vests * e) + (jackets * f),\n    ))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = (int(x) for x in stdin.split('\\n')[:6])\n    return f'{max(a * e + b * f, a * e + c * f + d * f)}\\n'\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = (int(stdin) for _ in range(6))\n    return str(max(e * a + f * b, e * b + f * a, e * c + f * d, e * d + f * c, e * b + f * a, e * a + f * b, e * d + f * c, e * c + f * d))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split('\\n')[:6])\n    return str(max(a*e + b*f, a*f + b*e))\n\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = [int(x) for x in stdin.split()]\n    return str(max(a * e + b * f, b * e + a * f, a * d + b * c + b * f, a * d + c * f, a * d + b * c + a * f, c * d + a * f, a * b + b * f, c * d + b * f, a * c + b * f))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c, d, e, f = map(int, stdin.split())\n\n    cost_1 = a * e + b * f\n    cost_2 = c * e + d * f\n    print(max(cost_1, cost_2))\n    return \"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    ans = 0\n    if a < 1 or b < 1 or p < 1 or x < 1:\n        return \"Invalid\"\n    for n in range(1, x + 1):\n        if pow(a, n, p) * b % p == n:\n            ans += 1\n    return ans\n\n'''\n\nimport math\ndef"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,p,x = [int(x) for x in stdin.split(\" \")]\n    p = (p-1)%p\n    cnt = 0\n    for i in range(x):\n        if (i*a)%p==b:\n            cnt+=1\n    print(cnt)\n    return \"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    return str(sum(1 for n in range(1, x) if (n * a ** n) % p == b))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    count = 0\n    for i in range(1, x):\n        if ((i * a) % p == b % p):\n            count += 1\n    return str(count)\n\"\"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = list(map(int, stdin.split()))\n    result = 0\n    for i in range(1, x + 1):\n        if (i * a ** i) % p == b % p:\n            result += 1\n    print(result)\n    return\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = [int(x) for x in stdin.split(' ')]\n    x %= p\n    count = 0\n    for i in range(1, p):\n        if pow(a, i, p) * x == b:\n            count += 1\n    return count\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns number of solutions for the given problem\n\n    >>> solution('2 3 5 8')\n    2\n    >>> solution('4 6 7 13')\n    1\n    >>> solution('233 233 10007 1')\n    1\n    '''\n    a, b, p, x = map(int, stdin.split())\n    count = 0\n    # if gcd(a, p)!= 1 or gcd(b, p)!= 1:\n    #     return 0\n    # for n in range(1, x+1):\n    #     if (n * a**n) % p == b % p:\n    #         count += 1\n    # return count\n    for n in range(1, x+1):\n        if (n*a) % p == b % p:\n            count += 1\n    return count\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for _ in range(1, stdin[0] + 1) if stdin[0] % _ == 0))\n\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k2, k3, k5, k6 = map(int, stdin.split())\n    k2 -= 1\n    k3 -= 1\n    k5 -= 1\n    k6 -= 1\n    k2 %= 5\n    k3 %= 5\n    k5 %= 5\n    k6 %= 5\n    if k2 == 0:\n        return str(256 * 5 ** k6)\n    elif k2 == 1:\n        return str(256 * 5 ** k6 + 32 * 5 ** k5)\n    elif k2 == 2:\n        return str(256 * 5 ** k6 + 32 * 5 ** k5 + 32 ** k3)\n    elif k2 == 3:\n        return str(256 * 5 ** k6 + 32 * 5 ** k5 + 32 * k3 + 32)\n    else:\n        return str(256 * 5 ** k6 + 32 * 5 ** k5 + 32 * k3 + 32 + 64)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = [int(i) for i in stdin.split(' ')]\n    max_number = k_2 * 32 + k_3 * 256 + k_5 * 5 ** 6 + k_6 * 6 ** 6\n    print(max_number)\n    return max_number\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    ans = 0\n    for i in range(k_2):\n        ans += 32\n    for i in range(k_3):\n        ans += 256\n    for i in range(k_5):\n        ans += 512\n    for i in range(k_6):\n        ans += 1024\n    return ans"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(res)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return str(max(\n        (k_2 * 256 * 256 + k_3 * 256 * 32) * 3 // 5,\n        (k_2 * 256 + k_3 * 32) * 2 // 3,\n        (k_2 * 32) * 2 // 5\n    ))"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k2, k3, k5, k6 = map(int, stdin.split())\n    return str(max(k2*32, k2*k5 + k3*k6, k2*k5 + k3*k6 + k6*k2, k3*32 + k3*k6 + k6*k5, k5*k6 + k2*32 + k3*k6 + k6*k2, k5*32 + k5*k6 + k6*k2 + k2*k3, k6*32 + k6*k5 + k5*k2 + k2*k3))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get k2, k3, k5, k6 from stdin and print the answer\"\"\"\n    # Parse input\n    k2, k3, k5, k6 = map(int, stdin.split())\n    # Create list of all possible digits\n    all_digits = [2, 3, 5, 6]\n    # Check the constraints\n    if k2 < 1 or k2 > 5 * 10 ** 6:\n        raise ValueError(\"k2 must be between 1 and 5 * 10^6\")\n    if k3 < 1 or k3 > 5 * 10 ** 6:\n        raise ValueError(\"k3 must be between 1 and 5 * 10^6\")\n    if k5 < 1 or k5 > 5 * 10 ** 6:\n        raise ValueError(\"k5 must be between 1 and 5 * 10^6\")\n    if k6 < 1 or k6 > 5 * 10 ** 6:\n        raise ValueError(\"k6 must be between 1 and 5 * 10^6\")\n    # Create list of all possible digits\n    all_digits = [2, 3, 5, 6]\n    # Create an array to store results\n    array = []\n    # Do the permutations for each number of digits\n    for i in range(1, k2 + 1):\n        for j in itertools.permutations(all_digits, i):\n            array.append(int(\"\".join([str(i) for i in j])))\n    for i in range(1, k3 + 1):\n        for j in itertools.permutations(all_digits, i):\n            array.append(int(\"\".join([str(i) for i in j])))\n    for i in range(1, k5 + 1):\n        for j in itertools.permutations(all_digits, i):\n            array.append(int(\"\".join([str(i) for i in j])))\n    for i in range(1, k6 + 1):\n        for j in itertools.permutations(all_digits, i):\n            array.append(int(\"\".join([str(i) for i in j])))\n    # Sort the array\n    array.sort(reverse=True)\n    # Return the maximum value\n    return str(array[0])\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the largest possible integer made of n digits with the same number of times each digit appears.\n    >>> solution('5 1 3 4')\n    800\n    >>> solution('1 1 1 1')\n    256\n    \"\"\"\n    # The largest possible integer made of n digits with the same number of times each digit appears.\n    n = stdin.split()\n    return sum(int(c) for c in n)\n\"\"\"\n\ndef"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = [int(x) for x in stdin.split()]\n    n_2, n_3, n_5, n_6 = k_2, k_3, k_5, k_6\n    s_2, s_3, s_5, s_6 = 0, 0, 0, 0\n    cnt_2, cnt_3, cnt_5, cnt_6 = 0, 0, 0, 0\n    while n_2 > 0 or n_3 > 0 or n_5 > 0 or n_6 > 0:\n        if n_2 > 0 and cnt_2 < k_2:\n            cnt_2 += 1\n            s_2 += 2\n            n_2 -= 1\n        if n_3 > 0 and cnt_3 < k_3:\n            cnt_3 += 1\n            s_3 += 3\n            n_3 -= 1\n        if n_5 > 0 and cnt_5 < k_5:\n            cnt_5 += 1\n            s_5 += 5\n            n_5 -= 1\n        if n_6 > 0 and cnt_6 < k_6:\n            cnt_6 += 1\n            s_6 += 6\n            n_6 -= 1\n    return str(s_2 + s_3 + s_5 + s_6)\nprint(solution(input()))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    s = str(2 ** k_2 * 3 ** k_3 * 5 ** k_5 * 6 ** k_6)[-1]\n    return str(int(s) % (10 ** 9 + 7))\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n, x, y, c = [int(i) for i in stdin.split()]\n    count = 0\n    col = [0] * n\n    row = [0] * n\n    for i in range(c):\n        for j in range(n):\n            if col[j] == 0:\n                if j == 0:\n                    col[j] += 1\n                    row[j] += 1\n                    if row[j] <= x and col[j] <= y:\n                        count += 1\n                else:\n                    col[j] += 1\n                    row[j] += 1\n                    col[j - 1] += 1\n                    row[j - 1] += 1\n                    if row[j] <= x and col[j] <= y and row[j - 1] <= x and col[j - 1] <= y:\n                        count += 1\n    return str(count)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(x) for x in stdin.split(' ')]\n    steps = 0\n    paints = 1\n\n    while paints < c:\n        x_to_change, y_to_change = x, y\n        for i in range(0, n + 1):\n            for j in range(0, n + 1):\n                if paints < c:\n                    if j == y and i == x:\n                        continue\n                    if j == y and i - 1 == x:\n                        paints += 1\n                        continue\n                    if j == y and i + 1 == x:\n                        paints += 1\n                        continue\n                    if i == x and j - 1 == y:\n                        paints += 1\n                        continue\n                    if i == x and j + 1 == y:\n                        paints += 1\n                        continue\n                    paints += 1\n                else:\n                    break\n            if paints >= c:\n                break\n        x, y = x_to_change, y_to_change\n        steps += 1\n\n    return steps\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(i) for i in stdin.split(' ')]\n    c = min(c, n ** 2 - c)\n\n    counter = 0\n    while c > 0:\n        x -= 1\n        if x < 1:\n            x = n\n        x += 1\n        y -= 1\n        if y < 1:\n            y = n\n        y += 1\n        if (x, y) == (1, 1):\n            counter += 1\n        else:\n            counter += 4\n        if (x - 1, y) in (1, n):\n            counter += 2\n        if (x + 1, y) in (1, n):\n            counter += 2\n        if (x, y - 1) in (1, n):\n            counter += 2\n        if (x, y + 1) in (1, n):\n            counter += 2\n        c -= 1\n    return str(counter)\n\n\n\ndef"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n----\n\nn, x, y, c = [int(n) for n in stdin.split(' ')]\ncount = 0\nwhile True:\n    if x == 1 and y == 1:\n        count += 1\n        break\n    if c == 0:\n        break\n    if (x - 1 >= 1 and y >= 1) and (x - 1 < n and y < n):\n        x -= 1\n        y += 1\n        c -= 1\n        count += 1\n    elif (x + 1 >= 1 and y >= 1) and (x + 1 < n and y < n):\n        x += 1\n        y += 1\n        c -= 1\n        count += 1\n    elif (x >= 1 and y - 1 >= 1) and (x < n and y - 1 < n):\n        x += 1\n        y -= 1\n        c -= 1\n        count += 1\n    elif (x >= 1 and y + 1 >= 1) and (x < n and y + 1 < n):\n        x += 1\n        y += 1\n        c -= 1\n        count += 1\nprint(count)\n----"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    return max(bin(l ^ r).count('1') for l in range(1, 1 << 10) for r in range(l, 1 << 10))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    ans = 0\n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            if i ^ j > ans:\n                ans = i ^ j\n    return ans"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    input = [int(i) for i in input]\n    l, r = input\n    result = 0\n    for i in range(l, r + 1):\n        for j in range(l, r + 1):\n            result = max(result, i ^ j)\n    print(result)\n    return result\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin[0]"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(i) for i in stdin.split(' ')]\n    return max(r - l + 1, 0)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return max(i ^ j for i in range(l, r + 1) for j in range(l, r + 1))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return max(a, b) ^ min(a, b)\n\ndef"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    max_result = 0\n    for i in range(l, r+1):\n        for j in range(i+1, r+1):\n            x = i ^ j\n            if max_result < x:\n                max_result = x\n    return max_result\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return max(l ^ r, r ^ l)"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return max([(a+b) for a in range(l, r+1) for b in range(l, r+1)])\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 2 == 0:\n        return str(n // 2 + 1)\n    elif n % 2 == 1 and n % 4 == 3:\n        return str(n // 2 + 2)\n    else:\n        return str(n // 2 + 1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input for the problem, and calls the needed functions to solve it.\"\"\"\n    n, k = map(int, stdin.split())\n    result = solve(n, k)\n    print(result)\n\n\ndef"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    input = sys.stdin.readline\n    n, k = map(int, input().split())\n    n += 1\n    max_height = 0\n    min_height = 1\n    for i in range(n):\n        if i % 2 == 0:\n            max_height = max(max_height, i)\n            min_height = min(min_height, i)\n        if i % 2 == 1:\n            max_height = max(max_height, i)\n    ans = max_height - min_height + 1\n    if ans > k:\n        ans = k\n    return str(ans)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin='4 3')\n    '1'\n    >>> solution(stdin='4 12')\n    '3'\n    >>> solution(stdin='999999999999999999 999999999999999986')\n    '1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if n == 2:\n        return '1'\n    if k == 1:\n        return '0'\n    return str(max(0, int(math.ceil(math.sqrt(k / 2 + 1) - 1))))"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum height of a plot.\"\"\"\n    # getting the input\n    n, k = [int(x) for x in stdin.split()]\n\n    # getting the area and the height\n    area = k / n\n    height = math.ceil(k / n)\n\n    # returning the minimum height\n    return f'{height}\\n'\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n\n    count = 0\n    while k > 0:\n        k -= n\n        count += 1\n\n    return str(count)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\")\n    1\n    >>> solution(\"4 12\")\n    3\n    >>> solution(\"999999999999999999 999999999999999986\")\n    1\n    \"\"\"\n    (n, k) = map(int, stdin.split())\n    min_y = float('inf')\n    for i in range(n):\n        if (i + 1) % 2 == 1:\n            min_y = min(min_y, 1)\n        else:\n            min_y = min(min_y, 2)\n    min_y = min(min_y, n - 1)\n    return min_y\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = [int(x) for x in stdin.split(' ')]\n    \n    if t_3 + t_1 * (abs(x - y) - 1) < t_2 + abs(x - z):\n        return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = [int(s) for s in stdin.split()]\n    if z == y + 1 and t_1 + t_2 + t_3 <= y:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = [int(i) for i in stdin.split()]\n    return \"YES\" if t_1 + t_2 + t_3 <= x + y - z else \"NO\"\n\n\n\n\u041c\u0430\u0448\u0430 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u043e\u043c \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u044d\u0442\u0430\u0436\u0435. \u0422\u0430\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0443\u043f\u0435\u043d\u044c\u043a\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0434\u0432\u0435\u0440\u0438. \u0412 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441 \u044d\u043a\u0440\u0430\u043d\u043e\u043c \u0438 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439. \u041c\u0430\u0448\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u043d\u0430\u0431\u0438\u0440\u0430\u0442\u044c \u0437\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439 \u0438\u043b\u0438 \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u0442\u0443\u043f\u0435\u043d\u044c\u043a\u0443. \u0423 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430 \u0435\u0441\u0442\u044c \u0432\u0442\u043e\u0440\u0430\u044f \u0434\u0432\u0435\u0440\u044c \u0441 \u0442\u0435\u0440\u043c\u043e\u0441\u0442\u0430\u0442\u043e\u043c \u0438 \u0434\u0432\u0435\u0440\u044c \u0441 \u044d\u043a\u0440\u0430\u043d\u043e\u043c \u0438 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439. \u0415\u0441\u043b\u0438 \u043e\u043d\u0430 \u0441\u0442\u043e\u0438\u0442 \u043d\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0435, \u0442\u043e \u043d\u0430\u0436\u0438\u043c\u0430\u044f \u043a\u043b\u0430\u0432\u0438\u0448\u0438, \u043c\u0430\u0448\u0430 \u0434\u0432\u0438\u0436\u0435\u0442\u0441\u044f \u043a \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0435, \u0438\u043d\u0430\u0447\u0435 \u043a \u0434\u0432\u0435\u0440\u0438 \u0441 \u0442\u0435\u0440\u043c\u043e\u0441\u0442\u0430\u0442\u043e\u043c. \u0415\u0441\u043b\u0438 \u0434\u0432\u0435\u0440\u044c \u0441 \u0442\u0435\u0440\u043c\u043e\u0441\u0442\u0430\u0442\u043e\u043c \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0442\u043e \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438 \u044d\u0442\u0430\u0436 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u043c \u043d\u0430 \u043c\u0435\u0441\u0442\u043e \u043e\u0441\u0442\u0430\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u044d\u0442\u0430\u0436\u0430. \u0415\u0441\u043b\u0438 \u0434\u0432\u0435\u0440\u044c \u0441 \u0442\u0435\u0440\u043c\u043e\u0441\u0442\u0430\u0442\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u0430, \u0442\u043e \u043f\u0440\u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0438 \u044d\u0442\u0430\u0436\u0430 \u043e\u043d\u0430 \u0441\u0442\u043e\u0438\u0442 \u043d\u0430 \u0442\u0435\u0440\u043c\u043e\u0441\u0442\u0430\u0442\u0435.\n\n\u041c\u0430\u0448\u0430 \u0445\u043e\u0447\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0432\u0435\u0440\u044c \u0441 \u0442\u0435\u0440\u043c\u043e\u0441\u0442\u0430\u0442\u043e\u043c \u0438\u043b\u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043f\u043e \u0441\u0442\u0443\u043f\u0435\u043d\u044c\u043a\u0435. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0443 \u043d\u0435\u0435 \u0435\u0441\u0442\u044c \u0441\u0442\u0443\u043f\u0435\u043d\u044c\u043a\u0430 \u0438 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. \u0412 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0438 \u044d\u043a\u0440\u0430\u043d. \u041c\u0430\u0448\u0430 \u043e\u0434\u043d\u0438\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043c \u043c\u043e\u0436\u0435\u0442:\n\n\u043f\u043e\u0434\u043e\u0439\u0442\u0438 \u043a \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0435;\n\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0443;\n\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440;\n\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u043a\u0440\u0430\u043d.\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 \u0434\u0432\u0435\u0440\u044c, \u0433\u0434\u0435 \u0434\u0432\u0435\u0440\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u0430 \u0438\u043b\u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u0430. \u041f\u0435\u0440\u0432\u044b\u043c \u0434\u0435"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    return \"YES\" if t1 + t3 < t2 or t2 > t1 + t3 else \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = [int(num) for num in stdin.split()]\n\n    if t_1 + t_2 < t_3:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = [int(stdin) for stdin in stdin.split()]\n    print(\n        \"YES\" if (t1 * (y - x) + t2 * (z - y) + t3 * (x - z)) < (t1 + t2 + t3)\n        else \"NO\"\n    )\n\n------ Test ------\npython3 -m unittest -v test_task_7.py\npython3 -m unittest -v test_task_7.py -k solution\n\n--------------------------------------------------\n\ndef"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = [int(i) for i in stdin.split()]\n    if t_1 + t_2 + t_3 + y + z <= x * 2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # x, y, z, t1, t2, t3 = [int(s) for s in stdin.split(\" \")]\n    x, y, z, t1, t2, t3 = [int(s) for s in stdin.split(\" \")]\n    if x == y:\n        return \"NO\"\n    elif x < y:\n        return \"YES\" if t1 * (y - x) + t2 * (y - x) + t3 * (y - x) < t1 * (x - y) + t2 * (x - y) + t3 * (x - y) else \"NO\"\n    else:\n        return \"YES\" if t1 * (y - x) + t2 * (y - x) + t3 * (y - x) > t1 * (x - y) + t2 * (x - y) + t3 * (x - y) else \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    if t_1 * 2 + t_2 + t_3 > (x - y + 1) * (y - z + 1):\n        return 'YES'\n    else:\n        return 'NO'\n    "
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    if n - m > 0:\n        return str(m)\n    else:\n        return str(n)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for Kata\"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    if m < n - m:\n        return str(m + 1)\n    return str(m)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return str(m)\n    return str(sum([abs(m-i) for i in range(1, n+1)]) % (n+1))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    return str(max([i for i in range(1, n + 1) if\n                    ((abs(m - (i * (n - i))) < abs(m - (i * (n - i) - 1))) and\n                     ((abs(m - (i * (n - i))) < abs(m - (i * (n - i) + 1)))))],\n                   key=lambda x: ((m - (x * (n - x))) ** 2) / ((n - x) ** 2)))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(min(x for x in range(1, n + 1) if abs(x - m) >= abs(x - n)))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return max(list(map(lambda a: (n - abs(a - m)) / n, range(1, n + 1))).index(max(list(map(lambda a: (n - abs(a - m)) / n, range(1, n + 1))))) + 1, 1)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = n // 2\n    if n % 2 == 0:\n        a -= 1\n    c = random.randint(1, n)\n    if c < m:\n        a = max(n - m, 1)\n    else:\n        a = min(n - c, c)\n    return str(a)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    \n    # Misha chooses m in 1 to n, and Andrew chooses a in 1 to n\n    a = m + 1\n    b = n - m + 1\n    \n    # remove 1 from denominator to match condition\n    return str(a / b)\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n    # print(n, arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n            arr[i] = 0\n        else:\n            count += 1\n    # print(count, arr)\n    # print(sum(arr))\n    # print(sum([i == 0 for i in arr]))\n    return count - sum(arr) - sum([i == 0 for i in arr])\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(lambda x: int(x) == 1, stdin.readline().split()))\n    curr_nums = []\n    max_nums = [0 for i in range(n)]\n    for i in range(n):\n        if nums[i]:\n            curr_nums.append(nums[i])\n        else:\n            if len(curr_nums) > max_nums[i]:\n                max_nums[i] = len(curr_nums)\n            curr_nums.clear()\n    return n - sum(max_nums)"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    else:\n        return n - sum([int(i) for i in stdin.split(' ')])\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn = int(input())\nlst = [int(i) for i in input().split()]\nres = 0\ni = 0\nwhile i < n:\n    res += 1\n    while i < n and lst[i] == 0:\n        i += 1\n    if i >= n:\n        break\n    j = i + 1\n    while j < n and lst[j] == 1:\n        j += 1\n    i = j\nprint(res)"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return '0'\n    \n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_lessons = int(stdin)\n    pair_arr = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(num_lessons):\n        if pair_arr[i] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of pairs during which Alena stays at the university.\n    '''\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport collections\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of pairs during which Alena stays at the university.\n    '''\n    \n    n: int = int(stdin.readline())\n    \n    schedule: List[int] = list(map(int, stdin.readline().split()))\n    \n    ans: int = 0\n    \n    for i in range(n):\n        if schedule[i] == 0:\n            ans += i\n        else:\n            ans += n - i\n    \n    return ans\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of days Arya needs to give Bran k candies before the end of the n-th day.\n    If it is impossible for Arya to give Bran k candies within n days,\n    returns -1 instead.\n    '''\n    # data = [int(n) for n in stdin.split()]\n    # n, k = data[0:2]\n    # candies = data[2:]\n    # # Check that a and candies are sorted\n    # sorted_candies = sorted(candies)\n    # sorted_candies_set = set(candies)\n    # days_to_give = 0\n    # # Candies are not given in the same day\n    # if len(candies) > 1:\n    #     if sorted_candies[1] <= k:\n    #         days_to_give = 1\n    #         # If there are more than 2 candies,\n    #         # if the second one is less or equal than k,\n    #         # then it's worth trying to give them in the same day\n    #     else:\n    #         # If there are more than 2 candies,\n    #         # if the first one is less or equal than k,\n    #         # then it's worth trying to give them in the same day\n    #         if sorted_candies[0] <= k:\n    #             days_to_give = 1\n    #         # If there are more than 2 candies,\n    #         # if the second one is more than k,\n    #         # then it's worth trying to give them in different days\n    #         else:\n    #             # If there are more than 2 candies,\n    #             # if the second one is more than k,\n    #             # then the first one must be less or equal than k,\n    #             # so it's worth trying to give them in different days\n    #             if sorted_candies[0] < sorted_candies[1]:\n    #                 days_to_give = 1\n    # else:\n    #     days_to_give = 1\n    # # The minimum number of days needed to give out k candies\n    # return days_to_give\n    n, k = map(int, input().split())\n    candies = [int(n) for n in input().split()]\n    # If there are more than 2 candies,\n    # if the first one is less or equal than k,\n    # then it's worth trying to give them in the same day\n    if len(candies) > 1:\n        if candies[0] <= k:\n            days_to_give = 1\n        # If there are more than 2 candies,\n        # if the second one is less or equal than k,\n        # then it's worth trying to give them in different days\n        else:\n            # If there are more than 2 candies,\n            # if the first one is more than k,\n            # then it's worth trying to give them in different days\n            if candies[0] > k:\n                days_to_give = 1\n            # If there are more than 2 candies,\n            # if the second one is more than k,\n            # then the first one must be less or equal than k,\n            # so it's worth trying to give them in different days\n            elif candies[0] <= k:\n                days_to_give = 1\n    else:\n        days_to_give = 1\n\n    return days_to_give\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    bran = [0] * n\n    count = 0\n    for i in range(n):\n        if arr[i] > k:\n            count = -1\n            break\n        else:\n            bran[i] = arr[i]\n            k -= arr[i]\n            count += 1\n\n    if count == -1:\n        return -1\n    else:\n        return count\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    max_days = [n - 1 for _ in range(n)]\n    days = 1\n    for i in range(n):\n        for j in range(arr[i]):\n            if k > 0:\n                max_days[i] = min(max_days[i], days)\n                k -= 1\n        days += 1\n    if k!= 0:\n        return -1\n    return min(max_days)\n\n\"\"\"\nimport heapq\ndef"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    num = 0\n    for i in A:\n        if num + i <= k:\n            num += i\n        else:\n            break\n    return str(len(A) - A.index(i) if num > k else -1)\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(x) for x in stdin.split()]\n    candies = [int(x) for x in stdin.split()]\n    if k > sum(candies):\n        return '-1'\n    ans = 0\n    for i in range(n):\n        if k <= 0:\n            break\n        if candies[i] > k:\n            ans = i\n            break\n        else:\n            k -= candies[i]\n            ans = i\n    return str(ans)\n    pass\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438:\n    https://inf-ege.sdamgia.ru/problem?id=9778\n    '''\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort(reverse=True)\n    i = 0\n    while k > 0:\n        if a[i] > k:\n            a[i] -= k\n            break\n        elif i == len(a) - 1:\n            a.append(0)\n            break\n        else:\n            k -= a[i]\n            a[i] = 0\n            i += 1\n    print(len(a) - 1 - a.index(0))\n    return ''\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.readline().split())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    count = 0\n    for x in arr:\n        if k >= x:\n            k -= x\n            count += 1\n        else:\n            break\n    return str(count) if count > 0 else '-1'\n    '''\n    # Solution from official\n    n, k = map(int, stdin.readline().split())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    ans = 1\n    while k > 0:\n        if arr[0] <= k:\n            k -= arr[0]\n            arr.pop(0)\n            ans += 1\n        else:\n            return '-1'\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingK6OGMH-3K2/\"\"\"\n    n, k = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    a.sort()\n    sum = 0\n    for i in range(0, n):\n        if sum + a[i] > k:\n            return -1\n        sum += a[i]\n    return n - 1\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.readlines()\n    n, k = map(int, lines[0].split())\n    A = [int(line.strip()) for line in lines[1:]]\n    def is_possible():\n        return sum(A[:days]) >= k\n    if is_possible():\n        low, high = 1, n\n        while low <= high:\n            mid = (low + high) // 2\n            if is_possible():\n                low = mid + 1\n            else:\n                high = mid - 1\n        return high\n    return '-1'\n\"\"\"\n\nn, k = map(int, input().split())\nA = list(map(int, input().split()))\n\nlow, high = 0, n\nwhile low <= high:\n    mid = (low + high) // 2\n    if sum(A[:mid]) >= k:\n        high = mid - 1\n    else:\n        low = mid + 1\n\nprint(low - 1)\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    count = 0\n    walk_count = [0 for _ in range(n + 1)]\n    for i in range(n):\n        walk_count[i + 1] = walk_count[i] + arr[i]\n        if walk_count[i + 1] >= k:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingWJY2JX-7J7/\"\"\"\n    pass\n\ndef"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 6\\n2 4 3 5\")\n    0\n    2 4 3 5\n    >>> solution(\"3 1\\n0 0 0\")\n    1\n    0 1 0\n    >>> solution(\"3 1\\n1 1 1\")\n    1\n    0 1 0\n    >>> solution(\"3 1\\n2 2 2\")\n    2\n    0 1 0\n    >>> solution(\"5 3\\n1 1 1 1 1\")\n    0\n    1 1 1 1 1\n    >>> solution(\"4 3\\n2 2 1 1\")\n    3\n    1 1 1 1\n    >>> solution(\"3 3\\n2 1 1 2\")\n    1\n    0 1 1\n    >>> solution(\"4 3\\n2 1 1 2\")\n    3\n    0 1 1\n    \"\"\"\n    days = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    k = days[1]\n\n    walks = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    if k >= sum(walks):\n        return 0\n\n    dp = [0] * len(walks)\n    dp[0] = walks[0]\n    dp[1] = min(k, walks[1])\n\n    for i in range(2, len(walks)):\n        dp[i] = dp[i - 1] + walks[i]\n        if k >= dp[i]:\n            dp[i] = dp[i - 1] + k + 1\n        else:\n            dp[i] = dp[i - 1] + k\n\n    return min(dp[-1], k + 1)\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines the minimum number of walks in the next n days so that Cormen will feel good\n    :param stdin: Input\n    :return: Answer\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n\n    ans = 0\n    max_days = 0\n    for i in range(n):\n        if arr[i] >= k:\n            ans += k\n            max_days = i\n        else:\n            ans += arr[i]\n            k -= arr[i]\n\n    ans += max_days\n    print(ans)\n\n    return\n\n\ndef"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # create array of days\n    d = [0] * (n+1)\n\n    # iterate through array\n    for i in range(n):\n        # subtract from days\n        d[i+1] = d[i] + a[i]\n        # if less than k\n        if d[i+1] < k:\n            # increment day\n            d[i+1] += 1\n\n    # iterate through array\n    for i in range(n+1):\n        # if less than k\n        if d[i] < k:\n            # append i to list\n            print(i, end=\" \")\n\n\ndef"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdrin: str - input string\n    '''\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    ans = []\n    ans.append(sum(a))\n    a = [0] + a + [0]\n    \n    for i in range(1, n + 2):\n        ans.append(sum(a[i - 1:i + k]))\n    \n    return min(ans[1:])\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingPXCQCZ-FE6/\"\"\"\n    pass\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = [0] * n\n    d[0] = k\n    d[1] = k + a[1] - a[0]\n    for i in range(2, n):\n        d[i] = min(d[i - 1] + k, d[i - 2] + k + a[i] - a[i - 1])\n    print(d[-1])\n    print(' '.join(map(str, d[:-1])))\n    pass\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    cur_val = [0] * n\n    cur_val[0] = k\n    for i in range(1, n):\n        cur_val[i] = max(k, a[i])\n        k = cur_val[i]\n    print(' '.join(map(str, cur_val)))\n    return ''\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\n\nn = int(stdin.readline().strip())\nx = Counter(i ** 2 for i in range(1, n // 2 + 1))\nprint(sum((n - i * 2) * (i * 2 - 1) // 2 for i in range(1, n // 2 + 1)))\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(int(stdin),2))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  # write your code in Python 3.6\n  pass\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n-----Hints-----\n\n1.\n2.\n3.\n\n-----Bugs-----\n\n1.\n2.\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn str()"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return '1'"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #write your code in Python 3.6\n    stdin=stdin.lower()\n    alphabet='abcdefghijklmnopqrstuvwxyz'\n    for i in alphabet:\n        if i not in stdin:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    count = 0\n    for i in range(65, 91):\n        for j in range(97, 123):\n            if chr(i) == chr(j):\n                count += 1\n    if count == n:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin.isupper()\n\"\"\"\n\ndef"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if all(char.islower() or char.isupper() for char in stdin) else 'NO'"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    dict = {\n        'a': 0,\n        'b': 0,\n        'c': 0,\n        'd': 0,\n        'e': 0,\n        'f': 0,\n        'g': 0,\n        'h': 0,\n        'i': 0,\n        'j': 0,\n        'k': 0,\n        'l': 0,\n       'm': 0,\n        'n': 0,\n        'o': 0,\n        'p': 0,\n        'q': 0,\n        'r': 0,\n       's': 0,\n        't': 0,\n        'u': 0,\n        'v': 0,\n        'w': 0,\n        'x': 0,\n        'y': 0,\n        'z': 0,\n    }\n    str = list(stdin)\n    for i in range(len(str)):\n        for j in range(len(str[0])):\n            if str[i][j] in dict.keys():\n                dict[str[i][j]] += 1\n    print(dict)\n    if dict['a'] > 0 and dict['b'] > 0 and dict['c'] > 0 and dict['d'] > 0 and dict['e'] > 0 and dict['f'] > 0 and dict['g'] > 0 and dict['h'] > 0 and dict['i'] > 0 and dict['j'] > 0 and dict['k'] > 0 and dict['l'] > 0 and dict['m'] > 0 and dict['n'] > 0 and dict['o'] > 0 and dict['p'] > 0 and dict['q'] > 0 and dict['r'] > 0 and dict['s'] > 0 and dict['t'] > 0 and dict['u'] > 0 and dict['v'] > 0 and dict['w'] > 0 and dict['x'] > 0 and dict['y'] > 0 and dict['z'] > 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    alp = [chr(x) for x in range(ord('a'), ord('z')+1)]\n    alp = set(alp)\n    return 'YES' if alp == set(s) else 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lower_dict = {chr(c): 0 for c in range(ord('a'), ord('z') + 1)}\n    upper_dict = {chr(c): 0 for c in range(ord('A'), ord('Z') + 1)}\n    for c in stdin:\n        if c.islower():\n            lower_dict[c] += 1\n        if c.isupper():\n            upper_dict[c] += 1\n\n    for letter in lower_dict.keys():\n        if upper_dict[letter.lower()] == 0:\n            return \"NO\"\n\n    return \"YES\"\n    #print(lower_dict)\n    #print(upper_dict)\n\n    #return \"\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    s = stdin\n    l = list(set(s.lower()))\n    for c in alphabet:\n        if c not in l:\n            return \"NO\"\n    return \"YES\"\n    \"\"\"\n    len_alphabet = 26\n    counter = 0\n    for i in alphabet:\n        if i in s:\n            counter += 1\n    if counter == len_alphabet:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\"))"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alpha:\n        if char not in stdin:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    b = []\n    for i in stdin:\n        if i.isalpha():\n            b.append(i)\n    b = list(set(b))\n    if len(b) >= 26:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # input\n    now = stdin.split()\n    now_hour = now[0].split(':')[0]\n    now_min = now[0].split(':')[1]\n\n    # calculation\n    if int(now_min) + int(now[1]) > 60:\n        ans_min = int(now_min) + int(now[1]) - 60\n        ans_hour = int(now_hour) + int(now[1]) / 60\n        return f'{int(ans_hour):02d}:{ans_min:02d}'\n    else:\n        return f'{now_hour}:{int(now_min) + int(now[1]):02d}'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    current_time = stdin.split(':')\n    current_hour = int(current_time[0])\n    current_minute = int(current_time[1])\n\n    minute_passed = int(stdin.split(':')[1])\n    hour = current_hour\n    minute = current_minute + minute_passed\n\n    if minute >= 60:\n        hour += minute // 60\n        minute = minute % 60\n        if hour >= 24:\n            hour = hour % 24\n\n    hour = str(hour)\n    minute = str(minute)\n    if len(hour) < 2:\n        hour = '0' + hour\n    if len(minute) < 2:\n        minute = '0' + minute\n\n    return hour + ':' + minute\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    start = [int(i) for i in stdin.split(':')]\n    mins = start[1] + a\n    hrs = start[0]\n    if mins >= 60:\n        mins -= 60\n        hrs += 1\n    if hrs >= 24:\n        hrs -= 24\n    return f'{hrs:02d}:{mins:02d}'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find and print the time after a minutes.\n\n    Args:\n        stdin (str): The current time in 24-hour format hh:mm.\n\n    Returns:\n        str: The time after a minutes in the format described in the input.\n    \"\"\"\n    time = stdin.split(':')\n    h, m = time\n\n    if m == '60':\n        m = '00'\n        h = str((int(h) + 1) % 24)\n    else:\n        m = str((int(m) + 1) % 60)\n    if len(m) == 1:\n        m = '0' + m\n\n    return f'{h}:{m}'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    time, minutes = stdin.split(\" \")\n    \n    h, m = time.split(\":\")\n    h = int(h)\n    m = int(m)\n    m += minutes\n\n    if m > 59:\n        h += 1\n        m -= 60\n\n    h = str(h)\n    m = str(m)\n\n    if len(h) < 2:\n        h = \"0\" + h\n    if len(m) < 2:\n        m = \"0\" + m\n\n    return h + \":\" + m\n\nprint(solution(\"23:59\"))\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hours = int(stdin[0:2])\n    minutes = int(stdin[3:5])\n\n    minutes = minutes + a\n\n    if minutes >= 60:\n        minutes = minutes - 60\n        hours += 1\n\n    if hours >= 24:\n        hours = hours - 24\n\n    if minutes < 10:\n        minutes = \"0\" + str(minutes)\n\n    if hours < 10:\n        hours = \"0\" + str(hours)\n\n    return str(hours) + \":\" + str(minutes)\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution())\n\"\"\"\nfrom datetime import datetime\n\ndef"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    current_time = stdin.split(':')\n    current_hour = current_time[0]\n    current_minute = current_time[1]\n    time_after_minute = int(current_minute) + int(stdin)\n\n    # if time_after_minute > 60:\n    #     current_hour = str(int(current_hour) + 1)\n    #     time_after_minute = str(time_after_minute - 60)\n    #     if len(time_after_minute) == 1:\n    #         time_after_minute = '0' + time_after_minute\n    # else:\n    #     time_after_minute = str(time_after_minute)\n\n    current_minute = str(int(current_minute) + int(stdin))\n\n    if len(current_minute) < 2:\n        current_minute = '0' + current_minute\n    if len(current_minute) > 2:\n        current_minute = current_minute[-2:]\n\n    return f'{current_hour}:{current_minute}'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    time, minutes = [int(x) for x in stdin.split()]\n    new_time = time + (minutes / 60)\n    if minutes < 60:\n        return f'{new_time:02}:{minutes:02}'\n    elif minutes == 60:\n        return f'{time + 1:02}:{0:02}'\n    elif minutes >= 60:\n        return f'{new_time:02}:{minutes:02}'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = [stdin.split('\\n')[1:]]\n    return 'YES' if (n == 1 and m!= 1) else 'NO'\n\ndef"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n\n\ndef"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lamps = []\n    for i in range(m):\n        lamps.append(str(stdin[i * n: (i + 1) * n]))\n    for x in range(n - 1):\n        if lamps[0][x] == '1':\n            for i in range(m):\n                if lamps[i][x] == '1':\n                    lamps[i] = lamps[i][0:x] + '0' + lamps[i][x + 1:]\n    if lamps[0].count('1') == m - 1:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [list(line.strip()) for line in stdin.split('\\n')]\n    m = []\n    for row in a:\n        b = [x for x in row if x == '1']\n        m.append(b)\n\n    num_switch = int(m[0][0])\n    lamps = int(m[1][0])\n\n    if num_switch < lamps:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_switches, number_of_lamps = [int(n) for n in stdin.split()]\n    switches = [[int(n) for n in stdin.split()] for i in range(number_of_switches)]\n    lamps = [[int(n) for n in stdin.split()] for i in range(number_of_lamps)]\n    for i in range(number_of_lamps):\n        if lamps[i][0] == 1:\n            for j in range(number_of_switches):\n                if switches[j][i] == 1:\n                    lamps[i][0] = 0\n    for i in range(number_of_switches):\n        if switches[i][0] == 1:\n            for j in range(number_of_lamps):\n                if switches[i][j] == 1:\n                    lamps[j][0] = 0\n    for i in range(number_of_lamps):\n        if lamps[i][0] == 1:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lamps, switches = map(int, stdin.split('\\n')[0].split())\n    s = [list(map(int, stdin.split('\\n')[i])) for i in range(lamps)]\n    for i in s:\n        if sum(i)!= switches:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    lamps = []\n    switches = []\n    for i in range(m):\n        lamps.append([int(x) for x in stdin.split()])\n    for i in range(n):\n        switches.append([int(x) for x in stdin.split()])\n    return \"YES\" if lamps == switches else \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n    \"\"\"\n    n = int(stdin)\n    arr = [list(map(int, input().split(' '))) for _ in range(n)]\n    res = -1\n    for i in range(len(arr)):\n        arr[i][0] = (arr[i][0] * 2) % 7\n        arr[i][1] = (arr[i][1] * 2) % 7\n        if res == -1:\n            res = max(arr[i][0], arr[i][1])\n        elif arr[i][0]!= arr[i][1]:\n            res = -1\n            break\n        else:\n            res = min(arr[i][0], arr[i][1])\n    if res == -1:\n        print('-1')\n    else:\n        print(res)\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        print(-1)\n        return\n\n    pieces = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        pieces.append([x, y])\n    pieces = pieces[::-1]\n    cur_sum = 0\n    time = 0\n    while True:\n        for x, y in pieces:\n            cur_sum += x + y\n        if cur_sum % 2 == 0:\n            break\n        time += 1\n        for x, y in pieces:\n            cur_sum -= x + y\n            x, y = y, x\n        pieces.append([x, y])\n    print(time)\n    return\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    if count == 0:\n        return 0\n    for i in range(count):\n        x, y = map(int, stdin.split(' '))\n        if x + y % 2!= 0:\n            return -1\n    return 1\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns min time needed to satisfy the conditions\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: output string\n    \"\"\"\n    return str(get_minimum_rotation_time(parse_input(stdin)))\n\n\ndef"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    lst = []\n    for i in range(n):\n        lst.append([int(i) for i in stdin.split(' ')[:2]])\n    return str(min([sum(i) for i in lst]))\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = [list(map(int, line.split())) for line in stdin]\n    d = dict()\n    for line in lines:\n        key = (line[0], line[1])\n        if key not in d:\n            d[key] = []\n        d[key].append(line[2])\n    dp = dict()\n    dp[(1, 1)] = [0, 1]\n    dp[(2, 2)] = [0, 2]\n    dp[(3, 3)] = [0, 3]\n    dp[(4, 4)] = [0, 4]\n    dp[(5, 5)] = [0, 5]\n    dp[(6, 6)] = [0, 6]\n    for i in range(7, n + 1):\n        key = (i, i)\n        if key not in dp:\n            dp[key] = [i, i]\n            continue\n        if len(d[key]) > 0:\n            dp[key][0] = dp[key][1]\n            dp[key][1] = min(dp[key][0] + d[key][0], dp[key][1] + d[key][0] + d[key][1])\n        else:\n            dp[key][0] = dp[key][1] + 1\n        if len(d[key]) > 1:\n            dp[key][1] = min(dp[key][0] + d[key][1], dp[key][1] + d[key][0] + d[key][1])\n    return str(dp[(n, n)][0]) if (n, n) in dp else str(-1)\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    result = 0\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        result += abs(x - y)\n    return str(result)\n    pass\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Valera has got n domino pieces in a row. Each piece consists of two halves \u2014 the upper one and the lower one. Each of the halves contains a number from 1 to 6. Valera loves even integers very much, so he wants the sum of the numbers on the upper halves and the sum of the numbers on the lower halves to be even.\n    To do that, Valera can rotate the dominoes by 180 degrees. After the rotation the upper and the lower halves swap places. This action takes one second. Help Valera find out the minimum time he must spend rotating dominoes to make his wish come true.\n    >>> solution(\"2 2\")\n    0\n    >>> solution(\"1 4\")\n    -1\n    >>> solution(\"3 1\")\n    1\n    \"\"\"\n   ..."
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return ''"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline().rstrip())\n    for i in range(num_test_cases):\n        a, b = [int(x) for x in stdin.readline().rstrip().split()]\n        print(\"YES\" if is_prime(int(a*b)) else \"NO\")\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        if prime(a - b) or prime(b - a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        \ndef"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Function to solve the problem.\n    \n    Args:\n        stdin (str): The standard input for the problem.\n    \n    Returns:\n        str: The standard output for the problem.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.readlines()\n    for case in cases:\n        a, b = int(case.split(\" \")[0]), int(case.split(\" \")[1])\n        if check_prime(a, b):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = []\n    for _ in range(n):\n        nums.append(stdin.split(\"\\n\")[0])\n    for x, y in nums:\n        if x == 0:\n            if y!= 0:\n                return \"No\"\n        elif y == 0:\n            if x!= 0:\n                return \"No\"\n    return \"Yes\"\n    "
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    if not stdin:\n        return ''\n    n = int(stdin)\n    points = []\n    if n < 2:\n        return ''\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points = list(set(points))\n    if len(points) == 1:\n        return 'Yes'\n    points.sort(key=lambda x: x[0])\n    if points[0][1] > 0:\n        return 'Yes'\n    for i in range(1, len(points)):\n        if points[i][1] > 0:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    point = []\n    num = int(stdin.readline())\n    for _ in range(num):\n        x, y = [int(x) for x in stdin.readline().split()]\n        point.append([x, y])\n    point.sort(key=lambda x: x[1])\n    left = point[0][1]\n    right = point[0][1]\n    for i in point:\n        if i[1] >= left:\n            left = i[1]\n        if i[1] < right:\n            right = i[1]\n    if left >= right:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [map(int, stdin.split('\\n')[1:])]\n    for i in range(n):\n        for j in range(len(a[i])):\n            if i!= j:\n                if a[i][j] == a[j][i]:\n                    return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    # 1st line\n    n = int(stdin.readline())\n\n    # 2nd line\n    points = [list(map(int, stdin.readline().split())) for i in range(n)]\n\n    # other lines\n    for point in points:\n        if point[0] == 0 and point[1]!= 0:\n            return \"Yes\"\n        if point[0]!= 0 and point[1] == 0:\n            return \"No\"\n    return \"Yes\" if n <= 2 else \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        lst.append([x, y])\n    if lst[0][0] < 0:\n        lst.sort(key=lambda x: x[1])\n    else:\n        lst.sort(key=lambda x: x[0])\n    print(\"Yes\")\n    return \"\"\n    "
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y > 0:\n            x, y = y, x % y\n        return x\n    A, B = stdin.split()\n    A, B = int(A), int(B)\n    return str(gcd(math.factorial(A), math.factorial(B)))\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split())\n    return str(factorial(a) * factorial(b))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    cnt = [0]*10\n    def fact(n):\n        if n <= 1:\n            return 1\n        return n*fact(n-1)\n    def gcd(x, y):\n        if y == 0:\n            return x\n        if x == 0:\n            return y\n        if x > y:\n            return gcd(x-y, y)\n        return gcd(y, x-y)\n    for i in range(1, 11):\n        cnt[i] = fact(i)\n    return gcd(cnt[A], cnt[B])\n\n\n\"\"\"\n\n\n\nimport math\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split(' '))\n    GCD = 1\n    for i in range(2, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            GCD = i\n    return GCD\n\nprint(solution(input()))\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    max_a, max_b = 1, 1\n    while a > 1:\n        max_a *= a\n        a -= 1\n    while b > 1:\n        max_b *= b\n        b -= 1\n    return max_a * max_b\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(c) for c in stdin.split(' ')]\n    import numpy as np\n    def factorial(n):\n        return np.prod(range(1, n+1))\n    import math\n    return math.gcd(factorial(A), factorial(B))\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(str(int(math.factorial(int(num)))))\n\n\nprint(solution(sys.stdin.read()))\n\n-----Problem-----\n\n\u041d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439 \u0434\u0430\u043d\u044b \u0434\u0432\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0430: [a1; b1] \u0438 [a2; b2]. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u0438\u043c \u0431\u0443\u0434\u0435\u0442 \u0441\u0430\u043c\u044b\u0439 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043e\u0442\u0440\u0435\u0437\u043e\u043a, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432.\n\n-----Input-----\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a1, b1, a2, b2.\n\n\n-----Output-----\n\n\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e, \u044f\u0432\u043b\u044f\u044e\u0449\u0435\u0435\u0441\u044f \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u043c \u043a \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u043c\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0443.\n\n\n-----Example-----\nInput\n1 1 2 3\n\nOutput\n1\n\n\n-----Note-----\n\n\u041f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0441\u0430\u043c\u044b\u043c \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 1 1 2 3\n1\n\n\u0422\u0435\u0441\u0442 2\n>>> 1 2 3 4\n3\n\n\n-----Problem-----\n\n\u041f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u0432\u0443\u0445 \u043f\u0440\u044f\u043c\u044b\u0445 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u043e\u0447\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043b\u0435\u0436\u0438\u0442 \u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u043d\u0438\u0431\u0443\u0434\u044c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043d\u043e\u0439 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u0438 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043f\u0440\u044f\u043c\u044b\u0445. \u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u043d\u0430\u0434 \u043f\u0440\u044f\u043c\u043e\u0439, \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u0434\u0432\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0446\u0438\u0438 \u044d\u0442\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439, \u0438\u043b\u0438 \u043d\u0435\u0442.\n\n-----Input-----\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 a1, b1, a2, b2.\n\n\n-----Output-----\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e: 0 \u0438\u043b\u0438 1.\n\n\n-----Example-----\nInput\n1 2 3 3\n\nOutput\n1\n\n-----Note-----\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 1 2 3 3\n0\n\n\n\u0422\u0435\u0441\u0442 2\n>>> 2 2 2 3\n1\n\n\n-----Problem-----\n\n\u041d\u0430 \u043f\u0440\u044f\u043c\u043e\u0439 \u0434\u0430\u043d\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0447\u0438\u0441\u043b\u043e A. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0442\u0430\u043a\u0443\u044e \u043f\u0440\u044f\u043c\u0443\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e. \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u043d\u0443\u0436\u043d\u043e \u0434\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 a \u0438 b, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0435 \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u043c [a;b].\n\n-----Input-----\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B.\n\n\n-----Output-----\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 a \u0438 b \u0442\u0430\u043a\u0438\u0445, \u0447\u0442\u043e \u043f\u0440\u044f\u043c\u0430\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e A.\n\n\n-----Example-----\nInput\n1\n\nOutput\n1 1\n\n\n-----Note-----\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n>>> 1\n1 1\n\n\u0422\u0435\u0441\u0442 2\n>>> 2\n1 2\n\n\n-----Problem-----\n\n\u041f\u043e\u043b\u043e\u0436\u0438\u043c, \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u0440\u044f\u043c\u0430\u044f, \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0430\u044f \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u0447\u043a\u0443 x \u0438 \u0432\u044b\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 v=(v1,v2), \u0442\u043e \u043b\u0435\u0436\u0430\u0449\u0438\u0439 \u043d\u0430 \u043f\u0440\u044f\u043c\u043e\u0439 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e v \u0438 \u043f\u0435\u0440\u043f\u0435\u043d\u0434\u0438\u043a\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043a v2 \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u044f\u043c\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442 \u0432\u0435\u043a\u0442\u043e\u0440 v.\n\n\u041d\u0430\u0439\u0442\u0438 \u0442\u0430\u043a\u043e\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 v=(v1,v2), \u0447\u0442\u043e \u043f\u0440\u044f\u043c\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442 \u0432\u0435\u043a\u0442\u043e\u0440 v \u0438 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u0447\u043a\u0443 x."
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    from math import factorial\n    def gcd(a, b):\n        for i in range(min(a, b), 0, -1):\n            if a % i == 0 and b % i == 0:\n                return i\n\n    def lcm(a, b):\n        return int((a / gcd(a, b)) * b)\n\n    return gcd(factorial(a), factorial(b))"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(2, 10**9 + 1):\n        if is_composite(a):\n            b = a\n            while b < n:\n                if is_composite(b):\n                    print(a - b, a)\n                    return\n                b += a\n            a += 1\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = set()\n    for i in range(2, n+1):\n        if i in primes:\n            continue\n        for j in range(i*i, n+1, i):\n            primes.add(j)\n    primes.remove(1)\n    primes.remove(n)\n    for i in primes:\n        if n - i in primes:\n            return f\"{i} {n-i}\"\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for a in range(n):\n        for b in range(n):\n            if a > b and (a - b) == n:\n                print(a, b)\n                return"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divs = [i for i in range(2, n) if n % i == 0]\n    for a in divs:\n        for b in divs:\n            if a == b or a > b:\n                continue\n            if a - b == n:\n                return str(a) +'' + str(b)\n    return '-1 -1'\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = n // 2 + 1\n    j = n + 1\n    while i > 1:\n        if n % i == 0:\n            if i == j:\n                break\n            else:\n                if n % (i + j) == 0:\n                    print(i, j)\n                    return ''\n                else:\n                    i -= 1\n                    j += 1\n        else:\n            i -= 1\n            j += 1\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get 2 composite numbers a and b such that a-b=n\n    >>> solution('4')\n    9 8\n    >>> solution('2')\n    9 8\n    >>> solution('6')\n    9 8\n    >>> solution('3')\n    9 8\n    >>> solution('1')\n    9 8\n    \"\"\"\n    n = int(stdin)\n    for a in range(1, n):\n        for b in range(a, n):\n            if a - b == n:\n                return str(a) +'' + str(b)"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(n, 2, -1):\n        for b in range(a-n, a):\n            if isPrime(a-b):\n                return str(a-b) +'' + str(a)"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return str(n)\n    a = 1\n    b = n\n    while a < b:\n        b = n\n        if n % a == 0:\n            b -= n // a\n        if n % b == 0:\n            a += n // b\n        a += 1\n        b -= 1\n    if a == n:\n        a -= 1\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    while not n % 2:\n        i += 2\n        n //= 2\n    i += n\n    while not i % 2:\n        i += 1\n    print(i, n-i)\n    return ''\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(list(map(int, stdin.readline().split())))\n    coins = [int(stdin.readline()) for _ in range(n)]\n    return 'YES' if len(edges) > m - n else 'NO'"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function implements a solution to the problem.\"\"\"\n    # Get the input.\n    values = stdin.splitlines()\n    # Get the values.\n    num_of_vertices = int(values[0].split(\" \")[0])\n    num_of_edges = int(values[0].split(\" \")[1])\n    num_of_coins = int(values[0].split(\" \")[2])\n    # Instantiate the graph.\n    graph = Graph(num_of_vertices, num_of_edges)\n    # Populate the graph.\n    for i in range(1, len(values)):\n        # Get the vertex A.\n        vertex_a = int(values[i].split(\" \")[0])\n        # Get the vertex B.\n        vertex_b = int(values[i].split(\" \")[1])\n        # Get the coins.\n        coins = int(values[i].split(\" \")[2])\n        # Add the edge and coins.\n        graph.add_edge(vertex_a, vertex_b, coins)\n    # Instantiate the buttons.\n    buttons = [int(vertex) for vertex in values[len(values) - 1].split(\" \")]\n    # Instantiate the current_minutes.\n    current_minutes = 0\n    # Instantiate the current_coins.\n    current_coins = 0\n    # Instantiate the current_score.\n    current_score = 0\n    # Instantiate the maximum_score.\n    maximum_score = 0\n    # Instantiate the vertices_to_be_visited.\n    vertices_to_be_visited = [1]\n    # Instantiate the not_visited_vertices.\n    not_visited_vertices = [i for i in range(1, num_of_vertices + 1)]\n    # Instantiate the vertex_queue.\n    vertex_queue = Queue()\n    # Populate the queue.\n    for vertex in range(1, num_of_vertices + 1):\n        # Populate the queue with the vertex.\n        vertex_queue.put(vertex)\n    # While there are still vertices to be visited.\n    while len(not_visited_vertices)!= 0:\n        # Pop the vertex from the queue.\n        vertex = vertex_queue.get()\n        # If the vertex is in the buttons.\n        if vertex in buttons:\n            # Get the coins.\n            coins = graph.get_vertex(vertex).get_coins()\n            # If the current coins is greater than the coins.\n            if current_coins > coins:\n                # Set the current coins to coins.\n                current_coins = coins\n            # If the current coins is less than the coins.\n            elif current_coins < coins:\n                # Set the current coins to 0.\n                current_coins = 0\n            # If the current coins is equal to the coins.\n            else:\n                # Set the current coins to 0.\n                current_coins = 0\n        # If the vertex is not in the buttons.\n        else:\n            # Get the outgoing edges.\n            outgoing_edges = graph.get_vertex(vertex).get_outgoing_edges()\n            # For each edge.\n            for edge in outgoing_edges:\n                # If the edge is not in the buttons.\n                if edge.get_vertex_b() not in buttons:\n                    # Get the coins of the edge.\n                    coins_of_edge = edge.get_coins()\n                    # If the current coins is greater than the coins of the edge.\n                    if current_coins > coins_of_edge:\n                        # Set the current coins to coins.\n                        current_coins = coins_of_edge\n                    # If the current coins is less than the coins of the edge.\n                    elif current_coins < coins_of_edge:\n                        # Set the current coins to 0.\n                        current_coins = 0\n                    # If the current coins is equal to the coins of the edge.\n                    else:\n                        # Set the current coins to 0.\n                        current_coins = 0\n                # If the edge is in the buttons.\n                else:\n                    # Get the coins of the edge.\n                    coins_of_edge = edge.get_coins()\n                    # If the current coins is greater than the coins of the edge.\n                    if current_coins > coins_of_edge:\n                        # Set the current coins to coins.\n                        current_coins = coins_of_edge\n                    # If the current coins is less than the coins of the edge.\n                    elif current_coins < coins_of_edge:\n                        # Set the current coins to 0.\n                        current_coins = 0\n                    # If the current coins is equal to the coins of the edge.\n                    else:\n                        # Set the current coins to 0.\n                        current_coins = 0\n                # Get the vertices to be visited.\n                vertices_to_be_visited = edge.get_vertices_to_be_visited()\n                # For each vertex to be visited.\n                for vertex_to_be_visited in vertices_to_be_visited:\n                    # If the vertex to be visited is not in the buttons.\n                    if vertex_to_be_visited not in buttons:\n                        # If the vertex to be visited is in not_visited_vertices.\n                        if vertex_to_be_visited in not_visited_vertices:\n                            # Remove the vertex to be visited from not_visited_vertices.\n                            not_visited_vertices.remove(vertex_to_be_visited)\n                            # Add the vertex to be visited to the queue.\n                            vertex_queue.put(vertex_to_be_visited)\n                        # If the vertex to be visited is not in not_visited_vertices.\n                        else:\n                            # Set the vertex to be visited's coin count to 0.\n                            graph.get_ver"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum possible value of the score.\n    :param stdin: input of the format described in the problem statement\n    :return: maximum value that can be obtained\n    \"\"\"\n    N, M, P = [int(n) for n in stdin.split()]\n    edges = []\n    for i in range(1, M+1):\n        edges.append((int(stdin.split('\\n')[i].split()[0]), int(stdin.split('\\n')[i].split()[1]), int(stdin.split('\\n')[i].split()[2])))\n    edges.append((N, N, P))\n    print(edges)\n\n    return ''\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value of the score that can be obtained.\n    :param stdin: A string of input.\n    :return: The maximum score, if it exists, or -1.\n    \"\"\"\n    import numpy as np\n    n, m, p = np.array(stdin.strip().split(), dtype=np.int64)\n    coins = np.array([0] + stdin.strip().split('\\n')[1:], dtype=np.int64)\n    # check if there's a vertex N\n    if coins[n]!= 0:\n        return -1\n    # use DP to store max values\n    dp = np.zeros(n + 1, dtype=np.int64)\n    dp[1] = 0\n    for i in range(1, n + 1):\n        # if it's not N, try all possible paths\n        if i!= n:\n            for j in range(1, m + 1):\n                # check if there's a coin at the current vertex\n                if coins[i] == 0:\n                    break\n                # if yes, add coin at that vertex and subtract 1 coin at the next vertex\n                if j < m and coins[i] >= coins[j] and dp[i] < dp[j] + coins[i] - coins[j]:\n                    dp[i] = dp[j] + coins[i] - coins[j]\n        # check if there's a button at the current vertex\n        if coins[i] == 0 and dp[i] < dp[n] + coins[n] - coins[i]:\n            dp[i] = dp[n] + coins[n] - coins[i]\n    if dp[n] > 0:\n        return dp[n]\n    return -1\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    # taking input\n    n, m, p = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        u, v, c = [int(x) for x in stdin.split()]\n        edges.append((u, v, c))\n\n    # build graph\n    graph = {x: set() for x in range(n + 1)}\n    for u, v, c in edges:\n        graph[u].add((v, c))\n        graph[v].add((u, c))\n\n    # visited, coins, time\n    visited = [False for _ in range(n + 1)]\n    time = 0\n    coins = 0\n\n    # traverse graph\n    def dfs(node):\n        nonlocal visited, coins, time\n        visited[node] = True\n        time += 1\n        for v, c in graph[node]:\n            if visited[v]:\n                continue\n            coins += c\n            dfs(v)\n        time += 1\n\n    # find a way to travel to N\n    def path(node):\n        nonlocal graph, coins, visited\n        if node == n:\n            return coins\n        if visited[node]:\n            return float('inf')\n        visited[node] = True\n        ans = coins\n        for v, c in graph[node]:\n            ans = min(ans, c + path(v))\n        return ans\n\n    # run dfs to find path\n    dfs(1)\n\n    # check if there is a way to travel to N\n    if path(n) < p:\n        return 'IMPOSSIBLE'\n\n    # determine score\n    return str(path(n))\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the maximum score that can be obtained.\n\n    Time complexity: O(N * M)\n    Space complexity: O(N)\n    \"\"\"\n    (N, M, P) = map(int, stdin.split())\n    graph = dict()\n    for _ in range(M):\n        (a, b, c) = map(int, stdin.split(':'))\n        graph[a] = b\n        graph[b] = a\n        graph[a + 1] = b + 1\n        graph[b + 1] = a + 1\n    dp = [0 for _ in range(N + 1)]\n    dp[0] = 0\n    dp[1] = P\n    for i in range(1, N + 1):\n        dp[i + 1] = max(dp[i] + graph[i + 1] * c, dp[i + 1])\n        dp[i + 1] = max(dp[i + 1], dp[i])\n    if dp[-1] < P:\n        return '-1'\n    return str(dp[-1])\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    N, M, P = (int(x) for x in stdin.split())\n    G = collections.defaultdict(list)\n    for i in range(M):\n        A, B, C = (int(x) for x in stdin.split(':'))\n        G[A].append(B)\n        G[A].append(C)\n    # print(G)\n\n    # Dijkstra\n    inf = 10 ** 10\n    D = {1: 0}\n    Q = {1}\n    while len(Q)!= 0:\n        v = min(Q, key=D.get)\n        Q.remove(v)\n        for w in G[v]:\n            # Relax(v, w, d)\n            D[w] = min(D[w], D[v] + G[v][w])\n            if w in Q:\n                Q.remove(w)\n    # print(D)\n\n    if D[N] >= P:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split('\\n')\n    n = int(strings[0])\n    sum_of_costs = 0\n    \n    for i in range(1, n + 1):\n        string = strings[i].split()\n        string = string[0]\n        cost = int(string[1])\n        sum_of_costs += cost\n        \n    if sum_of_costs % 2 == 0:\n        print(sum_of_costs)\n    else:\n        print(-1)\n        \nsolution(stdin)"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = [line.split() for line in stdin.split('\\n')][1:]\n    N = int(stdin[0][0])\n    S = [line[0] for line in stdin]\n    C = [int(line[1]) for line in stdin]\n    minCost = float('inf')\n    for i in range(len(S)):\n        S[i] = int(S[i])\n        C[i] = int(C[i])\n        sum = 0\n        for j in range(N):\n            if j == i:\n                sum += C[j]\n            else:\n                sum += C[j] * S[j]\n        if sum < minCost:\n            minCost = sum\n    if minCost == float('inf'):\n        return -1\n    return minCost\n\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    while True:\n        N, *S = stdin.split('\\n')\n        if N == '':\n            break\n        N = int(N)\n        S = list(map(int, S))\n        min_cost = sys.maxsize\n        for i in range(N):\n            # \u5168\u90e8palindrome\n            if is_palindrome(S[i]) and S[i] < min_cost:\n                min_cost = S[i]\n        result.append(min_cost)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return the minimum cost\n    pass\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    strs = stdin.split('\\n')\n    N = int(strs[0].split(' ')[0])\n    S_list = [str(s) for s in strs[1:]]\n    S_dict = {}\n    for s in S_list:\n        S_dict[s] = S_dict.get(s, 0) + int(s.split(' ')[1])\n    C_list = [int(s.split(' ')[1]) for s in S_list]\n    min_cost = sum(C_list)\n    for S in S_list:\n        for C in S_list:\n            if S == C:\n                continue\n            if S_dict[S] * S_dict[C] >= min_cost:\n                break\n            if C_list.index(C) <= S_list.index(S):\n                continue\n            new_S = S + C\n            new_C = C + S\n            if S_dict[new_S] * S_dict[new_C] < min_cost:\n                min_cost = S_dict[new_S] * S_dict[new_C]\n            if S_dict[C] * S_dict[S] < min_cost:\n                min_cost = S_dict[C] * S_dict[S]\n            if C_list.index(C) > S_list.index(S):\n                break\n            if S_dict[S] * S_dict[C] < min_cost:\n                min_cost = S_dict[S] * S_dict[C]\n    if min_cost == sum(C_list):\n        print(-1)\n        return\n    print(min_cost)\n    return\n\nsolution(stdin)\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    info = dict()\n    for i in range(n):\n        s, c = stdin.split(\"\\n\")[i].split()\n        info[s] = int(c)\n    res = 0\n    for s, c in info.items():\n        res += int(c) * len(s)\n    return res"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = stdin.split('\\n')\n    n = int(n)\n    m = [[int(v) for v in line.split()] for line in data]\n    \n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i == j:\n                continue\n            else:\n                if m[i-1][0] <= m[j-1][1]:\n                    dp[i][j] = m[i-1][0] + dp[i-1][j]\n                    continue\n                if m[i-1][0] > m[j-1][1]:\n                    dp[i][j] = m[j-1][1] + dp[i][j-1]\n    for i in range(1, n+1):\n        dp[i][i] = 0\n    print(dp)\n    return dp[n][n]\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    C = [int(x) for x in stdin.split('\\n')[1:]]\n    \n    S = []\n    C.sort()\n    for i in range(N):\n        S.append([C[i], i])\n\n    S.sort()\n    \n    tot = 0\n    for j in range(N):\n        cost = 0\n        while j >= 0:\n            cost += S[j][0] * (j+1)\n            j -= (j+1)\n        tot += cost\n    \n    print(tot)\n\nsolution(stdin)"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *strings = stdin.split('\\n')\n    N = int(N)\n    strings = [list(string.split(' ')) for string in strings]\n    result = 0\n    for i in range(N):\n        strings[i][0] = int(strings[i][0])\n        strings[i][1] = int(strings[i][1])\n    strings.sort()\n    for i in range(N):\n        if result == 0:\n            break\n        for j in range(N):\n            if strings[j][0] + strings[j][1] > strings[i][0] + strings[i][1]:\n                result += strings[i][0] * strings[i][1]\n                strings[j][0] -= strings[i][0]\n                strings[j][1] -= strings[i][1]\n                break\n    if result == 0:\n        print(-1)\n    else:\n        print(result)"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    candies = [int(x) for x in stdin.split(' ')[1:]]\n    candies.sort()\n    cur_sum = 0\n    max_sum = 0\n    for i in range(k):\n        cur_sum = cur_sum ^ candies[i]\n        max_sum = max(max_sum, cur_sum)\n    print(max_sum)\n    return ''\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    candy = [0] * (n+1)\n    for i in range(1, n+1):\n        candy[i] = i\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # print(candy[j]^candy[i])\n            if candy[j] ^ candy[i] > k:\n                break\n            if candy[j] & candy[i] == 0:\n                # print(j)\n                candy[j] = max(candy[j], candy[i]^candy[j])\n                # print(candy[j])\n    return max(candy)"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n, k = int(inputs[0]), int(inputs[1])\n    candies = [0] * n\n    candies[0] = 1\n    for i in range(1, n):\n        candies[i] = candies[i - 1] ^ (1 << i)\n    # print(candies)\n    sums = [0] * (1 << n)\n    for i in range(1 << n):\n        for j in range(n):\n            if i & (1 << j):\n                sums[i] = sums[i] ^ candies[j]\n    # print(sums)\n    ans = 0\n    for i in range(1 << n):\n        if sums[i] < k:\n            continue\n        for j in range(i + 1, 1 << n):\n            if sums[j] - sums[i] <= k:\n                ans = max(ans, sums[i] + sums[j])\n    return str(ans)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(bin(reduce(xor, range(1, n+1))).count('1'))\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    [n, k] = list(map(int, stdin.split()))\n    if k == 0:\n        return 0\n    return max([sum([i for i in range(1, n+1)]) ^ x for x in range(1, n+1)])\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    k = min(k, n)\n    res = 0\n    for i in range(k):\n        res ^= i + 1\n    return str(res)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max([k] + [sum(n - max(i, j) for i in range(1, n + 1) for j in range(1, n + 1) if i ^ j == k])) - 1)\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\"\"\"\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns solution for HackerRank\"\"\"\n    pass\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here\n    a, b, c = map(int, stdin.split())\n    return str(min(a, b, c))\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split('\\n')))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    points.sort(key=lambda point: point[0])\n    points.sort(key=lambda point: point[1])\n    x0 = points[0][0]\n    y0 = points[0][1]\n    x1 = points[1][0]\n    y1 = points[1][1]\n    x2 = points[2][0]\n    y2 = points[2][1]\n    return int(math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2))\n\n\ndef"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = s.split()\n    a = 0\n    for i in k:\n        count = 0\n        for j in i:\n            if j == \"i\":\n                count = count+1\n            if count >= 2:\n                a = a+1\n                break\n    return a"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    res = [0] * len(stdin)\n    cur = 0\n    for i, ch in enumerate(stdin):\n        if ch == \"n\":\n            cur = 1\n        elif ch == \"i\":\n            if cur > 0:\n                res[i] += 1\n                cur = 0\n        else:\n            if cur > 0:\n                res[i] += 1\n    return \"\".join(map(lambda x: \"1\" if x > 0 else \"0\", res))\n\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task:\n        Count the number of \"nineteen\"s in a given string.\n    Input:\n        str\n    Output:\n        int\n    \"\"\"\n    # if there's only one \"nineteen\" in a string, it's the only \"nineteen\" in the string\n    # if there's more than one, count the number of \"nineteen\"s and multiply that by the number of \"nineteen\"s\n    return len(stdin) - len(stdin.replace(\"nineteen\", \"\")) * 19"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    dic = {}\n    for char in stdin:\n        if char in dic:\n            dic[char] += 1\n        else:\n            dic[char] = 1\n    for i in dic:\n        if i == 'i':\n            continue\n        dic[i] = dic[i]//19\n    return dic\n\n\nprint(solution('nineteenineteen'))\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, i, l, m, c = 0, 0, len(stdin), 0, 0\n    while i < l:\n        if stdin[i] == 'n':\n            if stdin[i + 1] == 'i':\n                c += 1\n                i += 2\n            else:\n                c += 1\n                i += 1\n        else:\n            i += 1\n        if c > m:\n            m = c\n    return m"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    my_dict = {}\n    for i in stdin:\n        if i in my_dict.keys():\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    count = 0\n    for key, value in my_dict.items():\n        if key == 'i':\n            count += my_dict[key]\n        elif key == 'n':\n            count += my_dict[key]\n        elif key == 'e':\n            if count < 2:\n                count += my_dict[key]\n            else:\n                count += my_dict[key] - 2\n        else:\n            if count < 2:\n                count += my_dict[key]\n            else:\n                count += my_dict[key] - 2\n    return count\n\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of \"nineteen\"s that she can get in her string.\"\"\"\n    # write your solution here\n    result = stdin.count('nineteen')\n    return result\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, count = stdin.split()\n    return len([i for i in s if i == 'nineteen'])\n\nprint(solution(\"nniinneetteeeenn\"))\nprint(solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\"))\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(0, len(stdin) - 1):\n        if stdin[i] == \"i\" and stdin[i + 1] == \"n\" and stdin[i + 2] == \"e\" and stdin[i + 3] == \"e\":\n            ans += 1\n        elif stdin[i] == \"n\" and stdin[i + 1] == \"e\" and stdin[i + 2] == \"e\":\n            ans += 1\n    return ans\n\nprint(solution(input()))"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(len(stdin)):\n        tmp = 0\n        for j in range(i, len(stdin)):\n            if stdin[i:j+1].count(\"nineteen\") > tmp:\n                tmp = stdin[i:j+1].count(\"nineteen\")\n                ans = max(ans, tmp)\n    return ans"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [p, y] = [int(x) for x in stdin.split(' ')]\n    # p, y = 3, 6\n    # p, y = 3, 4\n    # p, y = 3, 10\n    # p, y = 4, 6\n    # p, y = 4, 10\n    # p, y = 5, 6\n    # p, y = 5, 10\n    # p, y = 6, 10\n    # p, y = 7, 10\n    # p, y = 8, 10\n    # p, y = 9, 10\n    # p, y = 10, 10\n    # p, y = 11, 10\n\n    branch_range = range(1, y + 1)\n    branches_with_grasshoppers = set()\n    for branch in branch_range:\n        if branch % p == 0:\n            branches_with_grasshoppers.add(branch)\n        #  if branch % y == 0:\n        #      branches_with_grasshoppers.add(branch)\n        for jump in range(2, y // branch + 1):\n            if jump * branch % p == 0:\n                branches_with_grasshoppers.add(branch)\n                break\n            # if jump * branch % y == 0:\n            #     branches_with_grasshoppers.add(branch)\n            #     break\n\n    branches_without_grasshoppers = set(branch_range) - branches_with_grasshoppers\n    # print(branches_without_grasshoppers)\n    if not branches_without_grasshoppers:\n        return -1\n    # print(branches_without_grasshoppers)\n    branches_without_grasshoppers = sorted(list(branches_without_grasshoppers), reverse=True)\n    # print(branches_without_grasshoppers)\n    # print(branches_without_grasshoppers[0])\n    return branches_without_grasshoppers[0]\n\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    for i in range(2, int(y ** 0.5) + 1):\n        if y % i == 0:\n            j = y // i\n            if not any(i % j == 0 for i in range(2, j)):\n                return str(j)\n    return \"-1\"\n\"\"\"\nfrom math import log, ceil\n\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # p, y = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    #\n    # if p == y:\n    #     return -1\n    #\n    # if p < y:\n    #     p = max(p, y // 2 + 1)\n    #\n    # return p\n    p, y = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    min_p = max(2, (y // 2) + 1)\n    if p <= y:\n        return min_p\n    return -1\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split('\\n')[0].split())\n    l = [i for i in range(2, y + 1) if i % 2]\n    for i in range(2, int(y ** 0.5) + 1):\n        if not [j for j in l if j % i == 0]:\n            return str(i)\n    return '-1'"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    # p, y = 3, 6\n    if p > y:\n        print(-1)\n        return\n\n    for b in range(2, int(y ** 0.5) + 1):\n        if y % b!= 0:\n            continue\n        if all([y / b % x == 0 for x in range(2, b)]):\n            print(b)\n            return\n    print(-1)\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split(' '))\n    for x in range(2, y+1):\n        if x % 2 == 0 or (x % 2 == 1 and p%x == 0):\n            continue\n        else:\n            return x\n    return -1"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves exercise 1.\"\"\"\n    # import time\n    # start = time.time()\n    #\n    # # get data\n    # p, y = list(map(int, stdin.split()))\n    #\n    # # find highest\n    # highest = 0\n    # for branch in range(1, p + 1):\n    #     temp = 1\n    #     while temp <= y / branch:\n    #         temp *= branch\n    #     if temp < y:\n    #         highest = branch\n    #\n    # print(highest)\n    # # print(f'Duration: {time.time() - start}')\n    #\n    # return str(highest)\n\n    # solution: https://github.com/LucaCappelletti94/puzzle-solver/blob/master/exercises/exercise1.py\n    p, y = list(map(int, stdin.split()))\n\n    highest = 1\n    while highest <= y:\n        highest *= p\n\n    return str(highest // y) if highest % y == 0 else '-1'\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split(\" \"))\n    branches = [x for x in range(2, y + 1) if x % p!= 0]\n    if len(branches) == 0:\n        print(-1)\n    else:\n        print(max(branches))"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(sol())\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Tries to find the minimum distance between the house where Zane likes lives and the\n    house where he can buy it.\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    house_prices = [int(x) for x in stdin.splitlines()[1].split()]\n\n    prices_sum = sum(house_prices)\n    if prices_sum < k:\n        return \"He can't afford any house\"\n\n    total_distance = m\n    for house in house_prices:\n        if house == 0:\n            continue\n\n        if prices_sum > k:\n            return total_distance\n\n        total_distance += house\n        prices_sum -= house\n\n    return total_distance\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    i = 0\n    while i < len(houses) and houses[i] < k:\n        k -= houses[i]\n        i += 1\n    return i * 10\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_houses, house_likes, money = stdin.split()\n    houses = map(int, stdin.split())\n    houses = [house for house in houses if house]\n    houses.sort()\n    print(houses)\n    house_likes = int(house_likes)\n    money = int(money)\n    print(house_likes, money)\n    last_house = house_likes - 1\n    print(last_house)\n    first_house = house_likes\n    while money < houses[last_house]:\n        last_house -= 1\n    while money > houses[first_house]:\n        first_house += 1\n    print(houses[first_house], houses[last_house])\n    print(houses[first_house] + houses[last_house])\n    return houses[first_house] + houses[last_house]\n\n\n\nsolution('5 1 20\\n0 27 32 21 19')\n\n\n-----Explanation-----\n\nIn the first example, with k = 20 dollars, Zane can buy only house 5. The distance from house m = 1 to house 5 is 10 + 10 + 10 + 10 = 40 meters.\n\nIn the second example, Zane can buy houses 6 and 7. It is better to buy house 6 than house 7, since house m = 3 and house 6 are only 30 meters away, while house m = 3 and house 7 are 40 meters away.\n\nExample solution:\n\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n    print(solve(n, m, k, a))\n    return ''\ndef"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, m, _, *houses = [int(n) for n in stdin.split('\\n')]\n    if m < 1:\n        return '0'\n    houses.append(0)\n    houses.sort(reverse=True)\n    if houses[0] == 0:\n        houses.pop(0)\n    x = m // len(houses)\n    remainder = m % len(houses)\n    if x == 0:\n        return str(m * len(houses))\n    return str(sum(houses[:remainder]) + (m - sum(houses[:remainder])) * x)\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    houses = []\n    n, m, k = [int(x) for x in stdin.split()]\n    for i in range(n):\n        houses.append([int(x) for x in stdin.split()][1:])\n    houses = sorted(houses, key=lambda x: x[0])\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for house in houses:\n        dp[house[0] - 1][house[2]] = house[1]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j - houses[i][2] >= 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - houses[i][2]] + houses[i][1])\n    return min(dp[n - 1][k], dp[n - 1][k - 1])\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return min distance from house m to house n\"\"\"\n    n, m, k, *houses = [*map(int, stdin.split())]\n    houses = [house for house in houses if house!= 0]\n    houses.sort(reverse=True)\n    if houses[0] > k:\n        return None\n    curr_sum = 0\n    dist = 0\n    for i in range(m, n + 1):\n        if i in houses:\n            break\n        else:\n            curr_sum += houses[i - m]\n            dist += m * 10\n    print(dist)"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    houses = [int(x) for x in stdin.split()]\n    m = houses[1]\n    k = int(stdin.split()[2])\n    houses = [int(x) for x in stdin.split()[0]]\n    houses.sort()\n    \n    min_dist = 0\n    for i in range(1, len(houses)):\n        if houses[i] == 0:\n            continue\n        if houses[i] + min_dist <= k:\n            min_dist += houses[i]\n    print(min_dist)\n\nsolution(\"3 20 1 0 0 0 0 0 0 1 1\")\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    num_houses, house_location, spend_money = [int(x) for x in stdin.split(\" \")]\n    houses_prices = [int(x) for x in stdin.split(\" \")[0]]\n    houses_prices[house_location] = 0\n    houses_prices = [0] + houses_prices\n    houses_prices = sorted(houses_prices, reverse=True)\n    spend_money -= houses_prices[house_location]\n    house_location += 1\n    while spend_money > 0 and house_location < num_houses + 1:\n        if spend_money >= houses_prices[house_location]:\n            spend_money -= houses_prices[house_location]\n            house_location += 1\n        else:\n            break\n    return house_location - 1\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (stdin.startswith('1 1')) else 'NO'\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # stdout is already in string format\n    stdout = input()\n    return stdout\n\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_matrix_equal(matrix1, matrix2):\n        n, m = len(matrix1), len(matrix1[0])\n        for i in range(n):\n            for j in range(m):\n                if matrix1[i][j]!= matrix2[i][j]:\n                    return False\n        return True\n    \n    stdin = stdin.split('\\n')\n    n, m = list(map(int, stdin.pop(0).split(' ')))\n    \n    matrix1 = []\n    for i in range(n):\n        matrix1.append(list(map(int, stdin.pop(0).split(' '))))\n    \n    matrix2 = []\n    for i in range(n):\n        matrix2.append(list(map(int, stdin.pop(0).split(' '))))\n    \n    submatrix_size = min(n, m)\n    for size in range(submatrix_size, 1, -1):\n        for i in range(n - size + 1):\n            for j in range(m - size + 1):\n                if is_matrix_equal(matrix1[i:i + size], matrix2[j:j + size]):\n                    return 'YES'\n    \n    return 'NO'\n        \n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    matrix_a = [[int(i) for i in stdin.split('\\n')[i].split(' ')] for i in range(n)]\n    matrix_b = [[int(i) for i in stdin.split('\\n')[i].split(' ')] for i in range(n)]\n    return 'YES' if matrix_a == matrix_b else 'NO'"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if A can be transformed to B\n    or NO if it cannot be.\n\n    >>> solution('4 2\\n1 1\\n1 2\\n1 3\\n1 4\\n2 1\\n2 2\\n2 3\\n2 4\\n3 1\\n3 2\\n3 3\\n3 4\\n4 1\\n4 2\\n4 3\\n4 4')\n    YES\n    \"\"\"\n    # stdin: str = stdin.read().rstrip()\n    # rows, cols = map(int, stdin.split())\n    rows, cols = list(map(int, stdin.split()))\n    a = [[int(num) for num in stdin.split()] for _ in range(rows)]\n    b = [[int(num) for num in stdin.split()] for _ in range(rows)]\n\n    # # initialization of a, b matrices\n    # a = []\n    # for _ in range(rows):\n    #     a.append(list(map(int, stdin.split())))\n    # b = []\n    # for _ in range(rows):\n    #     b.append(list(map(int, stdin.split())))\n    # # print(a, b)\n    # print(np.shape(a))\n\n    for i in range(rows):\n        for j in range(cols):\n            # if a[i][j]!= b[i][j]:\n            if a[i][j]!= b[i][j]:\n                # return \"NO\"\n                return 'NO'\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    st1 = stdin.split()[0]\n    st2 = stdin.split()[1]\n    len1 = len(st1)\n    len2 = len(st2)\n    if len1 < len2:\n        st1, st2 = st2, st1\n        len1, len2 = len2, len1\n    dp = [[0]*(len2+1) for _ in range(len1+1)]\n    for i in range(1, len1+1):\n        for j in range(1, len2+1):\n            if st1[i-1] == st2[j-1]:\n                dp[i][j] = dp[i-1][j-1]+1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return len1 + len2 - 2*dp[len1][len2]\n    \n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n        # Write your code here\n        s1 = stdin.split('\\n')[0]\n        s2 = stdin.split('\\n')[1]\n\n        m, n = len(s1), len(s2)\n        # DP table\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        # Loop over dp table\n        for i in range(m):\n            for j in range(n):\n                # If characters match\n                if s1[i] == s2[j]:\n                    # Recurrence relation\n                    dp[i + 1][j + 1] = 1 + dp[i][j]\n                else:\n                    # Recurrence relation\n                    dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n\n        # Max number of uncommon characters\n        return dp[m][n]\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def longestCommonSubsequence(x: str, y: str) -> int:\n        \"\"\"\n        Find the longest common subsequence of two strings.\n        Time complexity: O(m x n)\n        Space complexity: O(m x n)\n        \"\"\"\n        m = len(x)\n        n = len(y)\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                dp[i][j] = dp[i - 1][j - 1] + 1 if x[i - 1] == y[j - 1] else max(dp[i][j - 1], dp[i - 1][j])\n        return dp[m][n]\n\n    return str(longestCommonSubsequence(stdin, stdin))\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a = stdin[0]\n    b = stdin[1]\n\n    def lcs(a: str, b: str, m: int, n: int) -> int:\n        # dp[i][j] = the length of the longest common subsequence of a[:i] and b[:j]\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if a[i - 1] == b[j - 1]:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n\n    return str(lcs(a, b, len(a), len(b)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    index_a = 0\n    index_b = 0\n    curr_max = 0\n    max_a = 0\n    max_b = 0\n    while index_a < len(a) and index_b < len(b):\n        if a[index_a] == b[index_b]:\n            index_a += 1\n            index_b += 1\n        else:\n            curr_max = max(curr_max, index_b - index_a)\n            if curr_max > max_b - max_a:\n                max_b = index_b\n                max_a = index_a\n            index_b += 1\n    return curr_max\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n    pass\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    c, d = [int(i) for i in stdin.split(' ')]\n    r = (d - c) % (2 * (a - b))\n    if r == 0:\n        return '-1'\n    else:\n        return str(r + c)\n    \n    \nprint(solution(stdin)\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split('\\n')[0].split(' ')]\n    c, d = [int(s) for s in stdin.split('\\n')[1].split(' ')]\n    s_a, s_b = [a, 2 * a, 3 * a, 4 * a, 5 * a], [b, b + a, b + 2 * a, b + 3 * a, b + 4 * a]\n    s_c, s_d = [c, 2 * c, 3 * c, 4 * c, 5 * c], [d, d + c, d + 2 * c, d + 3 * c, d + 4 * c]\n    ans = -1\n    for sa, sb in zip(s_a, s_b):\n        for sc, sd in zip(s_c, s_d):\n            if sa == sc and sb == sd:\n                ans = min(ans, max(sa, sb)) if ans!= -1 else max(sa, sb)\n    return str(ans)\n\n\n\"\"\""
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    x = (a + b + c)\n    y = (d + c + b)\n    return (((y - x) // 6) * (2 * x) + x)\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    c, d = map(int, stdin.split(' '))\n    count_b = 0\n    count_d = 0\n    count_c = 0\n    while (b + count_b) < (d + count_d):\n        count_b += 1\n        count_d += 1\n    while (c + count_c) < (d + count_d):\n        count_c += 1\n    if (b + count_b) == (d + count_d):\n        print(b + count_b)\n    if (c + count_c) == (d + count_d):\n        print(-1)\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    rc = c + 1\n    mc = d + 1\n    if (a - b) % 2 == 0:\n        rc = b - 1\n    if (c - d) % 2 == 0:\n        mc = d - 1\n    if a < b and c < d:\n        return -1\n    elif (rc * b) % mc == 0:\n        return int(rc * b / mc)\n    else:\n        return (rc * b) % mc\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c, d = map(int, stdin.strip().split())\n    min_time = min(a, b, c, d)\n    max_time = max(a, b, c, d)\n\n    if min_time == max_time:\n        return str(-1)\n    else:\n        return str(max_time * (min_time - 1) + max_time * min_time)\n\n\n\"\"\"\n\nimport math\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    a *= 10 ** 9\n    b *= 10 ** 9\n    c *= 10 ** 9\n    d *= 10 ** 9\n    if a <= c < b or b <= c < a:\n        return c\n    if a <= d < b or b <= d < a:\n        return d\n    return -1\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = map(int, stdin.split())\n    (c, d) = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    dif = b - a\n    if dif % c!= 0:\n        return -1\n    return a + (dif // c) * c\n\n\"\"\"\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    c, d = [int(i) for i in stdin.split(' ')]\n    if (a % 2) and (b % 2):\n        return -1\n    if (c % 2) and (d % 2):\n        return -1\n    if (a % 2 == 1) or (b % 2 == 1):\n        return b\n    if (c % 2 == 1) or (d % 2 == 1):\n        return d\n    return c * d + a * b\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    c, d = map(int, stdin.split(' '))\n    return str(a*(d+c) + b*(c+d) - 1)\n\ndef"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c = 0\n    while n!= 0:\n        if n % 3 == 0:\n            n = n // 3 - 1\n        else:\n            n = n - 1\n        c = c + 1\n    print(c, c, c)\n    return \"\""
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = (n - 1) // 3\n    if result * 3 == n:\n        return \"{} {} {}\".format(result, result, result)\n    else:\n        return \"{} {} {}\".format(result + 1, result + 1, result + 1)\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = 0\n    c = n - a - b\n    while True:\n        if c < a or c < b:\n            break\n        if c % 3 == 0:\n            c -= 1\n        elif c % 3 == 1:\n            a += 1\n            c -= a\n        else:\n            b += 1\n            c -= b\n    return f'{a} {b} {c}'\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n // 3 + 1):\n        b = n - a\n        if b % 3 == 0:\n            c = n - a - b\n            break\n    return a, b, c\n\n\ndef"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [3, 6, 9]\n    sol = []\n    for a in nums:\n        for b in nums:\n            if a + b > n:\n                break\n            for c in nums:\n                if a + b + c == n:\n                    sol.append(a)\n                    sol.append(b)\n                    sol.append(c)\n                    return sol\n                if a + b + c > n:\n                    break\n    return sol"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a,b,c = n//3, n//2, n//3\n    if a*3 + b*2 + c == n:\n        return \"{} {} {}\".format(a,b,c)\n    else:\n        return \"0 0 0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(3, *sorted(a for a in range(1, int(stdin) + 1) if a % 3!= 0 and int(stdin) % a!= 0))\n    return ''\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 3 == 0:\n        print(1, 1, 1)\n        return\n    l = []\n    if n % 3!= 0:\n        for i in range(n):\n            if i % 3!= 0:\n                l.append(i)\n        print(*l)\n        return"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    \n    # Use dynamic programming to make all pairs unique\n    count = sum([(2 * b - 1) * (2 * c - 1),\n                 (2 * c - 1) * (2 * d - 1),\n                 (2 * d - 1) * (2 * a - 1),\n                 (2 * a - 1) * (2 * b - 1)])\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    paintings = [(2, a, b), (1, a, b), (1, c, b), (2, c, d), (2, a, d), (2, c, d), (1, a, c), (1, b, c), (1, a, b), (1, b, d), (1, c, d), (1, a, c), (1, b, c), (1, a, b), (1, b, d), (1, c, d), (1, a, c), (1, b, c), (1, a, b), (1, c, b), (1, a, d), (1, c, d), (2, a, b), (1, a, d), (2, b, d), (2, a, c), (1, b, c)]\n    return len(set([(i, j, k) for i, j, k in paintings if sum([i, j, k]) <= n]))\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Case #1: 2\\nCase #2: 6'\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    n = int(nums[0])\n    a = int(nums[1])\n    b = int(nums[2])\n    c = int(nums[3])\n    d = int(nums[4])\n    total = [a, b, c, d]\n    # print(total)\n    candidates = {}\n    \n    squares = []\n    for i in range(3):\n        row = []\n        for j in range(3):\n            square = []\n            for x in range(3):\n                for y in range(3):\n                    square.append(total[i * 3 + x][j * 3 + y])\n            row.append(square)\n        squares.append(row)\n    # print(squares)\n\n    for i in range(3):\n        for j in range(3):\n            for x in range(3):\n                for y in range(3):\n                    if squares[i][j][x] == squares[i][j][y]:\n                        if squares[i][j][x] not in candidates:\n                            candidates[squares[i][j][x]] = []\n                        candidates[squares[i][j][x]].append((i, j, x, y))\n                    if squares[i][j][x] == squares[i][j][y] and (i, j, x, y) not in candidates[squares[i][j][x]]:\n                        candidates[squares[i][j][x]].append((i, j, x, y))\n\n    # print(candidates)\n    result = 0\n    for key in candidates:\n        if len(candidates[key]) >= 3:\n            result += 1\n    return result\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task:\n        The painting Vasya remembers is as follows:\n        First, from a matrix of all n numbers from 1 to n, extract the four squares of size 2 \u00d7 2.\n        Then, from each of the squares, take the sum of the numbers in the left-top and right-bottom cells.\n\n        If two squares have the same sum, then it means that these squares have the same numbers in each cell,\n        i.e. they contain only one number. If the sums are different, then these squares are distinct.\n\n        Now, Vasya needs to find the number of distinct squares.\n    Idea:\n        Let's rewrite the above task as follows:\n        for each of the squares of size 2 \u00d7 2\n        - if the number in the top-left cell is equal to the number in the bottom-right cell, then this square is distinct,\n        and should be counted\n        - if the numbers in the top-left and bottom-right cells are different, then this square is distinct, and should be counted\n    Complexity:\n        Time: O(n^4)\n        Space: O(n^2)\n    \"\"\"\n    n, a, b, c, d = [int(n) for n in stdin.split(\" \")]\n    sum_a = (a + b + c) * (a + b + d)\n    sum_b = (a + c + d) * (b + c + d)\n    sum_c = (b + c + d) * (a + b + d)\n    sum_d = (a + b + c) * (a + b + c)\n    return sum([1 if sum_a == sum_b == sum_c == sum_d else 0 for sum_a in [a, b, c, d] for sum_b in [a, b, c, d] for sum_c in [a, b, c, d] for sum_d in [a, b, c, d]])\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = list(map(int, stdin.split(\" \")))\n    nums = [a, b, c, d]\n    total_sum = sum(nums)\n    squares = []\n    for i in range(1, n+1):\n        squares.append([i**2 for i in range(1, n+1)])\n    count = 0\n    for square in squares:\n        count = count + get_count(square, total_sum)\n    return str(count)\n\n\ndef"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n\n    def foo(x):\n        total = sum(i for i in range(1, x + 1))\n        return total >= n\n\n    return sum(foo(i) for i in range(1, n + 1))\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    2\n    >>> solution('3 3 1 2 3')\n    6\n    >>> solution('2 1 1 1 2')\n    2\n    \"\"\"\n    # Get input\n    n, a, b, c, d = [int(i) for i in stdin.split(' ')]\n\n    # Get all possible values that could be in cells\n    all_values = {str(i) for i in range(1, n + 1)}\n\n    # Get values that match the first rule\n    first_rule_values = {\n        '1': {'1'},\n        '2': {'2', '3'},\n        '3': {'1', '2'},\n    }\n\n    # Get values that match the second rule\n    second_rule_values = {\n        '1': {'2', '3'},\n        '2': {'1', '3'},\n        '3': {'1', '2'},\n    }\n\n    # Get values that match the third rule\n    third_rule_values = {\n        '1': {'1'},\n        '2': {'2'},\n        '3': {'3'},\n    }\n\n    # Get values that match the fourth rule\n    fourth_rule_values = {\n        '1': {'1'},\n        '2': {'2'},\n        '3': {'3'},\n    }\n\n    # Get common values for the cells\n    common_values = set(first_rule_values[str(a)].intersection(\n        second_rule_values[str(b)].intersection(\n            third_rule_values[str(c)].intersection(\n                fourth_rule_values[str(d)])\n        )\n    ))\n\n    # Return common values count\n    return len(common_values)\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of distinct squares in the picture\n    >>> solution(\"3 3 1 2 3\")\n    6\n    >>> solution(\"2 1 1 1 2\")\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find how many seconds passes before the snowball hits the stone, which has the higher height\n    \"\"\"\n    w, h = list(map(int, stdin.split()))\n    u1, d1 = list(map(int, stdin.split()))\n    u2, d2 = list(map(int, stdin.split()))\n    while h > 0:\n        h -= 1\n        if d1 == h:\n            w -= u1\n        elif d2 == h:\n            w -= u2\n    return w\n    \n\"\"\"\n    if h > 0:\n        if u1 > u2:\n            if d1 == h:\n                w -= u1\n            elif d2 == h:\n                w -= u2\n        elif u1 == u2:\n            if d1 == h:\n                w -= u1\n            elif d2 == h:\n                w -= u2\n        elif u1 < u2:\n            if d1 == h:\n                w -= u2\n            elif d2 == h:\n                w -= u1\n    return w\n\"\"\""
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    u1, d1, u2, d2 = map(int, stdin.split())\n\n    if u1 < u2 and d1 < d2:\n        start = d1\n        end = d2\n    elif u1 < u2 and d1 > d2:\n        start = d2\n        end = d1\n    else:\n        start = d1\n        end = d2\n\n    while start <= end:\n        h, w = (start, end) if end < start else (end, start)\n        w -= u1 if h == d1 else u2 if h == d2 else 0\n        if w < 0:\n            break\n        w += (h - 1)\n        start += 1\n    return str(w)\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    h, w = list(map(int, input[0].split()))\n    u_1, d_1 = list(map(int, input[1].split()))\n    u_2, d_2 = list(map(int, input[2].split()))\n    \n    stones = [d_1, d_2]\n    h = h - 1\n    \n    while h >= 0:\n        if h in stones:\n            w -= u_1\n            h -= 1\n            if w < 0:\n                w = 0\n        else:\n            w += 1\n            h -= 1\n    return w\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    w, h, u1, d1, u2, d2 = [int(x) for x in stdin.split()]\n    while h > 0:\n        for i in range(u2, d2 + 1):\n            if i == h:\n                w = w - i\n        for i in range(u1, d1 + 1):\n            if i == h:\n                w = w - i\n        h = h - 1\n    return w\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function implements the solution to the problem\"\"\"\n\n\n    # define variables\n    N, H, U1, D1, U2, D2 = map(int, stdin.readline().split())\n    stones = set()\n    for _ in range(2):\n        stones.add((U1, D1))\n        stones.add((U2, D2))\n    flag = True\n\n    # iterate until the flag is set\n    while flag:\n        flag = False\n        for i in range(1, N+1):\n            for stone in stones:\n                if i == stone[0]:\n                    flag = True\n                    H = H - i\n                    if H < 0:\n                        H = 0\n                    stones.remove(stone)\n                    stones.add((U1, D1))\n                    stones.add((U2, D2))\n                    if stone[0] == U1:\n                        U1 = U1 - i\n                        stones.remove((U1, D1))\n                        stones.add((U1, D1))\n                    else:\n                        U2 = U2 - i\n                        stones.remove((U2, D2))\n                        stones.add((U2, D2))\n                    break\n            if flag:\n                break\n\n    return str(H)\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n\n    h = float(h)\n    d1 = float(d1)\n    d2 = float(d2)\n    u1 = float(u1)\n    u2 = float(u2)\n\n    max = u1 if u1 >= d1 else d1\n    min = u2 if u2 >= d2 else d2\n\n    max = h if max > h else max\n\n    if (max < min):\n        return 0\n\n    elif (min > 0):\n        weight = 0\n        h = 0\n        for i in range(max, min, -1):\n            weight += u1 if i % d1 == 0 else 0\n            weight += u2 if i % d2 == 0 else 0\n            weight = w if weight > w else weight\n            h = i if weight == w else h\n        return h\n\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8)\nprint(solution(\"4 3\") == 8"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n---\n\nimport sys\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c_str = stdin.split('\\n')[1].split(' ')\n    c_num = [int(i) for i in c_str]\n    x, y = map(int, stdin.split('\\n')[2].split(' '))\n    c_num.sort()\n    if x > y:\n        return '0'\n    else:\n        max_num = 0\n        for i in range(1, len(c_num)):\n            if c_num[i] - c_num[i-1] < x and c_num[i] - c_num[i-1] > y:\n                break\n            else:\n                max_num = i\n        return str(max_num + 1)\n    return 0\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    \n    pass_num = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if x < y and lst[i] < x:\n                pass_num += 1\n            if y < lst[i] < x:\n                pass_num += 1\n    \n    if pass_num == 0:\n        return '0'\n    return str(pass_num)\n\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, *c = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    \n    c.sort()\n    while x <= y:\n        n = y - x + 1\n        for i in range(len(c)):\n            if c[i] < n:\n                continue\n            elif c[i] == n:\n                return str(i + 1)\n            else:\n                return str(0)\n        x += 1\n\nsolution(\"5 3 3 2 1\\n6 8\")\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cities = list(map(int, stdin.split()))\n    x, y = map(int, stdin.split())\n    \n    # PART 1\n    passing_rates = []\n    for i in range(1, len(cities) + 1):\n        passing_rates.append(sum(cities[:i]) / i)\n    \n    x, y = sorted(x, y)\n    \n    # PART 2\n    for rate in passing_rates:\n        if rate >= x and rate <= y:\n            return rate\n    return 0\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split()))\n    b, c = map(int, stdin.split('\\n')[1].split())\n    k = 0\n    for x in a:\n        if x > 0 and x < c and x > k:\n            k = x\n    for x in range(b, c + 1):\n        if sum(filter(lambda x: x >= x and x <= k, a)) >= x:\n            print(x)\n            return\n    print(0)\n\nsolution(input())\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    std = [int(stdin[i]) for i in range(1, len(stdin))]\n    m = max(std)\n    k = 0\n    x, y = [int(stdin[i]) for i in range(2, len(stdin))]\n    std.sort()\n    std.reverse()\n    i = 0\n    while i < n:\n        if std[i] < m:\n            k += 1\n            i += 1\n        else:\n            break\n    if i >= n:\n        return '0'\n    if i < n and m - std[i] < x:\n        return '0'\n    if i < n and m - std[i] > y:\n        return '0'\n    return str(k + 1)\n\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = list(map(int, stdin.split()))\n    m = n // 2 + n % 2\n    x, y = list(map(int, stdin.split()))\n    s = sum(c)\n    if not (s >= x and s <= y):\n        return '0'\n    ans = []\n    for i in range(1, m + 1):\n        if not (sum(c[:i]) >= x and sum(c[:i]) <= y):\n            continue\n        ans.append(i)\n    return str(max(ans))"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, *c = stdin.split()\n    x, y = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(1, int(m) + 1):\n        if (sum(c) // i) < x:\n            continue\n        else:\n            if (sum(c) // i) > y:\n                continue\n            else:\n                ans = i\n    if ans == 0:\n        print('0')\n    else:\n        print(ans)\n    return ''\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if any(c[i] < x for i in range(n) if c[i] > 0):\n        return \"0\"\n    return \" \".join(str(i + 1) for i in range(n) if i < y or (i >= y and c[i] < y))\n\nprint(solution(input()))"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    students = list(map(int, stdin.split(\"\\n\")[0].split()))\n    x, y = list(map(int, stdin.split(\"\\n\")[1].split()))\n    if students[0] > 0 and students[-1] > 0:\n        \n        if x > y:\n            return 0\n        \n        elif x < 0 or y < 0:\n            return 0\n        \n        else:\n            a, b, c = 0, 0, 0\n            for i in range(len(students)):\n                if students[i] >= x:\n                    a += 1\n                else:\n                    b += 1\n                c = max(c, a, b)\n                if a >= x and b >= y:\n                    return c + 1\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    if k == 1:\n        return '0'\n    else:\n        return '{}'.format(k * (n - 1) + k * max(a, b) - a)\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = [int(s) for s in stdin.split(\" \")]\n    count = 0\n    while n > 1:\n        if n % k == 0:\n            n = n // k\n            count += B\n        else:\n            n = n - 1\n            count += A\n    return str(count)\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K, N = map(int, stdin.split())\n    x = N\n    cost = 0\n    while x > 1:\n        if x % K == 0:\n            x = x / K\n            cost += B\n        else:\n            x = x - 1\n            cost += A\n    return cost\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = [int(i) for i in stdin.split(\"\\n\")]\n    n = n * (10 ** 9) + 1\n    k = k * (10 ** 9) + 1\n    A = A * (10 ** 9) + 1\n    B = B * (10 ** 9) + 1\n    if n % k == 0:\n        return (n // k) * B\n    a = k // A\n    b = k % A\n    if b == 0:\n        return n * b + (a - 1) * A\n    else:\n        return n * b + a * A + (a - 1) * B\n\n\nprint(solution(input()))"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, k = [int(c) for c in stdin.split(\"\\n\")]\n    count = 0\n    while n!= 1:\n        if n % k == 0:\n            count += b\n            n = n / k\n        else:\n            count += a\n            n -= 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    A = int(stdin)\n    B = int(stdin)\n\n    count = 0\n    while n > 1:\n        if n % k == 0:\n            count += n // k\n            print(count)\n            break\n        else:\n            count += A\n            n -= A\n            count += n // k\n            n = n % k\n            print(count)\n            break\n    return count\n\"\"\"\n\nfrom math import floor\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n = int(inputs[0])\n    k = int(inputs[1])\n    a = int(inputs[2])\n    b = int(inputs[3])\n\n    current = n\n    result = 0\n    while current > 1:\n        if current % k == 0:\n            current /= k\n            result += b\n        else:\n            current -= 1\n            result += a\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    k = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    cost = 0\n    for i in range(k):\n        x = x - 1 if x % k == 0 else x\n        cost += a\n        x //= k\n        cost += b\n    return cost"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split(\"\\n\")[0:4])\n    res = 0\n    while n!= 1:\n        if n % k!= 0:\n            n -= a\n            res += a\n        else:\n            n /= k\n            res += b\n    return res\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def sqrt(n: int) -> int:\n        return int(n**(1/2))\n\n    def mul(n: int) -> int:\n        return int(n*10)\n\n    n = int(stdin)\n    num_ops = 0\n    sqrt_n = sqrt(n)\n    while sqrt_n > 10:\n        sqrt_n = sqrt(sqrt_n)\n        num_ops += 1\n    n = mul(n)\n    num_ops += 1\n    while n > 10:\n        n = mul(n)\n        num_ops += 1\n    return''.join(map(str, (n, num_ops)))\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n = int(sys.stdin.readline())\n    s = set()\n    count = 0\n    while n >= 1:\n        count += 1\n        if n in s:\n            count -= 1\n            break\n        s.add(n)\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 3 == 0:\n            n = n // 3\n        elif n % 5 == 0:\n            n = n // 5\n        elif n % 7 == 0:\n            n = n // 7\n        elif n % 11 == 0:\n            n = n // 11\n        else:\n            break\n    if n == 1:\n        count -= 1\n    print(n, count)\n\ndef"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            count += 1\n        else:\n            n = n * 3 + 1\n            count += 1\n    return str(int(n)), str(count)\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_string = stdin\n    number = int(number_string)\n    count = 0\n    while number!= 1:\n        if number % 2 == 0:\n            number = number / 2\n            count += 1\n        elif number % 2!= 0:\n            number = number * 3 + 1\n            count += 1\n    return str(number) + \" \" + str(count)\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    steps = 0\n    while n > 10:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = (n * 3) + 1\n        steps += 1\n    return str(n) +'' + str(steps)\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        count += 1\n    return str(count) + \" \" + str(n)\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, main(stdin)))\n\ndef"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 1 and n <= 10 ** 6:\n        d = {}\n        i = 1\n        count = 0\n        while True:\n            if i ** 2 <= n:\n                n -= i ** 2\n                count += 1\n            else:\n                break\n            i += 1\n        count += 1\n        n = int(n ** 0.5)\n        count += 1\n        while True:\n            if n ** 2 <= n:\n                n **= 2\n                count += 1\n            else:\n                break\n        print(n, count)\n        return\n    else:\n        raise ValueError"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split(' ')[0], int(stdin.split(' ')[1])\n    R, S, P = stdin.split(' ')[2], stdin.split(' ')[3], stdin.split(' ')[4]\n    T = stdin.split('\\n')[1]\n    score = 0\n    for i in range(N):\n        if i < K:\n            if R in T[i]:\n                score += N - i\n        else:\n            if T[i] in (R, S, P):\n                score += N - i\n    return str(score)"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    T = stdin[3:]\n\n    prev = None\n    curr_max = 0\n    for t in T:\n        if t!= prev:\n            prev = t\n            curr_max += 1\n        else:\n            curr_max -= 1\n\n    return str(curr_max)\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r, s, p = map(int, stdin.split())\n    t = stdin.split('\\n')\n    t = t[1:]\n    score = 0\n    for i in range(n):\n        if i > k:\n            if t[i] == r:\n                if t[i-k-1] == r:\n                    score += p\n                elif t[i-k-1] == s:\n                    score += s\n                else:\n                    score += r\n            elif t[i] == s:\n                if t[i-k-1] == s:\n                    score += s\n                elif t[i-k-1] == r:\n                    score += p\n                else:\n                    score += s\n            elif t[i] == p:\n                if t[i-k-1] == p:\n                    score += p\n                elif t[i-k-1] == s:\n                    score += s\n                else:\n                    score += r\n            else:\n                score += r\n        else:\n            if t[i] == r:\n                score += r\n            elif t[i] == s:\n                score += s\n            else:\n                score += p\n    return score\n\nprint(solution(input()))\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    hand = {}\n    for _ in range(n):\n        hand.setdefault(*stdin.split(' '))\n    score = 0\n    for i in range(n):\n        if i < k:\n            hand_ = hand[i]\n        else:\n            hand_ = hand[i - k]\n        if hand[i] == 'r':\n            score += (1 + (i - k))\n        elif hand[i] =='s':\n            score += (3 + (i - k))\n        else:\n            score += (6 + (i - k))\n    return score\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split('\\n')\n    N = int(N)\n    K = int(K)\n    R, S, P = stdin.split('\\n')\n    R = int(R)\n    S = int(S)\n    P = int(P)\n    K -= 1\n    total_score = 0\n    for _ in range(N):\n        n = (R, S, P)\n        if K == 0:\n            if N - K == 1:\n                total_score += max(n)\n            else:\n                total_score += max(n) - min(n)\n        else:\n            if K % 2 == 1:\n                if N - K == 1:\n                    total_score += max(n)\n                else:\n                    total_score += max(n) - min(n)\n            else:\n                if N - K == 1:\n                    total_score += min(n)\n                else:\n                    total_score += min(n) - max(n)\n        K += 1\n    print(total_score)"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split()]\n    T = stdin[-1]\n    T = T[:N-K]\n    score = 0\n    for i in range(N):\n        if i < K:\n            if T[i] == 'r':\n                score += R\n            elif T[i] == 'p':\n                score += P\n            else:\n                score += S\n        else:\n            if T[i] == 'r':\n                score += R\n            elif T[i] == 'p':\n                score += P\n            else:\n                score += S\n    return score\n\ndef"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r, s, p = stdin.split()\n    res = 0\n    for i in range(1, n - k + 1):\n        if i - k >= 1:\n            r, s, p = stdin.split()\n        hand = {'r': 0,'s': 1, 'p': 2}\n        hand[r[i - 1]] += 1\n        hand[s[i - 1]] += 1\n        hand[p[i - 1]] += 1\n        if n - i < k:\n            if hand[r] > 0 and hand[s] > 0:\n                res += hand[s]\n            if hand[r] > 0 and hand[p] > 0:\n                res += hand[p]\n            if hand[s] > 0 and hand[p] > 0:\n                res += hand[p]\n        else:\n            hand[r[i - 1]] -= 1\n            hand[s[i - 1]] -= 1\n            hand[p[i - 1]] -= 1\n            if hand[r] > 0 and hand[s] > 0:\n                res += hand[s]\n            if hand[r] > 0 and hand[p] > 0:\n                res += hand[p]\n            if hand[s] > 0 and hand[p] > 0:\n                res += hand[p]\n    return res\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a, b = a - 1, b - 1\n    c = c - 1\n\n    return max(2 * a + 2 * b, 2 * b + 2 * c, 2 * c + 2 * a, 2 * a + 2 * b + 2 * c, 2 * b + 2 * c + 2 * a, 2 * c + 2 * a + 2 * b)\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(\" \")]\n    total = a + b + c\n    if total < 2:\n        return total\n    elif total == 2:\n        if a == 1:\n            return 3\n        else:\n            return 4\n    elif total == 3:\n        return 5\n    elif total == 4:\n        return 7\n    elif total == 5:\n        return 10\n    elif total == 6:\n        return 14\n    else:\n        return 16\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return max(stdin)"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = [a, b, c]\n    res = 0\n    for i in range(2):\n        for j in range(i + 1, 3):\n            for k in range(j + 1, 4):\n                res = max(res, s[i] + s[j] + s[k])\n    return str(res)\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    ab = a + b\n    bc = b + c\n    ac = a + c\n    abc = ab + c\n    abc_min = min(abc, min(ab, bc))\n    ans = max(abc_min, a, b, c)\n    print(ans)\n    return ans\nsolution(input())\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(\" \")[0])\n    b = int(stdin.split(\" \")[1])\n    c = int(stdin.split(\" \")[2])\n    \n    return a + b + c - 1\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(i) for i in stdin.split())\n    return max(a + b + c, 2 * min(a, b) + max(a, b))\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 1 1\\n\")\n    4\n    >>> solution(\"2 1 2\\n\")\n    7\n    >>> solution(\"3 5 2\\n\")\n    11\n    >>> solution(\"2 2 1\\n\")\n    6\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n    dp = [0] * (a + b + c)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, a + b + c):\n        dp[i] = max(dp[i - 3] + 1, dp[i - 2] + 1)\n        if i >= 3 and i - b >= 0:\n            dp[i] = max(dp[i], dp[i - b] + 1)\n        if i >= 2 and i - b >= 0 and i - c >= 0:\n            dp[i] = max(dp[i], dp[i - b - c] + 1)\n    return dp[a + b + c - 1]\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\na, b, c = map(int, stdin.split())"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k, p, x, y = list(map(int, stdin[0].split()))\n    stdin = stdin[1:]\n    n = len(stdin)\n    cur_sum = sum(list(map(int, stdin)))\n    stdin = sorted(list(map(int, stdin)))\n    # if not (n + 1) % 2:\n    #     median_point = (n + 1) // 2\n    # else:\n    #     median_point = (n + 2) // 2\n    median_point = (n + 1) // 2\n    if cur_sum > x:\n        print(n - k)\n    else:\n        # print(stdin)\n        # print(median_point)\n        for i in range(n):\n            if stdin[i] == p - y:\n                print(p - y)\n                break\n            elif stdin[i] < p - y:\n                print(p - y)\n                break\n            elif i + median_point > n:\n                if stdin[i] < y:\n                    print(-1)\n                else:\n                    print(-1)\n                break\n            elif stdin[i] >= p - y:\n                print(n - i - 1)\n                break\n            else:\n                print(-1)\n                break\n\n\nsolution(stdin)\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(x) for x in stdin.split(\" \")]\n    data = [int(x) for x in stdin.split(\" \")]\n    data.sort()\n    return \"-1\" if sum(data) + n * p > x or data[n // 2] < y else str(data[n // 2 + 1])\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()[k:]]\n    a_arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) <= 2:\n        print('-1')\n        return\n    elif n % 2 == 0:\n        n = n // 2\n        m = len(a_arr) // 2\n    else:\n        n = n // 2 + 1\n        m = len(a_arr) // 2\n    if sum(arr) <= x:\n        print('-1')\n        return\n    if max(a_arr) <= y:\n        print('-1')\n        return\n    else:\n        i = a_arr[m]\n        a_arr = list(filter(lambda x: x >= i, a_arr))\n        if len(a_arr) >= n:\n            print(len(a_arr) - n)\n            return\n        else:\n            print('-1')\n            return\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import chain\n\n    data = stdin.split()\n\n    n, k, p, x, y = list(map(int, data[:5]))\n    marks = list(map(int, data[5:]))\n\n    if k == n:\n        return''.join(map(str, marks))\n\n    if k == 0:\n        return '-1'\n\n    if p * k > n * x:\n        return '-1'\n\n    m = (n + 1) // 2\n    if k == m:\n        return''.join(map(str, sorted(marks)[:m]))\n\n    marks.sort()\n    marks = list(chain(marks[:m], marks[m:]))\n    if len(marks) % 2 == 1:\n        return''.join(map(str, marks[:k]))\n\n    marks = sorted(marks[:k])\n    median = marks[k // 2]\n\n    if median < y:\n        return''.join(map(str, marks))\n    return '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = list(map(int, stdin.split()))\n    marks = list(map(int, stdin.split()[:k]))\n    tot_marks = sum(marks)\n    median = 0\n    if tot_marks >= x:\n        return \"-1\"\n    elif p % 2 == 0:\n        median = p // 2\n    else:\n        median = (p + 1) // 2\n    while tot_marks < x and median > y:\n        median -= 1\n        tot_marks += 1\n        if tot_marks >= x:\n            return str(median)\n    return str(-1)"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(i) for i in stdin.split()]\n    marks = [int(i) for i in stdin.split()][1:]\n    return''.join([str(i) for i in get_remaining_marks(n, k, p, x, y, marks)])\ndef"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 3 5 18 4\n   ... 3 5 4\n   ... ''')\n    '4 1'\n    >>> solution('''\n   ... 5 3 5 16 4\n   ... 5 5 5\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 5 3 5 16 4\n   ... 5 5 5\n   ... ''')\n    '4 1'\n    \"\"\"\n    n, k, p, x, y = map(int, stdin.split('\\n')[0].split())\n    marks = list(map(int, stdin.split('\\n')[1].split()))\n    marks.sort()\n    for mark in marks:\n        if mark < y:\n            return '-1'\n        if mark < marks[k // 2]:\n            return f'{n - k} {mark}'\n        k += 1\n    return f'{n - k} {marks[k // 2]}'\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split('\\n')[0].split())\n    marks = list(map(int, stdin.split('\\n')[1].split()))\n    sorted_marks = sorted(marks)\n    median_value = (n + 1) // 2\n    median = 0\n    for mark in sorted_marks:\n        if mark > y:\n            break\n        median += 1\n    if median < median_value:\n        return str(-1)\n    return str(n - k - 1) +'' +''.join([str(x) for x in sorted_marks[:k]])\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The method returns the number of tests that Vova should take in order to achieve his desired value.\n    :param stdin: string with the numbers of tests and students marks\n    :return: string with the number of tests that Vova should take in order to achieve his desired value\n    \"\"\"\n    n, k, p, x, y = [int(x) for x in stdin.split()]\n    marks = [int(x) for x in stdin.split()]\n    marks.sort()\n    if k > 0:\n        median = marks[(n + 1) // 2 - 1]\n    else:\n        median = 0\n    if median < y:\n        print(n - k)\n    else:\n        print(-1)\n    return 0\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://app.codility.com/demo/results/trainingK9MPYH-2AC/\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # This solution works only if there is only one vowel in the whole string.\n    # If there are two or more vowels, then the word is Berlanese if and only if\n    # there is a vowel after every consonant.\n    # If there is a vowel after every consonant, the string is Berlanese.\n    # If there is not a vowel after every consonant, the string is not Berlanese.\n    # And the letter \"n\" is special.\n    # If a letter is \"n\", it can be either in the beginning, in the middle or\n    # in the end of the string. The string is Berlanese if and only if there\n    # is a vowel after every consonant, and there is at least one vowel in\n    # the string.\n    vowels = \"aeiou\"\n    res = \"NO\"\n    for i in range(len(stdin)):\n        if i == len(stdin) - 1:\n            res = \"YES\"\n            break\n        if stdin[i] in vowels:\n            continue\n        if stdin[i + 1] in vowels:\n            res = \"YES\"\n            break\n        if stdin[i] == \"n\":\n            if stdin[i + 1] == \"n\":\n                continue\n            elif stdin[i + 1] in vowels:\n                res = \"YES\"\n                break\n            else:\n                res = \"NO\"\n                break\n    print(res)\n    return res\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    vowel = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxyz\"\n    result = \"NO\"\n    for i in string:\n        if i == \"n\":\n            result = \"YES\"\n            break\n        elif i in vowel:\n            continue\n        else:\n            for j in string:\n                if j in cons and j!= \"n\":\n                    result = \"NO\"\n                    break\n                else:\n                    result = \"YES\"\n    print(result)\n    return result\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"n\") == 0 else \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"sumimasen\")\n    'YES'\n    >>> solution(\"ninja\")\n    'YES'\n    >>> solution(\"codeforces\")\n    'NO'\n    \"\"\"\n    words = stdin.split()\n    result = 'NO'\n    for word in words:\n        for letter in word:\n            if letter == 'n':\n                result = 'YES'\n                break\n            if letter in 'aeiou':\n                result = 'YES'\n                break\n        if result == 'YES':\n            break\n    return result"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"n\") == stdin.count(\"o\") + stdin.count(\"a\") + stdin.count(\"e\") + stdin.count(\"u\") else \"NO\"\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function takes the string from the stdin, checks if it is a Berlanese word.\n    Returns \"YES\" or \"NO\" depending on the result.\n    \"\"\"\n    # Your code here\n    return \"\""
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxz\"\n    for word in stdin.split():\n        word = list(word)\n        for i, letter in enumerate(word):\n            if letter in consonants and i < len(word) - 1 and word[i + 1] in vowels:\n                word[i + 1] = \"n\"\n        if not \"n\" in word:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return ''"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('4 4\\n1 2\\n2 3\\n3 4\\n4 1\\n')\n    '4'\n    '''\n    num_vertices, num_edges = map(int, stdin.strip().split())\n    num_dominoes = num_vertices * (num_vertices - 1) // 2\n    num_possible_dominoes = min(num_dominoes, num_edges)\n\n    dominoes = []\n    edges = [[] for _ in range(num_vertices)]\n    for _ in range(num_edges):\n        vertex1, vertex2 = map(int, stdin.strip().split())\n        edges[vertex1 - 1].append(vertex2 - 1)\n        edges[vertex2 - 1].append(vertex1 - 1)\n\n    num_satisfied = 0\n    for _ in range(num_possible_dominoes):\n        vertex1, vertex2 = map(int, stdin.strip().split())\n        if vertex2 > vertex1:\n            vertex1, vertex2 = vertex2, vertex1\n\n        dominoes.append([vertex1, vertex2])\n        if vertex2 in edges[vertex1 - 1]:\n            edges[vertex1 - 1].remove(vertex2)\n            edges[vertex2 - 1].remove(vertex1)\n            num_satisfied += 1\n        else:\n            edges[vertex1 - 1].remove(vertex1)\n            edges[vertex2 - 1].remove(vertex2)\n            num_satisfied -= 1\n\n    return str(num_satisfied)\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    g = {}\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split(' ')]\n        a, b = min(a, b), max(a, b)\n        if a in g:\n            g[a].add(b)\n        else:\n            g[a] = {b}\n        if b in g:\n            g[b].add(a)\n        else:\n            g[b] = {a}\n    l = {0}\n    for k in g:\n        l = l | {k} | g[k]\n    l = sorted(l)\n    dp = [0] * len(l)\n    for k in g:\n        for a in g[k]:\n            if a < k:\n                dp[l.index(a)] += 1\n    dp[l.index(1)] += n\n    for i in range(1, len(l)):\n        dp[i] += dp[i - 1]\n    return dp[-1]\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    "
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    vertex_count = int(lines[0].split(' ')[0])\n    edge_count = int(lines[0].split(' ')[1])\n    graph = {vertex: [] for vertex in range(1, vertex_count + 1)}\n    for line in lines[1:edge_count + 1]:\n        vertex, neighbor = line.split(' ')\n        vertex, neighbor = int(vertex), int(neighbor)\n        graph[vertex].append(neighbor)\n        graph[neighbor].append(vertex)\n\n    return str(d)\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem.\"\"\"\n    \n    # Parsing input\n    n, m = [int(x) for x in stdin.split()]\n    \n    edges = []\n    for i in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        edges.append((a, b))\n        \n    # Computing number of possible domino configurations\n    n_edges = len(edges)\n    n_dominoes = 0\n    for i in range(2**n):\n        d = bin(i)[2:]\n        if len(d) < n:\n            d = '0'*(n-len(d)) + d\n        \n        cnt = [0]*n\n        for j in range(n):\n            if d[j] == '1':\n                cnt[j] += 1\n        \n        ok = True\n        for j in range(n_edges):\n            a, b = edges[j]\n            cnt_a, cnt_b = cnt[a-1], cnt[b-1]\n            if cnt_a + cnt_b!= n:\n                ok = False\n        \n        if ok:\n            n_dominoes += 1\n    \n    # Generating output\n    output = n_dominoes\n    \n    return output\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    edges = {}\n    for _ in range(m):\n        a, b = map(int, stdin.split(' '))\n        if a not in edges:\n            edges[a] = set()\n        if b not in edges:\n            edges[b] = set()\n        edges[a].add(b)\n        edges[b].add(a)\n    \n    used_types = set()\n    for v in range(1, n + 1):\n        if len(edges[v]) == 0:\n            continue\n        # for all edges from v to u\n        for u in edges[v]:\n            # for all edges from u to x\n            for x in edges[u]:\n                # check that x is not equal to v or u\n                if x == v or x == u:\n                    continue\n                used_types.add((len(edges[v]) + len(edges[u]) - len(edges[x]), (v, u, x)))\n    \n    used_types = sorted(used_types)\n    used_types.reverse()\n    count = 0\n    for i in range(len(used_types)):\n        count += 1\n        if used_types[i][0] < count:\n            count = used_types[i][0]\n        else:\n            break\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    '16'\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    g = [[int(i) for i in stdin.split()] for _ in range(m)]\n    count = {1: [0, 1], 2: [0, 2], 3: [0, 3], 4: [0, 4], 5: [0, 5], 6: [0, 6], 7: [0, 7]}\n    for i in range(m):\n        for j in range(2):\n            count[g[i][j]][j] += 1\n    ans = 0\n    for i in range(1, 8):\n        ans += count[i][0] * count[i][1]\n    return str(ans)\n    pass"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    edges = [list(map(int, stdin.split(' '))) for i in range(m)]\n    return str(sum(max(x, y) - min(x, y) for x, y in edges))\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    auction = set(map(int, stdin.split()))\n\n    dp = [0] * (n + 1)\n    max_price = 0\n    for i in range(1, n + 1):\n        if i in auction:\n            max_price = max(prices[i - 1], max_price)\n            dp[i] = max_price\n        else:\n            dp[i] = dp[i - 1]\n    return sum(dp)"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution assumes that the auction questions\n    are chosen from the questions with the higher\n    prices. The solution can be adapted to allow\n    the company to change the auction price, but\n    it will be easier to consider an unlimited number\n    of questions.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    auction_prices = list(map(int, stdin.split()))\n    prices.sort()\n    auction_prices.sort(reverse=True)\n    counter = 0\n    points = 0\n    for i in range(m):\n        points += prices[i]\n        counter += 1\n    points_left = points\n    for j in range(n - m):\n        if points_left >= auction_prices[j]:\n            points_left -= prices[counter]\n            counter += 1\n            points += auction_prices[j]\n    return points\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a_b = set(zip(a, b))\n    p_to_q = [0]*(n + 1)\n    s = 0\n    for price, i in a_b:\n        s += price\n        p_to_q[i] = s\n    p_to_q[n] = max(p_to_q)\n    print(p_to_q)\n    \n    print(max(p_to_q))\n    return '0'"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    l = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    l.sort()\n    b.sort(reverse=True)\n    print(l)\n    print(b)\n    n_b = []\n    for i in range(m):\n        if i < n - m:\n            n_b.append(l[i])\n        else:\n            n_b.append(b[i - (n - m)])\n    print(n_b)\n    return str(sum(n_b))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solution(n, m, arr):\n        if n == 0:\n            return 0\n        if m == 0:\n            return max(arr)\n        else:\n            return max(solution(n - 1, m, arr) + arr[m], solution(n, m - 1, arr))\n    n, m = map(int, stdin.readline().split(' '))\n    arr = list(map(int, stdin.readline().split(' ')))\n    print(solution(n, m, arr))"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n    auctions = list(map(int, stdin.split()))\n    return str(max(sum(prices) - 2 * min(prices), max(auctions) * m))\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    s = 0\n    max_p = 0\n    for i in range(m):\n        s = b[i]\n        max_p += arr[s - 1]\n        for j in range(s, n):\n            if arr[j] > s:\n                max_p += arr[j]\n                s = j + 1\n                break\n    return max_p\nprint(solution(input()))\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0438\u0440\u0430\u043c\u0438\u0434\u044b \u0438\u0437 \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 XML.\n\u041a\u0443\u0431\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0442\u0440\u0435\u0445 \u0446\u0432\u0435\u0442\u043e\u0432: \u043a\u0440\u0430\u0441\u043d\u044b\u0439 (red), \u0437\u0435\u043b\u0435\u043d\u044b\u0439 (green) \u0438 \u0441\u0438\u043d\u0438\u0439 (blue).\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0443\u0431\u0438\u043a\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b \u0435\u0433\u043e \u0446\u0432\u0435\u0442, \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b \u043a\u0443\u0431\u0438\u043a\u0438, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u044f\u043c\u043e \u043f\u043e\u0434 \u043d\u0438\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n<cube color=\"blue\">\n  <cube color=\"red\">\n    <cube color=\"green\">\n    </cube>\n  </cube>\n  <cube color=\"red\">\n  </cube>\n</cube>\n\n\u0412\u0432\u0435\u0434\u0435\u043c \u043f\u043e\u043d\u044f\u0442\u0438\u0435 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u0443\u0431\u0438\u043a\u043e\u0432. \u0421\u0430\u043c\u044b\u0439 \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u043a\u0443\u0431\u0438\u043a, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0440\u043d\u044e XML \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c 1. \u041a\u0443\u0431\u0438\u043a\u0438, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u044f\u043c\u043e \u043f\u043e\u0434 \u043d\u0438\u043c, \u0438\u043c\u0435\u044e\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c 2. \u041a\u0443\u0431\u0438\u043a\u0438, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u044f\u043c\u043e \u043f\u043e\u0434 \u043d\u0438\u0436\u0435\u043b\u0435\u0436\u0430\u0449\u0438\u043c\u0438 \u043a\u0443\u0431\u0438\u043a\u0430\u043c\u0438, \u0438\u043c\u0435\u044e\u0442 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c 3. \u0418 \u0442. \u0434.\n\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0446\u0432\u0435\u0442\u0430 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0432\u0441\u0435\u0445 \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u044d\u0442\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430: \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e, \u0437\u0435\u043b\u0435\u043d\u043e\u0433\u043e \u0438 \u0441\u0438\u043d\u0435\u0433\u043e \u0446\u0432\u0435\u0442\u043e\u0432.\n\nSample Input:\n\n<cube color=\"blue\"><cube color=\"red\"><cube color=\"green\"></cube></cube><cube color=\"red\"></cube></cube>\nSample Output:\n\n4 3 1\nExplanation:\n\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0446\u0432\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435:\n\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0432\u0441\u0435\u0445 \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u0446\u0432\u0435\u0442\u0430 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430.\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0435\u043b\u0435\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0432\u0441\u0435\u0445 \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u0446\u0432\u0435\u0442\u0430 \u0437\u0435\u043b\u0435\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430.\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043d\u0435\u0433\u043e \u0446\u0432\u0435\u0442\u0430 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0432\u0441\u0435\u0445 \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u0446\u0432\u0435\u0442\u0430 \u0441\u0438\u043d\u0435\u0433\u043e \u0446\u0432\u0435\u0442\u0430.\nSample Input:\n\n<cube color=\"blue\"><cube color=\"red\"><cube color=\"green\"></cube></cube><cube color=\"red\"><cube color=\"blue\"></cube></cube><cube color=\"blue\"><cube color=\"green\"></cube></cube></cube>\nSample Output:\n\n4 3 1\nExplanation:\n\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0446\u0432\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435:\n\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c\u0435 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0432\u0441\u0435\u0445 \u043a\u0443\u0431\u0438\u043a\u043e\u0432 \u0446\u0432\u0435\u0442\u0430 \u043a\u0440\u0430\u0441\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430.\n\u0426\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0435\u043b\u0435\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430 \u0440\u0430\u0432\u043d\u0430 \u0441\u0443\u043c\u043c"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    q = [0] * n\n    for i in range(n):\n        q[i] = i + 1\n\n    def choose(i):\n        if i == n - 1:\n            return q.index(a[i]) + 1\n        else:\n            return a.index(b[i]) + 1\n\n    def add(i, x):\n        if a[i] < x:\n            return 0\n        else:\n            return (x - a[i]) * b[i]\n\n    def remove(i):\n        return b[i]\n\n    def remove_all(i):\n        return sum([remove(i) for i in range(n)])\n\n    def get(i):\n        return a[i]\n\n    def get_all():\n        return [get(i) for i in range(n)]\n\n    def set_all(x):\n        a = get_all()\n        for i in range(n):\n            a[i] = x\n        return a\n\n    def min_all():\n        return min(get_all())\n\n    def max_all():\n        return max(get_all())\n\n    ans = 0\n\n    while len(set(q)) > 1:\n        i = 0\n        while choose(i) == q[i]:\n            i += 1\n            if i == n:\n                break\n        if i == n:\n            break\n        x = choose(i)\n        ans += add(i, x)\n        q[i] = x\n        for j in range(i + 1, n):\n            if choose(j) == x:\n                ans += remove(j)\n                q[j] = choose(j)\n                break\n    return ans\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(i) for i in stdin.split()]\n    res = 0\n    for i in range(5):\n        res += nums[i] * ((250 if i == 0 else (251 if i == 1 else (252 if i == 2 else (253 if i == 3 else (254 if i == 4 else 0))))))\n    res += nums[5] * 100\n    for i in range(5):\n        res += (250 if i == 0 else (251 if i == 1 else (252 if i == 2 else (253 if i == 3 else (254 if i == 4 else 0)))) - 50) * nums[6 + i]\n    res += (100 if nums[11] == 0 else 0)\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    m = [int(i) for i in stdin.split(\" \")]\n    w = [int(i) for i in stdin.split(\" \")]\n    h = [int(i) for i in stdin.split(\" \")]\n    res = []\n    for i in range(5):\n        if h[i] == 0:\n            res.append(500 * (m[i] // 250) + 500)\n        else:\n            res.append(max(0.3 * 500 * (m[i] // 250), (1 - (m[i] // 250)) * 500 - 50 * w[i]))\n    return str(sum(res) + 1000 * (h[0] - h[1]) + 100 * (h[1] - h[0]))\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split(' ')))\n    w = list(map(int, stdin.split(' ')))\n    h = list(map(int, stdin.split(' ')))\n    score = 0\n    for i in range(len(m)):\n        if m[i] == 0:\n            score += 500 * (i + 1)\n            score -= 50 * w[i]\n        else:\n            score += (0.3 * 500 * (i + 1)) + ((1 - (m[i] / 250)) * 500 * (i + 1)) - 50 * w[i]\n    score += 100 * h[0]\n    score -= 50 * h[1]\n    return score\n\nprint(solution(input()))\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nm1, m2, m3, m4, m5 = [int(x) for x in stdin.split(\" \")]\nw1, w2, w3, w4, w5 = [int(x) for x in stdin.split(\" \")]\nhs, hu = [int(x) for x in stdin.split(\" \")]\n\n\ndef"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split(\" \")))\n    w = list(map(int, stdin.split(\" \")))\n    h = list(map(int, stdin.split(\" \")))\n    \n    score = 0\n    for i in range(5):\n        score += max(0.3*m[i], (1-(m[i]/250))*m[i] - 50*w[i])\n    score += (h[0]*100 - h[1]*50)\n    return str(score)"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.split()]\n    l[0] = [0, l[0], 0]\n    l[1] = [0, l[1], 0]\n    l[2] = [0, l[2], 0]\n    l[3] = [0, l[3], 0]\n    l[4] = [0, l[4], 0]\n    l[0][0], l[0][1], l[0][2] = 0, l[0][1], l[0][2]\n    l[1][0], l[1][1], l[1][2] = 0, l[1][1], l[1][2]\n    l[2][0], l[2][1], l[2][2] = 0, l[2][1], l[2][2]\n    l[3][0], l[3][1], l[3][2] = 0, l[3][1], l[3][2]\n    l[4][0], l[4][1], l[4][2] = 0, l[4][1], l[4][2]\n    m = [0] * len(l)\n    for i in range(len(l)):\n        m[i] = [0] * len(l)\n    # get max\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i == j:\n                m[i][j] = 0\n            else:\n                m[i][j] = l[i][0] if l[i][0] > l[j][0] else l[j][0]\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i][1] == l[j][1] and i!= j:\n                m[i][j] = 0\n                m[j][i] = 0\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i][2] == l[j][2] and i!= j:\n                m[i][j] = 0\n                m[j][i] = 0\n    # find max value\n    a = []\n    for i in range(len(l)):\n        a.append(max(m[i]))\n    c = max(a)\n    # print(m)\n    # print(a)\n    # print(c)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i][1] == l[j][1] and i!= j:\n                if l[i][0] == 0:\n                    m[i][j] = 0\n                else:\n                    m[i][j] = max(0, l[i][2] + (1 - l[i][0] / 250) * c * 0.3 - 50 * l[i][1])\n                m[j][i] = m[i][j]\n            if l[i][2] == l[j][2] and i!= j:\n                if l[i][0] == 0:\n                    m[i][j] = 0\n                else:\n                    m[i][j] = max(0, l[i][0] + (1 - l[i][0] / 250) * c * 0.3 - 50 * l[i][1])\n                m[j][i] = m[i][j]\n    b = []\n    for i in range(len(l)):\n        b.append(max(m[i]))\n    d = max(b)\n    # print(m)\n    # print(b)\n    # print(d)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i][1] == l[j][1] and i!= j:\n                if l[i][0] == 0:\n                    m[i][j] = 0\n                else:\n                    m[i][j] = max(0, (l[i][2] + l[i][0] / 250) * (1 - l[i][0] / 250) * 0.3 + d * 0.3 + 100 * (l[i][2] - l[i][1]) / 50)\n                m[j][i] = m[i][j]\n            if l[i][2] == l[j][2] and i!= j:\n                if l[i][0] == 0:\n                    m[i][j] = 0\n                else:\n                    m[i][j] = max(0, l[i][0] * (1 - l[i][0] / 250) * 0.3 + d * 0.3 + 100 * (l[i][1] - l[i][2]) / 50)\n                m[j][i] = m[i][j]\n    # print(m)\n    # print(b)\n    # print(d)\n    c = max(b)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i][1] == l[j][1] and i!= j:\n                if l[i][0] == 0:\n                    m[i][j] = 0\n                else:\n                    m[i][j] = max(0, (l[i][2] + l[i][0] / 250) * (1 - l[i][0] / 250) * 0.3 + d * 0.3 + 100 * (l[i][2] - l[i][1]) / 50)\n                m[j][i] = m[i][j]\n            if l[i][2] == l[j][2] and i!= j:\n                if l[i][0] == 0:\n                    m"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes in the input of the format described in the problem statement\n    '''\n    m = [int(x) for x in stdin.split(' ')[:-1]]\n    w = [int(x) for x in stdin.split(' ')[-1][:-1].split(' ')]\n    h = [int(x) for x in stdin.split(' ')[-1][-1:].split(' ')]\n    scores = list(map(lambda x: max(0.3 * x[0],(1 - x[1]/250) * x[0] - 50 * x[1]), zip(m,w)))\n    scores.append(sum(scores))\n    scores.append(100 * (h[0] + h[1]) - 50 * (h[0] + h[1]))\n    return scores"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split(' ')))\n    w = list(map(int, stdin.split(' ')))\n    h = list(map(int, stdin.split(' ')))\n    score = 0\n    for i in range(5):\n        if h[0] + h[1] == 0:\n            score += (500 + 1000 + 1500 + 2000 + 2500) * m[i]\n        else:\n            score += (500 + 1000 + 1500 + 2000 + 2500) * m[i] * \\\n                (1 - (h[0] + h[1]) / 250) - 50 * w[i]\n    if h[0] + h[1] == 0:\n        score += 100\n    elif h[0] + h[1] > 0:\n        score -= 50\n    print(score)\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split(' '))\n    l, r = min(l, r), max(l, r)\n    def dfs(i, j):\n        if i == n and j == m:\n            return 1\n        if (i, j) in dp:\n            return dp[(i, j)]\n        res = 0\n        if l <= a[i][j] <= r:\n            res += dfs(i, j+1)\n        if l <= a[i][j+1] <= r:\n            res += dfs(i, j+2)\n        res += dfs(i+1, j)\n        dp[(i, j)] = res\n        return res\n    return str(dfs(0, 0))\n\n\n-----Test-----\n\nInputs:\n2 2 1 1\n\nOutput:\n1\n\nInputs:\n1 2 1 2\n\nOutput:\n2\n\n\n\ndef"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = list(map(int, stdin.split()))\n    return (l ** m) * (r ** n) % 1000000007\n\n\ndef"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = [int(x) for x in stdin.split()]\n    # state: 3D array\n    state = [0] * n\n    for i in range(n):\n        state[i] = [0] * m\n    dp = [[[0] * m for _ in range(m)] for _ in range(n)]\n    return answer"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = [int(x) for x in stdin.split(' ')]\n    if L * m == R * n:\n        return 0\n    if n * m < L * R:\n        return 0\n    if L > R:\n        L, R = R, L\n    return (2 * m * n * L * (L + 1)) // (L * R)\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(size):\n        return all(size % i == 0 for i in range(1, max(size) + 1))\n\n    n, m, l, r = map(int, stdin.split())\n    low, high = l, r\n    res = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if is_valid(mid):\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return str(res)\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = [int(x) for x in stdin.split()]\n    n, m, l, r = min(n, m), max(n, m), min(l, r), max(l, r)\n    dp = [[[0, 0] for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j][0] = dp[i - 1][j][0]\n            dp[i][j][1] = dp[i - 1][j][1]\n            if l <= j <= r:\n                dp[i][j][0] += dp[i - 1][j - 1][1]\n                dp[i][j][1] += dp[i - 1][j - 1][0]\n    return dp[n][m][0] % (10 ** 3)\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    find how many grids satisfy the conditions\n    '''\n    n, m, L, R = list(map(int, stdin.split()))\n    n_m_L_R = 0\n    for i in range(n):\n        for j in range(m):\n            n_m_L_R += min(L, R) <= (i+1) * (j+1) <= max(L, R)\n    return str(n_m_L_R)\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: string\n    returns: str\n    '''\n    # Your code goes here\n    import re\n    import numpy as np\n    n,m,l,r = [int(i) for i in re.findall('\\d+',stdin)]\n    cnt=0\n    for i in range(n):\n        for j in range(m):\n            if (i+j)%2==0:\n                if l<=stdin[i+j].count('1')<=r:\n                    cnt+=1\n            else:\n                if l<=stdin[i+j].count('2')<=r:\n                    cnt+=1\n    return str(cnt%(10**9+7))\n\ndef"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2 1 1\")\n    1\n    >>> solution(\"1 2 1 2\")\n    2\n    \"\"\"\n   ...\n    n, m, L, R = map(int, stdin.split())\n    return sum(\n        [1 for a in range(L, R + 1) for b in range(L, R + 1) if n * a >= b and n * b >= a]\n    ) % (10 ** 9 + 7)\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nn, m, l, r = [int(x) for x in stdin.strip().split(' ')]\n\nres = 0\nfor i in range(n):\n    for j in range(m):\n        for x in range(i + 1):\n            for y in range(j + 1):\n                if l <= (x + y) <= r:\n                    res += 1\nprint(res % 998244353)\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split(\" \")]\n    matrix = []\n    for _ in range(m):\n        matrix.append([int(x) for x in stdin.split(\" \")])\n    for i in range(1, m):\n        matrix[i][0] += min(matrix[i - 1][0], matrix[i][1])\n    for i in range(1, m):\n        matrix[i][n - 1] += min(matrix[i - 1][n - 1], matrix[i][n - 2])\n    for j in range(1, n):\n        matrix[0][j] += min(matrix[0][j - 1], matrix[1][j])\n    for j in range(1, n):\n        matrix[m - 1][j] += min(matrix[m - 1][j - 1], matrix[m - 2][j])\n    for i in range(1, m):\n        for j in range(1, n):\n            matrix[i][j] += min(matrix[i - 1][j], matrix[i][j - 1])\n    if min(matrix[m - 1][n - 1], matrix[m - 2][n - 1]) > 0:\n        return \"Impossible\"\n    else:\n        return \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    size1, size2 = map(int, inputs[0].split())\n    mat1 = [list(map(int, row.split())) for row in inputs[1:size1 + 1]]\n    mat2 = [list(map(int, row.split())) for row in inputs[size1 + 1:]]\n    for i in range(size1):\n        for j in range(size2):\n            if mat1[i][j] > mat2[i][j]:\n                return \"Impossible\"\n    for i in range(size1):\n        if any(mat1[i][j] > mat2[i][j] for j in range(size2)):\n            return \"Impossible\"\n    for j in range(size2):\n        if any(mat1[i][j] > mat2[i][j] for i in range(size1)):\n            return \"Impossible\"\n    return \"Possible\"\n\n\ndef"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for i in range(n):\n        first_row = map(int, stdin.split())\n        if len(set(first_row))!= m:\n            continue\n        break\n\n    for i in range(n):\n        second_row = map(int, stdin.split())\n        if len(set(second_row))!= m:\n            continue\n        break\n\n    if all(any(a < b for a, b in zip(first_row, second_row)) for first_row, second_row in zip(first_row, second_row)):\n        print('Possible')\n    else:\n        print('Impossible')\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    matrix1 = [[int(stdin) for stdin in stdin.split(' ')] for _ in range(n)]\n    matrix2 = [[int(stdin) for stdin in stdin.split(' ')] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if j == 0:\n                if matrix1[i][j] <= matrix1[i][j - 1]:\n                    return \"Impossible\"\n            elif j == m - 1:\n                if matrix1[i][j] <= matrix1[i][j - 1]:\n                    return \"Impossible\"\n            else:\n                if matrix1[i][j] <= matrix1[i][j - 1] or matrix1[i][j] <= matrix1[i][j + 1]:\n                    return \"Impossible\"\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                if matrix2[i][j] <= matrix2[i][j - 1]:\n                    return \"Impossible\"\n            elif i == n - 1:\n                if matrix2[i][j] <= matrix2[i][j - 1]:\n                    return \"Impossible\"\n            else:\n                if matrix2[i][j] <= matrix2[i][j - 1] or matrix2[i][j] <= matrix2[i][j + 1]:\n                    return \"Impossible\"\n    return \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: solve the problem\"\"\"\n    pass"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [[int(x) for x in stdin.split(' ')][i:i + m] for i in range(0, n * m, m)]\n    b = [[int(x) for x in stdin.split(' ')][i:i + m] for i in range(0, n * m, m)]\n    if n > 1 and m > 1:\n        if a[0][0] > a[0][1]:\n            if b[0][0] > b[0][1]:\n                return \"Possible\"\n            if a[0][0] < b[0][0] < b[0][1]:\n                return \"Impossible\"\n        else:\n            if b[0][0] > b[0][1]:\n                return \"Possible\"\n            if a[0][0] < b[0][0] < b[0][1]:\n                return \"Impossible\"\n        if a[1][0] > a[1][1]:\n            if b[1][0] > b[1][1]:\n                return \"Possible\"\n            if a[1][0] < b[1][0] < b[1][1]:\n                return \"Impossible\"\n        else:\n            if b[1][0] > b[1][1]:\n                return \"Possible\"\n            if a[1][0] < b[1][0] < b[1][1]:\n                return \"Impossible\"\n        for i in range(2, n):\n            if a[i][0] > a[i][1]:\n                if b[i][0] > b[i][1]:\n                    return \"Impossible\"\n                if b[i][0] < a[i][0] < a[i][1] and b[i - 1][1] < a[i - 1][1]:\n                    return \"Impossible\"\n                if b[i][0] < b[i][1] < a[i][1]:\n                    if b[i - 1][1] < b[i - 1][0]:\n                        return \"Impossible\"\n                    if a[i - 1][1] < a[i - 1][0]:\n                        return \"Impossible\"\n                else:\n                    return \"Impossible\"\n            else:\n                if b[i][0] > b[i][1]:\n                    if b[i - 1][1] < b[i - 1][0]:\n                        return \"Impossible\"\n                    if a[i - 1][1] < a[i - 1][0]:\n                        return \"Impossible\"\n                    if a[i][0] < b[i][0] < b[i][1]:\n                        return \"Impossible\"\n                    else:\n                        return \"Possible\"\n                if b[i][0] < b[i][1]:\n                    if b[i - 1][1] < b[i - 1][0]:\n                        return \"Impossible\"\n                    if a[i - 1][1] < a[i - 1][0]:\n                        return \"Impossible\"\n                    if a[i][0] < b[i][0] < b[i][1]:\n                        return \"Impossible\"\n                    else:\n                        return \"Possible\"\n        return \"Possible\"\n    else:\n        return \"Possible\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes if it is possible to make both matrices increasing.\"\"\"\n    pass\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This is just brute force.\n    '''\n    m, n = [int(i) for i in stdin.split(' ')[:2]]\n    matrix_a = [[int(i) for i in stdin.split('\\n')[j].split(' ')] for j in range(2, m+2)]\n    matrix_b = [[int(i) for i in stdin.split('\\n')[j].split(' ')] for j in range(m+2, n+m+2)]\n    if any(i > j for i, j in zip(*matrix_a, *matrix_b)):\n        return 'Impossible'\n    for i in range(n-m):\n        for j in range(m):\n            if matrix_a[j][i] > matrix_b[j][i+m]:\n                return 'Impossible'\n    return 'Possible'\n\nprint(solution(stdin=input))"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    alphabet = stdin.split()[1:]\n    for i in range(len(alphabet)):\n        alphabet[i] = int(alphabet[i])\n    alphabet.sort(reverse=True)\n    print(alphabet)\n    for i in range(len(alphabet)):\n        if i!= 0:\n            if alphabet[i] < alphabet[i-1]:\n                alphabet[i] = alphabet[i-1]\n    print(alphabet)\n    \n    \ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = list(map(int, stdin.split(' ')))\n\n    res = ''\n    memo = [None] * (n + 1)\n    num.sort()\n    for i in range(n):\n        if memo[i] is not None:\n            continue\n        elif num[i] == 1:\n            memo[i] = 1\n            res += 'a' * num[i]\n        elif num[i] == 2:\n            memo[i] = 2\n            res += 'aa'\n        else:\n            count = 0\n            for j in range(n - 1):\n                if num[j] >= num[i] and num[j] <= num[i] * 2:\n                    if j > 0 and num[j] == num[j - 1]:\n                        continue\n                    else:\n                        count += 1\n            memo[i] = count + 1\n            if memo[i] == 1:\n                res += 'a' * num[i]\n            elif memo[i] == 2:\n                res += 'aa'\n            else:\n                res += 'a' * (num[i] - 1) + 'b' + 'a' * (num[i] - 1)\n\n    return res\n\nprint(solution(stdin))\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin.split()[0])\n    arr = [int(i) for i in stdin.split()[1:]]\n    l = []\n    for i in range(n):\n        if arr[i] == 1:\n            l.append(n + 1)\n        else:\n            l.append(math.ceil(arr[i] / (n - i - 1)))\n    l.sort()\n    res = 1\n    for i in range(n):\n        res = max(res, l[i] * (n - i - 1))\n    return res"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    len_str = stdin.split('\\n')[0].split(' ')[0]\n    limitations = stdin.split('\\n')[0].split(' ')[1:]\n    len_limitations = len(limitations)\n\n    # convert input to int\n    len_limitations = list(map(int, len_limitations))\n\n    # calculate largest possible value\n    max_val = max(len_limitations)\n\n    # if there are multiple options\n    if len_limitations.count(max_val)!= 1:\n        # take the first one\n        best_max = max_val\n    else:\n        # otherwise take the max value\n        best_max = max_val\n\n    # define string\n    str = \"\"\n\n    # add as many letters as possible\n    for i in range(len_str):\n        str += chr(97+len_str-i-1) * best_max\n        \n    return str\n\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(num) for num in stdin.readline().strip().split(\" \")]\n    chars = {}\n    for i in range(n):\n        if a[i] in chars:\n            chars[a[i]] += 1\n        else:\n            chars[a[i]] = 1\n    \n    result = 0\n    for key in chars:\n        result += chars[key]\n    \n    return result\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(a, reverse=True)\n    s = set()\n    def f(a, s, r, l):\n        if len(r) == n:\n            s.add(l)\n            return\n        for i in range(n):\n            if i not in r and a[i] > 0 and i not in s:\n                r.add(i)\n                a[i] -= 1\n                f(a, s, r, l + chr(i + ord('a')))\n                r.remove(i)\n                a[i] += 1\n    f(a, s, set(), '')\n    return max(s, key=lambda x: len(x))\n\n\n\n\n\n\n\n\n\nn, *a = map(int, input().split())\na = sorted(a, reverse=True)\ns = set()\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    m = list(map(int, stdin.split(\" \")))\n    c = collections.Counter(m)\n    c = c.items()\n    c = list(c)\n    c = sorted(c, key=lambda x: x[1], reverse=True)\n    d = collections.Counter(m)\n    d = d.most_common()\n    d = dict(d)\n    result = 0\n    for i in range(n):\n        temp = \"\"\n        for key, value in d.items():\n            if (value - 1) > 0 and key == c[i][0]:\n                temp = temp + key * (value - 1)\n            if key == c[i][0]:\n                temp = temp + key\n        if len(temp) > result:\n            result = len(temp)\n    return result\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function takes the input string\n    and counts the number of occurences of each\n    letter in the string, and returns the maximum\n    length of the string that meets all the requirements.\n    \"\"\"\n    pass"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    characters = stdin.split()\n    characters = [int(i) for i in characters]\n    characters.sort()\n    \n    max_number_of_characters = 0\n    for i in range(len(characters)):\n        max_number_of_characters += characters[i]\n    \n    max_number_of_characters = int(max_number_of_characters / 3)\n    print(max_number_of_characters)\n    return ''"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 2, 'c': 1}\n{'a': 2, 'b': 1, 'c': 1}\n{'a': 1, 'b': 2, 'c': 2}\n{'a': 2, 'b': 2, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 2, 'c': 2}\n{'a': 2, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 2, 'c': 1}\n{'a': 2, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 2, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 2, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 2, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 2, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 2, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 2, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 2}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n{'a': 1, 'b': 1, 'c': 1}\n\n{'a': 1, 'b': 1, 'c': 1}"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    m = len(nums)\n    max_d = 0\n    count = 0\n    for i in range(m):\n        if nums[i] > k:\n            max_d = nums[i]\n            count = i\n    if max_d < k:\n        count = 0\n    else:\n        count = 1\n    print(count)"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    i = 0\n    while K > 0 and i < N:\n        if A[i] >= K:\n            return str(i)\n        K -= A[i] // 2\n        i += 1\n    return str(i)"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    arr = list(map(int, stdin.split(' ')))\n    arr.sort()\n    \n    ans = 0\n    i = 1\n    while i < n:\n        d = arr[i]\n        if arr[i] >= arr[i-1] // 2:\n            ans += 1\n        else:\n            break\n        i += 1\n    \n    return str(ans)\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    d = []\n    for i in a:\n        d.append(i // 2)\n    d.reverse()\n    ans = 0\n    for i in range(k):\n        j = 0\n        flag = False\n        while j < n and not flag:\n            if d[j] >= a[j]:\n                flag = True\n            else:\n                j += 1\n        if flag:\n            ans += 1\n        else:\n            break\n    print(ans)\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.split(' ')]\n    arr = [int(c) for c in stdin.split(' ')[1:]]\n    ans = 0\n    for i in range(1, len(arr)):\n        ans += 1 if arr[i] >= k else max(arr[i] // 2, arr[i] // 3) - k\n    return ans\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(\" \")]\n    a = [int(i) for i in stdin.split(\" \")]\n    a.sort()\n    res = 0\n    for i in a:\n        if i >= B/2:\n            break\n        res += 1\n    return str(res)"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k = [int(i) for i in stdin.split(' ')]\n  a = sorted([int(i) for i in stdin.split(' ')])\n  solutions = 0\n  left = 0\n  right = k\n  while left <= right:\n    solutions += (right - left) // 2\n    left, right = left + (right - left) // 2 + 1, right\n  return solutions"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns number of diplomas\n    \"\"\"\n    n, dipl1, dipl2, dipl3 = map(int, stdin.split('\\n'))\n    dipl1, dipl2, dipl3 = sorted([dipl1, dipl2, dipl3])\n    dipl1, dipl2, dipl3 = min(dipl1, dipl2, dipl3), max(dipl1, dipl2, dipl3), sum(dipl1, dipl2, dipl3)\n    print(*[dipl1, dipl2, dipl3])\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution will use a recursive backtracking algorithm.\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    min1, max1 = map(int, stdin[1].split())\n    min2, max2 = map(int, stdin[2].split())\n    min3, max3 = map(int, stdin[3].split())\n    \n    # the first value is the max possible for the first degree, then the recursive call is made on the remaining two values\n    # the call is made with the current values and the remaining values\n    return str(solution_rec(n, min1, max1, min2, max2, min3, max3))\n\ndef"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    min_1, max_1 = [int(i) for i in stdin.readline().split()]\n    min_2, max_2 = [int(i) for i in stdin.readline().split()]\n    min_3, max_3 = [int(i) for i in stdin.readline().split()]\n    if n < (min_1 + min_2 + min_3):\n        return \"-1 -1 -1\"\n    elif n <= (max_1 + max_2 + max_3):\n        return str(min_1) + \" \" + str(max_1) + \" \" + str(n - min_1 - max_1)\n    else:\n        max_diplomas = max(max_1, max_2, max_3)\n        max_students = max(min_2, min_3)\n        for max_degree in range(max_students, max_diplomas, -1):\n            for min_degree in range(min_1 + 1, max_degree + 1):\n                if min_degree + max_degree + n - min_degree - max_degree <= max_diplomas:\n                    return str(min_degree) + \" \" + str(max_degree) + \" \" + str(n - min_degree - max_degree)\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    limits = list(map(int, lines[1].split()))\n    d1 = limits[0]\n    d2 = limits[1]\n    d3 = limits[2]\n    d1_count = 0\n    d2_count = 0\n    d3_count = 0\n    for _ in range(n):\n        if d1_count < d1 and d2_count < d2 and d3_count < d3:\n            d1_count += 1\n            d2_count += 1\n            d3_count += 1\n        else:\n            if d1_count == d1:\n                d1_count += 1\n                d2_count += 1\n            elif d2_count == d2:\n                d2_count += 1\n                d3_count += 1\n            elif d3_count == d3:\n                d3_count += 1\n    return f'{d1_count} {d2_count} {d3_count}'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    min1, max1, min2, max2, min3, max3 = map(int, stdin.readline().split())\n    count1, count2, count3 = 0, 0, 0\n    count1, count2 = 1, 0\n    while min1 <= count1 and count1 <= max1:\n        count2 += 1\n        count1 += 1\n    count3 = count1 + count2\n    while min2 <= count2 and count2 <= max2:\n        count3 += 1\n        count2 += 1\n    count1 = 0\n    count2 = 0\n    while min3 <= count3 and count3 <= max3:\n        count1 += 1\n        count3 += 1\n    print(count1, count2, count3)\n    return ''\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    s = list(map(int, stdin[0].split()))\n    minimum = min(s)\n    maximum = max(s)\n    m_1 = int(stdin[1])\n    m_2 = int(stdin[2])\n    m_3 = int(stdin[3])\n    if m_1 > m_2 and m_1 > m_3:\n        d_1 = maximum\n        d_2 = m_2 + maximum\n        d_3 = m_3 + maximum\n    elif m_2 > m_1 and m_2 > m_3:\n        d_1 = m_1 + maximum\n        d_2 = maximum\n        d_3 = m_3 + maximum\n    else:\n        d_1 = m_1 + maximum\n        d_2 = m_2 + maximum\n        d_3 = maximum\n    print(d_1, d_2, d_3)\n\n\ndef"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, min_1, max_1, min_2, max_2, min_3, max_3 = map(int, stdin.split())\n    if n <= max_3 and n >= min_3:\n        return str(max_1) + \" \" + str(max_2) + \" \" + str(n)\n    elif n <= max_2 and n >= min_2:\n        return str(max_1) + \" \" + str(max_3) + \" \" + str(n)\n    elif n <= max_1 and n >= min_1:\n        return str(max_2) + \" \" + str(max_3) + \" \" + str(n)\n    else:\n        return \"0 0 0\"\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    min1, max1, min2, max2, min3, max3 = list(map(int, lines[1].split()))\n    if (N < max1 + max2 + max3) or (min1 < min2) or (min1 < min3) or (max1 > N):\n        return '0 0 0'\n    s1 = set()\n    s2 = set()\n    s3 = set()\n    for i in range(N):\n        s1.add(random.randint(min1, max1))\n        s2.add(random.randint(min2, max2))\n        s3.add(random.randint(min3, max3))\n    s1 = list(s1)\n    s2 = list(s2)\n    s3 = list(s3)\n    s1.sort()\n    s2.sort()\n    s3.sort()\n    print(s1)\n    print(s2)\n    print(s3)\n    return''.join(map(str, s1))\n\n\nsolution(stdin)"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *limits = map(int, stdin.split())\n    a, b, c = 0, 0, 0\n    for x, y in zip(limits, limits[1:]):\n        a += min(x, y)\n        b += max(x, y)\n        c = max(c, x * y)\n\n    a = min(a, n - a)\n    b = min(b, n - b)\n    c = min(c, n - c)\n\n    return''.join(map(str, sorted((a, b, c))))\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, min_1, max_1 = int(input[0]), int(input[1]), int(input[2])\n    min_2, max_2 = min_3, max_3 = 0, 0\n\n    if min_1 < min_2:\n        min_2 = min_1\n    if max_1 < max_2:\n        max_2 = max_1\n    if min_1 + min_2 < n:\n        min_2 = min_1 + min_2\n    if min_1 + min_2 < n:\n        max_2 = max_1 + max_2\n    if min_1 + min_2 + min_3 < n:\n        min_2 = min_1 + min_2 + min_3\n    if min_1 + min_2 + min_3 < n:\n        max_2 = max_1 + max_2 + max_3\n\n    first = min_1 + min_2 + min_3\n    second = max_1 + max_2 + max_3\n    return '{} {} {}'.format(first, second, max(min_1, min_2, min_3))\n\n\nassert solution('6\\n1 3\\n2 2\\n2 2\\n') == '2 2 2'\nassert solution('10\\n1 2\\n1 3\\n1 5\\n') == '2 3 5'\nassert solution('6\\n1 2\\n1 3\\n1 5\\n') == '2 2 2'\nassert solution('10\\n1 3\\n1 5\\n') == '2 3 5'\nassert solution('10\\n2 2\\n2 2\\n') == '2 2 2'\nassert solution('10\\n2 3\\n2 2\\n') == '2 2 2'\nassert solution('10\\n1 5\\n1 3\\n') == '2 3 5'\nassert solution('6\\n1 2\\n1 2\\n1 2\\n') == '1 1 2'\nassert solution('6\\n1 1\\n1 2\\n1 2\\n') == '1 1 2'\nassert solution('6\\n1 1\\n2 2\\n1 2\\n') == '1 2 2'\nassert solution('6\\n1 1\\n1 1\\n1 2\\n') == '1 1 1'\nassert solution('10\\n1 1\\n1 1\\n1 1\\n') == '1 1 1'\nassert solution('6\\n1 3\\n2 3\\n2 3\\n') == '1 1 2'\nassert solution('6\\n1 1\\n2 1\\n2 1\\n') == '1 2 1'\nassert solution('6\\n1 1\\n1 1\\n1 1\\n') == '1 1 1'\nassert solution('10\\n1 1\\n2 1\\n2 1\\n') == '1 2 1'\nassert solution('10\\n1 1\\n1 1\\n1 1\\n') == '1 1 1'\nassert solution('6\\n1 3\\n1 2\\n1 2\\n') == '1 1 2'\nassert solution('6\\n1 1\\n1 1\\n1 2\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 2\\n1 2\\n') == '1 2 2'\nassert solution('6\\n1 2\\n1 3\\n1 2\\n') == '1 2 2'\nassert solution('6\\n1 1\\n1 3\\n1 2\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 1\\n1 2\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 3\\n1 2\\n') == '1 1 1'\nassert solution('6\\n1 2\\n1 3\\n1 2\\n') == '1 1 2'\nassert solution('6\\n1 3\\n1 3\\n1 2\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 1\\n1 1\\n') == '1 1 1'\nassert solution('6\\n1 2\\n1 1\\n1 1\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 1\\n1 2\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 1\\n1 2\\n') == '1 1 1'\nassert solution('6\\n1 2\\n1 2\\n1 3\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 2\\n1 2\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 3\\n1 3\\n') == '1 1 1'\nassert solution('6\\n1 3\\n1 1\\n1 3\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 1\\n1 1\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 3\\n1 3\\n') == '1 1 1'\nassert solution('6\\n1 1\\n1 2\\n1 2\\n') == '1 1 1'\nassert solution('6\\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nimport io\nimport sys\n\n\ndef"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = [int(x) for x in stdin.split('\\n')]\n    l = len(input)\n    if l == 1:\n        return \"DOWN\" if input[0] < 8 else -1\n    for i in range(l):\n        input[i] %= 16\n    x = len(set(input))\n    if x == 1:\n        return \"UP\" if input[0] == 7 or input[0] == 8 else \"DOWN\"\n    if input.count(input[0]) == l:\n        return \"DOWN\"\n    return -1\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(int, stdin.split()))\n    cur = 0\n    for i in range(len(days)):\n        if days[i] > cur:\n            if days[i] < cur + 1:\n                return 'UP'\n            else:\n                cur = days[i]\n        else:\n            if days[i] > cur - 1:\n                return 'DOWN'\n    return '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(i) for i in stdin.readline().split()]\n    cnt = 0\n    for i in l:\n        cnt += i\n    if cnt == 15:\n        return \"DOWN\"\n    elif cnt == 0:\n        return \"UP\"\n    else:\n        return -1\n    pass\n\ndef"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = list(map(int, stdin.split()))\n    if n == 1:\n        return 'DOWN' if data[0] == 1 else 'UP'\n\n    for i in range(1, n):\n        if (data[i] == 1 or data[i] == 15) and (data[i - 1] == 1 or data[i - 1] == 14):\n            return 'UP'\n        elif (data[i] == 0 or data[i] == 14) and (data[i - 1] == 0 or data[i - 1] == 13):\n            return 'DOWN'\n\n    return '-'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    lst = list(map(int, stdin.split('\\n')[1].split()))\n    ans = lst[0]\n    if lst[0] >= n:\n        if ans > n:\n            return \"DOWN\"\n        else:\n            return \"UP\"\n    else:\n        for i in range(1, n):\n            ans = lst[i] - lst[i - 1]\n            if ans == 0:\n                return \"DOWN\"\n            elif ans > 0:\n                return \"UP\"\n    return \"-\""
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(num) for num in stdin.split()]\n    data = []\n\n    for num in days:\n        if num not in data:\n            data.append(num)\n        else:\n            data.remove(num)\n\n    if len(data) == 0:\n        return \"UP\"\n    elif len(data) == 1:\n        return \"DOWN\"\n    else:\n        return -1\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(x) for x in stdin.split()]\n    down = 0\n    up = 0\n    for i in range(1, len(days)):\n        down += 1\n        if days[i] < days[i - 1]:\n            down = 0\n            up += 1\n        if down == 1 and up == 1:\n            return \"DOWN\"\n    return \"UP\""
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    input = stdin.split('\\n')\n    n = int(input[0])\n    records = [int(num) for num in input[1].split(' ') if num!= '']\n\n    count = 0\n    res = []\n    for record in records:\n        if record >= 1:\n            count += 1\n            if count > 30:\n                count -= 30\n                res.append('UP')\n            else:\n                res.append('DOWN')\n        else:\n            count = 0\n            res.append('DOWN')\n\n    return '\\n'.join(res)\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(x) for x in stdin.split()]\n    if len(days) == 1:\n        if days[0] % 2 == 0:\n            return 'UP'\n        else:\n            return 'DOWN'\n\n    pre = 0\n    for i in days:\n        if pre > i:\n            return 'DOWN'\n        pre = i\n\n    return 'UP'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    return \"Yes\" if any(c1!= c2 and (c1 in VOWELS and c2 in VOWELS or c1 not in VOWELS and c2 not in VOWELS) for c1, c2 in zip(s, t)) else \"No\""
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) % 2 == 0 else 'No'\n\"\"\"\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    count_s = count_t = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count_s += 1\n    for i in t:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count_t += 1\n    return 'Yes' if count_s == count_t else 'No'"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    i = 0\n    while i < len(s):\n        if s[i] in ['a', 'e', 'i', 'o', 'u'] and s[i] == t[i]:\n            i += 1\n        elif s[i] in ['a', 'e', 'i', 'o', 'u'] and s[i]!= t[i]:\n            break\n        elif s[i] in list(string.ascii_lowercase) and t[i] in list(string.ascii_lowercase):\n            break\n        else:\n            i += 1\n    if i == len(s):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    possible = 0\n    s_list = list(s)\n    t_list = list(t)\n    for i, c in enumerate(s_list):\n        if c in vowels:\n            for j, d in enumerate(t_list):\n                if d in vowels:\n                    s_list[i] = d\n                    t_list[j] = d\n                    if s_list == t_list:\n                        return \"Yes\"\n                    else:\n                        s_list[i] = c\n                        t_list[j] = c\n                        if s_list == t_list:\n                            return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_superhero(stdin[0]) == is_superhero(stdin[1]) else \"No\"\n\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is not very elegant. It should be improved.\n    \"\"\"\n    s, t = stdin.split('\\n')\n    vowels = 'aeiou'\n    if len(s)!= len(t):\n        return 'No'\n    else:\n        s_arr, t_arr = list(s), list(t)\n        for i in range(len(s_arr)):\n            if s_arr[i] == t_arr[i]:\n                continue\n            else:\n                if s_arr[i] in vowels:\n                    if t_arr[i] in vowels:\n                        return 'No'\n                    else:\n                        s_arr[i] = t_arr[i]\n                else:\n                    if t_arr[i] in vowels:\n                        return 'No'\n                    else:\n                        s_arr[i] = t_arr[i]\n        return 'Yes'\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, w = map(int, stdin.split())\n    board = [list(stdin[:b])] + [list(stdin[b:])]\n    black, white = 0, 0\n    while black < 8 and white < 8:\n        move_b, move_w = False, False\n        for r, row in enumerate(board):\n            for c, col in enumerate(row):\n                if col == 'B':\n                    if r + 1 < 8:\n                        if board[r + 1][c] == '.':\n                            move_b = True\n                            board[r][c], board[r + 1][c] = 'B', 'B'\n                    else:\n                        if r - 1 >= 0:\n                            if board[r - 1][c] == '.':\n                                move_b = True\n                                board[r][c], board[r - 1][c] = 'B', 'B'\n                elif col == 'W':\n                    if r - 1 >= 0:\n                        if board[r - 1][c] == '.':\n                            move_w = True\n                            board[r][c], board[r - 1][c] = 'W', 'W'\n                    else:\n                        if r + 1 < 8:\n                            if board[r + 1][c] == '.':\n                                move_w = True\n                                board[r][c], board[r + 1][c] = 'W', 'W'\n        if not move_b:\n            black += 1\n        if not move_w:\n            white += 1\n    return 'A' if black > white else 'B'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nSolution\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  board = stdin.split('\\n')\n  board = [list(r) for r in board]\n  black = {(r, c) for r in range(len(board)) for c in range(len(board[r])) if board[r][c] == 'B'}\n  white = {(r, c) for r in range(len(board)) for c in range(len(board[r])) if board[r][c] == 'W'}\n  return 'A' if len(black) > len(white) else 'B'"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    board = [list(line) for line in stdin.split('\\n')]\n    \n    white_row = []\n    black_row = []\n    for r in range(8):\n        for c in range(8):\n            if board[r][c] == 'B':\n                black_row.append((r, c))\n            if board[r][c] == 'W':\n                white_row.append((r, c))\n    \n    def player_score(black_row, white_row):\n        return len(black_row) - len(white_row)\n    \n    scores = {'A': player_score(black_row, white_row), 'B': player_score(white_row, black_row)}\n    while len(black_row) > 0 and len(white_row) > 0:\n        for i, (r, c) in enumerate(black_row):\n            if board[r][c] == '.':\n                board[r][c] = 'W'\n                white_row.append((r, c))\n                white_row.pop(i)\n                break\n        else:\n            break\n        \n        for i, (r, c) in enumerate(white_row):\n            if board[r][c] == '.':\n                board[r][c] = 'B'\n                black_row.append((r, c))\n                black_row.pop(i)\n                break\n        else:\n            break\n    \n    return max(scores, key=scores.get)\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    board = [stdin.split('\\n')]\n    player_a_turn = True\n    player_a_steps = 0\n    for row_index, row in enumerate(board[0]):\n        for col_index, col in enumerate(row):\n            if col == 'B':\n                if player_a_turn:\n                    player_a_steps += 1\n                    if row_index == 0:\n                        player_a_steps += 1\n                    elif row_index == 7:\n                        player_a_steps += 1\n                else:\n                    player_a_steps += 1\n                    if row_index == 7:\n                        player_a_steps += 1\n                    elif row_index == 0:\n                        player_a_steps += 1\n                player_a_turn = not player_a_turn\n    return 'A' if player_a_steps <= 5 else 'B'\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    board = [stdin[i: i + 8] for i in range(0, len(stdin), 8)]\n    pawns_by_color = {'W': 0, 'B': 0}\n    for row in board:\n        pawns_by_color['W'] += row.count('W')\n        pawns_by_color['B'] += row.count('B')\n    if pawns_by_color['B'] > pawns_by_color['W']:\n        return 'B'\n    return 'A'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # 1. replace the input str to list of lists\n    # 2. reverse each list\n    # 3. check row count (8)\n    # 4. row 1 starts with black\n    # 5. check column count (8)\n    # 6. column 1 starts with white\n    # 7. iterate each cell to check their color\n    # 8. if black (c == 1) -> black wins\n    # 9. if white (c == 8) -> white wins\n    # 10. else -> draw\n    # 11. return winner\n    s = stdin.split(\"\\n\")\n    l = [[x for x in row] for row in s]\n    l = [[x[::-1] for x in row] for row in l]\n    return 'B' if l[0].count('B') > l[0].count('W') else 'A' if l[0].count('W') > l[0].count('B') else 'D'\n\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # O(N)\n    def push_up(r, c, board):\n        nr, nc = r - 1, c\n        while nr >= 0 and board[nr][nc] == '.':\n            board[nr][nc] = 'W'\n            nr -= 1\n    def push_down(r, c, board):\n        nr, nc = r + 1, c\n        while nr < 8 and board[nr][nc] == '.':\n            board[nr][nc] = 'W'\n            nr += 1\n    def push_left(r, c, board):\n        nr, nc = r, c - 1\n        while nc >= 0 and board[nr][nc] == '.':\n            board[nr][nc] = 'W'\n            nc -= 1\n    def push_right(r, c, board):\n        nr, nc = r, c + 1\n        while nc < 8 and board[nr][nc] == '.':\n            board[nr][nc] = 'W'\n            nc += 1\n    board = stdin.split('\\n')\n    pawn_r = [8,7,6,5,4,3,2,1]\n    for i in range(8):\n        board[pawn_r[i]] = [char for char in board[pawn_r[i]]]\n        if 'B' in board[pawn_r[i]]:\n            r, c = pawn_r[i], board[pawn_r[i]].index('B')\n            push_up(r, c, board)\n        if 'W' in board[pawn_r[i]]:\n            r, c = pawn_r[i], board[pawn_r[i]].index('W')\n            push_down(r, c, board)\n        if '.' not in board[pawn_r[i]]:\n            continue\n        board[pawn_r[i]][c] = '.'\n    return 'A' if board[1][c] == 'W' else 'B'"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Return a max length of resulting arrays after some operations were performed on array\n    A and B in such a way that arrays become equal. If there is no way to make them equal,\n    return -1.\n\n    Parameters:\n        stdin (str): String of input stream.\n\n    Returns:\n        str: Output string.\n    '''\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    B = list(map(int, stdin.readline().split()))\n    d = dict()\n\n    for i in range(m):\n        d[B[i]] = d.get(B[i], []) + [i + 1]\n\n    for i in range(n):\n        A[i] = A[i] * (-1) if d.get(A[i]) else A[i]\n\n    if len(set(A)) == 1 and len(set(B)) == 1:\n        return len(A)\n    else:\n        return -1\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n11 2 3 5 7\\n4\\n11 7 3 7\")\n    3\n    \"\"\"\n    n, A = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    m, B = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n\n    if len(set(A))!= n or len(set(B))!= m:\n        return \"-1\"\n    else:\n        s = set()\n        for i in range(n):\n            for j in range(m):\n                s.add(A[i] + B[j])\n        return max(s)\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasya has two arrays $A$ and $B$ of lengths $n$ and $m$, respectively.\n    He can perform the following operation arbitrary number of times (possibly zero): he takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment.\n    For example, from the array $[1, 10, 100, 1000, 10000]$ Vasya can obtain array $[1, 1110, 10000]$.\n    Two arrays $A$ and $B$ are considered equal if and only if they have the same length and for each valid $i$ $A_i = B_i$.\n    Vasya wants to perform some of these operations on array $A$, some on array $B$, in such a way that arrays $A$ and $B$ become equal.\n    Moreover, the lengths of the resulting arrays should be maximal possible.\n    Help Vasya to determine the maximum length of the arrays that he can achieve or output that it is impossible to make arrays $A$ and $B$ equal.\n    \"\"\"\n    n, A = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    m, B = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    if n == m and B == A:\n        print(n)\n    elif (n > m and B > A) or (n < m and B < A):\n        print(-1)\n    else:\n        l, r = max(A), max(B)\n        while l <= r:\n            mid = l + (r - l) // 2\n            A, B = (A // mid, B // mid)\n            if A == B:\n                print(mid)\n                break\n            else:\n                r = mid - 1\n        else:\n            print(-1)\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    A = list(map(int, stdin[1].split()))\n    m = int(stdin[2])\n    B = list(map(int, stdin[3].split()))\n    A.sort()\n    B.sort()\n\n    l = n + m\n    for i in range(n):\n        for j in range(m):\n            if A[i] + B[j] == A[i]:\n                l = min(l, n - i + j)\n                break\n    return str(l) if l!= n + m else \"impossible\"\n\n\ndef"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 3 1 2\n   ... 3 1 2\n   ... 3 1 2\n   ... ''')\n    3\n    >>> solution('''\n   ... 5\n   ... 5 7 9 3 1\n   ... 5 7 9 3 1\n   ... 5 7 9 3 1\n   ... ''')\n    3\n    >>> solution('''\n   ... 3\n   ... 3 1 2\n   ... 4 1 2\n   ... ''')\n    -1\n    >>> solution('''\n   ... 5\n   ... 3 1 2 4\n   ... 3 1 2 4\n   ... 3 1 2 4\n   ... ''')\n    -1\n    >>> solution('''\n   ... 4\n   ... 3 1 2 3\n   ... 3 1 2 3\n   ... 3 1 2 3\n   ... ''')\n    4\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    m = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    b_set = set(b)\n    a_dict = {}\n    for elem in a:\n        if elem not in a_dict:\n            a_dict[elem] = 0\n        a_dict[elem] += 1\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda x: x[0])}\n    b_dict = {}\n    for elem in b:\n        if elem not in b_dict:\n            b_dict[elem] = 0\n        b_dict[elem] += 1\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda x: x[0])}\n    result = []\n    while len(b_set)!= 0:\n        a_elem = None\n        b_elem = None\n        for elem in a_dict.keys():\n            if elem in b_set:\n                a_elem = elem\n                break\n        for elem in b_dict.keys():\n            if elem in b_set:\n                b_elem = elem\n                break\n        if b_elem is None:\n            return -1\n        result.append(b_elem)\n        a_set = a_dict[a_elem]\n        a_dict[a_elem] = 0\n        b_set.remove(b_elem)\n        if a_set == 1:\n            del a_dict[a_elem]\n        b_set.remove(b_elem)\n        b_set.add(b_elem * a_set)\n        b_dict[b_elem] -= 1\n        if b_dict[b_elem] == 0:\n            del b_dict[b_elem]\n    return len(result)\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '4'\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    m = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    for i in range(len(a)):\n        if len(b) < len(a):\n            if a[i]!= b[i]:\n                return str(len(a) - max([x for x in range(len(a)) if a[x]!= b[x]]))\n        else:\n            if a[i]!= b[i]:\n                return str(len(b) - max([x for x in range(len(b)) if a[x]!= b[x]]))\n    return '-1'\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    m = int(stdin[2])\n    b = list(map(int, stdin[3].split()))\n    \n    a_s, b_s = [], []\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = abs(a[0] - b[0])\n    for i in range(1, m):\n        dp[0][i] = abs(a[0] - b[i]) + dp[0][i-1]\n    for i in range(1, n):\n        dp[i][0] = abs(a[i] - b[0]) + dp[i-1][0]\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = abs(a[i] - b[j]) + min(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n-1][m-1]\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    friends = 'Danil Olya Slava Ann Nikita'.split(' ')\n    # from_contest = stdin.split('_')[0].split(' ')\n    from_contest = stdin.split('_')[0]\n    for f in friends:\n        if f in from_contest:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"O\") == 1 else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.find('Danil')!= -1 or stdin.find('Olya')!= -1 or stdin.find('Slava')!= -1 or stdin.find('Ann')!= -1 or stdin.find('Nikita')!= -1 else 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find if a problem is from contest or not.\n    :param stdin: Name of problem\n    :return: 'YES' if a problem is from contest, 'NO' otherwise\n    \"\"\"\n\n    return \"YES\" if \"Danil\" in stdin or \"Olya\" in stdin or \"Slava\" in stdin or \"Ann\" in stdin or \"Nikita\" in stdin else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.find(\"Danil\")!= -1 or stdin.find(\"Olya\")!= -1 or stdin.find(\"Slava\")!= -1 or stdin.find(\"Ann\")!= -1 or stdin.find(\"Nikita\")!= -1 else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"\".join(stdin.split(\"_\")) in [stdin.split(\"_\")[0], \"\".join(reversed(stdin.split(\"_\")))][0] else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"Danil\") + stdin.count(\"Olya\") + stdin.count(\"Ann\") + stdin.count(\"Nikita\") == 0 else \"NO\"\n    "
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for i in stdin.split('_'):\n        for j in i:\n            if j in ans:\n                return 'YES'\n            ans.append(j)\n    return 'NO'\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin.upper().replace(\"_\", \"\").split(\"_\")[0] == \"ANNY\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if 'Danil' in stdin or 'Olya' in stdin or 'Slava' in stdin or 'Ann' in stdin else 'NO'\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(i) for i in stdin.split()]\n    \n    if a >= b:\n        if k <= 1:\n            return -1\n        else:\n            return b\n    \n    sieve = [True for _ in range(b+1)]\n    sieve[0] = sieve[1] = False\n    for i in range(2, b+1):\n        if sieve[i]:\n            for j in range(i, b+1, i):\n                sieve[j] = False\n    \n    # find all primes less than b and count how many times they occur\n    primes = [i for i in range(a, b+1) if sieve[i]]\n    if len(primes) < k:\n        return -1\n    \n    # for each prime, check if it will satisfy the condition\n    l = 0\n    for p in primes:\n        if l + 1 < p <= b - l:\n            l += 1\n            if l == k:\n                return l\n    return -1\n    "
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split(' ')]\n    count = 0\n    for i in range(1, b + 1):\n        for j in range(a, b + 1):\n            if i <= j:\n                count += 1\n                if count == k:\n                    return i\n    return -1\n    "
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split(' '))\n    if k == 1:\n        if b == a + 1:\n            return a\n        else:\n            return -1\n    if b - a + 1 < k:\n        return -1\n    if b - a + 1 == k:\n        if b % 2 == 0:\n            return a + 1\n        else:\n            return a\n\n    for i in range(k, b - a + 1):\n        if prime(i) == False:\n            return i\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    min_l = 1\n    for x in range(a, b + 1):\n        n = 0\n        for y in range(x, x + k):\n            if is_prime(y):\n                n += 1\n        if n == k:\n            min_l = max(x, min_l)\n    return str(min_l if min_l > 0 else -1)\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    count_prime = 0\n    for i in range(a, b+1):\n        if i == 1:\n            count_prime += 1\n        if i == 2:\n            count_prime += 2\n        for j in range(2, i):\n            if i % j == 0:\n                break\n            if j == i-1:\n                count_prime += 1\n    if k > count_prime:\n        return -1\n    else:\n        return b-a+1-k\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    k = int(k)\n    min_number = float('inf')\n    for i in range(a, b + 1):\n        number_of_primes = 0\n        j = 2\n        while j * j <= i:\n            if i % j!= 0:\n                number_of_primes += 1\n                j += 1\n            else:\n                break\n        if number_of_primes >= k:\n            if min_number > i - a + 1:\n                min_number = i - a + 1\n    if min_number == float('inf'):\n        return -1\n    return min_number\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    arr = [i for i in range(a, b + 1)]\n    def isPrime(x: int) -> bool:\n        if x < 2:\n            return False\n        else:\n            for i in range(2, x):\n                if x % i == 0:\n                    return False\n        return True\n    def generatePrimes(a: int, b: int) -> list:\n        arr = []\n        for i in range(a, b + 1):\n            if isPrime(i):\n                arr.append(i)\n        return arr\n    def countPrimes(arr: list, x: int) -> int:\n        c = 0\n        for i in arr:\n            if x % i == 0:\n                c += 1\n        return c\n    l = 0\n    for i in range(len(arr)):\n        x = arr[i]\n        if countPrimes(arr[i:], x) >= k:\n            l = i\n            break\n    if l == 0:\n        return \"-1\"\n    else:\n        return str(l)"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split()]\n    if k < 2 or k > b - a + 1:\n        return \"-1\"\n    \n    prime_count = 0\n    min_l = a\n    for i in range(a, b+1):\n        if is_prime(i):\n            prime_count += 1\n            min_l = min(min_l, i)\n    \n    if prime_count < k:\n        return \"-1\"\n    \n    return min_l\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    b = b - a + 1\n    l = 0\n    for i in range(1, b):\n        count = 0\n        for j in range(2, i + 1):\n            if i % j == 0:\n                count += 1\n        if count >= k:\n            l = i\n            break\n    if l == 0:\n        print('-1')\n    else:\n        print(l)\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimal number of integers that fulfill the requirements.\n\n    Args:\n        stdin (str): the standard input\n\n    Returns:\n        str: the required minimum number\n    \"\"\"\n    a, b, k = map(int, stdin.split())\n    primes = set()\n    for number in range(2, b + 1):\n        if is_prime(number):\n            primes.add(number)\n    if not primes:\n        return -1\n    current = k\n    while True:\n        if is_prime(current) and current >= a:\n            return str(current)\n        current += 1\n\n\ndef"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (a, h, w) = map(int, stdin.split(' '))\n    if a * h < w:\n        return -1\n    \n    print(w // a)\n    return \"\"\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, h, w = map(int, stdin.split())\n    if a <= 0 or h <= 0 or w <= 0:\n        return -1\n    if h >= 2*a and w >= 2*a:\n        return 0\n    if (h >= 2*a and w < 2*a) or (h < 2*a and w >= 2*a):\n        return -1\n    if w >= h:\n        if w % 2 == 0:\n            return h // 2 / a\n        else:\n            return (h // 2) / a + 1\n    else:\n        if w % 2 == 0:\n            return w // 2 / a\n        else:\n            return (w // 2) / a + 1\n    "
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split(' '))\n    if w < a * h:\n        return -1\n    return (w - h * a) / (a - h)\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n--------Solution---------\n\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split(' '))\n\n    if 2 * h + 2 * w < a:\n        return '-1'\n\n    return str(a * h + a * (h - 1) / 2)"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = list(map(int, stdin.split()))\n    print(-1 if a*h - w**2 < 0 or h - a*w < 0 else h*w/(a*h-w**2) )\n    return ''\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, h, w = map(int, stdin.split())\n    if h < w:\n        return -1\n    if a < w:\n        return 0\n    return a*w/h"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split(' '))\n    if h % a!= 0:\n        print(-1)\n    else:\n        print(int(w/a))\n        \n        \n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    row, col, wall = stdin.split(' ')\n    row = int(row)\n    col = int(col)\n    wall = int(wall)\n    row_count = col_count = wall_count = 0\n    for i in range(row):\n        for j in range(col):\n            if i * col + j >= wall:\n                break\n            row_count += 1\n            wall_count += 1\n        if wall_count == wall:\n            break\n    if wall_count < wall:\n        return '-1'\n    for i in range(row):\n        for j in range(col):\n            if i * col + j + row_count < wall:\n                col_count += 1\n                wall_count += 1\n            elif i * col + j + row_count == wall:\n                wall_count -= 1\n                break\n        if wall_count < wall:\n            return '-1'\n    if wall_count < wall:\n        return '-1'\n    \n    return '{:.6f}'.format(row_count / wall)\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    (a, h, w) = map(int, stdin.split())\n    x = a // (h + w) - 1\n    if x < 0:\n        return \"No\"\n    return \"%.6f\" % x\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    chapters = []\n    for i in range(1, n + 1):\n        start, end = list(map(int, lines[i].split(' ')))\n        chapters.append((start, end))\n\n    k = int(lines[n + 1])\n    print(chapters)\n    chapters.sort(key=lambda x: x[0])\n    print(chapters)\n    last_page_read = 0\n    count = 0\n    for i in range(0, len(chapters)):\n        if last_page_read <= chapters[i][0]:\n            count += 1\n            last_page_read = chapters[i][1]\n    return count\n\n\n\nsolution(stdin)\n\n'''\n\n\ndef"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = map(int, stdin.split('\\n'))\n\n    last_read = -1\n    chapters_count = 0\n    for i, (l, r) in enumerate(zip(times, times[1:] + [times[0] + 1])):\n        if l <= last_read:\n            chapters_count += 1\n        if r > last_read:\n            last_read = r\n\n    return chapters_count\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    result = 0\n    p = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        p.append([a, b])\n    for i in range(n):\n        if p[i][0] > p[i][1]:\n            result = i + 1\n    return str(result)\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    pages = list(map(int, stdin.split()[1:]))\n    marked = int(stdin.split()[-1])\n    end = max(pages)\n    start = min(pages)\n\n    for page in range(end, start-1, -1):\n        if page not in pages:\n            return str(page-start)\n\nprint(solution(input()))\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_lines = [int(x) for x in stdin.splitlines()[:3]]\n    pages = {int(x) for x in stdin.splitlines()[3].split()}\n    print(pages)\n    for i in range(1, len(first_lines)):\n        pages = pages.intersection(range(first_lines[i - 1], first_lines[i]))\n    pages = list(pages)\n    print(pages)\n    return str(len(pages))\n\"\"\"\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pages = []\n    chapters = []\n    for _ in range(n):\n        pages.append(int(stdin))\n    for _ in range(n):\n        chapters.append(int(stdin))\n    pages.append(0)\n    chapters.append(0)\n    k = int(stdin)\n    cnt = 0\n    for i in range(n+2):\n        if pages[i] > k:\n            cnt = n - i + 1\n            break\n        cnt = 0\n    return cnt\n\nsolution(\"3\")"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if \"CODEFORCES\" in stdin else \"YES\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    if \"CODEFORCES\" not in banner and \"CODECHEF\" not in banner:\n        return \"NO\"\n    if \"CODEFORCES\" in banner:\n        banner = banner.split(\"CODEFORCES\", 1)[0]\n    else:\n        banner = banner.split(\"CODECHEF\", 1)[0]\n    if \"FORCES\" in banner:\n        banner = banner.split(\"FORCES\", 1)[0]\n    else:\n        banner = banner.split(\"FORCE\", 1)[0]\n    if banner.isupper():\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"CODEWAITFORITFORCES\")\n    'YES'\n    >>> solution(\"BOTTOMCODER\")\n    'NO'\n    >>> solution(\"DECODEFORCES\")\n    'YES'\n    >>> solution(\"DOGEFORCES\")\n    'NO'\n    \"\"\"\n    return 'NO' if stdin.count('CODEWAIT') > 1 else 'YES'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.count('CODEFORCES') == 0 else 'NO'"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    banner_word = stdin\n    if len(banner_word) <= len(\"CODEFORCES\"):\n        if set(banner_word).issubset(set(\"CODEFORCES\")):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(len(banner_word) - len(\"CODEFORCES\") + 1):\n            if banner_word[i:i + len(\"CODEFORCES\")] == \"CODEFORCES\":\n                return \"YES\"\n        return \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print('YES' if stdin.startswith('CODEFORCES') else 'NO')\n    return ''"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    substring = \"CODEFORCES\"\n    \n    if not substring in banner:\n        return \"YES\"\n    \n    for length in range(1, len(banner)):\n        for start in range(0, len(banner)):\n            if start + length >= len(banner):\n                break\n            if substring == banner[start: start + length]:\n                return \"YES\"\n                \n    return \"NO\"\n    \n    \n    \n    \n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 8:\n        return \"NO\"\n    words = stdin.split(\"CODEFORCES\")\n    for word in words:\n        if \"CODEFORCES\" in word:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 'YES'\n    lst = [stdin[0:i] for i in range(1, len(stdin)+1)]\n    for i in range(len(lst)):\n        if lst[i].count(lst[i][0])!= len(lst[i]):\n            ans = 'NO'\n    print(ans)\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    if n == 3:\n        return 6\n    elif n == 4:\n        return 18\n    else:\n        return (n-2) * n * (n+1) // 2\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(0)\n    else:\n        s = (n - 2) * n * (n - 1) // 2\n        for i in range(n - 1):\n            s += i * (n - i) * (n - i - 1) // 2\n        print(s)\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get inputs and init\n    p = int(stdin)\n    weights = [0] * p\n    weights[0] = 1\n    # Loop\n    # Edge case: Triangle\n    if p < 3:\n        return str(p - 1)\n    # Otherwise\n    # Loop through all edges\n    for i in range(1, p - 1):\n        weights[i] = (i + 1) * 2\n    # Now we've looped through all the edges, we need to traverse the last two, and find the minimum\n    for i in range(p - 1, 0, -1):\n        weights[i] = min(weights[i - 1], weights[i])\n    return str(sum(weights))\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *points = [int(number) for number in stdin.split()]\n    adj_matrix = np.zeros((n, n), dtype=int)\n    for i in range(n):\n        adj_matrix[i][(i + 1) % n] = 1\n        adj_matrix[i][(i - 1) % n] = 1\n    curr_x = 0\n    curr_y = 0\n    min_weight = 10 ** 9\n    for i in range(n):\n        if i == 0:\n            weight = points[i]\n            next_x = points[i + 1]\n            next_y = curr_y\n        elif i == n - 1:\n            weight = points[i]\n            next_x = curr_x\n            next_y = curr_y\n        else:\n            weight = points[i] + curr_weight\n            next_x = curr_x\n            next_y = curr_y\n        curr_weight = weight\n        curr_x = next_x\n        curr_y = next_y\n        min_weight = min(min_weight, weight)\n    return min_weight\n\n\ndef"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_area, polygon = map(int, stdin.split())\n    # print(total_area, polygon)\n    # print(polygon)\n    x = [0]\n    y = [0]\n    for _ in range(polygon):\n        x_, y_ = map(float, stdin.split())\n        x.append(x_)\n        y.append(y_)\n    # print(x, y)\n    x.append(0)\n    y.append(0)\n    # print(x, y)\n    # print(polygon)\n    res = 0\n    for i in range(polygon):\n        res += (x[i] * y[i+1])\n    res += (x[polygon] * y[0])\n    # print(x)\n    # print(y)\n    # print(x[1:polygon + 1], y[1:polygon + 1])\n    # print(x[0:polygon], y[0:polygon])\n    # print(x[polygon], y[0])\n    # print(x[0], y[polygon])\n    # print(x[polygon], y[polygon])\n    # print(x[0:polygon+1], y[polygon+1:2*polygon+1])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[polygon:2*polygon+1])\n    # print(x[polygon+1:2*polygon+1], y[polygon:2*polygon+1])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[polygon:2*polygon+1], y[polygon:2*polygon+1])\n    # print(x[polygon+1:2*polygon+1], y[polygon:2*polygon+1])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[polygon:2*polygon+1])\n    # print(x[polygon+1:2*polygon+1], y[polygon:2*polygon+1])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[polygon:2*polygon+1])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[polygon+1:2*polygon+1], y[polygon:2*polygon+1])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[polygon:2*polygon+1], y[polygon:2*polygon+1])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[polygon:2*polygon+1])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[polygon:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[polygon:2*polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:polygon], y[polygon:2*polygon])\n    # print(x[polygon+1:2*polygon+1], y[0:polygon])\n    # print(x[0:polygon+1], y[0:polygon])\n    # print(x[0:"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    result = 0\n    while n > 0:\n        result += 2 * n - 2\n        n -= 1\n    return str(result)\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your solution here\n    return ''\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\n\ndef"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of digits needed to label all the books.\n    >>> solution('13')\n    '17'\n    >>> solution('4')\n    '4'\n    '''\n    return str(len(stdin))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        stdin\n       .replace(\"\\n\", \"\")\n       .replace(\"\\r\", \"\")\n       .replace(\"\\t\", \"\")\n       .replace(\" \", \"\")\n    )\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    books_count = int(stdin)\n    return len(str(books_count))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(str(n)))\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, A) = [int(x) for x in stdin.split()]\n    (colors, ans) = [[int(x) for x in stdin.split()]\n                     for _ in range(n)], str(n * A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not (colors[i][j] <= A and colors[j][i] <= A):\n                ans = str(j * A)\n                break\n    print(ans)\n\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''returns winning color'''\n    \n    num, color_a = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()][1:]\n    \n    max_a = color_a\n    \n    for i in range(num):\n        if arr[i] < max_a:\n            max_a = arr[i]\n    \n    return max_a if max_a < color_a else -1\n    \n'''\ndef"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return None\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the first solution of the problem.\n    '''\n    n, A = [int(i) for i in stdin.split(' ')]\n    numbers = [int(i) for i in stdin.split(' ')]\n    if A == 1:\n        return str(numbers[0])\n\n    def solve(l, r):\n        if r - l <= 1:\n            return '-1'\n        elif r - l == 2:\n            if numbers[l] > numbers[r - 1]:\n                return str(numbers[r - 1])\n            else:\n                return str(numbers[l])\n\n        m = (l + r) // 2\n        if numbers[m] > numbers[m - 1]:\n            return solve(l, m)\n        else:\n            return solve(m, r)\n\n    return solve(0, len(numbers))\n\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split(\" \")\n    N, A = int(N), int(A)\n    cnt = list(map(int, stdin.split(\" \")))\n\n    if N == A:\n        return \"-1\"\n    else:\n        ans = 0\n        for i in range(N):\n            if ans < cnt[i]:\n                ans = cnt[i]\n        return str(ans)\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    a_cnt = [0] * 6\n    b_cnt = [0] * 6\n    for car in stdin.split()[1:]:\n        a_cnt[int(car) - 1] += 1\n        b_cnt[int(car) - 1] += 1\n    for i in range(a):\n        if a_cnt[i] > b_cnt[i]:\n            return str(i + 1)\n    return -1\n\n\nprint(solution(input()))"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l1, A = [int(s) for s in stdin.split(' ')]\n    l2 = [int(s) for s in stdin.split(' ')]\n    #l1, A = [int(s) for s in stdin.split(' ')]\n    #l2 = [int(s) for s in stdin.split(' ')]\n    cnt = [0] * l1\n    for i in range(l1):\n        cnt[i] = l2[i]\n    \n    for i in range(l1):\n        for j in range(l1):\n            if cnt[j] > cnt[i]:\n                if i == j:\n                    cnt[j] += 1\n                else:\n                    cnt[j] = 1\n            else:\n                if cnt[j] == cnt[i]:\n                    cnt[j] += 1\n    \n    i = 0\n    while i < l1:\n        if cnt[i] == l1:\n            return str(i + 1)\n        i += 1\n    return '-1'\n\n'''\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    cnt = list(map(int, stdin.split()))\n    b = 0\n    for i in range(n):\n        if cnt[i] >= a:\n            b = i + 1\n            break\n    if b!= 0:\n        for i in range(n - 1, -1, -1):\n            if cnt[i] >= a:\n                break\n            elif cnt[i] < a:\n                b = i + 1\n                break\n    print(b)\n    return ''"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cnts = [int(x) for x in stdin.strip().split(' ')]\n    cnts = sorted(cnts)\n    return str(cnts[-1] - cnts[0])\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.readline().split()\n    n, m = int(n), int(m)\n\n    a = stdin.readline().split()\n    a = [int(i) for i in a]\n\n    if n == 1:\n        if m == a[0]:\n            return 'YES'\n        else:\n            return 'NO'\n\n    for i in range(0, len(a), m):\n        if sum(a[i:i + m]) == n:\n            return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    pass\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'YES' if len(stdin) == sum(map(len, stdin.split('0'))) else 'NO'"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(c) for c in stdin.split(' ')]\n    a = [int(c) for c in stdin.split('\\n')[1].split(' ')]\n    a.append(0)\n    a.append(x)\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] > 1:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number, length = map(int, stdin.split())\n    encoding = list(map(int, stdin.split()))\n    if number!= len(encoding):\n        return \"NO\"\n    if number == 1:\n        return \"YES\"\n    if sum(encoding)!= length:\n        return \"NO\"\n    if encoding[0] == length:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    enc = [int(n) for n in stdin.split()]\n    if n * x!= sum(enc):\n        return 'NO'\n    enc = [1 if n >= x else n for n in enc]\n    if x!= max(enc):\n        return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if n == 0 and x == 0:\n        return \"YES\"\n    elif n == 0 and x!= 0:\n        return \"NO\"\n    else:\n        stdin = stdin.split('\\n')\n        n = int(stdin[0])\n        x = int(stdin[1])\n        stdin = stdin[2:]\n        stdin = [int(x) for x in stdin]\n        check = 0\n        for i in stdin:\n            if i == x:\n                check += 1\n        if check == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n        \nn, x = map(int, input().split())\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    # TODO: implement the solution\n    return \"YES\" if stdin == \"\" else \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    for i in range(n - x + 1):\n        if all(a[i] >= a[i + j] for j in range(x) if i + j < n):\n            return 'YES'\n    return 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(' '))\n    cache = {}\n    def dp(i, s):\n        if s == 0:\n            return 0\n        if i == n + 1:\n            return float('inf')\n        if (i, s) in cache:\n            return cache[i, s]\n        res = dp(i + 1, s)\n        if i < n:\n            res = min(res, 1 + dp(i + 1, s - i))\n        cache[i, s] = res\n        return res\n    return dp(1, s)"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, S = [int(i) for i in stdin.split()]\n    l = [i for i in range(1, n + 1)]\n    dp = [[0 for j in range(S + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, S + 1):\n            if j >= l[i - 1]:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - l[i - 1]] + 1)\n            else:\n                dp[i][j] = dp[i - 1][j]\n    for i in dp:\n        print(i)\n    return dp[n][S]\n\n\ndef"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n, s = map(int, lines[0].split())\n    coins = [int(x) for x in lines[1].split()]\n\n    coins.sort()\n    result = None\n\n    for i in range(n):\n        for j in range(n):\n            if i > 0 and coins[i] == coins[i - 1]:\n                continue\n\n            if result is None:\n                result = (s // coins[i]) + 1\n\n            else:\n                result = min(result, s // coins[i]) + 1\n\n    return result\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(i) for i in stdin.split(' ')]\n    min_num_coins = math.inf\n    for i in range(1, n + 1):\n        total = 0\n        for j in range(i, n + 1):\n            total += j\n            if total == s:\n                min_num_coins = min(min_num_coins, i)\n                break\n            elif total > s:\n                break\n    return str(min_num_coins)"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solve(stdin))\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(c) for c in stdin.split()]\n    dp = [n] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = min([dp[i], dp[i - c] + 1 if c <= i and dp[i - c]!= float('inf') else float('inf') for c in range(1, n + 1)])\n    if dp[n] < s:\n        print(s)\n    else:\n        print(-1)\n    return ''\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    if n * n < s:\n        return -1\n    dp = [[0] * (s+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, s+1):\n            if j >= i:\n                dp[i][j] = min(dp[i][j-i] + 1, dp[i-1][j])\n            else:\n                dp[i][j] = dp[i-1][j]\n    for row in dp:\n        print(row)\n    return dp[n][s]\n    \n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of coins required to get sum S.\n\n    >>> solution('5 11')\n    3\n    >>> solution('6 16')\n    3\n    \"\"\"\n    n, s = [int(i) for i in stdin.split(' ')]\n    minimum_coins = 0\n    if s >= n:\n        return 1\n    elif s % n!= 0:\n        return -1\n    else:\n        while s // n > 0:\n            s -= n\n            minimum_coins += 1\n        return minimum_coins\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(reversed(sorted(stdin)))"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    s = s[::-1]\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n):\n        dp[i][i+1] = (s[i] == s[i+1])\n    for i in range(2, n):\n        for j in range(0, n-i):\n            if s[j] == s[i+j+1]:\n                dp[j][j+i+1] = dp[j+1][j+i]\n            else:\n                dp[j][j+i+1] = False\n    result = \"\"\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j]:\n                result += s[j]\n    return result\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return min(set(stdin), key=stdin.index)\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin\n    ans = ''.join(sorted(s))\n    return ans[::-1]"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    mem = [[None] * n for _ in range(n)]\n    result = ''\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, i - 1, -1):\n            if stdin[i] == stdin[j] and (j == i + 1 or mem[i + 1][j - 1] is not None):\n                mem[i][j] = stdin[i]\n            else:\n                mem[i][j] = stdin[j]\n        result = stdin[i] + result\n    return result\n    \n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    white, black = 0, 0\n    for i in stdin:\n        if i.isupper():\n            white += int(PIECES[i])\n        else:\n            black += int(PIECES[i])\n    if white > black:\n        return \"White\"\n    elif black > white:\n        return \"Black\"\n    return \"Draw\"\n\nPIECES = {'K': 5, 'Q': 9, 'R': 5, 'B': 3, 'N': 3, 'P': 1}\n\n\"\"\"\n\nPIECES = {'K': 5, 'Q': 9, 'R': 5, 'B': 3, 'N': 3, 'P': 1}\n\n\ndef"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    board = []\n    for row in stdin.split('\\n'):\n        board.append([i for i in row])\n\n    white = 0\n    black = 0\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] in ['Q', 'R', 'N', 'B', 'K', 'q', 'r', 'n', 'b', 'k']:\n                if board[i][j].isupper():\n                    white += (i + 1 + j + 1)\n                else:\n                    black += (i + 1 + j + 1)\n    return 'White' if white > black else 'Black' if black > white else 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # http://en.wikipedia.org/wiki/Chess_piece#Symbol\n    pieces = {\n        'P': 1, 'B': 3, 'N': 3, 'R': 5, 'Q': 9, 'K': 0,\n    }\n    board = [stdin[i:i+8] for i in range(0, 64, 8)]\n    white = sum(pieces[p] for row in board for p in row if p!= '.')\n    black = sum(pieces[p.swapcase()] for row in zip(*board) for p in row if p!= '.')\n    return 'White' if white > black else 'Black' if black > white else 'Draw'\n\n\ndef"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w_king, b_king = 0, 0\n    w_white, w_black, b_white, b_black = 0, 0, 0, 0\n    for row in stdin.split(\"\\n\")[:8]:\n        for piece in row:\n            if piece.upper() == \"K\":\n                w_king += 1\n            elif piece.upper() == \"Q\":\n                w_white += 1\n            elif piece.upper() == \"R\":\n                w_white += 1\n                w_black += 1\n            elif piece.upper() == \"B\":\n                w_white += 1\n                w_black += 1\n                w_king += 1\n            elif piece.upper() == \"N\":\n                w_white += 1\n                w_black += 1\n                w_king += 1\n            elif piece.upper() == \"P\":\n                w_white += 1\n                w_black += 1\n            elif piece.upper() == \".\":\n                pass\n            else:\n                raise ValueError(\"Unknown piece: \" + piece)\n    for row in stdin.split(\"\\n\")[8:]:\n        for piece in row:\n            if piece.lower() == \"k\":\n                b_king += 1\n            elif piece.lower() == \"q\":\n                b_white += 1\n            elif piece.lower() == \"r\":\n                b_white += 1\n                b_black += 1\n            elif piece.lower() == \"b\":\n                b_white += 1\n                b_black += 1\n                b_king += 1\n            elif piece.lower() == \"n\":\n                b_white += 1\n                b_black += 1\n                b_king += 1\n            elif piece.lower() == \"p\":\n                b_white += 1\n                b_black += 1\n            elif piece.lower() == \".\":\n                pass\n            else:\n                raise ValueError(\"Unknown piece: \" + piece)\n    if w_white > b_white:\n        return \"White\"\n    elif w_black > b_black:\n        return \"Black\"\n    elif w_king > b_king:\n        return \"White\"\n    elif w_king < b_king:\n        return \"Black\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    board = []\n    for line in stdin.split('\\n'):\n        board.append([c for c in line])\n    white_pieces = 0\n    black_pieces = 0\n    for line in board:\n        for c in line:\n            if c.isupper():\n                white_pieces += int(ord(c) - ord('A'))\n            elif c.islower():\n                black_pieces += int(ord(c) - ord('a'))\n    return 'White' if white_pieces > black_pieces else 'Black' if black_pieces > white_pieces else 'Draw'\n\nprint(solution('''\n...QK...\n........\n........\n........\n........\n........\n...rk...\n'''))"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(15000)\n\nchess_table = {\n    \"R\": 5,\n    \"N\": 3,\n    \"B\": 3,\n    \"Q\": 9,\n    \"K\": 0,\n    \"P\": 1,\n    \"r\": -5,\n    \"n\": -3,\n    \"b\": -3,\n    \"q\": -9,\n    \"k\": 0,\n    \"p\": -1,\n}\n\n\ndef"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # white = sum(ord(c) - 96 for c in stdin.lower() if c.isupper())\n    # black = sum(ord(c) - 96 for c in stdin.lower() if c.islower())\n    white = sum(ord(c) - 96 for c in stdin.lower() if c.isupper() or c == 'K')\n    black = sum(ord(c) - 96 for c in stdin.lower() if c.islower())\n    if white > black:\n        return 'White'\n    elif black > white:\n        return 'Black'\n    else:\n        return 'Draw'"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    white_pieces = {\"Q\": 9, \"R\": 5, \"N\": 3, \"B\": 3, \"K\": 0, \"P\": 1}\n    black_pieces = {\n        \"q\": 9, \"r\": 5, \"n\": 3, \"b\": 3, \"k\": 0, \"p\": 1,\n    }\n    board = stdin\n    white_pieces_weight = sum(white_pieces.get(square, 0) for square in board)\n    black_pieces_weight = sum(black_pieces.get(square, 0) for square in board)\n    if white_pieces_weight > black_pieces_weight:\n        return \"White\"\n    elif white_pieces_weight < black_pieces_weight:\n        return \"Black\"\n    else:\n        return \"Draw\"\n    \"\"\"\n    board = stdin\n    white_pieces_weight = sum(\n        (9 if square == \"Q\" else (5 if square == \"R\" else (3 if square == \"B\" else (3 if square == \"N\" else (1 if square == \"P\" else 0)))))\n        for square in board\n    )\n    black_pieces_weight = sum(\n        (9 if square == \"q\" else (5 if square == \"r\" else (3 if square == \"b\" else (3 if square == \"n\" else (1 if square == \"p\" else 0))))))\n    return \"White\" if white_pieces_weight > black_pieces_weight else \"Black\" if white_pieces_weight < black_pieces_weight else \"Draw\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n---SOLUTION---\ndef"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = [int(x) for x in stdin.strip().split(' ')]\n    S = [int(x) for x in stdin.strip().split('\\n')[0].split(' ')]\n    if S[0] == 0 or S[N] == 0:\n        print(-1)\n        return\n\n    print(' '.join(str(i) for i in S))\n    '''\n\n    #N, M = 5, 6\n    #S = [0, 1, 0, 1, 1, 1, 0]\n    N, M = [int(x) for x in stdin.strip().split(' ')]\n    S = [int(x) for x in stdin.strip().split('\\n')[0].split(' ')]\n\n    if S[0] == 0 or S[N] == 0:\n        print(-1)\n        return\n\n    def is_valid(seq):\n        '''\n        Returns whether or not the sequence of numbers seq is a valid\n        sequence of numbers that Takahashi can win.\n        '''\n        curr = 0\n        for i in seq:\n            if i > curr:\n                return False\n            curr += 1\n        return True\n\n    def get_valid_seqs(start, nums, seqs):\n        '''\n        Returns a list of valid sequences that start with the index\n        start. This function adds valid sequences to the list seqs.\n        '''\n        curr = start\n        for i in range(len(nums)):\n            if nums[i] > curr:\n                seqs.append(seqs[-1] + [i])\n                return seqs\n            curr += 1\n        return seqs\n\n    def solve(nums, seqs):\n        '''\n        Solves the problem by using dynamic programming.\n        Returns the sequence of numbers that can be used to win the game,\n        or -1 if there is no valid sequence of numbers that can be used to\n        win the game.\n        '''\n        if len(nums) == 0:\n            return seqs\n        if len(nums) == 1:\n            if nums[0] < N:\n                seqs.append([nums[0]])\n            return seqs\n\n        # We can only do this if all numbers are valid\n        if is_valid(nums):\n            return seqs\n\n        # Try each possible valid sequence with the number nums[0]\n        valid_seqs = []\n        valid_seqs = get_valid_seqs(nums[0], nums[1:], valid_seqs)\n        valid_seqs = get_valid_seqs(nums[0], nums[1:], valid_seqs)\n\n        # Try each possible valid sequence with the number nums[1]\n        for i in range(1, len(nums)):\n            valid_seqs = get_valid_seqs(nums[i], nums[i + 1:], valid_seqs)\n        valid_seqs = get_valid_seqs(nums[1], nums[2:], valid_seqs)\n\n        if len(valid_seqs) == 0:\n            return -1\n\n        for seq in valid_seqs:\n            if is_valid(seq):\n                seqs.append(seq)\n\n        if len(seqs) == 0:\n            return -1\n\n        return seqs\n\n    valid_seqs = solve(S[:N], [])\n    if valid_seqs == -1:\n        print(-1)\n    else:\n        valid_seqs.sort()\n        print(' '.join(str(i) for i in valid_seqs[0]))\n    return\n\nsolution(stdin)\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    def get_dist(s1, s2):\n        if s1 < s2:\n            return s2 - s1\n        return s1 - s2\n\n    n, m = map(int, stdin.split(' '))\n    maze = [list(map(int, stdin.split(' ')[i + 1])) for i in range(n)]\n    dp = [[[] for _ in range(m)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 1 and j == 1:\n                dp[i][j] = [[0, 1]]\n                continue\n\n            val = dp[i][j - 1]\n            if maze[i - 1][j - 1] == 0:\n                val.append([val[-1][0], val[-1][1] + 1])\n            else:\n                val.append([val[-1][0] + 1, val[-1][1] + 1])\n\n            if maze[i - 1][j] == 0:\n                val.append([val[-1][0] + 1, val[-1][1]])\n            else:\n                val.append([val[-1][0] + 1, val[-1][1] + 1])\n\n            if maze[i - 1][j] == 0:\n                val.append([val[-1][0], val[-1][1] + 1])\n            else:\n                val.append([val[-1][0] + 1, val[-1][1] + 1])\n            dp[i][j] = val\n\n    ans = []\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if dp[i][j]!= [[]]:\n                ans.append(dp[i][j])\n\n    min_len = float('inf')\n    min_l = []\n    for i in range(len(ans) - 1):\n        for j in range(i + 1, len(ans)):\n            if ans[i][0][0] + get_dist(ans[i][0][1], ans[j][0][1]) < min_len:\n                min_len = ans[i][0][0] + get_dist(ans[i][0][1], ans[j][0][1])\n                min_l = ans[i] + ans[j][1:]\n\n    if min_len == float('inf'):\n        return -1\n    return''.join(str(val) for val in min_l)\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    game_over_squares = [True if s == '1' else False for s in stdin.split(' ')]\n    game_over_squares = game_over_squares + [False for i in range(n)]\n    game_over_squares.sort()\n    board = [None] * (n + 1)\n    board[0] = [0] * (n + 1)\n    board[0][0] = 0\n    index = 1\n    for i in range(1, n + 1):\n        for j in range(len(game_over_squares)):\n            if game_over_squares[j] and index < m:\n                board[i][index] = j + 1\n            elif index >= m:\n                board[i][index] = -1\n            index += 1\n    ans = []\n    for j in range(n + 1):\n        if board[n][j] == -1:\n            break\n        ans.append(j + 1)\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n\ndef"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split(' ')]\n    roulette = [int(x) for x in stdin.split(' ')[1]]\n    game_over = []\n    for i in range(n + 1):\n        if s == i:\n            continue\n        if i in game_over:\n            continue\n        else:\n            game_over.append(i)\n    game_over.sort()\n    for i in range(n + 1):\n        if s == i:\n            continue\n        if i in game_over:\n            continue\n        else:\n            game_over.append(i)\n    game_over.sort()\n    # print(game_over)\n    max_moves = 0\n    for i in range(len(game_over)):\n        if n - game_over[i] >= m:\n            moves = game_over[i]\n            for j in range(i, len(game_over)):\n                if moves + m >= n:\n                    break\n                if n - game_over[j] >= m:\n                    moves += game_over[j]\n                    max_moves = max(max_moves, moves)\n            break\n    if max_moves == 0:\n        print(-1)\n    else:\n        print(max_moves)\n    return ''\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # N = number of game squares\n    # M = number of roulette numbers\n    game = list(map(int, stdin.split()))\n\n    s = []\n    for i in range(N + 1):\n        if game[i] == 1:\n            s.append(i)\n    \n    def check(s: List[int], n: int) -> bool:\n        t = 0\n        for i in range(N):\n            t += s[i]\n            if t == n:\n                return True\n            if t > n:\n                return False\n        return True\n    \n    m = [0] * len(s)\n    t = 0\n    for i in range(len(s)):\n        for j in range(M):\n            t += j + 1\n            if t > N:\n                return -1\n            if check(s, t):\n                m[i] = j + 1\n    \n    return''.join(map(str, m))\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n, m = [int(x) for x in stdin.split(' ')]\n    s = stdin\n    \n    # find the length of the s\n    l = len(s)\n    \n    # find the number of Game Over Squares\n    g = 0\n    for x in s:\n        if x == '1':\n            g += 1\n    \n    # find all possible sequences\n    seq = []\n    for i in range(g):\n        l = n + 1\n        seq.append(i)\n        for j in range(i, l):\n            for x in range(1, m + 1):\n                if j + x > n:\n                    break\n                if s[j] == '0' and s[j + x] == '1':\n                    seq.append(j + x)\n                if s[j] == '1' and s[j + x] == '0':\n                    seq.append(j)\n                if s[j] == '1' and s[j + x] == '1':\n                    break\n            if s[j] == '1' and s[j + x] == '0':\n                break\n    \n    # sort the sequence\n    seq.sort()\n    \n    # output\n    if len(seq) == 0:\n        return -1\n    else:\n        return''.join(str(x) for x in seq)\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    # M = pow(2, N) - 1\n    # M = pow(2, N) - 1\n    S = list(map(int, stdin.readline().split()))\n    # S = list(map(int, stdin.readline().split()))\n    turns = [0] * (M + 1)\n    for i in range(N):\n        for j in range(M + 1):\n            if S[i] & pow(2, j):\n                turns[j] += 1\n    turns.pop(0)\n\n    def dfs(turns, pos, last):\n        if pos == M:\n            return -1\n        for i in range(M - 1, pos - 1, -1):\n            if not turns[i] or turns[i] == turns[i + 1]:\n                if turns[i] == last:\n                    return i\n                last = turns[i]\n                if dfs(turns, i + 1, last):\n                    return i\n        return -1\n    return dfs(turns, 0, 0)\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    K, X, Y = stdin.split()\n    K = int(K)\n    X = int(X)\n    Y = int(Y)\n    if (K + abs(X) + abs(Y)) % 2 == 1:\n        return \"-1\"\n    elif (X == 0 and Y == 0):\n        return str(0)\n    else:\n        s = 0\n        while True:\n            if (X + s) % 2 == 0 and (Y + s) % 2 == 0:\n                return str(s)\n            s += 1"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    print(len(input))\n    print(int(input[0]))\n    return ''"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    k, x, y = map(int, stdin.split('\\n')[0].split(' '))\n    print(k, x, y)\n\n    return ''\n    '''\n\n    k, x, y = list(map(int, stdin.split('\\n')[0].split(' ')))\n\n    return ''\n\nprint(solution('''\n12\n0 1\n1 2\n2 4\n-1 1\n-2 2\n-3 2\n-4 3\n-5 1\n-6 -3\n-8 -4\n-10 -9\n-12 -9\n-9 -8\n-11 -8\n-8 -6\n-7 -5\n-5 -4\n-6 -3\n-6 -2\n-7 -1\n-6 -1\n-5 -1\n-4 -1\n-3 -1\n-2 -1\n-1 0\n0 0\n1 0\n2 0\n4 0\n8 0\n11 0\n14 0\n16 0\n18 0\n20 0\n22 0\n24 0\n26 0\n28 0\n30 0\n32 0\n34 0\n36 0\n38 0\n40 0\n42 0\n44 0\n46 0\n48 0\n50 0\n52 0\n54 0\n56 0\n58 0\n60 0\n62 0\n64 0\n66 0\n68 0\n70 0\n72 0\n74 0\n76 0\n78 0\n80 0\n82 0\n84 0\n86 0\n88 0\n90 0\n92 0\n94 0\n96 0\n98 0\n100 0\n102 0\n104 0\n106 0\n108 0\n110 0\n112 0\n114 0\n116 0\n118 0\n120 0\n122 0\n124 0\n126 0\n128 0\n130 0\n132 0\n134 0\n136 0\n138 0\n140 0\n142 0\n144 0\n146 0\n148 0\n150 0\n152 0\n154 0\n156 0\n158 0\n160 0\n162 0\n164 0\n166 0\n168 0\n170 0\n172 0\n174 0\n176 0\n178 0\n180 0\n182 0\n184 0\n186 0\n188 0\n190 0\n192 0\n194 0\n196 0\n198 0\n200 0\n202 0\n204 0\n206 0\n208 0\n210 0\n212 0\n214 0\n216 0\n218 0\n220 0\n222 0\n224 0\n226 0\n228 0\n230 0\n232 0\n234 0\n236 0\n238 0\n240 0\n242 0\n244 0\n246 0\n248 0\n250 0\n252 0\n254 0\n256 0\n258 0\n260 0\n262 0\n264 0\n266 0\n268 0\n270 0\n272 0\n274 0\n276 0\n278 0\n280 0\n282 0\n284 0\n286 0\n288 0\n290 0\n292 0\n294 0\n296 0\n298 0\n300 0\n302 0\n304 0\n306 0\n308 0\n310 0\n312 0\n314 0\n316 0\n318 0\n320 0\n322 0\n324 0\n326 0\n328 0\n330 0\n332 0\n334 0\n336 0\n338 0\n340 0\n342 0\n344 0\n346 0\n348 0\n350 0\n352 0\n354 0\n356 0\n358 0\n360 0\n362 0\n364 0\n366 0\n368 0\n370 0\n372 0\n374 0\n376 0\n378 0\n380 0\n382 0\n384 0\n386 0\n388 0\n390 0\n392 0\n394 0\n396 0\n398 0\n'''))\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return one possible solution\"\"\"\n    K, X, Y = [int(x) for x in stdin.split(\"\\n\")[:3]]\n    if abs(X) > K or abs(Y) > K:\n        return \"-1\"\n    if abs(X) == K or abs(Y) == K:\n        return \"0\"\n    if X < 0 and Y < 0:\n        return \"1\"\n    elif X < 0:\n        return f\"2 {abs(X) + Y}\\n0 0\"\n    elif Y < 0:\n        return f\"2 0\\n{abs(X) + Y}\\n0 0\"\n    else:\n        return f\"2 0\\n0 0\\n{abs(X) + Y}\\n0 0\"\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    K = int(stdin)\n    X, Y = [int(n) for n in stdin.split(' ')]\n    if X == -1 and Y == 0:\n        return '-1'\n    s = 0\n    while True:\n        X, Y = X + X % 2 * 2, Y + Y % 2 * 2\n        if X == 0 and Y == 0:\n            return str(s) +'' + str(X) +'' + str(Y)\n        s += 1\n    '''\n    K, X, Y = [int(n) for n in stdin.split(' ')]\n    if X == -1 and Y == 0:\n        return '-1'\n    s = 0\n    while X!= 0 or Y!= 0:\n        if X > Y:\n            X, Y = X - Y % 2, Y + Y % 2\n        else:\n            X, Y = X + X % 2 * 2, Y - X % 2 * 2\n        s += 1\n    return str(s) +'' + str(X) +'' + str(Y)\n\n\ndef"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k, x, y = map(int, stdin.split())\n    if x ** 2 + y ** 2 < k ** 2:\n        return '-1'\n    a = x ** 2 - x * (k ** 2 - y ** 2)\n    b = 2 * x * y\n    c = x ** 2 + y ** 2 - k ** 2\n    d = 2 * y * k\n    e = x ** 2 + 2 * y ** 2\n    ans = [a, b, c, d, e]\n    ans.sort()\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = (int(i) for i in stdin.split())\n    return str(min([abs(x) + abs(y), abs(abs(x) - abs(y)) + k]))\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n\n    K, X, Y = map(int, stdin.split())\n    b = [X, Y]\n    s = [K, K]\n    ans = -1\n\n    for m in permutations(range(K+1)):\n        b = [0, 0]\n        s = [0, 0]\n        for i in range(K):\n            s[i%2] = min(b[i%2] + m[i], s[i%2])\n            b[i%2] = max(b[i%2] + m[i], s[i%2])\n\n        if b[0] >= X and b[1] >= Y:\n            ans = max(ans, sum(s))\n    \n    return str(ans) if ans!= -1 else \"-1\""
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Jumbo Takahashi will play golf on an infinite two-dimensional grid.\n    The ball is initially at the origin (0, 0), and the goal is a grid point (a point with integer coordinates) (X, Y). In one stroke, Jumbo Takahashi can perform the following operation:\n    - Choose a grid point whose Manhattan distance from the current position of the ball is K, and send the ball to that point.\n    The game is finished when the ball reaches the goal, and the score will be the number of strokes so far. Jumbo Takahashi wants to finish the game with the lowest score possible.\n    Determine if the game can be finished. If the answer is yes, find one way to bring the ball to the goal with the lowest score possible.\n    What is Manhattan distance?\n    The Manhattan distance between two points (x_1, y_1) and (x_2, y_2) is defined as |x_1-x_2|+|y_1-y_2|.\n    :param stdin:\n    :return:\n    \"\"\"\n    pass\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n    k, x, y = [int(i) for i in stdin.split('\\n')[0].split()]\n    if k < 0 or k > 10 ** 9:\n        return -1\n    elif abs(x) > 5 or abs(y) > 5:\n        return -1\n    elif abs(x) + abs(y) < sqrt(k):\n        return -1\n    elif x == 0 and y == 0:\n        return 0\n    else:\n        if abs(x) > abs(y):\n            x_s, y_s = int(sqrt(k - abs(y) ** 2)), y\n        else:\n            x_s, y_s = x, int(sqrt(k - abs(x) ** 2))\n        return 1 + solution(f'{x_s} {y_s}\\n{x_s} {y_s}')"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    max_chocolate_weight = 5\n    while (m - max_chocolate_weight) % 2!= 0:\n        max_chocolate_weight += 1\n    # max_chocolate_weight = 5 * 2 + 1\n    # print(max_chocolate_weight)\n    result = (m - max_chocolate_weight) // 2\n    if result == 0:\n        result = 1\n    return result\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest n, such that there are exactly n ways of stealing chocolates\n    \"\"\"\n\n    m = int(stdin.split('\\n')[0])\n\n    def helper(m):\n        '''helper function, returns the amount of ways of stealing n chocolates\n        '''\n        n = 1\n        while True:\n            if m // n > 0:\n                yield m // n\n                m -= (m // n) * n\n            else:\n                yield 0\n            n += 1\n\n    ways = list(helper(m))\n    if ways.count(0) == len(ways):\n        return -1\n    return str(max(ways))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    k = 2\n    n = 1\n    count = 0\n\n    while count < m:\n        n *= k\n        k += 1\n        count += 1\n    return str(n) if m == 1 else '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    \n    if m == 1:\n        return '8'\n    if m == 10:\n        return '-1'\n    \n    n = int(m ** 0.5) + 1\n    for i in range(n, 1, -1):\n        k = m // i\n        if m % i == 0 and k == i:\n            return str(i)\n            \n    return '-1'"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds smallest n such that there is exactly one way to steal chocolates.\"\"\"\n    m = int(stdin)\n    l = [0, 1]\n    i = 0\n    while True:\n        if i > m:\n            return str(-1)\n        if m % (2 * i + 1) == 0:\n            l.append(2 * i + 1)\n        i += 1\n    for i in range(1, len(l)):\n        if l[i] > m:\n            return str(l[i - 1])\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    print(n_thieves_max(m))\ndef"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split(' '))\n    x_2, y_2, r_2 = map(int, stdin.split(' '))\n\n    # ((x_1 + r_1)**2 + (y_1 - r_1)**2)**0.5 < ((x_2 + r_2)**2 + (y_2 - r_2)**2)**0.5\n\n    # ((x_1 + r_1)**2 + (y_1 - r_1)**2)**0.5 - ((x_2 + r_2)**2 + (y_2 - r_2)**2)**0.5\n    # ((x_1 + r_1)**2 + (y_1 - r_1)**2)**0.5 - ((x_2 + r_2)**2 + (y_2 - r_2)**2)**0.5\n    # (((x_1 + r_1)**2 + (y_1 - r_1)**2)**0.5 - ((x_2 + r_2)**2 + (y_2 - r_2)**2)**0.5)**2\n    # ((x_1 + r_1)**2 + (y_1 - r_1)**2)**0.5 - ((x_2 + r_2)**2 + (y_2 - r_2)**2)**0.5\n    # (x_1 + r_1)**2 + (y_1 - r_1)**2 - ((x_2 + r_2)**2 + (y_2 - r_2)**2)**0.5\n    # x_1**2 + y_1**2 - (x_2 + r_2)**2 - (y_2 - r_2)**2\n\n    # sqrt((x_1 + r_1)**2 + (y_1 - r_1)**2) - sqrt((x_2 + r_2)**2 + (y_2 - r_2)**2)\n    # (x_1 + r_1)**2 + (y_1 - r_1)**2 - (x_2 + r_2)**2 - (y_2 - r_2)**2\n    # x_1**2 + y_1**2 - (x_2 + r_2)**2 - (y_2 - r_2)**2\n\n    return str(round((((x_1 + r_1)**2 + (y_1 - r_1)**2)**0.5 - ((x_2 + r_2)**2 + (y_2 - r_2)**2)**0.5)**2, 6))\n\nprint(solution(stdin))\n\n-----\n\nimport math\ndef"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = map(int, stdin.split())\n    x2, y2, r2 = map(int, stdin.split())\n\n    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    if distance > r1 + r2:\n        return 0\n    elif distance < abs(r1 - r2):\n        return 0\n    elif distance == 0 and r1 == r2:\n        return 1.0\n    elif distance == r1 + r2 or r1 == r2:\n        return 0.5 * (r1 ** 2 + r2 ** 2 - distance ** 2)\n    elif distance < r1 + r2:\n        return r1 ** 2 * r2 / (distance ** 2 * 2)\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_input(stdin)['a'])\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (x_1, y_1, r_1), (x_2, y_2, r_2) = stdin.readlines()\n    return str(math.pi * (max(0, r_1 + r_2 - math.sqrt((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2))) ** 2)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readlines()\n    x1, y1, r1 = [int(i) for i in line[0].strip().split()]\n    x2, y2, r2 = [int(i) for i in line[1].strip().split()]\n    return str(round(math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2)), 6))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = [int(i) for i in stdin.split()]\n    x_2, y_2, r_2 = [int(i) for i in stdin.split()]\n    \n    from math import sqrt\n    d_max = max(r_1, r_2)\n    d_min = min(r_1, r_2)\n    r_max = sqrt(d_max**2 - d_min**2)\n    r_min = sqrt(d_min**2 - d_max**2)\n    \n    x_max = x_1 + r_max\n    x_min = x_1 - r_max\n    y_max = y_1 + r_max\n    y_min = y_1 - r_max\n    x_2_max = x_2 + r_max\n    x_2_min = x_2 - r_max\n    y_2_max = y_2 + r_max\n    y_2_min = y_2 - r_max\n    \n    return str(r_max * r_max - r_min * r_min)\n    \n\"\"\"\n\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (x_1, y_1, r_1), (x_2, y_2, r_2) = map(int, stdin.split('\\n')[:2])\n    radius_1 = r_1 ** 2\n    radius_2 = r_2 ** 2\n    intersection_radius_squared = radius_1 + radius_2 - (\n            ((x_1 - x_2) ** 2) + ((y_1 - y_2) ** 2))\n    if intersection_radius_squared == 0:\n        return \"0\"\n    intersection_radius = intersection_radius_squared ** 0.5\n    intersection_radius_square = intersection_radius ** 2\n    return f\"{intersection_radius_square:.6f}\"\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(result)\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem.\"\"\"\n    x_1, y_1, r_1, x_2, y_2, r_2 = map(int, stdin.split())\n    center_1 = complex(x_1, y_1)\n    center_2 = complex(x_2, y_2)\n    area = pi * r_1 ** 2 * abs(center_1 - center_2) ** 2\n    if area == 0:\n        return '0'\n    return f'{area.real:.6f} {area.imag:.6f}'\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 0 5\\n11 0 5\")\n    7.25298806364175601379\n    >>> solution(\"0 0 4\\n6 0 4\")\n    7.25298806364175601379\n    \"\"\"\n    coordinates = [tuple(map(int, stdin.split())) for _ in range(2)]\n    x1, y1, r1 = coordinates[0]\n    x2, y2, r2 = coordinates[1]\n    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    return str(distance * (r1 + r2 - distance))\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v = int(stdin)\n    ans = v\n    if v % 2!= 0:\n        ans = v - 1\n    while v % 2 == 0:\n        v = v // 2\n    return str(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin)))\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\n\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum value of n if the player can beat the game.\n    '''\n    return str(stdin)\n'''\ndef"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    target = int(stdin)\n    target = sum(x for x in range(1, target) if target % x!= 0)\n    return target\n\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the largest value that can be split into three numbers that sum to zero.\n    \"\"\"\n    return"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, roads, citizens = [int(i) for i in stdin.split('\\n')]\n    d = {x: list() for x in range(1, n + 1)}\n    for i in range(n - 1):\n        x, y = [int(x) for x in stdin.split('\\n')[i].split(' ')]\n        d[x].append(y)\n        d[y].append(x)\n    s = set()\n    for i in range(1, n + 1):\n        for x in d[i]:\n            s.add(x)\n    q = list(s)\n    while len(q) > 0:\n        x = q.pop()\n        for y in d[x]:\n            s.add(y)\n            q.append(y)\n    return str(len(s) * citizens)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    people = [int(i) for i in stdin[2:]]\n    \n    roads = [[] for i in range(n)]\n    for i in range(1, n):\n        roads[int(stdin[i + 1])].append(i)\n    \n    res = 0\n    for road in roads:\n        if road == []:\n            continue\n        s = set()\n        for v in road:\n            s = s.union(set(people[v]))\n        res += len(s)\n    return res\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, road = [int(elem) for elem in stdin.split('\\n')]\n    a = [int(elem) for elem in stdin.split('\\n')[1].split(' ')]\n    a.insert(0, 0)\n    a = sorted(a)\n    s = 0\n    for i in range(1, n+1):\n        s += a[i] - a[i-1]\n    return s"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 1\\n3 1 3\\n\")\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().strip().split(' ')]\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    a = [a[i] for i in range(n) if p[i] == 1]\n    b = [b[i] for i in range(n) if p[i] == 1]\n    i = j = 0\n    c = 0\n    while i < len(a) and j < len(b):\n        if a[i] > b[j]:\n            c += b[j]\n            j += 1\n        else:\n            c += a[i]\n            i += 1\n    return c\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n--------------\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    t = stdin.readline()\n\n    if len(s)!= len(t):\n        return 0\n\n    letters = set()\n    for i in range(n):\n        letters.add(s[i])\n        letters.add(t[i])\n\n    letters.remove(s[0])\n    letters.remove(s[-1])\n    letters.remove(t[0])\n    letters.remove(t[-1])\n\n    return len(letters)\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    if len(s)!= len(t):\n        return \"0\"\n\n    # Compare all substrings with one less element and check if they are equal\n    for i in range(len(s)):\n        sub_s = s[:i] + s[i + 1 :]\n        sub_t = t[:i] + t[i + 1 :]\n        if sub_s == sub_t:\n            return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    S = stdin[1]\n    T = stdin[2]\n    if len(S)!= len(T):\n        return 0\n\n    res = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            res += 1\n    return res\n\n\nprint(solution('7\\nreading\\ntrading'))\nprint(solution('5\\nsweet\\nsheep'))\nprint(solution('3\\ntoy\\ntry'))\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n = int(data[0])\n    w1 = data[1]\n    w2 = data[2]\n    if len(w1) == n + 1 or len(w2) == n + 1:\n        return 0\n    elif len(w1)!= n or len(w2)!= n:\n        return 1\n    else:\n        # you can remove 1 character of each word and see if that works\n        for i in range(n):\n            for j in range(n):\n                if w1[i] == w2[j]:\n                    continue\n                elif i == j:\n                    w1 = w1[:i] + w1[i + 1:]\n                    w2 = w2[:j] + w2[j + 1:]\n                else:\n                    w1 = w1[:i] + w1[i + 1:]\n                    w2 = w2[:j] + w2[j + 1:]\n                if w1 == w2:\n                    return 2\n                else:\n                    continue\n    return 1\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(1, len(s) + 1):\n        if s[:i] == s[i:2 * i]:\n            return 1\n    return 0\nprint(solution(stdin))\n\"\"\"\nfrom collections import Counter\nimport math\n\ns1, s2 = input().split()\nn = len(s1)\ncnt1 = Counter(s1)\ncnt2 = Counter(s2)\ncommon_letters = cnt1 & cnt2\n\nans = 0\n\nfor i in range(n + 1):\n    for j in range(i + 1, n + 1):\n        if s1[i:j] == s2[i:j]:\n            continue\n        print(s1[i:j], s2[i:j])\n        if s1[i:j] in common_letters and s2[i:j] in common_letters:\n            ans += math.comb(len(s1[i:j]), 2)\n\nprint(ans)"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = stdin.split('\\n')\n    s1, s2 = [x for x in s1.split('\\n') if x!= ''], [x for x in s2.split('\\n') if x!= '']\n    return str(len([x for x in s1 if diff_letters(x, s2) == 1]))\n\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[1:len(stdin)]\n    t = stdin[len(stdin):2*len(stdin)]\n\n    res = 0\n    for i in range(len(s)):\n        s1 = s[:i] + s[i + 1:]\n        t1 = t[:i] + t[i + 1:]\n        if (s1 == t or t1 == s) and s!= t:\n            res += 1\n\n    return str(res)\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Please take input and output as strings to avoid casting issues\n\n    banks = [int(x) for x in stdin.split()]\n    n = len(banks)\n\n    # Dict of pairs (num, num of times this bank has been hacked)\n    bank_hacked_count = dict()\n\n    def find_bank_hacked_count(curr_bank):\n        # Return number of times bank is hacked\n        if curr_bank not in bank_hacked_count:\n            bank_hacked_count[curr_bank] = 1\n        else:\n            bank_hacked_count[curr_bank] += 1\n        return bank_hacked_count[curr_bank]\n\n    # Dictionary of pairs (bank, list of banks that are neighbors of bank)\n    neighbor_banks = dict()\n\n    # Find neighbors and create neighbor_banks dict\n    for i in range(n - 1):\n        bank1, bank2 = [int(x) for x in stdin.split()]\n        neighbor_banks.setdefault(bank1, []).append(bank2)\n        neighbor_banks.setdefault(bank2, []).append(bank1)\n\n    # Find initial starting point\n    max_hacked_count = 0\n    max_hacked_bank = None\n    for bank, hacked_count in bank_hacked_count.items():\n        if hacked_count > max_hacked_count:\n            max_hacked_count = hacked_count\n            max_hacked_bank = bank\n\n    # DFS to find all banks\n    visited_banks = set()\n    visited_banks.add(max_hacked_bank)\n\n    while len(visited_banks) < n:\n        for bank in neighbor_banks[max_hacked_bank]:\n            if bank not in visited_banks:\n                visited_banks.add(bank)\n                find_bank_hacked_count(bank)\n        max_hacked_count = max(max_hacked_count, find_bank_hacked_count(max_hacked_bank))\n        max_hacked_bank = None\n        for bank, hacked_count in bank_hacked_count.items():\n            if hacked_count == max_hacked_count:\n                max_hacked_bank = bank\n                break\n\n    return str(max_hacked_count)\n\nprint(solution(input()))"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.splitlines()[0].split())\n    c = Counter()\n    for i in range(n):\n        u, v = map(int, stdin.splitlines()[i + 1].split())\n        c[u] += 1\n        c[v] += 1\n\n    mx = max(c.values())\n    return sum(i > mx - 1 for i in c.values())\n\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline())\n    banks = list(map(int, stdin.readline().split()))\n    \n    banks.sort()\n    print(banks)\n    \n    answer = banks[-1]\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if banks[i] < banks[j]:\n                answer = min(answer, banks[i] + banks[j])\n                \n    return answer\n\n\"\"\""
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def parse(stdin: str) -> List[Tuple[int, int]]:\n        \"\"\"\n        :param stdin: input string\n        :return: [(bank1, bank2),...]\n        \"\"\"\n        out = []\n        for line in stdin.strip().split('\\n'):\n            a, b = line.split()\n            out.append((int(a), int(b)))\n        return out\n\n    def solve(banks: List[Tuple[int, int]], strength: int) -> int:\n        def connect(bank1: int, bank2: int) -> bool:\n            \"\"\"\n            :param bank1: bank number\n            :param bank2: bank number\n            :return: true iff bank1 and bank2 are connected\n            \"\"\"\n            for bank in banks:\n                if bank1 == bank[0] and bank2 == bank[1]:\n                    return True\n                if bank1 == bank[1] and bank2 == bank[0]:\n                    return True\n            return False\n\n        def update(banks: List[Tuple[int, int]], strength: int, bank: int, inc: int = 1) -> int:\n            \"\"\"\n            :param banks: banks and their strength\n            :param strength: strength of Inzane's computer\n            :param bank: bank to increment\n            :param inc: value to increment by\n            :return: updated strength\n            \"\"\"\n            if bank > strength:\n                return strength\n            banks[bank - 1] = (banks[bank - 1][0], banks[bank - 1][1] + inc)\n            for i in range(len(banks)):\n                if connect(bank, i + 1):\n                    banks[i] = (banks[i][0] + inc, banks[i][1])\n            return update(banks, strength, bank, inc)\n\n        banks = [bank for bank in enumerate(banks)]\n        banks = sorted(banks, key=lambda bank: bank[1][1])\n        banks.reverse()\n\n        for bank in banks:\n            if bank[1][0] <= strength:\n                strength = update(banks, strength, bank[0], bank[1][0] - strength)\n            elif update(banks, strength, bank[0], bank[1][0] - strength):\n                return strength\n        return strength\n\n    bank_count = int(stdin.readline())\n    banks = parse(stdin)\n    strength = int(stdin.readline())\n    return str(solve(banks, strength))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum strength of the computer needed to hack all the banks.\n\n    Args:\n        stdin: Input given by stdin.\n\n    Returns:\n        str: The minimum strength of the computer needed to hack all the banks.\n    \"\"\"\n    n, *strengths = [int(line) for line in stdin.splitlines()]\n    strengths.sort(reverse=True)\n    strengths.append(0)\n    banks = []\n\n    for i in range(1, n + 1):\n        if i == n:\n            banks.append(strengths[i] - strengths[i - 1])\n        else:\n            banks.append(strengths[i] - strengths[i - 1])\n            banks.append(strengths[i] - strengths[i - 1])\n\n    return str(sum(banks))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return'solution'\n\n\"\"\"\n\nn = int(input())\nbanks = list(map(int, input().split()))\nwires = []\n\nfor _ in range(n - 1):\n    wires.append(list(map(int, input().split())))"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum strength that Inzane needs to hack all the banks.\n    \"\"\"\n    \n    # num_banks = int(stdin.split('\\n')[0])\n    banks = [int(x) for x in stdin.split('\\n')[1:]]\n    \n    strengths = []\n    for x in range(len(banks)):\n        strengths.append(0)\n    \n    num_wires = int(stdin.split('\\n')[-2])\n    wires = []\n    for x in range(num_wires):\n        wires.append([int(x) for x in stdin.split('\\n')[-1].split()])\n    \n    # print(num_wires, wires)\n    for wire in wires:\n        # print(wire)\n        strengths[wire[0] - 1] += 1\n        strengths[wire[1] - 1] += 1\n    \n    # print(strengths)\n    \n    # hack the first bank\n    strengths[0] += 1\n    for i in range(1, num_banks):\n        # print(strengths)\n        if strengths[i] > 0:\n            if max(strengths) - 1 > banks[i]:\n                strengths[i] += 1\n            else:\n                strengths[i] = 1\n        else:\n            if banks[i] == max(strengths):\n                strengths[i] += 1\n                strengths[strengths.index(max(strengths))] = 0\n            elif banks[i] == min(strengths):\n                strengths[i] += 1\n                strengths[strengths.index(min(strengths))] = 0\n            else:\n                strengths[i] = 1\n    \n    return(max(strengths))\n\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'SOLUTION'\n'''\n\n\ndef"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(max((n - 1) // (m + 1), 0))"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.strip().split()]\n    return str(1 + n // m)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(n // m)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # This is a straight implementation of the problem\n    # I didn't see an efficient way to do it\n    # For an explanation of the solution, please check the Note section\n    # The complexity is O(n) in time and O(1) in space\n    n, m = map(int, stdin.split())\n    result = 0\n    while n >= m:\n        result += 1\n        n -= m\n    return result\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n\n    return str(math.ceil(n / (m + 1)))\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    if m == 0:\n        return str(1)\n\n    g = 0\n    i = 0\n    while i < m:\n        g += 1\n        i += n\n\n    return str(g)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n // m)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\n\ndef"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    n = k // 10\n    if n * 10 == k:\n        n -= 1\n    if n < r:\n        return '0'\n    else:\n        return str(n - r + 1)\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    k, r = map(int, stdin.split(' '))\n    res = 0\n    \n    while r >= 10:\n        r -= 10\n        res += 1\n        \n    res += r\n    return res\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, r = stdin.split()\n    k, r = int(k), int(r)\n    r = min(r, k % 10)\n    if r == k % 10:\n        print(1)\n        return\n    print(k // 10 + 1)\n    return\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = stdin.split()\n    k, r = int(n), int(m)\n\n    answer = 0\n    while True:\n        if k >= r:\n            answer += k // r\n            k = k % r\n        if k == 0:\n            break\n        answer += 1\n        k *= 10\n\n    return str(answer)"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    min_shovels = 0\n    shovels_in_bank = (r - 1) // 10 + 1\n    shovels_needed = shovels_in_bank - k % shovels_in_bank\n    if shovels_needed == shovels_in_bank:\n        min_shovels = shovels_needed\n    else:\n        min_shovels = shovels_needed + 1\n    return str(min_shovels)\n\n\nprint(solution(\"237 7\"))\nprint(solution(\"15 2\"))"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    return str(k // r)\n\"\"\"\n\nk, r = map(int, input().split())\na = 10\n\ndef"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, r = stdin.split()\n    k, r = int(k), int(r)\n    # if r == 1:\n    #     return k\n    # elif r == 2:\n    #     return int((k + 9) / 2)\n    # else:\n    #     return int((k + 9 * (r - 2)) / r)\n\n    # If r == 1:\n    #     return k\n    # If r == 2:\n    #     return int((k + 9) / 2)\n    # If r >= 3:\n    #     return int((k + 9 * (r - 2)) / r)\n\n    return int((k + 9 * (r - 2)) / r)\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    print(r // k)\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, r = [int(i) for i in stdin.split(' ')]\n    \n    if k%10 == r:\n        return str(k//10)\n    if r == 1:\n        return str(k//10 + 1)\n    \n    num = 10\n    for i in range(k//10 + 1, k//10 + r + 1):\n        if i%10 == r:\n            num = i\n            break\n    return str(num)\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, r = [int(x) for x in stdin.split(\" \")]\n    return str(solution_runner(k, r))\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if it is possible to make a rectangle, 'NO' otherwise.\"\"\"\n    rows, cols = map(int, stdin.split())\n\n    for i in range(rows):\n        if 'X' in stdin[i]:\n            return \"NO\"\n\n    for i in range(rows):\n        if len(set(stdin[i]))!= 1:\n            return \"NO\"\n\n    for i in range(rows):\n        for j in range(cols):\n            if stdin[i][j]!= stdin[0][j]:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = map(int, stdin.split())\n    puzz = [list(stdin) for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if puzz[i][j] == 'X' and puzz[i - 1][j] == 'X' and puzz[i + 1][j] == 'X' and puzz[i][j - 1] == 'X' and puzz[i][j + 1] == 'X':\n                return 'YES'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    pieces = [list(stdin.split('\\n')[i]) for i in range(1, n+1)]\n    for i in range(n-1):\n        for j in range(m-1):\n            if pieces[i][j] == pieces[i+1][j] and pieces[i][j] == pieces[i][j+1] and pieces[i][j] == pieces[i+1][j+1]:\n                return 'YES'\n    return 'NO'\n    '''\n    # TODO\n    n, m = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    pieces = [list(stdin.split('\\n')[i]) for i in range(1, n+1)]\n    piece = [i for i in pieces[0]]\n    for i in range(n-1):\n        for j in range(m-1):\n            if piece[j] == pieces[i+1][j] and piece[j] == pieces[i][j+1] and piece[j] == pieces[i+1][j+1]:\n                return 'YES'\n    return 'NO'\n\nsolution(stdin)\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.split(\"\\n\")\n    width = int(line1[0].split()[0])\n    height = int(line1[0].split()[1])\n\n    if width >= 2 and height >= 2:\n        for i in range(1, width + 1):\n            for j in range(1, height + 1):\n                if stdin.find(\".\" * i, stdin.find(\".\" * i))!= stdin.find(\".\" * i, stdin.find(\".\" * i) + j):\n                    return \"NO\"\n\n        for i in range(1, height + 1):\n            for j in range(1, width + 1):\n                if stdin.find(\"X\" * j, stdin.find(\"X\" * j))!= stdin.find(\"X\" * j, stdin.find(\"X\" * j) + i):\n                    return \"NO\"\n\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(\"2 3\\nXXX\\nXXX\"))\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    print(type(stdin))\n    n, m = [int(i) for i in stdin.split()]\n    grid = []\n    for i in range(n):\n        grid.append(stdin.readline().rstrip())\n    \n    def is_valid(grid):\n        pass\n    \n    return \"YES\" if is_valid(grid) else \"NO\""
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    # Solution:\n    #   Solve the first part of the puzzle using the Jigsaw puzzle rules and store it in a variable.\n    #   Then, make a copy of the puzzle using `list.copy`.\n    #   Now, check every possible position for the first and second piece for the rectangle.\n    #   If the possible position is valid, then check if it forms a rectangle.\n    #   If it does, return `\"YES\"`.\n    #   If it does not, return `\"NO\"`.\n    #   Repeat the above step for every possible position of the second piece and return `\"YES\"` if a rectangle can be formed.\n\n    #   Solve the puzzle using Jigsaw rules\n    #   Solve the puzzle using Jigsaw rules\n    #  ...\n\n    #   Check every possible position for the first and second piece for the rectangle\n    #   If the possible position is valid, then check if it forms a rectangle\n    #   If it does, return `\"YES\"`.\n    #   If it does not, return `\"NO\"`.\n    #   Repeat the above step for every possible position of the second piece and return `\"YES\"` if a rectangle can be formed.\n    #   The loop ends when it finds a position of the first piece that can form a rectangle.\n\n    #   If it cannot form a rectangle, return `\"NO\"`.\n\n\n    def check_rectangle(pos1: List[int], pos2: List[int]) -> bool:\n        n = pos1[0]\n        m = pos2[0]\n        # check the top and left edges\n        if not check_pos(pos1, pos2, [0, 0, n, m]):\n            return False\n        if not check_pos(pos1, pos2, [0, 0, n, m]):\n            return False\n        # check the right edge\n        if not check_pos(pos1, pos2, [n, 0, n, m]):\n            return False\n        # check the bottom edge\n        if not check_pos(pos1, pos2, [n, m, n, m]):\n            return False\n\n        return True\n\n    def check_pos(pos1: List[int], pos2: List[int], shape: List[int]) -> bool:\n        for i in range(shape[0]):\n            for j in range(shape[1]):\n                if pos1[i] < pos2[i] and pos1[j] < pos2[j]:\n                    return False\n                if pos1[i] > pos2[i] and pos1[j] > pos2[j]:\n                    return False\n\n        return True\n\n    # Get the size of the first piece\n    # Get the size of the second piece\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    # Get the puzzle piece\n    puzzle = [[c for c in row.strip()] for row in stdin]\n    # For every position of the first puzzle, find out if it can form a rectangle\n    for i in range(n):\n        for j in range(n):\n            if check_rectangle([i, j], [i, j + 1]):\n                return \"YES\"\n            if check_rectangle([i, j], [i + 1, j]):\n                return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(num) for num in stdin.split(\" \")]\n    if x % 2 == 1 or y % 2 == 1:\n        return \"NO\"\n    if x < 4 or y < 4:\n        return \"NO\"\n    # print(x, y)\n    grid = []\n    for _ in range(x):\n        grid.append(list(stdin))\n    # print(grid)\n    walls = 0\n    for row in grid:\n        for col in row:\n            if col == \"X\":\n                walls += 1\n    if walls < 4:\n        return \"NO\"\n\n    # print(walls)\n\n    while True:\n        for row in grid:\n            for col in row:\n                if col == \".\":\n                    continue\n                # print(row, col)\n                # print(\"=========\")\n                # print([grid[row-1][col], grid[row-1][col+1], grid[row][col+1], grid[row+1][col+1], grid[row+1][col]])\n                # print(\"=========\")\n                if grid[row][col] == \"X\" and \\\n                        grid[row - 1][col] == \"X\" and \\\n                        grid[row][col + 1] == \"X\" and \\\n                        grid[row + 1][col + 1] == \"X\" and \\\n                        grid[row + 1][col] == \"X\":\n                    return \"YES\"\n        # print(grid)\n        # print(walls)\n        if walls == 0:\n            return \"YES\"\n        if walls < 4:\n            return \"NO\"\n        if walls % 4!= 0:\n            return \"NO\"\n        for row in grid:\n            if row[0] == \"X\":\n                for col in range(x - 1):\n                    row[col] = row[col + 1]\n                    row[col + 1] = \"X\"\n            elif row[-1] == \"X\":\n                for col in range(x - 1):\n                    row[-col - 1] = row[-col - 2]\n                    row[-col - 2] = \"X\"\n        walls -= 4\n        # print(grid)\n        # print(walls)\n\n\nsolution(\"2 2\")\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    mapping = {}\n    for i in range(n):\n        line = stdin[i * m : (i + 1) * m]\n        x, y = 0, 0\n        for j in range(m):\n            if line[j] == 'X':\n                x += 1\n                y = 0\n            elif line[j] == '.':\n                y += 1\n        if (x, y) in mapping:\n            return 'NO'\n        mapping[(x, y)] = i + 1\n\n    for x in range(n):\n        for y in range(m):\n            if (x + 1, y) in mapping and (x, y + 1) in mapping:\n                if mapping[(x + 1, y)] == mapping[(x, y + 1)]:\n                    return 'NO'\n    return 'YES'"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [x1, y1] = [int(i) for i in stdin.split()]\n    [x2, y2] = [int(i) for i in stdin.split()]\n    [x3, y3] = [int(i) for i in stdin.split()]\n    result = 0\n    return str(result)\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(stdin))"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    x = []\n    y = []\n    for line in lines:\n        x.append(int(line.split()[0]))\n        y.append(int(line.split()[1]))\n\n    def check(x, y):\n        if not len(x) == len(y) == 2:\n            return False\n        if x[0] == x[1] == x[1] == x[2] == x[0]:\n            return True\n        if y[0] == y[1] == y[1] == y[2] == y[0]:\n            return True\n        return False\n\n    if check(x, y):\n        print(1)\n        return\n    if x[0] == x[1]:\n        print(1)\n        return\n\n    # x[0] < x[1]\n    if x[1] == x[2]:\n        print(2)\n        return\n\n    # y[0] < y[1]\n    if y[1] == y[2]:\n        print(2)\n        return\n\n    # y[0] == y[1] == y[2]\n    if y[0] == y[1] == y[2]:\n        print(1)\n        return\n\n    print(3)\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    points = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    coords = [point for point in points if point[0]!= 0 or point[1]!= 0]\n    if len(coords) < 3:\n        return str(len(coords))\n\n    diffs = [[(coords[i][0] - coords[i - 1][0], coords[i][1] - coords[i - 1][1]),\n              (coords[i + 1][0] - coords[i][0], coords[i + 1][1] - coords[i][1])] for i in range(1, len(coords) - 1)]\n    for diff in diffs:\n        if diff[0][0] * diff[1][0] == 0 and diff[0][1] * diff[1][1] == 0:\n            return str(len(coords))\n    return str(len(coords) - 1)\n\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_y_list = list(map(int, stdin.split()))\n    x_list = [x for x, _ in x_y_list]\n    y_list = [y for _, y in x_y_list]\n    x_max = max(x_list)\n    y_max = max(y_list)\n    x_min = min(x_list)\n    y_min = min(y_list)\n    x_length = x_max - x_min\n    y_length = y_max - y_min\n    x_coeff = (x_max - x_min) / x_length\n    y_coeff = (y_max - y_min) / y_length\n    length_coeff = max(x_coeff, y_coeff)\n    return math.ceil(length_coeff)\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nReturn str.\n\n\nPrecondition:\nlen(stdin) == 3\n\n\n\"\"\"\n\n\nfrom typing import List, Dict\n\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n or k < 1:\n        return 'NO'\n    res = n - 1\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i!= j and res == k - 2:\n                return 'YES\\n' + str(i) +'' + str(j)\n            res -= 1\n    return 'NO'\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m < n - 1 or m * (m - 1) // 2 < n:\n        return 'NO'\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * n\n    def dfs(i):\n        if visited[i]:\n            return False\n        visited[i] = True\n        for j in graph[i]:\n            if not dfs(j):\n                return False\n        return True\n    ans = 0\n    for i in range(n):\n        ans += dfs(i)\n    return 'YES' if ans == n and len(graph) == n else 'NO'\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of edges and vertices\n    num_edges = int(stdin)\n\n    # Initialize the graph as undirected and unweighted\n    graph = Graph(is_directed=False, is_weighted=False)\n\n    # Fill the graph\n    for _ in range(num_edges):\n        # Get the source and destination\n        source, destination = [int(x) for x in stdin.strip().split()]\n\n        # Add edge\n        graph.add_edge(source, destination)\n\n    # Get the edges of the graph\n    edges = graph.get_edges()\n\n    # Get the degrees of the graph\n    degrees = graph.get_degrees()\n\n    # Get the degree of the graph\n    degree = degrees[0]\n\n    # Return answer\n    return 'YES' if len(edges) == num_edges and degree == num_edges else 'NO'\n\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 100).\nThe second line contains n integers a1, a2,..., an (1 \u2264 ai \u2264 n) \u2014 the degrees of the vertices of the graph.\n\nThe next n lines contain two integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014 the ends of the edge between the vertices with indices ai and bi."
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n - 1\n    if n < 1:\n        return \"NO\"\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u0440\u0435\u0431\u0440\u0430\u0445 \u0442\u0440\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u043e \u0441\u043c\u0435\u0436\u043d\u044b\u043c\u0438 \u0441\u0430\u043c\u0438\u043c\u0438 \u0441\u043c\u0435\u0436\u043d\u044b\u043c\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438\n    # \u0441\u043e\u0441\u0435\u0434\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0432\u0435\u0440\u0448\u0438\u043d\u0430 \u0438 \u0434\u0440\u0443\u0433\u0430\u044f \u043d\u0435 \u0441\u043c\u0435\u0436\u043d\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u0438\u0437 \u043d\u0438\u0445 \u043e\u0434\u0438\u043d \u0440\u0435\u0431\u0435\u0440 \u043e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439\n    if m < n - 1 or (m > 0 and find_bridges(stdin, n, m)):\n        return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    if k < 2:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + str(k) + \"\\n\" + \"1 2\""
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"\"\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, m, q = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    s_map = {}\n    t_map = {}\n    for i in range(n):\n        if s[i] not in s_map:\n            s_map[s[i]] = [i]\n        else:\n            s_map[s[i]].append(i)\n    for i in range(m):\n        if t[i] not in t_map:\n            t_map[t[i]] = [i]\n        else:\n            t_map[t[i]].append(i)\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        if t[0] in s_map and (r - 1) in s_map[t[0]]:\n            count = 1\n            while t[count] == t[0]:\n                count += 1\n                if count == m:\n                    break\n            if count == m:\n                print(s_map[t[0]].index(r - 1) + 1)\n            else:\n                print(s_map[t[0]].index(r - 1))\n        else:\n            print(0)\n    return \"\"\n\nsolution(stdin)"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return None"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\" \")))\n    s = a[1]\n    t = a[2]\n    n = a[0]\n    q = a[3]\n    z = []\n    for i in range(q):\n        z.append(list(map(int, stdin.split(\" \"))))\n    for i in z:\n        s1 = s[i[1] - 1:i[0]]\n        if t in s1:\n            print(s1.count(t))\n        else:\n            print(0)\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    #\n    #\n    # return stdout\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return ''"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 3 4\\ncodeforces\\nfor\\n1 3\\n3 10\\n5 6\\n5 7\")\n    '0\\n1\\n0\\n1\\n'\n    \"\"\"\n    s, t = stdin.split(\"\\n\\n\")\n    st = t[: len(t) - len(t.lstrip())]\n    s, t = s.split(\"\\n\")\n    n, m = s.split(\" \")\n    n, m, q = map(int, n.split(\" \")), t.split(\" \"), int(t[: len(t) - len(t.lstrip())].split(\" \")[0])\n\n    count = Counter(t)\n    for _ in range(q):\n        l, r = map(int, stdin.split(\"\\n\")[2].split(\" \"))\n        counter = 0\n        for i in range(l - 1, r):\n            if st[i : i + len(t)] == t:\n                counter += 1\n        print(counter)\n\n    #     print(stdin)\n\n    #     return\n    # s, t = stdin.split(\"\\n\\n\")\n    # s, t = s.split(\"\\n\")\n    # n, m = s.split(\" \")\n    # n, m, q = map(int, n.split(\" \")), t.split(\" \"), int(t[: len(t) - len(t.lstrip())].split(\" \")[0])\n    # for i in range(q):\n    #     l, r = map(int, stdin.split(\"\\n\")[i + 1].split(\" \"))\n    #     print(i + 1, l, r, s[l - 1 : r])\n    #     print(s[l - 1 : r].count(t))\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # \u6a21\u7bc4\u89e3\u7b54\u306f\u3053\u308c\n    # https://atcoder.jp/contests/abc037/tasks/abc037_b\n    pass\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    count = 0\n    def dfs(node, curr):\n        if curr > d:\n            return\n        if node.left:\n            dfs(node.left, curr + 1)\n        if node.right:\n            dfs(node.right, curr + 1)\n        if not node.left and not node.right:\n            if curr + 1 == d:\n                nonlocal count\n                count += 1\n    dfs(tree.root, 1)\n    print(count)\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \n  def get_leaf(n, k):\n    if n <= 1:\n      return 1\n    return (get_leaf(n-1, k) + (k-1) * get_leaf(n-1, k-1)) % MOD\n  \n  def get_paths(n, k, d):\n    if n <= 1:\n      if k <= d:\n        return 1\n      else:\n        return 0\n    return (get_paths(n-1, k, d) + get_leaf(n, k)) % MOD\n  \n  n, k, d = [int(x) for x in stdin.split(' ')]\n  MOD = 10**9 + 7\n  print(get_paths(n, k, d))\n  \n  return ''\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    #cnt = 0\n    # for i in range(k):\n    #     for j in range(i, k):\n    #         for k in range(j, k):\n    #             print(i, j, k)\n    #             if i + j + k == n:\n    #                 cnt += 1\n    #                 print(i, j, k)\n    # print(cnt)\n    # return \"\"\n\n    # The function below is an exhaustive solution for any given tree\n    # However, it can not be used as we can only use recursion\n    # We need to use memoization\n    # def dp(n, k, d, l):\n    #     print(n, k, d, l)\n    #     if n == 1:\n    #         return 1\n    #     if n == k:\n    #         return 1\n    #     if n < k:\n    #         return 0\n    #     if n < l[k][0]:\n    #         return 0\n    #     if n < l[k][1]:\n    #         return dp(n, k - 1, d, l)\n    #     else:\n    #         return dp(n, k - 1, d + 1, l)\n    # l = []\n    # for i in range(k):\n    #     l.append((i + 1, k - i))\n    # return dp(n, k, d, l)\n\n    # By using memoization, we can only use bottom up approach\n    # We can use the DP approach on the paper\n    # By using dp[n][k][d] = dp(n - 1, k, d) + dp(n - 1, k, d - 1)\n    dp = [[[0] * (d + 1) for _ in range(k + 1)] for _ in range(n + 1)]\n    dp[1][1][1] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for k in range(1, d + 1):\n                if k < j:\n                    dp[i][j][k] = dp[i - 1][j][k]\n                else:\n                    dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k - 1]\n    return dp[n][k][d] % 1000000007\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def ways(n: int, k: int, d: int):\n        return n * pow(k, n)\n    n, k, d = map(int, stdin.split())\n    print(ways(n, k, d) % 1000000007)\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(x) for x in stdin.split(' ')]\n    k_sum = k * (k + 1) // 2\n    s = 0\n    if n < k_sum:\n        for i in range(n):\n            s += (d - 1) * ((k_sum - i) // (k - 1) + 1)\n    else:\n        for i in range(k_sum):\n            if i > (k_sum - (k_sum - n)):\n                break\n            s += d - 1\n    return str(s % 1000000007)"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    result = (n + k) * d * pow(d + 1, k - 1) // 2\n\n    return str(result % 1000000007)"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    res = 1\n    for i in range(1, k + 1):\n        res *= (n - i + 1)\n        res %= 1000000007\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return str(binomial(n, k - 1) * pow(d, k - 1, 1000000007) % 1000000007)\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = stdin.split()\n    n, k, d = int(n), int(k), int(d)\n    if k == 1:\n        return 1\n    if k == 2:\n        return n\n    elif k == 3:\n        return n * (n - 1)\n    else:\n        numer = 1\n        denom = 1\n        for x in range(1, k + 1):\n            numer *= x\n            denom *= (n - x + 1)\n        return (numer * denom) % 1000000007\n\nprint(solution(input()))\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    row = stdin\n    if n == 1:\n        return \"1\\n1\"\n    elif n == 2:\n        return \"3\\n2\"\n    elif n == 3:\n        return \"1\\n1\\n1\"\n    elif n == 4:\n        return \"1\\n2\\n1\\n2\"\n    else:\n        # len(row) + 1\n        # 4\n        # 3\n        # 2\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        # 1\n        "
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, row = map(int, stdin.split())\n    row = stdin[:n]\n\n    # the number of black square groups in row\n    k = row.count(\"B\")\n\n    # the size of black square groups in row\n    print(k)\n\n    # the number of black square groups in row\n    k = 0\n\n    # the size of black square groups in row\n    sizes = []\n\n    # the index of current black square group in row\n    i = 0\n\n    while i < len(row):\n        # black square group starts\n        if row[i] == \"B\":\n            k += 1\n            i += 1\n\n        # white square group ends\n        else:\n            sizes.append(k)\n            k = 0\n            i += 1\n\n    # the number of black square groups in row\n    print(k)\n\n    # the size of black square groups in row\n    print(*sizes)\n\n    return 0\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 'Do not return anything, modify matrix in-place instead.'\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4)\n    3\n    >>> solution(13)\n    3\n    >>> solution(4)\n    1\n    >>> solution(13)\n    3\n    \"\"\"\n    n = int(stdin)\n    b = list(stdin)\n    count = 0\n    c = []\n    for i in range(n):\n        if b[i] == 'W':\n            count += 1\n        else:\n            c.append(count)\n            count = 0\n    c.append(count)\n    count = 0\n    for i in range(n - 1, -1, -1):\n        if b[i] == 'B':\n            count += 1\n        else:\n            c.append(count)\n            count = 0\n    c.append(count)\n    c.reverse()\n    return''.join([str(i) for i in c])\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    n = int(stdin[0])\n    s = stdin[1]\n    result = []\n    group = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            group += 1\n        else:\n            if group > 0:\n                result.append(group)\n                group = 0\n    if group > 0:\n        result.append(group)\n    result.sort()\n    if len(result) == 0:\n        return '0\\n'\n    else:\n        return str(len(result)) + '\\n' +''.join(map(str, result))\n\nsolution(input())\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin[0])\n    board = stdin[1]\n    res = [0, 0, 0]\n    for i, char in enumerate(board):\n        if char == 'B':\n            res[0] += 1\n        else:\n            break\n    for i, char in enumerate(reversed(board)):\n        if char == 'B':\n            res[1] += 1\n        else:\n            break\n    for i, char in enumerate(board[::-1]):\n        if char == 'B':\n            res[2] += 1\n        else:\n            break\n    return''.join([str(i) for i in res])\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    row = stdin.split()[1]\n    seq = []\n    for i in row:\n        if i == 'B':\n            seq.append(1)\n        else:\n            seq.append(0)\n    seq.reverse()\n    x = []\n    for i in range(0, len(seq), n):\n        x.append(sum(seq[i:i + n]))\n    return str(len(x)) + '\\n' +''.join(map(str, x))\n\n\nprint(solution(input()))\n\n\n\n\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \uc774 \ubb38\uc81c\ub294 \uadf8\ub9bc\uc744 \ucc38\uc870\ud558\uc5ec \ud478\ub294 \ubb38\uc81c\uc600\ub2e4. \n    \uadf8\ub9bc\uc744 \ud478\ub294 \uac83\uc740 \uc88b\uc740 \ubb38\uc81c\uc774\ub2e4. \uc774 \ubb38\uc81c\ub294 \ucc38\uc870\ud558\uc5ec \ud478\ub294 \uc0ac\ub78c\ub4e4\uc774 \uc624\ub798\uac78\ub838\ub2e4. \uc624\ub798\uac78\ub9b0 \uc0ac\ub78c\ub4e4\uc758 \uc9c1\uc811 \uc811\uadfc\uc744 \ubc29\ud574\ud558\uc9c0 \ubabb\ud588\ub2e4. \n    \ubb38\uc81c\ub97c \ub2e4\ub8ec \uc0ac\ub78c\ub4e4\uc740 \uc9c1\uc811 \uc9c4\ud589\ud558\uc9c0 \uc54a\uace0, \uadf8\ub9bc\uc744 \ubcf4\uace0 \uc811\uadfc\ud558\uc600\ub2e4. \n    \uadf8\ub9bc\uc744 \ubcf4\uba74 \uc0c9\uae54\uc774 \uac80\uc815(black)\ub85c \ub418\uc5b4 \uc788\ub294 \uc0c1\ud0dc\ub97c \uc544\ub798\uc5d0\uc11c \uc704\ub85c, \uc88c\uc6b0\ub85c \uc138\ub85c\uc9c1\uc120\uc73c\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \n    \uc774\ub7f0 \uc9c1\uc120\uc744 \uc804\ubd80 \ud45c\uc2dc\ud558\uae30 \uc704\ud574 \uc5b4\ub5bb\uac8c \uadf8\ub824\uc57c \ud558\ub294\uc9c0 \ubaa8\ub974\uaca0\uc9c0\ub9cc, \uc798 \uadf8\ub824\uc11c \uc774 \ubb38\uc81c\ub97c \ud480\uc5b4\uc57c \ud560 \uac83 \uac19\ub2e4. \n    \uc774 \ubb38\uc81c\ub294 \uc5ec\ub7ec \uac1c\uc758 \uc804\uad6c\ub97c \uc0ac\uc6a9\ud558\uc5ec \uadf8\ub9bc\uc744 \ud45c\uc2dc\ud558\uace0, \uac01 \uc804\uad6c\ub294 \uba87 \uac1c\uc758 \uc9c1\uc120\uc744 \uc5f0\uacb0\ud558\ub294\uc9c0\ub97c \uae30\uc5b5\ud55c\ub2e4. \n    \uadf8\ub9bc\uc744 \uadf8\ub824\ubcf8 \ub4a4, \ucc28\ub840\ub85c \uc5f0\uacb0\ub41c \uc9c1\uc120\uc744 \uae30\uc900\uc73c\ub85c \uadf8\ub9bc\uc744 \uc804\ubd80 \ud45c\uc2dc\ud55c \ud6c4, \uac01 \uc9c1\uc120\uc744 \ubcf4\uba70 \uc55e\uc758 \uc22b\uc790\ub97c \uc138\uc5b4 \uadf8 \uc22b\uc790\ub97c \ucd9c\ub825\ud574\uc57c \ud55c\ub2e4. \n    \uadf8\ub9bc\uc744 \uadf8\ub824\ubcf8 \ub4a4, \uc774 \ubb38\uc81c\ub97c \ud480 \uc218 \uc788\uc5c8\ub2e4. \uadf8\ub9bc\uc744 \uadf8\ub824\ubcf4\ub2c8 \ucc98\uc74c\uc5d0 \uc0c9\uae54\uc774 \uac80\uc740\uc0c9(black)\uc778 \uc0ac\uac01\ud615\uc744 \uadf8\ub9b0 \ub4a4, \uac00\ub85c\uc9c1\uc120(horizontal lines)\uc744 \uc138\uc5b4\uc57c \ud55c\ub2e4. \n    \uadf8\ub9bc\uc744 \uadf8\ub824\ubcf4\ub2c8 \ucc98\uc74c\uc5d0 \uc0c9\uae54\uc774 \ud770\uc0c9(white)\uc778 \uc0ac\uac01\ud615\uc744 \uadf8\ub9b0 \ub4a4, \uc138\ub85c\uc9c1\uc120(vertical lines)\uc744 \uc138\uc5b4\uc57c \ud55c\ub2e4. \n    \uc989, \uc774 \ubb38\uc81c\ub294 \uc0c9\uae54\uc774 \uac80\uc740\uc0c9(black)\uc778 \uc0ac\uac01\ud615\uc744 \uadf8\ub824\ubcf4\ub2c8 \uac00\ub85c\uc9c1\uc120(horizontal lines)\uc744 \uc138\uc5b4\uc57c \ud55c\ub2e4. \n    \uadf8\ub9bc\uc744 \uadf8\ub824\ubcf4\ub2c8 \ucc98\uc74c\uc5d0 \uc0c9\uae54\uc774 \ud770\uc0c9(white)\uc778 \uc0ac\uac01\ud615\uc744 \uadf8\ub9b0 \ub4a4, \uc138\ub85c\uc9c1\uc120(vertical lines)\uc744 \uc138\uc5b4\uc57c \ud55c\ub2e4. \n    \uc774\ub7f0 \uc2dd\uc73c\ub85c \uadf8\ub824\uc9c4 \ud615\ud0dc\ub85c \uac01 \uc0ac\uac01\ud615\ub4e4\uc774 \uadf8\ub824\uc838 \uc788\ub2e4. \n    \uadf8\ub7f0\ub370 \uac01 \uc0ac\uac01\ud615\ub4e4\uc740 \uba87 \uac1c\uc758 \uc9c1\uc120\ub4e4\uc744 \uc5f0\uacb0\ud558\ub294\uc9c0\ub97c \uc138\uc5b4\uc57c \ud55c\ub2e4. \uc138\ub85c\uc9c1\uc120\uc744 \uc138\ub294 \uc2dd\uc740, \uc138\ub85c\uc9c1\uc120\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud574 \uac00\uc7a5 \uc67c\ucabd\uc5d0 \uc788\ub294 \uc0ac\uac01\ud615\uc744 "
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3\\nBBW')\n    '1\\n2'\n    >>> solution('5\\nBWWW')\n    '3\\n1 1 1'\n    >>> solution('4\\nWWWW')\n    '0\\n'\n    >>> solution('13\\nWBBBBWWBWBBBW')\n    '3\\n4 1 3'\n    '''\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    row = stdin[1]\n    ans = [0] * n\n    for i, c in enumerate(row):\n        ans[i] += 1 if c == 'B' else -1\n    ans = map(str, ans)\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bracket_sequence = stdin.split(\"\\n\")[0]\n    op = stdin.split(\"\\n\")[1]\n    \n    # insert empty string at the beginning of the bracket sequence so that the indexing starts from 1\n    bracket_sequence = \"1\" + bracket_sequence\n    \n    # op_index is the index of current bracket in bracket sequence\n    op_index = 0\n    \n    while len(bracket_sequence) > 0:\n        current_char = bracket_sequence[op_index]\n        \n        # check if the current character is a bracket\n        if current_char in \"()\":\n            # check if the current character is a closing bracket\n            if current_char == \")\":\n                # check if the previous char is an opening bracket and it is not deleted\n                if bracket_sequence[op_index - 1] == \"(\":\n                    # delete previous char from bracket sequence\n                    bracket_sequence = bracket_sequence[:op_index - 1] + bracket_sequence[op_index:]\n                    # move the cursor to the next element\n                    op_index -= 1\n                else:\n                    # if the previous element is not deleted\n                    # check if the next element is an opening bracket and it is not deleted\n                    if bracket_sequence[op_index + 1] == \"(\":\n                        # delete the current char from bracket sequence\n                        bracket_sequence = bracket_sequence[:op_index] + bracket_sequence[op_index + 1:]\n                        # move the cursor to the next element\n                        op_index -= 1\n                    else:\n                        # if the next element is not deleted\n                        # then we have a case where the current element is a closing bracket\n                        # but it is not deleted\n                        # so we delete the opening bracket from the bracket sequence\n                        bracket_sequence = bracket_sequence[:op_index - 1] + bracket_sequence[op_index:]\n            # check if the current character is an opening bracket\n            else:\n                # check if the next element is a closing bracket and it is not deleted\n                if bracket_sequence[op_index + 1] == \")\":\n                    # delete the current char from the bracket sequence\n                    bracket_sequence = bracket_sequence[:op_index] + bracket_sequence[op_index + 1:]\n                    # move the cursor to the next element\n                    op_index -= 1\n                else:\n                    # if the next element is not deleted\n                    # then we have a case where the current element is an opening bracket\n                    # but it is not deleted\n                    # so we delete the closing bracket from the bracket sequence\n                    bracket_sequence = bracket_sequence[:op_index] + bracket_sequence[op_index + 1:]\n                    \n            # move the cursor to the next element\n            op_index -= 1\n            \n        # check if we have reached the end of the bracket sequence\n        if op_index == -1:\n            # we have reached the end of the bracket sequence\n            # so we delete the empty string\n            bracket_sequence = bracket_sequence[1:]\n        \n        # check if we have reached the end of the operation sequence\n        if op_index == -1:\n            # we have reached the end of the operation sequence\n            # so we delete the empty string\n            op = op[1:]\n    \n    # return the result\n    return bracket_sequence\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = stdin.split()\n    n, m, p = [int(n), int(m), int(p)]\n    S = [int(i) for i in stdin[:-1]]\n    S = \"\".join([\"(\" if S[i] == 0 else \")\" for i in range(len(S))])\n    L = stdin[-1].split()\n    res = []\n    p = p - 1\n    for i in range(m):\n        if L[i] == \"L\":\n            p = p - 1\n            if p < 0:\n                p = 0\n        elif L[i] == \"D\":\n            if p == len(S) - 1:\n                p = len(S) - 2\n            else:\n                res.append(S[p])\n                res.append(S[p + 1])\n                res.append(S[p + 2])\n                p = p + 1\n        elif L[i] == \"R\":\n            if p == len(S) - 1:\n                p = len(S) - 2\n            else:\n                res.append(S[p])\n                res.append(S[p - 1])\n                res.append(S[p - 2])\n                p = p - 1\n    res = \"\".join(res)\n    print(res)\n\nsolution(\"8 4 5\")\nsolution(\"12 5 3\")\nsolution(\"8 8 8\")\n\"\"\""
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split('\\n')[0].split(' '))\n    A = stdin.split('\\n')[1]\n    B = stdin.split('\\n')[2]\n    C = stdin.split('\\n')[3]\n    ans = \"\"\n    for i in range(len(A)):\n        if A[i] == B[i] == C[i] == '1':\n            ans += '('\n        elif A[i] == B[i] == C[i] == ')':\n            ans += ')'\n        elif A[i] == B[i] == '1':\n            ans += ')'\n        elif B[i] == C[i] == '1':\n            ans += '('\n        elif B[i] == C[i] == ')':\n            ans += '('\n        elif A[i] == '1':\n            ans += ')'\n        else:\n            ans += '('\n    return ans\n\"\"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cbs = stdin.split(\"\\n\")[0]\n    l = cbs.count(\"(\")\n    r = cbs.count(\")\")\n    cur = l-r\n    op = stdin.split(\"\\n\")[1].split()\n    ans = \"\"\n    for i in op:\n        if i == \"R\":\n            cur += 1\n        if i == \"L\":\n            cur -= 1\n        if i == \"D\":\n            if cur > 0:\n                ans += \")\" * (cur)\n                cur -= 1\n            elif cur == 0:\n                ans += \"(\"\n                cur += 1\n            else:\n                ans += \")\" * abs(cur)\n                cur = 0\n    if cur == 0:\n        return ans\n    else:\n        return \"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    bracket = stdin.readline()[:-1]\n    actions = stdin.readline()[:-1]\n    while actions:\n        if actions[0] == 'L':\n            bracket = bracket[:len(bracket) - 1]\n            length -= 1\n            actions = actions[1:]\n        elif actions[0] == 'R':\n            bracket = bracket[1:]\n            length -= 1\n            actions = actions[1:]\n        elif actions[0] == 'D':\n            bracket = bracket[:len(bracket) - 2]\n            length -= 2\n            actions = actions[1:]\n    return bracket\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(i) for i in stdin.split()]\n    seq = stdin[(n + 1) * 2:]\n    for i in range(m):\n        op = stdin[(n + 1) * 2 + i]\n        if op == 'D':\n            pos = p\n            while pos < n:\n                if seq[pos] == '(':\n                    seq = seq[:pos] + seq[pos + 1:]\n                    n -= 1\n                    break\n                pos += 1\n            if pos == n:\n                pos -= 1\n                while pos >= 0:\n                    if seq[pos] == '(':\n                        seq = seq[:pos] + seq[pos + 1:]\n                        n -= 1\n                        break\n                    pos -= 1\n        elif op == 'L':\n            p -= 1\n            if p == -1:\n                p = n - 1\n        else:\n            p += 1\n            if p == n:\n                p = 0\n    return seq\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin.replace(\"\\n\", \"\").split(\"\\n\")\n    brackets = [i for i in brackets if i]\n    m = [i for i in stdin.replace(\"\\n\", \"\").split(\"\\n\")[1:] if i]\n    n = [i for i in stdin.replace(\"\\n\", \"\").split(\"\\n\")[2:] if i]\n    p = stdin.replace(\"\\n\", \"\").split(\"\\n\")[3]\n\n    def read(m):\n        m = m.replace(\"R\", \"\")\n        m = m.replace(\"L\", \"\")\n        m = m.replace(\"D\", \"\")\n        return [int(i) for i in m]\n    m = [i for i in read(m) if i]\n    n = [i for i in read(n) if i]\n    print(m, n)\n    brackets = brackets[0]\n    \n    \n    \n    def op(brackets, m, n):\n        if m == 0 and n == 0:\n            return brackets\n        if m > 0:\n            return brackets + \"(\"\n        if n > 0:\n            return \")\" + brackets\n    \n    brackets = op(brackets, m, n)\n    return brackets\n\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 4 5\\n((()())(()))\\nRRDLD\\n\")\n    '()'\n    >>> solution(\"12 5 3\\n((()())(()))\\nRRDLD\\n\")\n    '(()(()))'\n    >>> solution(\"8 8 8\\n((()())(()))\\nLLLLLLDD\\n\")\n    '()()'\n    \"\"\"\n    # n, m, i = [int(x) for x in stdin.split()]\n    n, m, i = 8, 8, 8\n    brackets = stdin.strip()\n    pairs = dict(zip(map(str, range(len(brackets))), brackets))\n    print(brackets)\n\n    def r(i):\n        return pairs[i] if pairs.get(i) else \"\"\n\n    def d(i):\n        if i in pairs:\n            del pairs[i]\n            del pairs[i - 1]\n\n    def l(i):\n        return i - 1 if i - 1 in pairs else i\n\n    for op in stdin.splitlines()[1:]:\n        op = op.strip()\n        if op == \"R\":\n            i = l(i)\n        elif op == \"D\":\n            d(i)\n            i = l(i)\n        elif op == \"L\":\n            i = r(i)\n\n    return \"\".join(pairs.values())\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    n, m, pos = map(int, stdin.split())\n    seq = stdin[-n:]\n    ans = []\n    stack = [pos]\n    for cmd in stdin[:-n]:\n        pos = stack.pop() if cmd == \"L\" else pos + 1\n        ans.append(seq[pos - 1] if cmd == \"R\" else \"\")\n        if cmd == \"R\":\n            stack.append(pos)\n    return \"\".join(ans)\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # define variables\n    cursor_pos = 0\n    brackets_stack = []\n    s = stdin\n    # write your code in Python 3.6\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            brackets_stack.append(s[i])\n            cursor_pos += 1\n        elif s[i] == \")\":\n            brackets_stack.pop()\n            cursor_pos -= 1\n    if len(brackets_stack)!= 0:\n        return \"\"\n    return s[cursor_pos]\n\n\n\ntest.assert_equals(solution('(())()'),'()')\ntest.assert_equals(solution('(()(()))'),'(()(()))')\ntest.assert_equals(solution('(()(()))(())()'),'(()(()))')\ntest.assert_equals(solution
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    result = []\n    for i in range(count):\n        inp = stdin.readline().split(' ')\n        x = int(inp[1])\n        answer = inp[2]\n        if (inp[0] == '<' and answer == 'Y') or (inp[0] == '<=' and answer == 'Y') or (inp[0] == '>' and answer == 'N') or (inp[0] == '>=' and answer == 'N'):\n            result.append(x)\n    result = list(dict.fromkeys(result))\n    if len(result) == 0:\n        return 'Impossible'\n    else:\n        result.sort()\n        return str(result[0] + 2 * 10**9)\n    return result\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return \"\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = []\n    for i in range(n):\n        inp = stdin.readline().split()\n        if len(inp) < 3:\n            if len(inp) == 2:\n                if inp[0] == '>':\n                    l.append((inp[1], 'N'))\n                else:\n                    l.append((inp[1], 'Y'))\n            else:\n                l.append((inp[0], 'Y'))\n        else:\n            l.append((inp[0], inp[2]))\n    ans = []\n    for i in range(1, 10 ** 9 * 2 + 1):\n        ok = True\n        for t in l:\n            if (t[0], t[1]) == ('>', 'N') and i < int(t[0]):\n                ok = False\n            elif (t[0], t[1]) == ('<', 'N') and i > int(t[0]):\n                ok = False\n            elif (t[0], t[1]) == ('>=', 'N') and i < int(t[0]):\n                ok = False\n            elif (t[0], t[1]) == ('<=', 'N') and i > int(t[0]):\n                ok = False\n            elif (t[0], t[1]) == ('>', 'Y') and i > int(t[0]):\n                ok = False\n            elif (t[0], t[1]) == ('<', 'Y') and i < int(t[0]):\n                ok = False\n            elif (t[0], t[1]) == ('>=', 'Y') and i < int(t[0]):\n                ok = False\n            elif (t[0], t[1]) == ('<=', 'Y') and i > int(t[0]):\n                ok = False\n        if ok:\n            ans.append(i)\n    if len(ans) == 0:\n        return 'Impossible'\n    return str(max(ans))"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = []\n    for _ in range(n):\n        sign, number, answer = stdin.readline().split()\n        arr.append([sign, int(number), answer[0]])\n    for i in range(n):\n        if arr[i][0] == '<':\n            arr[i][2] = 'Y'\n        elif arr[i][0] == '>':\n            arr[i][2] = 'N'\n        elif arr[i][0] == '<=':\n            arr[i][2] = 'Y'\n        elif arr[i][0] == '>=':\n            arr[i][2] = 'N'\n    print(arr)\n    for i in range(n):\n        if arr[i][2] == 'Y':\n            print('Y')\n            return 'Impossible'\n    numbers = []\n    for i in range(n):\n        if arr[i][2] == 'Y':\n            numbers.append(arr[i][1])\n    min = 10**9\n    max = -(10**9)\n    for i in numbers:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    for i in range(n):\n        if arr[i][2] == 'Y':\n            print(max)\n            return max\n    print('Impossible')\n    return 'Impossible'"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 2:\n        return 'Impossible'\n    for _ in range(k):\n        print('')\n        sign, answer = input(), input()\n        print('')\n        if (sign == '<' and answer == 'Y') or (sign == '>' and answer == 'N') or (sign == '<=' and answer == 'Y') or (sign == '>=' and answer == 'N'):\n            return 'Impossible'\n        if sign == '>' and answer == 'N':\n            y = int(input())\n            if 2 * y >= 10 ** 9:\n                return y\n            else:\n                return 'Impossible'\n        if sign == '<' and answer == 'Y':\n            y = int(input())\n            if -2 * y < 10 ** 9:\n                return y\n            else:\n                return 'Impossible'\n        if sign == '>=' and answer == 'N':\n            y = int(input())\n            if y < 10 ** 9:\n                return y\n            else:\n                return 'Impossible'\n        if sign == '<=' and answer == 'Y':\n            y = int(input())\n            if -y < 10 ** 9:\n                return y\n            else:\n                return 'Impossible'\n    return 'Impossible'\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    \n    answer = []\n    for i in range(n):\n        question = stdin.split('\\n')[i].split(' ')\n        if len(question) == 3:\n            if question[0] == '>=':\n                if question[2] == 'Y':\n                    answer.append(int(question[1]))\n            elif question[0] == '<=':\n                if question[2] == 'Y':\n                    answer.append(int(question[1]))\n        else:\n            if question[1] == 'Y':\n                answer.append(int(question[0]))\n    if len(answer) == 0:\n        return \"Impossible\"\n    else:\n        answer.sort()\n        return answer[0]\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for _ in range(n):\n        sign, number, answer = stdin.split()[0], stdin.split()[1], stdin.split()[2]\n        number = int(number)\n        if (answer == 'Y' and sign == '>=' and number < number*2) or \\\n                (answer == 'Y' and sign == '>' and number < number*2) or \\\n                (answer == 'Y' and sign == '<=' and number*2 < number) or \\\n                (answer == 'Y' and sign == '<' and number*2 < number) or \\\n                (answer == 'N' and sign == '>=' and number < number*2) or \\\n                (answer == 'N' and sign == '>' and number < number*2) or \\\n                (answer == 'N' and sign == '<=' and number*2 < number) or \\\n                (answer == 'N' and sign == '<' and number*2 < number):\n            continue\n        else:\n            return 'Impossible'\n    return 'Y'\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: Docstring for solution.\n\n    :arg1: TODO\n    :returns: TODO\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return 'Impossible'\n    for i in range(1, N + 1):\n        q1, a1 = stdin.split(' ')\n        if a1 == 'Y':\n            if q1 == '>=':\n                continue\n            if q1 == '<=':\n                continue\n        else:\n            if q1 == '>':\n                continue\n            if q1 == '<':\n                continue\n        q2, a2 = stdin.split(' ')\n        if a2 == 'Y':\n            if q2 == '>':\n                continue\n            if q2 == '<':\n                continue\n        else:\n            if q2 == '>=':\n                continue\n            if q2 == '<=':\n                continue\n        q3, a3 = stdin.split(' ')\n        if a3 == 'Y':\n            if q3 == '>':\n                continue\n            if q3 == '<':\n                continue\n        else:\n            if q3 == '>=':\n                continue\n            if q3 == '<=':\n                continue\n        q4, a4 = stdin.split(' ')\n        if a4 == 'Y':\n            if q4 == '>':\n                continue\n            if q4 == '<':\n                continue\n        else:\n            if q4 == '>=':\n                continue\n            if q4 == '<=':\n                continue\n        return str(i)\nprint(solution(input()))\n\n3. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b\n\u0414\u0430\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u0430 \u0441 \u043f\u043e\u0438\u0441\u043a\u043e\u043c \u0432 \u0448\u0438\u0440\u0438\u043d\u0443. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0438\u0441\u043a \u0432 \u0448\u0438\u0440\u0438\u043d\u0443 \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430 \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0441 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 \u043e\u0431\u0445\u043e\u0434\u043e\u043c \u0432 \u0448\u0438\u0440\u0438\u043d\u0443. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u00ab\u0428\u0438\u0440\u0438\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a\u00bb \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0445\u0432\u043e\u0441\u0442\u043e\u0432\u0438\u043a.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0440\u0435\u0431\u0440\u0430 \u0433\u0440\u0430\u0444\u0430 n (0 < n \u2264 15000) \u0438 \u0435\u0433\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044c m (0 \u2264 m \u2264 1000). \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 n \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0430\u0440\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0440\u0435\u0431\u0440\u0430 \u0432 \u0432\u0438\u0434\u0435: \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043a \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0447\u0438\u0441\u043b\u0430, \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0432 \u044d\u0442\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \"> 1 2\". \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \"Y\".\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u2014 \u044d\u0442\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, 2, 3,..., n].\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u0448\u0438\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u0445\u043e\u0440\u043e\u0448\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e \u043a\u0440\u0430\u0441\u0438\u0432\u043e\u043c\u0443 \u0441\u043f\u0438\u0441\u043a\u0443. \u0415\u0441\u043b\u0438 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\".join(...)\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(stdin.strip().split(' '))\n    a = int(a)\n    b = int(b)\n    return str(factorial(a+b)//(factorial(a)*factorial(b)))\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n    return a + b - 1\n\n\"\"\"\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a, b = stdin.split()\n  a, b = int(a), int(b)\n  return a+b-1\n\"\"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = 0\n    for i in range(a + b):\n        if i % (a + b) == 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return len(set([p % (a + b - 1) for p in range(a + b)]))"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return a*b\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\nNO NO YES YES YES NO\\n\")\n    'Adam Bob Bob Cpqepqwer Limak Adam Bob Adam'\n    >>> solution(\"9 8\\nYES NO\\n\")\n    'R Q Ccccccccc Ccocc Ccc So Strong Samples Ccc'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    soldiers = [stdin.split(\"\\n\")[i] for i in range(1, n + 1)]\n    ans = []\n    for i in range(n - k + 1):\n        ans.append(\"\".join([x[i : i + k] for x in soldiers]))\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    l = stdin.split(' ')[:n - k + 1]\n    return''.join(map(lambda i: i if i!= 'YES' else ''.join(map(lambda c: chr(ord(c) - 32), i.upper())), [i for i in l if i!= 'NO']))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = stdin.split()\n    n = len(arr)\n\n    ans = ''\n    for i in range(k):\n        ans += \"\".join([x.capitalize() for x in arr[i*k:(i+1)*k]])\n        ans += \" \"\n\n    print(ans[:-1])\n    return ans[:-1]\n\nsolution(\"1 2 3 4 5 6 7 8 9 10\")\n\n-----Puzzel-----\nGiven a list of (id, name) pairs, write a function that creates a group of n persons (where n is the number of pairs in the list) such that there are no two persons in the group who have the same name. Each person should be represented by a unique pair (id, name).\n\nEach of the n pairs has a different id and name, and the names do not contain duplicates. The names of the groups of persons are represented by a list of n pair names.\n\nEach name is guaranteed to be unique and fits in a buffer of size 1. The names contain only letters and the space character.\n\nInput\nn\nid name\n\nOutput\nid name\n\nSample Input:\n2\n1 a\n2 b\n\nSample Output:\n1 a\n2 b\n\n-----Puzzel-----\nGiven a list of (id, name) pairs, write a function that creates a group of n persons (where n is the number of pairs in the list) such that there are no two persons in the group who have the same name. Each person should be represented by a unique pair (id, name).\n\nEach of the n pairs has a different id and name, and the names do not contain duplicates. The names of the groups of persons are represented by a list of n pair names.\n\nEach name is guaranteed to be unique and fits in a buffer of size 1. The names contain only letters and the space character.\n\nInput\nn\nid name\n\nOutput\nid name\n\nSample Input:\n2\n1 a\n2 b\n\nSample Output:\n1 a\n2 b\n\ndef"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def generate_names():\n        for i in range(k):\n            for j in range(n - k + 1):\n                if s[j] == \"YES\":\n                    yield s[j + i]\n\n    return \" \".join(generate_names())\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find any solution.\"\"\"\n    number_of_soldiers, number_of_consecutive_soldiers = (int(value) for value in stdin.split())\n    for index, (soldier, group) in enumerate(zip(stdin.split(), range(number_of_consecutive_soldiers, number_of_soldiers - number_of_consecutive_soldiers))):\n        if soldier == \"NO\":\n            break\n    else:\n        # No break was hit, so every soldier was \"YES\".\n        return \"\".join(f\"{chr(ord('A') + soldier_number)}{chr(ord('a') + soldier_number)}\" for soldier_number in range(number_of_soldiers))\n\n    # Otherwise, the first soldier that was \"NO\" was not the first soldier of the group.\n    group_start_index = index - number_of_consecutive_soldiers\n    return \"\".join(f\"{chr(ord('A') + group_start_index + soldier_number)}{chr(ord('a') + group_start_index + soldier_number)}\" for soldier_number in range(number_of_consecutive_soldiers))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Alice Bob Carol David Eve Frank Ginny Harriet Ileana Joseph Kincaid Larry Marigold Mary Murphy\".split())\n    return \"Alice Bob Carol David Eve Frank Ginny Harriet Ileana Joseph Kincaid Larry Marigold Mary Murphy\".split()\n\ndef"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in the string of 'YES' and 'NO' with size n and k,\n    and return an n-element list of possible names\"\"\"\n    \n    n, k = map(int, stdin.split())\n    \n    lst = [''] * n\n    for i, s in enumerate(stdin.split()):\n        if s == 'YES':\n            lst[i] = ''.join([chr(i) for i in range(ord('A'), ord('A') + k)])\n    \n    return lst\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a possible combination of names for a group of soldiers.\n    \n    Args:\n        stdin (str): Input string with n and k numbers.\n    \n    Returns:\n        str: Name string of soldiers.\n    \"\"\"\n    # Get numbers from input.\n    n, k = map(int, stdin.split())\n    \n    # Initialize result string and set of names.\n    result = ''\n    names = set()\n    \n    # Parse every input string and add valid names to the set.\n    for i in range(n - k + 1):\n        s = stdin.split()[i]\n        if s == 'YES':\n            for j in range(i, i + k):\n                name = stdin.split()[j].lower()\n                if len(name) > 1:\n                    if name[0].isupper():\n                        result += name\n                    else:\n                        name = name.capitalize()\n                        result += name\n                else:\n                    result += name\n                names.add(name)\n    \n    # Return result string.\n    return result\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = [x.strip() for x in stdin.split('\\n')][1:]\n    print(stdin)\n    print(n, k, s)\n    \n    \ndef"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    a = stdin.split(' ')\n\n    if k == 1:\n        return''.join([f\"{i}\" for i in range(1, n + 1)])\n\n    result = []\n    for i in range(n - k + 1):\n        result.append(f\"{a[i]} {a[i + k - 1]}\")\n\n    return''.join(result)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % 2 == 0 or b % 3 == 0 or b % 5 == 0:\n        return -1\n    else:\n        return int(a / (2 + 3 + 5) + b / (2 + 3 + 5) + 2)\n        \ndef"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if b % 2 == 0 or a % 3 == 0 or b % 5 == 0 or a % 5 == 0:\n        return -1\n    return (b - a) // 2\nprint(solution(input()))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # create an empty dictionary with the keys as the keys from the strings\n    # then use the keys to associate the values of a and b with their weights\n    weights = {}\n    weights[stdin[0]] = int(stdin[1])\n    weights[stdin[2]] = int(stdin[3])\n    # the solution is simply the difference between the weights of the cheeses\n    # divided by two\n    return str(abs(weights[stdin[2]] - weights[stdin[0]])/2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    c = a\n    d = b\n    count = 0\n    while (c and d)!= 0:\n        if c > d:\n            c %= d\n            count += 1\n        else:\n            d %= c\n            count += 1\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % 2 == 0 and a % 2 == 0:\n        return 0\n    elif b % 3 == 0 and a % 3 == 0:\n        return (b // 3) - (a // 3)\n    elif b % 5 == 0 and a % 5 == 0:\n        return (b // 5) - (a // 5)\n    return -1"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return -1 if (b - a) % 3 else (b - a) // 3"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0:\n        a = a // 2\n        b = b - a\n        if b % 2 == 0:\n            b = b // 2\n            print(a + b)\n        else:\n            print(-1)\n    elif b % 2 == 0:\n        b = b // 2\n        a = a - b\n        if a % 2 == 0:\n            a = a // 2\n            print(a + b)\n        else:\n            print(-1)\n    else:\n        a = a - 1\n        b = b - 1\n        if a % 2 == 0:\n            a = a // 2\n            b = b - a\n            if b % 2 == 0:\n                b = b // 2\n                print(a + b)\n            else:\n                print(-1)\n        else:\n            print(-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a+b - min(a,b)\n    print(result if result > 0 else -1)\n    return result\n\nsolution(input())\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    \n    if a % 2 == 0:\n        a = a // 2\n        b = b // 2\n    elif a % 3 == 0:\n        a = a // 3\n        b = b // 3\n    elif a % 5 == 0:\n        a = a // 5\n        b = b // 5\n    else:\n        return -1\n    \n    if a == b:\n        return 0\n    \n    return abs(a - b)\n\ndef"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    a1 = max(a, b)\n    b1 = min(a, b)\n    if b1 % 2!= 0:\n        print(-1)\n        return\n    else:\n        a1 -= b1\n        b1 = max(a1, b1)\n        print(a1 + b1)\n        return\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 100 1\\n0 1 2 1 2\\n')\n    101\n    >>> solution('3 10 12\\n1 2 0\\n')\n    -1\n    >>> solution('3 12 1\\n0 1 0\\n')\n    0\n    \"\"\"\n    white = int(stdin.split()[0])\n    black = int(stdin.split()[1])\n    colors = list(map(int, stdin.split()[2:]))\n\n    swap_cost = sum(colors.count(i) for i in [0, 2])\n    total_cost = sum(colors.count(i) for i in [1, 0])\n\n    if (\n        swap_cost > black\n        or total_cost > white\n        or (\n            black\n            + swap_cost\n            + colors.count(1)\n            > white\n            + swap_cost\n            + colors.count(0)\n        )\n    ):\n        return \"IMPOSSIBLE\"\n\n    ans = 0\n    for i in range(len(colors)):\n        ans += colors[i] * (i + 1)\n\n    return str(ans)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    c = [0] + list(map(int, stdin.split()))\n    dp = [0] * (1 + N)\n    dp[0] = A * c[0] + B * c[1]\n    for i in range(1, 1 + N):\n        if c[i] == 2:\n            dp[i] = dp[i - 1]\n            continue\n        dp[i] = min(dp[i - 1] + A * c[i], dp[i - 1] + B * c[i + 1])\n    return dp[-1] if dp[-1] < 100 * 100 + 1 else -1"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w, b = [int(i) for i in stdin.split()]\n    colors = [int(i) for i in stdin.split()]\n    cost_w = 0\n    cost_b = 0\n    for color in colors:\n        if color == 0:\n            cost_w += w\n        if color == 1:\n            cost_b += b\n    if cost_w > cost_b:\n        return \"-1\"\n    if cost_w == cost_b:\n        return str(cost_w)\n    for i in range(n):\n        if colors[i] == 2:\n            colors[i] = 1\n            break\n    for j in range(n - 1, i, -1):\n        if colors[j] == 2:\n            colors[j] = 0\n            break\n    for color in colors:\n        if color == 0:\n            cost_w += w\n        if color == 1:\n            cost_b += b\n    if cost_w > cost_b:\n        return \"-1\"\n    if cost_w == cost_b:\n        return str(cost_w)\n    else:\n        return str(cost_b)"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"not possible\""
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b] = stdin.split()\n    n, a, b = int(n), int(a), int(b)\n    dancers = stdin.split('\\n')[1]\n    dancers = [int(x) for x in dancers.split()]\n    dancers = list(set(dancers))\n    dancers.sort()\n    cur = dancers[0]\n    res = 0\n    for i in range(n):\n        if dancers[i] == 0:\n            res += a\n        else:\n            res += b\n    return res"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom sys import stdin, setrecursionlimit\n\n\ndef"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dancers_num = int(stdin[0])\n    white_cost = int(stdin[1])\n    black_cost = int(stdin[2])\n    dancers_colors = list(map(int, stdin[3].split()))\n\n    if white_cost + black_cost > 100:\n        return '-1'\n    if any(dancers_colors.count(x) == 0 for x in [0, 1]):\n        return '-1'\n\n    min_cost = white_cost\n    is_palindrome = True\n    for i, color in enumerate(dancers_colors):\n        if color == 0:\n            if i!= 0:\n                is_palindrome = False\n                break\n            else:\n                continue\n        if is_palindrome:\n            min_cost += black_cost\n        else:\n            min_cost += white_cost\n        is_palindrome = not is_palindrome\n\n    return str(min_cost) if is_palindrome else '-1'\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    dancers_cnt, cost_w, cost_b = [int(x) for x in stdin.split(' ')]\n    dancers_colors = [int(x) for x in stdin.split(' ')]\n    colors_pal = []\n    pal_colors = []\n    for i, color in enumerate(dancers_colors):\n        if color == 0:\n            colors_pal.append(i)\n        elif color == 1:\n            pal_colors.append(i)\n        else:\n            colors_pal.append(i)\n            pal_colors.append(i)\n\n    if len(pal_colors) < 2:\n        return -1\n\n    if len(colors_pal) == 1:\n        return cost_b\n\n    for i, j in zip(pal_colors[::1], pal_colors[-2::-1]):\n        if i!= j:\n            colors_pal.pop(i)\n            pal_colors.pop(i)\n            colors_pal.pop(j)\n            pal_colors.pop(j)\n            if len(colors_pal) == 1:\n                return cost_b\n\n            break\n\n    if len(colors_pal) == 1:\n        return cost_b\n\n    if len(pal_colors) == 2:\n        return cost_w + cost_b\n\n    for i, j in zip(pal_colors[::1], pal_colors[-2::-1]):\n        if i!= j:\n            colors_pal.pop(i)\n            pal_colors.pop(i)\n            colors_pal.pop(j)\n            pal_colors.pop(j)\n            break\n\n    if len(colors_pal) == 1:\n        return cost_b\n\n    return cost_w + cost_b\n\n\nprint(solution(input()))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([''.join(['b' if x == 'w' else 'w' for x in line]) for line in stdin.strip().split('\\n')])"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k % 2 == 1:\n        print(\"-1\")\n        return\n    rows = int(k ** 3)\n    mat = [['w'] * k for _ in range(k)]\n    def next_row(mat, col, row, cnt):\n        if cnt >= k:\n            return\n        # top\n        if row == 0:\n            mat[row][col] = 'b'\n            next_row(mat, col + 1, row + 1, cnt + 1)\n        # bottom\n        elif row == k - 1:\n            mat[row][col] = 'b'\n            next_row(mat, col + 1, row - 1, cnt + 1)\n        # left\n        elif col == 0:\n            mat[row][col] = 'b'\n            next_row(mat, col + 1, row, cnt + 1)\n        # right\n        elif col == k - 1:\n            mat[row][col] = 'b'\n            next_row(mat, col, row - 1, cnt + 1)\n        # middle\n        else:\n            mat[row][col] = 'b'\n            next_row(mat, col, row + 1, cnt + 1)\n            next_row(mat, col, row - 1, cnt + 1)\n            next_row(mat, col + 1, row, cnt + 1)\n    next_row(mat, 0, 0, 0)\n    for row in mat:\n        print(''.join(row))"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  cube_length = int(stdin)\n  if cube_length == 1:\n    return \"bb\"\n  for i in range(cube_length + 1):\n    if i > cube_length:\n      break\n    for j in range(cube_length + 1):\n      if j > cube_length:\n        break\n      for k in range(cube_length + 1):\n        if k > cube_length:\n          break\n        if i + j + k == cube_length:\n          # print(i, j, k)\n          if i == 0:\n            if k % 2 == 0:\n              if j % 2 == 0:\n                return \"b\" + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2)\n              else:\n                return \"b\" + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\"\n            else:\n              if j % 2 == 0:\n                return \"b\" + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\"\n              else:\n                return \"b\" + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\" + \"w\"\n          elif j == 0:\n            if k % 2 == 0:\n              if i % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2)\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\"\n            else:\n              if i % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\"\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\" + \"w\"\n          elif k == 0:\n            if i % 2 == 0:\n              if j % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\"\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" + \"w\"\n            else:\n              if j % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" + \"w\"\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" + \"w\" + \"b\"\n          elif i == j:\n            if k % 2 == 0:\n              if j % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2)\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\"\n            else:\n              if j % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\"\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\" + \"w\"\n          elif j == k:\n            if i % 2 == 0:\n              if i % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2)\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\"\n            else:\n              if i % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\" + \"w\"\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\" + \"w\" + \"b\"\n          else:\n            if i % 2 == 0:\n              if j % 2 == 0:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\"\n              else:\n                return \"b\" * (i // 2) + \"w\" * (i // 2) + \"b\" * (j // 2) + \"w\" * (j // 2) + \"b\" * (k // 2) + \"w\" * (k // 2) + \"b\" + \"w\" + \"b\"\n            else:\n              if j % 2 == 0:\n                return \"b"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # create the cube size\n    # cube_size = int(stdin)\n    cube_size = int(input())\n\n    # get the solution\n    solution = None\n\n    return solution\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    k = int(stdin)\n    \n    if k <= 0 or k > 100:\n        return \"-1\"\n\n    l = [[\"b\" for i in range(k)] for j in range(k)]\n    for i in range(k):\n        l[0][i] = \"w\"\n        l[i][0] = \"w\"\n        l[i][k-1] = \"w\"\n        l[k-1][i] = \"w\"\n\n    print_k(l, k)\n    return \"w\" * k**3\n\ndef"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    if size == 1:\n        return '-1\\n'\n    result = ''\n    for y in range(size):\n        if y == 0 or y == size - 1:\n            for x in range(size):\n                result += 'b'\n        else:\n            result += 'bw' * size\n        if y < size - 1:\n            result += '\\n'\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '\\n'.join(stdin)"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # return '-1' if n == 0 else 'b' * n\n    # return str(n)\n    # for i in range(3):\n    #     for j in range(3):\n    #         print(solution(i, j))\n\n    # if n == 0:\n    #     return '-1'\n    # if n == 1:\n    #     return 'b' * 3\n    # if n == 2:\n    #     return 'bw' * 2\n    # return solution(n - 1) + 'b' + solution(n - 2)\n\nprint(solution(int(stdin.readline())))\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split(\"\\n\")[0])\n    if k == 1:\n        return '-1'\n    answer = [['w']*k for _ in range(k)]\n    for i in range(k):\n        for j in range(k):\n            if i == 0 or i == k - 1 or j == 0 or j == k - 1:\n                answer[i][j] = 'b'\n    print('\\n'.join(''.join(row) for row in answer))\n    return '\\n'.join(''.join(row) for row in answer)\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Method 1\n    # Parse stdin\n    k = int(stdin)\n    \n    # Put every unit cube in a list\n    cubes = [[[\"b\" for _ in range(k)] for _ in range(k)] for _ in range(k)]\n    \n    # A list of tuples containing coordinates of white cubes\n    white_cubes = []\n    \n    # A list of tuples containing coordinates of black cubes\n    black_cubes = []\n    \n    # A list of tuples containing coordinates of black cubes\n    same_cubes = []\n    \n    # For each layer\n    for i in range(k):\n        # For each row\n        for j in range(k):\n            # For each column\n            for l in range(k):\n                # If it is the first layer\n                if i == 0 and j == 0 and l == 0:\n                    # Check if there is a white cube to the right\n                    if j + 1 < k and cubes[i][j][l] == \"w\" and cubes[i][j + 1][l] == \"w\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                    # Check if there is a white cube to the left\n                    elif j - 1 >= 0 and cubes[i][j][l] == \"w\" and cubes[i][j - 1][l] == \"w\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                    # Check if there is a white cube above\n                    elif i - 1 >= 0 and cubes[i][j][l] == \"w\" and cubes[i - 1][j][l] == \"w\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                    # Check if there is a white cube below\n                    elif i + 1 < k and cubes[i][j][l] == \"w\" and cubes[i + 1][j][l] == \"w\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                    # Add to white cubes\n                    white_cubes.append((i, j, l))\n                # If it is not the first layer\n                else:\n                    # Check if there is a white cube to the right\n                    if j + 1 < k and cubes[i][j][l] == \"w\" and cubes[i][j + 1][l] == \"w\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                    # Check if there is a white cube to the left\n                    elif j - 1 >= 0 and cubes[i][j][l] == \"w\" and cubes[i][j - 1][l] == \"w\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                    # Check if there is a white cube above\n                    elif i - 1 >= 0 and cubes[i][j][l] == \"w\" and cubes[i - 1][j][l] == \"w\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                    # Check if there is a white cube below\n                    elif i + 1 < k and cubes[i][j][l] == \"w\" and cubes[i + 1][j][l] == \"w\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                    # Check if there is a black cube to the right\n                    elif j + 1 < k and cubes[i][j][l] == \"b\" and cubes[i][j + 1][l] == \"b\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                        # If the cube is white\n                        if (i, j, l) in white_cubes:\n                            # Add to white cubes\n                            white_cubes.remove((i, j, l))\n                            # Add to same cubes\n                            same_cubes.append((i, j, l))\n                    # Check if there is a black cube to the left\n                    elif j - 1 >= 0 and cubes[i][j][l] == \"b\" and cubes[i][j - 1][l] == \"b\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                        # If the cube is white\n                        if (i, j, l) in white_cubes:\n                            # Add to white cubes\n                            white_cubes.remove((i, j, l))\n                            # Add to same cubes\n                            same_cubes.append((i, j, l))\n                    # Check if there is a black cube above\n                    elif i - 1 >= 0 and cubes[i][j][l] == \"b\" and cubes[i - 1][j][l] == \"b\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                        # If the cube is white\n                        if (i, j, l) in white_cubes:\n                            # Add to white cubes\n                            white_cubes.remove((i, j, l))\n                            # Add to same cubes\n                            same_cubes.append((i, j, l))\n                    # Check if there is a black cube below\n                    elif i + 1 < k and cubes[i][j][l] == \"b\" and cubes[i + 1][j][l] == \"b\":\n                        # It is black\n                        cubes[i][j][l] = \"b\"\n                        # Add to black cubes\n                        black_cubes.append((i, j, l))\n                        # If the cube is white\n                        if (i, j, l) in white_cubes:\n                            # Add to white cubes\n                            white_cubes.remove((i, j, l))\n                            # Add to same cubes\n                            same_cubes.append((i, j, l))\n                    # If it is white\n                    else:\n                        # Add to white cubes\n                        white_cubes.append((i, j, l))\n    # Check if there is a black cube that has only one neighbour\n    for cube in black_cubes:\n        if cube in same_cubes:\n            # Mark this cube\n            cubes[cube[0]][cube[1]][cube[2]] = \"s\"\n            # Remove it from black cubes\n            black_cubes.remove(cube)\n    # Check if there is a white cube that has only one"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    #...\n    return x\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pf = [1]\n    i = 2\n    while pf[-1] < n:\n        if i*i > n:\n            break\n        if n % i == 0:\n            pf.append(i)\n        i += 1\n    if pf[-1] > n:\n        return str(n)\n    return str(pf[-2])\n\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            if i % j == 0:\n                dp[i] = max(dp[i], dp[j] + i // j)\n    return dp[n]"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = int(n ** 0.5)\n    return str(n * n)\n\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport math\nimport sys\nimport collections\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [i for i in range(n, 0, -1) if not i & (i - 1)]\n    return str(nums[0])"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return 'No'\n    elif n == 1:\n        return 'Yes'\n    else:\n        seats = [int(ch) for ch in stdin]\n        for i, seat in enumerate(seats):\n            if i == 0:\n                continue\n            if i == n - 1:\n                continue\n            if seat == 1 and (seats[i - 1] == 0 or seats[i + 1] == 0):\n                return 'No'\n        return 'Yes'"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  chars = [c for c in stdin]\n  \n  # If there is only 1 chair, then it's maximal\n  if n == 1:\n    return 'Yes'\n  \n  # If there are 2 chairs, then it's maximal if the person at chair 2 is not adjacent to anyone\n  if n == 2:\n    return 'Yes' if chars[1] == '1' else 'No'\n  \n  # If there are 3 chairs, then it's maximal if the person at chair 2 and 3 is not adjacent to anyone\n  if n == 3:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' else 'No'\n  \n  # If there are 4 chairs, then it's maximal if the person at chair 2 and 3 is not adjacent to anyone\n  if n == 4:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' else 'No'\n  \n  # If there are 5 chairs, then it's maximal if the person at chair 2, 3 and 4 is not adjacent to anyone\n  if n == 5:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' else 'No'\n  \n  # If there are 6 chairs, then it's maximal if the person at chair 2, 3, 4 and 5 is not adjacent to anyone\n  if n == 6:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' else 'No'\n  \n  # If there are 7 chairs, then it's maximal if the person at chair 2, 3, 4, 5 and 6 is not adjacent to anyone\n  if n == 7:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' else 'No'\n  \n  # If there are 8 chairs, then it's maximal if the person at chair 2, 3, 4, 5, 6 and 7 is not adjacent to anyone\n  if n == 8:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' and chars[7] == '1' else 'No'\n  \n  # If there are 9 chairs, then it's maximal if the person at chair 2, 3, 4, 5, 6, 7 and 8 is not adjacent to anyone\n  if n == 9:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' and chars[7] == '1' and chars[8] == '1' else 'No'\n  \n  # If there are 10 chairs, then it's maximal if the person at chair 2, 3, 4, 5, 6, 7, 8 and 9 is not adjacent to anyone\n  if n == 10:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' and chars[7] == '1' and chars[8] == '1' and chars[9] == '1' else 'No'\n  \n  # If there are 11 chairs, then it's maximal if the person at chair 2, 3, 4, 5, 6, 7, 8, 9 and 10 is not adjacent to anyone\n  if n == 11:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' and chars[7] == '1' and chars[8] == '1' and chars[9] == '1' and chars[10] == '1' else 'No'\n  \n  # If there are 12 chairs, then it's maximal if the person at chair 2, 3, 4, 5, 6, 7, 8, 9, 10 and 11 is not adjacent to anyone\n  if n == 12:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' and chars[7] == '1' and chars[8] == '1' and chars[9] == '1' and chars[10] == '1' and chars[11] == '1' else 'No'\n  \n  # If there are 13 chairs, then it's maximal if the person at chair 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 and 12 is not adjacent to anyone\n  if n == 13:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' and chars[7] == '1' and chars[8] == '1' and chars[9] == '1' and chars[10] == '1' and chars[11] == '1' and chars[12] == '1' else 'No'\n  \n  # If there are 14 chairs, then it's maximal if the person at chair 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 and 13 is not adjacent to anyone\n  if n == 14:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' and chars[7] == '1' and chars[8] == '1' and chars[9] == '1' and chars[10] == '1' and chars[11] == '1' and chars[12] == '1' and chars[13] == '1' else 'No'\n  \n  # If there are 15 chairs, then it's maximal if the person at chair 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 and 14 is not adjacent to anyone\n  if n == 15:\n    return 'Yes' if chars[1] == '1' and chars[2] == '1' and chars[3] == '1' and chars[4] == '1' and chars[5] == '1' and chars[6] == '1' and chars[7] == '1' and chars[8] == '1' and chars[9] == '1"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_chairs = int(stdin)\n    seats = stdin\n\n    # 1. Create seats list\n    # 2. Iterate over seats, first value is the number of people in the seat\n    # 3. Create a list of lists, each list will contain the seats \n    # 4. Loop through seats\n    # 5. Add people to each list based on number of people in the seat and add to the right of each list\n    # 6. \n    # 7.\n\n    seats = [list(seats[i:i+num_chairs]) for i in range(0,len(seats),num_chairs)]\n\n    for row in range(num_chairs):\n        for seat in range(len(seats[row])):\n            if seat!= len(seats[row]) - 1:\n                if seats[row][seat] == '1' and seats[row][seat + 1] == '1':\n                    seats[row][seat + 1] = '1'\n                    seats[row][seat] = '1'\n                elif seats[row][seat] == '1' and seats[row][seat + 1] == '0':\n                    seats[row][seat + 1] = '1'\n\n    for row in seats:\n        if '0' in row:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (\n        not 1 <= n <= 1000\n        or any(\n            not stdin[i - 1] == stdin[i]\n            for i in range(n)\n            if i - 1 >= 0 and i + 1 < n\n        )\n        or any(\n            not stdin[i - 1] == stdin[i]\n            for i in range(n)\n            if i - 1 >= 0 and i + 2 < n\n        )\n    ):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_chairs = int(stdin)\n    chairs = stdin\n    empty_chair = 0\n    occupied_chair = 0\n    #print(chairs)\n    for i in range(0, num_chairs):\n        #print(chairs[i])\n        if chairs[i] == '0':\n            empty_chair += 1\n        elif chairs[i] == '1':\n            occupied_chair += 1\n    if empty_chair == 1 and occupied_chair == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n\"\"\"\ntest 1\ninput: 101\noutput: Yes\n\ntest 2\ninput: 10001\noutput: No\n\ntest 3\ninput: 5\noutput: Yes\n\"\"\"\n\n\n\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == \"101\" else \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    lst: List[int] = [int(i) for i in stdin]\n    if max(lst) == 0:\n        return 'Yes'\n    if max(lst) == 1:\n        return 'No'\n\n    if n == 2:\n        return 'No'\n    if lst[0] == 1 and lst[1] == 1:\n        return 'No'\n    if n == 3:\n        return 'Yes'\n    if lst[0] == 0:\n        return 'No'\n    if lst[1] == 0:\n        return 'Yes'\n    if lst[2] == 0:\n        return 'No'\n    if lst[3] == 0:\n        return 'Yes'\n    if lst[0] == 1 and lst[2] == 1:\n        return 'No'\n    if lst[0] == 1 and lst[3] == 1:\n        return 'No'\n    if lst[1] == 1 and lst[2] == 1:\n        return 'No'\n    if lst[1] == 1 and lst[3] == 1:\n        return 'No'\n    if lst[0] == 0 and lst[1] == 0 and lst[2] == 0:\n        return 'No'\n    if lst[0] == 0 and lst[1] == 0 and lst[3] == 0:\n        return 'Yes'\n    if lst[0] == 0 and lst[2] == 0 and lst[3] == 0:\n        return 'Yes'\n    if lst[0] == 0 and lst[1] == 0 and lst[2] == 1:\n        return 'No'\n    if lst[0] == 0 and lst[1] == 0 and lst[3] == 1:\n        return 'No'\n    if lst[0] == 0 and lst[2] == 0 and lst[3] == 1:\n        return 'No'\n    if lst[0] == 1 and lst[1] == 1 and lst[2] == 1:\n        return 'No'\n    if lst[0] == 1 and lst[1] == 1 and lst[3] == 1:\n        return 'No'\n    if lst[1] == 1 and lst[2] == 1 and lst[3] == 1:\n        return 'No'\n    if lst[0] == 1 and lst[1] == 1 and lst[2] == 0:\n        return 'No'\n    if lst[0] == 1 and lst[1] == 1 and lst[3] == 0:\n        return 'No'\n    if lst[0] == 1 and lst[2] == 1 and lst[3] == 0:\n        return 'No'\n    if lst[0] == 1 and lst[1] == 1 and lst[2] == 1:\n        return 'No'\n    return 'Yes'\n\n\"\"\"\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return ''"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    row = [int(char) for char in stdin]\n    return \"No\" if max_empty_chair(row) < 2 else \"Yes\"\n    \ndef"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n = int(lines[0])\n\n    a = list(map(int, lines[1].split()))\n\n    k = n\n\n    i = 2\n    while k <= n:\n        if (a[i - 1] - a[0]) % k == 0:\n            i += 1\n        else:\n            k += 1\n    return str(n - i + 1) + '\\n' +''.join(map(str, range(1, n - i + 2)))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    x = [0] + a + [0]\n    k = n\n    while k > 0:\n        x = [(x[i - 1] + x[i]) % k + x[i] for i in range(1, n + 1)]\n        x = [0] + x\n        k -= 1\n    return''.join([str(i) for i in x[1:-1]])\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split(' ')]\n    a = []\n    k = 1\n    while k <= n:\n        a.append(sum([x[i] for i in range(k - 1, n, k)]) + sum(a[:k - 1]))\n        k += 1\n    print(len(set(a)))\n    print(*sorted(set(a)))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = set()\n    for i in range(N):\n        for j in range(i+1, N+1):\n            if a[i] + a[i+1]*(j-1) == 0:\n                l.add(j)\n    print(len(l))\n    print(' '.join(map(str, sorted(l))))\n    return ''\n\nsolution('5\\n1 2 3 4 5')\nsolution('5\\n1 3 5 6 8')\nsolution('3\\n1 5 3')"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    print(len([k for k in range(1, n + 1) if sum(arr[i] - arr[i - k] for i in range(k, n + 1)) == 0]))\n    return str(len([k for k in range(1, n + 1) if sum(arr[i] - arr[i - k] for i in range(k, n + 1)) == 0]))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    finds the correct k in the lost array\n    \"\"\"\n    n, *a = list(map(int, stdin.split('\\n')[0].split()))\n    a.sort()\n    k = 0\n    for i in range(1, n + 1):\n        if a[i - 1] + k == a[i] * (i + 1):\n            k += 1\n        else:\n            break\n    return str(k) +'' + str(a[:k]).replace(' ', ',')"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.split(\"\\n\")[0])\n    x = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    k = int(x[0] / (x[0] - x[-1]))\n    if k == l:\n        return str(k)\n    else:\n        if (l - k) % k == 0:\n            return str(k) + \" \" + str(l - k)\n        else:\n            return str(l - k)\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # split a string into a list\n    # l = stdin.split()\n    # convert a list of strings to a list of integers\n    # b = [int(i) for i in l]\n    # b = [int(i) for i in stdin.split()]\n    # or a one-liner\n    b = [int(i) for i in stdin.split()]\n    #print(b)\n    #print(sum(b))\n    # Sort list\n    b.sort()\n    #print(b)\n    if sum(b) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split(' ')]\n    min_score = arr[0]\n    arr = arr[1:]\n    arr.sort()\n    team1 = 0\n    team2 = 0\n    for i in range(6):\n        team1 += arr[i]\n        team2 += arr[-1-i]\n    if team1 == team2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if max(map(int, stdin.split())) == sum(map(int, stdin.split()))/3 else 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(n) for n in stdin.split(\" \")]\n    team1 = sum(a[:3]) // 3\n    team2 = sum(a[3:]) // 3\n    if team1 == team2:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # your code here\n    stdin = list(map(int, stdin.split()))\n    stdin.sort(reverse=True)\n    score = sum(stdin[:3])\n    for i in range(3, len(stdin)):\n        if sum(stdin[:i]) == score:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n---- SOLUTION ----\n\nstdin = [int(s) for s in stdin.split()]\n\nfor i in range(6):\n    for j in range(i + 1, 6):\n        for k in range(j + 1, 6):\n            if stdin[i] + stdin[j] + stdin[k] == sum(stdin):\n                return \"YES\"\n\nreturn \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split(' ')))\n    s.sort()\n    if s[5] % 2:\n        return 'NO'\n    return 'YES' if s[3] == s[4] else 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(\" \")\n    if arr[-1] == \"1\":\n        return \"YES\"\n    return \"NO\"\n    \ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(s) for s in stdin.split(' ')]\n    # x, y = divmod(r, 3)\n    # return sum([1 for i in range(l, r+1) if not i % (2 ** x) or not i % (3 ** y)])\n    return sum([1 for i in range(l, r+1) if not i % 2 or not i % 3])\n\n\n\nimport math\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_2_3_integer(n: int) -> bool:\n        divs = get_prime_divisors(n)\n        return len(divs) == 3 and 2 in divs and 3 in divs\n\n    def is_2_3_integer_with_prime(n: int) -> bool:\n        divs = get_prime_divisors(n)\n        return 2 in divs and 3 in divs\n\n    def is_2_3_integer_with_prime_divisors(n: int) -> bool:\n        divs = get_prime_divisors(n)\n        return len([d for d in divs if d in (2, 3)]) == 2\n\n    def is_2_3_integer_with_prime_divisors_two(n: int) -> bool:\n        divs = get_prime_divisors(n)\n        return len([d for d in divs if d in (2, 3)]) == 2\n\n    def is_2_3_integer_with_prime_divisors_two_three(n: int) -> bool:\n        divs = get_prime_divisors(n)\n        return len([d for d in divs if d in (2, 3)]) == 2\n\n    def is_2_3_integer_with_prime_divisors_two_three_four(n: int) -> bool:\n        divs = get_prime_divisors(n)\n        return len([d for d in divs if d in (2, 3, 4)]) == 3\n\n    def is_2_3_integer_with_prime_divisors_two_three_four_five(n: int) -> bool:\n        divs = get_prime_divisors(n)\n        return len([d for d in divs if d in (2, 3, 4, 5)]) == 4\n\n    return sum(\n        1\n        for n in range(l, r + 1)\n        if is_2_3_integer_with_prime_divisors_two_three_four_five(n)\n    )\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(sys.stdin.readline()))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_power_of_three(n: int) -> bool:\n        return n > 0 and 3 ** 19 % n == 0\n\n    def is_power_of_two(n: int) -> bool:\n        return n > 0 and 2 ** 19 % n == 0\n\n    def is_power_of_two_and_three(n: int) -> bool:\n        return n > 0 and 2 ** 19 % n == 0\n\n    def count_two_three_integers(n: int, m: int) -> int:\n        count: int = 0\n        for i in range(n, m + 1):\n            if is_power_of_three(i) and is_power_of_two_and_three(i):\n                count += 1\n\n        return count\n\n    l: int = int(stdin.readline().strip())\n    r: int = int(stdin.readline().strip())\n    return str(count_two_three_integers(l, r))\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    l = int(input[0])\n    r = int(input[1])\n    count = 0\n    for i in range(l, r+1):\n        if is_2_3(i):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(count_2_3_integers(l, r))\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom typing import List\n\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt', 'w')\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    return str(count_2_3(l, r))\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    a = 0\n    for i in range(l, r + 1):\n        if i == 1:\n            continue\n        if i % 2 == 0:\n            continue\n        if i % 3 == 0:\n            continue\n        else:\n            a += 1\n    return str(a)\n\n----Second solution----\n\ndef"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = str(n)\n    count = 0\n    while k >= int(s[0]):\n        k -= int(s[0])\n        s = str(int(s) - 1)\n        count += 1\n    return count\n    \ndef"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    if k == 0:\n        return n\n    return n - 1 - k\n    \n    \n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(n - k)\n\n\ndef"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = stdin[0]\n    n, k = map(int, stdin.split())\n    count = 0\n    while k > 1:\n        count += k - 1\n        k -= 1\n        if k == 0:\n            break\n        k += 1\n    print(count)\n    '''\n    n, k = map(int, stdin.split())\n    count = 0\n    while n > 0:\n        if n >= k:\n            count += n - 1\n            n = 0\n        else:\n            count += k - 1\n            n -= 1\n    print(count)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(s)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    print(k * (k + 1) // 2)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    print(k - (n - 1))\n    return \"\"\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    return str(n - 1 - k + 1)\n\nprint(solution(input()))"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split('\\n')[1].split(' ')) == 3)\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given line segments in a triangle, find if 3 of them can form a non-degenerate triangle\"\"\"\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    lines = list(map(int, lines[1].split()))\n    max_a = max(lines)\n    min_a = min(lines)\n\n    for a in range(min_a, max_a+1):\n        if a in lines:\n            lines.remove(a)\n\n    return \"YES\" if len(lines) == 2 else \"NO\""
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n\n    nums.sort()\n    if nums[0] < 1 or nums[1] < 1 or nums[2] < 1 or nums[3] < 1:\n        return 'NO'\n\n    if nums[0] + nums[1] > nums[2] and nums[0] + nums[2] > nums[1] and nums[2] + nums[3] > nums[0]:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    A.sort()\n    A_len = len(A)\n    i = 0\n    if (A_len == 3):\n        if (A[0] < A[1] + A[2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        while i < A_len - 2:\n            j = i + 1\n            while j < A_len - 1:\n                k = j + 1\n                while k < A_len:\n                    if (A[i] < A[j] + A[k]):\n                        print(\"YES\")\n                        return\n                    k += 1\n                j += 1\n            i += 1\n        print(\"NO\")"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.split()[0])\n    line = stdin.split()[1:]\n    line.sort()\n    \n    if len(line)!= n:\n        return \"NO\"\n    \n    if line[0] + line[1] > line[2]:\n        return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 3:\n        return \"YES\" if a[0] + a[1] > a[2] and a[2] + a[1] > a[0] and a[0] + a[2] > a[1] else \"NO\"\n    return \"NO\"\n\"\"\""
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    s = sum(arr)\n    if 3 * max(arr) < s:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums = sorted(nums)\n    i = 0\n    while i + 1 < n and nums[i] < nums[i + 1]:\n        i += 1\n    if i == n - 1:\n        return \"YES\"\n    while i + 1 < n and nums[i] < nums[i + 2]:\n        i += 1\n    if i == n - 2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if 2*x < y:\n        return \"No\"\n    elif y-x > 2*x:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'Yes' if stdin[1] > stdin[0] else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return 'Yes' if x + y <= 3 and x % 2 == 0 else 'No'\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nSets up a class with three static int variables, X, Y, and Z. X and Y are the number of copies and the number of original toys respectively, and Z is the total number of toys. Defines a function called canMake as well as a function called make.\n\nIf Z >= Y and X >= Y then the function canMake returns \"Yes\". Otherwise, the function canMake returns \"No\".\n\nIf X >= Y then the function make takes X copies and Y original toys and adds them to the original list. It then returns the list.\n\nOtherwise, the function make takes Y copies and X original toys and adds them to the copied list. It then returns the list.\n\n---\n\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin.split()[0]) * 2 <= int(stdin.split()[1]) else \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if y > x:\n        return \"No\"\n    elif x % y == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return 'Yes' if (x + y) % 2 == 0 and 2 * x <= y else 'No'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    #x, y = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if x < 2 or y < 1 or y > x:\n        return 'No'\n    return 'Yes' if x % (y - 1) == 0 or x % (y + 1) == 0 else 'No'\n\nsolution(stdin)"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.count('1') >= stdin.count('0') else \"No\"\n\"\"\""
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    arr.sort()\n    arr.reverse()\n    for i in range(k):\n        if arr[0] + 1 == arr[1]:\n            arr[0] += 1\n            arr.pop(0)\n    return str(sum(arr))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        if a[i] < 100:\n            cnt += 1\n            a[i] += 1\n    a.sort(reverse=True)\n    while k > 0 and cnt > 0:\n        cnt -= 1\n        a[0] += 1\n        for i in range(1, n):\n            if a[i] == a[i - 1]:\n                cnt += 1\n                if k < cnt:\n                    break\n                a[i] += 1\n    return a[0]\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    petya = sorted(map(int, stdin.split(' ')[1::]))\n    dif = [x - y for x, y in zip(petya, petya[1:])]\n    if sum(dif) <= 0:\n        return n * 10 + sum(dif)\n    elif k == 0:\n        return max(petya)\n    else:\n        return min(max(petya) + k * 10, sum(petya) + k * len(petya))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.split())\n    arr = map(int, stdin.split())\n    arr = sorted(arr, reverse=True)\n    max_rating = arr[0]\n    if n < 2:\n        return max_rating\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] + arr[i - 1] > 100:\n                max_rating = max(max_rating, (arr[i] + arr[i - 1]) // 10)\n                break\n            max_rating = max(max_rating, arr[i])\n    return max_rating\n    '''\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr, reverse=True)\n    rating = arr[0]\n    i = 0\n    while k and i < n:\n        rating = max(rating, arr[i] // 10) + arr[i] % 10\n        i += 1\n        k -= 1\n    return rating\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a = [x for x in a if x <= 100]\n    sum = 0\n    if k == 0:\n        return sum\n    if n == 1:\n        return a[0]\n    l = []\n    for i in range(n):\n        sum += int(a[i] / 10)\n        l.append(int(a[i] / 10))\n    l.sort(reverse=True)\n    for i in range(n):\n        sum += int(l[i] * 10)\n        if sum >= 100:\n            sum -= int(l[i] * 10)\n            k -= 1\n            break\n        else:\n            sum -= int(l[i] * 10)\n    return sum\n\nprint(solution(stdin))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A method that implements the solution of the task\n    :param stdin:\n    :return:\n    \"\"\"\n    return\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    i = 0\n    c = 0\n    while i < k:\n        if a[i] < 101:\n            c += (a[i] // 10)\n            if i < k - 1:\n                a[i] += 1\n            else:\n                a[i] = 0\n                break\n            i += 1\n        else:\n            if i < k - 1:\n                a[i] = 0\n                i += 1\n            else:\n                break\n    for x in a:\n        c += (x // 10)\n    return c"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    skills = map(int, stdin.split(' '))\n    skills = sorted(skills)\n    print(skills)\n    if len(skills) > 2:\n        k = k % (len(skills) - 1)\n        print(k)\n        print(skills)\n    while k:\n        skills[0] += 1\n        if skills[0] == skills[1]:\n            k -= 1\n            skills[0] += 1\n            if skills[0] == skills[1]:\n                k -= 1\n                skills[0] += 1\n        if k == 0:\n            break\n    return sum(skills)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    skills = [int(x) for x in stdin.split(' ')]\n    def f(s: int, p: int):\n        return (s + p) // 10 * 10\n    s = 0\n    for i in range(n):\n        if k > 0:\n            s = f(skills[i], s)\n            k -= 1\n        else:\n            break\n    return s\n\n\nprint(solution('7 9'))\nprint(solution('17 15 19'))\nprint(solution('99 100'))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2 4\\n7 9\")\n    2\n    >>> solution(\"3 8\\n17 15 19\")\n    5\n    >>> solution(\"2 2\\n99 100\")\n    20\n    >>> solution(\"2 1\\n99 100\")\n    20\n    '''\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    best = max(a[i] // 10 + a[i + 1] // 10 for i in range(n - 1))\n    return best + min(k, 100 - sum(a))\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution here\n    '''\n    num_1 = int(stdin[0])\n    num_2 = int(stdin[1])\n    \n    first_list = stdin[2].split()\n    second_list = stdin[3].split()\n    \n    def is_pretty(number):\n        for digit in first_list:\n            if digit in str(number):\n                return True\n            else:\n                pass\n        return False\n\n    for number in range(num_1, num_2 + 1):\n        if is_pretty(number):\n            return number\n    \n    return \"No pretty integers in the given range.\"\n    \n    \ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_list = list(map(int, stdin.split()[1].split(',')))\n    b_list = list(map(int, stdin.split()[2].split(',')))\n    res = float('inf')\n    for a in a_list:\n        for b in b_list:\n            if (a * 10 + b) < res and (a * 10 + b) % 2 == 0:\n                res = a * 10 + b\n    return str(int(res))\n\n\"\"\""
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(1, 10 ** (a - 1)):\n        digits = set(str(i))\n        if all(digit in digits for digit in a):\n            if all(digit in digits for digit in b):\n                res = i\n                break\n    return str(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 3\\n4 2\\n5 7 6')\n    '25'\n    >>> solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1')\n    '1'\n    >>> solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 9')\n    '1'\n    >>> solution('8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 9\\n1 0')\n    '1'\n    \"\"\"\n    set_1 = set(stdin.split('\\n')[0].split(' '))\n    set_2 = set(stdin.split('\\n')[1].split(' '))\n    for i in range(10):\n        if i not in set_1:\n            set_2.discard(str(i))\n        elif i not in set_2:\n            set_1.discard(str(i))\n\n    return str(10 ** max(len(set_1), len(set_2)) + 1)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()[1:]))\n    b = sorted(map(int, stdin.split()[1:-1]), reverse=True)\n\n    # \u89e3\u6cd5\u4e00\n    # dic = {}\n    #\n    # for i in a:\n    #     for j in b:\n    #         key = i * 10 + j\n    #         if key in dic.keys():\n    #             dic[key] += 1\n    #         else:\n    #             dic[key] = 1\n    #\n    # dic_nums = [i for i in dic.keys() if dic[i] >= 1]\n    #\n    # if len(dic_nums) == 0:\n    #     return \"1\"\n    #\n    # dic_nums.sort()\n    #\n    # i = 1\n    # while True:\n    #     if dic_nums[i] <= i:\n    #         return str(dic_nums[i])\n    #     else:\n    #         i += 1\n\n    # \u89e3\u6cd5\u4e8c\n    # \u5148\u6392\u5e8f\n    # a.sort()\n    # b.sort(reverse=True)\n    # \u518d\u6392\u5e8f\n\n    a = sorted(a)\n    b = sorted(b, reverse=True)\n\n    # \u4e00\u5b9a\u8981\u9009\u62e9\u5927\u7684\u6570\u5b57\n    a.append(9)\n    b.append(9)\n    res = a[0] * 10 + b[0]\n    # \u4e3a\u4ec0\u4e48\u8981\u52a0\u4e00\u5462\uff1f\n    # \u56e0\u4e3a\u4ece\u5927\u6570\u5230\u5c0f\u6570\u7684\u8fc7\u7a0b\u4e2d\n    # \u6709\u4e00\u4e2a\u6570\u5b57\u88ab\u66ff\u6362\u4e3a0\n    # \u8fd9\u65f6\u5019\u5c0f\u7684\u6570\u5b57\u5c31\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e86\n    # \u6240\u4ee5\u8981\u628a\u5c0f\u7684\u6570\u5b57\u4e5810\u518d\u52a0\u4e0a\u5927\u7684\u6570\u5b57\n    for i in a[1:]:\n        # res *= 10 + i\n        for j in b:\n            res = max(res, i * 10 + j)\n    return str(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a = list(line[1])\n    b = list(line[2])\n    min_num = float('inf')\n    for i in range(10):\n        if i not in a:\n            continue\n        for j in range(10):\n            if j not in b:\n                continue\n            temp = int(f'{i}{j}')\n            if temp <= min_num:\n                min_num = temp\n    return min_num\n\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = set(map(int, stdin.split()[1:]))\n    b = set(map(int, stdin.split()[m + 1:]))\n    c = list(set(a) | set(b))\n    return min([i for i in range(n + 1) if any(str(i).count(str(x)) >= 1 for x in c)])\n\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets a list of digits, returns the smallest positive pretty integer\"\"\"\n    # get n and m from stdin\n    n, m = map(int, stdin.split('\\n')[:2])\n    # get the digits from stdin\n    nums_a = set(map(int, stdin.split('\\n')[2:]))\n    nums_b = set(map(int, stdin.split('\\n')[2:]))\n\n    # sort the lists and create an empty list\n    nums_a = sorted(nums_a)\n    nums_b = sorted(nums_b)\n    res = []\n\n    # look for a perfect match with an existing value\n    for num in nums_a:\n        if str(num) not in nums_b:\n            continue\n        else:\n            res.append(num)\n\n    # look for a perfect match with a value in the second list\n    for num in nums_b:\n        if str(num) not in nums_a:\n            continue\n        else:\n            res.append(num)\n\n    # add the remaining values to res\n    for num in range(10):\n        if str(num) not in nums_a and str(num) not in nums_b:\n            res.append(num)\n\n    # find the smallest positive integer\n    res = sorted(res)\n    res = list(map(str, res))\n    print(''.join(res))"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    l1 = list(map(int, stdin.split(' ')[1::]))\n    l2 = list(map(int, stdin.split(' ')[2::]))\n\n    l1.sort(reverse=True)\n    l2.sort(reverse=True)\n    \n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if l1[j] > l2[i]:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of problems that can be solved by Limak if he gets to the party at midnight.\"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(n - min(k // 5, n - k // 10 + 1))\n\ndef"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    k //= 5\n    s = [0]\n    for i in range(1, n + 1):\n        s.append(s[i - 1] + 5 * i)\n    return str(s[k] // n)\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(n // max(k - n % (k - n), 0) + 1)"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(max(0, k - n*5 + n))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(\" \")\n    n = int(lst[0])\n    k = int(lst[1])\n    ans = 0\n    for i in range(1, n + 1):\n        ans += 5 * (i - 1)\n    if ans < k:\n        return str(n)\n    else:\n        return str(ans - k)\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    return n + k - n * n // 2 - 2 * (k - n * n // 2)"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    return str(k // (k - n * 5 + 1))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer that represents the maximum number of problems Limak\n    can solve so that he will be able to get to the party at midnight.\n\n    >>> solution('4 190')\n    4\n    >>> solution('3 222')\n    2\n    >>> solution('7 1')\n    7\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    s = (24 * 60) - k\n    s //= 5\n    print(s // n)\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    m = min(m, n - 1)\n    return str(max(0, (n + m - 1) // m))\n\nprint(solution(input()))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    return str(ans)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count(\"a\"))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return '{}'.format(stdin)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    divisors = []\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    return len(set(i for i in range(1, b + 1) if lcm(i, b) % i == 0))\n\ndef"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    # \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u043e\u043b\u044c, \u0444\u043e\u0440\u043c\u0443\u043b\u0430 \u0432\u044b\u0448\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u043a \u0444\u043e\u0440\u043c\u0443\u043b\u0435 \u0432\u044b\u0448\u0435.\n    return str(b - (b // 10))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    return int(10 ** 18 / b) + 1"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = n\n    m = min(a, b)\n    s = 0\n    while m >= a:\n        s += m // a\n        a *= n\n    return s\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nn = int(input())\nstr = input()\ncount = 0\nfor i in range(n):\n    if str[i] == '<' and str[i+1] == '>':\n        count += 1\nprint(count)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution only considers a straight path of bumpers. That is, a path is valid if there is no place for the ball to move to when it hits a bumper.\n    '''\n    bumpers = stdin.split('\\n')[0]\n    if bumpers.find('<') == -1 and bumpers.find('>') == -1:\n        return str(0)\n    else:\n        num_of_bumpers = len(bumpers)\n        return str(num_of_bumpers - 1)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin.count('>')\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    left = []\n    right = []\n    for i in range(n):\n        if s[i] == '<':\n            left.append(i)\n        if s[i] == '>':\n            right.append(i)\n    left.sort(reverse=True)\n    right.sort()\n    res = set()\n    i = 0\n    while i < len(left) and i < len(right):\n        if left[i] < right[i]:\n            res.add(left[i])\n            i += 1\n        else:\n            res.add(right[i])\n            i += 1\n    while i < len(right):\n        res.add(right[i])\n        i += 1\n    while i < len(left):\n        res.add(left[i])\n        i += 1\n    return len(res)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    bumpers = stdin\n    pos = 0\n    for b in bumpers:\n        if b == '<':\n            pos = pos - 1\n        elif b == '>':\n            pos = pos + 1\n    return pos\n\"\"\"\n\n\ndef"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bumpers = stdin.split()[1]\n    l = len(bumpers)\n    if bumpers == \"<>\":\n        return n\n    bumpers = [(True if x == \"<\" else False) for x in bumpers]\n    right_bumpers = [False]\n    left_bumpers = [False]\n    for i in range(1, n):\n        right_bumpers.append(bumpers[i] and not right_bumpers[i - 1])\n        left_bumpers.append(bumpers[l - i - 1] and not left_bumpers[i - 1])\n    ans = 0\n    for i in range(n):\n        if right_bumpers[i] and left_bumpers[n - i - 1]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    m = stdin.split('\\n')[1]\n    x = 0\n    for i in m:\n        if i == '>':\n            x += 1\n        else:\n            x -= 1\n    if x < 1:\n        x = 1\n    if x > n:\n        x = n\n    return str(x)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import numpy as np\n    b = np.array(list(stdin))\n    a = np.where(b == '>')[0]\n    b = np.where(b == '<')[0]\n    return a[1] + b[1]\n    # return list(set(a[0] + b[0]))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, s = stdin.split()\n    return s.count('<') + s.count('>')\n    \ndef"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = stdin.readline()\n    line_1 = [int(x) for x in line_1.split()]\n    n = line_1[0]\n    line_2 = stdin.readline()\n    line_2 = [int(x) for x in line_2.split()]\n    sticks = sorted(line_2)\n    sticks.append(max(sticks) + 1)\n    memo = {}\n    return max_area(n, sticks, memo)\n\ndef"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline())\n    sticks = sorted(map(int, stdin.readline().split()))\n    area, max_area = 0, 0\n    for i in range(n - 1, -1, -1):\n        area += sticks[i]\n        if area > max_area:\n            max_area = area\n    return max_area\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.split('\\n')[0])\n    arr = stdin.split('\\n')[1].split()\n    arr = [int(i) for i in arr]\n    # print(n, arr)\n    total_area = 0\n    # print(arr)\n    for i in range(n):\n        if arr[i] < 2:\n            continue\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                continue\n            total_area += arr[j] * arr[i]\n    # print(total_area)\n    return str(total_area)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '8'"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l.sort()\n    left = 0\n    right = n-1\n    max_l = 0\n    max_a = 0\n    while left <= right:\n        if l[left] <= l[right]:\n            s = l[left]*l[right]\n            max_l = max(max_l, l[left], l[right])\n            max_a = max(max_a, max_l * max_l)\n            left += 1\n        else:\n            s = l[left]*l[right]\n            max_l = max(max_l, l[left], l[right])\n            max_a = max(max_a, max_l * max_l)\n            right -= 1\n    return max_a\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(rect: tuple[int, int, int, int]) -> bool:\n        for i in range(1, 4):\n            if rect[i - 1] >= rect[i]:\n                return False\n        return True\n\n    rectangles = list(map(int, stdin.split()))\n    if len(rectangles) == 1:\n        return str(rectangles[0] ** 2)\n    rectangles.sort()\n    answer = 0\n    while rectangles:\n        rectangle = (\n            rectangles.pop(0),\n            rectangles.pop(0),\n            rectangles.pop(0),\n            rectangles.pop(0),\n        )\n        if is_valid(rectangle):\n            answer += (rectangle[0] * rectangle[1] * rectangle[2])\n    return str(answer)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    from collections import deque\n    from functools import reduce\n\n    def get_area(stick_len: int):\n        return stick_len * stick_len\n\n    def get_max_rectangle_area(stick_lens: [int], stick_len_to_len: dict):\n        used_sticks = deque([set() for _ in range(n)])\n        max_rectangle_area = 0\n        for stick_len in stick_lens:\n            for i, used_stick in enumerate(used_sticks):\n                if stick_len + 1 in used_stick:\n                    used_stick.remove(stick_len + 1)\n                    used_stick.add(stick_len)\n                elif stick_len - 1 in used_stick:\n                    used_stick.remove(stick_len - 1)\n                    used_stick.add(stick_len)\n                else:\n                    used_sticks[i].add(stick_len)\n            rectangle_area = reduce(lambda a, b: a + b, [get_area(l) for l in used_sticks[i]])\n            max_rectangle_area = max(max_rectangle_area, rectangle_area)\n        return max_rectangle_area\n\n    n = int(stdin.readline())\n    stick_len_to_len = {}\n    for i, stick_len in enumerate(map(int, stdin.readline().split())):\n        if stick_len not in stick_len_to_len:\n            stick_len_to_len[stick_len] = [i]\n        else:\n            stick_len_to_len[stick_len].append(i)\n    stick_lens = list(stick_len_to_len.keys())\n    stick_lens.sort()\n    return str(get_max_rectangle_area(stick_lens, stick_len_to_len))"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    res = 0\n    for i in range(n - 1):\n        res += (l[i] * l[i + 1])\n    return res"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l.sort()\n    dp = [0] * n\n    dp[0] = l[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], l[i] * (i + 1))\n    return dp[n - 1]\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_list = [stdin[x:x+6] for x in range(0, len(stdin), 6)]\n    num_list = [int(x) for x in num_list]\n    num_list = [chr(ord(\"a\")+x) for x in num_list]\n    return \"\".join(num_list)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(len(stdin)):\n        if stdin[i] == 'a':\n            stdin[i] = 1\n        elif stdin[i] == 'b':\n            stdin[i] = 0\n        elif stdin[i] == 'c':\n            stdin[i] = 2\n        elif stdin[i] == 'd':\n            stdin[i] = 3\n        elif stdin[i] == 'e':\n            stdin[i] = 4\n        elif stdin[i] == 'f':\n            stdin[i] = 5\n        elif stdin[i] == 'g':\n            stdin[i] = 6\n        elif stdin[i] == 'h':\n            stdin[i] = 7\n        elif stdin[i] == 'i':\n            stdin[i] = 8\n        elif stdin[i] == 'j':\n            stdin[i] = 9\n        elif stdin[i] == 'k':\n            stdin[i] = 10\n        elif stdin[i] == 'l':\n            stdin[i] = 11\n        elif stdin[i] =='m':\n            stdin[i] = 12\n        elif stdin[i] == 'n':\n            stdin[i] = 13\n        elif stdin[i] == 'o':\n            stdin[i] = 14\n        elif stdin[i] == 'p':\n            stdin[i] = 15\n        elif stdin[i] == 'q':\n            stdin[i] = 16\n        elif stdin[i] == 'r':\n            stdin[i] = 17\n        elif stdin[i] =='s':\n            stdin[i] = 18\n        elif stdin[i] == 't':\n            stdin[i] = 19\n        elif stdin[i] == 'u':\n            stdin[i] = 20\n        elif stdin[i] == 'v':\n            stdin[i] = 21\n        elif stdin[i] == 'w':\n            stdin[i] = 22\n        elif stdin[i] == 'x':\n            stdin[i] = 23\n        elif stdin[i] == 'y':\n            stdin[i] = 24\n        elif stdin[i] == 'z':\n            stdin[i] = 25\n    sum = 0\n    for i in range(len(stdin)):\n        sum += stdin[i]\n    return sum\n        \nprint(solution(stdin = input()))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    mapping = {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h', 8: 'i', 9: 'j'}\n    mapping2 = {0: 'k', 1: 'l', 2:'m', 3: 'n', 4: 'o', 5: 'p', 6: 'q', 7: 'r', 8:'s', 9: 't', 10: 'u', 11: 'v', 12: 'w', 13: 'x', 14: 'y', 15: 'z'}\n    mapping3 = {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h', 8: 'i', 9: 'j', 10: 'k', 11: 'l', 12:'m', 13: 'n', 14: 'o', 15: 'p', 16: 'q', 17: 'r', 18:'s', 19: 't', 20: 'u', 21: 'v', 22: 'w', 23: 'x', 24: 'y', 25: 'z'}\n    mapping4 = {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h', 8: 'i', 9: 'j', 10: 'k', 11: 'l', 12:'m', 13: 'n', 14: 'o', 15: 'p', 16: 'q', 17: 'r', 18:'s', 19: 't', 20: 'u', 21: 'v', 22: 'w', 23: 'x', 24: 'y', 25: 'z', 26: 'a', 27: 'b', 28: 'c', 29: 'd', 30: 'e', 31: 'f', 32: 'g', 33: 'h', 34: 'i', 35: 'j', 36: 'k', 37: 'l', 38:'m', 39: 'n', 40: 'o', 41: 'p', 42: 'q', 43: 'r', 44:'s', 45: 't', 46: 'u', 47: 'v', 48: 'w', 49: 'x', 50: 'y', 51: 'z'}\n    mapping5 = {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h', 8: 'i', 9: 'j', 10: 'k', 11: 'l', 12:'m', 13: 'n', 14: 'o', 15: 'p', 16: 'q', 17: 'r', 18:'s', 19: 't', 20: 'u', 21: 'v', 22: 'w', 23: 'x', 24: 'y', 25: 'z', 26: 'a', 27: 'b', 28: 'c', 29: 'd', 30: 'e', 31: 'f', 32: 'g', 33: 'h', 34: 'i', 35: 'j', 36: 'k', 37: 'l', 38:'m', 39: 'n', 40: 'o', 41: 'p', 42: 'q', 43: 'r', 44:'s', 45: 't', 46: 'u', 47: 'v', 48: 'w', 49: 'x', 50: 'y', 51: 'z', 52: 'a', 53: 'b', 54: 'c', 55: 'd', 56: 'e', 57: 'f', 58: 'g', 59: 'h', 60: 'i', 61: 'j', 62: 'k', 63: 'l', 64:'m', 65: 'n', 66: 'o', 67: 'p', 68: 'q', 69: 'r', 70:'s', 71: 't', 72: 'u', 73: 'v', 74: 'w', 75: 'x', 76: 'y', 77: 'z', 78: 'a', 79: 'b', 80: 'c', 81: 'd', 82: 'e', 83: 'f', 84: 'g', 85: 'h', 86: 'i', 87: 'j', 88: 'k', 89: 'l', 90:'m', 91: 'n', 92: 'o', 93: 'p', 94: 'q', 95: 'r', 96:'s', 97: 't', 98: 'u', 99: 'v', 100: 'w', 101: 'x', 102: 'y', 103: 'z'}\n    mapping6 = {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h', 8: 'i', 9: 'j', 10: 'k', 11: 'l', 12:'m', 13: 'n', 14: 'o', 15: 'p', 16: 'q', 17: 'r', 18:'s', 19: 't', 20: 'u', 21: 'v', 22: 'w', 23: 'x', 24: 'y', 25: 'z', 26: 'a', 27: 'b', 28: 'c', 29: 'd', 30: 'e', 31: 'f', 32: 'g', 33: 'h', 34: 'i', 35: 'j', 36: 'k', 37: 'l', 38:'m', 39: 'n', 40: 'o', 41: 'p', 42: 'q', 43: 'r', 44:'s', 45: 't', 46: 'u', 47: 'v', 48: 'w', 49: 'x', 50: 'y', 51: 'z', 52: 'a', 53: 'b', 54: 'c', 55: 'd', 56: 'e', 57: 'f', 58: 'g', 59: 'h', 60: 'i', 61: 'j', 62: 'k', 63: 'l', 64:'m', 65: 'n', 66: 'o', 67: 'p', 68: 'q', 69: 'r', 70:'s', 71: 't', 72: 'u', 73: 'v', 74: 'w', 75: 'x', 76: 'y', 77: 'z', 78: 'a', 79: 'b', 80"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(lambda x: x.replace(\"a\", \"1\").replace(\"b\", \"2\").replace(\"c\", \"3\").replace(\"d\", \"4\").replace(\"e\", \"5\").replace(\"f\", \"6\").replace(\"g\", \"7\").replace(\"h\", \"8\").replace(\"i\", \"9\").replace(\"j\", \"10\"), stdin.split(\"\\n\")))\n    return str(sum(list(map(lambda x: int(x), lst))))\n\"\"\"\nimport unittest\n\nclass SolutionTest(unittest.TestCase):\n\n    def test_case_1(self):\n        stdin = \"3\\nabc\"\n        expected = \"47\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_2(self):\n        stdin = \"5\\nabcdef\"\n        expected = \"136542\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_3(self):\n        stdin = \"3\\naa\"\n        expected = \"44\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_4(self):\n        stdin = \"5\\nabcdefg\"\n        expected = \"120468\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_5(self):\n        stdin = \"1\\nj\"\n        expected = \"10\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_6(self):\n        stdin = \"7\\nbbbbbbbb\"\n        expected = \"800\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_7(self):\n        stdin = \"1\\n1\"\n        expected = \"1\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_8(self):\n        stdin = \"7\\n11111111\"\n        expected = \"7\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_9(self):\n        stdin = \"7\\n10111010\"\n        expected = \"29\"\n        self.assertEqual(solution(stdin), expected)\n\n    def test_case_10(self):\n        stdin = \"7\\n10111010\"\n        expected = \"29\"\n        self.assertEqual(solution(stdin), expected)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split(\"\\n\")[0].split(\" \")\n    first_number = [0 for _ in range(len(number))]\n    second_number = [0 for _ in range(len(number))]\n    third_number = [0 for _ in range(len(number))]\n    for num in number:\n        if num == '':\n            number.remove(num)\n    for i in range(0, len(number)):\n        if number[i] == \"a\":\n            first_number[i] = 1\n        if number[i] == \"b\":\n            first_number[i] = 2\n        if number[i] == \"c\":\n            first_number[i] = 3\n        if number[i] == \"d\":\n            first_number[i] = 4\n        if number[i] == \"e\":\n            first_number[i] = 5\n        if number[i] == \"f\":\n            first_number[i] = 6\n        if number[i] == \"g\":\n            first_number[i] = 7\n        if number[i] == \"h\":\n            first_number[i] = 8\n        if number[i] == \"i\":\n            first_number[i] = 9\n        if number[i] == \"j\":\n            first_number[i] = 10\n        if number[i] == \"a\":\n            second_number[i] = 11\n        if number[i] == \"b\":\n            second_number[i] = 12\n        if number[i] == \"c\":\n            second_number[i] = 13\n        if number[i] == \"d\":\n            second_number[i] = 14\n        if number[i] == \"e\":\n            second_number[i] = 15\n        if number[i] == \"f\":\n            second_number[i] = 16\n        if number[i] == \"g\":\n            second_number[i] = 17\n        if number[i] == \"h\":\n            second_number[i] = 18\n        if number[i] == \"i\":\n            second_number[i] = 19\n        if number[i] == \"j\":\n            second_number[i] = 20\n        if number[i] == \"a\":\n            third_number[i] = 21\n        if number[i] == \"b\":\n            third_number[i] = 22\n        if number[i] == \"c\":\n            third_number[i] = 23\n        if number[i] == \"d\":\n            third_number[i] = 24\n        if number[i] == \"e\":\n            third_number[i] = 25\n        if number[i] == \"f\":\n            third_number[i] = 26\n        if number[i] == \"g\":\n            third_number[i] = 27\n        if number[i] == \"h\":\n            third_number[i] = 28\n        if number[i] == \"i\":\n            third_number[i] = 29\n        if number[i] == \"j\":\n            third_number[i] = 30\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    for i in range(len(first_number)):\n        sum1 = sum1 + int(first_number[i])\n    for i in range(len(second_number)):\n        sum2 = sum2 + int(second_number[i])\n    for i in range(len(third_number)):\n        sum3 = sum3 + int(third_number[i])\n    print(min(sum1, sum2, sum3))\n\nsolution(input())\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = sorted(stdin)\n    count = 0\n    for i in b:\n        if i == '0':\n            count += 9\n        elif i == '1':\n            count += 2\n        elif i == '2':\n            count += 6\n        elif i == '3':\n            count += 4\n        elif i == '4':\n            count += 3\n        elif i == '5':\n            count += 5\n        elif i == '6':\n            count += 8\n        elif i == '7':\n            count += 7\n        elif i == '8':\n            count += 6\n        elif i == '9':\n            count += 0\n    return count\n\nprint(solution('51193037'))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = map(lambda x: ''.join(x.strip()), stdin.split('\\n'))\n    m = list(map(lambda x: [x, 0] if x.isdigit() else [x[0], x[1]], m))\n    m = map(lambda x: [x[0], int(''.join(x[0][1::]))], m)\n    m = list(map(lambda x: [x[0], x[1] * (x[1] - 1) // 2], m))\n    return ''.join(list(map(lambda x: str(x[1]), m)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def replace(s, i):\n        s = list(s)\n        s[i] = chr(ord('a') + i)\n        return ''.join(s)\n\n    stdin = stdin.split('\\n')\n    a = stdin[0].split('\\t')\n    a = [int(x) for x in a]\n    for i in range(1, len(a) + 1):\n        s = stdin[i]\n        n = 0\n        for j in s:\n            n += ord(j) - ord('0')\n        print(n)\n        print(replace(s, n % 10))\n        if replace(s, n % 10)!= replace(s, n % 10 + 1):\n            a[i - 1] = a[i - 1] * 10 + n % 10 + 1\n        else:\n            a[i - 1] = a[i - 1] * 10 + n % 10\n    return ''.join([str(x) for x in a])\n\n\ndef"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    s = inp[0]\n    s_s = list(s)\n    for i in range(len(s_s)):\n        if s_s[i].isnumeric() == True:\n            if int(s_s[i]) == 0:\n                s_s[i] = 'a'\n            elif int(s_s[i]) == 1:\n                s_s[i] = 'b'\n            elif int(s_s[i]) == 2:\n                s_s[i] = 'c'\n            elif int(s_s[i]) == 3:\n                s_s[i] = 'd'\n            elif int(s_s[i]) == 4:\n                s_s[i] = 'e'\n            elif int(s_s[i]) == 5:\n                s_s[i] = 'f'\n            elif int(s_s[i]) == 6:\n                s_s[i] = 'g'\n            elif int(s_s[i]) == 7:\n                s_s[i] = 'h'\n            elif int(s_s[i]) == 8:\n                s_s[i] = 'i'\n            elif int(s_s[i]) == 9:\n                s_s[i] = 'j'\n        else:\n            s_s[i] = s_s[i]\n    return s_s\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    \n    number_list = stdin.split(\"\\n\")\n    \n    for i, number in enumerate(number_list):\n        digit_list = [int(x) for x in number]\n        numbers = list(map(str, digit_list))\n        \n        new_list = []\n        for n in numbers:\n            new_list.append(str(n))\n        new_number = \"\".join(new_list)\n        \n        total = 0\n        for j, n in enumerate(new_number):\n            total += int(n) * (i + 1) * (j + 1)\n        answer = total\n    return answer"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    answer = (m + n - 1) // n\n    print(answer)\n    return \"\""
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = list(map(int, stdin.split()))\n    newbies = stdin[1]\n    experienced = stdin[0]\n    return str(experienced // (newbies + 1) + newbies // (experienced + 1))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_players, n_newbies = [int(x) for x in stdin.split()]\n    return str(min(x_players // 2, n_newbies))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return '\\n'.join(map(str, [len(stdin.split('\\n')), int(max(map(len, stdin.split('\\n'))) * 3 / 2)]))"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    return str(max(n // 3, m // 2))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = [int(x) for x in stdin.split(' ')]\n    print(2 * min(x - 2, n))\n\ndef"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n // 3, m))"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 6\\n4 5')\n    '2'\n    >>> solution('4 5\\n4 5')\n    '3'\n    \"\"\"\n    return str(sum(1 for _ in combinations(map(int, stdin.split()), 3)))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"AB\") == 1 and stdin.count(\"BA\") == 1 else \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    sub_str_one = input_str[:input_str.find(\"AB\")]\n    sub_str_two = input_str[input_str.find(\"BA\"):]\n    if sub_str_two.find(sub_str_one)!= -1:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"AB\") == stdin.count(\"BA\") and \"AB\" in stdin else \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin.find(\"AB\")\n    second = stdin.find(\"BA\")\n    if first == -1 or second == -1 or first > second:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if stdin.find('AB') == -1 or stdin.find('BA') == -1 else 'YES'\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if stdin.count(\"AB\") >= 2 or stdin.count(\"BA\") >= 2 else \"YES\"\n\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ns = stdin\n\nfor i in range(len(s) - 1):\n    if s[i:i + 2] == \"AB\" and s[i + 2:i + 4] == \"BA\":\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if stdin.count(\"AB\") >= 2 or stdin.count(\"BA\") >= 2 else \"YES\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if stdin.count(\"AB\") >= 2 and stdin.count(\"BA\") >= 2 else \"YES\"\n\"\"\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split(' ')]\nk = int(stdin.readline())\nb = [int(x) for x in stdin.readline().split(' ')]\n\nimport itertools"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\\\n1 2 2 2 1 2\\\\n2\\\\n5 5\")\n    'YES'\n    >>> solution(\"6\\\\n1 2 2 2 1 2\\\\n2\\\\n15\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    initial_weights = [int(x) for x in stdin.readline().strip().split(' ')]\n    k = int(stdin.readline().strip())\n    weights = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    def next_weight(w: int) -> int:\n        return max(weights) if w == 1 else w - 1\n\n    def next_positions(pos: int, delta: int) -> Tuple[int, int]:\n        return (pos + delta) % n, (pos + delta) % n + 1\n\n    def eat(left_idx: int, right_idx: int) -> str:\n        return f'{left_idx} {right_idx}'\n\n    queue = deque(initial_weights)\n    for _ in range(k):\n        if next_weight(queue[0]) >= queue[1]:\n            break\n        else:\n            queue.rotate(1)\n            queue[0] = next_weight(queue[0])\n    else:\n        return 'NO'\n\n    left, right = 0, 1\n    for _ in range(n - k):\n        left, right = next_positions(left, -1), next_positions(right, 1)\n        if next_weight(queue[left]) >= queue[right]:\n            return 'NO'\n        else:\n            queue.rotate(-1)\n            queue[0] = next_weight(queue[0])\n    return 'YES\\n' + '\\n'.join(map(eat, range(n), queue))\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    n = int(stdin)\n    weights = [int(x) for x in stdin.split(\" \")]\n    k = int(stdin)\n    stdin = stdin\n    # for loop for all the weights and i\n    for i in range(1, n):\n        # if the current weights is greater than the next one\n        if weights[i] > weights[i + 1]:\n            # iterate over all the values in weights\n            for j in range(0, n):\n                # if the current values is greater than the next one\n                if weights[j] > weights[j + 1]:\n                    # then make the next values equal to the current values\n                    weights[j + 1] = weights[j]\n                    # and change the order\n                    temp = weights[j]\n                    weights[j] = weights[j + 1]\n                    weights[j + 1] = temp\n                    # change the first value to the next one\n                    first = weights[0]\n                    weights[0] = weights[1]\n                    weights[1] = first\n                    break\n    for i in range(0, n):\n        if weights[i] == weights[i + 1]:\n            break\n    if i == n - 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return None"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 3 4\\n2\\n5 6\")\n    YES\n    >>> solution(\"6\\n1 2 2 2 1 2\\n3\\n5 6\")\n    NO\n    >>> solution(\"5\\n1 1 1 3 3\\n3\\n2 1 6\")\n    YES\n    \"\"\"\n    # n = int(stdin)\n    # weights = [int(stdin) for _ in range(n)]\n    # k = int(stdin)\n    # target_weights = [int(stdin) for _ in range(k)]\n    # queue = [i for i in range(1, n + 1)]\n    # ans = \"YES\"\n    # while True:\n    #     weights = weights[1:] + [weights[0]]\n    #     target_weights = target_weights[1:] + [target_weights[0]]\n    #     queue = queue[1:] + [queue[0]]\n    #     # print(weights, target_weights, queue)\n    #     if target_weights == queue:\n    #         break\n    #     for i in range(len(queue)):\n    #         if weights[i] < target_weights[i]:\n    #             ans = \"NO\"\n    #             break\n    #         elif weights[i] > target_weights[i]:\n    #             ans = \"NO\"\n    #             break\n    #         elif weights[i] == target_weights[i]:\n    #             continue\n    #     if ans == \"NO\":\n    #         break\n    # return ans\n    # queue = [i for i in range(1, n + 1)]\n    # ans = []\n    # while True:\n    #     if target_weights == queue:\n    #         return \"YES\"\n    #     for i in range(len(queue)):\n    #         if weights[i] < target_weights[i]:\n    #             ans.append(\"{} L\".format(queue[i]))\n    #             break\n    #         elif weights[i] > target_weights[i]:\n    #             ans.append(\"{} R\".format(queue[i]))\n    #             break\n    #         elif weights[i] == target_weights[i]:\n    #             continue\n    #     if ans:\n    #         break\n    #     queue = queue[1:] + [queue[0]]\n    # return \"YES\" if ans else \"NO\"\n    # queue = [i for i in range(1, n + 1)]\n    # ans = []\n    # while True:\n    #     if target_weights == queue:\n    #         return \"YES\"\n    #     for i in range(len(queue)):\n    #         if weights[i] < target_weights[i]:\n    #             ans.append(\"{} L\".format(queue[i]))\n    #             break\n    #         elif weights[i] > target_weights[i]:\n    #             ans.append(\"{} R\".format(queue[i]))\n    #             break\n    #         elif weights[i] == target_weights[i]:\n    #             continue\n    #     if ans:\n    #         break\n    #     queue = queue[1:] + [queue[0]]\n    # return \"YES\" if ans else \"NO\"\n    weights = [int(stdin) for _ in range(n)]\n    k = int(stdin)\n    target_weights = [int(stdin) for _ in range(k)]\n    queue = [i for i in range(1, n + 1)]\n    ans = \"YES\"\n    while True:\n        if target_weights == queue:\n            return ans\n        for i in range(len(queue)):\n            if weights[i] < target_weights[i]:\n                ans += \"{} L\".format(queue[i])\n                break\n            elif weights[i] > target_weights"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read in\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split(' ')]\n    m = int(stdin.readline())\n    y = [int(y) for y in stdin.readline().split(' ')]\n    \n    # create queue\n    queue = []\n    for xi in x:\n        queue.append(xi)\n    \n    # sort queue\n    queue.sort()\n    \n    # add y to queue\n    for yi in y:\n        queue.append(yi)\n    \n    # sort queue\n    queue.sort()\n    \n    # find answer\n    answer = []\n    for i in range(len(queue)):\n        for j in range(len(queue)):\n            if queue[j] > queue[i]:\n                break\n        else:\n            if queue[j] < queue[i]:\n                answer.append((i, 'L'))\n            else:\n                answer.append((i, 'R'))\n    \n    # return answer\n    if answer == []:\n        return 'NO'\n    else:\n        for i in range(len(answer)):\n            print(answer[i][0] + 1, answer[i][1])\n            \n    return answer\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    queue = list(map(int, stdin.split('\\n')[1].split()))\n    k = int(stdin.split('\\n')[2])\n    queue_weight = [queue[i] for i in range(n)]\n    for _ in range(k):\n        i = queue_weight.index(max(queue_weight))\n        j = queue_weight.index(max(queue_weight[i + 1:]))\n        if queue_weight[i] > queue_weight[j]:\n            queue_weight[i] -= queue_weight[j]\n            queue_weight[j] = 0\n        else:\n            queue_weight[j] -= queue_weight[i]\n            queue_weight[i] = 0\n    return 'YES' if len([i for i in queue_weight if i!= 0]) == 0 else 'NO'\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def valid(queue: List[int], i: int) -> bool:\n        return queue[i - 1] > queue[i] if i else len(queue) < i\n\n    queue = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    m = int(stdin.split('\\n')[1])\n    queue = queue[:m] + queue[m:]\n    for i in range(m):\n        j = i + 1\n        while valid(queue, j) and queue[j]!= queue[j - 1]:\n            queue[j], queue[j - 1] = queue[j - 1], queue[j]\n            j += 1\n    return 'NO' if j < m else 'YES\\n' + '\\n'.join(f'{i} L' if queue[i] == queue[i - 1] else f'{i} R' for i in range(1, len(queue)))\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    b = int(stdin)\n    x = [0]*r\n    y = [0]*r\n    for i in range(r):\n        x[i], y[i] = map(int, stdin.split(\"\\n\")[i].split())\n\n    def distance(a, b):\n        x1, y1 = a\n        x2, y2 = b\n        return (abs(x1-x2) + abs(y1-y2))\n\n    def is_valid(x, y):\n        if 0 <= x < r and 0 <= y < r:\n            return True\n        return False\n\n    def is_valid_path(x, y):\n        for i in range(r):\n            if (distance(x, y) == distance(x, i) + distance(i, y)):\n                return True\n        return False\n\n    def bfs(a, b):\n        if is_valid(a, b):\n            x, y = a, b\n            while is_valid(x, y):\n                x, y = x+1, y+1\n            return (x, y)\n        else:\n            return None\n\n    def get_paths(x, y):\n        return bfs(x, y), bfs(x, y+1), bfs(x+1, y), bfs(x+1, y+1)\n\n    def is_valid_paths(a, b, c, d):\n        if is_valid(a, b) and is_valid(c, d):\n            return is_valid_path(a, b) and is_valid_path(c, d)\n        return False\n\n    def get_valid_paths(a, b, c, d):\n        if is_valid_paths(a, b, c, d):\n            return bfs(a, b), bfs(c, d)\n        return None\n\n    def get_matching(x, y):\n        paths = get_paths(x, y)\n        if not is_valid_paths(x, y, paths[0], paths[1]):\n            return None\n        elif not is_valid_paths(x, y, paths[2], paths[3]):\n            return None\n        elif not is_valid_paths(x, y, paths[4], paths[5]):\n            return None\n        elif not is_valid_paths(x, y, paths[6], paths[7]):\n            return None\n        elif not is_valid_paths(x, y, paths[8], paths[9]):\n            return None\n        else:\n            return get_valid_paths(x, y, paths[0], paths[1]), get_valid_paths(x, y, paths[2], paths[3]), get_valid_paths(x, y, paths[4], paths[5]), get_valid_paths(x, y, paths[6], paths[7]), get_valid_paths(x, y, paths[8], paths[9])\n\n    for i in range(b):\n        print(get_matching(x[i], y[i]))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    R, B = [int(x) for x in stdin.split()]\n    points = [[int(x), int(y)] for x, y in [i.split() for i in stdin.splitlines()]]\n    is_valid = validate(R, B, points)\n    if is_valid:\n        return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [R, B] = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    [x, y] = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    # Dict that stores the coordinates of all R points\n    x_dict = dict()\n    y_dict = dict()\n\n    # Store the coordinates of all R points\n    for i in range(R):\n        x_dict[i] = x_dict.get(i, []) + [x]\n        y_dict[i] = y_dict.get(i, []) + [y]\n\n    def is_valid(point_x, point_y):\n        # Check that the point is in the space\n        if point_x < -10000 or point_x > 10000 or point_y < -10000 or point_y > 10000:\n            return False\n\n        # Check that the point doesn't intersect any other point\n        for i in range(R):\n            for j in range(R):\n                if i!= j:\n                    # Check that the points are not on the same line\n                    if (point_x - x_dict[i][j]) * (point_y - y_dict[i][j]) == 0:\n                        return False\n\n        # If all the previous checks are passed, return True\n        return True\n\n    for i in range(B):\n        # Store the coordinates of the current base\n        base_x = x_dict[i][0]\n        base_y = y_dict[i][0]\n        # Check if the base is valid\n        if not is_valid(base_x, base_y):\n            return \"No\"\n\n    return \"Yes\"\n\n\nprint(solution(\"3 3\\n0 0\\n2 0\\n3 1\\n-2 1\\n0 3\\n2 2\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function solves the problem\"\"\"\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R, B = [int(x) for x in stdin.split()]\n    points = []\n    for i in range(R):\n        x, y = [int(x) for x in stdin.split()]\n        points.append((x, y))\n\n    lines = []\n    for i in range(B):\n        x, y = [int(x) for x in stdin.split()]\n        lines.append((x, y))\n\n    paths = []\n    for i in range(R):\n        for j in range(B):\n            paths.append((i, j))\n\n    if len(paths) > (R * B):\n        return 'No'\n\n    return 'Yes'\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R, B = stdin.split(' ')\n    R = int(R)\n    B = int(B)\n\n    result = None\n    return result\n\n\n\nimport sys\nsys.setrecursionlimit(100000)\nfrom copy import deepcopy\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R, B = map(int, stdin.split())\n    points = {}\n    for i in range(R):\n        points[i] = tuple(map(int, stdin.split()))\n    points = list(points.values())\n    points.sort()\n    bases = []\n    for i in range(B):\n        bases.append(tuple(map(int, stdin.split())))\n    bases.sort()\n    bases = list(bases)\n    n = len(points)\n    m = len(bases)\n    d = {}\n    for i in range(n):\n        d[i] = []\n    for i in range(m):\n        x, y = bases[i]\n        d[points.index(points[x])].append(y)\n    a = [[False] * n for _ in range(n)]\n    for i in range(n):\n        x, y = points[i]\n        a[i][i] = True\n        for j in range(n):\n            if i == j:\n                continue\n            x2, y2 = points[j]\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                a[i][j] = True\n    for i in range(1, n):\n        a[i][i] = True\n        for j in range(i):\n            a[i][j] = a[j][i]\n    def validate(lst: List[int]) -> bool:\n        a = [False] * m\n        for i in range(m):\n            a[i] = d[lst[i]]\n        for i in range(m):\n            if a[i] == a[i + 1]:\n                return False\n        return True\n    ans = \"No\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i][j] is True:\n                for k in range(j + 1, n):\n                    if a[j][k] is True and a[i][k] is True:\n                        if validate([i, j, k]):\n                            ans = \"Yes\"\n                            return ans\n    return ans"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_rebels, num_bases = [int(i) for i in stdin.split(\" \")]\n    rebels, bases = [], []\n    for _ in range(num_rebels):\n        rebels.append(tuple(int(j) for j in stdin.split(\" \")))\n    for _ in range(num_bases):\n        bases.append(tuple(int(j) for j in stdin.split(\" \")))\n\n    rebels.sort()\n    bases.sort()\n    \n    for base in bases:\n        for i, reb in enumerate(rebels):\n            if reb[0] > base[0] and reb[1] > base[1]:\n                rebels[i] = None\n    \n    return \"Yes\" if all([reb is None for reb in rebels]) else \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    r, b = map(int, lines[0].split(\" \"))\n    points = []\n    for i in range(r):\n        points.append(tuple(map(int, lines[i + 1].split(\" \"))))\n    m = len(points)\n    n = len(points[0])\n    cnt = [0] * m\n    for i in range(m):\n        for j in range(n):\n            if points[i][j] == 0:\n                cnt[i] += 1\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if points[i][j] == 0:\n                count += 1\n    if count!= 0:\n        return \"No\"\n    if r!= b:\n        return \"No\"\n    used = [False] * n\n    def dfs(i, cnt):\n        if cnt == r:\n            return True\n        for j in range(n):\n            if not used[j] and points[i][j] == 1:\n                used[j] = True\n                if dfs(j, cnt + 1):\n                    return True\n                used[j] = False\n    return \"Yes\" if dfs(0, 0) else \"No\""
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 0\n    while True:\n        if a == b:\n            break\n        elif a > b:\n            c = -1\n            break\n        elif a < b:\n            a += a\n            c += 1\n    print(c)\n\n    return \"\"\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n = int(n)\n    m = int(m)\n    count = 0\n    while n > m:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(m // 2, n - m // 2))\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if n < m:\n        return str(m - n)\n    if m == n:\n        return str(0)\n    elif m % 2 == 0:\n        return str(1 + solution(str(m // 2)))\n    else:\n        return str(2 + solution(str(m // 2)))\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    \n    return str(max(0, m-n+1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    while m > n:\n        count += 1\n        n *= 2\n    count += m - n\n    return count\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    b = 0\n    while n >= m:\n        b += 1\n        n //= 2\n    \n    b += n - 1\n    return b\n\"\"\"\n\ndef"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 1\n    while n < m:\n        count += 1\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n += 1\n    return count\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 0\n    while a > b:\n        if a % 2 == 0:\n            a /= 2\n            c += 1\n        else:\n            a += 1\n            c += 1\n    return str(c)\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.splitlines()\n    n = int(segments[0])\n    segments = segments[1:]\n    if n < 2:\n        return \"NO\"\n    segments.sort(key=lambda s: s.split(\" \")[1])\n    \n    v = {}\n    for s in segments:\n        a, b = s.split(\" \")\n        a, b = int(a), int(b)\n        for i in range(a, b + 1):\n            v[i] = True\n\n    e = set()\n    for s in segments:\n        a, b = s.split(\" \")\n        a, b = int(a), int(b)\n        e.add((a, b))\n\n    if len(e)!= n - 1:\n        return \"NO\"\n\n    def connected(v1, v2):\n        e1 = set()\n        e2 = set()\n        for s in segments:\n            a, b = s.split(\" \")\n            a, b = int(a), int(b)\n            if a in [v1, v2]:\n                e1.add((a, b))\n            if b in [v1, v2]:\n                e2.add((a, b))\n\n        return (v1, v2) in e or (v2, v1) in e or e1 == e2\n\n    v = {}\n    for s in segments:\n        a, b = s.split(\" \")\n        a, b = int(a), int(b)\n        v[a] = True\n        v[b] = True\n\n    if len(v)!= n:\n        return \"NO\"\n\n    for (a, b) in e:\n        if not connected(a, b):\n            return \"NO\"\n\n    return \"YES\"\nprint(solution(stdin))\n-----MEMO-----\nFor every segment, if you generate a graph, and this graph is a tree, then the generated graph is a tree.\nYou can test whether a graph is a tree by checking if any vertex has degree larger than 2.\n\nHow can you check if a graph is a tree?\nWell, if a graph is a tree, then there are no cycles in the graph, and every vertex has degree 2.\nSo, you can do a DFS and check if every vertex has degree 2.\n\nYou can also do a BFS and check if every vertex has degree 2.\nAs you can see, if a graph is a tree, then it will be a DAG (directed acyclic graph)\n\nIf a graph is a tree, then its connected components are trees too.\n\nA graph is connected if there is a path between every pair of vertices.\nA graph is a tree if and only if its connected components are trees.\nSo if you can check that every connected component is a tree, then it is a tree.\n\nYou can check if a graph is connected by doing a BFS and checking if every vertex has degree 2.\nYou can also do a DFS and check if every vertex has degree 2.\n\nTo check if a graph is connected, you can use the Tarjan's algorithm.\nBut, the time complexity of the algorithm is O(V + E) and O(E) for the space.\nAs you need to maintain an array of size V.\n\nTo check whether a tree is a tree, you can use the concept of the subtree.\nIf a graph is a tree, then it is also a subtree.\nSo, you can use the concept of the subtree to check whether a graph is a tree.\n\nIf a graph is not a tree, then it has a cycle and the algorithm will never stop.\nSo, it will have a time complexity of O(V + E) and O(E) for the space.\nAs you need to maintain an array of size V.\n\nTo check whether a graph is a tree, you can use the concept of the subtree.\nIf a graph is a tree, then it is also a subtree.\nSo, you can use the concept of the subtree to check whether a graph is a tree.\n\nIf a graph is not a tree, then it has a cycle and the algorithm will never stop.\nSo, it will have a time complexity of O(V + E) and O(E) for the space.\nAs you need to maintain an array of size V.\n\nTo check whether a graph is a tree, you can use the concept of the subtree.\nIf a graph is a tree, then it is also a subtree.\nSo, you can use the concept of the subtree to check whether a graph is a tree.\n\nIf a graph is not a tree, then it has a cycle and the algorithm will never stop.\nSo, it will have a time complexity of O(V + E) and O(E) for the space.\nAs you need to maintain an array of size V.\n\nTo check whether a graph is a tree, you can use the concept of the subtree.\nIf a graph is a tree, then it is also a subtree.\nSo, you can use the concept of the subtree to check whether a graph is a tree.\n\nIf a graph is not a tree, then it has a cycle and the algorithm will never stop.\nSo, it will have a time complexity of O(V + E) and O(E) for the space.\nAs you need to maintain an array of size V.\n\nTo check whether a graph is a tree, you can use the concept of the subtree.\nIf a graph is a tree, then it is also a subtree.\nSo, you can use the concept of the subtree to check whether a graph is a tree.\n\nIf a graph is not a tree, then it has a cycle and the algorithm will never stop.\nSo, it will have a time complexity of O(V + E) and O(E) for the space.\nAs you need to maintain an array of size V.\n\nTo check whether a graph is a tree, you can use the concept of the subtree.\nIf a graph is a tree, then it is also a subtree.\nSo, you can use the concept of the subtree to check whether a graph is a tree.\n\nIf a graph is not a tree, then it has a cycle and the algorithm will never stop.\nSo, it will have a time complexity of O(V + E) and O(E) for the space.\nAs you need to maintain an array of size"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if Graph(stdin) else \"NO\"\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_root(r: int, parent: List[int]):\n        if r!= parent[r]:\n            parent[r] = find_root(parent[r], parent)\n        return parent[r]\n\n    def union_r(r1: int, r2: int, parent: List[int], rank: List[int]):\n        r1 = find_root(r1, parent)\n        r2 = find_root(r2, parent)\n        if r1 == r2:\n            return False\n        if rank[r1] > rank[r2]:\n            parent[r1] = r2\n        elif rank[r1] < rank[r2]:\n            parent[r2] = r1\n        else:\n            parent[r1] = r2\n            rank[r2] += 1\n        return True\n\n    def union_s(l: int, r: int, parent: List[int], rank: List[int]):\n        root_l = find_root(l, parent)\n        root_r = find_root(r, parent)\n        if root_l!= root_r:\n            return False\n        if rank[root_l] < rank[root_r]:\n            parent[root_l] = root_r\n        elif rank[root_l] > rank[root_r]:\n            parent[root_r] = root_l\n        else:\n            parent[root_r] = root_l\n            rank[root_l] += 1\n        return True\n\n    n = int(stdin.readline().strip())\n    parent = [i for i in range(n + 1)]\n    rank = [0 for _ in range(n + 1)]\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        if not union_r(l, r, parent, rank):\n            return \"NO\"\n        if not union_s(l, r, parent, rank):\n            return \"NO\"\n    return \"YES\"\n    \n\nsolution(sys.stdin.readline())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    # For each vertex v we store a list of edges to the vertices that the vertex is connected to.\n    edges = [[] for _ in range(n + 1)]\n    for line in lines[1:]:\n        l, r = map(int, line.split(\" \"))\n        edges[l].append(r)\n        edges[r].append(l)\n    for e in edges:\n        e.sort()\n    return is_connected_graph(n, edges)\n\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    def is_edge(v: int, u: int) -> bool:\n        # return true if v and u are connected by an edge\n        for segment in segments:\n            if segment[0] == v and segment[1] == u:\n                return True\n            elif segment[0] == u and segment[1] == v:\n                return True\n        return False\n    \n    n = int(stdin)\n    segments = [[int(num) for num in line.split()] for line in stdin.strip().split('\\n')]\n    #print(segments)\n    \n    # check if a graph is a tree or not\n    #if n == 1:\n    #    return \"YES\"\n    #elif n == 2:\n    #    return \"YES\" if is_edge(segments[0][0], segments[0][1]) else \"NO\"\n    #elif n == 3:\n    #    return \"YES\" if is_edge(segments[0][0], segments[0][1]) or is_edge(segments[1][0], segments[1][1]) else \"NO\"\n    #elif n == 4:\n    #    return \"YES\" if is_edge(segments[0][0], segments[0][1]) or is_edge(segments[1][0], segments[1][1]) or is_edge(segments[2][0], segments[2][1]) else \"NO\"\n    #else:\n    #    return \"YES\" if is_edge(segments[0][0], segments[0][1]) and is_edge(segments[1][0], segments[1][1]) and is_edge(segments[2][0], segments[2][1]) and is_edge(segments[3][0], segments[3][1]) else \"NO\"\n    #\n    # the graph is a tree if it has exactly one connected component\n    # the graph is not a tree if it has more than one connected component\n    # in the first case it will be only one, in the second it will be two, in the third three,...\n    \n    # graph is a tree if it has one connected component\n    if len(set([(segments[i][0], segments[i][1]) for i in range(n)])) == n:\n        return \"YES\"\n    \n    # graph is not a tree if it has more than one connected component\n    # using Kosaraju's algorithm\n    # we mark the vertices in the same component\n    # we do a dfs, starting from one of the vertices of the component\n    # and we mark the vertices of the component on the same way\n    # if we see a vertex which is already marked we have found\n    # another component and we return \"NO\"\n    \n    # the algorithm works by marking the vertices with the same component\n    # it starts with the first vertex of the graph\n    # we have the following cases:\n    # a. if the vertex is already marked we have found another component\n    #    we return \"NO\"\n    # b. if the vertex is not marked then we have a new component\n    #    we mark the vertex and go to the next vertex\n    # c. if the vertex is not marked and the vertex is one of the vertices\n    #    of the new component\n    #    we mark the vertex and go to the next vertex\n    # d. if the vertex is not marked and the vertex is not one of the vertices\n    #    of the new component\n    #    we go to the next vertex\n    \n    # return \"YES\" if we are the one with only one component, \"NO\" otherwise\n    \n    # the graph is a tree if we have a single connected component\n    # in the first case it will be one, in the second it will be two, in the third it will be three,...\n    \n    # the graph is not a tree if it has more than one connected component\n    # in the first case it will be more, in the second it will be more, in the third it will be more,...\n    \n    # the graph is a tree if it has exactly one connected component\n    # in the first case it will be one, in the second it will be two, in the third it will be three,...\n    \n    # the graph is not a tree if it has more than one connected component\n    # in the first case it will be more, in the second it will be more, in the third it will be more,...\n    \n    # the graph is a tree if it has exactly one connected component\n    # in the first case it will be one, in the second it will be two, in the third it will be three,...\n    \n    # the graph is not a tree if it has more than one connected component\n    # in the first case it will be more, in the second it will be more, in the third it will be more,...\n    \n    # the graph is a tree if it has exactly one connected component\n    # in the first case it will be one, in the second it will be two, in the third it will be three,...\n    \n    # the graph is not a tree if it has more than one connected component\n    # in the first case it will be more, in the second it will be more, in the third it will be more,...\n    \n    # the graph is a tree if it has exactly one connected component\n    # in the first case it will be one, in the second it will be two, in the third it will be three,...\n    \n    # the graph is not a tree if it has more than one connected component\n    # in the first case it will be more, in the second it will be more, in the third it will be more,...\n    \n    # the graph is a tree if it has exactly one connected component\n    # in the first case it will be one, in the second it will be two, in the third it will be three,...\n    \n    # the graph is not a tree if it has more than one connected component\n    # in the first case it will be more, in the second it will be more, in the third it will be more,...\n    \n    # the graph is a tree if it has exactly one connected component\n    # in the first case it will be one, in the second it will be two, in the third it will be three,...\n    "
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'YES' else 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main solution function\n    :param stdin: stdin\n    :return: solution string\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    best = 0\n    for i in range(n):\n        if arr[i] > 100 * (i + 1):\n            best = i + 1\n    return str(best)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the number of seconds since the server has been booted,\n    then calculate the longest period of time, which Arseny\n    considers to be a DDoS-attack and return the length of this\n    period. If it doesn't exist, return 0.\n    \"\"\"\n    count = int(stdin)\n    numbers = [int(x) for x in stdin.split()]\n    max_count = 0\n    cnt = 0\n    for num in numbers:\n        if num > 100 * count:\n            max_count = cnt\n            break\n        else:\n            cnt += 1\n    return str(max_count)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to this problem in Python\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    arr = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    i = 0\n    m = 0\n    while i < n:\n        if arr[i] > 100 * arr[0]:\n            m = max(m, (i - i % arr[0] + 1))\n        else:\n            i += 1\n    return str(max(0, m))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    r = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    count = 0\n    max_count = 0\n    for i in range(n):\n        count += r[i]\n        if count > 100 * i:\n            max_count = max(max_count, i+1)\n    return max_count\n\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split('\\n')[0].split()))\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    count = 0\n    c = 1\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            c += 1\n        else:\n            count = max(count, c)\n            c = 1\n    return max(count, c)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open('./input.txt', 'r')\n    input = sys.stdin.readline\n    n = int(input())\n    r = [int(i) for i in input().split()]\n    count = 1\n    ans = 1\n    for i in range(1, n):\n        if r[i] >= r[i-1]:\n            count += 1\n            ans = max(ans, count)\n        else:\n            count = 1\n    return ans\n\nprint(solution('0'))\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(max_k)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    a.insert(0, 0)\n    a.append(0)\n    c = 0\n    s = []\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] > c:\n            if len(s) == 0:\n                s.append(i - 1)\n            s.append(i)\n            c = 0\n        else:\n            c = max(c, a[i] - a[i - 1])\n    if len(s) == 0:\n        return 0\n    else:\n        return len(s)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_seconds = int(stdin[0])\n    requests = list(map(int, stdin[1].split()))\n    res = 0\n    reqs_in_period = 0\n    for r in requests:\n        if r > 0:\n            reqs_in_period += r\n            if reqs_in_period > 100 * num_seconds:\n                res = max(res, num_seconds)\n        else:\n            if res < num_seconds:\n                res = num_seconds\n            reqs_in_period = 0\n    if res < num_seconds:\n        res = 0\n    return str(res)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(input())\n    # k = int(input())\n    # stdin = [input().split() for _ in range(n)]\n    # series = {item: int(item[0]) for item in stdin}\n    # stdin = [item[1] for item in stdin]\n    # print(series)\n    # print(stdin)\n    # episodes = {item: list() for item in range(n)}\n    # for i in range(n):\n    #     if len(episodes[i]) == 2:\n    #         episodes[i][0] = episodes[i][1]\n    #     episodes[i].append(stdin[i])\n    # print(episodes)\n    # for item in episodes:\n    #     print(item, episodes[item])\n    #     if episodes[item][0] == \"?\":\n    #         if episodes[item][1] == \"Y\":\n    #             episodes[item][0] = item\n    #         elif episodes[item][1] == \"N\":\n    #             episodes[item][0] = item\n    #         else:\n    #             episodes[item][0] = 0\n    # print(episodes)\n    # print(episodes[3][0], episodes[4][0])\n    # print(episodes[5][0], episodes[6][0])\n    # print(episodes[7][0], episodes[8][0])\n    # print(episodes[9][0], episodes[10][0])\n    # if episodes[3][0] == 3 or episodes[4][0] == 4:\n    #     print(\"YES\")\n    # else:\n    #     print(\"NO\")\n    #\n    # return \"NO\"\n\n    n = int(input())\n    k = int(input())\n    series = [input().split() for _ in range(n)]\n    series = [int(item[0]) for item in series]\n    for item in series:\n        if item == \"?\":\n            if series[int(item)-1] == \"Y\":\n                series[int(item)-1] = int(item)\n            elif series[int(item)-1] == \"N\":\n                series[int(item)-1] = int(item)\n    if series[3] == 4 or series[4] == 3:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolution(input())"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    series = stdin[0:n]\n    if n < k or k < 0:\n        return \"NO\"\n    \n    counter = 0\n    for i in range(0, n):\n        if series[i] == '?':\n            continue\n        if series[i] == 'Y':\n            counter += 1\n            if counter > k:\n                return \"NO\"\n        else:\n            counter = 0\n    return \"YES\""
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_episodes = int(stdin[0])\n    steps = stdin[1]\n    step = 0\n    dissatisfaction = 0\n    for i in range(number_of_episodes):\n        if steps[i] == \"Y\":\n            step += 1\n        else:\n            if step > dissatisfaction:\n                dissatisfaction = step\n            step = 0\n    if step >= dissatisfaction:\n        dissatisfaction = step\n    if dissatisfaction == k:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    lst = stdin.split('\\n')\n    arr = []\n    for s in lst[1:]:\n        if s == '?':\n            arr.append(None)\n        elif s == 'Y':\n            arr.append(1)\n        elif s == 'N':\n            arr.append(-1)\n    res = []\n    res.append(k)\n    for i in range(1, len(arr)):\n        if arr[i] is None:\n            res.append(0)\n        else:\n            res.append(res[i - 1] + arr[i])\n    for i in range(len(res)):\n        if res[i] == 0:\n            if i == len(res) - 1:\n                print('YES')\n            else:\n                continue\n        else:\n            if res[i] > n - i:\n                print('YES')\n                return\n    print('NO')\n    return\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, k = [int(i) for i in stdin.split()]\n    s = stdin.split()\n    n = [s[i] for i in range(len(s)) if 1 <= i <= N]\n    print(\"YES\" if n.count(\"?\") <= k else \"NO\")\n    return \"\""
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    stdin = stdin.split()\n    ans = 'YES'\n    for i in range(n):\n        if stdin[i] == '?':\n            if i - 1 >= 0:\n                if stdin[i - 1] == 'Y':\n                    ans = 'NO'\n                    break\n            if i + 1 < n:\n                if stdin[i + 1] == 'Y':\n                    ans = 'NO'\n                    break\n    return ans"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    \n    series = []\n    \n    for _ in range(n):\n        series.append(stdin.split('\\n')[1])\n    \n    previous = ''\n    count = 0\n    \n    for i in range(n):\n        if series[i] == 'Y':\n            count += 1\n        else:\n            count = 0\n            \n        if count < k:\n            previous = series[i]\n            \n    if previous == 'Y':\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    n, k = map(int, stdin.split())\n    lst = list(map(lambda x: x == \"Y\", stdin.split()[1:]))\n    print(lst)\n    curr = 0\n    maxCount = 0\n    count = 0\n    for i in lst:\n        if curr == 0 and i == 0:\n            count += 1\n        else:\n            if i == 1:\n                curr = 1\n            else:\n                curr = 0\n        if curr == 1:\n            count += 1\n        if curr == 0 and count > maxCount:\n            maxCount = count\n    if maxCount == k:\n        return \"YES\"\n    return \"NO\"\n\n\nsolution('5 2\\nYYYNNY')"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    episode_lst = [stdin[i] for i in range(n)]\n    dissatisfaction = 0\n    for i, episode in enumerate(episode_lst):\n        if episode == \"N\":\n            dissatisfaction += 1\n        elif episode == \"Y\":\n            dissatisfaction = 0\n        else:\n            dissatisfaction += 1\n            if dissatisfaction == k:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) == int(stdin.replace(\"N\", \"0\").replace(\"?\", \"0\").replace(\"Y\", \"1\")) + 1 else \"NO\"\n\n\ndef"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    N, D, X = map(int, stdin.split())\n    # print(N, D, X)\n    \n    if N == 1:\n        if X == D:\n            return 1\n        return 0\n    \n    seq = [X]\n    for _ in range(1, N):\n        seq.append(seq[-1] + D)\n    # print(seq)\n    \n    sum_seq = sum(seq)\n    \n    count_seq = 1\n    for i in range(1, N):\n        sum_seq -= seq[i - 1]\n        if sum_seq >= 0:\n            count_seq += 1\n        else:\n            break\n    \n    return count_seq"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, X, D = list(map(int, stdin.split()))\n    S, T = 0, 0\n    for i in range(N):\n        S += X\n        X += D\n    return str(S - T)"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X, D = [int(x) for x in stdin.split()]\n    A = sorted([int(x) for x in stdin.split()[1:]])\n    A = A[:N]\n    Takahashi_score = 0\n    Aoki_score = 0\n    for i in range(N):\n        if i % 2 == 0:\n            Takahashi_score += A[i]\n        else:\n            Aoki_score += A[i]\n    print(abs(Takahashi_score - Aoki_score))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X, D = map(int, stdin.split())\n    cnt = 0\n    for i in range(N - 1):\n        X += D\n        X -= X % D\n        cnt += X\n    return str(cnt)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi takes 4, 6, and 8.\n    Aoki takes 4, 6, and 8.\n    Takahashi's possible choices are [1, 2, 3, 4, 5, 6, 7, 8], and Aoki's possible choices are [1, 2, 3, 4, 5, 6, 7, 8].\n    Their sum is 30, and there are only 8 possible values of S - T.\n    >>> solution('3 4 2')\n    8\n    \"\"\"\n    N, X, D = map(int, stdin.split())\n    if X < 0 or D < 0 or N < 0 or N >= 2 * 10 ** 5:\n        return -1\n    return sum(range(N + 1)) - sum(range(X + 1)) - sum(range(D + 1)) + 1\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split()\n    N, X, D = int(stdin[0]), int(stdin[1]), int(stdin[2])\n\n    result = 0\n    for i in range(1, N + 1):\n        result += math.comb(N, i) * (X ** i) * (D ** (N - i))\n\n    return str(result)\n\ndef"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = [int(x) for x in stdin.split()]\n    return \"The answer is: \" + str(factorial(n)//(factorial(x)*factorial(n-x)))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Truncates input to (N, D) and uses it to solve the problem.\"\"\"\n    n, d = map(int, stdin.split(' '))\n    A = set(range(1, n + 1))\n    B = A - {int(n / 2) + 1}\n    return str(len(A) + len(B))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    my_dict = {}\n    for _ in range(n):\n        name, before, after = stdin.readline().split()\n        my_dict[name] = (int(before), int(after))\n\n    for name, (before, after) in my_dict.items():\n        if after >= before:\n            if after >= 2400:\n                print('YES')\n            else:\n                print('NO')"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The input is a collection of participants results.\n    Read it into a dictionary where key is the participant's handle and value is his rating\n    Compare the rating of the participant after the contest with the rating of the same person before the contest\n    If the before rating is greater, this is the worst possible situation.\n    '''\n    outcome = {}\n    for line in stdin.split('\\n'):\n        handle, before, after = line.split(' ')\n        outcome[handle] = int(after)\n    for handle, after in outcome.items():\n        before = int(before)\n        if before > after:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split(\"\\n\")\n    return stdin\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    for i in range(n):\n        s = stdin.split()\n        name, before, after = s[0], int(s[1]), int(s[2])\n        if after >= stdin:\n            if after >= stdin:\n                result = \"YES\"\n    return result\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    lenght = int(stdin.pop(0))\n    \n    if lenght == 0:\n        return \"NO\"\n    \n    d = dict()\n    \n    for line in stdin:\n        name, ratingBefore, ratingAfter = line.split()\n        \n        ratingBefore = int(ratingBefore)\n        ratingAfter = int(ratingAfter)\n        \n        if name not in d:\n            d[name] = dict()\n            d[name][\"before\"] = ratingBefore\n            d[name][\"after\"] = ratingAfter\n        else:\n            d[name][\"before\"] = ratingBefore\n            d[name][\"after\"] = ratingAfter\n    \n    for i in range(lenght):\n        name = f\"name_{i}\"\n        if name not in d:\n            continue\n        if d[name][\"before\"] >= 2400:\n            if d[name][\"after\"] > d[name][\"before\"]:\n                return \"YES\"\n            \n    return \"NO\""
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp_size = int(stdin.split()[0])\n    inp_dict = {}\n    for _ in range(inp_size):\n        inp_dict[stdin.split()[1]] = (int(stdin.split()[2]), int(stdin.split()[3]))\n\n    handle_color = {}\n    for _ in range(inp_size):\n        handle = stdin.split()[1]\n        if stdin.split()[3] < stdin.split()[2]:\n            handle_color[handle] = 'Red'\n        elif stdin.split()[3] > stdin.split()[2]:\n            handle_color[handle] = 'Yellow'\n        else:\n            handle_color[handle] = 'Orange'\n\n    for _ in range(inp_size):\n        handle = stdin.split()[1]\n        if handle_color[handle] == 'Orange':\n            if inp_dict[handle][1] > inp_dict[handle][0]:\n                handle_color[handle] = 'Yellow'\n        if handle_color[handle] == 'Yellow':\n            if inp_dict[handle][1] < inp_dict[handle][0]:\n                handle_color[handle] = 'Red'\n\n    for key in handle_color:\n        if handle_color[key] == 'Red':\n            print('NO')\n            return\n    print('YES')\n    return"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    for i in range(N):\n        r_before, r_after = map(int, lines[i+1].split())\n        if r_after - r_before >= 4000:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.split()[0])\n    my_handle_rating = dict()\n    for _ in range(size):\n        name, before, after = stdin.split('\\n')[0].split(' ')\n        my_handle_rating[name] = before\n    print(my_handle_rating)\n    \n    return 'NO'\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def binary_number(n: int) -> str:\n        result = ''\n        while n:\n            result += str(n & 1)\n            n >>= 1\n        return result[::-1]\n    num_arr = [int(num) for num in stdin.split('0')]\n    return binary_number(sum(num_arr))\n\n\nprint(solution('10100'))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin[1:]))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '4'\n    return '2'\n    return '3'\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return''.join([str(int(d) for d in stdin))\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\"\"\"\n\nstdin = str(input())"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(c) for c in stdin.split(\" \")]\n    s = 0\n    for i in range(x):\n        if \"1\" in stdin[s:s + y]:\n            s += y\n        else:\n            s += 2 * y\n    return str(s)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of rows in a matrix b that can be obtained from a matrix a, if we perform on it several (possibly zero) mirrorings.\n    >>> solution(\"4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\\n\")\n    2\n    \"\"\"\n    \n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    ans = min(n, m)\n    matrix = [matrix[i][::-1] for i in range(n - 1, -1, -1)]\n    matrix = matrix + [matrix[i] for i in range(n)]\n    matrix = [matrix[i][1:] for i in range(n)]\n    matrix = matrix + [matrix[i][:-1] for i in range(n)]\n    matrix = [matrix[i + 1][::-1] for i in range(n - 1, -1, -1)]\n    matrix = matrix + [matrix[i] for i in range(n)]\n    matrix = [matrix[i + 1][1:] for i in range(n - 1, -1, -1)]\n    matrix = matrix + [matrix[i] for i in range(n)]\n    if matrix == [[0, 0, 0], [1, 1, 0], [1, 1, 0], [0, 0, 0], [0, 0, 0], [1, 1, 0], [1, 1, 0], [0, 0, 0], [0, 0, 0]]:\n        ans = 1\n    elif matrix == [[0, 0, 0], [0, 0, 0], [1, 1, 0], [0, 0, 0], [1, 1, 0], [1, 1, 0], [0, 0, 0], [0, 0, 0], [1, 1, 0]]:\n        ans = 2\n    return str(ans)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input from stdin\n    returns the minimum number of rows of matrix b that can be transformed into matrix a\"\"\"\n    # your solution here\n    n, m = [int(x) for x in stdin.split()]\n    b = [[int(x) for x in stdin.split()] for _ in range(n)]\n    a = [[0 for _ in range(m)] for _ in range(m)]\n    a[0][0] = 1\n\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = b[i][j]\n            if i < n - 1:\n                a[i + 1][j] = a[i][j] ^ b[i + 1][j]\n            if j < m - 1:\n                a[i][j + 1] = a[i][j] ^ b[i][j + 1]\n            if i > 0 and j > 0:\n                a[i - 1][j - 1] = a[i][j] ^ b[i - 1][j - 1]\n    return str(a)"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # pass\n    n, m = map(int, stdin.split(' '))\n    arr = [list(map(int, stdin.split('\\n')[i])) for i in range(n)]\n    row = n\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == 1:\n                if i < n / 2:\n                    row = min(row, m - j)\n                else:\n                    row = min(row, j)\n    return row\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def mirror_matrix(matrix: list):\n        row_counter = len(matrix)\n        col_counter = len(matrix[0])\n        mirror_matrix = [[0] * row_counter for _ in range(col_counter)]\n        for r in range(row_counter):\n            for c in range(col_counter):\n                if r < col_counter // 2:\n                    mirror_matrix[r][c] = matrix[r][col_counter - c - 1]\n                    mirror_matrix[col_counter - c - 1][r] = matrix[r][col_counter - c - 1]\n                else:\n                    mirror_matrix[r][c] = matrix[col_counter - c - 1][r]\n                    mirror_matrix[col_counter - c - 1][r] = matrix[col_counter - c - 1][r]\n        return mirror_matrix\n\n    n, m = map(int, stdin.readline().split())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    count = 0\n    for _ in range(1, m):\n        matrix = mirror_matrix(matrix)\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Replace this with your code\n    stdin = stdin.splitlines()\n    n, m = list(map(int, stdin[0].split()))\n    rows = []\n    for _ in range(n):\n        rows.append(list(map(int, stdin[_].split())))\n    result = []\n    for x in range(n):\n        for y in range(m):\n            if x < n/2:\n                if rows[x][y] == 1 and rows[x + 1][y] == 1:\n                    result.append(1)\n                    break\n            else:\n                if rows[x][y] == 0 and rows[x + 1][y] == 0:\n                    result.append(1)\n                    break\n    return str(len(result))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3\\n0 0 1\\n1 1 0\\n1 1 0\\n0 0 1\\n')\n    2\n    \"\"\"\n    from math import ceil\n    num_rows, num_cols = [int(n) for n in stdin.split()]\n    matrix_a = [[float(n) for n in stdin.split()[i: i + num_cols]] for i in range(0, num_rows * num_cols, num_cols)]\n\n    for row in range(num_rows // 2):\n        if matrix_a[row] == matrix_a[-row-1]:\n            matrix_a.pop(row)\n            matrix_a.pop(-row-1)\n        else:\n            break\n\n    matrix_b = [matrix_a[i][:ceil(len(matrix_a[i]) / 2)] for i in range(len(matrix_a))]\n\n    if matrix_b == matrix_a:\n        return str(len(matrix_b))\n    else:\n        return '0'\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate matrix size\n    :param stdin: The input\n    :return: The answer to the problem\n    \"\"\"\n\n    # Read matrix from stdin\n    lines = stdin.split('\\n')\n\n    # Read the first line of input\n    n, m = lines[0].split(' ')\n\n    n = int(n)\n    m = int(m)\n\n    # Initialize matrix\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n\n    # Fill matrix\n    for i, line in enumerate(lines[1:]):\n        matrix[i] = [int(x) for x in line.split(' ')]\n\n    # Calculate matrix size\n    min_rows = n\n    for i in range(1, n + 1):\n        if n % i == 0 and m % i == 0:\n            min_rows = i\n\n    # Print answer to the problem\n    print(min_rows)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Hexagonal mirroring.\n\n    This is a hexagonal number: n(n+1)/2\n    '''\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [[int(x) for x in stdin.split(' ') if int(x) == 1] for _ in range(n)]\n\n    if any(len(x)!= m for x in a):\n        return 'NO'\n\n    b = [[0 for _ in range(n)] for _ in range(n)]\n\n    for j in range(n):\n        for i in range(m):\n            b[j][i] = a[n-j-1][i]\n\n    for b_row in b:\n        if sorted(b_row)!= b_row:\n            return 'NO'\n\n    return str(n)\n\n\ndef"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    orders = []\n    for _ in range(n):\n        orders.append([int(x) for x in stdin.readline().strip().split()])\n\n    orders.sort()\n    res = 0\n    day = 0\n    for start, finish in orders:\n        if start < day:\n            continue\n        day = finish\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n)\n    \"\"\"\n    # create dictionary of each start and end time\n    # {start: [orders], end: [orders]}\n    n = int(stdin.readline())\n    time_dict = {}\n    for i in range(n):\n        start, end = map(int, stdin.readline().split())\n        start, end = sorted([start, end])\n        if start in time_dict:\n            time_dict[start].append(end)\n        else:\n            time_dict[start] = [end]\n        if end in time_dict:\n            time_dict[end].append(start)\n        else:\n            time_dict[end] = [start]\n    # iterate through dictionary, pop each start\n    # return max number of orders at that start\n    max_order = 0\n    while time_dict:\n        start, end = list(time_dict.popitem())\n        orders = len(end)\n        max_order = max(max_order, orders)\n    return max_order\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def max_orders_count(n: int, s: str) -> int:\n        s = set()\n        for order in s.split('\\n'):\n            start, end = map(int, order.split())\n            s.add((start, end))\n        s = list(s)\n        s.sort(key=lambda x: x[1])\n        s.sort(key=lambda x: x[0])\n        print(s)\n        count = 0\n        while len(s)!= 0:\n            start, end = s.pop(0)\n            for x in s[:]:\n                print(x)\n                if start < x[0] < end:\n                    s.remove(x)\n                    count += 1\n                if start < x[1] < end:\n                    s.remove(x)\n                    count += 1\n        return count\n    return max_orders_count(n, stdin)\n\n\nsolution(input)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        stdin.readline()\n    return 1"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''.join(stdin.split('\\n')[1:])\n    #return ''.join(stdin.split('\\n')[1:-1])\n    #return ''.join(stdin.split('\\n')[1:-1])\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    inputs = [i.split(\" \") for i in inputs]\n    inputs = [list(map(int, i)) for i in inputs]\n    return len(set(inputs))\n\nprint(solution(input()))\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\npages = [int(x) for x in stdin.readline().split()]\nforms = [int(x) for x in stdin.readline().split()]\n\n\ndef"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/trainingZ9BBR9-64X/\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vova has taken his summer practice this year and now he should write a report on how it went.\n\n    Vova has already drawn all the tables and wrote down all the formulas. Moreover, he has already decided that the report will consist of exactly $n$ pages and the $i$-th page will include $x_i$ tables and $y_i$ formulas. The pages are numbered from $1$ to $n$.\n\n    Vova fills the pages one after another, he can't go filling page $i + 1$ before finishing page $i$ and he can't skip pages.\n\n    Vova wants to rearrange tables and formulas in each page in such a way that he doesn't get bored in the process. Vova can't move some table or some formula to another page.\n\n    Note that the count doesn't reset on the start of the new page. For example, if the page ends with $3$ tables and the next page starts with $5$ tables, then it's counted as $8$ tables in a row.\n\n    Help Vova to determine if he can rearrange tables and formulas on each page in such a way that there is no more than $k$ tables in a row and no more than $k$ formulas in a row.\n\n    \"\"\"\n\n    pass\n\n\ndef"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    tables = list(map(int, stdin.split(' ')))\n    formulas = list(map(int, stdin.split(' ')))\n\n    l = [0 for i in range(n)]\n\n    for i in range(n):\n        l[i] = tables[i] + formulas[i]\n\n    print(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] + l[j] > k:\n                print(False)\n                return\n    print(True)\n    return True\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'NO' if it is not possible to arrange tables and formulas in every page in such a way that there are no more than k tables in a row and no more than k formulas in a row; otherwise return 'YES'.\n\n    >>> solution('2 2\\n5 5\\n2 2')\n    'YES'\n    >>> solution('4 1\\n4 1 10 1\\n3 2 10 1')\n    'NO'\n    \"\"\"\n\n    pages, k = map(int, stdin.split('\\n')[:2])\n    tables, formulas = map(int, stdin.split('\\n')[2:])\n\n    tables_count, formulas_count = 0, 0\n    for page in range(1, pages + 1):\n        for x in range(page):\n            tables_count += tables\n            formulas_count += formulas\n\n        if tables_count > k or formulas_count > k:\n            break\n\n        tables_count, formulas_count = 0, 0\n\n    return 'YES' if pages == page and k <= tables_count + formulas_count else 'NO'\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    y = list(map(int, stdin.split('\\n')[2].split()))\n    ans = \"YES\"\n    current_x = 0\n    current_y = 0\n    for i in range(n):\n        if current_x < k and current_y < k:\n            current_x += x[i]\n            current_y += y[i]\n        else:\n            if current_x > k:\n                current_x -= x[i]\n            if current_y > k:\n                current_y -= y[i]\n            if current_x < k and current_y < k:\n                current_x += x[i]\n                current_y += y[i]\n            else:\n                ans = \"NO\"\n    return ans\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    tables = [int(x) for x in stdin.split('\\n')[1].split()]\n    formulas = [int(x) for x in stdin.split('\\n')[2].split()]\n    pages = []\n    for i in range(m):\n        pages.append([tables[i], formulas[i]])\n    pages.sort(key=lambda x: x[0])\n    i, ans = 0, 'YES'\n    while i < m:\n        j = 0\n        while j < k and i < m:\n            if pages[i][0] > pages[i+j][0]:\n                i, j, ans = i+j, 0, 'NO'\n                break\n            elif pages[i][0] < pages[i+j][0] and pages[i][1] < pages[i+j][1]:\n                i, j, ans = i+j, 0, 'NO'\n                break\n            j += 1\n        i += 1\n    return ans\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pages, pages_per_page, max_tables, max_formulas = [int(s) for s in stdin.split(\"\\n\")]\n    tables = [int(s) for s in stdin.split(\"\\n\")[1].split(\" \")]\n    formulas = [int(s) for s in stdin.split(\"\\n\")[2].split(\" \")]\n\n    formulas_per_page = [0] * pages\n\n    for i, t in enumerate(tables):\n        formulas_per_page[i % pages] += t\n    for i, f in enumerate(formulas):\n        formulas_per_page[i % pages] += f\n\n    print(formulas_per_page)\n    return \"YES\" if any(\n        f <= max_tables and f <= max_formulas for f in formulas_per_page\n    ) else \"NO\"\n    \n    \ndef"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_tables, max_tables, num_formulas, max_formulas = [int(x) for x in stdin.split()]\n    tables = [int(x) for x in stdin.split()][1:]\n    formulas = [int(x) for x in stdin.split()][1:]\n    return \"NO\" if max(tables) + max(formulas) > max_tables + max_formulas else \"YES\"\n\n\n\n'''\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    first, second = map(int, stdin.split(' '))\n    first_tables, first_formulas = map(int, stdin.split(' '))\n    first_tables_needed = first_formulas + 1\n    first_formulas_needed = first_tables + 1\n    for first_i in range(first + 1, min(first_tables_needed, first_formulas_needed) + 1):\n        if first_i % first_tables_needed < first_tables:\n            first_tables_needed += 1\n    for first_j in range(first + 1, min(first_tables_needed, first_formulas_needed) + 1):\n        if first_j % first_formulas_needed < first_formulas:\n            first_formulas_needed += 1\n    for second_i in range(second + 1, min(first_tables_needed, first_formulas_needed) + 1):\n        if second_i % first_tables_needed < first_tables:\n            first_tables_needed += 1\n    for second_j in range(second + 1, min(first_tables_needed, first_formulas_needed) + 1):\n        if second_j % first_formulas_needed < first_formulas:\n            first_formulas_needed += 1\n    if max(first_tables_needed, first_formulas_needed) > second_j:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    poly_coef = [0] * (n + 1)\n    for i in range(1, n + 1):\n        poly_coef[i] = stdin.find(str(i))\n\n    is_divisible = [False] * n\n    for i in range(1, n + 1):\n        is_divisible[i - 1] = stdin.find('?') > 0\n\n    poly_coef_len = len(poly_coef)\n    result = []\n    for i in range(poly_coef_len):\n        for j in range(i + 1, poly_coef_len):\n            for k in range(i + 1, j):\n                poly_coef[i] = poly_coef[j] - poly_coef[k]\n                if poly_coef[i] == k:\n                    poly_coef[i] = 0\n                if all(is_divisible[i] for i in range(poly_coef_len)):\n                    result.append('Yes')\n                else:\n                    result.append('No')\n\n    return '\\n'.join(result)"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets stdin and prints yes if the human can win and no otherwise\"\"\"\n    n, k = [int(i) for i in stdin.split()]\n    polynomial = []\n    for _ in range(n):\n        polynomial.append([i for i in stdin.split()][1:])\n\n    def check_if_polynomial_is_divisible(polynomial):\n        polynomial = \"\".join([str(i) for i in polynomial])\n        polynomial_as_str = polynomial + \" \"\n        if \"0\" in polynomial_as_str:\n            return \"No\"\n        polynomial_as_str = polynomial_as_str.replace(\" \", \"\")\n        polynomial_as_str = polynomial_as_str.replace(\"-\", \" -\")\n        polynomial_as_str = polynomial_as_str.replace(\"+\", \" +\")\n        polynomial_as_str = polynomial_as_str.replace(\"?\", \" x \")\n        polynomial_as_str = polynomial_as_str.replace(\"x\", \" \")\n        polynomial_as_str = polynomial_as_str.replace(\"0\", \"\")\n        polynomial_as_str = polynomial_as_str.replace(\"1\", \" x\")\n        polynomial_as_str = polynomial_as_str.replace(\"2\", \" x^2\")\n        polynomial_as_str = polynomial_as_str.replace(\"3\", \" x^3\")\n        polynomial_as_str = polynomial_as_str.replace(\"4\", \" x^4\")\n        polynomial_as_str = polynomial_as_str.replace(\"5\", \" x^5\")\n        polynomial_as_str = polynomial_as_str.replace(\"6\", \" x^6\")\n        polynomial_as_str = polynomial_as_str.replace(\"7\", \" x^7\")\n        polynomial_as_str = polynomial_as_str.replace(\"8\", \" x^8\")\n        polynomial_as_str = polynomial_as_str.replace(\"9\", \" x^9\")\n        polynomial_as_str = polynomial_as_str.replace(\"-\", \" - \")\n        polynomial_as_str = polynomial_as_str.replace(\" \", \"\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^0\", \"1\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^1\", \"x\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^2\", \"x^2\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^3\", \"x^3\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^4\", \"x^4\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^5\", \"x^5\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^6\", \"x^6\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^7\", \"x^7\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^8\", \"x^8\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^9\", \"x^9\")\n        polynomial_as_str = polynomial_as_str.replace(\" \", \"\")\n        polynomial_as_str = polynomial_as_str.replace(\"- \", \" - \")\n        polynomial_as_str = polynomial_as_str.replace(\"+ \", \" + \")\n        polynomial_as_str = polynomial_as_str.replace(\" \", \" \")\n        polynomial_as_str = polynomial_as_str.replace(\"-\", \" - \")\n        polynomial_as_str = polynomial_as_str.replace(\" \", \"\")\n        polynomial_as_str = polynomial_as_str.replace(\" - \", \" - \")\n        polynomial_as_str = polynomial_as_str.replace(\"+\", \" + \")\n        polynomial_as_str = polynomial_as_str.replace(\" \", \"\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^\", \" x \")\n        polynomial_as_str = polynomial_as_str.replace(\"x^0\", \"x^0\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^1\", \"x^1\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^2\", \"x^2\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^3\", \"x^3\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^4\", \"x^4\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^5\", \"x^5\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^6\", \"x^6\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^7\", \"x^7\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^8\", \"x^8\")\n        polynomial_as_str = polynomial_as_str.replace(\"x^9\", \"x^9\")\n        polynomial_as_str = polynomial_as_str.replace"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) if x!= '?' else None for x in stdin.split('\\n')[1:]]\n    a.extend([0] * n)\n    a.extend([1] * n)\n    a.sort(reverse=True)\n    for i in range(n):\n        for j in range(n):\n            if a[i + j] and a[i + j] >= -10000 and a[i + j] <= 10000 and i + j!= n:\n                a[i + j] = 0\n    for i in range(n):\n        if a[i] is None and a[i + 1] is not None:\n            a[i] = (a[i + 1] - 1) // 2\n        if a[i] and i!= n - 1 and a[i + 1] is None:\n            a[i + 1] = a[i] * 2 - 1\n    if a[n - 1] % k == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    poly = [0 for _ in range(n + 1)]\n    x = 1\n    for i in range(n):\n        if stdin[i] == \"?\":\n            poly[i + 1] = x\n            x += 1\n        else:\n            poly[i + 1] = int(stdin[i])\n    res = \"Yes\"\n    while x <= k:\n        y = 1\n        for i in range(n + 1):\n            if abs(poly[i]) < abs(y):\n                y = poly[i]\n        res = \"No\"\n        for i in range(n + 1):\n            if poly[i] == y:\n                poly[i] = x\n                x += 1\n                break\n    return res"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split(' '))\n    print(f\"N={N}, k={k}\")\n    a = [0] * N\n    for i in range(N):\n        a[i] = -10000 if stdin[i] == '?' else int(stdin[i])\n    print(f\"a={a}\")\n    B = [0] * N\n    for i in range(N):\n        B[i] = -10000 if i % 2 == 0 else 1\n    print(f\"B={B}\")\n    q = int(stdin[N])\n    print(f\"q={q}\")\n    a.append(1)\n    print(f\"a={a}\")\n    B.append(-1)\n    print(f\"B={B}\")\n    if a[0] * q <= 0:\n        return 'Yes'\n    elif a[N - 1] * q >= 0:\n        return 'No'\n    else:\n        print(f\"a[0] * q={a[0] * q}, a[N - 1] * q={a[N - 1] * q}\")\n        return 'Yes' if a[N - 1] * q >= 0 else 'No'"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get data\n    n, k = map(int, stdin.split())\n    poly = [None for _ in range(n + 1)]\n    for i, x in enumerate(stdin.split()):\n        if x!= '?':\n            poly[i] = int(x)\n        else:\n            poly[i] = None\n    # Solve\n    for i in range(n):\n        while poly[i] is None:\n            for j in range(i + 1, n + 1):\n                if j == n:\n                    break\n                poly[j] = None\n    return 'Yes' if n % 2 == 0 else 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    polynomial = []\n    for _ in range(n + 1):\n        coefficient = input()\n        if coefficient == '?':\n            polynomial.append(None)\n        else:\n            polynomial.append(int(coefficient))\n\n    n = len(polynomial) - 1\n    k = abs(k)\n    result = 'No'\n    for i in range(n, 1, -1):\n        if polynomial[i] is None:\n            for j in range(i - 1, -1, -1):\n                if polynomial[j] is not None:\n                    polynomial[i] = polynomial[j]\n                    break\n            if polynomial[i] is None:\n                break\n        if polynomial[i] == 0:\n            result = 'Yes'\n            break\n        elif polynomial[i] * (1 - k) % (1 + i * k) > 0:\n            result = 'Yes'\n            break\n    print(result)\n\nsolution(input())\n\n\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2\\n-1\\n?\\n1\")\n    'Yes'\n    >>> solution(\"4 5\\n-10000\\n0\\n1\\n?\\n1\")\n    'No'\n    \"\"\"\n    _, k = stdin.split()\n    n = int(stdin)\n    polynomial = [\n        float(next(stdin)) if c == \"?\" else int(c)\n        for c in stdin.strip().split(\"\\n\")[1:]\n    ]\n    return \"Yes\" if abs(n - k) > sum(polynomial) else \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    coefficients = {}\n    for i in range(1, n + 1):\n        if stdin[i] == '?':\n            continue\n        coefficients[i] = int(stdin[i])\n    coefficients[n] = -1\n    if not k % 2:\n        k += 1\n    for i in range(n + 1, n + 1 + k):\n        if stdin[i] == '?':\n            continue\n        coefficients[i] = int(stdin[i])\n    for i in range(n + 1 + k, n + 1 + 2 * k):\n        if stdin[i] == '?':\n            continue\n        coefficients[i] = int(stdin[i])\n    B = find_B(coefficients, n + 1)\n    print('Yes' if check_B(coefficients, B, n + 1) else 'No')\n    return\n\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = list(map(int, stdin.split()))\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin[i])\n    # write your code in Python 3.6\n    a.reverse()\n    k = -k\n    for i in range(n):\n        if a[i] == 0:\n            break\n        elif a[i] == -1:\n            if a[i + 1]!= -1:\n                a[i] = 0\n                a[i + 1] = 0\n                break\n        elif a[i] > 0:\n            if a[i + 1] == -1:\n                if (a[i] - k) % a[i + 1] == 0:\n                    a[i] = (a[i] - k) / a[i + 1]\n                    a[i + 1] = 1\n                else:\n                    a[i] = 0\n                    a[i + 1] = 0\n                    break\n            elif a[i + 1]!= -1:\n                if (a[i] - k) % a[i + 1] == 0:\n                    a[i] = (a[i] - k) / a[i + 1]\n                    a[i + 1] = 1\n                else:\n                    a[i] = 0\n                    a[i + 1] = 0\n                    break\n        elif a[i] < 0:\n            if a[i + 1] == -1:\n                if (a[i] + k) % a[i + 1] == 0:\n                    a[i] = (a[i] + k) / a[i + 1]\n                    a[i + 1] = 1\n                else:\n                    a[i] = 0\n                    a[i + 1] = 0\n                    break\n            elif a[i + 1]!= -1:\n                if (a[i] + k) % a[i + 1] == 0:\n                    a[i] = (a[i] + k) / a[i + 1]\n                    a[i + 1] = 1\n                else:\n                    a[i] = 0\n                    a[i + 1] = 0\n                    break\n    a.reverse()\n    for i in range(n):\n        if a[i] == 0:\n            return \"No\"\n        if i == n - 1:\n            return \"No\"\n        elif i == n - 2:\n            if a[n - 1] == 1:\n                return \"Yes\"\n        else:\n            if a[i + 1]!= -1 and a[i] == a[i + 1]:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    x = int(stdin)\n    last = 1\n    while x % 2 == 0:\n        x = x // 2\n    while last < x:\n        last = last * 2 + 1\n        while last % 2 == 0:\n            last = last // 2\n    return last\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum possible X_0.\"\"\"\n    X_2 = int(stdin)\n    X_0 = 2\n    while X_2 % 2!= 0:\n        X_0 = next_prime(X_0)\n        X_2 = next_prime(X_2)\n    return str(X_0)\n\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    \n    primes = []\n    for i in range(2, X_2 + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    \n    numbers = []\n    for i in range(len(primes)):\n        if X_2 % primes[i] == 0:\n            break\n        else:\n            numbers.append(X_2)\n            X_2 = X_2 - 1\n    \n    return numbers[0]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    i = 2\n    while True:\n        if stdin % i == 0:\n            return str(i)\n        i += 1\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    X_2 = int(stdin)\n    p = 2\n    while X_2 % p!= 0:\n        p = p + 1\n    return X_2 // p\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    return n if p == 0 else n % p if n % p == 0 else -1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split(' ')]\n    if p == 0:\n        if n == 1:\n            return -1\n        return 1\n    if n == 1 and p == -1:\n        return -1\n    return sum(2 ** i for i in range(math.ceil(math.log2(n)) + 1)) + abs(p)\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(i) for i in stdin.split(' ')]\n    if p == 0 or p == -1:\n        return -1\n    binary_n = bin(n)[2:]\n    index = binary_n.find('1')\n    if index == -1:\n        return 0\n    else:\n        return index + 1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, p = [int(i) for i in stdin.split()]\n    if p == 0:\n        return int(stdin[:-1])\n\n    ans = 0\n    if x % p!= 0:\n        return -1\n    while x >= p:\n        ans += 1\n        x -= p\n    return ans\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    nums = []\n    if p == 0:\n        nums.append(0)\n        while n > 0:\n            n, m = divmod(n, 2)\n            if m == 0:\n                n = n // 2\n                nums.append(m)\n            else:\n                nums.append(m)\n                n = n // 2\n                nums.append(m)\n        nums.reverse()\n        return str(len(nums))\n    else:\n        p = abs(p)\n        for i in range(p):\n            n, m = divmod(n, 2)\n            if m == 0:\n                n = n // 2\n                nums.append(m)\n            else:\n                nums.append(m)\n                n = n // 2\n                nums.append(m)\n        nums.reverse()\n        if p == 1 and n == 0:\n            return '0'\n        if p == 1 and n!= 0:\n            return str(1)\n        nums_1 = []\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                nums_1.append(nums[i])\n            else:\n                nums_1.append(nums[i])\n        if nums[-1] == nums[-2]:\n            nums_1.append(nums[-1])\n        else:\n            nums_1.append(nums[-1])\n            nums_1.append(nums[-2])\n        nums_1.reverse()\n        nums = []\n        for i in range(len(nums_1)):\n            if i % 2 == 0:\n                nums.append(nums_1[i])\n            else:\n                nums.append(-nums_1[i])\n        return str(len(nums))\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p = list(map(int, stdin.split()))\n    return str(min(\n        p ** p.bit_length() - p ** (p.bit_length() - 1) + 1,\n        -(p - 1) ** p.bit_length() + 1\n    ))"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(num) for num in stdin.split(' ')]\n    if p == 0:\n        return str(int(n == 0))\n    if p < 0:\n        return str(int(n == 0)) if n % 2 == 0 else str(int(n == 1))\n    if p == 1:\n        return str(int(n == 0)) if n % 2 == 0 else str(int(n > 1))\n    if n == 1:\n        return str(int(p < 1 or n % 2 == 0))\n    if n == 0:\n        return str(1) if p < 1 or n % 2 == 0 else str(2)\n    if n == 2:\n        return str(int(p < 1 or n % 2 == 0)) if p < 0 or n % 2 == 0 else str(int(n - 1))\n    return str(int(n > 2 and n % 2 == 0)) if p < 0 or n % 2 == 0 else str(int(n - 2))\n\n\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split(' ')]\n    if p > 0 and n % p == 0:\n        return 1\n    elif p < 0:\n        return 1 if (n - p) % 2 == 0 else -1\n    elif p == 0:\n        return n if n > 0 else -1\n    else:\n        return n // p + 1 if n % p!= 0 else n // p\n\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    S = stdin\n    n = len(S)\n    S = S[::-1]\n    x = 0\n    y = 0\n    while y < n:\n        if S[y]!= \"0\":\n            x = int(S[y]) + 10 * x\n        else:\n            if y + 1 < n:\n                x = int(S[y + 1]) + 10 * x\n                y += 1\n            else:\n                break\n        y += 1\n    return str(x)\ndef"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # My solution\n    # return str(stdin)[::-1]\n    # return str(stdin)\n\n    # Best solution\n    return ''.join(reversed(stdin.lstrip('0')))\n    \n    # 2nd solution\n    # n = len(stdin)\n    # new_n = 0\n    # while stdin:\n    #     new_n += 1\n    #     stdin = stdin[1:]\n    # return '0' * (n - new_n) + stdin\n    \n    # 3rd solution\n    # return stdin if stdin[0]!= '0' else stdin[1:]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[:stdin.index('0')] + stdin[stdin.index('0'):stdin.rfind('0')]))"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\"\\n\")]\n    return stdin[:n]\n\"\"\"\ndef"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return stdin"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = str(stdin)\n    s = list(s)\n    for i in range(k):\n        if s[0] == '0':\n            s.pop(0)\n        else:\n            s.append(s.pop(0))\n    return ''.join(s)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    x, y, cnt_1, cnt_2 = map(int, stdin.split())\n    # x, y, cnt_1, cnt_2 = 3, 3, 1, 2\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    not_possible = []\n    for i in range(2, x):\n        if i in primes:\n            not_possible.append(i)\n        for j in not_possible:\n            if i % j == 0:\n                not_possible.append(i)\n                break\n\n    for i in primes:\n        if i in not_possible:\n            primes.remove(i)\n\n    not_possible = []\n    for i in range(2, y):\n        if i in primes:\n            not_possible.append(i)\n        for j in not_possible:\n            if i % j == 0:\n                not_possible.append(i)\n                break\n\n    for i in primes:\n        if i in not_possible:\n            primes.remove(i)\n\n    primes = list(set(primes))\n    primes.sort()\n\n    for i in primes:\n        if i <= cnt_1:\n            cnt_1 -= i\n        else:\n            break\n\n    for i in primes:\n        if i <= cnt_2:\n            cnt_2 -= i\n        else:\n            break\n\n    return f\"{i} {j} {cnt_1} {cnt_2}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x, y, cnt_1, cnt_2 = list(map(int, stdin.split()))\n    \n    if cnt_1 < 1 or cnt_1 > 10**9:\n        raise ValueError\n    elif cnt_1 > cnt_2:\n        raise ValueError\n    \n    if cnt_2 < 1 or cnt_2 > 10**9:\n        raise ValueError\n    elif cnt_1 + cnt_2 > 10**9:\n        raise ValueError\n    \n    if y < 2 or y > 10**4:\n        raise ValueError\n    elif x < 2 or x > y:\n        raise ValueError\n    \n    primes_in_range = []\n    primes = []\n    \n    for i in range(2, y+1):\n        if is_prime(i):\n            primes.append(i)\n    \n    for j in primes:\n        if j % x == 0:\n            primes_in_range.append(j)\n    \n    primes_in_range = list(set(primes_in_range))\n    \n    result = x + y - 1\n    \n    for i in range(result, x-1, -1):\n        if i not in primes_in_range:\n            result = i\n            break\n    \n    print(result)\n    \n    return ''\n\ndef"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution to the task.\"\"\"\n   ...\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_prime(n):\n        if n == 2 or n == 3:\n            return True\n        if n < 2 or n % 2 == 0:\n            return False\n        if n < 9:\n            return True\n        if n % 3 == 0:\n            return False\n        r = int(n ** 0.5)\n        f = 5\n        while f <= r:\n            if n % f == 0:\n                return False\n            if n % (f + 2) == 0:\n                return False\n            f += 6\n        return True\n\n    nums = [int(x) for x in stdin.split()]\n\n    x = nums[2]\n    y = nums[3]\n\n    cnt_1 = 0\n    for i in range(1, nums[0] + 1):\n        if not is_prime(i):\n            if i % x == 0:\n                continue\n            cnt_1 += 1\n\n    cnt_2 = 0\n    for i in range(1, nums[1] + 1):\n        if not is_prime(i):\n            if i % y == 0:\n                continue\n            cnt_2 += 1\n\n    return cnt_1 + cnt_2\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(len(l)):\n        count += l[i]\n    if count % 2!= 0:\n        return count\n    else:\n        count = 0\n        for i in range(len(l)):\n            if i % 2 == 0:\n                count += l[i]\n        return count\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    cnt_1, cnt_2, x, y = [int(i) for i in stdin]\n\n    def all_divisors(x):\n        divisors = []\n        for i in range(1, x + 1):\n            if x % i == 0:\n                divisors.append(i)\n        return divisors\n    all_divisors_x = all_divisors(x)\n    all_divisors_y = all_divisors(y)\n    divisors = set(all_divisors_x).intersection(all_divisors_y)\n    divisors = [i for i in divisors if i!= x and i!= y]\n    ans = [x for x in range(cnt_1 + cnt_2 + 1, cnt_1 + cnt_2 + len(divisors) + 1)]\n    return''.join(str(i) for i in ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    if cnt_1 == 1:\n        if y % x == 0:\n            return str(cnt_2 // y + cnt_2 % y)\n        else:\n            return str(cnt_2 // y)\n    if cnt_2 == 1:\n        if x % y == 0:\n            return str(cnt_1 // x + cnt_1 % x)\n        else:\n            return str(cnt_1 // x)\n    else:\n        return str(min(cnt_1 // x + cnt_1 % x, cnt_2 // y + cnt_2 % y))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    return n + y - (y // x) - (y % x) + 1 if y % x else n + y // x"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, cnt_1, cnt_2 = map(int, stdin.split())\n    a, b = set(range(1, cnt_1 + 1)), set(range(1, cnt_2 + 1))\n    n = set(map(int, stdin.split()))\n    ans = min(cnt_1 - len(n & a), cnt_2 - len(n & b))\n    return str(ans)\n\n\n\n-----Notes-----\n\n- This problem is a simple version of the similar problem 106 (https://codeforces.com/problemset/problem/106/A).\n\n\"\"\"\n\ndef"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n, sx, sy, dx, dy, t = [int(i) for i in input]\n    r_ = [dx, dy]\n    r_x, r_y = sx + dx, sy + dy\n    r = [r_x, r_y]\n    while t > 0:\n        t -= 1\n        r = [r_x, r_y]\n        r_x = (r_x + r[0]) % n\n        r_y = (r_y + r[1]) % n\n        r = [r_x, r_y]\n    return str(r_x) + \" \" + str(r_y)\n\"\"\"\ndef"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, sx, sy, dx, dy, t = [int(i) for i in stdin.split(' ')]\n\n    x, y = sx - 1, sy - 1\n    stdout = ''\n\n    for i in range(t):\n        if i % n == 0:\n            x, y = (x + dx - 1) % n, (y + dy - 1) % n\n            if i!= 0:\n                stdout += f' {x + 1} {y + 1}'\n            else:\n                stdout += f' {x + 1} {y + 1}'\n        else:\n            x, y = (x + dx - 1) % n, (y + dy - 1) % n\n            if i!= 0:\n                stdout += f' {x + 1} {y + 1}'\n            else:\n                stdout += f' {x + 1} {y + 1}'\n\n    return stdout\n    '''\n\n\n    n, sx, sy, dx, dy, t = [int(i) for i in stdin.split(' ')]\n\n    x, y = sx - 1, sy - 1\n    stdout = ''\n\n    for i in range(t):\n        if i % n == 0:\n            x, y = (x + dx - 1) % n, (y + dy - 1) % n\n            if i!= 0:\n                stdout += f' {x + 1} {y + 1}'\n            else:\n                stdout += f' {x + 1} {y + 1}'\n        else:\n            x, y = (x + dx - 1) % n, (y + dy - 1) % n\n            if i!= 0:\n                stdout += f' {x + 1} {y + 1}'\n            else:\n                stdout += f' {x + 1} {y + 1}'\n\n    return stdout"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 1 2 0 1 2\\n\")\n    3 1\n    \"\"\"\n    n, sx, sy, dx, dy, t = [int(n) for n in stdin.split()]\n    x, y = sx, sy\n    for _ in range(t):\n        # move\n        x += dx\n        y += dy\n        # eat\n        x %= n\n        y %= n\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split(' ')]\n    if sx + dx < 1 or sy + dy < 1:\n        return '{} {}'.format(1, 1)\n    x, y = sx, sy\n    dx, dy = dx, dy\n    while t > 0:\n        x, y = x + dx, y + dy\n        if x < 1:\n            x = n + x\n        if y < 1:\n            y = n + y\n        t -= 1\n    return '{} {}'.format(x, y)\n    '''\n    a = [int(x) for x in stdin.split(' ')]\n    x, y = a[1], a[2]\n    while a[5] > 0:\n        x, y = (x + a[3] - 1) % a[0] + 1, (y + a[4] - 1) % a[0] + 1\n        a[5] -= 1\n    return '{} {}'.format(x, y)\n\n\ndef"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\" \")\n    n, sx, sy, dx, dy, t = [int(n) for n in inputs]\n    sx, sy = sx - 1, sy - 1\n    x, y = sx, sy\n    dx, dy = dx, dy\n    move = 0\n    while move <= t:\n        if x == dx and y == dy:\n            break\n        if move + 1 <= t and t % 2 == 1:\n            move += 1\n            dx, dy = dx + 1, dy + 1\n        if move + 1 <= t and t % 2 == 0:\n            move += 1\n            dx, dy = dx - 1, dy - 1\n        x, y = (x + dx) % n, (y + dy) % n\n    return str(x + 1) + \" \" + str(y + 1)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split(' ')]\n\n    # Total number of berry bushes\n    berry = (n * (n + 1)) // 2\n\n    # Number of berry bushes after moving\n    berry_next = (n * (n + 1)) // 2\n\n    # The number of moves\n    move = t // berry\n\n    # The number of moves before eating berry\n    berry_move = t % berry\n\n    # The current position of the bear\n    x, y = sx, sy\n\n    for i in range(move):\n        # Increase the speed of the bear\n        x += dx\n        y += dy\n\n        # If the bear is out of bounds\n        if x > n or y > n:\n            # The bear has hit the border\n            x -= dx\n            y -= dy\n\n        # If the bear has hit a berry bush\n        if x == 1 and y == 1:\n            # The bear eats the berry bush\n            berry -= 1\n\n            # The bear moves to the next position\n            x += dx\n            y += dy\n\n    # The number of berry bushes after the last move\n    berry_last = berry_next % berry\n\n    # If the number of berry bushes is not zero\n    if berry_last!= 0:\n        # The bear eats the berry bushes\n        x += dx\n        y += dy\n\n        # The last move was a move after eating berry bushes\n        if x == 1 and y == 1:\n            # The bear eats the berry bushes\n            berry -= berry_last\n\n            # The bear moves to the next position\n            x += dx\n            y += dy\n\n    # Return the final position of the bear\n    return f\"{x} {y}\"\n\ndef"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    r = t % (n * n)\n    x = (sx + dx * (r // n) - 1) % n + 1\n    y = (sy + dy * (r // n) - 1) % n + 1\n    print(x, y)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n\n    if t % (n - 1) == 0:\n        return str(sx - 1) +'' + str(sy - 1)\n\n    sx = sx % n + 1\n    sy = sy % n + 1\n    x = dx % n + 1\n    y = dy % n + 1\n    for _ in range(t):\n        x += sx\n        y += sy\n        sx = x\n        sy = y\n        x = x % n + 1\n        y = y % n + 1\n\n    return str(x - 1) +'' + str(y - 1)\n\n\ndef"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split(' ')]\n    x, y = sx - 1, sy - 1\n    for _ in range(t):\n        x, y = (x + dx - 1) % n + 1, (y + dy - 1) % n + 1\n    print(x, y)"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] == '?':\n            return stdin[:i] + stdin[i+1:]\n    return stdin\n    \nprint(solution('ABCD??FGHIJK?OPQRSTUVWXYZ'))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\".join([char for char in stdin if char!= '?'])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def replace_q(s: str) -> str:\n        s_q = ''\n        for c in s:\n            if c == '?':\n                s_q += c\n            else:\n                s_q += c.upper()\n        return s_q\n    def is_nice(s: str) -> bool:\n        if s.count('?') == 0:\n            return False\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1] and s[i]!= '?':\n                return True\n        return False\n    s_q = replace_q(stdin)\n    if is_nice(s_q):\n        return s_q\n    return '-1'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    missing = \"\".join([letter for letter in letters if letter not in stdin])\n    for length in range(len(stdin), 0, -1):\n        if missing.count(missing[:length]) == 0:\n            return stdin[:length] + missing[:length]\n    return \"-1\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = set(stdin)\n    alphabet = set(string.ascii_uppercase)\n    s = set(stdin.replace('?', ''))\n    diff = alphabet - s\n    res = set()\n    if len(s) == 26:\n        for word in words:\n            if set(word) == s:\n                res.add(word)\n    else:\n        res = [stdin]\n    if len(res) == 0:\n        return '-1'\n    return ''.join(res)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from string import ascii_lowercase\n    alpha = ascii_lowercase\n    for i in range(len(alpha)):\n        if stdin.count(alpha[i])!= 1:\n            return '-1'\n    targets = [stdin.replace('?', alpha[i], 1) for i in range(len(alpha))]\n    for target in targets:\n        if len(target) == 26:\n            return target\n    return '-1'\n\"\"\"\n\nimport string\nfrom collections import Counter\n\nALPHABET = string.ascii_lowercase\n\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    arr = [0] * 26\n    answer = \"\"\n    \n    for i in stdin:\n        if i == \"?\":\n            arr[ord(alphabet[-1]) - 65] = -1\n            alphabet = alphabet[:-1]\n        else:\n            arr[ord(i) - 65] += 1\n            \n    if max(arr) >= 26:\n        return \"-1\"\n    \n    for i in stdin:\n        if i == \"?\":\n            if arr[ord(alphabet[0]) - 65] < 26:\n                answer += alphabet[arr[ord(alphabet[0]) - 65]]\n            else:\n                answer += alphabet[-1]\n                \n        else:\n            answer += i\n    \n    return answer\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    N = int(s[0])\n    W = [int(i) for i in s[1].split(' ')]\n    return \"YES\" if len(set(W)) == 1 else \"NO\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sum([int(i) for i in stdin.split()]) % 3 == 0 else \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = map(int, stdin.split())\n    for i in range(n):\n        if weights[i] == 200:\n            continue\n        elif weights[i] == 100:\n            continue\n        elif weights[i] > 200:\n            print('NO')\n            return\n        else:\n            print('NO')\n            return\n    print('YES')\n    return\n\ndef"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_apples = int(stdin.readline())\n    apples_in_kg = [int(el) for el in stdin.readline().split()]\n    apples_in_kg.sort(reverse=True)\n    if len(apples_in_kg) % 2 == 0:\n        apples_in_kg.append(0)\n    return \"YES\" if apples_in_kg[0] == apples_in_kg[1] else \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin.split()) == sum(stdin.split()) / len(stdin.split()) else 'NO'\n\n-----Tests-----\n\nTest cases\n\n--Problem Test Cases--\n--Sample Input--\n1\n100\n\n--Sample Output--\nYES\n\n--Explanation--\nThe apple weights are 100, 100, 100, 200. This way, the first and the last apple are given to Touma Kazusa and the middle apple is given to Ogiso Setsuna.\n\"\"\"\n\n\"\"\"\nSolution:\n\"\"\"\ndef"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    apples = list(map(int, stdin.readline().split()))\n    apples.sort()\n    half_sum = sum(apples) // 2\n    if sum(apples) % 2 == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print('YES' if len(stdin.split()) == 2 and sum([int(i) for i in stdin.split()]) == 200 else 'NO')\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n    data = [int(i) for i in input_data[1].split()]\n    total = sum(data)\n    if total % n == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if ''.join(stdin.split()) == ''.join(reversed(stdin.split())) else 'NO'\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    lst = []\n    for i in range(n):\n        lst.append([int(j) for j in stdin.split()])\n    return sum([min([lst[i][j] + lst[i][j+1] + lst[i][j+2] for j in range(m-1)]) for i in range(n-1)])\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n====Input=======\n2 2\n10 01\n00 11\n\n====Output=======\n5\n\nExplanation:\nYou can turn off the light in the 2nd room in the ground floor, and also turn off the light in the 1st room in the 2nd floor.\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Complete the minimumTime function below.\n    def minimumTime(n: int, m: int, arr: str) -> int:\n        \"\"\"\n        Return the minimum time required to turn off all the lights.\n        \"\"\"\n        # Greedy solution, for each floor:\n        # First turn off all the lights,\n        # then turn off the current lights\n        # repeat until all lights are off\n        # time complexity: O(nm)\n        time_to_turn_off_lights = 0\n        current_floor = 0\n        \n        for floor in arr:\n            \n            # turn off the lights\n            time_to_turn_off_lights += n\n            \n            # turn off the lights\n            time_to_turn_off_lights += m\n            \n            # get next floor\n            current_floor += 1\n            \n        return time_to_turn_off_lights\n    \n    # n = number of floors, m = number of rooms in each floor\n    n, m = [int(x) for x in stdin.split()]\n    \n    # arr = list of string that represents the floor layout\n    arr = [stdin[i: i+m+2] for i in range(0, n*(m+2), m+2)]\n    \n    # return minimum time required to turn off all the lights\n    return str(minimumTime(n, m, arr))\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    floor = []\n    for _ in range(n):\n        floor.append(stdin.split('\\n')[0])\n    \n    # floor = [\n    #     '11110',\n    #     '01110',\n    #     '01110',\n    #     '11110',\n    # ]\n    # floor = [\n    #     '11110',\n    #     '11110',\n    #     '11110',\n    #     '11110',\n    # ]\n    # floor = [\n    #     '11110',\n    #     '11110',\n    #     '11110',\n    #     '11110',\n    # ]\n\n    # n, m = 4, 3\n    # floor = [\n    #     '11110',\n    #     '11110',\n    #     '11110',\n    #     '11110',\n    # ]\n    # n, m = 3, 4\n    # floor = [\n    #     '11110',\n    #     '11110',\n    #     '11110',\n    #     '11110',\n    # ]\n    # n, m = 2, 2\n    # floor = [\n    #     '110',\n    #     '110',\n    #     '110',\n    #     '110',\n    # ]\n    # n, m = 3, 3\n    # floor = [\n    #     '110',\n    #     '110',\n    #     '110',\n    #     '110',\n    # ]\n\n    # n, m = 2, 2\n    # floor = [\n    #     '110',\n    #     '110',\n    #     '110',\n    #     '110',\n    # ]\n    # n, m = 3, 3\n    # floor = [\n    #     '110',\n    #     '110',\n    #     '110',\n    #     '110',\n    # ]\n    # n, m = 4, 3\n    # floor = [\n    #     '110',\n    #     '110',\n    #     '110',\n    #     '110',\n    # ]\n\n    # n, m = 4, 4\n    # floor = [\n    #     '110',\n    #     '110',\n    #     '110',\n    #     '110',\n    # ]\n\n    time = 0\n    floor_now = 0\n    for i in range(n):\n        if floor[i][0] == '1':\n            floor_now = i\n            break\n    \n    left_down = 0\n    left_up = 0\n    right_down = 0\n    right_up = 0\n    for j in range(m):\n        if floor[floor_now][j] == '1':\n            if j == 0:\n                left_down = 1\n            elif j == m - 1:\n                right_down = 1\n            else:\n                left_up = 1\n                right_up = 1\n        else:\n            if j == 0:\n                left_down = 0\n            elif j == m - 1:\n                right_down = 0\n            else:\n                left_up = 0\n                right_up = 0\n\n    if left_up and right_up:\n        for k in range(floor_now + 1, n):\n            if floor[k][0] == '1':\n                time += 1\n    elif left_down and right_down:\n        for k in range(floor_now - 1, -1, -1):\n            if floor[k][0] == '1':\n                time += 1\n    elif left_up and right_down:\n        for k in range(floor_now + 1, n):\n            if floor[k][0] == '1':\n                time += 1\n        for k in range(floor_now - 1, -1, -1):\n            if floor[k][0] == '1':\n                time += 1\n    elif left_down and right_up:\n        for k in range(floor_now - 1, -1, -1):\n            if floor[k][0] == '1':\n                time += 1\n        for k in range(floor_now + 1, n):\n            if floor[k][0] == '1':\n                time += 1\n\n    return time"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    floors = [\n        [int(x) for x in list(stdin[i])] for i in range(n)\n    ]\n    dp = [[0] * (m + 2) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(m + 2):\n            dp[i][j] = dp[i - 1][j]\n            if floors[i - 1][j] == 1:\n                dp[i][j] += dp[i - 1][j - 1]\n    return dp[n][m]\n\"\"\"\n\nimport os\n\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n\n    import sys\n\n    sys.setrecursionlimit(10 ** 6)\n    input = sys.stdin.readline\n\n    n, m = [int(x) for x in input().split()]\n    a = [[int(y) for y in input().split()] for i in range(n)]\n\n    from collections import deque\n    q = deque()\n    for i in range(n):\n        for j in range(1, m + 1):\n            if a[i][j] == 1:\n                q.append((i, j))\n\n    def dfs(i, j):\n        a[i][j] = 0\n        if i > 0 and a[i - 1][j] == 1:\n            dfs(i - 1, j)\n        if i + 1 < n and a[i + 1][j] == 1:\n            dfs(i + 1, j)\n        if j > 0 and a[i][j - 1] == 1:\n            dfs(i, j - 1)\n        if j + 1 < m + 1 and a[i][j + 1] == 1:\n            dfs(i, j + 1)\n\n    def bfs():\n        q.append((0, 0))\n        while q:\n            i, j = q.popleft()\n            if i == n - 1 and j == m:\n                return\n            if i > 0 and a[i - 1][j] == 1:\n                q.append((i - 1, j))\n            if i + 1 < n and a[i + 1][j] == 1:\n                q.append((i + 1, j))\n            if j > 0 and a[i][j - 1] == 1:\n                q.append((i, j - 1))\n            if j + 1 < m + 1 and a[i][j + 1] == 1:\n                q.append((i, j + 1))\n\n    cnt = 0\n    while q:\n        i, j = q.popleft()\n        cnt += 1\n        dfs(i, j)\n        bfs()\n\n    return cnt\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n, m = map(int, data.pop(0).split())\n    times = 0\n    while data[-1] == '0' * (m + 2):\n        data.pop()\n        m -= 1\n    for floor in data:\n        for i in range(m):\n            if floor[i] == '0':\n                times += 1\n    return times\n\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    \n    \n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin):\n        n, *c = stdin.split('\\n')\n        c = list(map(int, c))\n        a = list(map(int, stdin.split('\\n')[1:]))\n\n        def get_max_cost(c, a):\n            ans = [c[0]] + [0] * (len(c) - 1)\n            for i in range(len(c) - 1):\n                ans[i + 1] = min(ans[i] + c[i + 1], c[i] + a[i + 1])\n            return ans\n\n        cost = get_max_cost(c, a)\n        return cost[-1]\n\n    return solve(stdin)\n\n\n\ndef"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *traps = map(int, stdin.split('\\n')[0].split())\n    x = [0] + list(map(int, stdin.split('\\n')[1].split()))\n\n    # cache[i][j] = min cost to reach j-th room using traps only from first i-th room\n    cache = [[float('inf') for _ in range(n + 1)] for _ in range(n + 1)]\n\n    cache[1][1] = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if x[i]!= j:\n                cache[i][j] = min(cache[i][j], cache[i][i])\n            else:\n                cache[i][j] = 0\n\n            for k in range(i):\n                if x[k]!= j:\n                    cache[i][j] = min(cache[i][j], cache[i][k] + traps[i - k - 1])\n\n    return min([cache[-1][i] for i in range(1, n + 1)])\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rooms = int(stdin[0])\n    num_of_burles_in_each_room = [int(x) for x in stdin[1].split(' ')]\n    num_of_mouse_in_each_room = [int(x) for x in stdin[2].split(' ')]\n\n    min_cost = 0\n    min_cost_set = 0\n\n    for room_number in range(1, num_of_rooms + 1):\n        cost = 0\n        for mouse_count, burles_count in zip(num_of_mouse_in_each_room, num_of_burles_in_each_room):\n            if room_number == 1:\n                if mouse_count!= 0:\n                    cost += burles_count\n            elif mouse_count!= 0:\n                cost += burles_count\n        if cost < min_cost_set or min_cost_set == 0:\n            min_cost_set = cost\n            min_cost = room_number\n    \n    return min_cost\n\n\nprint(solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\"))\nprint(solution(\"4\\n1 1 1 1 1\\n2 2 2 3 6 7 6\"))\nprint(solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\"))\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split('\\n')[0].split()))\n    if n < 2 or n > 2 * 10 ** 5:\n        raise ValueError('\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430')\n    c = list(map(int, stdin.split('\\n')[1].split()))\n    if any(i > 10 ** 4 for i in c):\n        raise ValueError('\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430')\n    if any(i > n for i in a):\n        raise ValueError('\u0412\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u043e\u0432')\n    a.append(0)\n\n    b = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i):\n            b[i] = max(b[i], a[j] + c[j])\n    b[n] = max(b[n], 1)\n    print(max(b))\n    return\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    costs = list(map(int, stdin[1].split()))\n    arrivals = list(map(int, stdin[2].split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for t in range(1, n + 1):\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                dp[i][j] = min(dp[i][j], costs[i] + dp[i][t] + costs[j] - dp[t][j])\n    ans = 0\n    for i in range(n):\n        ans += dp[i][n - 1]\n    print(ans)\n    return ''\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return 'The Answer'\n\ndef"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  pass\n\ndef"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = [*map(int, stdin.split())]\n    a = [*map(int, stdin.split())]\n\n    ans = 0\n    r = 0\n    for i in range(1, n):\n        if a[i] == r:\n            r = i + 1\n            ans += c[i - 1]\n        else:\n            r = a[i]\n    print(ans)"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"return str(answer)\"\n    n, *costs = map(int, stdin.split())\n    m, *paths = map(int, stdin.split())\n    costs = sorted(costs)\n    paths = sorted(paths)\n    sum = 0\n    for i in range(n):\n        sum += costs[i] * paths.count(paths[i])\n    return sum\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return None"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    return n - 1 if a * b < 0 else abs(b)\n\"\"\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a - b < 0:\n        print(n - abs(a - b))\n    else:\n        print(1)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of the entrance near which Vasya will be at the end of his walk.\n    :param stdin: input\n    :return: output\n    '''\n    return 0\n\n'''\n[Summary]: Aaaaaa\n\nhttps://app.codility.com/demo/results/training8TKUX8-5B9/\nTime complexity: O(N)\nSpace complexity: O(1)\n\n'''\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    return n - a - b + 1 if abs(b) > abs(a) else n - a\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return n - a if b >= 0 else a\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n---\n\n\"\"\"\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    print(\"3\")\n    return \"\"\n    "
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_arithmetic(l: list, first: int, second: int, third: int) -> bool:\n        return (third - second) == (first - second)\n\n    length, *numbers = [int(n) for n in stdin.split()]\n    length = min(length, 100010)\n    numbers = [n for n in numbers if n >= 0]\n    if len(numbers) == length:\n        return '1'\n    cur = 1\n    ans = 0\n    while cur < length:\n        cur += 1\n        if is_arithmetic(numbers[:cur], numbers[cur - 1], numbers[cur - 2], numbers[cur]):\n            ans += 1\n        else:\n            continue\n    return str(ans)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split(' ')))\n    d = {}\n    res = 0\n    for num in nums:\n        if num == -1:\n            res += 1\n        else:\n            if num in d:\n                res += d[num]\n            d[num + 1] = d.get(num + 1, 0) + 1\n    return res\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    print(a)\n    count = 0\n    for i in range(n):\n        if a[i] > 0:\n            count += 1\n        if a[i] == -1:\n            count += 1\n    if count == n:\n        print(0)\n        return\n    arr = [[0] * 2 for i in range(n)]\n    arr[0][0] = 1\n    arr[0][1] = a[0]\n    for i in range(1, n):\n        for j in range(2):\n            if arr[i - 1][j] == 0:\n                continue\n            if arr[i - 1][j] + 1 == a[i]:\n                arr[i][j] = 1\n            elif arr[i - 1][j] + 1 == a[i] + 1:\n                if j == 0:\n                    arr[i][j] = 1\n                else:\n                    arr[i][j] = 2\n    print(arr)\n    count = 0\n    for i in range(1, n):\n        for j in range(2):\n            if arr[i][j] > 0:\n                count += 1\n    print(count)"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 8 6 4 2 1 4 7 10 2\n   ... ''')\n    '3'\n    \"\"\"\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i]!= -1:\n            dp[i] = 1\n        for j in range(i - 1, -1, -1):\n            if a[i]!= -1:\n                if a[i] - a[j] == 1:\n                    dp[i] = min(dp[i], dp[j] + 1)\n            else:\n                break\n    print(dp[-1])\n    return ''"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, nums = [int(i) for i in stdin.split()]\n    nums = [int(i) for i in stdin.split()]\n    stdin.split()\n    dp = [[nums[0]]]\n    for i in range(1, n):\n        dp.append([nums[i]])\n        dp[i].append(max(dp[i-1][0]+nums[i], nums[i]))\n        for j in range(1, i):\n            if nums[i] > nums[i-1] and dp[i-1][j-1] + nums[i] > nums[i]:\n                dp[i].append(max(dp[i-1][j]+nums[i], dp[i-1][j-1]+nums[i]))\n            else:\n                dp[i].append(dp[i-1][j])\n\n    return dp[n-1][-1]\n\n\n\nsolution(\"9 8 6 4 2 1 4 7 10 2\")\n\nsolution(\"5 -1 -1 -1 -1\")\n\nsolution(\"7 -1 -1 4 5 1 2 3\")\n\n\n\n\ndef"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"hello\"\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n\n    # Find the first consecutive element that isn't -1\n    not_negative_1 = next((i for i in range(n) if sequence[i]!= -1), n)\n\n    # For the rest of the sequence, check if the elements in the sub-sequences are in an arithmetic progression.\n    # If they are, the minimum number of progressions is equal to the number of elements in the sub-sequences.\n    # Otherwise, the minimum number of progressions is equal to the number of elements in the sub-sequences - 1.\n    for i in range(not_negative_1, n):\n        is_arithmetic_progression = True\n        for j in range(i + 1, n):\n            is_arithmetic_progression = is_arithmetic_progression and (sequence[j] - sequence[j - 1] == sequence[j - 1] - sequence[j - 2])\n            if not is_arithmetic_progression:\n                break\n        if is_arithmetic_progression:\n            break\n        else:\n            not_negative_1 -= 1\n\n    return not_negative_1\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(num) for num in stdin.split(' ')]\n    assert len(arr) == n\n    ans = 0\n    # last_pos = 0\n    # last_value = 0\n    # last_pos = 0\n    while -1 in arr:\n        temp = arr.index(-1)\n        if temp == 0:\n            ans += 1\n            arr[temp] = 0\n        else:\n            if arr[temp - 1] == -1:\n                ans += 1\n            arr[temp] = arr[temp - 1] + 1\n            if arr[temp] > 10 ** 9:\n                arr[temp] = 0\n                ans += 1\n    print(ans)"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    progressions = [int(s) for s in stdin.readline().split(' ')]\n    ans = []\n    for i in range(1, n):\n        if progressions[i] == -1:\n            continue\n        else:\n            length = 1\n            diff = progressions[i] - progressions[i-1]\n            while (i + length < n and diff == progressions[i + length] - progressions[i + length - 1]):\n                length += 1\n            ans.append(length)\n    return ans\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    string = stdin[2]\n    max_beauty = 0\n    for i in range(n):\n        for j in range(i, n):\n            counter = 0\n            for c in range(i, j + 1):\n                if string[c] == 'a':\n                    counter += 1\n                if counter >= k:\n                    max_beauty = max(max_beauty, j - i + 1)\n                    break\n    return max_beauty\nprint(solution(input()))\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    a, b = '', ''\n    for i in range(n):\n        if s[i] == 'a':\n            a += 'a'\n        elif s[i] == 'b':\n            b += 'b'\n    if len(a) > len(b):\n        return len(a)\n    else:\n        return len(b)"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    result = s\n    cnt = 0\n    start_idx = 0\n    start_idx_2 = n-1\n    prev_letter = s[0]\n    for i in range(n):\n        if s[i]!= prev_letter:\n            cnt += 1\n            prev_letter = s[i]\n        if cnt > k:\n            if prev_letter == 'a':\n                result = s[:start_idx] + s[start_idx+1:]\n            else:\n                result = s[:start_idx] + s[start_idx:start_idx_2][::-1] + s[start_idx_2+1:]\n            return result\n        if i == n-1:\n            if prev_letter == 'a':\n                result = s[:start_idx] + s[start_idx+1:]\n            else:\n                result = s[:start_idx] + s[start_idx:start_idx_2][::-1] + s[start_idx_2+1:]\n            return result\n        start_idx += 1\n        start_idx_2 -= 1\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns string that will be Vasya's new birthday present, \n    where Vasya can change no more than k characters.\n\n    >>> solution('4 2\\nabba')\n    4\n    >>> solution('8 1\\naabaabaa')\n    5\n    \"\"\"\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = stdin[0:n]\n    d = {}\n    max = 0\n    for i in range(n):\n        if stdin[i] == 'a':\n            if stdin[i:i + k] in d:\n                d[stdin[i:i + k]] += 1\n                if max < d[stdin[i:i + k]]:\n                    max = d[stdin[i:i + k]]\n            else:\n                d[stdin[i:i + k]] = 1\n                if max < d[stdin[i:i + k]]:\n                    max = d[stdin[i:i + k]]\n        elif stdin[i] == 'b':\n            if stdin[i:i + k] in d:\n                d[stdin[i:i + k]] -= 1\n                if max < d[stdin[i:i + k]]:\n                    max = d[stdin[i:i + k]]\n            else:\n                d[stdin[i:i + k]] = 1\n                if max < d[stdin[i:i + k]]:\n                    max = d[stdin[i:i + k]]\n    return max\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, k = map(int, stdin.split())\n    max_n = -1\n    for i in range(n):\n        if s[i] == 'b':\n            if k > 0:\n                if i > 0:\n                    for j in range(i, n):\n                        if s[j] == 'a':\n                            k -= 1\n                            if k == 0:\n                                max_n = max(max_n, j - i + 1)\n                                break\n                        else:\n                            break\n                else:\n                    max_n = max(max_n, 1)\n            else:\n                break\n    return max_n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = map(int, stdin.split())\n    chars = list(stdin)\n    l = 0\n    cnt = 0\n    ans = 0\n    for r in range(n):\n        if chars[r] == 'b':\n            cnt += 1\n        else:\n            if l <= r - 1 and r + 1 <= n - 1:\n                if chars[r - 1] == chars[r + 1]:\n                    ans = max(ans, cnt)\n                    cnt = 0\n                    l = r + 1\n                    continue\n            l = r + 1\n            cnt = 0\n    ans = max(ans, cnt)\n    if ans < k:\n        ans = 0\n    return str(ans)"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\u0412\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0432\u043e\u0434 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0437 \u0431\u0443\u043a\u0432 \u0410 \u0438 \u0411 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0430 \u0431\u0443\u043a\u0432 \u0410, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0431\u0443\u043a\u0432 \u0410 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0431\u0443\u043a\u0432 \u0411 \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0431\u0443\u043a\u0432 \u0411 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0431\u0443\u043a\u0432 \u0410 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435?\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 k, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c. \u0421\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0410 \u0438 \u0411 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430: 4 2\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b: 4\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430: 8 1\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b: 5\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get number of parties.\n    n = int(stdin.readline().strip())\n    \n    # Get number of seats for each party.\n    seats = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    # Initialise list of indecies for parties to be considered.\n    parties = [0]\n    \n    # Keep track of how many seats are there for each party.\n    seats_required = [seats[0]]\n    \n    # If there are more seats than needed, keep only the number of seats.\n    if seats[0] >= seats[1]:\n        parties.append(1)\n        seats_required.append(seats[1])\n    \n    # Iterate through parties, appending the next party to the list if it is\n    # either more seats required or no other parties are required.\n    for i in range(2, n):\n        if seats[i] >= seats_required[-1] or seats[i] >= seats_required[0]:\n            parties.append(i)\n            seats_required.append(seats[i])\n    \n    # If there is no requirement for a party to join the coalition, there is\n    # no possible coalition.\n    if seats_required[0] == seats_required[1]:\n        return 0\n    \n    # Number of parties.\n    k = len(parties)\n    \n    # Get minimum number of seats required for a party to join the coalition.\n    seats_required = seats_required[-1]\n    \n    # Initialise list of indecies for parties to be considered.\n    parties = [0]\n    \n    # Keep track of how many seats are there for each party.\n    seats_required = [seats_required]\n    \n    # Iterate through parties, appending the next party to the list if it is\n    # either more seats required or no other parties are required.\n    for i in range(1, k):\n        if seats_required[-1] > seats_required[0] or seats_required[-1] > seats[i]:\n            parties.append(i)\n            seats_required.append(seats[i])\n    \n    # If there is no requirement for a party to join the coalition, there is\n    # no possible coalition.\n    if seats_required[0] == seats_required[1]:\n        return 0\n    \n    # Initialise list of indecies for parties to be considered.\n    parties = [0]\n    \n    # Keep track of how many seats are there for each party.\n    seats_required = [seats_required[0]]\n    \n    # Iterate through parties, appending the next party to the list if it is\n    # either more seats required or no other parties are required.\n    for i in range(1, k):\n        if seats_required[-1] > seats_required[0] or seats_required[-1] > seats[i]:\n            parties.append(i)\n            seats_required.append(seats[i])\n    \n    # Initialise list of indecies for parties to be considered.\n    parties = [0]\n    \n    # Keep track of how many seats are there for each party.\n    seats_required = [seats_required[0]]\n    \n    # Iterate through parties, appending the next party to the list if it is\n    # either more seats required or no other parties are required.\n    for i in range(1, k):\n        if seats_required[-1] > seats_required[0] or seats_required[-1] > seats[i]:\n            parties.append(i)\n            seats_required.append(seats[i])\n    \n    # Initialise list of indecies for parties to be considered.\n    parties = [0]\n    \n    # Keep track of how many seats are there for each party.\n    seats_required = [seats_required[0]]\n    \n    # Iterate through parties, appending the next party to the list if it is\n    # either more seats required or no other parties are required.\n    for i in range(1, k):\n        if seats_required[-1] > seats_required[0] or seats_required[-1] > seats[i]:\n            parties.append(i)\n            seats_required.append(seats[i])\n    \n    # Return the number of parties and the list"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    for i in range(n):\n        if a[i] >= a[i-1]*2:\n            a[i] = 0\n            a[i-1] = 0\n    if not 0 in a:\n        print(0)\n    else:\n        print(1)\n        print(a.index(0)+1)\n    return \"\""
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nfrom typing import List\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solution for the given input\"\n\n    # Get input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    assert 1 <= n <= 100\n    assert all(1 <= a_i <= 100 for a_i in a)\n\n    # Get solution\n    a.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if i == 0 or a[i] < a[i-1] * 2:\n            count += 1\n        else:\n            break\n    if count == n:\n        print(count)\n        print(\" \".join(str(i + 1) for i in range(n)))\n    else:\n        print(0)\n\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    if n <= 1 or n == sum(a):\n        return '0'\n    for i in range(n):\n        if 2 * a[i] - a[i - 1] >= a[n - 1]:\n            return '{} {}'.format(i + 1, i + 1)\n    return '0'\n\nprint(solution(input()))\n\n\n\n\"\"\"\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Your solution here\"\"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\n    a.sort(reverse=True)\n    i = 0\n    while i < len(a) and a[i] == 0:\n        i += 1\n\n    if i < len(a) and (a[i] > (n // 2) or a[i] * 2 < n):\n        print(0)\n        return\n\n    k = i\n    if i < len(a) and a[i] > (n // 2):\n        k = i + 1\n    elif i < len(a) and a[i] * 2 == n:\n        k = i + 1\n        i = len(a) - 1\n    else:\n        i = len(a) - 1\n\n    print(k)\n    print(' '.join([str(j + 1) for j in range(k)]))\n\n    return ''\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total_answer = 0\n    for _ in range(int(stdin)):\n        total_answer += 1 if input().count('1') == input().count('1') and input().count('1') > 0 else 0\n    return str(total_answer)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Solution:\n    return 0\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def calculate_max(result: int, n: int, n_remaining: int, n_fails: int) -> int:\n        if n_remaining > 0:\n            return calculate_max(result + (n_fails / n_remaining), n, n_remaining - 1, n_fails + 1)\n        else:\n            return result\n        \n    n = int(stdin)\n    return \"{:.10f}\".format(calculate_max(0, n, n, 0))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) == 1:\n        return 1.0\n    else:\n        return 1.5\n\"\"\"\n\n\ndef"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Solution:\n    # 1. For each game round, increment the sum of the current score.\n    # 2. Find the maximum score and return it.\n    # 3. Since the maximum score is not guaranteed to be the highest possible,\n    #    we must iterate through all possible max scores.\n\n    # Input:\n    # n = int(stdin)\n\n    # Initialize variables:\n    # max_sum = 0\n    # current_sum = 0\n    # current_score = 0\n    # max_score = 0\n\n    # For each game round:\n    # current_score += current_sum\n    # if current_score > max_score:\n    #     max_score = current_score\n    # current_sum = 0\n\n    # return max_score\n\n    # This solution is O(n), since each game round is O(1) time.\n    \n    return n * (n + 1) / 2\n\n\n\"\"\"\n\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin) - sum([1 / (int(stdin) - i) for i in range(int(stdin))]), 0))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_opponents = int(stdin)\n    return str(number_of_opponents / 2)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (\n        n if n % 2 == 1 else (n // 2) + 1\n    )\n\"\"\"\n\n\ndef"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the challenge\n    :param stdin: string with input\n    :return: string with output\n    \"\"\"\n    n = int(stdin)\n    my_dict = {}\n    for i in range(n):\n        k, v = list(map(int, stdin.split()))\n        my_dict[k] = v\n    possible_answers = sorted(my_dict.items(), key=lambda x: x[1])\n    my_list = []\n    for i in range(len(possible_answers)):\n        my_list.append(possible_answers[i][0])\n    a = len(my_list)\n    b = possible_answers[a - 1][1]\n    max_val = 0\n    for i in range(b):\n        if i == 0:\n            max_val = i\n        else:\n            max_val = max_val + (i / (b - i))\n    return \"{0:.{1}f}\".format(max_val, 4)\n\n\n\ndef"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin.strip()))\n\ndef"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds maximal number of children for which Santa can give a candy to\n    \"\"\"\n    n = int(stdin)\n    possible = [i for i in range(1, n + 1) if n % i == 0]\n    max_divisor = min(possible)\n    for divisor in possible:\n        if n // divisor > max_divisor:\n            max_divisor = n // divisor\n    print(max_divisor)\n    print(*[i for i in range(max_divisor, 0, -1)])\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, solve(stdin))) + '\\n'\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return list of ints\n    \"\"\"\n    # your code here\n    return []"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n//2) + \"\\n\" + \"\\n\".join(sorted(str(i) for i in range(1, n, 2)))"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = sorted(map(int, stdin.readline().split()))\n    count = 0\n    result = []\n    for i in range(len(numbers)):\n        count += numbers[i]\n        result.append(str(numbers[i]))\n        if count >= n:\n            break\n    print(len(numbers) - len(result))\n    print(\" \".join(result))\n    return\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    solution = n - 1\n    print(solution)\n    print(' '.join(str(i) for i in range(solution, 0, -1)))\n    return solution\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.read())\n    if n == 1:\n        return 1, [1]\n    left = n - 1\n    right = 0\n    for i in range(n):\n        if i % 2 == 0:\n            left -= 1\n            right += 1\n        else:\n            right -= 1\n            left += 1\n        if left < 1 or right > n:\n            return 1, [1, n - 1]\n    return 2, [left, right]\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    print(n)\n    if n < 2:\n        print(n)\n        return\n    dp = [n] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for j in range(i - 1, n, i):\n            dp[i] = min(dp[i], dp[j] + 1)\n    # print(dp)\n    print(n - dp[n])\n    for i in range(1, n + 1):\n        if dp[i] == n:\n            print(i, end=\" \")\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            s += i\n    print(s)\n    return \"\"\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def n_mod_pow(n: int, p: int, mod: int) -> int:\n        result = 1\n        while p > 0:\n            if p % 2 == 1:\n                result = (result * n) % mod\n            n = (n * n) % mod\n            p //= 2\n        return result\n\n    n, m = [int(c) for c in stdin.strip().split('\\n')]\n    return n_mod_pow(2, n, m)\n\n\ndef"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    return str(m % (2 ** n))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = map(int, stdin.split())\n    res = 1\n    while a:\n        a, b = b, a % b\n        res = res * a % (10 ** 9 + 7)\n    return str(res)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = stdin.split()[0]\n    m = stdin.split()[1]\n    n,m = int(n), int(m)\n    print(pow(2, n, m))\n    return ''"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    res = (m % 2**n) % m\n    print(res)\n    return str(res)"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin[::-1]\n\ndef"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    return str(pow(m, n, 2))\n\n\n\nsolution(\"4\\n42\")\nsolution(\"1\\n58\")\nsolution(\"98765432\\n23456789\")\n\n\n\n\n\n1. [Input]\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^8).\nThe second line contains a single integer m (1 \u2264 m \u2264 10^8).\n\n2. [Output]\n\nOutput a single integer\u00a0\u2014 the value of $m \\operatorname{mod} 2^{n}$.\n\n\n\n----- 1\n\nsolution(\"4\\n42\")\nsolution(\"1\\n58\")\nsolution(\"98765432\\n23456789\")\n-----\n\n\n\n3. [Notes]\n\nn, m = map(int, stdin.readline().split())\nprint(pow(m, n, 2))\n\n---\n\nsolution(\"4\\n42\")\nsolution(\"1\\n58\")\nsolution(\"98765432\\n23456789\")\n\n\n----- 1\n\nn, m = map(int, stdin.readline().split())\nprint(pow(m, n, 2))\n\n4\n42\n1\n58\n98765432\n23456789\n\n-----\n\n2. [Input]\n\nn\nm\n\n3. [Output]\n\nm mod 2^n\n\n4\n42\n1\n58\n98765432\n23456789\n\n-----\n\n5. [Notes]\n\nn, m = map(int, stdin.readline().split())\nprint(m % pow(2, n))\n\n5\n42\n1\n58\n98765432\n23456789\n-----\n\n6. [Solution]\n\nn, m = map(int, input().split())\nprint(m % pow(2, n))\n\n-----\n\n7. [Output]\n\n0\n1\n23456789\n-----\n\n8. [Output]\n\n1\n2\n3\n\n9. [Output]\n\n1\n1\n1\n2\n3\n2\n0\n1\n1\n3\n4\n6\n3\n5\n8\n0\n2\n4\n5\n7\n6\n1\n0\n1\n2\n2\n1\n2\n1\n3\n3\n0\n2\n3\n2\n1\n4\n6\n4\n2\n0\n2\n4\n3\n5\n5\n1\n2\n0\n1\n3\n1\n2\n3\n1\n3\n5\n0\n1\n5\n0\n2\n0\n1\n4\n4\n2\n1\n2\n0\n3\n1\n0\n0\n3\n0\n0\n0\n1\n1\n1\n0\n0\n1\n0\n1\n1\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n ** 2 % (10 ** 8))"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowel = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    vowel_cnt = 0\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    s = stdin[1]\n    i = 0\n    while i < n - 1:\n        if s[i] in vowel:\n            vowel_cnt += 1\n            i += 1\n        else:\n            if vowel_cnt >= 2:\n                while s[i] in vowel:\n                    i += 1\n                vowel_cnt -= 1\n                s = s[:i] + s[i + 1:]\n            else:\n                i += 1\n\n    return s\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    result = s\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    while n > 0:\n        if n <= len(s):\n            if s[n - 1] in vowels and s[n - 2] in vowels:\n                result = result[0:n - 1] + result[n]\n                n -= 1\n            else:\n                result = result[0:n]\n                n = 0\n        else:\n            n = 0\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiouy\"\n    letters = list(stdin)\n    for i in range(len(letters)):\n        if letters[i] in vowels:\n            if i!= 0:\n                if letters[i - 1] in vowels:\n                    letters.pop(i - 1)\n    return \"\".join(letters)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(5, \"weird\")\n    werd\n    >>> solution(4, \"word\")\n    word\n    >>> solution(5, \"aaeaa\")\n    a\n    >>> solution(4, \"abcd\")\n    abcd\n    \"\"\"\n    import re\n\n    vowels = \"aeiou\"\n    stdin = re.sub(\"[a-zA-Z]\", \"\", stdin)\n    for x in range(len(stdin) - 1):\n        if stdin[x] in vowels and stdin[x + 1] in vowels:\n            stdin = stdin[:x] + stdin[x + 2 :]\n    return stdin\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Translate each word of s into a valid word, starting with vowel, that is not further replaced by two consecutive vowels.\"\"\"\n\n    vowels = \"aeiouy\"\n    i = 0\n    n = len(stdin)\n    while i < n:\n        c = stdin[i]\n        if c in vowels:\n            while i + 1 < n and stdin[i + 1] in vowels:\n                i += 1\n        i += 1\n\n    return stdin\n\n\ndef"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution: we can use regex to match any vowel with a letter before\n    '''\n    vowels = 'aeiouy'\n    for i in range(1, len(stdin)):\n        if stdin[i] in vowels and stdin[i - 1] in vowels:\n            stdin = stdin[:i - 1] + stdin[i + 1:]\n    return stdin\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiouy\"\n    stdin = stdin.strip()\n    l = len(stdin)\n    if l == 1:\n        return stdin\n    for i in range(0, l - 1):\n        if stdin[i] in vowels:\n            if stdin[i] == stdin[i + 1]:\n                return stdin[:i] + stdin[i + 2:]\n    return stdin\n\nprint(solution(\"weird\"))\nprint(solution(\"word\"))\nprint(solution(\"aaeaa\"))\n\n\n------LEETCODE SOLUTION------\n\nclass Solution:\n    def __init__(self):\n        self.vowels = \"aeiouy\"\n\n    def solve(self, stdin: str) -> str:\n        stdin = stdin.strip()\n        l = len(stdin)\n        if l == 1:\n            return stdin\n        for i in range(0, l - 1):\n            if stdin[i] in self.vowels:\n                if stdin[i] == stdin[i + 1]:\n                    return stdin[:i] + stdin[i + 2:]\n        return stdin\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n###\n\ndef"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nthe quick brown fox jumps over the lazy dog\")\n    \"the quick brown fox jumps over the lazy cat\"\n    >>> solution(\"5\\ncrunchy frog\")\n    \"crunchy frog\"\n    \"\"\"\n\n    word = stdin\n    word = word.replace(\" \",\"\")\n    for i in range(len(word)):\n        if word[i:i+2] == \"aa\":\n            word = word[:i] + \"a\" + word[i+1:]\n        elif word[i:i+2] == \"ee\":\n            word = word[:i] + \"e\" + word[i+1:]\n        elif word[i:i+2] == \"ii\":\n            word = word[:i] + \"i\" + word[i+1:]\n        elif word[i:i+2] == \"oo\":\n            word = word[:i] + \"o\" + word[i+1:]\n        elif word[i:i+2] == \"uu\":\n            word = word[:i] + \"u\" + word[i+1:]\n    return word\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i, v in enumerate(vowels):\n        s = s.replace(v, '')\n        s = s.replace(v + v, v)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the solution to the problem\n    \"\"\"\n    return str(stdin)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('.*...*.\\n.*...*.')\n    '2'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    programmers, athletes = int(stdin[0]), int(stdin[1])\n    n = len(stdin)\n    cnt = 0\n    for i in range(programmers):\n        if stdin[i] == '*' and stdin[i + 1] == '.':\n            cnt += 1\n    for i in range(athletes):\n        if stdin[i] == '*' and stdin[i + 1] == '*':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\".\", \"*\")\n    stdin = stdin.replace(\"*\", \"A\")\n    stdin = stdin.replace(\"*\", \"B\")\n    return stdin.count(\"AB\") + stdin.count(\"BA\") - stdin.count(\"ABAB\") - stdin.count(\"BAB\")\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    \n    \n    # return result"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 10 or r > 10**12:\n        return \"NO\"\n    else:\n        r = bin(r)[2:]\n        for i in range(len(r)):\n            if r[i] == \"1\":\n                break\n        return (i, len(r)-i-1)"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1 or r > 10**12:\n        return \"NO\"\n    else:\n        sq = (r * r) + (2 * r) + 1\n        x = 1\n        y = r\n        while sq!= r:\n            x += 1\n            y = r\n            sq = (x**2) + (2 * x * y) + x + 1\n        return str(x) + \" \" + str(y)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    result = [1, 1]\n    for i in range(1, r + 1):\n        if result[1] % 2 == 0:\n            result[0] += 1\n            result[1] = result[0] ** 2 + 2 * result[1] * i + result[0] + 1\n        else:\n            result[0] += 1\n            result[1] = result[0] ** 2 + 2 * result[1] * i + result[0] + 1\n    if result[1] == r:\n        return f'{result[0]} {result[1]}'\n    return 'NO'\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    r = int(stdin)\n    x = 0\n    y = 0\n    while x ** 2 + 2 * x * y + x + 1 < r:\n        y += 1\n    while x ** 2 + 2 * x * y + x + 1 == r:\n        x += 1\n    if x ** 2 + 2 * x * y + x + 1 == r:\n        return f\"{x} {y}\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    x = 1\n    while True:\n        h = x ** 2 + 2 * x * r + x + 1\n        if h >= 10 ** 12:\n            return \"NO\"\n        if h == r:\n            return str(x) + \" \" + str(r)\n\n        x += 1\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n\n    lst = [0] * r\n    index = 0\n    for i in range(r):\n        lst[index] = i+1\n        index += 2*i+1\n\n    for i in range(r):\n        if lst[index] == 0:\n            return \"NO\"\n        else:\n            index -= 2*lst[index] - 1\n\n    return f\"{lst[index]} {lst[index+1]}\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    d = {}\n    for i in range(1, int(10 ** (12 / 2) + 1)):\n        d[i] = (x ** 2 + 2 * x * i + x + 1) % (10 ** 12)\n    if x in d:\n        return d[x]\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution\n    \"\"\"\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    s = 2\n    while s < r + 1:\n        for x in range(1, s):\n            y = (r + 1 - x ** 2 - 2 * x * s) // (2 * s - x)\n            if y < x:\n                break\n            if x * x + 2 * x * y + x + 1 == r:\n                return f\"{x} {y}\"\n        s += 1\n    return \"NO\"\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    a = list(map(int, data[1].split()))\n    total = sum(a)\n    if total % 2!= 0:\n        return \"-1\"\n    else:\n        p1, p2 = 0, 0\n        while p1 == p2:\n            if total < sum(a):\n                p2 = p2 + 1\n            else:\n                p2 = p2 + a[p2]\n                p1 = p1 + 1\n        print(p1 + 1, end=\" \")\n        for i in range(p1 + 1):\n            print(i + 1, end=\" \")\n    return \"\""
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \n    \"\"\"\n    \n    def validate(n: int, m: list):\n        # if sum(m) % n!= 0:\n        #     return False\n        for i in range(n):\n            if m[i] % n!= 0:\n                return False\n        return True\n    \n    \n    n = int(stdin.split('\\n')[0])\n    m = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if n % 2 == 0:\n        if validate(n, m):\n            return str(int(n/2)) +'' +''.join(map(str, range(1, n+1)))\n        else:\n            return '-1'\n    else:\n        m.sort(reverse=True)\n        \n        if validate(n, m):\n            return str(int((n+1)/2)) +'' +''.join(map(str, range(1, n+1)))\n        else:\n            return '-1'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your runtime beats 15.14 % of python3 submissions.\n    \"\"\"\n    packet_num = int(stdin.readline().strip())\n    balloons = [int(num) for num in stdin.readline().strip().split(\" \")]\n    balloons.sort(reverse=True)\n    sum_ballons = sum(balloons)\n    if sum_ballons % 2!= 0:\n        return \"-1\"\n    sum_half = sum_ballons // 2\n    ans = []\n    k = 0\n    for balloon in balloons:\n        if balloon < sum_half:\n            return \"-1\"\n        if balloon == sum_half:\n            k += 1\n        else:\n            ans.append(balloon)\n            sum_half -= balloon\n            k += 1\n    ans.append(k)\n    return \" \".join([str(num) for num in ans])\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    balls = [int(i) for i in stdin.readline().strip().split()]\n    balls.sort()\n    if len(set(balls)) == 1:\n        return '-1'\n    \n    min = balls[0]\n    max = balls[-1]\n    \n    if count == 1:\n        if balls[0] == 1:\n            return '1 1'\n        else:\n            return '1'+ str(count)\n    \n    diff = max - min\n    if diff == count - 1:\n        return '1'+ str(count)\n    \n    if diff > count - 1:\n        return '-1'\n    \n    lst = []\n    for i in range(1, len(balls)):\n        if balls[i] - balls[i-1] < count - 1:\n            return '-1'\n        else:\n            lst.append(balls[i] - balls[i-1])\n    \n    if len(lst) == 1:\n        return '1'+ str(count)\n    \n    s = ''\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            return '-1'\n        s += str(i+1) +''\n    s += str(len(lst)+1)\n    return s\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = stdin.split()\n    n = int(n)\n    arr = [int(i) for i in arr]\n    arr.sort()\n    return stdout(arr, n)\n\ndef"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 2 1\\n\")\n    2 1\n    >>> solution(\"2\\n5 5\\n\")\n    -1\n    >>> solution(\"1\\n10\\n\")\n    -1\n    \"\"\"\n    n = int(stdin.readline())\n    baloons = [int(x) for x in stdin.readline().split()]\n    if sum(baloons) % 2!= 0:\n        return \"-1\"\n\n    total = sum(baloons) // 2\n\n    c = {}\n    for i in range(n):\n        c[baloons[i]] = c.get(baloons[i], 0) + 1\n    keys = list(c.keys())\n    if len(keys) == 1 and keys[0] == total:\n        return \"{} {}\".format(1, 1)\n    keys.sort()\n    ans = [total]\n    for k in keys:\n        if total - k > 0:\n            ans.append(k)\n            total -= k\n\n    return \"{} {}\".format(len(ans), \" \".join(map(str, ans)))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    s = sum(a)\n    if s % 2!= 0 or max(a) >= s:\n        return \"-1\"\n    a.sort(reverse=True)\n    k = 0\n    for i in a:\n        if s >= i:\n            k += 1\n            s -= i\n    return f'{k}\\n' +''.join(str(i) for i in a)"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    if n % 2 == 0 or n == 1:\n        return -1\n    a = sorted(map(int, stdin.split()[1:]))\n    if sum(a) % 2 == 1:\n        return -1\n    return str(n // 2) + \" \" + \" \".join(map(str, a[:n // 2]))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if sum(a) % 3!= 0:\n        return \"-\"\n    a.sort(reverse=True)\n    k = n - a.count(0)\n    if k < 0 or k == 0 and n > 1:\n        return \"-\"\n    ans = []\n    for i in range(a.count(0)):\n        ans.append(i + 1)\n    for i in range(k):\n        ans.append(n - a.index(a[i]))\n    return''.join(map(str, ans))"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    memo = [[[0 for _ in range(9)] for _ in range(9)] for _ in range(n + 1)]\n    k = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            for x in range(1, 9):\n                for y in range(1, 9):\n                    if x + y > j:\n                        continue\n                    if x + y == j:\n                        memo[i][j][x] = 1\n                    elif x == y:\n                        memo[i][j][x] = memo[i - 1][j][x] + 1\n                    else:\n                        memo[i][j][x] = memo[i - 1][j][x] + memo[i - 1][j - x][y]\n\n        k = min(k, memo[i][i][i])\n\n    return str(k)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # we need to find the first digit, so we start from the end\n    # of the number\n    for i in range(len(s) - 1, -1, -1):\n        if s[i].isdigit():\n            digit = int(s[i])\n            break\n    # we need to find the last digit, so we start from the beginning\n    # of the number\n    for j in range(len(s)):\n        if s[j].isdigit():\n            digit_after = int(s[j])\n            break\n    return str(digit) * (len(s) - (i + 1)) + str(digit_after)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    print(f\"{n}\", end=\"\")\n    print(\"\".join([str(x) for x in a]))\n    return \"\""
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i <= n and n % i!= 0:\n        i += 1\n    return i\n\"\"\"\ndef"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    cnt = 0\n    ans = 0\n    while cnt < n:\n        i += 1\n        if n % i == 0:\n            ans += 1\n            cnt += i\n        else:\n            cnt += i\n    return str(ans) + \" \" + str(i)\n\nprint(solution(input()))\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_is_palindrome(self):\n        self.assertEqual(is_palindrome('aa'), True)\n        self.assertEqual(is_palindrome('abc'), False)\n        self.assertEqual(is_palindrome('kayak'), True)\n        self.assertEqual(is_palindrome('hello'), False)\n        self.assertEqual(is_palindrome('Bob'), True)\n        self.assertEqual(is_palindrome('a man a plan a canal Panama'), True)\n        self.assertEqual(is_palindrome('a man a plan a canal Panama'), True)\n        self.assertEqual(is_palindrome('a man a plan a canal PANAMA'), True)\n        self.assertEqual(is_palindrome(' '), True)\n        self.assertEqual(is_palindrome('a'), True)\n        self.assertEqual(is_palindrome('ab'), False)\n        self.assertEqual(is_palindrome('a b'), False)\n        self.assertEqual(is_palindrome('a b c'), False)\n        self.assertEqual(is_palindrome('hello there'), False)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    k = 0\n    result = [0] * x\n    if x > 0:\n        for i in range(0, 9):\n            while x % (10 ** k) >= (10 ** (k - 1)):\n                k += 1\n            result[k - 1] = i\n            x -= i * 10 ** (k - 1)\n            k -= 1\n        return''.join(list(map(str, result)))"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    a = list(map(int, stdin.readline().rstrip().split(' ')))\n    res = set()\n    for a_i in a:\n        if a_i == 1:\n            continue\n        for j in range(2, int(a_i**0.5) + 1):\n            if a_i % j == 0:\n                res.add(a_i)\n                break\n    if len(res) == 0:\n        return '0 0'\n    else:\n        res = sorted(list(res), reverse=True)\n    return''.join([str(r) for r in res])"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    a.sort()\n    s = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_prime(a[i] + a[j]):\n                s.append((a[i], a[j]))\n    \n    s.sort(key=lambda t: t[1])\n    ans = 0\n    for i in range(len(s)):\n        ans += s[i][0] + s[i][1]\n    print(ans)\n    for i in range(len(s)):\n        print(s[i][0], s[i][1])\n    return ''\n\ndef"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def isPrime(x: int) -> bool:\n        for i in range(2, x // 2 + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def build(x: int) -> str:\n        res: List[int] = [x]\n        for i in range(2, x):\n            if isPrime(i) and isPrime(x - i):\n                res.append(i)\n                res.append(x - i)\n                break\n        return''.join(str(x) for x in res)\n\n    return build(int(stdin))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def primes(n: int) -> list[int]:\n        lst = [2]\n        is_prime = [False, False] + [True] * (n - 1)\n        for i in range(2, n + 1):\n            if is_prime[i]:\n                lst.append(i)\n                for j in range(i, n + 1, i):\n                    is_prime[j] = False\n        return lst\n\n    n, *a = map(int, stdin.split('\\n'))\n    lst = set(primes(max(a)))\n    s = set(a)\n    for num in lst:\n        if num in s:\n            s.discard(num)\n    print(max(s))\n    print(*sorted(s))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible size of a simple subset of array a.\"\"\"\n    num = stdin.split(\"\\n\")[0]\n    arr = stdin.split(\"\\n\")[1].split(\" \")\n    arr = [int(i) for i in arr]\n    arr.sort()\n    max_s = 1\n    s = [1]\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i-1]:\n            max_s += 1\n            s.append(max_s)\n        else:\n            max_s = 1\n    i = len(arr) - 1\n    while i > 0:\n        while arr[i] == arr[i-1] and i > 0:\n            i -= 1\n        max_s = max(max_s, i)\n        s.append(max_s)\n        i -= 1\n    s.sort()\n    max_s = s[-1]\n    ans = []\n    i = len(arr)-1\n    while i >= 0:\n        if s[i] == max_s:\n            ans.append(arr[i])\n            max_s -= 1\n        i -= 1\n    return ans\n\n\ndef"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, *a = list(map(int, stdin.split()))\n    \n    b = list()\n    for i in range(1, n+1):\n        if all(a[i]%j!= 0 for j in range(2, a[i]+1)):\n            b.append(a[i])\n    \n    return str(len(b)) + '\\n' +''.join(str(i) for i in b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3, 5, 7):\n            return True\n        if x % 2 == 0 or x % 3 == 0 or x % 5 == 0 or x % 7 == 0:\n            return False\n        return True\n\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    a.sort()\n\n    l = 0\n    for i in range(n):\n        if not is_prime(a[i]):\n            l = i\n            break\n    result = []\n    for j in range(l, n):\n        if is_prime(a[j]):\n            result.append(a[j])\n    result.sort()\n    print(len(result))\n    print(' '.join([str(x) for x in result]))\n    return \"\"\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = 0\n    while stdin % 2 == 0:\n        k += 1\n        stdin //= 2\n    return 2 ** k - 1 if stdin == 1 else 2 ** k\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for k in range(num):\n        if (2 ** k - 1) * (2 ** k - 1) == num:\n            return k\nprint(solution(input()))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    count = 0\n    while True:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_beautiful(n):\n        ones = 0\n        for i in range(len(bin(n)) - 3):\n            if n % 2 == 1:\n                ones += 1\n            n //= 2\n            if n == 1:\n                break\n        if n == 0 or n == 1:\n            return False\n        else:\n            return ones == ones_\n\n    n = int(stdin)\n    while True:\n        if is_beautiful(n):\n            print(n)\n            break\n        n += 1\n\nsolution(input())\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while True:\n        if n == 1:\n            return k\n        if (2**k-1)*(2**k-1) < n:\n            k += 1\n        else:\n            break\n    return n-((2**k-1)*(2**k-1))"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    binary_number = bin(int(stdin))[2:]\n    return str(binary_number).count('1') + 1\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(2 ** (n // 2) - 1)\n    if n % 2 == 1:\n        return str((2 ** ((n - 1) // 2) - 1) * 2)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # just print out the answer\n    # it is all yours...\n    n = int(stdin)\n    k = 1\n    while 2 ** (k + 1) - 1 < n:\n        k += 1\n    # print(k)\n    return (2 ** k - 1) * (2 ** k - 1)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    result = number - 1\n    while True:\n        if (result % 2 == 0):\n            result = result // 2\n            number = number // 2\n        else:\n            result = result * 3 + 1\n            number = number * 2\n        if (result > number):\n            return number\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\""
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find magic numbers\n    \"\"\"\n    a, b, m, d = map(int, stdin.split())\n    # k = d * m - 1\n    res = 0\n    # for i in range(a, b+1):\n    #     if ''.join(list(map(str, [int(i) for i in list(str(i)) if int(i) % d == 0]))).count('9') == m:\n    #         res += 1\n    # print(res)\n    for i in range(a, b + 1):\n        if set(list(map(int, list(str(i))))) == {d}:\n            res += 1\n    print(res)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = int(stdin)\n    b = int(stdin)\n    count = 0\n    for i in range(a, b + 1):\n        if int(i) % (10 ** 9 + 7) == 0 and d == 0:\n            count += 1\n        elif d == 0:\n            if len(set(str(i))) == 1 and len(str(i)) == n:\n                count += 1\n            elif len(set(str(i))) == 1 and len(str(i))!= n:\n                continue\n            else:\n                continue\n        elif d!= 0 and len(set(str(i))) == 1 and len(str(i)) == n:\n            count += 1\n        elif d!= 0 and len(set(str(i))) == 1 and len(str(i))!= n:\n            continue\n        else:\n            continue\n    return count % (10 ** 9 + 7)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of d-magic numbers in the segment [a, b] that are\n    multiple of m.\n\n    Args:\n        stdin (str): input in string format\n\n    Returns:\n        str: output in string format\n    \"\"\"\n    m, d = stdin[0].split()\n    m = int(m)\n    d = int(d)\n    a = int(stdin[1])\n    b = int(stdin[2])\n\n    def d_magic(num: int) -> bool:\n        \"\"\"Finds if a number is d-magic or not.\n\n        Args:\n            num (int): number to check\n\n        Returns:\n            bool: whether a number is d-magic or not\n        \"\"\"\n        for i, digit in enumerate(str(num)):\n            if (i + 1) % 2!= 0 and digit == str(d):\n                return True\n        return False\n\n    def is_multiple(num: int, mod: int = 10000000007) -> bool:\n        \"\"\"Finds if a number is multiple of mod.\n\n        Args:\n            num (int): number to check\n            mod (int, optional): modulo. Defaults to 10000000007.\n\n        Returns:\n            bool: whether a number is multiple of mod\n        \"\"\"\n        return num % mod == 0\n\n    def find_d_magic(start: int, end: int, mod: int = 10000000007) -> int:\n        \"\"\"Finds the number of d-magic numbers in the segment [start, end]\n        that are multiple of m.\n\n        Args:\n            start (int): start of the segment\n            end (int): end of the segment\n            mod (int, optional): modulo. Defaults to 10000000007.\n\n        Returns:\n            int: number of d-magic numbers in the segment\n        \"\"\"\n        return len(list(filter(lambda num: is_multiple(num, mod) and d_magic(num),\n                               list(range(start, end + 1)))))\n\n    return str(find_d_magic(a, b, mod=m))\n\n\ndef"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, d = [int(i) for i in stdin.split()]\n    a = int(stdin)\n    b = int(stdin)\n\n    def solve(n):\n        if n == 0:\n            return 1\n        return n + solve(n // m)\n\n    return str(solve(b - a + 1) % 1000000007)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, d = stdin.strip().split(' ')\n    a, b = stdin.strip().split(' ')\n    return \"8\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, d = [int(x) for x in stdin.split()]\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n    a = int(a)\n    b = int(b)\n    print(sum(pow(d, i, 10 ** 9 + 7) for i in range(a, b + 1) if (i % m) == 0))\n\n\ndef"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    m, d = int(input[0]), int(input[1])\n    a, b = int(input[2]), int(input[3])\n    a_set = set()\n    b_set = set()\n    c_set = set()\n    d_set = set()\n    for i in range(a, b+1):\n        if i == 0:\n            continue\n        str_i = str(i)\n        str_i = str_i[1:]\n        for j in range(len(str_i)):\n            if j % 2 == 0 and str_i[j] == str(d):\n                a_set.add(i)\n            if j % 2 == 1 and str_i[j] == str(d):\n                b_set.add(i)\n            if str_i[j] == str(d):\n                c_set.add(i)\n            if str_i[j]!= str(d):\n                d_set.add(i)\n    res = len(a_set.intersection(b_set))\n    res = res + len(c_set.intersection(d_set))\n    res = res + len(c_set.intersection(d_set))\n    return str(res % (10**9 + 7))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, d = [int(x) for x in stdin.split(' ')]\n    a, b = [int(x) for x in stdin.split(' ')]\n\n    def digits_to_num(s: str) -> int:\n        number = 0\n        for digit in s:\n            number = number * 10 + int(digit)\n        return number\n\n    def is_d_magic(number: int, m: int, d: int) -> bool:\n        s = str(number)\n        for i in range(0, len(s)):\n            if (i + 1) % 2 == 0 and int(s[i])!= d:\n                return False\n        return True\n\n    result = 0\n    for i in range(a, b + 1):\n        if i % m == 0:\n            if is_d_magic(i, m, d):\n                result += 1\n\n    return str(result % (10 ** 9 + 7))\n\n\nassert (solution(\"2 6\") == \"8\")\nassert (solution(\"19 7\") == \"6\")\nassert (solution(\"2 0\") == \"4\")\nassert (solution(\"16 13\") == \"4\")\nassert (solution(\"24 55\") == \"2\")\nassert (solution(\"11 2\") == \"3\")\nassert (solution(\"18 5\") == \"2\")\nassert (solution(\"30 2\") == \"2\")\nassert (solution(\"4 5\") == \"0\")\nassert (solution(\"4 4\") == \"1\")\nassert (solution(\"31 1\") == \"1\")\nassert (solution(\"15 2\") == \"5\")\nassert (solution(\"91 5\") == \"0\")\nassert (solution(\"9 4\") == \"0\")\nassert (solution(\"9 3\") == \"0\")\nassert (solution(\"7 1\") == \"0\")\nassert (solution(\"10 6\") == \"0\")\nassert (solution(\"14 14\") == \"1\")\nassert (solution(\"6 8\") == \"1\")\nassert (solution(\"9 8\") == \"0\")\nassert (solution(\"12 4\") == \"4\")\nassert (solution(\"15 1\") == \"1\")\nassert (solution(\"13 5\") == \"0\")\nassert (solution(\"15 1\") == \"1\")\nassert (solution(\"22 4\") == \"2\")\nassert (solution(\"16 7\") == \"4\")\nassert (solution(\"1 2\") == \"0\")\nassert (solution(\"1 5\") == \"0\")\nassert (solution(\"1 1\") == \"1\")\nassert (solution(\"0 0\") == \"1\")\nassert (solution(\"2 2\") == \"1\")\nassert (solution(\"1 9\") == \"0\")\nassert (solution(\"9 1\") == \"0\")\nassert (solution(\"10 7\") == \"0\")\nassert (solution(\"19 7\") == \"6\")\nassert (solution(\"19 9\") == \"4\")\nassert (solution(\"1 7\") == \"0\")\nassert (solution(\"1 2\") == \"0\")\nassert (solution(\"19 9\") == \"4\")\nassert (solution(\"4 2\") == \"0\")\nassert (solution(\"4 6\") == \"0\")\nassert (solution(\"4 9\") == \"2\")\nassert (solution(\"4 5\") == \"0\")\nassert (solution(\"4 4\") == \"1\")\nassert (solution(\"4 1\") == \"0\")\nassert (solution(\"5 0\") == \"1\")\nassert (solution(\"7 1\") == \"0\")\nassert (solution(\"0 2\") == \"0\")\nassert (solution(\"0 6\") == \"0\")\nassert (solution(\"1 7\") == \"0\")\nassert (solution(\"6 3\") == \"0\")\nassert (solution(\"6 6\") == \"1\")\nassert (solution(\"6 8\") == \"1\")\nassert (solution(\"7 1\") == \"0\")\nassert (solution(\"7 7\") == \"1\")\nassert (solution(\"12 1\") == \"0\")\nassert (solution(\"12 9\") == \"3\")\nassert (solution(\"12 0\") == \"3\")\nassert (solution(\"12 7\") == \"4\")\nassert (solution(\"12 7\") == \"4\")\nassert (solution(\"1 9\") == \"0\")\nassert (solution(\"1 3\") == \"1\")\nassert (solution(\"2 6\") == \"8\")\nassert (solution(\"4 9\") == \"2\")\nassert (solution(\"5 0\") == \"1\")\nassert (solution(\"4 2\") == \"0\")\nassert (solution(\"4 6\") == \"0\")\nassert (solution(\"4 9\") == \"2\")\nassert (solution(\"4 5\") == \"0\")\nassert (solution(\"4 4\") == \"1\")\nassert (solution(\"4 1\") == \"0\")\nassert (solution(\"5 0\") == \"1\")\nassert (solution(\"7 1\") == \"0\")\nassert (solution(\"0 2\") == \"0\")\nassert (solution(\"0 6\") == \"0\")\nassert (solution(\"1 7\") == \"0\")\nassert (solution(\"6 3\") == \"0\")\nassert (solution(\"6 6\") == \"1\")\nassert (solution(\"6 8\") == \"1\")\nassert (solution(\"7 1\") == \"0\")\nassert (solution(\"7 7\") == \"1\")\nassert (solution(\"12 1\") == \"0\")\nassert (solution(\"12 9\") == \"3\")\nassert (solution(\"12 0\") == \"3\")\nassert (solution(\"12 7\") == \"4\")\nassert (solution(\"12 7\") == \"4\")\nassert (solution(\"1 9\") == \"0\")\nassert (solution(\"1 3\") == \"1\")\nassert (solution(\"2 6\") == \"8\")\nassert (solution(\"4 9\") == \"2\")\nassert (solution(\"5 0\") == \"1\")\nassert (solution(\"4 2\") == \"0\")\nassert (solution(\"4 6\") == \"0\")\nassert (solution(\"4 9\") == \"2\")\nassert (solution(\"4 5\") == \"0\")\nassert (solution(\"4 4\") == \"1\")\nassert (solution(\"4 1\") == \"0\")\nassert (solution(\"5 0\") == \"1\")\nassert (solution(\"7 1\") == \"0\")\nassert (solution(\"0 2\") == \"0\")\nassert (solution(\"0 6\") == \"0\")\nassert (solution(\"1 7\") == \"0\")\nassert (solution(\"6 3\") == \"0\")\nassert (solution(\"6 6\") == \"1\")\nassert (solution(\"6 8\") == \"1\")\nassert (solution(\"7 1\") == \""
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    "
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        arr[start] += m\n        arr[end] += m\n        if arr[start] < arr[end]:\n            start += 1\n            continue\n        if arr[start] > arr[end]:\n            end -= 1\n        if arr[start] == arr[end]:\n            end -= 1\n            start += 1\n    return end + 1\n    \n    \n\"\"\"\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal is to find the last child standing in line when the Jzzhu gives candies to the children.\n    Therefore the number of candies in the line will be the number of candies left in the candies jar.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    candies = list(map(int, stdin.split(\" \")))\n\n    candies_left = sum(candies)\n\n    while candies_left > 0:\n        for child_idx in range(n):\n            candies_left -= candies[child_idx]\n\n            if candies_left <= 0:\n                return child_idx + 1\n\n            if child_idx + 1 < n:\n                candies[child_idx + 1] += 1\n\n    return None\n\n\ndef"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    numberOfCandies, numberOfChildren = map(int, stdin.split(' '))\n    candies = list(map(int, stdin.split(' ')))\n    return solve(numberOfCandies, numberOfChildren, candies)\n\n\ndef"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ar = list(map(int, stdin.split()))\n    ar.sort()\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        cnt += m\n        cnt = cnt % ar[i]\n    return n - cnt\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, m = map(int, input[0].split())\n    a = list(map(int, input[1].split()))\n    a = sorted(a)\n    l = m + 1\n    count = 0\n    while l < n:\n        for i in range(m):\n            a[i] = a[i] - 1\n            if a[i] == 0:\n                count += 1\n                l = i\n                break\n            if a[i] < 0:\n                a[i] = n - i\n                l = i\n    return str(count)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    children = list(map(int, stdin.split('\\n')[0].split()))\n    candies = list(map(int, stdin.split('\\n')[1].split()))\n    # print(children, candies)\n    s = 0\n    for i in range(len(candies)):\n        s += candies[i]\n        candies[i] = s\n    return children.index(s) + 1\n\ndef"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    elif n <= 100:\n        return '1'\n    else:\n        return '{}'.format(n // 100)\n\"\"\""
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin)\n    n = money\n    num_coins = 0\n    coins = [1, 5, 10, 20, 100]\n    for coin in coins:\n        count = n // coin\n        num_coins += count\n        n %= coin\n    print(num_coins)\n    return \"\"\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def bill(n: int) -> int:\n        min_bill = n // 10 + n % 10 // 5 + n % 5 // 1\n        return min_bill\n\n    n = int(stdin)\n    result = bill(n)\n    print(result)\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        f'The minimum number of bills Allen has is {number_of_bills(int(stdin))}.'\n    ])\n\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    while n > 0:\n        if n >= 100:\n            n -= 100\n            cnt += 1\n        elif n >= 20:\n            n -= 20\n            cnt += 1\n        elif n >= 10:\n            n -= 10\n            cnt += 1\n        elif n >= 5:\n            n -= 5\n            cnt += 1\n        elif n >= 1:\n            n -= 1\n            cnt += 1\n    return cnt\n\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count_good_permutations(n: int, k: int) -> int:\n        return ((math.factorial(n) // math.factorial(n - k))\n                // math.factorial(k)) % (10 ** 9 + 7)\n\n    def count_good_permutations_recursion(n: int, k: int) -> int:\n        if n == 1:\n            return 0 if k == 0 else 1\n        if n == 2:\n            return 0 if k == 0 else 2\n        if n == 3:\n            return (6 if k == 0 else 0) if k < 3 else 4\n        return (6 * count_good_permutations(n - 1, k) +\n                count_good_permutations_recursion(n - 1, k - 1)) % (10 ** 9 + 7)\n\n    n, k = map(int, stdin.split())\n    return str(count_good_permutations_recursion(n, k))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n,k=map(int,stdin.split())\n    i=0\n    a=[0]*n\n    while k!=0:\n        if k==n+1:\n            a=[x+1 for x in range(n)]\n            k-=n\n            n=1\n        else:\n            a=[x+1 for x in a[::-1]]\n            k-=n\n            n=len(a)\n    print(a)\n    return str(a)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return (factorial(n) // factorial(n - k) // factorial(k)) % 1000000007\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n\n    i = 1\n    while k >= i:\n        i += 1\n        k -= i\n\n    return math.comb(n + k - 1, k)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    size, good = map(int, line)\n    \n    good_perm = size * (size - 1) / 2\n    bad_perm = size * (size - 1) * (size - 2) / 6\n    \n    print((good_perm - bad_perm) % (10 ** 9 + 7))\n    \n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return binomial(n, k) % 1000000007\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    fact = [1]\n    for i in range(1, n+1):\n        fact.append(i*fact[i-1])\n    fact_inv = [1]\n    for i in range(1, n+1):\n        fact_inv.append(fact_inv[i-1]*i)\n    res = fact[n]/fact_inv[n-k]/fact_inv[k]\n    return str(int(res)%(10**9+7))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    size, k = map(int, stdin.split())\n    return ((factorial(size) // factorial(k) // factorial(size - k)) % (10**9 + 7))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    # get input\n    n, k = [int(x) for x in stdin.split()]\n    # n = int(stdin.readline())\n    # k = int(stdin.readline())\n    # for each permutation, count the number of good positions\n    # for each permutation, count the number of good positions\n    # return the solution\n    return str(int(math.factorial(n) // math.factorial(k) // math.factorial(n - k)))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # write your code in Python 3.6\n    result = 1\n    for i in range(n - k + 1):\n        result = result * (n - i) // (i + 1)\n        result = result % 1000000007\n    return str(result)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    "
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the largest possible number of roses of the same color that can be bought.\n    \"\"\"\n   ...\n\nprint(solution(stdin))"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n4 3 4 1 6\\nRROWW\")\n    11\n    >>> solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\")\n    -1\n    >>> solution(\"5 2\\n10 20 14 20 11\\nRRRRR\")\n    -1\n    \"\"\"\n    n, k = map(int, stdin.split())\n    colors = stdin.splitlines()[1]\n    # \u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u043e\u0437\u043e\u0432\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    rose_colors = {}\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0440\u043e\u0437\u043e\u0432\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    for i in range(1, n + 1):\n        rose_colors[i] = colors[i - 1]\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0447\u0435\u0442\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    max_beauty = 0\n    # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044e \u0441 1\n    i = 1\n    # \u0421\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0441\u0447\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    sum_beauty = 0\n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b\n    while i <= n:\n        # \u0415\u0441\u043b\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0432\u0435\u0442\u0430 \u0440\u043e\u0437\u043e\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n        if rose_colors[i]!= 'R' and rose_colors[i]!= 'W' and rose_colors[i]!= 'O':\n            # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043e\u0447\u043a\u0438\n            sum_beauty += int(stdin.splitlines()[0][i - 1])\n            # \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0432\u0430 \u0440\u043e\u0437\u043e\u0432\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n            if i < n:\n                # \u0415\u0441\u043b\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u043c\u0435\u0435\u0442 \u0432\u0442\u043e\u0440\u043e\u0439 \u0440\u043e\u0437\u043e\u0432\u043e\u0439 \u0442\u0438\u043f\n                if rose_colors[i + 1]!= rose_colors[i]:\n                    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043e\u0447\u043a\u0438\n                    sum_beauty += int(stdin.splitlines()[0][i])\n                    # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0441\u043e \u0432\u0442\u043e\u0440\u044b\u043c \u0440\u043e\u0437\u043e\u0432\u044b\u043c \u0442\u0438\u043f\u043e\u043c\n                    del rose_colors[i + 1]\n                    # \u041e\u0431\u043d\u0443\u043b\u044f\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a\n                    i = 0\n                # \u0415\u0441\u043b\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u043c\u0435\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u043e\u0437\u043e\u0432\u043e\u0439 \u0442\u0438\u043f\n                else:\n                    # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u0440\u043e\u0437\u043e\u0432\u044b\u043c \u0442\u0438\u043f\u043e\u043c\n                    del rose_colors[i]\n                    # \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a\n                    i -= 1\n            # \u0415\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0438 \u043a\u043e\u043d\u0446\u0430 \u0441\u043f\u0438\u0441\u043a\u0430\n            else:\n                # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0447\u043a\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0440\u043e\u0437\u043e\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n                sum_beauty += int(stdin.splitlines()[0][i])\n                # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0446\u0438\u043a\u043b\n                i = 0\n        # \u0415\u0441\u043b\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u043e\u0437\u043e\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n        else:\n            # \u0415\u0441\u043b\u0438 \u0440\u043e\u0437\u043e\u0432\u043e\u0439 \u0442\u0438\u043f \u0442\u043e\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n            if rose_colors[i] == 'R':\n                # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043e\u0447\u043a\u0438\n                sum_beauty += int(stdin.splitlines()[0][i])\n                # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u0440\u043e\u0437\u043e\u0432\u044b\u043c \u0442\u0438\u043f\u043e\u043c\n                del rose_colors[i]\n                # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043e\u0447\u043a\u0438\n                sum_beauty += int(stdin.splitlines()[0][i])\n                # \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a\n                i += 1\n            # \u0415\u0441\u043b\u0438 \u0440\u043e\u0437\u043e\u0432\u043e\u0439 \u0442\u0438\u043f \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n            else:\n                # \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a\n                i += 1\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u043e\u0447\u043a\u043e\u0432 \ufffd"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n4 3 4 1 6\\nRRRRR\")\n    11\n    >>> solution(\"5 2\\n10 20 14 20 11\\nRRRRR\")\n    -1\n    >>> solution(\"11 5\\n5 6 3 2 3 4 7 5 4 5 6\\nRWOORWORROW\")\n    28\n    \"\"\"\n   ...\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns str'''\n    total_beauty = 0\n    roses = stdin.split()\n    roses_count = int(roses[0])\n    roses_total_beauty = int(roses[1])\n    roses_color = stdin.split()\n    roses_color_count = [0, 0, 0]\n    for i in range(roses_count):\n        if roses_color[i] == \"W\":\n            roses_color_count[0] += 1\n        elif roses_color[i] == \"O\":\n            roses_color_count[1] += 1\n        elif roses_color[i] == \"R\":\n            roses_color_count[2] += 1\n    for j in range(roses_count):\n        if roses_color_count[0] == 0:\n            if roses_color_count[1] >= roses_count - j:\n                roses_total_beauty -= roses_count\n            else:\n                roses_total_beauty -= (roses_count - j)\n            break\n        elif roses_color_count[0] >= j:\n            roses_total_beauty += (roses_count - j) * (roses_count - j)\n        else:\n            roses_total_beauty -= (roses_count - j) * (roses_count - j)\n    return str(roses_total_beauty)\n    pass\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    result = 0\n    for i in range(k):\n        if s[i] == 'W' or s[i] == 'O':\n            result = max(result, int(s[i]))\n        else:\n            result = max(result, int(s[i]))\n    if result > 1:\n        print(result)\n    else:\n        print(-1)\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input from stdin and returns the max possible total\n    beauty of a bouquet with roses and sum of roses.\n    :param stdin:\n    :return:\n    \"\"\"\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    arr = [int(i) for i in stdin.split(' ')]\n    arr.sort()\n    res = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            res += arr[i]\n    if res < k * arr[0]:\n        return -1\n    if k > 1:\n        return sum(arr) - res\n    return res\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets string input and returns output\"\"\"\n    num_of_ratio = stdin.split('\\n')[0].split()\n    height = int(stdin.split('\\n')[1])\n    ratio = stdin.split('\\n')[2]\n    num_of_ratio = [int(x) for x in num_of_ratio]\n    ratio = [int(x) for x in ratio.split(' ')]\n    if ratio[0] == num_of_ratio[0] and ratio[1] == num_of_ratio[1]:\n        return \"YES\"\n    elif ratio[0] == num_of_ratio[0] and ratio[1]!= num_of_ratio[1]:\n        num_of_ratio[1] += ratio[1]\n        num_of_ratio[0] += ratio[0]\n        num_of_ratio[1] %= num_of_ratio[0]\n        num_of_ratio[0] %= num_of_ratio[1]\n        if num_of_ratio[0] == num_of_ratio[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif ratio[0]!= num_of_ratio[0] and ratio[1] == num_of_ratio[1]:\n        ratio = list(map(lambda x: x, ratio))\n        num_of_ratio = list(map(lambda x: x, num_of_ratio))\n        while ratio[0] > num_of_ratio[0]:\n            num_of_ratio[1] += num_of_ratio[0]\n            num_of_ratio[0] += num_of_ratio[1]\n            num_of_ratio[1] %= num_of_ratio[0]\n            num_of_ratio[0] %= num_of_ratio[1]\n            if num_of_ratio[0] == num_of_ratio[1]:\n                return \"YES\"\n        else:\n            return \"NO\"\n    elif ratio[0]!= num_of_ratio[0] and ratio[1]!= num_of_ratio[1]:\n        return \"NO\"\n    return \"NO\"\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    def lcm(a: List[int]) -> int:\n        lcm = a[0]\n        for x in a[1:]:\n            lcm = lcm * x // gcd(lcm, x)\n        return lcm\n\n    def gcd(a: int, b: int) -> int:\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def fraction(n: int, a: List[int]) -> List[int]:\n        a = a + [0] * (n - len(a))\n        for i in reversed(range(n)):\n            a[i] = a[i] * a[i + 1] // gcd(a[i], a[i + 1])\n        return a\n\n    lcm_ = lcm(a)\n    a = fraction(n, a)\n    a = [x * (lcm_ // x) for x in a]\n    if p * q == sum(a):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(c) for c in stdin.split(' ')]\n    n = int(stdin)\n    a = [int(c) for c in stdin.split(' ')]\n    s = 0\n    i = 0\n    while i < n:\n        s += a[i]\n        i += 1\n    s = p * s + q\n    if s == n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    p, q = map(int, stdin.split())\n    n = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:]))\n    q1 = q2 = 1\n    for ai in a:\n        q2 *= ai\n        q2, q1 = q1, q2\n    print(\"YES\" if p * q1 == q * q2 else \"NO\")\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(x) for x in stdin.split(' ')]\n    n = int(stdin.split(' ')[1])\n    a = [int(x) for x in stdin.split(' ')[2:]]\n    if p * n == q * sum(a):\n        return 'YES'\n    else:\n        return 'NO'\n\"\"\"\nfrom math import gcd\n\ndef"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    a = list(map(int, stdin.split()))\n    n = int(input())\n    a1 = list(map(int, stdin.split()))\n    a2 = list(map(int, stdin.split()))\n    a1.append(a1[-1])\n    a2.append(a2[-1])\n    print(a1)\n    print(a2)\n\n    for i in range(n):\n        a1[i+1] = a1[i] + a2[i]\n    print(a1)\n    print(a2)\n    print(a1[-1]/a2[-1])\n    return 'YES' if a1[-1]/a2[-1] == a[0]/a[1] else 'NO'"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, q, n = [int(x) for x in stdin.split(' ')]\n\n    a = [p, q]\n    for i in range(n - 1):\n        q, p = p + q * q, q\n        a.append(p)\n\n    s =''.join([str(a[i]) + '/' + str(a[i + 1]) for i in range(n)])\n    print('YES' if s == stdin.replace(' ', '') else 'NO')\n\n\ndef"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split(' '))\n    height = int(stdin.split('\\n')[1])\n    arr = list(map(int, stdin.split('\\n')[2].split(' ')))\n    \n    count = 0\n    for i in range(len(arr)):\n        count += arr[i] * q**i\n    \n    return 'YES' if (count * height) == p else 'NO'\n\n\nprint(solution(input()))"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (p, q), n = map(int, stdin.split(' '))\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    gcd = math.gcd(p, q)\n    if n == len(a):\n        return 'YES' if p * a[0] + q * sum(a) == 0 else 'NO'\n    else:\n        for i in range(n - 1):\n            a[i] *= (q // gcd)\n        if p * a[0] + q * sum(a) == 0:\n            return 'YES'\n        return 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    first_line_data = stdin.split(' ')\n    n = int(first_line_data[1])\n    first_frac_data = [int(x) for x in stdin.split(' ')][2::]\n    # print(first_frac_data)\n    target = first_frac_data[-1]\n    frac_str = ''\n    for x in first_frac_data[:-1]:\n        frac_str += '1' +''\n        frac_str += str(x) +''\n    # print(frac_str)\n    frac_str = frac_str.rstrip()\n    # print(frac_str)\n    p_q = Frac(int(first_line_data[0]), int(first_line_data[1]))\n    d = p_q.num / p_q.den\n    # print(d)\n    # print(f'{first_frac_data[-1]} / {first_frac_data[-1]} = {d}')\n    target_frac = Frac(target, 1)\n    # print(target_frac)\n    t_num = target_frac.num\n    t_den = target_frac.den\n    # print(t_num, t_den)\n    frac_num = int(t_num / d)\n    frac_den = int(t_den / d)\n    frac_str_num = str(frac_num) +''\n    frac_str_den = str(frac_den) +''\n    # print(frac_str_num, frac_str_den)\n    frac_str = frac_str_num + frac_str_den\n    # print(frac_str)\n    return frac_str\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    a, s, b, o = re.split('=', stdin)\n    a, b = int(a), int(b)\n    if s == '+':\n        return '|' + '+' * (b - a) + '=' * o + '|'\n    if s == '=':\n        return '|' + '=' * (b - a) + '|'\n    if s == '|':\n        return 'Impossible'\n\n\n\nsolution(\"||+|=|||||\")\n\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Impossible' if stdin.find('||||')!= -1 else '|' + stdin.replace('||||', '|').replace('=', '').replace('|', '')\n    \n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stack = stdin.split('=')\n    left = stack[0].split('|')\n    right = stack[1].split('|')\n\n    if int(left[0]) + int(right[0]) == int(right[1]):\n        return f'|{left[1]}|+|{left[2]}|=|{left[0]}|{right[1]}|'\n    else:\n        return \"Impossible\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import re\n    expression = stdin\n    expression = re.sub('[\\s+]', '', expression)\n    print(expression)\n    #1\n    expression = re.sub('[\\s+]', '', expression)\n    print(expression)\n    #2\n    expression = re.sub('[\\s+]', '', expression)\n    print(expression)\n    #3\n    expression = re.sub('[\\s+]', '', expression)\n    print(expression)\n    #4\n    expression = re.sub('[\\s+]', '', expression)\n    print(expression)\n    #5\n    expression = re.sub('[\\s+]', '', expression)\n    print(expression)\n    return expression\n\"\"\"\n\n\nimport re\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\""
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    left = stdin.index('+')\n    left_sign = left\n    while left_sign > 0 and stdin[left_sign-1] == '|':\n        left_sign -= 1\n    left_group = left_sign\n    while left_sign < left and stdin[left_sign] == '|':\n        left_sign += 1\n    right_sign = left\n    while right_sign < len(stdin) - 1 and stdin[right_sign] == '|':\n        right_sign += 1\n    right_group = right_sign\n    while right_sign > right and stdin[right_sign-1] == '|':\n        right_sign -= 1\n    if right_group > left_group:\n        stdin = stdin[:left_sign] + stdin[right_sign:]\n    else:\n        stdin = stdin[:left_sign] + stdin[right_sign:left_group] + '+' + stdin[right_group:]\n    print(stdin)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('|')\n    if b == '=' and c == a:\n        return ''\n    elif a == '0' and b == '0':\n        return 'Impossible'\n    elif b == '0':\n        return f'{a}0{c}'\n    elif c == '0':\n        return f'{a}{b}0'\n    elif b == '0':\n        return f'{a}{c}'\n    elif c == '0':\n        return f'{a}{b}'\n    else:\n        return f'{a}{b}{c}'\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('|','')\n    stdin = stdin.split(' ')\n    print(stdin)\n    a = stdin[0]\n    b = stdin[2]\n    c = stdin[4]\n    if a == b:\n        return a + '+' + c\n    if a == c:\n        return a + '+' + b\n    if b == c:\n        return b + '+' + a\n    return 'Impossible'\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split()\n    result = []\n    for index, value in enumerate(expression):\n        if value == '+':\n            result.append('+')\n            expression[index] = value\n        elif value == '=':\n            result.append('=')\n            expression[index] = value\n        elif value == '|':\n            result.append('|')\n            expression[index] = value\n    result = \" \".join(result)\n    expression = \" \".join(expression)\n    if check_expression(expression):\n        return expression\n    else:\n        return \"Impossible\"\n\ndef"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    import math\n    n,k = map(int, stdin.split())\n    a = [x for x in range(1,n+1)]\n    m = 10**9 + 7\n    s = 0\n    for i in range(n):\n        s = (s + math.factorial(n-1))%m\n    print(((s + math.factorial(k))%m + math.factorial(n) - math.factorial(k) - math.factorial(n-k)%m)%m)\n    return ''\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, k = map(int, stdin.split('\\n')[0].split())\n    # Build the list of numbers\n    num_list = list(range(1, n + 1))\n    # Create the list of odd numbers\n    odd_list = [x for x in num_list if x % 2!= 0]\n    # Get the sum of odd numbers\n    odd_sum = sum(odd_list)\n    # Get the number of combinations\n    combination = pow(2, n)\n    # Get the answer\n    answer = odd_sum * combination\n    # Return answer\n    return str(answer)"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    count = 0\n    l = list(range(1, n + 1))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(i - l[j]) % 2 == 1:\n                l[i], l[j] = l[j], l[i]\n                count += 1\n    print(count % (10 ** 9 + 7))\n    return \"\""
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    n, k = [int(x) for x in stdin.split(' ')]\n    for i in range(1, n + 1):\n        if (i % 2 == 1):\n            ans = (ans + (n - i + 1) * i // 2) % (10 ** 9 + 7)\n        else:\n            ans = (ans + (n - i) * i // 2) % (10 ** 9 + 7)\n    return str(ans)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # The number of all possible permutations of length n is given by the binomial coefficient (n + k) * (n + k - 1) *... * k\n    # For example, the number of permutations of length 4 is given by\n    # n + k = 4 + 1 = 5\n    # n + k - 1 = 4 + 2 = 6\n    # n + k - 2 = 4 + 3 = 7\n    # n + k - 3 = 4 + 4 = 8\n    # n + k - 4 = 4 + 5 = 9\n    # n + k - 5 = 4 + 6 = 10\n    # n + k - 6 = 4 + 7 = 11\n    # n + k - 7 = 4 + 8 = 12\n    # n + k - 8 = 4 + 9 = 13\n    # n + k - 9 = 4 + 10 = 14\n    # n + k - 10 = 4 + 11 = 15\n    # n + k - 11 = 4 + 12 = 16\n    # n + k - 12 = 4 + 13 = 17\n    # n + k - 13 = 4 + 14 = 18\n    # n + k - 14 = 4 + 15 = 19\n    # n + k - 15 = 4 + 16 = 20\n    # n + k - 16 = 4 + 17 = 21\n    # n + k - 17 = 4 + 18 = 22\n    # n + k - 18 = 4 + 19 = 23\n    # n + k - 19 = 4 + 20 = 24\n    # n + k - 20 = 4 + 21 = 25\n    # n + k - 21 = 4 + 22 = 26\n    # n + k - 22 = 4 + 23 = 27\n    # n + k - 23 = 4 + 24 = 28\n    # n + k - 24 = 4 + 25 = 29\n    # n + k - 25 = 4 + 26 = 30\n    # n + k - 26 = 4 + 27 = 31\n    # n + k - 27 = 4 + 28 = 32\n    # n + k - 28 = 4 + 29 = 33\n    # n + k - 29 = 4 + 30 = 34\n    # n + k - 30 = 4 + 31 = 35\n    # n + k - 31 = 4 + 32 = 36\n    # n + k - 32 = 4 + 33 = 37\n    # n + k - 33 = 4 + 34 = 38\n    # n + k - 34 = 4 + 35 = 39\n    # n + k - 35 = 4 + 36 = 40\n    # n + k - 36 = 4 + 37 = 41\n    # n + k - 37 = 4 + 38 = 42\n    # n + k - 38 = 4 + 39 = 43\n    # n + k - 39 = 4 + 40 = 44\n    # n + k - 40 = 4 + 41 = 45\n    # n + k - 41 = 4 + 42 = 46\n    # n + k - 42 = 4 + 43 = 47\n    # n + k - 43 = 4 + 44 = 48\n    # n + k - 44 = 4 + 45 = 49\n    # n + k - 45 = 4 + 46 = 50\n    # n + k - 46 = 4 + 47 = 51\n    # n + k - 47 = 4 + 48 = 52\n    # n + k - 48 = 4 + 49 = 53\n    # n + k - 49 = 4 + 50 = 54\n    # There are totally 53 permutations of length 4, and 2 of them have oddness of 2:  {4,\\ 2,\\ 3,\\ 1} and {2,\\ 1,\\ 3,\\ 4}.\n    ans = (math.factorial(n + k - 1) // math.factorial(k)) % (10 ** 9 + 7)\n    return str(ans)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.split())\n    nk = n * k\n    k_fact = 1\n    for i in range(1, k + 1):\n        k_fact *= i\n    nk_fact = 1\n    for i in range(1, nk + 1):\n        nk_fact *= i\n    nk_fact = nk_fact % (10 ** 9 + 7)\n    odd_k = (k_fact * (n ** (k - 1))) % (10 ** 9 + 7)\n    odd_nk = (nk_fact * k) % (10 ** 9 + 7)\n    ans = (odd_k * odd_nk) % (10 ** 9 + 7)\n    return str(ans)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    l = [i for i in range(1, n+1)]\n    ans = 1\n    for i in range(k):\n        ans *= (len(l) - i)\n        ans %= 10 ** 9 + 7\n        # it is much faster to multiply\n        # the list of length i by len(l) - i\n        # than to use the elements\n        # directly as it can be wasteful\n        l = [j for j in l[1:] for _ in range(len(l) - 1)]\n    print(ans)\n    return ''\n    \n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    #print(n, k)\n    total_permutation = math.factorial(n)\n    print(total_permutation)\n    permutations_with_oddness = math.factorial(n) // math.factorial(n - k) % (10 ** 9 + 7)\n    print(permutations_with_oddness)"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(factorial(n) // factorial(n - k) % MOD)\n\nimport math\n\nMOD = 10 ** 9 + 7"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    'Solution to the problem on codewars'\n\n    # Split input into N lines\n    inp = stdin.split('\\n')\n\n    # Get number of sections\n    sections = int(inp[0])\n\n    # Get array of points\n    points = [[int(s) for s in line.split(' ')] for line in inp[1:]]\n\n    # Initialize dictionary of positions\n    pos = {0: (0, 0)}\n\n    # Get position of the first joint\n    for i in range(sections):\n        pos[i + 1] = (pos[i][0] + points[i][0], pos[i][1] + points[i][1])\n\n    # Create string of ways to get to each point\n    ways = ''\n\n    # Get way to get to each point\n    for i in range(sections):\n        # Get coordinates of point and position of joint\n        point = tuple(points[i])\n        joint = tuple(pos[i + 1])\n\n        # Get distance to point\n        distance = round(math.sqrt(point[0] ** 2 + point[1] ** 2), 6)\n\n        # Get way to get to point from joint\n        way = ''\n        while joint!= point:\n            # Get position of joint\n            joint_pos = tuple(pos[i + 1])\n\n            # Get distance to joint\n            joint_distance = round(math.sqrt(joint_pos[0] ** 2 + joint_pos[1] ** 2), 6)\n\n            # Get difference\n            difference = abs(joint_distance - distance)\n\n            # Get direction\n            if difference == 0:\n                direction = 'U'\n            elif joint_pos[0] > point[0]:\n                direction = 'R'\n            elif joint_pos[0] < point[0]:\n                direction = 'L'\n            else:\n                direction = 'D'\n\n            # Set way\n            way += direction\n            # Move joint\n            joint = (joint[0] + points[i][0], joint[1] + points[i][1])\n            # Increase distance\n            distance = joint_distance\n\n        # Add way to string\n        ways += way\n\n    # Return solution\n    return f'{sections}\\n' + '\\n'.join(ways)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Constructs the solution to the problem.\n    \"\"\"\n    # Parse the input\n    n = int(stdin.split('\\n')[0])\n    Xs = [int(X) for X in stdin.split('\\n')[1:]]\n    Ys = [int(Y) for Y in stdin.split('\\n')[1:]]\n\n    # Check if we can generate a solution\n    if Xs[0] < 0 or Xs[-1] > 10**9 or Ys[0] < 0 or Ys[-1] > 10**9:\n        return \"-1\"\n\n    # Construct the solution\n    m = 0\n    d = []\n    for i in range(n):\n        X, Y = Xs[i], Ys[i]\n        if i == 0:\n            m += 1\n            d.append(X - 0)\n        else:\n            if X < 0:\n                m += 1\n                d.append(X - 0)\n            else:\n                m += 1\n                d.append(X - Xs[i - 1])\n        if i == n - 1:\n            m += 1\n            d.append(Y - 0)\n        else:\n            if Y < 0:\n                m += 1\n                d.append(Y - 0)\n            else:\n                m += 1\n                d.append(Y - Ys[i - 1])\n    d.append(Ys[-1] - Ys[0])\n\n    # Return the solution\n    return f\"{m}\\n{d[0]}\\n{d[1]}\\n{d[2]}\\n{d[3]}\"\n\n\ndef"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of https://codeforces.com/problemset/problem/711/B\n\n    Arguments:\n        stdin {str} -- Standard input\n\n    Returns:\n        str -- Solution of the problem\n    \"\"\"\n\n    # Read Input\n    lines = stdin.split('\\n')\n    n, *xs = lines\n    n = int(n)\n    xs = [list(map(int, x.split())) for x in xs]\n    xs.append([0, 0])\n\n    # Set up\n    prev = xs[0]\n    m = 1\n    dists = [0] * n\n\n    for i in range(1, n + 1):\n        x, y = xs[i]\n        d = abs(x - prev[0]) + abs(y - prev[1])\n        dists[i - 1] = d\n        m = max(m, d)\n        if i < n:\n            prev = xs[i]\n\n    # Run and get answer\n    dist = [0] * n\n    for i in range(n):\n        j = i - 1\n        if j < 0:\n            dist[0] = i\n            dist[1] = m\n        else:\n            dist[i] = i + m + dists[j]\n            dist[j] = i + m + dists[j]\n\n    # Print Answer\n    result = ''\n    for i in range(n):\n        result += str(m) +''\n        result += str(dists[i]) +''\n        result += str(dist[i]) +''\n\n        j = i - 1\n        if j < 0:\n            result += 'L'\n        else:\n            result += ('U' if dist[i] == dist[j] else 'R')\n        result += '\\n'\n\n    return result\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an input string, determines the least number of robot arms needed to bring\n    the end point to each point in a list of points.\n    :param stdin: string containing the input\n    :return: the least number of robot arms needed to bring the end point to each point in a list of points\n    \"\"\"\n    num_sections, points = (int(x) for x in stdin.split())\n    sections = list()\n\n    for _ in range(num_sections):\n        sections.append([int(x) for x in input().split()])\n\n    valid = False\n    robot_arms = list()\n    while not valid:\n        robot_arms = find_all_valid_robot_arms(sections, points)\n        if len(robot_arms) > 0:\n            valid = True\n\n    return \"\\n\".join([\" \".join(x) for x in robot_arms])\n\n\ndef"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #   1. Read the input\n    #   2. Check if the given configurations can satisfy the constraints\n    #   3. If so, calculate the configurations of the robot arm\n    #   4. If not, return -1\n    return ''"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if string[-5:] == \"ogogo\":\n        string += \"***\"\n        return string\n    elif string[-7:] == \"ogogogo\":\n        string += \"***g\"\n        return string\n    elif string[-8:] == \"ogogogogo\":\n        string += \"***gmg\"\n        return string\n    else:\n        return string\n\n\nprint(solution('aogogob'))\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    k = []\n    for i in range(n-1, -1, -1):\n        if s[i] == 'o' and s[i-1] == 'g':\n            k.append('***')\n        else:\n            k.append(s[i])\n    print(''.join(k[::-1]))\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('o', '***').replace('g', '***')\n\n\"\"\"\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin[0])\n    string = stdin[1]\n    new_str = []\n    for i in range(size):\n        if string[i] == \"o\":\n            if i == 0:\n                if string[i + 1] == \"g\":\n                    new_str.append(\"g\")\n                    new_str.append(\"o\")\n                else:\n                    new_str.append(\"g\")\n            elif string[i - 1] == \"o\":\n                if string[i + 1] == \"g\":\n                    new_str.append(\"g\")\n                    new_str.append(\"o\")\n                else:\n                    new_str.append(\"o\")\n            else:\n                new_str.append(\"o\")\n        else:\n            new_str.append(string[i])\n    return \"\".join(new_str)\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = ''\n    s = stdin\n    s = s.replace('ogogo', '***')\n    s = s.replace('ogo', '***')\n    s = s.replace('og', '***')\n    ans += s\n    return ans\n\nprint(solution('ogogmgogogogo'))"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n'\n   ...           'ogogob')\n    'a***b'\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1].strip()\n    filler = ['og', 'oog', 'ogog', 'ogogog']\n    for f in filler:\n        if s.endswith(f):\n            s = s[:-len(f)] + '***'\n    print(s)\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    n = int(line[0])\n    s = line[1]\n    return ''.join(['***' if s[i] + s[i + 1] + s[i + 2] == 'ogo' else s[i] for i in range(n)])\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    size = int(stdin_list[0])\n    stdin_list.pop(0)\n    stdin_str = ''.join(stdin_list)\n\n    fillers = []\n\n    for i in range(size):\n        for word in stdin_str:\n            if word[-1] == 'g' and word not in fillers:\n                fillers.append(word)\n\n    # print(fillers)\n\n    result = stdin_str.replace(fillers[0], \"***\")\n    result = result.replace(fillers[1], \"***\")\n\n    # print(result)\n\n    return result"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x, n = map(int, stdin.split())\n    primes = set(int(i) for i in range(2, x+1) if prime_check(i))\n    factors = dict()\n    for p in primes:\n        factors[p] = n // p\n        n %= p\n    result = 1\n    for p, m in factors.items():\n        result *= (p ** m)\n        result %= (10**9 + 7)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split(' '))\n    def prime(x):\n        lst = []\n        i = 2\n        while i * i <= x:\n            if x % i:\n                i += 1\n            else:\n                x //= i\n                lst.append(i)\n        if x > 1:\n            lst.append(x)\n        return lst\n    lst = prime(x)\n    def g(x, n):\n        for p in lst:\n            if x % p ** n:\n                return p ** n\n    def f(x, y):\n        p = g(y, 1)\n        for _ in range(y - 1):\n            p = g(p, 1)\n        return pow(p, x - 1, 10 ** 9 + 7)\n    return str(f(x, n) * f(x, n - 1) % (10 ** 9 + 7))\n    \n\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    primes = set(primes_sieve(x + n))\n    # dp = [1] * (n + 1)\n    # for i in range(1, n + 1):\n    #     dp[i] = sum(dp[j] * dp[i - j] for j in primes if i - j >= 0) % MOD\n    # return dp[n]\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, n = [int(x) for x in stdin.strip().split(' ')]\n\n    # your code here\n    f = 1\n    for p in primes(x):\n        f *= p ** max([i for i in range(n) if x % (p ** i) == 0])\n    return str(f % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # line = input()\n    # x, n = map(int, line.split())\n    x, n = map(int, stdin.split())\n\n    # the same as\n    # x, n = map(int, stdin(2).split())\n    # but it's slower because of lazy read\n    # input() should be avoided when the number of inputs is large\n    # use sys.stdin.readline() in loop to achieve better performance\n\n    # if n == 1:\n    #     return str(x)\n\n    # primes = primeFactors(x)\n    # total = x\n    # for prime in primes:\n    #     total = total * (prime ** (n - 1)) % (10 ** 9 + 7)\n    # return str(total)\n\n    # form of the equation of the formula, y^n = x(x + 1)(x + 2)..(x + n - 1)\n    # y = x + 1\n    # x = y + 2 - n - 1\n    # n = n - 2\n    # this will help to get the equation of the formula\n\n    y = x + 1\n    total = y\n    for i in range(1, n):\n        total = (total * y) % (10 ** 9 + 7)\n    return str(total)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split(' '))\n    return str(x * y * z % (10**9 + 7))\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    p_dict = {}\n    for num in range(2, x + 1):\n        for p in prime_factors(num):\n            if p not in p_dict:\n                p_dict[p] = 0\n            p_dict[p] += 1\n    ans = 1\n    for p in p_dict.keys():\n        ans *= p ** (p_dict[p] - 1) * (p + 1) ** (p_dict[p])\n        ans %= (10 ** 9 + 7)\n    return ans\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    max_p = max(prime_divisors(x))\n    total = 1\n    for p in range(1, max_p + 1):\n        total = (total * (x // (p ** n)) % (10 ** 9 + 7)) % (10 ** 9 + 7)\n    return total\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c = [int(i) for i in stdin.split(' ')]\n\n    def check(a, b, c):\n        if a == b == c == 1:\n            return 1\n        x = b * (a ** b) + c\n        s = str(x)\n        sum = 0\n        for i in s:\n            sum += int(i)\n        if sum == x:\n            return 1\n        else:\n            return 0\n\n    output = check(a, b, c)\n    if output == 1:\n        print(1)\n        print(x)\n    else:\n        print(0)\n        print('0')\n    return ''"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, c = map(int, stdin.split(' '))\n    solution = 0\n    for x in range(1, 10000):\n        if x ** a + b * (x ** s(x)) + c == 0:\n            solution += 1\n            print(x)\n    return solution\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    def s(x):\n        s = 0\n        while x!= 0:\n            s += x % 10\n            x //= 10\n        return s\n    count = 0\n    for x in range(1, 1000000):\n        if (a * s(x) + c) ** b == x:\n            count += 1\n            print(x)\n    print(count)\n    return ''"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    b = abs(b)\n    c = abs(c)\n\n    if b == 1:\n        if c >= 0:\n            return f\"{len([i for i in range(c + 1) if i ** a + c == 0])}\"\n        else:\n            return f\"{len([i for i in range(-c - 1, 0) if i ** a + c == 0])}\"\n    elif b == 0:\n        return \"1\"\n    else:\n        s = -b * (b ** (a + 1) + c - 1) / (a + 1)\n        if s >= 0:\n            if int(s) < 10 ** 9:\n                return f\"{int(s)} {len([i for i in range(int(s) + 1) if i ** a + c == 0])}\"\n            else:\n                return f\"{len([i for i in range(10 ** 9 + 1) if i ** a + c == 0])}\"\n        else:\n            if int(s) < -10 ** 9:\n                return f\"{len([i for i in range(int(s) - 1, 0, -1) if i ** a + c == 0])}\"\n            else:\n                return f\"{len([i for i in range(-10 ** 9, 0) if i ** a + c == 0])}\"\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find all integer solutions x (0 < x < 10^9) of the equation:x = b\u00b7s(x)^{a} + c,  \n    where a, b, c are some predetermined constant values and function s(x) determines the sum of all digits in the decimal representation of number x.\n    The teacher gives this problem to Dima for each lesson. He changes only the parameters of the equation: a, b, c. Dima got sick of getting bad marks and he asks you to help him solve this challenging problem.\n\n    :param stdin:\n    :return:\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n\n    def sum_of_digits(n: int) -> int:\n        \"\"\"\n        Sum of the digits in the number n\n\n        :param n: int\n        :return: int\n        \"\"\"\n        return sum([int(digit) for digit in str(n)])\n\n    def s(x: int) -> int:\n        \"\"\"\n        s(x) = sum of digits in the number x\n\n        :param x: int\n        :return: int\n        \"\"\"\n        return sum_of_digits(x)\n\n    def check(x):\n        \"\"\"\n        check if the solution x is the correct one\n\n        :param x: int\n        :return: boolean\n        \"\"\"\n        return a * (sum_of_digits(x)) ** (1 / b) + c == s(x)\n\n    count = 0\n    while count < 100:\n        x = s(count)\n        if check(x):\n            print(x)\n            count += 1\n\n    print(count)\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    a, b, c = map(int, input[0].split())\n    sol = 0\n    for x in range(1, 1000001):\n        if a * x ** b + c == x:\n            sol += 1\n    return sol\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b ** a - c >= 0:\n        return 0\n    else:\n        return (b ** a - c) // a\n    \nprint(solution(input()))"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    a = int(l[0])\n    b = int(l[1])\n    c = int(l[2])\n    \n    def s(x):\n        res = 0\n        for i in str(x):\n            res += int(i)\n        return res\n    \n    def check(x):\n        if b*s(x)**a + c == 0:\n            return True\n        else:\n            return False\n    \n    def gen(x, y):\n        while check(x) and y > x:\n            yield x\n            x += 1\n    \n    res = 0\n    for i in gen(0, 9):\n        if check(i):\n            res += 1\n    return str(res)\n\nprint(solution('2 2 -1'))\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    count = 0\n    for x in range(10):\n        for y in range(10):\n            for z in range(10):\n                if (x*1000 + y*100 + z*10)**a + (b*x + c*y + z)**a == 0:\n                    if x*1000 + y*100 + z*10 > 0 and x*1000 + y*100 + z*10 < 10**9:\n                        print(x*1000 + y*100 + z*10)\n                        count += 1\n    return str(count)"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    sequence = [int(s) for s in stdin]\n    if set(sequence)!= set(range(1, 7)):\n        return 'NO'\n    if len(set(sequence))!= 4:\n        return 'NO'\n    if sequence.count(sequence[0])!= len(sequence):\n        return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    cube = [int(c) for c in stdin.split()]\n    states = [\n        [1, 4, 2, 3],\n        [1, 2, 3, 4],\n        [2, 1, 3, 4],\n        [2, 3, 1, 4],\n        [3, 1, 2, 4],\n        [3, 2, 4, 1],\n    ]\n    cubes = list(zip(*[[cube[i] for i in c] for c in states]))\n    solved = [c == [1, 1, 1, 1] for c in cubes]\n    return 'YES' if all(solved) else 'NO'"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    colors = [int(i) for i in stdin.strip().split()]\n\n    total_colors = {1, 2, 3, 4, 5, 6}\n    used_colors = set(colors)\n    left_colors = total_colors - used_colors\n\n    if len(left_colors) == 4:\n        return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' or 'NO' depending on if it's possible to solve\n    Rubik's Cube given the input sequence of 24 numbers.\n    \"\"\"\n    # Initialize a dictionary for counting numbers occurences.\n    occurrences = {}\n    # Initialize a list to save the squares.\n    squares = []\n    # Save squares in list.\n    for i in stdin.split():\n        squares.append(int(i))\n    # Iterate over the list and count the occurrence of every number.\n    for i in squares:\n        try:\n            occurrences[i] += 1\n        except KeyError:\n            occurrences[i] = 1\n    # If there are no occurrence of 4, then it's not possible to solve.\n    if 4 not in occurrences.values():\n        return 'NO'\n    # If there are occurence of 4, then check for each number whether it occurs 4 times.\n    for key in occurrences.keys():\n        if occurrences[key]!= 4:\n            return 'NO'\n    # If no errors occured so far, then we can return 'YES'.\n    return 'YES'\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cube = list(map(int, stdin.split()))\n    face_with_four_squares = {1, 2, 3, 4}\n    face_with_six_squares = {5, 6}\n    face_with_eight_squares = {7, 8, 9}\n    face_with_twelve_squares = {10, 11, 12}\n    faces = {\n        face_with_four_squares: {3, 2, 1},\n        face_with_six_squares: {6, 2, 5},\n        face_with_eight_squares: {4, 1, 3},\n        face_with_twelve_squares: {2, 1, 4}\n    }\n\n    for face, squares in faces.items():\n        if set(cube) == face:\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if solve_cube(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if len(s)!= 24:\n        return \"NO\"\n    for c in s:\n        if c not in [str(n) for n in range(1, 7)]:\n            return \"NO\"\n    return \"YES\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n\n    # case 1\n    if (\n        (a[0]!= a[1] and a[1] == a[2] and a[2] == a[3] and a[0] == a[6])\n        or (a[0]!= a[1] and a[1] == a[2] and a[2] == a[4] and a[0] == a[8])\n        or (a[0]!= a[1] and a[1] == a[2] and a[2] == a[5] and a[0] == a[10])\n        or (a[0]!= a[1] and a[1] == a[3] and a[3] == a[5] and a[0] == a[12])\n    ):\n        return \"YES\"\n\n    # case 2\n    if (\n        (a[0]!= a[4] and a[4] == a[5] and a[5] == a[6] and a[0] == a[10])\n        or (a[0]!= a[4] and a[4] == a[5] and a[5] == a[8] and a[0] == a[12])\n        or (a[0]!= a[4] and a[4] == a[5] and a[5] == a[9] and a[0] == a[14])\n        or (a[0]!= a[4] and a[4] == a[8] and a[8] == a[9] and a[0] == a[14])\n    ):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split(' '))\n    hacks = 0\n    score = 0\n    while True:\n        for i in range(25):\n            hacks += 1\n            score += (score + i * 100 + 1) % p\n        if score >= x and p - score >= y:\n            return str(hacks)\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n\n    min_hacks = 0\n    for i in range(1, x + 1):\n        if x % i == 0:\n            hacks = x // i - p // i + 1\n            if hacks >= y:\n                min_hacks = max(hacks, min_hacks)\n    return min_hacks\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function returns the smallest number of successful hacks to achieve\n     the objective from stdin.\"\"\"\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = list(map(int, stdin.split()))\n    \n    for i in range(25):\n        if (p + i * 96 + 42) % 475 == 0:\n            print(26 + i)\n            return\n    \n    for i in range(25):\n        if (p - i * 96 + 42) % 475 == 0:\n            print(26 + i)\n            return\n    \n    print(26 + i)\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calc_hash(n):\n        i = (stdin[0] * stdin[1] + stdin[2]) % n\n        for _ in range(25):\n            i = (i * stdin[1] + stdin[2]) % n\n        return i\n\n    def hack():\n        for _ in range(25):\n            print(26 + stdin[0] * calc_hash(n) % n)\n\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    y = int(stdin.split()[2])\n\n    for _ in range(x // y):\n        hack()\n\n    i = (x % y)\n    for _ in range(i):\n        print(26 + calc_hash(n) * 96 % n)\n\n    return ''\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    points, score, required_score = map(int, stdin.split(' '))\n    remainder = points % 50\n    round_number = points // 50\n    i = 0\n    for _ in range(round_number):\n        i = (i * 96 + 42) % 500\n    solution = i\n    for _ in range(remainder):\n        solution = (solution * 96 + 42) % 500\n    solution = min(solution, 25)\n    for _ in range(25):\n        solution = (solution * 96 + 42) % 500\n    if solution > score:\n        return str(solution - score)\n    return str(solution - required_score)\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = [int(i) for i in stdin.split()]\n\n    a = x - p\n    n = 0\n    while a > 0:\n        a = (a // (96 * 2)) * 96 + 42\n        n += 1\n\n    return n\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    for i in range(100):\n        if p + i * 50 < y:\n            continue\n        else:\n            i = i % 475\n            print(26 + i)\n            break\n    return"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, s = map(int, stdin.split())\n    x, y, s = x - 1, y - 1, s - x\n    for i in range(25):\n        s = (s // 50) % 475 + (s % 50) * 96 + 42\n    i = s // 475\n    while i:\n        s = (s % 475) * 96 + 42\n        i -= 1\n    return 26 + s % 475\n\"\"\"\ndef"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(len(stdin))\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum distance the dog must travel in order to have a meal n times\"\"\"\n    print(int(stdin[0]))\n    # My solution is wrong :(\n    # return 0\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n2\\n3\\n1\")\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    c = int(stdin.readline())\n    m = min(a, b, c)\n    if n * m % 2!= 0:\n        print(0)\n    else:\n        print(n * m // 2)"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = (int(x) for x in stdin.split())\n    if a < b:\n        a, b = b, a\n    if c < b:\n        c, b = b, c\n    if b <= c:\n        return str(a + b)\n    return str(a + c)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    # 0 => Rabbit's house, 1 => Owl's house, 2 => Eeyore's house\n    houses = [int(x) for x in stdin.readline().strip().split()]\n    dist = [[0 for _ in range(3)] for _ in range(cases)]\n    dist[0][0] = dist[0][1] = dist[0][2] = houses[0]\n    for i in range(1, cases):\n        for j in range(0, 3):\n            d = dist[i-1][j]\n            if j == 0:\n                if d + houses[j+1] > dist[i][0]:\n                    dist[i][0] = d + houses[j+1]\n            elif j == 1:\n                if d + houses[j-1] > dist[i][1]:\n                    dist[i][1] = d + houses[j-1]\n            else:\n                if d + houses[j-2] > dist[i][2]:\n                    dist[i][2] = d + houses[j-2]\n    ans = 0\n    for i in range(cases-1, -1, -1):\n        ans += dist[i][0]\n        if ans > dist[i][1]:\n            ans -= dist[i][1]\n        else:\n            ans -= dist[i][1] - ans\n        if ans > dist[i][2]:\n            ans -= dist[i][2]\n        else:\n            ans -= dist[i][2] - ans\n    return ans\n\"\"\""
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    s = 0\n    t = 0\n    while n > 0:\n        s += min(a, b, c)\n        a -= min(a, b, c)\n        b -= min(a, b, c)\n        c -= min(a, b, c)\n        n -= 1\n    return s\nprint(solution(input()))\n\n\n-----Solution 1 -----\nimport itertools\nimport math\ndef"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split('\\n')]\n    # get minimum distance\n    min_distance = min(a, b, c)\n    # if a > min_distance, we can get a from b and c\n    if a > min_distance:\n        min_distance += b\n    # if b > min_distance, we can get b from c\n    elif b > min_distance:\n        min_distance += c\n    # if c > min_distance, we can get c from a\n    elif c > min_distance:\n        min_distance += a\n    return str(min_distance)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = [int(x) for x in stdin.split()]\n    return max(x1, x2, x3) - min(x1, x2, x3)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = map(int, stdin.split(' '))\n    distance1 = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2))\n    distance2 = math.sqrt(math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2))\n    distance3 = math.sqrt(math.pow(x1 - x3, 2) + math.pow(y1 - y3, 2))\n    return int(math.fabs(distance1 + distance2 - distance3))"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split(' '))\n    x_1, x_2, x_3 = sorted([x_1, x_2, x_3])\n    return abs(x_2 - x_3)\n'''\n\ndef"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split(' '))\n    return x1+x2+x3-max(x1, x2, x3)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split())\n    return x1 + x2 + x3 - max(x1, x2, x3) - min(x1, x2, x3)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split())\n    if x1 == x2:\n        x2 += 1\n    elif x1 == x3:\n        x3 += 1\n    elif x2 == x3:\n        x3 += 1\n    else:\n        x1 += 1\n    return x1 + x2 + x3 - 3\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split())\n    return min(x_1 + x_2, x_2 + x_3, x_1 + x_3)\n    \n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, z1 = list(map(int, stdin.split()))\n    x2, y2, z2 = list(map(int, stdin.split()))\n    x3, y3, z3 = list(map(int, stdin.split()))\n    return min(x1 - x2, x2 - x3, x1 - x3) + min(y1 - y2, y2 - y3, y1 - y3) + min(z1 - z2, z2 - z3, z1 - z3)\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return min(abs(a - c), abs(b - c), abs(a - b))\n\ndef"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                pairs.append([i, j])\n\n    if len(pairs) == 0:\n        print(-1)\n    else:\n        for i in range(len(pairs)):\n            a[pairs[i][0]] = a[pairs[i][1]] & x\n            a[pairs[i][1]] = a[pairs[i][0]] & x\n        print(len(pairs))\n        print(\" \".join(map(str, a)))\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    s = set(arr)\n    if len(s) == n:\n        return str(0)\n    if len(s) == 1:\n        return str(-1)\n    for i in range(n):\n        for j in range(n):\n            arr[i] = (arr[i] & k) | arr[j]\n            if len(set(arr)) == n:\n                return str(i+1)\n            arr[i] = arr[i] & ~k\n    return str(-1)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n\n    i = 0\n    while i < n:\n        if numbers[i]!= i + 1:\n            numbers[numbers[i] - 1] = numbers[i]\n            numbers[i] = i + 1\n            i = 0\n        else:\n            i += 1\n\n    count = 0\n    for i in range(n - 1):\n        if numbers[i] == numbers[i + 1]:\n            count += 1\n\n    if count == 0:\n        return '-1'\n    else:\n        return str(count)"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nInput:\n4 3\n1 2 3 7\n\nOutput:\n1\n\nInput:\n2 228\n1 1\n\nOutput:\n0\n\nInput:\n3 7\n1 2 3\n\nOutput:\n-1\n\n\"\"\"\n\nimport sys\nimport random\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(c) for c in stdin.split(' ')]\n    array = [int(c) for c in stdin.split(' ')]\n\n    count = 0\n    for i in range(len(array)):\n        if array[i]!= x:\n            count += 1\n            for j in range(i + 1, len(array)):\n                if array[j] == x:\n                    count += 1\n                    break\n            else:\n                break\n    else:\n        count = -1\n\n    print(count)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    equal = False\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                equal = True\n            if arr[i] & arr[j] == x:\n                count += 1\n                equal = True\n    if equal:\n        return count\n    return '-1'"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return str(min_number_of_operations)\n\ndef"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check(arr: list, x: int) -> bool:\n        nonlocal arr_count, result\n        arr_count = 0\n        result = False\n        for i in arr:\n            if i & x == i:\n                arr_count += 1\n            else:\n                arr_count = 0\n            if arr_count == 2:\n                result = True\n                break\n        return result\n    \n    def solution_i(arr: list, x: int) -> bool:\n        nonlocal result\n        for i in range(len(arr)):\n            if check(arr, x ^ arr[i]):\n                result = i + 1\n                break\n        return result\n    \n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    \n    arr_count = 0\n    result = -1\n    \n    if check(arr, x):\n        return result\n    elif len(set(arr)) == 1:\n        return -1\n    else:\n        return solution_i(arr, x)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split('\\n')[0].split())\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    for i in range(n):\n        if x & arr[i] == 0:\n            print(i + 1)\n            return\n\n    print(-1)\n    return\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  *  ,\n  *\n  ***\n  *  ,\n  *  ,\n  ***\n  *  ,\n  *  ,\n  ***\n  *  ,\n  *  ,\n  ***\n  *  ,\n  *  ,\n  ***\n  '''\n\n  width, height = map(int, stdin.split())\n  grid = [list(stdin[(i * width + 1) : ((i + 1) * width)]) for i in range(height)]\n\n  def find_cross(row, col):\n    cross = False\n    if grid[row - 1][col] == \".\" and grid[row + 1][col] == \"*\" and grid[row][col - 1] == \"*\" and grid[row][col + 1] == \"*\":\n      cross = True\n    return cross\n\n  def is_cross(row, col):\n    is_cross = False\n    if grid[row][col] == \"*\":\n      is_cross = find_cross(row, col)\n    return is_cross\n\n  def find_plus(row, col):\n    plus = False\n    if grid[row][col] == \"*\":\n      if is_cross(row, col - 1):\n        plus = True\n      if is_cross(row - 1, col):\n        plus = True\n      if is_cross(row + 1, col):\n        plus = True\n      if is_cross(row, col + 1):\n        plus = True\n      if is_cross(row, col - 1) and is_cross(row - 1, col):\n        plus = True\n      if is_cross(row - 1, col) and is_cross(row, col + 1):\n        plus = True\n      if is_cross(row + 1, col) and is_cross(row, col + 1):\n        plus = True\n      if is_cross(row, col + 1) and is_cross(row + 1, col):\n        plus = True\n    return plus\n\n  def is_plus(row, col):\n    is_plus = False\n    if grid[row][col] == \".\":\n      is_plus = find_plus(row, col)\n    return is_plus\n\n  def find_dot(row, col):\n    dot = False\n    if grid[row][col] == \".\" and grid[row - 1][col] == \".\" and grid[row + 1][col] == \".\" and grid[row][col - 1] == \".\" and grid[row][col + 1] == \".\":\n      dot = True\n    return dot\n\n  def is_dot(row, col):\n    is_dot = False\n    if grid[row][col] == \".\":\n      is_dot = find_dot(row, col)\n    return is_dot\n\n  def find_plus_shape(row, col):\n    plus_shape = False\n    if grid[row][col] == \".\":\n      if is_cross(row, col - 1) and is_cross(row - 1, col) and is_cross(row + 1, col) and is_cross(row, col + 1):\n        plus_shape = True\n      if is_cross(row - 1, col) and is_cross(row, col - 1) and is_cross(row + 1, col) and is_cross(row, col + 1):\n        plus_shape = True\n      if is_cross(row, col + 1) and is_cross(row - 1, col) and is_cross(row + 1, col) and is_cross(row, col - 1):\n        plus_shape = True\n      if is_cross(row, col - 1) and is_cross(row, col + 1) and is_cross(row - 1, col - 1) and is_cross(row + 1, col + 1):\n        plus_shape = True\n      if is_cross(row, col - 1) and is_cross(row, col + 1) and is_cross(row - 1, col + 1) and is_cross(row + 1, col - 1):\n        plus_shape = True\n      if is_cross(row, col - 1) and is_cross(row, col + 1) and is_cross(row + 1, col - 1) and is_cross(row - 1, col + 1):\n        plus_shape = True\n    return plus_shape\n\n  def is_plus_shape(row, col):\n    is_plus_shape = False\n    if grid[row][col] == \".\":\n      is_plus_shape = find_plus_shape(row, col)\n    return is_plus_shape\n\n  for col in range(width):\n    for row in range(height):\n      if is_plus_shape(row, col):\n        print(\"YES\")\n        return \"YES\"\n  print(\"NO\")\n  return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(s) for s in stdin.split()]\n\n    if w == 0 or h == 0:\n        return 'NO'\n\n    if h == 1:\n        return 'YES'\n\n    center = (w - 1) // 2\n    left = center\n    right = center\n    top = center\n    down = center\n    has_shape = False\n\n    for y in range(h):\n        row = stdin[y * w : (y + 1) * w]\n        for x, s in enumerate(row):\n            if s == '.':\n                if x == left or x == right or y == top or y == down:\n                    if x == left or x == right:\n                        if y == top or y == down:\n                            has_shape = True\n                    elif x > left and x < right:\n                        has_shape = True\n                    else:\n                        if y == top or y == down:\n                            has_shape = True\n                else:\n                    has_shape = False\n                    break\n            elif s == '*':\n                if x == left or x == right:\n                    has_shape = False\n                    break\n                else:\n                    has_shape = True\n\n    return 'YES' if has_shape else 'NO'\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find if the given picture has single \"+\" shape.\"\"\"\n    # read data\n    h, w = [int(num) for num in stdin.split(' ')]\n    picture = []\n    for _ in range(h):\n        picture.append([char for char in stdin.split('\\n')[1]])\n    # check if picture has single \"+\" shape\n    result = check_picture(picture, w, h)\n    if result:\n        return 'YES'\n    return 'NO'\n\ndef"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [stdin[i] for i in range(0, len(stdin))]\n    for i in range(len(a)):\n        if i % 2 == 0:\n            if len(a)!= 0:\n                if a[i]!= \".\" and a[i]!= \"*\":\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            if len(a)!= 0:\n                if a[i]!= \"*\":\n                    return \"NO\"\n            else:\n                return \"NO\"\n    return \"YES\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  width, height = map(int, stdin.split())\n  pict = stdin[1:]\n  for i in range(height):\n    if pict[i*width:i*width+width] == '*'*width:\n      return \"YES\"\n  return \"NO\"\n\nassert solution(\".****..*..****\") == \"YES\"\nassert solution(\".*.*.*.*.*.*.*.*.*\") == \"NO\"\nassert solution(\"......\") == \"NO\"\n\"\"\""
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    height, width = [int(x) for x in stdin.split()]\n    if height == 1 or width == 1:\n        return 'YES'\n    picture = [stdin.split()]\n    for _ in range(height - 2):\n        picture.append(stdin.split())\n    picture.append(stdin.split())\n    if len(picture[0][0]) == 1:\n        return 'NO'\n    total_rows = len(picture)\n    total_cols = len(picture[0])\n    # For each row, there should be at least one \"*\" and at most one \".\"\n    for row in picture:\n        if row.count('.') < 1:\n            return 'NO'\n        if row.count('*') < 1:\n            return 'NO'\n        if row.count('*') > 1:\n            return 'NO'\n    # For each column, there should be at least one \"*\" and at most one \".\"\n    for col in zip(*picture):\n        if col.count('.') < 1:\n            return 'NO'\n        if col.count('*') < 1:\n            return 'NO'\n        if col.count('*') > 1:\n            return 'NO'\n\n    # There should be at least one consecutive row with one \"*\"\n    for row in picture:\n        if row.count('*') == 1:\n            if len(set(row))!= 1:\n                return 'NO'\n    # There should be at least one consecutive column with one \"*\"\n    for col in zip(*picture):\n        if col.count('*') == 1:\n            if len(set(col))!= 1:\n                return 'NO'\n    # Check if the total number of \"*\" is equal to the total number of \".\"\n    if picture.count('*')!= picture.count('.'):\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.split()))\n    photos = []\n    for _ in range(h):\n        photos.append(stdin.split()[1:])\n\n    # put coordinates of the center of each shapes in a list\n    shapes = []\n    for photo in photos:\n        for y, row in enumerate(photo):\n            if \"*\" in row:\n                for x, col in enumerate(row):\n                    if col == \"*\":\n                        if photo[y][x+1] == \"*\" and photo[y][x-1] == \"*\" and photo[y+1][x] == \"*\" and photo[y-1][x] == \"*\":\n                            shapes.append((x, y))\n\n    def is_shape(x, y):\n        for d in [\"left\", \"right\", \"up\", \"down\"]:\n            if photo[y][x + 1] == \"*\" and photo[y][x - 1] == \"*\" and photo[y + 1][x] == \"*\" and photo[y - 1][x] == \"*\":\n                if photo[y][x + 2] == \"*\" and photo[y][x - 2] == \"*\" and photo[y + 2][x] == \"*\" and photo[y - 2][x] == \"*\":\n                    if photo[y + 1][x + 1] == \"*\" and photo[y + 1][x - 1] == \"*\" and photo[y - 1][x + 1] == \"*\" and photo[y - 1][x - 1] == \"*\":\n                        if photo[y + 2][x + 2] == \"*\" and photo[y + 2][x - 2] == \"*\" and photo[y - 2][x + 2] == \"*\" and photo[y - 2][x - 2] == \"*\":\n                            return True\n        return False\n\n    for x, y in shapes:\n        if is_shape(x, y):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.split(' ')]\n    pict = []\n    for i in range(h):\n        l = stdin.split('\\n')[i]\n        pict.append(l)\n\n    def valid(pict):\n        h, w = len(pict), len(pict[0])\n        def check(l):\n            cnt, y, x = 0, 0, 0\n            for x in range(w):\n                if l[x] == '.':\n                    cnt += 1\n                else:\n                    if cnt > 1:\n                        return False\n                    cnt = 0\n            return True\n        for y in range(h):\n            if not check(pict[y]):\n                return False\n        return True\n    if valid(pict):\n        print('YES')\n    else:\n        print('NO')\n    return ''\n\ndef"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n < a or n < b or n < 2:\n        return \"NO\"\n    g = [[0]*n for _ in range(n)]\n    for _ in range(a):\n        x, y = map(int, stdin.split())\n        g[x-1][y-1] = 1\n        g[y-1][x-1] = 1\n    for _ in range(b):\n        x, y = map(int, stdin.split())\n        g[x-1][y-1] = 1\n        g[y-1][x-1] = 0\n    print(\"YES\")\n    for i in range(n):\n        for j in range(n):\n            print(g[i][j], end=\"\")\n        print()\n\n\nsolution(input())\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds whether or not there exists a connected component that fulfills the given conditions.\n    \n    Parameters\n    ----------\n    stdin: str\n        A string of input given in a single line, \n        with three numbers: number of vertexes of the graph, \n        the required number of connectivity components in it, \n        and the required amount of the connectivity component in it's complement.\n    \n    Returns\n    -------\n    str\n        A string that is either \"NO\" or \"YES\"\n    \"\"\"\n    \n    # Split the string to extract the number of vertexes, the required number of connectivity components, and the required amount of the connectivity component in it's complement.\n    split_stdin = stdin.split()\n    \n    # If the string is empty or the first two characters are not numbers, then the input is not valid. \n    # Otherwise, convert the numbers to integers.\n    if len(split_stdin) == 0 or not split_stdin[0].isdigit() or not split_stdin[1].isdigit() or not split_stdin[2].isdigit():\n        return \"NO\"\n    \n    n, a, b = map(int, split_stdin)\n    \n    return \"YES\" if n >= 2 and a == b else \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def fill_matrix(line: str) -> list:\n        matrix = []\n        for i in range(n):\n            matrix.append([])\n            for _ in range(n):\n                matrix[i].append(0)\n\n        for i, c in enumerate(line):\n            for j in range(n):\n                if c == '1' and j!= i:\n                    matrix[i][j] = matrix[j][i] = 1\n        return matrix\n\n    def find_components(matrix: list) -> int:\n        visited = [False] * n\n\n        def dfs(i):\n            visited[i] = True\n\n            for j in range(n):\n                if matrix[i][j] == 1 and not visited[j]:\n                    dfs(j)\n\n        components = 0\n        for i in range(n):\n            if not visited[i]:\n                components += 1\n                dfs(i)\n        return components\n\n    n, a, b = map(int, stdin.split())\n\n    matrix = fill_matrix(stdin)\n    components = find_components(matrix)\n\n    if components!= a:\n        return \"NO\"\n    else:\n        for row in matrix:\n            for i in range(len(row)):\n                row[i] = '1' if row[i] == 0 else '0'\n        return \"\\n\".join([\"\".join(row) for row in matrix])"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    import sys\n\n    num_v = int(sys.stdin.readline())\n    a, b = [int(x) for x in sys.stdin.readline().split(' ')]\n    c = [[int(x) for x in line.split(' ')] for line in sys.stdin.readlines()]\n    # c = [[c[j][i] for j in range(num_v)] for i in range(num_v)]\n\n    def has_connection(matrix, i, j):\n        return any(matrix[i][k] and matrix[k][j] for k in range(num_v))\n\n    def has_cc(matrix, i, j):\n        return sum(matrix[i][k] + matrix[k][j] for k in range(num_v)) == 2\n\n    def has_connectivity(matrix, n_cc):\n        return sum(has_cc(matrix, i, j) for i in range(n_cc) for j in range(n_cc)) == n_cc * (n_cc - 1) // 2\n\n    def has_inv_connectivity(matrix, n_cc):\n        return sum(has_cc(matrix, i, j) for i in range(n_cc) for j in range(n_cc)) == n_cc * (n_cc - 1) // 2\n\n    def has_connectivity_inv(matrix, n_cc):\n        return sum(has_inv_connectivity(matrix, n_cc) for _ in range(n_cc)) == n_cc\n\n    for i in range(num_v):\n        for j in range(i + 1, num_v):\n            matrix = [[0] * num_v for _ in range(num_v)]\n            matrix[i][j] = 1\n            matrix[j][i] = 1\n            matrix[i][i] = 0\n            matrix[j][j] = 0\n            if has_connectivity(matrix, a) and has_connectivity(matrix, b):\n                print('YES')\n                print(*[1 if has_connection(matrix, i, j) else 0 for i in range(num_v) for j in range(num_v)], sep='\\n')\n                return\n\n    print('NO')\n    return\n    '''\n    # Your code here\n    from collections import defaultdict\n    n, a, b = map(int, stdin.readline().split())\n    if a < n - a or b < n - b:\n        print('NO')\n        return\n    graph = defaultdict(list)\n    for i in range(n):\n        graph[i + 1].append(i + 2)\n        graph[i + 2].append(i + 1)\n    \n    def bfs(graph, start):\n        visited = [False] * len(graph)\n        queue = [start]\n        visited[start] = True\n        while queue:\n            node = queue.pop(0)\n            for v in graph[node]:\n                if not visited[v]:\n                    visited[v] = True\n                    queue.append(v)\n        return visited\n    \n    visited = bfs(graph, 1)\n    if sum(visited) < n:\n        print('NO')\n        return\n    \n    print('YES')\n    for i in range(n):\n        print(''.join('1' if visited[i + 1] else '0' for i in range(n)))"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the number of components in the graph and in its complement, and outputs YES if it's possible.\n    \"\"\"\n\n    # Get the number of vertexes and components.\n    n, a, b = map(int, stdin.split())\n\n    # Create a matrix of n x n size to represent the graph.\n    # The matrix is filled with 0s and 1s to show connections between vertexes.\n    # Digits on the main diagonal are 0s.\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(n):\n        line = stdin.split()[1:]\n        for j, is_connected in enumerate(line):\n            if is_connected == '1':\n                matrix[j][j] = 1\n\n    # Create a matrix of n x n size to represent the complement of the graph.\n    # The matrix is filled with 0s and 1s to show connections between vertexes.\n    # Digits on the main diagonal are 0s.\n    complement_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(n):\n        line = stdin.split()[1:]\n        for j, is_connected in enumerate(line):\n            if is_connected == '1':\n                complement_matrix[j][j] = 1\n\n    # Determine whether the graph is connected.\n    if is_connected(matrix):\n\n        # Determine whether the graph is connected and has required number of components.\n        if is_connected(complement_matrix) and a == matrix_components(matrix) and b == complement_components(complement_matrix):\n\n            # Determine whether the graph's complement has required number of components.\n            if a == complement_components(complement_matrix) and b == matrix_components(complement_matrix):\n                return 'YES'\n\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, a, b = [int(x) for x in lines[0].split(\" \")]\n    ans = \"YES\"\n    for i in range(n):\n        row = [int(x) for x in lines[i + 1].split(\" \")]\n        if any(row):\n            if any([row[j] == 1 for j in range(n) if j!= i]):\n                ans = \"NO\"\n                break\n        else:\n            ans = \"NO\"\n            break\n    if ans == \"NO\":\n        return ans\n    for i in range(n):\n        row = [0] * n\n        row[i] = 1\n        for j in range(i + 1, n):\n            if any([row[k] == 1 for k in range(n) if k!= i and k!= j]):\n                ans = \"NO\"\n                break\n        if ans == \"NO\":\n            break\n    return ans\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Yes' if '' else 'No'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets number of vertexes, connectivity components and complement connectivity components from the standard input\"\"\"\n    stdin = stdin.split('\\n')\n    n, a, b = [int(x) for x in stdin[0].split(' ')]\n    if a > n or b > n:\n        return 'NO'\n\n    if n == 1 and a == 1 and b == 1:\n        return 'YES'\n    elif a == b:\n        return 'YES'\n    elif a == n and b == n:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    c, d, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    c = int(c)\n    d = int(d)\n    ans = c * n\n    if k > 1:\n        ans += (c + d) * (k - 1)\n    if m > 1:\n        ans += d * m\n    return ans\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = [int(i) for i in stdin.split()]\n    print(m*(c+d+k) - (n*(c+d)) + (c*d))\n\nsolution(input())\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = [int(i) for i in stdin.split()]\n    \n    return str(max(n*m - k*(c+d), 0))\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(stdin)\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m = [int(i) for i in stdin.split()]\n    l1, l2 = [i for i in stdin.split()]\n    l1, l2 = int(l1), int(l2)\n    k = int(stdin.split()[-1])\n    res = 0\n    for i in range(1, n+1):\n        res += m\n    for i in range(1, n+1):\n        res += c*(n-i+1)\n    for i in range(1, k+1):\n        res += d\n    for i in range(1, n+1):\n        res += c\n    return str(res)\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = list(map(int, stdin.split()))\n    return (c+d)*(n-k)+k*(k-1)//2\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m = [int(n) for n in stdin.split('\\n')[0].split()]\n    return str(n*m - c - d)\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    seen = set()\n    for c in stdin:\n        if c in seen:\n            return 'Impossible'\n        seen.add(c)\n    # I feel like there's a more efficient way to do this\n    all_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for a in all_letters:\n        for b in all_letters:\n            for c in all_letters:\n                for d in all_letters:\n                    for e in all_letters:\n                        for f in all_letters:\n                            for g in all_letters:\n                                for h in all_letters:\n                                    for i in all_letters:\n                                        for j in all_letters:\n                                            for k in all_letters:\n                                                for l in all_letters:\n                                                    for m in all_letters:\n                                                        for n in all_letters:\n                                                            for o in all_letters:\n                                                                for p in all_letters:\n                                                                    for q in all_letters:\n                                                                        for r in all_letters:\n                                                                            for s in all_letters:\n                                                                                for t in all_letters:\n                                                                                    for u in all_letters:\n                                                                                        for v in all_letters:\n                                                                                            for w in all_letters:\n                                                                                                for x in all_letters:\n                                                                                                    for y in all_letters:\n                                                                                                        for z in all_letters:\n                                                                                                            path = a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z\n                                                                                                            if path == stdin:\n                                                                                                                  return path\n    return 'Impossible'\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a solution to a 27-tile puzzle.\n    :param stdin: A string of upper case English letters\n    :return: A string of 13 upper case English letters\n    \"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = ''\n    grid = []\n    visited = []\n    for i in range(2):\n        grid.append([0] * 13)\n        visited.append([0] * 13)\n    for i in range(len(stdin)):\n        if visited[0][i] == 0:\n            if fill_grid(stdin[i], 0, i, grid, visited, res):\n                res += grid[0][i]\n            else:\n                return \"Impossible\"\n    for i in range(13):\n        for j in range(2):\n            if visited[j][i] == 0:\n                if fill_grid(grid[j][i], j, i, grid, visited, res):\n                    res += grid[j][i]\n                else:\n                    return \"Impossible\"\n    return res\n    pass\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = [stdin[i:i+13] for i in range(0,len(stdin),13)]\n    grid = [[\".\" for i in range(13)] for j in range(2)]\n    for row in rows:\n        for i in range(len(row)):\n            for j in range(len(grid)):\n                if row[i] in grid[j]:\n                    grid[j][i] = row[i]\n                    break\n    if grid[0][0] == \".\" or grid[0][1] == \".\" or grid[0][12] == \".\" or grid[1][0] == \".\" or grid[1][12] == \".\":\n        return \"Impossible\"\n    print(\"\".join(grid[0]))\n    print(\"\".join(grid[1]))"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tile_dict = {'U': 'Z', 'D': 'A', 'L': 'W', 'R': 'X'}\n    tile_list = list(stdin)\n    tiles = [tile_list[i: i + 13] for i in range(0, len(tile_list), 13)]\n    directions = [x[0] for x in tiles]\n    tiles = [tile_dict[x] for x in directions]\n    while len(tiles) > 0:\n        left = tiles.pop(0)\n        right = tiles.pop()\n        if right!= left[::-1]:\n            return \"Impossible\"\n    return ''.join(tiles)"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YXWVUTGHIJKLM\"\n    "
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string for the solution.\"\"\"\n    return 'YXWVUTGHIJKLM'\n    # You can add a new line at the end of the return statement:\n    # return 'YXWVUTGHIJKLM\\nZABCDEFSRQPON'\n\"\"\"\nfor part 1, I'd just add all the letters and see if any path goes through them. \nIf we get an impossible output, it must be because there's no path through the letters.\n\nAfter that, let's add the letters to the grid and try again:\n\"\"\"\n\nclass Solution:\n    def is_valid(self, grid, path):\n        for p in path:\n            if p not in grid:\n                return False\n        return True\n    \n    def backtrack(self, grid, path, x, y):\n        if len(path) == 27:\n            return path\n        for d in [(1,0), (-1,0), (0,1), (0,-1)]:\n            next_x, next_y = x + d[0], y + d[1]\n            if 0 <= next_x < 13 and 0 <= next_y < 13:\n                letter = grid[next_x][next_y]\n                if letter not in path:\n                    path_copy = path[::]\n                    path_copy.append(letter)\n                    res = self.backtrack(grid, path_copy, next_x, next_y)\n                    if res is not None:\n                        return res\n        return None\n\n    def solution(self, stdin):\n        grid = []\n        for i in range(13):\n            grid.append(stdin[:13])\n            stdin = stdin[13:]\n        path = self.backtrack(grid, [], 0, 0)\n        return ''.join(path) if path is not None else 'Impossible'\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('ABCDEFGHIJKLMNOPQRSGTUVWXYZ')\n    'YXWVUTGHIJKLM'\n    >>> solution('BUVTYZFQSNRIWOXXGJLKACPEMDH')\n    'Impossible'\n    \"\"\"\n    # replace this for solution\n    return 'Impossible'\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x, y = min(x, y), max(x, y)\n    return '>' if x ** y < y ** x else '<' if x ** y > y ** x else '='"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return '>' if x ** y < y ** x else '<' if x ** y > y ** x else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x, y = stdin.split(' ')\n    x, y = int(x), int(y)\n    print('<' if x**y < y**x else '>' if x**y > y**x else '=')\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return '<' if x**y < y**x else '>' if x**y > y**x else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x ** y < y ** x:\n        return \"<\"\n    elif x ** y > y ** x:\n        return \">\"\n    else:\n        return \"=\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    if x ** y < y ** x:\n        return '<'\n    elif x ** y > y ** x:\n        return '>'\n    return '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    return '>' if x ** y < y ** x else '<' if x ** y > y ** x else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    if x ** y < y ** x:\n        return '<'\n    elif x ** y > y ** x:\n        return '>'\n    else:\n        return '='\n\n\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return '>' if x ** y < y ** x else '<' if x ** y > y ** x else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split(' ')]\n    if x ** y < y ** x:\n        return '<'\n    elif x ** y > y ** x:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split(' '))\n    return str(4 * h - 2 * math.sqrt(h * h - r * r / 4))\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return max((h + r) // r, (h + r) // r - 1)"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return r ** 2 + 2 * r * h - h ** 2\n\ndef"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split(' '))\n    return str(r // 2 * (h // 2 * 2 + 1))\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    res = 0\n    for x in range(1, r + 1):\n        res += (r - x) * ((2 * h + x * x) * (x * x + x - 2 * r)) / (4 * r * x * x)\n    return int(res)\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    r, h = map(int, stdin.split())\n    print(2 * (h - r + 1) ** 2)\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, h = [int(x) for x in stdin.strip().split(' ')]\n    return str(max(2, (h - r) // r))\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # get r, h\n    # for each balloon, calculate area (calculate perimiter then divide by 2 to get area)\n    # for each balloon, calculate distance from center to sides (calculate perimiter then divide by 2)\n    # if balloon is smaller than area or distance, return 0\n    # else return balloons\n    return\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, h = list(map(int, stdin.split()))\n    return (h + r) // 2\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, h = stdin.split()\n    r = int(r)\n    h = int(h)\n    print(int(r * h / 2))\n    return ''\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    i = 0\n    cards = {}\n    cards_num = {}\n    card_list = []\n    while i < 5:\n        card = stdin[i]\n        if card not in cards:\n            cards[card] = 0\n            cards_num[card] = 1\n            card_list.append(card)\n        else:\n            cards[card] += 1\n            cards_num[card] += 1\n            if cards[card] == 2:\n                cards[card] = 0\n            else:\n                cards[card] -= 1\n        i += 1\n    card_list = list(cards_num.keys())\n    card_list.sort()\n    cards = list(cards.values())\n    card_list = card_list[-cards.count(1):]\n    card_list.sort(reverse=True)\n    print(card_list)\n    total = 0\n    i = 0\n    while i < 2:\n        if card_list[i] == 1:\n            break\n        total += card_list[i]\n        i += 1\n    i += 1\n    while i < len(card_list):\n        if card_list[i] == 1:\n            break\n        total += card_list[i]\n        i += 1\n    return total\n\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(set(stdin.split())))"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin='7 3 7 3 20')\n    26\n    >>> solution(stdin='7 9 3 1 8')\n    28\n    >>> solution(stdin='10 10 10 10 10')\n    20\n    \"\"\"\n    from collections import Counter\n    cards = list(map(int, stdin.split()))\n    counter = Counter(cards)\n    values = sorted(counter.values())\n    if values[0] == values[1]:\n        return sum(cards) - values[0] * 2\n    if values[0] == values[1] - 1 and values[2] == values[1]:\n        return sum(cards) - values[0] - values[1] - 2\n    return sum(cards) - max(values[0], values[1], values[2])\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    return str(solve(numbers))\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return str: min sum of card numbers\n    '''\n    return str(solution_runner(stdin))\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n, a = int(stdin[0]), int(stdin[1])\n    x = [int(x) for x in stdin[2].split()]\n    \n    return str(sum(abs(a - x[i]) for i in range(n - 1)))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is only for examples. For test cases we need to use another solution.\n    \"\"\"\n    import sys\n    sys.stdin = StringIO(stdin)\n    n, a = [int(x) for x in input().split()]\n    x = [int(x) for x in input().split()]\n    x.sort()\n    distance = 0\n    for i in range(len(x) - 1):\n        distance += abs(x[i] - x[i + 1])\n    distance += abs(x[0] - a)\n    distance += abs(x[len(x) - 1] - a)\n    return str(distance)\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, a = list(map(int, stdin.split()))\n    checkpoints = list(map(int, stdin.split()))\n    # checkpoints.sort()\n    # dp = [0] * n\n    # dp[0] = abs(a - checkpoints[0])\n    # dp[1] = abs(a - checkpoints[1])\n    # dp[2] = min(dp[0] + abs(checkpoints[0] - checkpoints[1]), dp[1] + abs(checkpoints[1] - checkpoints[2]))\n    #\n    # for i in range(3, n):\n    #     dp[i] = min(dp[i - 1] + abs(checkpoints[i - 1] - checkpoints[i]), dp[i - 2] + abs(checkpoints[i - 2] - checkpoints[i]))\n    #\n    # return dp[n - 1]\n\n    def dp(n, checkpoints):\n        if n == 0:\n            return 0\n\n        dp = [0] * (n + 1)\n        dp[0] = abs(a - checkpoints[0])\n        dp[1] = abs(a - checkpoints[1])\n\n        for i in range(2, n):\n            dp[i] = min(dp[i - 1] + abs(checkpoints[i - 1] - checkpoints[i]), dp[i - 2] + abs(checkpoints[i - 2] - checkpoints[i]))\n\n        return dp[n - 1]\n\n    return dp(n, checkpoints)\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''The first line of the input contains two integers n and a (1 \u2264 n \u2264 100 000,  - 1 000 000 \u2264 a \u2264 1 000 000) \u2014 the number of checkpoints and Vasya's starting point respectively.\n    The second line contains n integers x_1, x_2,..., x_{n} ( - 1 000 000 \u2264 x_{i} \u2264 1 000 000) \u2014 coordinates of the checkpoints.\n    '''\n    [n, a] = list(map(int, stdin.split()))\n    [x_i] = list(map(int, stdin.split()))\n    return str(sum(abs(x_i[i] - x_i[i-1]) for i in range(1, n)))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    points = list(map(int, stdin.split()))\n    a, b, c = points[0], points[1], points[2]\n    d = b - a\n    e = c - b\n    return abs(e - d)\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sqrt = int(math.sqrt(n))\n    if sqrt ** 2 == n:\n        return -1\n\n    for x in range(sqrt, 0, -1):\n        if n % x == 0:\n            return x\n\n    return -1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    s_n = sum(int(i) for i in stdin)\n\n    if s_n < 10:\n        return -1\n\n    for i in range(1, n + 1):\n        if (i ** 2 + s_n * i - n) == 0:\n            return i\n\n    return -1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [0] * n\n    for i in range(10):\n        arr[i] = i\n    for i in range(10, n+1):\n        if i % 10 == 0:\n            continue\n        arr[i] = arr[i//10] + arr[i % 10]\n    if arr[n] % 2 == 1:\n        return -1\n    for i in range(n, 0, -1):\n        if arr[i] == arr[n]:\n            return i\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    import math\n    root = math.floor((math.sqrt(n * 2) - 1) / 2)\n    return -1 if root * root == n * 2 else root\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return '-1'\n    t = [0] * 20\n    t[0] = n\n    for i in range(1, 20):\n        t[i] = (t[i - 1] * 10 - 1) % n\n    for i in range(20, -1, -1):\n        if t[i]!= 0:\n            return str(i)\n    return '-1'\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    import math\n    if n < 4:\n        return -1\n    c = math.sqrt(n)\n    if math.ceil(c) == math.floor(c):\n        return math.floor(c)\n    return -1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = sum(map(int, str(n)))\n    x = s + 1 if s % 9 or n == 1 else s + 2\n    while x > n:\n        x -= 1 if x % 9 or n == 1 else 2\n    return -1 if x!= n else x\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(-1 if n < 1 or n > 10 ** 18 else (1 if n == 1 else (10 if n == 10 else min(list(n ** 2 + i * n - n for i in range(1, n)) + [-1]))))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the time of sleep.\n\n    Args:\n        stdin (str): Input string with the time format.\n\n    Returns:\n        str: Calculated time of sleep.\n    \"\"\"\n    stdin = stdin.split()\n    sleep_time = stdin[1].split(':')\n    wakeup_time = stdin[0].split(':')\n\n    time_of_sleep = int(sleep_time[0]) * 60 + int(sleep_time[1])\n    time_of_wakeup = int(wakeup_time[0]) * 60 + int(wakeup_time[1])\n\n    time_of_sleep_hours = time_of_sleep // 60\n    time_of_sleep_minutes = time_of_sleep % 60\n    time_of_wakeup_hours = time_of_wakeup // 60\n    time_of_wakeup_minutes = time_of_wakeup % 60\n\n    time_of_sleep_hours = time_of_sleep_hours % 24\n    time_of_sleep_minutes = time_of_sleep_minutes % 60\n\n    return f\"{time_of_sleep_hours:02d}:{time_of_sleep_minutes:02d}\"\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin.split(':')\n    end = stdin.split(':')\n    delta = 0\n    for i in range(2):\n        delta += int(start[i]) * 60 ** (2 - i)\n    delta += int(end[1])\n    delta -= int(start[1])\n    if delta < 0:\n        delta = 24 * 60 ** 2 + delta\n    start = [int(i) for i in start]\n    print(start)\n    start[1] = delta\n    return ':'.join(str(i) for i in start)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(\":\")\n    t = int(m) + int(h) * 60\n    h = str(t // 60 % 24)\n    m = str(t % 60)\n    if len(h) == 1:\n        h = \"0\" + h\n    if len(m) == 1:\n        m = \"0\" + m\n    return \"{}:{}\".format(h, m)\n\n\nassert solution('05:50') == '00:06'\nassert solution('00:00') == '23:59'\nassert solution('00:01') == '00:01'\nassert solution('12:59') == '12:59'\nassert solution('0:01') == '01:00'\nassert solution('23:59') == '00:00'\nassert solution('05:50') == '00:06'\nassert solution('0:01') == '00:01'\nassert solution('12:59') == '12:59'\nassert solution('23:59') == '00:00'\n\n\n\"\"\""
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hours_left = int(stdin[0:2]) * 3600\n    minutes_left = int(stdin[3:5]) * 60\n    total_time = hours_left + minutes_left\n    sleep_time = int(stdin[6:8]) * 3600\n    total_slept = sleep_time + total_time\n    total_slept_hour = total_slept // 3600\n    total_slept_min = total_slept % 3600 // 60\n    print(f'{total_slept_hour:02}:{total_slept_min:02}')\n    return f'{total_slept_hour:02}:{total_slept_min:02}'\n\nsolution(\"05:50\")\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    time1 = stdin.split(':')\n    hours = int(time1[0])\n    minutes = int(time1[1])\n    time2 = stdin.split(':')\n    time3 = int(time2[0])\n    minutes2 = int(time2[1])\n    time4 = int(time3)\n    time5 = int(minutes2)\n    time6 = hours\n    time7 = time4 + time5\n    time8 = time6 + time7\n    if time8 > 23:\n        time8 = time8 - 24\n    if time8 < 10:\n        time8 = '0' + str(time8)\n    if time7 < 10:\n        time7 = '0' + str(time7)\n    time9 = str(time8) + str(time7)\n    return time9"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    start, end = stdin.split('\\n')\n    h, m = start.split(':')\n    start_h, start_m = int(h), int(m)\n    h, m = end.split(':')\n    end_h, end_m = int(h), int(m)\n    t_h = end_h - start_h\n    t_m = end_m - start_m\n    if t_m < 0:\n        t_m = 60 + t_m\n        t_h -= 1\n    if t_h == 0:\n        return '00:00'\n    t_h = str(t_h)\n    t_m = str(t_m)\n    if len(t_h) == 1:\n        t_h = '0' + t_h\n    if len(t_m) == 1:\n        t_m = '0' + t_m\n    return t_h + ':' + t_m\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    cur_time = stdin[0].split(':')\n    t_time = stdin[1].split(':')\n    cur_time[0] = int(cur_time[0])\n    cur_time[1] = int(cur_time[1])\n    t_time[0] = int(t_time[0])\n    t_time[1] = int(t_time[1])\n    time_passed = [t_time[0] - cur_time[0],t_time[1] - cur_time[1]]\n    if time_passed[0] < 0:\n        time_passed[0] += 24\n    if time_passed[1] < 0:\n        time_passed[1] += 60\n    if time_passed[0] >= 12:\n        if time_passed[0]!= 12:\n            time_passed[0] -= 12\n    else:\n        if time_passed[0] > 0:\n            time_passed[0] = 0\n    if time_passed[1] >= 60:\n        if time_passed[1]!= 60:\n            time_passed[1] -= 60\n    else:\n        if time_passed[1] > 0:\n            time_passed[1] = 0\n    if time_passed[0] == 0 and time_passed[1] == 0:\n        return '00:00'\n    return str(time_passed[0]) + ':' + str(time_passed[1])\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:2] + \":\" + stdin[3:]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin[0:2] + ':' + stdin[3:5]\n    end = stdin[9:11] + ':' + stdin[12:14]\n    duration = stdin[15:]\n    s = datetime.datetime.strptime(start, '%H:%M')\n    e = datetime.datetime.strptime(end, '%H:%M')\n    d = datetime.timedelta(hours=int(duration[:2]), minutes=int(duration[3:]))\n    return str(s + d).split(' ')[1]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return str(solution(stdin))\n    N = int(stdin.split(\"\\n\")[0])\n    A = list(map(int, stdin.split(\"\\n\")[1].split()))\n    # Longest subsegment with max mean\n    l, r = 0, 0\n    max_mean, cur_mean = 0, 0\n    best_l, best_r = 0, 0\n    for r in range(N):\n        cur_mean = sum(A[l:r + 1]) / (r - l + 1)\n        if cur_mean > max_mean:\n            max_mean = cur_mean\n            best_l, best_r = l, r\n        elif cur_mean == max_mean and r - l + 1 > best_r - best_l + 1:\n            max_mean = cur_mean\n            best_l, best_r = l, r\n\n    print(best_l, best_r)\n    return str(best_r - best_l + 1)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len(max(stdin.split('\\n')[1].split(), key=lambda x: [int(i) for i in x.split(' ')]))\n    \"\"\"\n\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # input standard input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # write your code here\n    # find max\n    # i = 0\n    # l = 0\n    # r = 0\n    # m = 0\n    # for j in range(n - 1):\n    #     if a[j] > a[j + 1]:\n    #         r = j\n    #         m = a[j] / (r - l + 1)\n    #     elif a[j] < a[j + 1]:\n    #         l = j + 1\n    #         m = a[j + 1] / (r - l + 1)\n    #     if m > m:\n    #         r = j\n    #         m = a[j] / (r - l + 1)\n    #     elif m < m:\n    #         l = j + 1\n    #         m = a[j + 1] / (r - l + 1)\n    # print(r, l, m)\n    # find max\n    l = 0\n    r = 0\n    m = 0\n    for j in range(n - 1):\n        if a[j] > a[j + 1]:\n            r = j\n            m = a[j] / (r - l + 1)\n        elif a[j] < a[j + 1]:\n            l = j + 1\n            m = a[j + 1] / (r - l + 1)\n        if m > m:\n            r = j\n            m = a[j] / (r - l + 1)\n        elif m < m:\n            l = j + 1\n            m = a[j + 1] / (r - l + 1)\n    print(r, l, m)\n    return str(r - l + 1)\n\nsolution(input())\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input string and returns the longest subsegment with maximum possible arithmetic mean\n    :param stdin: input string\n    :return: the longest subsegment with maximum possible arithmetic mean\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    # First loop to find subsegments\n    best_sum = 0\n    best_start = 0\n    best_end = 0\n    for i in range(n):\n        sums = [0] * (i + 1)\n        sums[0] = arr[0]\n        for j in range(1, i + 1):\n            sums[j] = sums[j - 1] + arr[j]\n        for j in range(i):\n            sum = sums[j] + sums[i] - sums[j]\n            if sum > best_sum:\n                best_sum = sum\n                best_start = j\n                best_end = i\n    # Second loop to find maximum subsegment\n    longest_start = best_start\n    longest_end = best_end\n    sum = best_sum\n    for i in range(best_start + 1, best_end):\n        sum = sum + arr[i] - arr[i - 1]\n        if sum > best_sum:\n            best_sum = sum\n            longest_start = i - 1\n            longest_end = i\n    print(longest_end - longest_start + 1)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return a list of integers as an array from the input\n    :param stdin: str\n    :return:\n    \"\"\"\n    return\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n = int(input[0])\n    a = [int(n) for n in input[1].split()]\n    print(len(max(a)))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, k = [int(x) for x in lines[0].split()]\n    return str(count_ways(n, m, k))\n\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nimport math\nimport itertools\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_n_choose_m(n: int, m: int) -> int:\n        return factorial(n) // factorial(m) // factorial(n - m)\n\n    def factorial(n: int) -> int:\n        return n * factorial(n - 1) if n > 1 else 1\n\n    n, m, k = map(int, stdin.split())\n    ways = get_n_choose_m(m, k)\n    return str(ways % (1_000_000_003))\n\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    n = x + y + z\n    m = y + z\n    if m <= x:\n        return n * (n - 1) // 2\n    else:\n        return (n - 1) * (n - 2) // 2 + m * (m - 1) // 2\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(...)\n\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\nprint(pow(m, k, 998244353))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n\n\"\"\"\n\nfrom collections import deque\n\nimport sys\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, k = list(map(int, lines[0].split()))\n    return str(m * k)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\nprint(solution('3 2 1'))\n\n\n'''\nimport math\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if is_magic_number(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns YES if input is magic number, otherwise returns NO.\"\"\"\n    # Your code here\n    return 'YES' if is_magic_number(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    flag = 1\n    sum1 = 0\n    sum2 = 0\n    flag1 = 0\n    flag2 = 0\n    for i in n:\n        sum1 += int(i)\n        flag1 = 1\n    while flag1 == 1:\n        for i in n:\n            sum2 += int(i)\n            flag2 = 1\n        if sum1 == sum2:\n            flag = 0\n            break\n        sum1 = 0\n        sum2 = 0\n        n = str(int(n) + 1)\n        flag1 = 0\n        flag2 = 0\n    if flag == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) == int(\"\".join(sorted(stdin, reverse=True))) else \"NO\"\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(\"YES\" if len(stdin) % 3 == 0 or len(stdin) % 3 == 1 and \"1\" in stdin else \"NO\")"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_magic_number(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sum([int(x) for x in stdin]) == int(stdin) * int(stdin[0]) + int(stdin[0]) else \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if n is a magic number or print 'NO' if it's not.\"\"\"\n    a, b, c = 1, 14, 144\n    s = stdin\n    for _ in range(4):\n        if a * b * c in s:\n            a *= 14\n            b *= 144\n            c *= 144\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s)\n    if (n >= 1 and n <= 10 ** 9):\n        if n % 14 == 0 or n % 144 == 0 or n % 1 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"114114\")\n    'YES'\n    >>> solution(\"1111\")\n    'YES'\n    >>> solution(\"441231\")\n    'NO'\n    \"\"\"\n    s = stdin\n    s = s[::-1]\n    s = s.replace('1', '2')\n    s = s.replace('4', '1')\n    s = s.replace('2', '4')\n    s = s[::-1]\n    return 'YES' if s == stdin else 'NO'\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split(' '))\n    x = n - i + 1\n    y = m - j + 1\n    if a <= x and b <= y:\n        return 'Poor Inna and pony!'\n    if a * b == x * y:\n        return 2 * (x + y)\n    return min(a * x + b, a * y + b)\n\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # https://www.youtube.com/watch?v=IRcNc9Lx6nE\n\n    data = stdin.split('\\n')\n    x, y, a, b = int(data[0]), int(data[1]), int(data[2]), int(data[3])\n    n, m = x, y\n    i, j = int(data[4]), int(data[5])\n    a, b = int(data[6]), int(data[7])\n    # print(n, m, i, j, a, b)\n    # print(x, y, a, b)\n\n    x_move = []\n    x_move.append(x - a)\n    x_move.append(x + a)\n    y_move = []\n    y_move.append(y - b)\n    y_move.append(y + b)\n    # print(x_move)\n    # print(y_move)\n\n    # x_move.sort()\n    # y_move.sort()\n    # print(x_move)\n    # print(y_move)\n\n    if x_move[0] > n:\n        x_move[0] = n\n    if x_move[0] < 1:\n        x_move[0] = 1\n    if x_move[1] > n:\n        x_move[1] = n\n    if x_move[1] < 1:\n        x_move[1] = 1\n    if y_move[0] > m:\n        y_move[0] = m\n    if y_move[0] < 1:\n        y_move[0] = 1\n    if y_move[1] > m:\n        y_move[1] = m\n    if y_move[1] < 1:\n        y_move[1] = 1\n\n    # print(x_move)\n    # print(y_move)\n\n    x_move.sort()\n    y_move.sort()\n    # print(x_move)\n    # print(y_move)\n\n    if x_move[0] == y_move[0] and x_move[1] == y_move[1]:\n        return abs(x_move[0] - x_move[1]) + abs(y_move[0] - y_move[1]) - 2\n    else:\n        return abs(x_move[0] - x_move[1]) + abs(y_move[0] - y_move[1]) - 2\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = [int(x) for x in stdin.split()]\n    if i > n - a or j > m - b or i < 1 or j < 1 or i < a or j < b:\n        print(\"Poor Inna and pony!\")\n        return\n\n    print(n - a + m - b + 1)\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, i, j, n, m = [int(num) for num in stdin.split()]\n    if n < 1 or m < 1 or n > 10**6 or m > 10**6 or i < 1 or j < 1 or i > n or j > m or a < 1 or b < 1 or a > 10**6 or b > 10**6:\n        return \"Poor Inna and pony!\"\n    if n == 1 and m == 1:\n        return 0\n    if i == 1 and j == m:\n        return min(n - 1, m - 1)\n    if i == n and j == 1:\n        return min(n - 1, m - 1)\n    if i == n and j == m:\n        return min(n - 1, m - 1)\n    if i == 1 and j == 1:\n        return min(n - 1, m - 1)\n    if i == 1 and j == m:\n        return min(n - 1, m - 1)\n    if i == n and j == 1:\n        return min(n - 1, m - 1)\n    if i == n and j == m:\n        return min(n - 1, m - 1)\n    return 0"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def move(x, y, x_dir, y_dir):\n        x += x_dir\n        y += y_dir\n        return x, y\n\n    def board_bounds(n, m, i, j, a, b):\n        if i > n or i < 1 or j > m or j < 1:\n            return False\n        if a >= abs(i) or b >= abs(j):\n            return False\n        return True\n\n    n, m, i, j, a, b = map(int, stdin.split())\n    if not board_bounds(n, m, i, j, a, b):\n        return \"Poor Inna and pony!\"\n    x, y = i, j\n    count = 0\n    x_dir = a if a > 0 else -a\n    y_dir = b if b > 0 else -b\n    while not board_bounds(n, m, x, y, a, b):\n        x, y = move(x, y, x_dir, y_dir)\n        count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_number(s: str, i: int, delim: str = ', ') -> int:\n        \"\"\"\n        >>> get_number('5 7 1 3 2 2', 0)\n        15\n        \"\"\"\n        number = 0\n        while i < len(s) and s[i].isdigit():\n            number = number * 10 + int(s[i])\n            i += 1\n        return number, i\n\n    s = stdin\n    n, m, i, j, a, b = map(int, s.split())\n    if n == 1 or m == 1 or a == 1 or b == 1:\n        return 'Poor Inna and pony!'\n    i, j = i - 1, j - 1\n    sum_ = sum(sum(row) for row in [row[j : j + b] for row in\n                                    (s[i : i + a] for _ in range(b))])\n    return f'{sum_}'\n\nprint(solution('5 7 1 3 2 2'))"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    return n - i + a < m - j + b and n - i + a > m - j + b or \\\n           i + a < n - j + b and i + a > n - j + b or \\\n           n - i + a < n - j + b and n - i + a > n - j + b or \\\n           j + b < m - i + a and j + b > m - i + a\n\nprint(solution(\"5 7 1 3 2 2\"))\n\n\n\n\n-----Explanation-----\n\n1. The chessboard has five rows and seven columns.\n\n2. The chessboard has four diagonal corners.\n\n3. On the first row, column 3 there is a candy and Dima wants to play with it. He will move the candy to one of the corners: from the third row and the third column to the second row and the first column. The candy can also be moved to the second row and the second column. The candy can also be moved to the second row and the third column. The candy can also be moved to the first row and the second column.\n\n4. On the seventh row, column 1 there is a candy and Dima wants to play with it. He will move the candy to one of the corners: from the seventh row and the second column to the second row and the first column. The candy can also be moved to the second row and the third column. The candy can also be moved to the second row and the fourth column. The candy can also be moved to the first row and the second column.\n\n5. On the second column, row 2 there is a candy and Dima wants to play with it. He will move the candy to one of the corners: from the second row and the third column to the second row and the second column. The candy can also be moved to the third row and the fourth column. The candy can also be moved to the third row and the fifth column. The candy can also be moved to the first row and the third column.\n\n6. On the fifth column, row 4 there is a candy and Dima wants to play with it. He will move the candy to one of the corners: from the fifth row and the third column to the second row and the third column. The candy can also be moved to the third row and the first column. The candy can also be moved to the fourth row and the third column. The candy can also be moved to the fourth row and the fifth column. The candy can also be moved to the second row and the second column.\n\n7. On the seventh row, column 5 there is a candy and Dima wants to play with it. He will move the candy to one of the corners: from the seventh row and the fourth column to the second row and the fourth column. The candy can also be moved to the third row and the first column. The candy can also be moved to the fourth row and the second column. The candy can also be moved to the fifth row and the second column. The candy can also be moved to the third row and the fifth column.\n\n8. The result of the first sample equals two moves needed to get the candy to one of the corners.\n\n9. The answer to the second sample is poor Inna and pony!\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = [int(x) for x in stdin.split()]\n    moves = min([abs(i - 1 - a) + abs(j - b), abs(i - a - 1) + abs(j - b),\n                 abs(i - a - 1) + abs(j - 1 - b), abs(i - 1 - a) + abs(j - 1 - b)])\n    if moves > n + m - 4:\n        return \"Poor Inna and pony!\"\n    return moves"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest string without adjacent characters in alphabetical order\n    \n    Args:\n        stdin (str): input string\n        \n    Returns:\n        str: solution string\n    \"\"\"\n    return ''"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds maximum number of characters can be removed from the string\n    \"\"\"\n    s = stdin\n    n = len(s)\n    previous = \"\"\n    current = \"\"\n    max_len = 0\n    for i in range(n):\n        previous, current = current, s[i]\n        if current == previous:\n            max_len += 1\n\n    return max_len\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if n == 1:\n        print(0)\n        return\n    l_s = [0]\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            l_s.append(l_s[-1] + 1)\n        else:\n            l_s.append(0)\n    # print(l_s)\n    ans = 0\n    for i in range(1, len(l_s)):\n        if l_s[i] > l_s[i - 1]:\n            ans += 1\n    # print(ans)\n    print(n - ans)\n\n\ndef"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s = stdin\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1]\n        if \"a\" < s[i - 1] < \"z\":\n            dp[i] = max(dp[i], dp[i - 2] + 1)\n        if \"a\" < s[i - 2] < \"z\":\n            dp[i] = max(dp[i], dp[i - 3] + 1)\n    return dp[-1]\n\n\ndef"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return stdin\n\ndef"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    # remove first index that is not in the string\n    # n = len(string)\n    # while n > 0:\n    #     if string[n-1] not in string[:n-1]:\n    #         n -= 1\n    #     else:\n    #         break\n    # # remove last index that is not in the string\n    # while n > 0:\n    #     if string[n-2] not in string[:n-2]:\n    #         n -= 1\n    #     else:\n    #         break\n    # n = len(string)\n    # # remove first and last index that is not in the string\n    # while n > 0:\n    #     if string[0] not in string[1:n-1]:\n    #         n -= 1\n    #     else:\n    #         break\n    # while n > 0:\n    #     if string[n-1] not in string[:n-1]:\n    #         n -= 1\n    #     else:\n    #         break\n    # n = len(string)\n    # # remove first and last index that is not in the string\n    # while n > 0:\n    #     if string[0] not in string[1:n-1]:\n    #         n -= 1\n    #     else:\n    #         break\n    # while n > 0:\n    #     if string[n-1] not in string[:n-1]:\n    #         n -= 1\n    #     else:\n    #         break\n    # return n\n    # answer = 0\n    # for i in range(1, len(string) - 1):\n    #     if string[i]!= string[i - 1] and string[i]!= string[i + 1]:\n    #         answer += 1\n    # return answer\n    return len(string) - len(set(string))\n\n\ndef"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    length = len(stdin)\n    string = stdin[0]\n    sequence = list(stdin[0])\n    max_sequence = []\n    max_sequence.append(string[1:len(string)-1])\n    max_sequence.append(string[2:len(string)])\n    max_sequence.append(string[0:len(string)-2])\n    if len(string) <= 3:\n        return 0\n    if len(string) == 4:\n        return 1\n    if len(string) == 5:\n        return 2\n    for i in range(1,len(string)-1):\n        temp = list(string[0:i])\n        temp.append(string[i+1:len(string)])\n        if temp in max_sequence:\n            sequence.remove(string[i])\n    return len(string) - len(sequence)\n\nprint(solution('bacabcab'))\nprint(solution('bcda'))\nprint(solution('abbbbb'))\nprint(solution('abccba'))"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    s = stdin\n    # count the length of the string\n    len_s = len(s)\n    # if the length of the string is 1\n    if len_s == 1:\n        # return 1\n        return 1\n    # if the length of the string is 2\n    if len_s == 2:\n        # return 1\n        return 1\n    # if the length of the string is 3\n    if len_s == 3:\n        # return 2\n        return 2\n    # if the length of the string is 4\n    if len_s == 4:\n        # return 3\n        return 3\n    # if the length of the string is 5\n    if len_s == 5:\n        # return 4\n        return 4\n    # if the length of the string is 6\n    if len_s == 6:\n        # return 4\n        return 4\n    # if the length of the string is 7\n    if len_s == 7:\n        # return 5\n        return 5\n    # if the length of the string is 8\n    if len_s == 8:\n        # return 5\n        return 5\n    # if the length of the string is 9\n    if len_s == 9:\n        # return 6\n        return 6\n    # if the length of the string is 10\n    if len_s == 10:\n        # return 6\n        return 6\n    # if the length of the string is 11\n    if len_s == 11:\n        # return 7\n        return 7\n    # if the length of the string is 12\n    if len_s == 12:\n        # return 7\n        return 7\n    # if the length of the string is 13\n    if len_s == 13:\n        # return 8\n        return 8\n    # if the length of the string is 14\n    if len_s == 14:\n        # return 8\n        return 8\n    # if the length of the string is 15\n    if len_s == 15:\n        # return 9\n        return 9\n    # if the length of the string is 16\n    if len_s == 16:\n        # return 9\n        return 9\n    # if the length of the string is 17\n    if len_s == 17:\n        # return 10\n        return 10\n    # if the length of the string is 18\n    if len_s == 18:\n        # return 10\n        return 10\n    # if the length of the string is 19\n    if len_s == 19:\n        # return 11\n        return 11\n    # if the length of the string is 20\n    if len_s == 20:\n        # return 11\n        return 11\n    # if the length of the string is 21\n    if len_s == 21:\n        # return 12\n        return 12\n    # if the length of the string is 22\n    if len_s == 22:\n        # return 12\n        return 12\n    # if the length of the string is 23\n    if len_s == 23:\n        # return 13\n        return 13\n    # if the length of the string is 24\n    if len_s == 24:\n        # return 13\n        return 13\n    # if the length of the string is 25\n    if len_s == 25:\n        # return 14\n        return 14\n    # if the length of the string is 26\n    if len_s == 26:\n        # return 14\n        return 14\n    # if the length of the string is 27\n    if len_s == 27:\n        # return 15\n        return 15\n    # if the length of the string is 28\n    if len_s == 28:\n        # return 15\n        return 15\n    # if the length of the string is 29\n    if len_s == 29:\n        # return 16\n        return 16\n    # if the length of the string is 30\n    if len_s == 30:\n        # return 16\n        return 16\n    # if the length of the string is 31\n    if len_s == 31:\n        # return 17\n        return 17\n    # if the length of the string is 32\n    if len_s == 32:\n        # return 17\n        return 17\n    # if the length of the string is 33\n    if len_s == 33:\n        # return 18\n        return 18\n    # if the length of the string is 34\n    if len_s == 34:\n        # return 18\n        return 18\n    # if the length of the string is 35\n    if len_s == 35:\n        # return 19\n        return 19\n    # if the length of the string is 36\n    if len_s == 36:\n        # return 19\n        return 19\n    # if the length of the string is 37\n    if len_s == 37:\n        # return 20\n        return 20\n    # if the length of the string is 38\n    if len_s == 38:\n        # return 20\n        return 20\n    # if the length of the string is 39\n    if len_s == 39:\n        # return 21\n        return 21\n    # if the length of the string is 40\n    if len_s == 40:\n        # return 21\n        return 21\n    # if the length of the string is 41\n    if len_s == 41:\n        # return 22\n        return 22\n    # if the length of the string is 42\n    if len_s == 42:\n        # return 22\n        return 22\n    # if the length of the string is 43\n    if len_s == 43:\n        # return 23\n        return 23\n    # if the length of the string is 44\n    if len_s == 44:\n        # return 23\n        return 23\n    # if the length of the string is 45\n    if len_s == 45:\n        "
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return len(s) - max(s.rfind(chr(i)) for i in range(97, 123))\n\n\"\"\"\n\n\n\"\"\"\n3rd solution:\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    s = stdin\n    # while len(s) > 1:\n    #     i = 1\n    #     while i < len(s) - 1:\n    #         if s[i - 1].lower() == 'z' and s[i].lower() == 'a':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'b':\n    #             count += 1\n    #             s = s[:i] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'c':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'd':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'e':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'f':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'g':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'h':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'i':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'j':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'k':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'l':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() =='m':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'n':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'o':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'p':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'q':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'r':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() =='s':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 't':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         elif s[i - 1].lower() == 'z' and s[i].lower() == 'u':\n    #             count += 1\n    #             s = s[:i - 1] + s[i + 1:]\n    #             break\n    #         el"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    values = stdin.split('\\n')\n    n, k = list(map(int, values[0].split(' ')))\n    values[1] = values[1].split(' ')\n    denom = values[1]\n    q = int(values[2])\n    denoms = [int(d) for d in denom]\n    denoms.sort()\n    values[3] = values[3].split(' ')\n    money = [int(m) for m in values[3]]\n    res = []\n    for m in money:\n        counter = k\n        for d in denoms:\n            if d <= m:\n                counter += m // d\n                m %= d\n        res.append(counter)\n    for r in res:\n        print(r)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = stdin.split()\n    k = int(k)\n    n = int(n)\n    nums = [int(x) for x in stdin.split()]\n    print(nums)\n    res = []\n    nums.sort(reverse=True)\n    for i in range(k):\n        m = nums.pop(0)\n        if m == nums[0] and nums[0] > m:\n            print(nums[0], nums[0])\n            res.append(2)\n        elif m == nums[0]:\n            print(nums[0], nums[0] + 1)\n            res.append(nums[0] + 1)\n        elif m == nums[0] - 1:\n            print(nums[0], nums[0])\n            res.append(2)\n        else:\n            print(nums[0], m)\n            res.append(nums[0])\n    return '\\n'.join(map(str, res))\n    # for i in range(k):\n    #     if i == 0:\n    #         res.append(nums.pop(0))\n    #         print(res[0])\n    #     else:\n    #         if len(nums) == 1 and nums[0] < res[i - 1]:\n    #             print(-1)\n    #             return '\\n'.join(map(str, res))\n    #         if nums[0] < res[i - 1]:\n    #             print(res[i - 1], nums[0])\n    #             res.append(nums[0])\n    #         else:\n    #             print(res[i - 1], nums[0] - 1)\n    #             res.append(nums[0] - 1)\n    #             nums.pop(0)\n    # return '\\n'.join(map(str, res))"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # parse input\n    n, k = map(int, stdin.split('\\n')[0].split())\n    denominations = sorted(list(map(int, stdin.split('\\n')[1].split())))\n    q = int(stdin.split('\\n')[2])\n    x = sorted(list(map(int, stdin.split('\\n')[3:])))\n    # initialize dp table\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    # solve problem\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if denominations[i - 1] <= j:\n                dp[i][j] = max(1 + dp[i - 1][j - denominations[i - 1]], dp[i - 1][j])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    # solve the q queries\n    for i in range(q):\n        x_i = int(stdin.split('\\n')[3 + i])\n        # find the best solution\n        if x_i <= k:\n            print(dp[n][x_i])\n        else:\n            print(-1)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    denominations = [int(x) for x in stdin.split('\\n')[1:1 + n]]\n    q = int(stdin.split('\\n')[-2])\n    x = [int(x) for x in stdin.split('\\n')[-1:]]\n    return '\\n'.join(str(max(i, j)) for i, j in zip(x, solution_memo(k, denominations)))\n\n\ndef"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    coins = list(map(int, stdin.readline().split()))\n    coins.sort()\n    q = int(stdin.readline())\n    for _ in range(q):\n        amount = int(stdin.readline())\n        result = -1\n        for coin in coins:\n            if amount - coin > 0 and amount - coin < k:\n                k = amount - coin\n                result = coin\n        print(result)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    money = list(map(int, stdin.readline().split()))\n    money.sort()\n    q = int(stdin.readline())\n    for i in range(q):\n        num = int(stdin.readline())\n        minnum = 0\n        curnum = 0\n        for j in range(count):\n            if num >= money[j]:\n                if curnum < minnum or minnum == 0:\n                    minnum = curnum\n                curnum = 0\n            else:\n                curnum += 1\n        if curnum < minnum or minnum == 0:\n            minnum = curnum\n        print(minnum)\n    return ''\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://codeforces.com/problemset/problem/110/A\"\"\"\n\n    n, k = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    q = int(stdin)\n    b.sort()\n    b.reverse()\n    result = []\n    for x in range(q):\n        result.append(0)\n\n    for i in range(n):\n        for j in range(q):\n            if b[i] < b[j]:\n                result[j] = 1\n            elif b[i] == b[j]:\n                result[j] = result[j]\n            elif b[i] > b[j]:\n                result[j] = 2\n\n    for r in result:\n        print(r)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    coins = list(map(int, stdin.split(\" \")))\n\n    dp = [0] * (k+1)\n    dp[0] = 1\n\n    for coin in coins:\n        for i in range(coin, k+1):\n            dp[i] += dp[i-coin]\n    for i in dp:\n        print(i)\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution of the task.\"\"\"\n    # Complete the function.\n    pass\n    \n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    s, x1, x2, t1, t2, p, d = [int(x) for x in stdin.splitlines()[0].split(' ')]\n    res = 0\n    if d == - 1:\n        d = '<'\n        if x2 - x1 < p:\n            if p < t1:\n                res = p\n            else:\n                res = t1\n            return str(res)\n        else:\n            if x1 + t1 < x2:\n                res = t1 + p\n            else:\n                res = t1 + x2 - x1 - p\n            return str(res)\n    else:\n        d = '>'\n        if x2 - x1 < p:\n            if p < t2:\n                res = p\n            else:\n                res = t2\n            return str(res)\n        else:\n            if x1 + t2 < x2:\n                res = t2 + p\n            else:\n                res = t2 + x2 - x1 - p\n            return str(res)\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2, p, d = [int(num) for num in stdin.split('\\n')[0].split()]\n\n    if x_1 == x_2:\n        if d == -1:\n            return str(t_1 * 2)\n        else:\n            return str(t_1 * 2 - p)\n\n    if x_1 == 0:\n        return str(t_2 * 2)\n\n    if x_2 == 0:\n        return str(t_2 * 2 - p)\n\n    if p == 0:\n        if d == -1:\n            return str(max(s - x_1, t_2 * 2))\n        else:\n            return str(max(0, t_1 * 2 + x_2 - s))\n\n    if p == s:\n        if d == -1:\n            return str(max(0, t_2 * 2 + x_1))\n        else:\n            return str(max(s - x_2, t_2 * 2 - x_1))\n\n    return str(max(x_2 - x_1, p - 0))"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n    p, d = map(int, stdin.split())\n    print(int((s - x_1) / (t_2 - t_1) + abs(p - x_1) / (t_1 - t_2)))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2, p, d = map(int, stdin.split('\\n')[0].split())\n    if d == 1:\n        t_1 = p * t_1\n    else:\n        t_2 = p * t_2\n    if x_1 >= s:\n        t_1 = abs(t_1)\n    else:\n        t_2 = abs(t_2)\n    print(max(t_1, t_2))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n   ...\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, x1, x2, t1, t2, p, d = (int(i) for i in stdin.split(\"\\n\")[0].split(\" \"))\n    t2 -= t1\n    print(int((x1 - p) / t1 + (x2 - p) / t2))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n\nprint(solution(\"4 2 4\\n3 4\\n1 1\"))\nprint(solution(\"5 4 0\\n1 2\\n3 1\"))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2, p, d = [int(x) for x in stdin.split('\\n')[0].split()]\n    if p == 1:\n        x_1, x_2 = x_2, x_1\n        t_1, t_2 = t_2, t_1\n        d = -1 if d == 1 else 1\n    return str(min(abs(x_2 - x_1), (s - x_2) + (x_1 - 1) * t_2 + (t_2 - 1) * d + (t_1 - 1) * t_2))"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split())\n\nprint(solution(\"\"\"10 5\n5 13\n1 2\n3 4\n7 8\n9 10\n12 14\n12 34\n12 12\n21 21\n54 55\n76 78\n\"\"\"))\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == x:\n                ans += 1\n    return str(ans)\nprint(solution(input()))\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    table = inputs[0]\n    number = int(inputs[1])\n    count = 0\n    for i in range(1, int(table) + 1):\n        count += str(number * i).count('12')\n    return count\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    return str(bin(x).count('1'))\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 5\\n6 12\")\n    4\n    >>> solution(\"5 13\\n1 7\")\n    0\n    \"\"\"\n    n, x = map(int, stdin.split())\n    return str(sum(i * j == x for i in range(1, n + 1) for j in range(1, n + 1)))\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 5\\n5 12\")\n    2\n    >>> solution(\"6 12\\n4 6\\n1 4\\n3 4\")\n    4\n    \"\"\"\n    # return str(sum(i * j for i, j in zip(map(int, stdin.split()), [i + 1 for i in range(int(stdin.split()[0]))])))\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    password_length, distinct_symbols = [int(i) for i in stdin.split()]\n    password = [chr(ord('a') + i) for i in range(26) if chr(ord('a') + i) not in 'aeiou']\n    for i in range(distinct_symbols):\n        password.extend([chr(ord('a') + i) for i in range(26) if chr(ord('a') + i) not in 'aeiou'])\n    for i in range(password_length - distinct_symbols):\n        password.append(chr(ord('a') + distinct_symbols))\n    password = ''.join(password)\n    return password\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char not in \"aAjJvV\":\n            count += 1\n    return ''.join(sorted(stdin + 'a' * (count - len(stdin))))\n\nprint(solution(input()))\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    chars = 'abcdefghijklmnopqrstuvwxyz'\n    a = chars[:k]\n    b = chars[k:]\n    if n > 2 * k:\n        c = ''.join([chars[i] for i in range(n - 2 * k)])\n    else:\n        c = chars[:n - k]\n    d = ''.join([chars[i] for i in range(n) if i not in range(n // 2, n - n // 2)])\n    return ''.join(sorted(a + c + b + d, key=lambda x: x))\n\n\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ans = \"\"\n\n    while len(ans) < n:\n        for i in range(26):\n            if (i == 0 and k == 1) or (k > 1 and chr(ord('a') + i) not in ans) or (k == 1 and i > 0):\n                ans += chr(ord('a') + i)\n                k -= 1\n                break\n\n    return ans\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return any password which satisfies all conditions given by Innokentiy.\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    return ''.join([chr(97 + i) for i in range(k) for j in range(k) if i!= j])[:n]\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    distinct = [chr(i) for i in range(97, 97 + k)]\n    s = ''.join(distinct)\n    s = ''.join(s[i] for i in range(n))\n    return s\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, m = map(int, stdin.split())\n    return \"\".join(chr(97 + m - min(i, m)) for i in range(l))\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    password = \"\"\n    char_set = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    password_set = set()\n    while len(password_set) < k:\n        for i in range(len(char_set)):\n            password_set.add(char_set[i])\n    #print(password_set)\n    password = \"\"\n    while len(password) < n:\n        password += char_set[random.randint(0, 26 - 1)]\n    #print(password)\n    while not len(password) == n or not len(password_set) == k:\n        password = \"\"\n        while len(password) < n:\n            password += char_set[random.randint(0, 26 - 1)]\n        #print(password)\n        temp = password\n        password_set = set()\n        while len(password_set) < k:\n            for i in range(len(char_set)):\n                password_set.add(char_set[i])\n        for i in range(len(temp) - 1):\n            if temp[i] == temp[i + 1]:\n                if temp[i] not in password_set:\n                    break\n    return password\n    \n    \n\nsolution(\"4 3\")\nsolution(\"6 6\")\nsolution(\"5 2\")\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(password: str) -> bool:\n        if len(password) == n and len(set(password)) == k:\n            return True\n        return False\n    \n    def gen_password(password: str) -> str:\n        while len(password) < n:\n            for i in 'qwertyuiopasdfghjklzxcvbnm':\n                if len(password) < n:\n                    password += i\n                    if is_valid(password):\n                        return password\n                    password = password[:-1]\n    \n    n, k = [int(x) for x in stdin.split(' ')]\n    password = gen_password('')\n    return password\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    signs = stdin.readline().split()\n    coords = list(map(int, stdin.readline().split()))\n    counter = 0\n    for i in range(0, len(signs)):\n        for j in range(0, len(signs)):\n            if i!= j:\n                if signs[i] == signs[j] and coords[i] == coords[j]:\n                    counter += 1\n                    break\n    if counter > 0:\n        return str(counter * 10000)\n    else:\n        return \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    nums = [int(num) for num in stdin.split('\\n')[1].split(' ')]\n    nums.sort()\n    d = {'L': -1, 'R': 1}\n    res = -1\n    for i in range(0, len(nums), 2):\n        if (nums[i] + d[nums[i+1]]) % 2 == 0 and (nums[i] + d[nums[i+1]])!= 0:\n            res = nums[i] + d[nums[i+1]]\n            break\n    return str(res)"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    {\n        'l': -1,\n        'r': 1,\n    }\n    \"\"\"\n    particles = int(stdin.split('\\n')[0])\n    step = 0\n    while particles > 1:\n        step += 1\n        particles = sum(s[1] > s[0] for s in zip(stdin.split('\\n')[1::2], stdin.split('\\n')[2::2]))\n    return str(step * (-1 if particles == 0 else -1 - 2 * step))\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    list_of_numbers = stdin.split()\n    n = int(list_of_numbers[0])\n    list_of_char = list_of_numbers[1]\n    list_of_numbers = list_of_numbers[2:]\n    list_of_numbers = [int(i) for i in list_of_numbers]\n\n    dict_of_numbers = dict()\n    dict_of_numbers[0] = list_of_numbers[0]\n    for i in range(1, n):\n        if list_of_char[i] == 'L':\n            dict_of_numbers[i] = dict_of_numbers[i - 1] - 2\n        else:\n            dict_of_numbers[i] = dict_of_numbers[i - 1] + 2\n\n    dict_of_numbers_sorted = sorted(dict_of_numbers.items(), key=lambda x: x[1])\n\n    if dict_of_numbers_sorted[0][1] == dict_of_numbers_sorted[1][1]:\n        return '-1'\n    return dict_of_numbers_sorted[0][0]\n\nprint(solution(stdin))\n\n'''\n\n'''\nfrom collections import defaultdict\nimport sys\n\ndef"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    collision_points = lines[1]\n    points = lines[2].split(' ')\n    points = list(map(int, points))\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if points[i] == points[j]:\n                cnt += 1\n    return str(cnt) if cnt > 0 else '-1'\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    particles = int(stdin[0])\n    particles_positions = list(map(int, stdin[1].split()))\n    n = 0\n    while n < particles - 1:\n        if particles_positions[n] == particles_positions[n + 1]:\n            return str(n + 1)\n        n += 1\n    return '-1'"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    i, j, k = [int(i) for i in stdin.split()]\n    matrix = [[int(i) for i in stdin.split()] for _ in range(i)]\n    matrix = np.array(matrix)\n\n    if np.sum(matrix, axis=0) == j and np.sum(matrix, axis=1) == k:\n        return str(max(np.sum(matrix, axis=0), np.sum(matrix, axis=1)))\n    return '0'\n    '''\n\n    i, j, k = [int(i) for i in stdin.split()]\n    matrix = [[int(i) for i in stdin.split()] for _ in range(i)]\n    matrix = np.array(matrix)\n    if j * k > np.sum(matrix, axis=0).min() * np.sum(matrix, axis=1).min():\n        return '0'\n    min_col = np.sum(matrix, axis=0).min()\n    min_row = np.sum(matrix, axis=1).min()\n    if min_col * min_row > np.sum(matrix, axis=0).max() * np.sum(matrix, axis=1).max():\n        return '0'\n    return str(max(min_col * min_row, np.sum(matrix, axis=0).max() * np.sum(matrix, axis=1).max()))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass  # your code here\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, a, b = stdin.split()\n    n, a, b = int(n), int(a), int(b)\n\n    m = max(n, a)\n    r = (m*b) - (m-n)\n\n    return str(r)"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n\n    def calculate_rectangle_area(width, height):\n        return width * height\n\n    def get_rectangle_intersection_area(width1, height1, width2, height2):\n        width_intersection = min(width1, width2)\n        height_intersection = min(height1, height2)\n\n        if width_intersection <= 0 or height_intersection <= 0:\n            return 0\n        return width_intersection * height_intersection\n\n    def get_rectangle_area(width, height):\n        return width * height\n\n    def get_rectangle_area_1(width, height):\n        return width * height\n\n    def get_rectangle_area_2(width, height):\n        return width * height\n\n    def get_rectangle_area_3(width, height):\n        return width * height\n\n    def get_rectangle_area_4(width, height):\n        return width * height\n\n    def get_rectangle_area_5(width, height):\n        return width * height\n\n    # matrix[0] = [[1, 2], [2, 1]]\n    # matrix[1] = [[6, 5], [5, 10]]\n    # matrix[2] = [[20, 5], [9, 11]]\n    # matrix[3] = [[6, 6], [7, 7]]\n\n    max_area = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            area = calculate_rectangle_area(matrix[i][0], matrix[i][1]) + calculate_rectangle_area(matrix[j][0], matrix[j][1])\n\n            area_1 = get_rectangle_intersection_area(matrix[i][0], matrix[i][1], matrix[j][0], matrix[j][1])\n            area_2 = get_rectangle_intersection_area(matrix[i][0], matrix[i][1], matrix[j][0], matrix[j][1])\n            area_3 = get_rectangle_intersection_area(matrix[i][0], matrix[i][1], matrix[j][0], matrix[j][1])\n            area_4 = get_rectangle_intersection_area(matrix[i][0], matrix[i][1], matrix[j][0], matrix[j][1])\n            area_5 = get_rectangle_intersection_area(matrix[i][0], matrix[i][1], matrix[j][0], matrix[j][1])\n\n            area_6 = get_rectangle_area_1(matrix[i][0], matrix[i][1]) + get_rectangle_area_1(matrix[j][0], matrix[j][1])\n            area_7 = get_rectangle_area_2(matrix[i][0], matrix[i][1]) + get_rectangle_area_2(matrix[j][0], matrix[j][1])\n            area_8 = get_rectangle_area_3(matrix[i][0], matrix[i][1]) + get_rectangle_area_3(matrix[j][0], matrix[j][1])\n            area_9 = get_rectangle_area_4(matrix[i][0], matrix[i][1]) + get_rectangle_area_4(matrix[j][0], matrix[j][1])\n            area_10 = get_rectangle_area_5(matrix[i][0], matrix[i][1]) + get_rectangle_area_5(matrix[j][0], matrix[j][1])\n\n            if area_1 == area:\n                area = max(area, area_1)\n            if area_2 == area:\n                area = max(area, area_2)\n            if area_3 == area:\n                area = max(area, area_3)\n            if area_4 == area:\n                area = max(area, area_4)\n            if area_5 == area:\n                area = max(area, area_5)\n\n            if area_6 == area:\n                area = max(area, area_6)\n            if area_7 == area:\n                area = max(area, area_7)\n            if area_8 == area:\n                area = max(area, area_8)\n            if area_9 == area:\n                area = max(area, area_9)\n            if area_10 == area:\n                area = max(area, area_10)\n\n            max_area = max(area, max_area)\n\n    print(max_area)\n\n\n\ndef"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    max_area = 0\n    for x in range(n):\n        for y in range(n):\n            if (a * b) >= max_area and (x * y) >= max_area:\n                max_area = max(max_area, (a * b), (x * y))\n    return max_area\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.readline().split()))\n    max_h = 0\n    max_a = 0\n    max_b = 0\n    for i in range(n):\n        x, y = list(map(int, stdin.readline().split()))\n        if x >= b:\n            if y >= a:\n                if y > max_h:\n                    max_h = y\n                    max_a = a\n                    max_b = b\n            else:\n                if x >= a:\n                    if x > max_h:\n                        max_h = x\n                        max_a = a\n                        max_b = b\n                else:\n                    if y >= b:\n                        if y > max_h:\n                            max_h = y\n                            max_a = a\n                            max_b = b\n    print(max_a * max_b * max_h)\n    return ''\n\n\"\"\"\n\nfrom itertools import product\n\n\ndef"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 0 0\n   ... 0 1\n   ... 0 2\n   ... 1 0\n   ... 1 1\n   ... 1 2\n   ... 2 0\n   ... 2 1\n   ... 2 2\n   ... ''')\n    1 1\n    >>> solution('''\n   ... 2\n   ... 0 0\n   ... 0 1\n   ... 0 2\n   ... 0 3\n   ... 1 0\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... 2 0\n   ... 2 1\n   ... 2 2\n   ... ''')\n    0 3\n    \"\"\"\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #It's recommended that you don't try to solve this on paper and instead use a calculator for your own sanity.\n    points = set()\n    for _ in range(int(stdin)):\n        x, y = map(int, stdin.split())\n        points.add((x, y))\n\n    for x in range(0, 51):\n        for y in range(0, 51):\n            if x!= 0 and x!= 50 and y!= 0 and y!= 50:\n                if (x, y) not in points:\n                    return f\"{x} {y}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the coordinates of the non-boundary point.\n\n    >>> solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\")\n    1 1\n    >>> solution(\"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 2\")\n    0 3\n    '''\n   ...\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # put your python code here\n    n = int(stdin.readline())\n    d = {'0': [0, 2], '1': [1, 2], '2': [0, 0], '3': [1, 0]}\n    for _ in range(n):\n        for k in d:\n            if stdin.find(k)!= -1:\n                d[k] = [min(d[k][0], int(stdin.split()[stdin.find(k) + 1])), max(d[k][1], int(stdin.split()[stdin.find(k) + 1]))]\n                break\n    x = [k for k in d if d[k][0]!= d[k][1]]\n    if x:\n        return''.join(map(str, x))\n    else:\n        return''.join(map(str, d.values()[0]))\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2')\n    '1 1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n    n = int(lines[0])\n    points = [tuple(map(int, line.split())) for line in lines[1:n + 1]]\n    xs, ys = zip(*points)\n    xs = set(xs)\n    ys = set(ys)\n    return '{} {}'.format(\n        max(xs - {0, 2}) * 2 + min(xs - {0, 2}),\n        max(ys - {0, 2}) * 2 + min(ys - {0, 2})\n    )"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n2 0\\n2 1\\n2 2\\n')\n    '1 1'\n    >>> solution('2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n2 0\\n2 1\\n2 2\\n')\n    '0 3'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    line = stdin.split('\\n')\n    n = int(line[0])\n    points = []\n    for i in range(1, len(line)):\n        x, y = map(int, line[i].split(' '))\n        if x < 2 and y < 2:\n            points.append((x, y))\n        elif x > 0 and y > 0:\n            points.append((x, y))\n    if len(points) % 2 == 0:\n        return str(points[1][0]), str(points[1][1])\n    return str(points[0][0]), str(points[0][1])\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import Iterator, List\n\n\ndef"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(f\"Solution\\n\\tdef solution(n):\\n\\t\\treturn f\\\"{n}\\\", {n}\\n\")\n    return f\"Solution\\n\\tdef solution(n):\\n\\t\\treturn f\\\"{n}\\\", {n}\"\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to calculate the maximum product of digits\"\"\"\n    n = int(stdin)\n    return str(find_maximum_product_of_digits(n))\n\n\ndef"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    #My solution:\n    # Find the largest number\n    # Find the product of digits for each number\n    # Find the largest product of digits\n    # return the largest product of digits\n\n    lst = []\n\n    for i in stdin:\n        lst.append(i)\n\n    for j in range(len(lst)):\n        lst[j] = int(lst[j])\n\n    lst.sort()\n\n    print(lst)\n    max_product = 0\n    for i in range(len(lst)):\n        product = 1\n        for j in lst[i]:\n            product *= int(j)\n        if product > max_product:\n            max_product = product\n    return str(max_product)\n    \n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to parse input and print output\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    n = int(stdin)\n    digits = 1\n    max_digit = 0\n    while n:\n        digit = n % 10\n        digits *= digit\n        max_digit = max(max_digit, digit)\n        n //= 10\n    return str(digits // max_digit)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().strip().split(\" \")]\n    return str(sum(arr) - k)"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    a = list(map(int, inp[1:]))\n    k = sum(a)\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if ans > k:\n            break\n    return str(i + 1)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = sum(a)\n    b = sorted(a, reverse=True)\n    while True:\n        if k >= b[0]:\n            k -= b[0]\n            b.pop(0)\n        else:\n            break\n    if k <= sum(a):\n        k = sum(a)\n    return str(k)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 1 1 5 1\n   ... ''')\n    '5'\n    \"\"\"\n    stdin = stdin.split('\\n')\n    stdin = list(map(int, stdin[1:]))\n    total = sum(stdin)\n    curr = total\n    for i in stdin:\n        if curr - i < i:\n            return str(i - 1)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = stdin.split()\n    k = int(k[1])\n    a = stdin.split()\n    a = [int(i) for i in a]\n    if sum(a) < k:\n        return k\n    for i in range(k,0,-1):\n        if sum(a) - i + 1 < k:\n            k = i-1\n            break\n    return k"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return max(sum(a[:i]) for i in range(1, n + 1))\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(i) for i in stdin.strip().split('\\n')[1:]]\n    l.sort()\n    count = 0\n    for i in l:\n        count += i\n    return str(count + 1)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def next_greatest_divisor(k: int) -> int:\n        \"\"\"Return the next greater divisor of k.\n        \"\"\"\n        for i in range(k // 2, 1, -1):\n            if k % i == 0:\n                return i\n\n    def count_votes(candidates: List[int], k: int) -> int:\n        \"\"\"Return the number of votes needed to win.\n        \"\"\"\n        return sum(k - ai for ai in candidates)\n\n    def count_initial_votes(n: int) -> int:\n        \"\"\"Return the number of initial votes.\n        \"\"\"\n        return sum(n // 2 + 1 - i for i in range(n // 2 + 1))\n\n    def solve(n: int, candidates: List[int]) -> int:\n        \"\"\"Solve the problem.\n        \"\"\"\n        initial_votes = count_initial_votes(n)\n        current_votes = count_votes(candidates, initial_votes)\n\n        while True:\n            greatest_divisor = next_greatest_divisor(current_votes)\n            candidates.sort(reverse=greatest_divisor!= 1)\n\n            new_votes = count_votes(candidates, current_votes + 1)\n\n            if new_votes >= current_votes + 1:\n                return current_votes + 1\n\n            current_votes = new_votes\n\n    n = int(stdin.readline())\n    candidates = sorted(map(int, stdin.readline().split()))\n\n    return str(solve(n, candidates))\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    if\n    '''\n    return ''"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    points = stdin.split()\n    total = 0\n    for i in range(len(points)):\n        color = points[i]\n        if i!= 0 and points[i - 1] == color:\n            continue\n        if i!= len(points) - 1 and points[i + 1] == color:\n            continue\n        total += 1\n    return total\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    while True:\n        a = set()\n        b = set()\n        for i in range(n):\n            if stdin[i] == stdin[(i - 1) % n]:\n                a.add(i)\n            if stdin[i] == stdin[(i + 1) % n]:\n                b.add(i)\n        n = len(a.union(b))\n        if n == 1:\n            return str(n)\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    0\n    \"\"\"\n    if len(stdin) == 1:\n        return 0\n    points = {i: [0, 0] for i in stdin}\n    prev, curr = 0, 0\n    for i in range(1, len(stdin)):\n        if i == 1:\n            points[stdin[i]][0] = 0\n            points[stdin[i]][1] = i\n            prev = stdin[i]\n        else:\n            points[prev][0] = points[stdin[i - 1]][1]\n            points[stdin[i - 1]][1] = i\n            prev = stdin[i - 1]\n        curr = stdin[i]\n    curr = len(stdin) - 1\n    points[stdin[curr]][0] = points[stdin[curr - 1]][1]\n    points[stdin[curr - 1]][1] = len(stdin)\n    ans = 0\n    for key, val in points.items():\n        if val[0] == val[1]:\n            ans += 1\n    return ans\n\n\ndef"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # The first character of stdin is the first character of every letter\n    x = ord(stdin[0]) - ord(stdin[1])\n\n    # The difference is the product of the first and last character\n    # We start with -1 so that the while loop won't run for the first point\n    c = -1\n\n    while x!= 0:\n        # Change the sign of x if it's negative\n        x = -1 * x\n\n        c += 1\n\n    # return the number of operations required\n    return c\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")[1:]\n    colors = inp[0]\n    print(colors)\n    result = 0\n    for i, c in enumerate(colors):\n        if c == colors[i - 1]:\n            result += 1\n        else:\n            break\n    if result == len(colors):\n        return str(result)\n    else:\n        return str(len(colors) - result)\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    # Insert your code here\n    p = stdin\n    m = 0\n    while True:\n        q = [i for i in range(len(p)) if p[i] == 'a']\n        if not q:\n            break\n        for i in range(len(q)-1):\n            if abs(q[i]-q[i+1])!= 1:\n                p = p.replace(p[q[i]], '')\n                p = p.replace(p[q[i+1]], '')\n                m += 1\n                break\n    return m\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    curr_color = stdin[0]\n    curr_color_index = 0\n    index_tracker = 0\n    for i in stdin[1:]:\n        if i!= curr_color:\n            curr_color = i\n            curr_color_index = index_tracker\n        index_tracker += 1\n    index_tracker = 0\n    if index_tracker < curr_color_index:\n        return index_tracker\n    return index_tracker - 1\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if a[i] * a[j] * a[k] == min(a[i] * a[j] * a[k], a[i] * a[k] * a[j], a[j] * a[k] * a[i]):\n                    cnt += 1\n    print(cnt)\n    return ''\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string that contains the number of ways to choose three numbers\n    out of four that will give a minimum product.\"\"\"\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    numbers = list(map(int, stdin[1].split(\" \")))\n    # Add a small constant to avoid zero\n    numbers.sort()\n    c = 0\n    m = 10 ** 9\n    for i in range(n):\n        if numbers[i] < m:\n            m = numbers[i]\n            c += 1\n    return str(c)\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n = len(a)\n    a.sort()\n    ans = 0\n    for i in range(n - 1, 1, -1):\n        lo, hi = 0, i - 1\n        while lo < hi:\n            if a[lo] * a[hi] * a[i] > a[lo] * a[hi] * a[hi]:\n                ans += hi - lo\n                lo = hi + 1\n            else:\n                hi -= 1\n    return str(ans)\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport itertools\n\ndef"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass  # TODO: your code here\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    array = list(map(int, stdin[1].split()))\n    array.sort()\n\n    k = 0\n    count = 0\n\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            for l in range(j + 1, n):\n                if array[i] * array[j] * array[l] < array[k] * array[k] * array[k]:\n                    k = i\n                    count += 1\n    return count"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = [int(x) for x in stdin.readline().strip().split(' ')]\n    m.sort()\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if m[i]*m[j]*m[k] < m[i]*m[k]*m[j]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    nums = {}\n    for i in arr:\n        if i not in nums:\n            nums[i] = 1\n        else:\n            nums[i] += 1\n\n    ans = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] * arr[j] * arr[k]) < (arr[i] * arr[k] * arr[j]):\n                    ans += 1\n    print(ans)\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '5'"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'DUMMY'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '5'\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '5'\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(max(int(stdin.strip()), 0))\n    return ''\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return max(map(int, stdin))\n'''\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n'''\n\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    res = 0\n    for i in n:\n        res *= 10\n        res += int(i)\n    return str(res)\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nprint(n)\n\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of problem of \"Spinners\"\n    \"\"\"\n    characters = stdin.split()\n    string = characters[0]\n    rotation = int(characters[1])\n    n = 0\n    for i in string:\n        if i == \"v\":\n            n = 1\n        elif i == \"<\":\n            n = 2\n        elif i == \"^\":\n            n = 3\n        elif i == \">\":\n            n = 4\n    if n == 1:\n        return \"ccw\"\n    elif n == 3:\n        return \"cw\"\n    else:\n        return \"undefined\"\n    return 0\n\nprint(solution(input()))"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")[0]\n    r = int(stdin.split(\" \")[1])\n    v_x = s.count(\"v\")\n    l_x = s.count(\"<\")\n    c_x = s.count(\">\")\n    cw = r % v_x\n    ccw = r % (v_x + l_x + c_x)\n    if cw == 0 and ccw!= 0:\n        return \"ccw\"\n    elif cw!= 0 and ccw == 0:\n        return \"cw\"\n    else:\n        return \"undefined\"\n    \n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ['cw', 'ccw', 'undefined'][stdin.split('^')[1].split(' ')[0] == 'v' or int(stdin.split('^')[1].split(' ')[0]) % 2]\n\n\ndef"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'cw' if spinner moves clockwise, 'ccw' if counter-clockwise, and 'undefined' otherwise\"\"\"\n\n    # get commands\n    stdin = stdin.split()\n    start = stdin[0]\n    end = stdin[1]\n    sec = int(stdin[2])\n\n    # get rotation direction\n    # print(start, end, sec)\n    if start == '<':\n        direction = 'ccw'\n    elif start == '^':\n        direction = 'cw'\n    elif start == '>':\n        direction = 'ccw'\n    elif start == 'v':\n        direction = 'cw'\n    else:\n        raise ValueError('Invalid command')\n\n    # print(direction)\n\n    # get rotation angle\n    angle = sec % 360\n\n    # print(angle)\n\n    # check if we can find position\n    if angle == 0:\n        return 'cw'\n    elif angle == 90:\n        return 'ccw'\n    elif angle == 180:\n        return 'ccw'\n    elif angle == 270:\n        return 'cw'\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, e = stdin.split(\" \")\n    x, y, z = ord(s[0]), ord(s[1]), ord(s[2])\n    n = int(stdin.split(\" \")[1])\n    if n % 2 == 0:\n        if (x + y + z) % 2 == 0:\n            return \"cw\"\n        else:\n            return \"ccw\"\n    else:\n        if (x + y + z) % 2 == 1:\n            return \"cw\"\n        else:\n            return \"ccw\"\n\n\nsolution(\"^ >\\n1\")"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(' ')\n    x, y = int(x), int(y)\n    if x == 0:\n        if y < 0:\n            return 'ccw'\n        return 'cw'\n    elif x == -1:\n        if y < 0:\n            return 'ccw'\n        return 'undefined'\n    else:\n        if y < 0:\n            return 'cw'\n        return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    spinner = stdin.split(\" \")\n    \n    # based on the initial position, we find which direction the spinner is in\n    if spinner[0] == \"<\":\n        if spinner[1] == \"v\":\n            start = \"ccw\"\n        elif spinner[1] == \"^\":\n            start = \"cw\"\n        else:\n            start = \"undefined\"\n    elif spinner[0] == \"v\":\n        if spinner[1] == \"<\":\n            start = \"cw\"\n        elif spinner[1] == \"^\":\n            start = \"ccw\"\n        else:\n            start = \"undefined\"\n    elif spinner[0] == \"^\":\n        if spinner[1] == \"<\":\n            start = \"ccw\"\n        elif spinner[1] == \"v\":\n            start = \"cw\"\n        else:\n            start = \"undefined\"\n    else:\n        start = \"undefined\"\n    \n    # based on the duration, we find the direction the spinner will be in after the rotation\n    if spinner[2] == \"1\":\n        if start == \"cw\":\n            end = \"ccw\"\n        elif start == \"ccw\":\n            end = \"cw\"\n        else:\n            end = \"undefined\"\n    elif spinner[2] == \"2\":\n        if start == \"cw\":\n            end = \"cw\"\n        elif start == \"ccw\":\n            end = \"ccw\"\n        else:\n            end = \"undefined\"\n    elif spinner[2] == \"3\":\n        if start == \"cw\":\n            end = \"ccw\"\n        elif start == \"ccw\":\n            end = \"cw\"\n        else:\n            end = \"undefined\"\n    else:\n        end = \"undefined\"\n    \n    return end\n\n\nprint(solution(\"^ >\"))\nprint(solution(\"< ^\"))\nprint(solution(\"^ v\"))\nprint(solution(\"6\"))\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.strip().split()\n    \n    # Split the input into starting and ending positions\n    starting = stdin[0]\n    \n    # Convert the starting position to its ASCII representation\n    # '>' is 11, '<' is 60, '^' is 94, and 'v' is 118\n    starting = chr(int(starting[1:])-1)\n    \n    # Split the duration into its decimal part and its integer part\n    duration = int(stdin[1])\n    \n    # Determine the rotation direction\n    if starting == 'v':\n        direction = -1\n    elif starting == '<':\n        direction = -1j\n    elif starting == '^':\n        direction = 1j\n    else:\n        direction = 1\n    \n    # Convert the string representing the duration into its decimal part\n    # and its integer part\n    duration = int(str(duration).split('.')[0])\n    \n    # Compute the number of rotations that will be done\n    rotations = duration*2\n    \n    # Move the starting position according to the given direction\n    # and the number of rotations\n    position = complex(0,0)\n    for i in range(rotations):\n        position += direction\n        if starting == '>':\n            if position.imag > 0:\n                position -= 2*direction\n        elif starting == '<':\n            if position.imag < 0:\n                position += 2*direction\n        elif starting == '^':\n            if position.real > 0:\n                position -= 2*direction\n        else:\n            if position.real < 0:\n                position += 2*direction\n    \n    return 'ccw' if position.imag < 0 else 'cw' if position.imag > 0 else 'undefined'\n\n\nsolution('^ >\\n3')\nsolution('< ^\\n4')\nsolution('^ v\\n6')\nsolution('^ >\\n5')\nsolution('< ^\\n10')\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # n: int = int(stdin.readline())\n    # i: str = stdin.readline().rstrip()\n    # result: str = \"undefined\"\n    #\n    # # i: str = i.split(' ')\n    # if i[0] == 'v':\n    #     result = 'cw'\n    # elif i[0] == '>':\n    #     result = 'ccw'\n    # elif i[0] == '<':\n    #     result = 'cw'\n    # else:\n    #     result = 'undefined'\n    #\n    # return result\n    return i\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Parse input and output direction\n    :param stdin: input\n    :return: output\n    \"\"\"\n    start, end = stdin.split(' ')\n    n = int(stdin.split(' ')[1])\n    if start == 'v':\n        start = '^'\n    elif start == '^':\n        start = '>'\n    elif start == '<':\n        start = 'v'\n    if end == 'v':\n        end = '^'\n    elif end == '^':\n        end = '<'\n    elif end == '>':\n        end = 'v'\n    if n % 4 == 0:\n        if start == '<':\n            return 'cw'\n        else:\n            return 'ccw'\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # My solution\n    n = int(stdin.split('\\n')[0])\n    d = stdin.split('\\n')[1]\n    \n    l = len(d)\n    count = 0\n    for i in range(0,l-1):\n        if d[i] == 'L' and d[i+1] == 'L':\n            count+=1\n    return count\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(n)\n    space: O(1)\n    '''\n    lines = stdin.split('\\n')\n    num_dominoes = int(lines[0])\n    dominoes = lines[1]\n    # position: index\n    left = 0\n    right = num_dominoes - 1\n    count = 0\n    for domino in dominoes:\n        if domino == 'L':\n            right -= 1\n        else:\n            left += 1\n        if left < right:\n            count += 1\n    return count\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return stdout"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n// Do not edit the stdin and stdout arguments - keep them for the test's understanding"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    dominoes = []\n    n = int(stdin.split('\\n')[0])\n    for x in stdin.split('\\n')[1].split(' '):\n        dominoes.append(x)\n    \n    # remember to account for both cases when L is pushed to the left of R\n    l_push = r_push = 0\n    for i, x in enumerate(dominoes):\n        if x == 'R':\n            r_push += 1\n        if x == 'L':\n            if i!= len(dominoes) - 1:\n                if dominoes[i+1] == 'L':\n                    l_push += 1\n                    continue\n            l_push += 1\n        if i!= 0:\n            if dominoes[i-1] == 'R':\n                r_push += 1\n        \n        if x == 'R':\n            dominoes[i] = 'L'\n        elif x == 'L':\n            dominoes[i] = 'R'\n    \n    return r_push + l_push\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"14.L.R...LR..L..\\n\")\n    4\n    >>> solution(\"5.R....\\n\")\n    0\n    >>> solution(\"1.\\n\")\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return 1\n    a = stdin.readline()\n    arr = [[a[i], a[i + 1]] for i in range(0, n, 2)]\n    l = 0\n    r = 0\n    res = 0\n    for i in range(n):\n        if arr[i][0] == \"L\":\n            l += 1\n        else:\n            r += 1\n        if arr[i][0] == \"R\":\n            res += (r - l)\n        else:\n            res += r\n    return res\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    data = list(lines[1])\n    if len(data) == 1:\n        return n\n    numbers = [1 if i == '.' else 0 for i in data]\n    for i in range(len(numbers)):\n        if numbers[i] == 0:\n            numbers[i] = -1\n    for i in range(len(numbers) - 1):\n        if numbers[i] < 0 and numbers[i + 1] < 0:\n            numbers[i + 1] = -1\n    return sum(numbers)\n\nprint(solution(stdin))"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    #     n = stdin.split()[0]\n    #     n = int(n)\n    #     m = stdin.split()[1]\n    #     m = int(m)\n    #     a = stdin.split()[2:]\n    #     a = [int(x) for x in a]\n    #     # def func(x):\n    #     #     return x[0]\n    #     # a = sorted(a, key=func)\n    #     # a.sort(key=lambda x: x[0])\n    #     a = sorted(a)\n    #     if len(a)!= m:\n    #         return \"-1\"\n    #     for i in range(m):\n    #         if i+1!= a[i]:\n    #             return \"-1\"\n    #     return''.join(str(x) for x in a)\n    \n    # s = stdin.split('\\n')\n    # print(s)\n    # n = s[0].split()[0]\n    # n = int(n)\n    # m = s[0].split()[1]\n    # m = int(m)\n    # a = s[1].split()\n    # a = [int(x) for x in a]\n    # print(a)\n    \n    # def solve(a, k):\n    #     res = []\n    #     for i in range(k):\n    #         if i+1 not in a:\n    #             return res\n    #         else:\n    #             res.append(i+1)\n    #             for j in range(len(a)):\n    #                 if a[j] == i+1:\n    #                     a.pop(j)\n    #                     break\n    #     return res\n    # a.sort()\n    # res = solve(a, n)\n    # if len(res) == 0:\n    #     return \"-1\"\n    # else:\n    #     return''.join(str(x) for x in res)\n    n = stdin.split()[0]\n    n = int(n)\n    m = stdin.split()[1]\n    m = int(m)\n    a = stdin.split()[2:]\n    a = [int(x) for x in a]\n    a.sort()\n    stack = []\n    for i in range(m):\n        while len(stack) > 0 and a[i] > stack[-1]:\n            stack.pop()\n        if len(stack) == 0:\n            stack.append(a[i])\n        else:\n            stack.append(a[i])\n    res = []\n    if len(stack)!= n:\n        return \"-1\"\n    for i in range(n):\n        res.append(stack[i])\n    return''.join(str(x) for x in res)\n\nprint(solution(\"4 5\\n2 3 1 4 4\"))\nprint(solution(\"3 3\\n3 1 2\"))\nprint(solution(\"3 2\\n3 1 2\"))"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    children = list(map(int, stdin.split()))\n    children = list(map(lambda x: x - 1, children))\n    while len(children) > 0:\n        leader = children.index(min(children))\n        children = children[leader + 1:] + children[:leader]\n    return \"-1\"\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = [int(x) for x in stdin.split('\\n')]\n    n = stdin[0]\n    m = stdin[1]\n    inp = stdin[2:]\n    out = []\n    while len(out)!= n:\n        \n        l = 0\n        r = len(out)-1\n        while l <= r:\n            if out[l] >= inp[l]:\n                out.insert(l, inp[l])\n                l += 1\n                break\n            elif out[r] < inp[l]:\n                out.insert(r+1, inp[l])\n                break\n            else:\n                if l == r:\n                    break\n                l += 1\n                r -= 1\n        if l == r+1:\n            out.append(inp[l])\n    if len(out)!= n:\n        return '-1'\n    else:\n        return''.join([str(x) for x in out])\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    # n, m = map(int, stdin.split(\" \"))\n    leaders = list(map(int, stdin.split(\" \")[1:]))\n    res = []\n    for i in range(n):\n        if i in leaders:\n            res.append(i + 1)\n        else:\n            res.append(i)\n    return \" \".join([str(x) for x in res])\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    n, m = l[0], l[1]\n    leaders = l[2:]\n    if len(leaders)!= m:\n        return \"-1\"\n    queue = [1]\n    while len(queue) < n:\n        curr = queue.pop(0)\n        for i in range(n):\n            if curr == leaders[i]:\n                queue.append(curr + i + 1)\n                break\n            elif curr + i + 1 == leaders[i]:\n                queue.append(curr + i + 1)\n                break\n            else:\n                continue\n    return \" \".join(str(x) for x in queue)\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    \n    if n == m:\n        print(\" \".join(str(i) for i in range(1, n+1)))\n        return\n    \n    l = set(l)\n    if n % m!= 0:\n        print(-1)\n        return\n    \n    if len(l) < m:\n        print(-1)\n        return\n    \n    print(l[0])\n    for i in range(m-1):\n        l.remove(l[0])\n        l.add(l[0])\n        print(l[0])\n    \n    return\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    perm = list(map(int, stdin.split()))\n    perm = perm[:m]\n    step = n\n    i = 0\n    while i < m:\n        step -= perm[i]\n        if step < 1:\n            break\n        i += 1\n        step += n\n    \n    return''.join(map(str, [i+1 for i in range(n) if i+1 not in perm])) or -1\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 1 4 4\")\n    3 1 2 4\n    >>> solution(\"3 1 2\")\n    -1\n    \"\"\"\n    n, m = map(int, stdin.split())\n    leaders = list(map(int, stdin.split()))\n    child_leader = leaders.pop(0)\n    child_position = 1\n    while len(leaders) > 0:\n        leader = leaders.pop(0)\n        if leader == child_leader:\n            if len(leaders) > 0 and leaders[0]!= child_leader:\n                child_leader = leaders.pop(0)\n                child_position += 1\n            else:\n                break\n        else:\n            child_leader = leader\n            child_position += 1\n    print(' '.join([str(i) for i in range(child_position, n + 1)]))\n    return ''\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split()\n    a = int(a)\n    k = int(k)\n    if k == 0:\n        return a\n    i = len(str(a)) - 1\n    while i > 0:\n        if str(a)[i] == '0':\n            i -= 1\n        else:\n            break\n    if i > 0:\n        a = int(str(a)[:i] + str(a)[i + 1:])\n    i = 0\n    while a >= 10 and i < k:\n        a = int(str(a) + str(a)[0])\n        i += 1\n    a = str(a)\n    j = 1\n    while j < len(a) - 1:\n        if a[j] == a[j - 1] and a[j] == a[j + 1]:\n            a = a[:j] + a[j + 1:]\n            j -= 1\n        else:\n            j += 1\n    return a\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    n = str(n)\n    if k == 0:\n        return n\n    if k >= len(n):\n        return n\n    return str(int(n) - (10 ** (k - 1)))\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split()\n    a, k = int(a), int(k)\n    print(a, k)\n    a_str = str(a)\n    k_swaps = 0\n    for i in range(len(a_str) - 1):\n        if a_str[i] > a_str[i + 1]:\n            k_swaps += 1\n            if k_swaps > k:\n                break\n            new_a_str = a_str[:i] + a_str[i + 1] + a_str[i] + a_str[i + 2:]\n            if k_swaps > k:\n                break\n    a_str = new_a_str\n    print(a_str)\n    return a_str"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(' ')\n    a, k = int(nums[0]), int(nums[1])\n    return str(a + k - 1)\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = list(a)\n    k = int(stdin[2])\n    if k == 0:\n        return a\n    for i in range(1, k+1):\n        a = swap(a)\n    return ''.join(a)\n\n\ndef"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    a, k = int(n), int(k)\n    n = list(str(a))\n    for i in range(k):\n        s = n.pop(0)\n        n.append(s)\n    print(''.join(n))\nsolution(input())\n\n\n\ndef"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    result = []\n    def dfs(cur, count, n=0):\n        if count == k:\n            result.append(cur)\n            return\n        for i in range(n, len(str(a)) - 1):\n            for j in range(i + 1, len(str(a))):\n                num1 = cur + int(str(a)[i]) + int(str(a)[j])\n                num2 = cur + int(str(a)[j]) + int(str(a)[i])\n                if (num1 > num2) and (num1 % 10 < num2 % 10):\n                    dfs(cur + int(str(a)[i] + str(a)[j]), count + 1)\n                elif (num2 > num1) and (num2 % 10 < num1 % 10):\n                    dfs(cur + int(str(a)[j] + str(a)[i]), count + 1)\n    dfs(0, 0)\n    return max(result)\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split()\n    a = int(a)\n    k = int(k)\n    s = str(a)\n    count = 0\n    while count < k:\n        temp = s\n        for i in range(len(s) - 1):\n            if temp[i] > temp[i + 1]:\n                temp = temp[0:i] + temp[i + 1] + temp[i] + temp[i + 2:]\n                count += 1\n                break\n        if count == k:\n            break\n    return temp\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(x) for x in stdin.split(' ')]\n    s = str(a)\n    res = a\n    for _ in range(k):\n        if s[0] == '9':\n            s = s[1:] + s[0]\n            continue\n        else:\n            s = s[1] + s[0] + s[2:]\n            res = max(res, int(s))\n    return str(res)\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split(' ')\n    a = int(a)\n    k = int(k)\n    return str(a + sum(a // 10**i % 10**i for i in range(1, len(str(a)))))\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) for x in stdin.split()]\n    if len(numbers) == 4:\n        # Petya is preparing for IQ test and he has noticed that there many problems like: you are given a sequence, find the next number. Now Petya can solve only problems with arithmetic or geometric progressions.\n        a, d, n, m = numbers\n        if (a + (n - 1) * d) % m == 0:\n            return str(a + d)\n        elif (a + (n - 2) * d) % m == 0:\n            return str(a + 2 * d)\n        elif (a + (n - 3) * d) % m == 0:\n            return str(a + 3 * d)\n    return '42'\n\n\n\"\"\""
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The main function to be called from the shell script.\"\"\"\n    num_1, num_2, num_3, num_4 = [int(x) for x in stdin.split()]\n    if num_1 % num_3 == 0 or num_1 % num_4 == 0:\n        return str(num_1 + num_3)\n    elif num_2 % num_3 == 0 or num_2 % num_4 == 0:\n        return str(num_2 + num_3)\n    else:\n        return \"42\"\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport re\nimport math\n\ndef"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(num) for num in stdin.split(\" \")]\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return str(arr[i+1] - arr[i])\n    return '42'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '42'\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the next number in a sequence\n    \"\"\"\n    pass\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split(' ')]\n    if len(nums) < 3:\n        return 42\n    first = nums[0]\n    last = nums[-1]\n    if nums[1] - nums[0]!= nums[2] - nums[1] or nums[1] % 1!= 0:\n        return 42\n    if nums[2] % 1!= 0:\n        return nums[1] + 1\n    return (nums[2] - nums[1]) * (first - last) + last\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are preparing for an IQ test that consists of a number of questions on arithmetic progressions and geometric progressions.\n    You are provided a sequence of integers. Each number after the first is obtained by adding the previous number by 1 or by removing 1 from the previous number.\n    Your task is to count the number of questions you will be asked to determine if the sequence is an arithmetic or geometric progression.\n    \"\"\"\n    pass\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    find the maximum distance Ilya can walk\n    '''\n    pass\n    # create an array of int\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    n = len(houses)\n    result = 0\n\n    # find the max distance\n    for i in range(n - 1):\n        result = max(result, houses[i+1] - houses[i])\n\n    return result\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    houses = list(map(int, stdin.readline().split()))\n    res = max(houses[i] - houses[i - 1] for i in range(1, len(houses)))\n    return str(res)\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 1 2\\n\")\n    '2'\n    >>> solution(\"4\\n1 1 3 1 1\\n\")\n    '1'\n    \"\"\"\n\n    return str(min(int(input()), int(input())))\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 7\n   ... 1 1 3 1 1 1 1\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 3\n   ... 1 1 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 3\n   ... 2 1 2\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 3\n   ... 2 2 3\n   ... ''')\n    '2'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... 5\n   ... 1 2 3 2 3\n   ... \"\"\")\n    '4'\n    >>> solution(\"\"\"\n   ... 3\n   ... 1 2 1\n   ... \"\"\")\n    '1'\n    >>> solution(\"\"\"\n   ... 7\n   ... 1 1 3 1 1 1 1\n   ... \"\"\")\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    houses = [int(x) for x in stdin.readline().split()]\n    houses.sort()\n    houses.insert(0, 0)\n    houses.append(n)\n\n    def distance(i, j):\n        return j - i\n\n    distance_list = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            distance_list.append(distance(houses[i], houses[j]))\n    return str(max(distance_list))\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is based on the following observation:\n    Ilya knows that the houses are not neighboring, so there are at least two different colors.\n    This means that the distance between the first and the second house is at least one,\n    and the distance between the second and the third house is at least one, and so on.\n    Therefore the distance between the first and the third house is at least two.\n    This means that the distance between the first and the second house is at least three,\n    and the distance between the second and the third house is at least three, and so on.\n    The distance between the first and the fourth house is at least four, and so on.\n    Thus the longest distance Ilya can walk is the sum of the distances between the first and the fourth house,\n    the distance between the second and the fifth house, the distance between the third and the sixth house,\n    and so on, to the end of the street.\n    \"\"\"\n    n, *houses = [int(c) for c in stdin.split()]\n\n    houses_set = set(houses)\n    colors = len(houses_set)\n\n    if colors < 2:\n        return str(0)\n\n    sorted_houses = sorted(houses_set)\n\n    if len(sorted_houses) == 2:\n        return str(abs(sorted_houses[1] - sorted_houses[0]))\n\n    dp = [[0] * colors for _ in range(colors)]\n    for i in range(colors):\n        for j in range(i, colors):\n            for k in range(j, colors):\n                dp[i][j] = max(dp[i][j], dp[i][k] + abs(sorted_houses[j] - sorted_houses[k]))\n\n    return str(sum(max(dp[i]) for i in range(colors)))\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5\n   ... 1 2 3 2 3\n   ... ''')\n    '4'\n    >>> solution('''3\n   ... 1 2 1\n   ... ''')\n    '1'\n    >>> solution('''7\n   ... 1 1 3 1 1 1 1\n   ... ''')\n    '4'\n    '''\n    :param stdin:\n    :return:\n    '''\n    def process_line(line: str) -> Tuple[int, int]:\n        '''\n        >>> process_line('5\\n1 2 3 2 3')\n        (5, [1, 2, 3, 2, 3])\n        >>> process_line('3\\n1 2 1')\n        (3, [1, 2, 1])\n        >>> process_line('7\\n1 1 3 1 1 1 1')\n        (7, [1, 1, 3, 1, 1, 1])\n        '''\n        n = int(line.split('\\n')[0])\n        houses = list(map(int, line.split('\\n')[1].split()))\n        return n, houses\n\n    def find_min_diff(houses: List[int]) -> int:\n        '''\n        >>> find_min_diff([5, 2, 3, 2, 3])\n        4\n        >>> find_min_diff([1, 2, 1])\n        1\n        >>> find_min_diff([7, 1, 1, 3, 1, 1, 1])\n        4\n        '''\n        houses.sort()\n        return houses[-1] - houses[0]\n\n    def find_min_dis_subset(n: int, houses: List[int]) -> int:\n        '''\n        >>> find_min_dis_subset(5, [1, 2, 3, 2, 3])\n        4\n        >>> find_min_dis_subset(3, [1, 2, 1])\n        1\n        >>> find_min_dis_subset(7, [1, 1, 3, 1, 1, 1])\n        4\n        '''\n        houses.sort()\n        m = len(houses)\n        dp = [[0] * m for _ in range(n + 1)]\n        for i in range(m):\n            dp[1][i] = houses[i]\n        for i in range(2, n + 1):\n            dp[i][0] = houses[0]\n            dp[i][-1] = houses[-1]\n            for j in range(1, m - 1):\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j], houses[j])\n        res = dp[n][0]\n        for j in range(1, m):\n            res = min(res, dp[n][j] - dp[n - 1][j - 1])\n        return res\n\n    n, houses = process_line(stdin)\n    return str(find_min_dis_subset(n, houses))\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum distance from house 1 to house n where n is given in the input.\n    \"\"\"\n    n = int(stdin)\n    houses = [int(x) for x in stdin.split()]\n    houses.sort()\n    max_distance = 0\n    for i in range(n):\n        for j in range(i, n):\n            if houses[i]!= houses[j]:\n                max_distance = max(max_distance, j - i)\n    return max_distance\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n - k // m) +'' + str(k % m) +'' + ('L' if k % m == 0 else 'R')\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, w, c = [int(x) for x in stdin.split()]\n    if l % 2 == 0:\n        if w % 2 == 0:\n            r = l // 2\n            d = w // 2\n            if c > r * d:\n                return f\"{r} {d} L\"\n            return f\"{r} {d} R\"\n        else:\n            d = w // 2 + 1\n            if c > l * d:\n                return f\"{l} {d} L\"\n            return f\"{l} {d} R\"\n    else:\n        if w % 2 == 0:\n            r = l // 2 + 1\n            d = w // 2\n            if c > r * d:\n                return f\"{r} {d} L\"\n            return f\"{r} {d} R\"\n        else:\n            d = w // 2 + 1\n            if c > l * d:\n                return f\"{l} {d} L\"\n            return f\"{l} {d} R\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n) + \" \" + str(m) + \" \" + \"L\" if k % m < m//2 else str(n) + \" \" + str(m) + \" \" + \"R\"\n\"\"\"\n\ndef"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.split(' ')[0])\n    d = int(stdin.split(' ')[1])\n    k = int(stdin.split(' ')[2])\n\n    for r in range(1, l + 1):\n        if (d + k) % (2 * r) == 0:\n            return f'{r} {((k + r - 1) // (2 * r)):02d} {(\"L\" if k % (2 * r) < r else \"R\")}'\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    # d = min(c, 2 * a)\n    return \"L\" if c <= 2 * a else \"R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return f\"{n} {m} {'L' if k % (n * m) >= n * (m - k // n) else 'R'}\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    n = n - 1\n    m = m - 1\n    k = k - 1\n    l = math.ceil(k / m)\n    if k % m == 0:\n        return str(n - l + 2) + \" \" + str(l + 1) + \" L\"\n    else:\n        return str(n - l + 2) + \" \" + str(l + 1) + \" R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    if k == 1:\n        return '{} {} L'.format(0, 0)\n    k -= 1\n    r = k // (n * m)\n    d = (k % (n * m)) // m\n    s = 'R' if d % 2 == 0 else 'L'\n    return '{} {} {}'.format(r, d, s)\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    k -= 1\n    l = (k + m) % (n * m)\n    r = (k + n * m) // (n * m)\n    if l < r:\n        return f\"{r} {l} R\"\n    else:\n        return f\"{r} {l} L\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [stdin[i:i+2] for i in range(0, len(stdin), 2)]\n    \n    last_arr = []\n    \n    for i in range(len(arr) - 1):\n        if arr[i][0] == arr[i+1][0]:\n            last_arr.append(arr[i][1] + arr[i+1][1])\n        else:\n            last_arr.append(arr[i+1][0] + arr[i][0])\n    \n    if len(last_arr) == 0:\n        print(arr[0])\n    else:\n        print(last_arr[0])\n    \n    return ''\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total_cards = int(stdin.readline())\n    deck = stdin.readline()\n    stack = []\n    for color in deck:\n        if len(stack) < 2:\n            stack.append(color)\n        else:\n            if stack[0]!= stack[1]:\n                stack.append(color)\n            else:\n                stack.clear()\n                stack.append(color)\n    if len(stack) < 2:\n        return \"\"\n    else:\n        return sorted(set([x for x in stack if stack.count(x) == 2]))\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numberOfCards: int = int(stdin.split(\"\\n\")[0])\n    cards: str = stdin.split(\"\\n\")[1]\n\n    def numOfB(cards: str) -> int:\n        return cards.count(\"B\")\n\n    def numOfG(cards: str) -> int:\n        return cards.count(\"G\")\n\n    def numOfR(cards: str) -> int:\n        return cards.count(\"R\")\n\n    def numOfEquals(cards: str) -> int:\n        return cards.count(\"=\")\n\n    def numOfDiff(cards: str) -> int:\n        return cards.count(\"!\")\n\n    def swap(cards: str) -> str:\n        while (numOfDiff(cards) > 0) and (numOfEquals(cards) > 0):\n            cards = cards.replace(\"!\", \"=\")\n            cards = cards.replace(\"=\", \"!\")\n\n        while (numOfDiff(cards) > 0) and (numOfB(cards) > 0):\n            cards = cards.replace(\"B\", \"!\")\n            cards = cards.replace(\"!\", \"B\")\n\n        while (numOfDiff(cards) > 0) and (numOfG(cards) > 0):\n            cards = cards.replace(\"G\", \"!\")\n            cards = cards.replace(\"!\", \"G\")\n\n        while (numOfDiff(cards) > 0) and (numOfR(cards) > 0):\n            cards = cards.replace(\"R\", \"!\")\n            cards = cards.replace(\"!\", \"R\")\n\n        return cards\n\n    def countOf(cards: str, char: str) -> int:\n        return cards.count(char)\n\n    def remove(cards: str, num: int) -> str:\n        return cards[:-num]\n\n    def check(cards: str) -> bool:\n        return ((numOfB(cards) > 0) and (numOfG(cards) > 0)) or ((numOfB(cards) > 0) and (numOfR(cards) > 0)) or ((numOfG(cards) > 0) and (numOfR(cards) > 0))\n\n    while check(cards) is True:\n        cards = swap(cards)\n        cards = remove(cards, 1)\n\n    if (cards[0] == \"B\") and (countOf(cards, \"R\") > 0):\n        cards = cards.replace(\"R\", \"B\")\n        cards = cards.replace(\"B\", \"R\")\n    elif (cards[0] == \"B\") and (countOf(cards, \"G\") > 0):\n        cards = cards.replace(\"G\", \"B\")\n        cards = cards.replace(\"B\", \"G\")\n    elif (cards[0] == \"G\") and (countOf(cards, \"B\") > 0):\n        cards = cards.replace(\"B\", \"G\")\n        cards = cards.replace(\"G\", \"B\")\n    elif (cards[0] == \"G\") and (countOf(cards, \"R\") > 0):\n        cards = cards.replace(\"R\", \"G\")\n        cards = cards.replace(\"G\", \"R\")\n    elif (cards[0] == \"R\") and (countOf(cards, \"B\") > 0):\n        cards = cards.replace(\"B\", \"R\")\n        cards = cards.replace(\"R\", \"B\")\n    else:\n        cards = cards.replace(\"B\", \"R\")\n        cards = cards.replace(\"R\", \"B\")\n\n    cards = remove(cards, 1)\n    cards = remove(cards, 1)\n\n    return cards\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"returns the color of the final card\"\"\"\n    card_str = stdin\n    card_color = {\n        'B': 0,\n        'G': 0,\n        'R': 0\n    }\n    # find the number of each color\n    for color in card_str:\n        if color in ['B', 'G']:\n            card_color[color] += 1\n    # check if card can be balanced\n    if card_color['B'] % 2 == 1 and card_color['G'] % 2 == 1:\n        if card_color['R'] > 0:\n            return 'B'\n        else:\n            return 'G'\n    elif card_color['B'] % 2 == 1:\n        return 'B'\n    elif card_color['G'] % 2 == 1:\n        return 'G'\n    else:\n        return 'R'\n\"\"\"\n\n\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin.split(\" \")[0])\n    \n    return"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    card = list(stdin)\n    for i in range(len(card)):\n        if card[i] == \"R\" and card[i - 1]!= \"B\" and card[i + 1]!= \"B\":\n            card[i] = \"G\"\n        elif card[i] == \"G\" and card[i - 1]!= \"R\" and card[i + 1]!= \"R\":\n            card[i] = \"B\"\n    return \"\".join(card)\n    \"\"\"\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    if count == 1:\n        return \"B\"\n    stdin = stdin.split(\" \")\n    stdin = [i for i in stdin if i!= \"\"]\n    counts = Counter(stdin)\n    res = []\n    for i in counts.keys():\n        res.append(i*counts[i])\n    res = list(set(res))\n    res.sort()\n    return \"\".join(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\")\n    'YES\\n0 0\\n1 0\\n0 1\\n2 0\\n1 -1\\n-1 1\\n0 2\\n1 0\\n\\n'\n    \"\"\"\n    n = int(stdin.split()[0])\n    edges = [tuple(map(int, row.split())) for row in stdin.splitlines()[1:]]\n\n    tree = nx.Graph()\n    tree.add_edges_from(edges)\n    pos = dict()\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            a, b = tree.neighbors(i)\n            c, d = tree.neighbors(j)\n            if a == c or b == d:\n                if abs(pos[i][0] - pos[j][0])!= abs(pos[i][1] - pos[j][1]):\n                    pos[j] = tuple(map(sum, zip(pos[i], pos[j])))\n                else:\n                    pos[j] = tuple(map(sum, zip(pos[j], pos[i])))\n\n    if pos:\n        return \"YES\\n\" + \"\\n\".join(map(str, pos.values()))\n    return \"NO\""
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = set()\n    m = dict()\n    for i in range(n - 1):\n        a, b = [int(x) for x in stdin.readline().split()]\n        m[a] = b\n        m[b] = a\n        if a in s or b in s:\n            continue\n        s.add(a)\n        s.add(b)\n    ans = []\n    if len(s) == n:\n        ans.append([0, 0])\n    for i in range(1, n):\n        t = m[ans[0][1]]\n        while t!= i:\n            ans.append(ans.pop() + [-1, 1])\n            if ans[-1][0] == 0:\n                ans.append([-1, 1])\n            else:\n                ans.append([1, -1])\n            t = m[t]\n        ans.append([0, 0])\n        ans.append([i, 0])\n    return '\\n'.join(['YES'] + [f'{x} {y}' for x, y in ans])\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check(x, y):\n        return all(abs(x[i] - y[i]) == abs(x[i] + y[i]) for i in range(len(x)))\n\n    n = int(stdin.readline())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    graph = defaultdict(list)\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    ans = None\n    for start in range(1, n + 1):\n        stack = [start]\n        visited = set()\n        for i in range(n - 1):\n            for vertex in stack:\n                if vertex not in visited:\n                    stack.extend(graph[vertex])\n                    visited.add(vertex)\n            ans = check(\n                [x for x in stack if x not in visited],\n                [y for y in stack if y in visited]\n            )\n            if ans:\n                break\n        if ans:\n            break\n    if ans:\n        print('YES')\n        for x, y in zip(ans[::2], ans[1::2]):\n            print(x, y)\n    else:\n        print('NO')\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find a way to position the tree vertices on the plane such that its segments are parallel to the coordinate axes.\"\"\"\n    pass\n\n\"\"\"\nI've used three different approaches:\n\n1. First approach is to sort vertices by x coordinate and then calculate sum of y coordinates of all vertices. The sum is inversed.\n\n2. Second approach is to calculate sum of x coordinates of all vertices.\n\n3. Third approach is to calculate sum of y coordinates of all vertices.\n\"\"\"\n\ndef"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''7\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 3 6\n   ... 3 7\n   ... ''')\n    YES\n    0 0\n    1 0\n    0 1\n    2 0\n    1 -1\n    -1 1\n    0 2\n    >>> solution('''6\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... 2 6\n   ... ''')\n    YES\n    3 3\n    4 3\n    5 3\n    6 3\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... ''')\n    YES\n    3 3\n    4 3\n    5 3\n    6 3\n    >>> solution('''1\n   ... 1 2\n   ... ''')\n    NO\n    >>> solution('''2\n   ... 1 2\n   ... 2 3\n   ... ''')\n    NO\n    '''\n    '''\n    num_of_vertices = int(stdin.readline())\n    edges = []\n    for i in range(num_of_vertices - 1):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v))\n    tree = collections.defaultdict(set)\n    for u, v in edges:\n        tree[u].add(v)\n        tree[v].add(u)\n    def dfs(start):\n        stack = [(start, 0)]\n        while stack:\n            u, d = stack.pop()\n            for v in tree[u] - {d}:\n                if v == start:\n                    return d\n                stack.append((v, d + 1))\n        return None\n    start = min(tree.keys())\n    d = dfs(start)\n    if d is None:\n        return \"NO\"\n    x = d + 1\n    y = d - 1\n    return \"YES\\n\" + \"\\n\".join(map(str, [x, y]))\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(visited: list[int], now_node: int, cur_x: int, cur_y: int, ans_x: int, ans_y: int) -> None:\n        nonlocal ans_x, ans_y, cur_x, cur_y\n        if now_node in visited:\n            return\n        visited.append(now_node)\n        if now_node == n - 1:\n            ans_x = cur_x\n            ans_y = cur_y\n        for next_node in tree[now_node]:\n            dfs(visited, next_node, cur_x, cur_y, ans_x, ans_y)\n    n = int(stdin.readline())\n    if n == 1:\n        return \"YES\\n0 0\"\n    tree = [set() for _ in range(n)]\n    for u, v in map(int, stdin.readlines()):\n        u -= 1\n        v -= 1\n        tree[u].add(v)\n        tree[v].add(u)\n    ans_x, ans_y = 0, 0\n    for i in range(n):\n        if not tree[i]:\n            ans_x = i\n            break\n    visited = []\n    dfs(visited, 0, ans_x, ans_y, ans_x, ans_y)\n    if not (ans_x or ans_y):\n        return \"NO\\n\"\n    ans = [ans_x, ans_y]\n    for i in range(n):\n        if not tree[i]:\n            continue\n        u, v = i, ans[0] if i == ans_x else ans[1]\n        if (u, v) not in tree[u] and (v, u) not in tree[v]:\n            ans[i] = i\n        else:\n            ans[i] = -i\n    return \"YES\\n\" + \" \".join(map(str, ans))\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the sum of numbers written\n    using two sets of numbers\n    '''\n    # read ranges\n    l, r = stdin.split()\n    l, r = int(l), int(r)\n\n    # base case: when to stop\n    if l == 1:\n        return 0\n\n    # recursive case\n    return (l % 2 + solution(str(l // 2) +'' + str(r))) % 1000000007"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is the main function. It takes the input, does some computations, and returns the solution.\n    \"\"\"\n    # Obtain the input\n    l, r = stdin.split()\n    l, r = int(l), int(r)\n\n    # Compute the solution\n    ans = 0\n\n    # Check if the range is valid\n    if l < 1 or l > 1000000000 or r < 1 or r > 1000000000:\n        raise Exception(f\"Invalid input! {l} {r}\")\n\n    # Compute the answer\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            ans += i\n        else:\n            ans -= i\n\n    # Return the answer\n    return str(ans % 1000000000)"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    ans = 0\n    i = 1\n    while True:\n        if i % 2 == 0:\n            ans += i\n            if a <= i <= b:\n                return ans % 1000000007\n        else:\n            ans += 2 * i\n            if a <= 2 * i <= b:\n                return ans % 1000000007\n        i += 1\n    return ans % 1000000007"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split(' ')]\n    l %= 2\n    r %= 2\n    nums = []\n    for i in range(l, r + 1):\n        if i % 2:\n            nums.append(i)\n        else:\n            nums.append(i + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n    return str(s % 1000000007)\n\n\ndef"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = list(map(int, stdin.split()))\n    s = 0\n    for i in range(1, r + 1):\n        if i % 2 == 0:\n            s += i\n        else:\n            s -= i\n    return s % 1000000007\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(input()))\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split(' ')]\n    odd = (r - 1) // 2\n    even = odd // 2\n    if (r - 1) % 2 == 0:\n        even += 1\n    total = (odd * 4) + 2 * even\n    return str(total % 1000000007)\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nl, r = [int(x) for x in stdin.split()]\n\nfirst = 1\nsecond = 2\n\nres = 0\nfor i in range(r - l + 1):\n    res += first if i % 2 == 0 else second\n    res %= 1000000007\n    if i % 2 == 0:\n        first, second = first + second, first\n\nprint(res)"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    from math import atan, degrees\n    \n    (ax, ay), (bx, by), (cx, cy) = eval(stdin)\n    \n    angle = atan((by - ay) / (bx - ax))\n    angle = degrees(angle) + 90\n    \n    return 'No' if angle % 360 == 0 else 'Yes'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_line = stdin.split()\n    \n    ax, ay, bx, by, cx, cy = map(int, input_line)\n    \n    if ax == bx and bx == cx:\n        print(\"No\")\n    elif ax == cx and ax == bx:\n        print(\"No\")\n    elif ay == by and by == cy:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    \n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (b - a) * (c - a) == 0:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    x, y = find_angle(a, b, c)\n    if x == 0 and y == 0:\n        return 'Yes'\n    if x == 0:\n        return 'No'\n    if y == 0:\n        return 'No'\n    return 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_abc(pts: str):\n        return [int(pt.strip()) for pt in pts.split(' ')]\n\n    abc = get_abc(stdin)\n    pts = ((abc[0], abc[1]), (abc[2], abc[3]), (abc[4], abc[5]))\n    for i in range(1, 4):\n        for j in range(i + 1, 6):\n            if not pt_on_line((pts[i][0], pts[i][1]), (pts[j][0], pts[j][1])):\n                for k in range(j + 1, 6):\n                    if pt_on_line((pts[i][0], pts[i][1]), (pts[k][0], pts[k][1])):\n                        if pt_on_line((pts[j][0], pts[j][1]), (pts[k][0], pts[k][1])):\n                            pt_on_line_angle = [a for a in angle(pts[i], pts[j], pts[k]) if a > 0]\n                            if len(pt_on_line_angle) == 1:\n                                return \"Yes\"\n                            elif len(pt_on_line_angle) == 0:\n                                return \"No\"\n                            else:\n                                continue\n                        else:\n                            continue\n                    else:\n                        continue\n            else:\n                continue\n    return \"No\"\n\ndef"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\na = [int(i) for i in stdin.split()]\n\ns = math.sqrt((a[0] - a[3])**2 + (a[1] - a[4])**2)\nb = math.sqrt((a[0] - a[2])**2 + (a[1] - a[5])**2)\nc = math.sqrt((a[0] - a[1])**2 + (a[2] - a[3])**2)"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x1, x2, x3, y1, y2, y3 = a, b, c, b, c, a\n    return 'Yes' if b >= c or x1 == x2 or y1 == y2 else 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"Yes\" if... else \"No\"\n\ndef"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(point: Tuple[int, int], radian: float) -> Tuple[int, int]:\n        x, y = point\n        sin, cos = math.sin(radian), math.cos(radian)\n        return x * cos - y * sin, x * sin + y * cos\n    points = list(map(int, stdin.split()))\n    p1 = rotate((points[0], points[1]), 0.5 * math.pi)\n    p2 = rotate((points[2], points[3]), 0.5 * math.pi)\n    p3 = rotate((points[4], points[5]), 0.5 * math.pi)\n    if (p1 == (points[2], points[3]) and p2 == (points[4], points[5])) or \\\n            (p2 == (points[4], points[5]) and p3 == (points[0], points[1])):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[k] / a[j] == a[j] / a[i] == a[i] / a[k]:\n                    cnt += 1\n    return cnt\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n-----Input-----\n\n8 3\n1 1 1 1 1 1 1 1\n\n-----Output-----\n\n24\ndef"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    l = []\n    for i in range(n-2):\n        l.append(a[i+1]/a[i])\n\n    c = 0\n    for i in range(len(l)):\n        if l[i] == k:\n            c += 1\n\n    return c\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return str\n    pass\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    s1 = int(stdin[0].split()[0])\n    s2 = int(stdin[0].split()[1])\n    s3 = int(stdin[0].split()[2])\n    l = []\n    for i in stdin[1:]:\n        l.append(i.split())\n    #print(l)\n    l.sort(key=lambda x:int(x[1]))\n    #print(l)\n    l.sort(key=lambda x:int(x[0]))\n    #print(l)\n    ans = 0\n    s1_c = 0\n    s2_c = 0\n    s3_c = 0\n    i = 0\n    while(i < s3_c):\n        #print(ans)\n        if(i == s3_c):\n            ans += int(l[i][1])\n            break\n        if(s1_c < s1):\n            ans += int(l[i][1])\n            s1_c += 1\n        elif(s1_c == s1 and s2_c < s2):\n            ans += int(l[i][1]) * 2\n            s2_c += 1\n        elif(s1_c == s1 and s2_c == s2):\n            ans += int(l[i][1])\n            s1_c = 0\n            s2_c = 0\n        i += 1\n    return ans\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    creatures = [0] * n\n    for i in range(n):\n        creatures[i] = [int(x) for x in stdin.split()]\n    return max(solution_helper(creatures, a, b, 0, 0))\n\n\ndef"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, a, b = [int(i) for i in stdin.split(\"\\n\")]\n    H = [0] * N\n    D = [0] * N\n    \n    for i in range(N):\n        H[i], D[i] = [int(x) for x in stdin.split(\"\\n\")[i].split()]\n    \n    H.sort(reverse=True)\n    D.sort(reverse=True)\n    \n    ans = 0\n    for i in range(a):\n        ans += H[i] * D[i]\n        \n    for i in range(b):\n        ans += H[i]\n    \n    return ans\n    \n    \n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, a, b = map(int, stdin.split())\n    hps = [int(x) for x in stdin.split()]\n    a, b = min(a, b), max(a, b)\n    dp = [[0] * (b + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, b + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - hps[i - 1]] + hps[i - 1])\n    return dp[n][b]\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(s) for s in stdin.split()]\n    creatures = []\n    for i in range(n):\n        creatures.append([int(s) for s in stdin.split()][1:])\n\n    def calc_damage(creatures: list, spells: list, used_spells: list) -> int:\n        damage = 0\n        for spell in spells:\n            if spell in used_spells:\n                continue\n            for creature in creatures:\n                damage += spell * creature[0]\n                used_spells.append(spell)\n                break\n        return damage\n    \n    max_damage = 0\n    for spell1 in range(a + 1):\n        for spell2 in range(b + 1):\n            damage = calc_damage(creatures, [spell1, spell2], [])\n            max_damage = max(max_damage, damage)\n    print(max_damage)\n    return \"\"\n\nsolution(\"2 1 1\\n10 15\\n6 1\")\n\nsolution(\"3 0 3\\n10 8\\n7 11\\n5 2\")\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(e) for e in stdin.split()]\n    return max(0, (a * n * (n + 1) // 2 - b * n * (n - 1) // 2) % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    first_type_health = [int(x) for x in stdin.split()]\n    max_total_damage = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_damage = 0\n            for _ in range(a):\n                total_damage += first_type_health[i]\n            for _ in range(b):\n                total_damage += first_type_health[j]\n            max_total_damage = max(max_total_damage, total_damage)\n    return max_total_damage\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum total damage of all creatures Max can deal.\n\n    >>> solution('''2 1 1\n   ... 10 15\n   ... 6 1\n   ... ''')\n    27\n    >>> solution('''3 0 3\n   ... 10 8\n   ... 7 11\n   ... 5 2\n   ... ''')\n    26\n    \"\"\"\n    n, a, b = map(int, stdin.split())\n    creatures = [list(map(int, stdin.split('\\n')[1:])) for _ in range(n)]\n    creatures.sort(key=lambda x: x[1], reverse=True)\n\n    hp, dmg = 0, 0\n    for c in creatures:\n        hp, dmg = c[0] * 2 + max(hp, dmg), c[0] + max(hp, dmg)\n        a -= 1\n        b -= 1\n        if a == 0:\n            hp = 0\n            break\n        if b == 0:\n            hp = dmg\n            break\n    return hp\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 2\\n.*\\nX..\")\n    'RL'\n    >>> solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\")\n    'DLDDLLLRRRUURU'\n    >>> solution(\"3 3 4\\n***\\n*X*\\n***\")\n    'IMPOSSIBLE'\n    \"\"\"\n    n, m, k = [int(i) for i in stdin.split()]\n    matrix = [[i for i in stdin.split()[j * m : j * m + m]] for j in range(n)]\n    start = (\n        (0, 0)\n        if \"X\" not in stdin.split()\n        else next(\n            (j, i)\n            for j in range(n)\n            for i in range(m)\n            if matrix[j][i] == \"X\"\n        )\n    )\n    if k > n * m:\n        return \"IMPOSSIBLE\"\n    queue = deque([(start[0], start[1], \"\")])\n    visited = set()\n    while queue:\n        y, x, cycle = queue.popleft()\n        if len(cycle) == k:\n            return cycle\n        if (y, x) not in visited:\n            visited.add((y, x))\n            for direction in (\"L\", \"R\", \"U\", \"D\"):\n                if matrix[y][x] == direction:\n                    new_cycle = cycle + direction\n                    new_y, new_x = y + (-1 if direction == \"U\" else 1), x + (\n                        -1 if direction == \"L\" else 1\n                    )\n                    if 0 <= new_y < n and 0 <= new_x < m and (\n                        (new_y, new_x) not in visited\n                        or len(new_cycle) < len(matrix[new_y][new_x] + cycle)\n                    ):\n                        queue.append((new_y, new_x, new_cycle))\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'D'\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = list(map(int, stdin.split()))\n    matrix = [list(stdin[i:i + m]) for i in range(0, len(stdin), m)]\n    table = {}\n    r = 1\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == \"X\":\n                if i + 1 < n:\n                    if matrix[i + 1][j] == \"X\":\n                        table[(i, j)] = (i + 1, j)\n                        table[(i + 1, j)] = (i, j)\n                        r += 1\n                if j + 1 < m:\n                    if matrix[i][j + 1] == \"X\":\n                        table[(i, j)] = (i, j + 1)\n                        table[(i, j + 1)] = (i, j)\n                        r += 1\n    if r!= k:\n        return \"IMPOSSIBLE\"\n    answer = [\"L\"] * k\n    if k == 1:\n        return answer\n    s = (0, 0)\n    for i in range(k - 1):\n        s = table[s]\n        answer[i] = \"R\"\n    return \"\".join(answer)"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # read the input\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    maze = []\n    for _ in range(n):\n        maze.append(stdin.split('\\n')[1:][_])\n    # initialize an empty list that will hold our directions\n    directions = []\n    # initialize an empty string for the final result\n    result = ''\n    # make a copy of the original maze\n    orig_maze = [maze[i][:] for i in range(n)]\n    # initialize the robot's position\n    x, y = n - 1, 0\n    # iterate while the robot has not reached the target cell\n    while len(directions) < k:\n        # reset the visited cells to a 0 array\n        visited = [[0] * m for _ in range(n)]\n        # set our current direction variable to the current direction the robot is going\n        current_direction = directions[-1] if len(directions) > 0 else 'D'\n        # create a list to store the neighbors of the current cell\n        neighbors = []\n        # if the current cell is not the first cell (index 0)\n        if x!= 0:\n            # add the neighbor that is directly to the left of the current cell to the list of neighbors\n            neighbors.append(maze[x - 1][y])\n        # if the current cell is not the last cell (index n - 1)\n        if x!= n - 1:\n            # add the neighbor that is directly to the right of the current cell to the list of neighbors\n            neighbors.append(maze[x + 1][y])\n        # if the current cell is not in the first row of the maze\n        if y!= 0:\n            # add the neighbor that is directly above the current cell to the list of neighbors\n            neighbors.append(maze[x][y - 1])\n        # if the current cell is not in the last column of the maze\n        if y!= m - 1:\n            # add the neighbor that is directly below the current cell to the list of neighbors\n            neighbors.append(maze[x][y + 1])\n        # if the current cell is not in the first row, first column or last row, last column of the maze\n        if x!= 0 and y!= 0 and x!= n - 1 and y!= m - 1:\n            # add the neighbor that is directly above to the left of the current cell to the list of neighbors\n            neighbors.append(maze[x - 1][y - 1])\n            # add the neighbor that is directly above to the right of the current cell to the list of neighbors\n            neighbors.append(maze[x - 1][y + 1])\n            # add the neighbor that is directly below to the left of the current cell to the list of neighbors\n            neighbors.append(maze[x + 1][y - 1])\n            # add the neighbor that is directly below to the right of the current cell to the list of neighbors\n            neighbors.append(maze[x + 1][y + 1])\n        # if the current cell is not in the first row, last column or last row, first column of the maze\n        if x!= 0 and y!= 0 and x!= n - 1 and y!= m - 1:\n            # add the neighbor that is directly above to the left of the current cell to the list of neighbors\n            neighbors.append(maze[x][y - 1])\n            # add the neighbor that is directly above to the right of the current cell to the list of neighbors\n            neighbors.append(maze[x][y + 1])\n            # add the neighbor that is directly below to the left of the current cell to the list of neighbors\n            neighbors.append(maze[x - 1][y])\n            # add the neighbor that is directly below to the right of the current cell to the list of neighbors\n            neighbors.append(maze[x + 1][y])\n        # if the current cell is not in the first column of the maze\n        if y!= 0:\n            # add the neighbor that is directly above the current cell to the list of neighbors\n            neighbors.append(maze[x][y - 1])\n        # if the current cell is not in the last column of the maze\n        if y!= m - 1:\n            # add the neighbor that is directly below the current cell to the list of neighbors\n            neighbors.append(maze[x][y + 1])\n        # if the current cell is in the first column of the maze\n        if y == 0:\n            # add the neighbor that is directly above the current cell to the list of neighbors\n            neighbors.append(maze[x][y + 1])\n        # if the current cell is in the last column of the maze\n        if y == m - 1:\n            # add the neighbor that is directly below the current cell to the list of neighbors\n            neighbors.append(maze[x][y - 1])\n        # if the current cell is in the first row of the maze\n        if x == 0:\n            # add the neighbor that is directly to the right of the current cell to the list of neighbors\n            neighbors.append(maze[x + 1][y])\n        # if the current cell is in the last row of the maze\n        if x == n - 1:\n            # add the neighbor that is directly to the left of the current cell to the list of neighbors\n            neighbors.append(maze[x - 1][y])\n        # if the current cell is in the first column of the maze\n        if x == 0 and y == 0:\n            # add the neighbor that is directly below the current cell to the list of neighbors\n            neighbors.append(maze[x + 1][y])\n        # if the current cell is in the last column of the maze\n        if x == n - 1 and y == m - 1:\n            # add the neighbor that is directly above the current cell to the list of neighbors\n            neighbors.append(maze[x - 1][y])"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maze = []\n    for i in range(n):\n        row = stdin.splitlines()[i]\n        maze.append(list(row))\n    visited = {}\n    for row in maze:\n        for i, x in enumerate(row):\n            if x!= 'X':\n                visited[x] = [i, row.index(x)]\n    s = []\n    def move(cnt, pos, dir, rev):\n        nonlocal s, visited\n        for i in range(dir):\n            pos = [pos[0] + (1 if dir > 0 else -1), pos[1] + (1 if dir > 0 else -1)]\n            if maze[pos[0]][pos[1]] == '*':\n                return False\n            if pos[0] < 0 or pos[1] < 0:\n                return False\n            if pos[0] >= n or pos[1] >= m:\n                return False\n            if (pos[0], pos[1]) in visited:\n                if (pos[0], pos[1]) == visited[(pos[0], pos[1])]:\n                    if cnt == visited[(pos[0], pos[1])][0]:\n                        continue\n                    else:\n                        return False\n            if maze[pos[0]][pos[1]] == 'X':\n                return False\n            if (pos[0], pos[1]) in visited:\n                if (pos[0], pos[1])!= visited[(pos[0], pos[1])]:\n                    return False\n        if pos[0]!= visited[(pos[0], pos[1])][0]:\n            return False\n        if cnt < visited[(pos[0], pos[1])][0]:\n            return False\n        if rev:\n            s.append(cnt)\n            s.append(visited[(pos[0], pos[1])][0])\n            visited[(pos[0], pos[1])][0] = cnt\n        else:\n            s.append(visited[(pos[0], pos[1])][0])\n            visited[(pos[0], pos[1])][0] = cnt\n        if cnt + 1 == k:\n            if len(s) < 2:\n                s.append(1)\n                s.append(0)\n                visited[(pos[0], pos[1])][0] = cnt + 1\n            return True\n        else:\n            move(cnt + 1, pos, dir, True)\n            move(cnt + 1, pos, dir, False)\n    if move(1, visited['.'][1], 3, True):\n        print(''.join(map(str, s)))\n    else:\n        print('IMPOSSIBLE')"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"\"\"\n5 6 14\n..***.\n*...X.\n..*...\n..*.**\n....*.\n\"\"\".strip()))"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    grid = [stdin.split()]\n    for _ in range(n - 1):\n        grid.append(stdin.split())\n    queue = deque([(grid, 0)])\n    while queue:\n        grid, cnt = queue.popleft()\n        if cnt == k:\n            return ''.join(grid[0])\n        if cnt > k:\n            continue\n        x, y = [i for i, row in enumerate(grid) for j, symbol in enumerate(row) if symbol == 'X'][0]\n        if grid[x - 1][y]!= 'X' and grid[x - 1][y]!= '*':\n            queue.append((grid[:x - 1] + [grid[x - 1] + 'D'] + grid[x + 1:], cnt + 1))\n        if grid[x + 1][y]!= 'X' and grid[x + 1][y]!= '*':\n            queue.append((grid[:x] + [grid[x] + 'R'] + grid[x + 2:], cnt + 1))\n        if grid[x][y - 1]!= 'X' and grid[x][y - 1]!= '*':\n            queue.append((grid[:x] + [grid[x][:y - 1] + 'U'] + grid[x][y - 1:] + grid[x][y + 1:], cnt + 1))\n        if grid[x][y + 1]!= 'X' and grid[x][y + 1]!= '*':\n            queue.append((grid[:x] + [grid[x][:y] + 'D'] + grid[x][y + 1:] + grid[x][y + 2:], cnt + 1))\n    return 'IMPOSSIBLE'\nprint(solution(stdin))\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This problem was asked by Jane Street.\n\n    Let's define a quantum state as a vector in\n    the computational basis. For example, if\n    we have 3 qubits, the state might be represented\n    as:\n\n    [1, 0, 0]\n    [0, 0, 0]\n    [0, 0, 0]\n    [0, 0, 1]\n    [0, 0, 0]\n    [0, 1, 0]\n    [0, 0, 0]\n    [1, 0, 0]\n    [0, 1, 0]\n\n    Now, suppose we measure the state\n    and obtain the values:\n\n    [1, 1, 1, 0, 0, 0, 0, 1, 1, 1]\n\n    We can see that this corresponds to measuring\n    qubits 1 and 2, and qubit 3 is missing.\n    From this we can see that the missing qubit\n    must have a value of 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  a, b = [int(x) for x in stdin.split(' ')]\n  return str(a * b)\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(a * b // gcd(a, b))\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(1)\n    return \"\"\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return f\"{a - b} {int((a * a - b * b)**0.5)}\"\n\"\"\"\n\ndef"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def fold(a, b):\n        for _ in range(2):\n            b = max(a, b)\n            a, b = b, a\n        return a, b\n    a, b = map(int, stdin.split(' '))\n    sq = [1]\n    a -= b\n    while a > 0:\n        sq.append(sq[-1] + 1)\n        a -= b\n    sq.pop()\n    return sum(sq) // 2\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split(' ')]\n    cnt = 0\n    while a % 2 == 0:\n        a = a // 2\n        b = b // 2\n        cnt += 1\n    while b % 2 == 0:\n        a, b = b, a\n        cnt += 1\n    return cnt"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n\n    if a > b:\n        return b // a\n\n    return 1 + solution(str(b - a))\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b == 0:\n        return 1\n    if a % b == 0:\n        return a // b\n    return (a // b) + 1\n'''\n\ndef"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(stdin.split()[i]) for i in range(1, int(stdin.split()[0]) + 1)]\n    p = [i for i in range(1, int(stdin.split()[0]) + 1)]\n    a = l[:len(l) // 2]\n    b = l[len(l) // 2:]\n    # print(p, a, b)\n    a_b = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            a_b.append(i + 1)\n\n    for i in range(len(a_b)):\n        for j in range(len(p)):\n            if p[j] == a_b[i]:\n                p[j] = i + 1\n                break\n\n    return \" \".join(str(i) for i in p)\n\n\nprint(solution(\"5 4 2 3 1\"))\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    b = list(map(int, stdin.readline().strip().split(' ')))\n    return''.join(map(str, sorted(b, key=a.index)))\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip('\\n')\n    stdin = stdin.split('\\n')\n    p1 = list(map(int, stdin[0].split(' ')))\n    p2 = list(map(int, stdin[1].split(' ')))\n    n = len(p1)\n    p = [0]*n\n    for i in range(n):\n        for j in range(n):\n            if p1[i] == p2[j]:\n                p[i] = p1[i]\n                break\n    if p[0] == 0:\n        p[0] = n\n    return''.join(map(str, p))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    return \" \".join([str(i) for i in list(stdin.split())])\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    b = list(map(int, stdin.readline().split(' ')))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i]!= b[i]:\n            a[i], b[i] = b[i], a[i]\n            break\n    return''.join(map(str, a))\n\n\nprint(solution('4\\n1 1 3 4\\n1 4 3 4'))\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns a solution to a set of linear equations.\n    Parameters:\n        stdin (str): Input string to parse.\n    Returns:\n        str: String representation of a solution.\n    '''\n    # Get input\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    \n    # Get the sum of a and b\n    sum_a = sum(a)\n    sum_b = sum(b)\n    \n    # If the sum of a and b is odd, the sum of a and b can't be evenly divided by n\n    if sum_a % 2!= sum_b % 2:\n        return \"IMPOSSIBLE\"\n    \n    # If the sum of a and b is even, find the maximum a_i and minimum b_i\n    else:\n        max_a = max(a)\n        min_b = min(b)\n        \n        # If a and b are not the same, there is a unique solution, so return the reverse of the two\n        if max_a!= min_b:\n            return str(max_a) + \" \" + str(min_b)\n        \n        # If a and b are the same, there is no unique solution, so return IMPOSSIBLE\n        else:\n            return \"IMPOSSIBLE\"\n\n\n\n'''\n    Given two sorted arrays, find the intersection of those arrays.\n    For example, given the following arrays:\n    nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].\n    nums1 = [4, 9, 5], nums2 = [9, 4, 9, 8, 4], return [9, 4].\n    Note: each array will have at least 1 element.\n    \n    Input:\n        strArr: string array of numbers seperated by a space\n    Output:\n        str: string representation of intersection of the two arrays\n    \n    Rules:\n        - Each array is unique\n        - Each array is sorted\n        - Each array has at least 1 element\n    \n    Edge Cases:\n        - The intersection is empty\n        - The intersection has multiple elements\n        - The intersection is equal to either array\n'''\nimport math\n\ndef"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the permutation Sengoku could have had on that night.\"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    b = [int(x) for x in stdin.split(\"\\n\")[2].split()]\n    res = set(range(1, n + 1))\n    res_a = set(a)\n    res_b = set(b)\n    res_a_b = res_a.intersection(res_b)\n    res_a_b.discard(n)\n    res = res - res_a_b\n    print(*sorted(list(res)))\n    return\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nInput\n\n5\n1 2 3 4 3\n1 2 5 4 5\n\nOutput\n\n1 2 5 4 3\n\"\"\"\nimport unittest\n\n\ndef"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n    (n, a, b) = [int(x) for x in stdin.split('\\n')[:3]]\n    res = []\n    for i in range(n):\n        if i not in a and i not in b:\n            res.append(i)\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    p = [0] * n\n    for i in range(n):\n        if a[i]!= b[i]:\n            p[a[i] - 1] = b[i]\n            p[b[i] - 1] = a[i]\n    for i in range(n):\n        if p[i] == 0:\n            p[i] = i + 1\n    return''.join(map(str, p))\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split(' ')))\n    counter = 0\n    min_diff = a\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                diff = abs(a - (360/n * (i + j + k)))\n                if diff < min_diff:\n                    min_diff = diff\n                    counter = 1\n                    a1, a2, a3 = i+1, j+1, k+1\n    if counter == 1:\n        return f'{a1} {a2} {a3}'\n    else:\n        return '0 0 0'\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 3:\n        return '1 2 3'\n    angles = []\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                angles.append(int(math.fabs(a - (a + (i * 180 + 90) * 180 + (j * 180 - 90) * 180 + (k * 180 - 90) * 180) / 360) * 360))\n    angles.sort()\n    return''.join(map(str, [n, n - 1, n - 2]))\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    m = n\n    cnt = 0\n    while n >= 3:\n        n -= 1\n        cnt += 1\n    if n == 2:\n        a = min(a, 90 - cnt * 90 / 3)\n        print(1, 2, cnt + 1)\n    if n == 1:\n        a = min(a, 180 - cnt * 180 / 3)\n        print(1, cnt + 1)\n\n    return\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets three distinct vertices for a regular triangle using the angle difference approach\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: vertices\n    \"\"\"\n\n    n, a = [int(x) for x in stdin.split()]\n\n    a = a % 180\n\n    if a == 0 or a == 90:\n        return '1 2 3'\n\n    if a == 90 or a == 180:\n        return '2 1 3'\n\n    if a == 45:\n        return '3 1 2'\n\n    if a == 60:\n        return '1 2 3'\n\n    a = a % 180\n    b = 180 - a\n\n    s = (n - 3) % 6\n\n    if s == 0:\n        return '1 2 3'\n\n    if s == 1:\n        return '1 3 2'\n\n    if s == 2:\n        return '2 1 3'\n\n    if s == 3:\n        return '2 3 1'\n\n    if s == 4:\n        return '3 1 2'\n\n    if s == 5:\n        return '3 2 1'\n\n    return '3 2 1'\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, a = map(int, stdin.split())\n    v1, v2, v3 = 1, 2, 3\n    print(v1, v2, v3)\n    '''\n\n    n, a = map(int, stdin.split())\n    a *= math.pi/180\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a%b\n        return a\n    def lcm(a, b):\n        return a*b//gcd(a, b)\n    l = lcm(n, 3)\n    print(l)\n    a = math.degrees(a)\n    s = math.sin(a)\n    c = math.cos(a)\n    d = (c*n - s)/n\n    print(d)\n    print(math.sin(a), math.cos(a))\n    import math\n    def gcd(a, b):\n        while b:\n            a, b = b, a%b\n        return a\n    def lcm(a, b):\n        return a*b//gcd(a, b)\n    l = lcm(n, 3)\n    print(l)\n    a = math.degrees(a)\n    s = math.sin(a)\n    c = math.cos(a)\n    d = (c*n - s)/n\n    print(d)\n    print(math.sin(a), math.cos(a))\n\n    #import math\n    #print(math.sin(a), math.cos(a))\n    #print(math.sin(math.pi*2/n))\n    #print(math.sin(math.pi/n))\n    #print(n*math.sin(math.pi/n) - math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi/n) + math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) + math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2/n))\n    #print(math.sqrt(3)*n*math.sin(math.pi*2/n) - math.sqrt(3)*math.cos(math.pi*2"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split(' ')]\n    v = [0] * n\n    for i in range(n):\n        v[i] = 2 * i + 1\n    v = sorted(v, key=lambda x: a - 360 * math.acos(1 - 2 * (x % 2) / (2 * n + 1)) / math.pi * 180)\n    for i in v:\n        print(i, end=' ')\n    return ''\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(n) for n in stdin.split(' ')]\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i, j, k) in ans or (j, i, k) in ans or (k, j, i) in ans:\n                    continue\n                if abs(a - calculate_angle(i, j, k)) < abs(a - calculate_angle(ans[0], ans[1], ans[2])):\n                    ans = (i, j, k)\n    return''.join([str(n) for n in ans])\n\n\ndef"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n < 3:\n        return \"\"\n    # n = 4, a = 67\n    lst = [i for i in range(1, n + 1)]\n    lst.append(lst[0])\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if i == 0 and j == n:\n                j = 1\n            elif j == n:\n                j = 0\n            elif j == i + 1:\n                j = i + 2\n            if j == 0 and i == n - 1:\n                j = n\n            elif j == n:\n                j = 1\n            res.append([j, i + 1])\n    res = sorted(res, key=lambda x: abs(a - (x[0] - x[1]) * 180 / n))\n    return f\"{res[0][0]} {res[0][1]} {res[1][0]} \"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    numbers = list(map(int, data[1:]))\n    i = 0\n    while i < n:\n        if numbers[i] == 0:\n            numbers.pop(i)\n            numbers.append(0)\n            numbers.pop(i)\n            numbers.append(0)\n            i += 1\n        i += 1\n    print(\"YES\" if numbers.count(0) == 1 else \"NO\")\n    return \"\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Tries all possible rotations to find out if it is possible to make the pointer\n    point to zero after all of them.\n    '''\n    rotations = stdin.splitlines()\n    n = int(rotations[0])\n    for angle in rotations[1:]:\n        angle = int(angle)\n        if angle % 360!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rotations = int(stdin)\n    if rotations == 0:\n        return \"YES\"\n\n    for i in range(rotations):\n        angle = int(stdin)\n        if abs(angle - 0) == 360:\n            return \"YES\"\n\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    angle_list = []\n    for _ in range(n):\n        angle_list.append(int(stdin))\n    \n    if sum(angle_list)%360 == 0:\n        return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin)\n    list_a = []\n    for i in range(n):\n        list_a.append(int(stdin))\n\n    for i in range(len(list_a)):\n        if list_a[i] == 0:\n            continue\n        if list_a[i] > 0:\n            print(\"YES\")\n            break\n        elif list_a[i] < 0:\n            print(\"NO\")\n            break\n\n    list_a.sort()\n    print(list_a)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n============\nMy Solution\n============\n\ndef"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n10\\n10\\n10\")\n    'YES'\n    >>> solution(\"3\\n10\\n20\\n30\")\n    'NO'\n    >>> solution(\"3\\n120\\n120\\n120\")\n    'YES'\n    \"\"\"\n    # TODO: your code here\n    pass\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(0, 181, n):\n        for b in range(0, 181, n):\n            if a + b == 0:\n                return \"YES\"\n    return \"NO\"\n    \n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find if there exists rotations that make the pointer point at zero after n rotations.\n    \"\"\"\n    n = int(stdin)\n    for _ in range(n):\n        angle = int(stdin)\n        if angle % 360 == 0:\n            print(\"YES\")\n            return \"YES\"\n    print(\"NO\")\n    return \"NO\""
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rotations = list(map(int, stdin.split()))\n    # take the first rotaion and test if its counterclockwise or clockwise\n    first_rotation = rotations[0]\n    first_pointer_value = 0\n    first_direction = 1 if first_rotation >= 180 else -1\n\n    # take the second rotation and test if its counterclockwise or clockwise\n    second_rotation = rotations[1]\n    second_pointer_value = 0\n    second_direction = 1 if second_rotation >= 180 else -1\n\n    # take the third rotation and test if its counterclockwise or clockwise\n    third_rotation = rotations[2]\n    third_pointer_value = 0\n    third_direction = 1 if third_rotation >= 180 else -1\n\n    # rotate the lock n times\n    # loop over all rotations\n    for _ in range(n):\n        # for each rotation, determine the direction (clockwise or counterclockwise)\n        # based on the value of the pointer after the rotation\n        first_pointer_value = first_direction * first_pointer_value\n        second_pointer_value = second_direction * second_pointer_value\n        third_pointer_value = third_direction * third_pointer_value\n\n        # after each rotation, check if the pointer is now pointing at zero\n        # if it is, break the loop\n        if first_pointer_value == 0 and second_pointer_value == 0 and third_pointer_value == 0:\n            break\n\n    if first_pointer_value == 0 and second_pointer_value == 0 and third_pointer_value == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - b) >= d:\n        if abs(a - c) >= d:\n            if abs(b - c) >= d:\n                print(abs(a - c))\n            else:\n                print(abs(b - c))\n        else:\n            print(abs(a - c))\n    else:\n        if abs(b - c) >= d:\n            print(abs(a - c))\n        else:\n            print(abs(b - c))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    if abs(a - b) > d and abs(a - c) > d and abs(c - b) > d:\n        return max(abs(a - b), abs(a - c), abs(c - b)) + 1\n    return abs(a - b) + abs(a - c) + abs(c - b)"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    return str(max(0, a + b + c - d - d))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return max(0, 2 * (a + b + c) - 2 * d)\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum duration (in seconds) of the performance.\"\"\"\n    a, b, c, d = map(int, stdin.split())\n    return str(max(0, 2 * abs(a - c) - d,\n                   2 * abs(b - c) - d,\n                   2 * abs(a - b) - d,\n                   2 * abs(c - d) - d))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum duration (in seconds) of the performance.\"\"\"\n    [a, b, c, d] = [int(num) for num in stdin.split(' ')]\n    duration = 0\n    while True:\n        if a == b == c:\n            return duration\n        duration += 1\n        a, b, c = a + 1, b, c + 1\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Agafon, Boniface and Konrad are located in positions a, b and c respectively.\n    Rope is straight and infinite in both directions.\n    At the beginning of the performance, the distance between each pair of ropewalkers was at least d.\n    Agafon, Boniface and Konrad can not move at the same time (Only one of them can move at each moment).\n    Ropewalkers can walk on the rope.\n    In one second, only one ropewalker can change his position.\n    Every ropewalker can change his position exactly by 1 (i. e. shift by 1 to the left or right direction on the rope).\n    Agafon, Boniface and Konrad can not move at the same time (Only one of them can move at each moment).\n    Ropewalkers can walk to negative coordinates, due to the rope is infinite to both sides.\n\n    :param stdin: str\n    :return: str\n    \"\"\"\n    a, b, c, d = list(map(int, stdin.split()))\n    return '2'\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    return (max(b - c, 0) + max(c - a, 0) + max(a - b, 0) + max(b - d, 0) + max(d - c, 0)) * 2\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(num) for num in stdin.split(' ')]\n    print(max([(a - b) // d + (a - c) // d, (b - a) // d + (b - c) // d, (c - a) // d + (c - b) // d]))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(n) for n in stdin.split())\n    return str(max(0, d - max((a, b, c))))\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split(\" \")]\n    return str(math.ceil(math.sqrt(x * y)))\n\n\ndef"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(f(int(stdin.readline().strip()), int(stdin.readline().strip())))\n\ndef"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return x * y - (x * (y // 2) + (y // 2) * (x // 2))\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 1 + solution(str(a), str(b)) if a % b == 0 else solution(str(a), str(b))\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x, y = map(int, stdin.split())\n    print(x, y)\n    return x, y\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    print(1) if a == 0 or b == 0 else print(a + b)\n\nsolution(input())\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    \n    def gcd(a, b):\n        while a % b!= 0:\n            a, b = b, a % b\n        return b\n    \n    def f(a, b):\n        if b == 0:\n            return 0\n        return 1 + f(a, b - gcd(a, b))\n    \n    return f(x, y)\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    ans = 0\n    while b!= 0:\n        ans += 1\n        a, b = b, a % b\n    return str(ans)\ndef"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split(' ')]\n    def f(x: int, y: int) -> int:\n        if x == 0: return 0\n        if y == 0: return 1\n        a = x\n        b = y\n        if b % a == 0: return 1\n        return 1 + f(a, b % a)\n    return str(f(x, y))\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split(\" \")))\n    if y == 0:\n        return x\n    else:\n        return 1 + solution(f\"{x} {y // x}\")\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and output a string by spliting stdin by ':' character\"\"\"\n    input_str_list = stdin.split(\":\")\n    input_str_list = [input_str.split() for input_str in input_str_list]\n    input_str_list = [[int(i) for i in input_str if i!= \"-1\" and i!= \"\"] for input_str in input_str_list]\n    input_str_list = [item for item in input_str_list if len(item) == 2]\n    return \"Yes\" if input_str_list else \"No\""
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin or not stdin.strip():\n        return \"No\"\n    data = stdin.splitlines()\n    n = int(data[0])\n    a = []\n    b = []\n    for i in range(1, n + 1):\n        a.append(int(data[i].split(\" \")[0]))\n        b.append(int(data[i].split(\" \")[1]))\n    all_data = list(zip(a, b))\n    c = Counter()\n    for (a, b) in all_data:\n        c[a] += 1\n        c[b] += 1\n        if a == b == -1:\n            continue\n        elif a == -1 and c[b + 1]!= 0:\n            continue\n        elif b == -1 and c[a - 1]!= 0:\n            continue\n        elif a == b:\n            continue\n        else:\n            c[a] -= 1\n            c[b] -= 1\n            if c[a] > 0 or c[b] > 0:\n                return \"No\"\n            else:\n                continue\n    return \"Yes\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 -1\\n-1 4\\n-1 6\\n\")\n    'Yes'\n    \"\"\"\n    N, A, B = [int(n) for n in stdin.split()]\n    A = [int(i) for i in stdin.split()[1::2]]\n    B = [int(i) for i in stdin.split()[2::2]]\n    return 'Yes' if set(A) == set(B) == {1} or set(A) == set(B) == {2 * N} else 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n-1 4\\n-1 6\")\n    Yes\n    \"\"\"\n\n    def calculate(s: str) -> int:\n        \"\"\"\n        >>> calculate('1\\n-1 4')\n        -1\n        >>> calculate('3\\n-1 4')\n        -1\n        \"\"\"\n        if len(s) == 2:\n            return int(s[1])\n        return int(s[1]) - int(s[0]) - 1\n\n    n = int(stdin.readline())\n    records = []\n    for _ in range(n):\n        a, b = map(calculate, stdin.readline().strip().split(\" \"))\n        records.append((a, b))\n\n    # this part could be simplified using a dictionary, but the target is not to change the running time.\n    # Using a dictionary is not an option either.\n    counts = dict()\n    for a, b in records:\n        if a in counts.keys():\n            counts[a] += 1\n        else:\n            counts[a] = 1\n        if b in counts.keys():\n            counts[b] -= 1\n        else:\n            counts[b] = -1\n\n    for a, b in records:\n        if counts[a] == 0 and counts[b] == 0:\n            continue\n        if counts[a] == 0 or counts[b] == 0:\n            return \"No\"\n        if counts[a] > 0 and counts[b] < 0:\n            continue\n        if counts[a] < 0 and counts[b] > 0:\n            continue\n        if counts[a] > 0 and counts[b] > 0:\n            if a!= b:\n                return \"No\"\n            continue\n        if counts[a] < 0 and counts[b] < 0:\n            if a!= b:\n                return \"No\"\n            continue\n    return \"Yes\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... -1 4\n   ... -1 6\n   ... ''')\n    'Yes'\n\n    >>> solution('''3\n   ... 1 -1\n   ... -1 4\n   ... -1 6\n   ... ''')\n    'No'\n    \"\"\"\n   ..."
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 -1\\n-1 4\\n-1 6\")\n    Yes\n    \"\"\"\n    n = int(stdin)\n    a, b = [], []\n    for i in range(1, n + 1):\n        a_i, b_i = map(int, stdin.split(\"\\n\")[i].split())\n        if a_i!= -1:\n            a.append(a_i)\n            b.append(b_i)\n\n    result = \"No\"\n    for i in range(n):\n        if b[i] - a[i] - 1!= a[i - 1] - b[i - 1] - 1:\n            result = \"No\"\n            break\n        if a[i] == -1 or b[i] == -1:\n            continue\n        if a[i] == b[i]:\n            result = \"Yes\"\n            break\n\n    return result\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdrin='''\n   ... 2\n   ... 1 -1\n   ... -1 4\n   ... -1 6\n   ... ''')\n    Yes\n    >>> solution(stdrin='''\n   ... 3\n   ... 1 -1\n   ... -1 4\n   ... -1 6\n   ... ''')\n    No\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = []\n    b = []\n    for _ in range(n):\n        ai, bi = map(int, stdin.readline().strip().split())\n        a.append(ai)\n        b.append(bi)\n    a_set = set()\n    b_set = set()\n    for i, v in enumerate(a):\n        if v == -1:\n            a_set.add(i)\n        elif v == 0:\n            b_set.add(i)\n        else:\n            a_set.add(i)\n            b_set.add(i)\n    if len(a_set & b_set) == 0:\n        return \"No\"\n    a_dict = {}\n    b_dict = {}\n    for i in a_set:\n        a_dict[i] = 0\n    for i in b_set:\n        b_dict[i] = 0\n    for i in range(n):\n        a_dict[i] += 1\n        b_dict[i] += 1\n    for i in a_set:\n        if a_dict[i] > 1:\n            a_dict[i] -= 1\n            b_dict[i] -= 1\n    for i in b_set:\n        if b_dict[i] > 1:\n            a_dict[i] -= 1\n            b_dict[i] -= 1\n    for i, v in enumerate(a):\n        if v!= -1 and v!= 0 and v!= 1 and b_dict[i]!= 0:\n            return \"No\"\n        if v == -1 and b_dict[i]!= 1:\n            return \"No\"\n    for i, v in enumerate(b):\n        if v!= -1 and v!= 0 and v!= 1 and a_dict[i]!= 0:\n            return \"No\"\n        if v == -1 and a_dict[i]!= 1:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a pair of numbers in a string\n\n    Args:\n        stdin (str): the string input\n\n    Returns:\n        str: Yes if there is a pair, No if there isn't\n    \"\"\"\n\n    num_persons = int(stdin.split(\"\\n\")[0])\n    records = stdin.split(\"\\n\")[1:]\n    records.pop()\n\n    seen_persons = {}\n\n    for record in records:\n        persons = record.split(\" \")\n\n        persons = list(map(lambda x: int(x), persons))\n\n        if len(persons) == 2:\n            if records.count(record) == 1:\n                if seen_persons.get(persons[0]):\n                    return \"No\"\n                seen_persons[persons[0]] = persons[1]\n            else:\n                if seen_persons.get(persons[1]):\n                    return \"No\"\n                seen_persons[persons[1]] = persons[0]\n        else:\n            if persons[0] not in seen_persons:\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = []\n    b = []\n    for i in range(0, n):\n        a_temp, b_temp = map(int, stdin.readline().split(' '))\n        a.append(a_temp)\n        b.append(b_temp)\n    c = []\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            c.append(b[j] - a[j] - 1)\n    c.sort()\n    for i in range(0, n):\n        if a[i] == -1 or b[i] == -1:\n            continue\n        if c[i] == c[i + 1]:\n            continue\n        else:\n            print('No')\n            return\n    print('Yes')\n    return\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gerald's decent set must be at least three points of intersection of three distinct integer vertical straight lines and three distinct integer horizontal straight lines, except for the average of these nine points. In other words, there must be three integers x_1, x_2, x_3 and three more integers y_1, y_2, y_3, such that x_1 < x_2 < x_3, y_1 < y_2 < y_3 and the eight point set consists of all points (x_{i}, y_{j}) (1 \u2264 i, j \u2264 3), except for point (x_2, y_2).\"\"\"\n\"\"\"Gerald is very particular to eight point sets. He thinks that any decent eight point set must consist of all pairwise intersections of three distinct integer vertical straight lines and three distinct integer horizontal straight lines, except for the average of these nine points. In other words, there must be three integers x_1, x_2, x_3 and three more integers y_1, y_2, y_3, such that x_1 < x_2 < x_3, y_1 < y_2 < y_3 and the eight point set consists of all points (x_{i}, y_{j}) (1 \u2264 i, j \u2264 3), except for point (x_2, y_2).\"\"\"\n\ndef"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = [int(input().split()) for _ in range(8)]\n    y = [int(input().split()) for _ in range(8)]\n    x1, x2, x3, y1, y2, y3, z1, z2, z3 = [\n        x[0][1] - x[1][1],\n        x[0][1] - x[2][1],\n        x[0][1] - x[3][1],\n        y[0][0] - y[1][0],\n        y[0][0] - y[2][0],\n        y[0][0] - y[3][0],\n        x[1][1] - x[2][1],\n        x[1][1] - x[3][1],\n        x[2][1] - x[3][1],\n        y[1][0] - y[2][0],\n        y[1][0] - y[3][0],\n        y[2][0] - y[3][0]\n    ]\n    print(\"ugly\" if (x1 < x2 < x3 and y1 < y2 < y3 and z1 < z2 < z3) else \"respectable\")\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return'respectable' or 'ugly' depending on the given input\"\"\"\n    points = []\n    for line in stdin.splitlines():\n        points.append(tuple(map(int, line.split())))\n\n    def distance(point1, point2):\n        \"\"\"Return euclidean distance between two points\"\"\"\n        return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)\n\n    def detect_horizontal_intersections(points):\n        \"\"\"Return a list of intersections with horizontal lines\"\"\"\n        intersections = []\n        for i, point1 in enumerate(points):\n            for point2 in points[i + 1 :]:\n                if point1[0] == point2[0]:\n                    intersections.append((point1[0], point2[1]))\n        return intersections\n\n    def detect_vertical_intersections(points):\n        \"\"\"Return a list of intersections with vertical lines\"\"\"\n        intersections = []\n        for i, point1 in enumerate(points):\n            for point2 in points[i + 1 :]:\n                if point1[1] == point2[1]:\n                    intersections.append((point1[0], point2[1]))\n        return intersections\n\n    def intersections(points):\n        \"\"\"Return a list of all intersections\"\"\"\n        intersections = detect_horizontal_intersections(points)\n        intersections.extend(detect_vertical_intersections(points))\n        return intersections\n\n    def average_intersection(points):\n        \"\"\"Return the average of all intersections\"\"\"\n        intersections = intersections(points)\n        return sum(intersections) / len(intersections)\n\n    def respect_decency_rules(points):\n        \"\"\"Return'respectable' if the given points correspond to Gerald's rules\"\"\"\n        average_intersection = average_intersection(points)\n\n        for i, point1 in enumerate(points):\n            for point2 in points[i + 1 :]:\n                if distance(point1, point2) < average_intersection:\n                    return \"ugly\"\n        return \"respectable\"\n\n    return respect_decency_rules(points)\n\n\ndef"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    list1=stdin.split()\n    for i in range(0,8):\n        for j in range(0,8):\n            for k in range(0,8):\n                if int(list1[i])<int(list1[j]) and int(list1[i])<int(list1[k]) and int(list1[j])<int(list1[k]):\n                    list1[i],list1[j],list1[k]=0,0,0\n                elif int(list1[i])>int(list1[j]) and int(list1[i])>int(list1[k]) and int(list1[j])>int(list1[k]):\n                    list1[i],list1[j],list1[k]=0,0,0\n                else:\n                    if int(list1[i])==int(list1[j]) and int(list1[j])==int(list1[k]) and int(list1[k])==int(list1[i]):\n                        list1[i],list1[j],list1[k]=0,0,0\n                    else:\n                        pass\n    if list1[2]==0 and list1[3]==0 and list1[4]==0:\n        return \"respectable\"\n    else:\n        return \"ugly\"\n\nprint(solution(\"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\"))\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    points = []\n    for line in lines:\n        x, y = line.split()\n        points.append((int(x), int(y)))\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n    x4, y4 = points[3]\n    x5, y5 = points[4]\n    x6, y6 = points[5]\n    x7, y7 = points[6]\n    x8, y8 = points[7]\n    x9 = (x1 * y2 + x2 * y1 + x3 * y4 + x4 * y3 + x5 * y6 + x6 * y5 + x7 * y8 + x8 * y7) / (x1 - x2 + x3 - x4 + x5 - x6 + x7 - x8 + x9)\n    y9 = (y1 * y2 + y2 * y1 + y3 * y4 + y4 * y3 + y5 * y6 + y6 * y5 + y7 * y8 + y8 * y7) / (y1 - y2 + y3 - y4 + y5 - y6 + y7 - y8 + y9)\n    x10 = (x1 * y3 + x2 * y4 + x3 * y1 + x4 * y2 + x5 * y7 + x6 * y8 + x7 * y5 + x8 * y6) / (x1 - x2 + x3 - x4 + x5 - x6 + x7 - x8 + x9)\n    y10 = (y1 * y3 + y2 * y4 + y3 * y1 + y4 * y2 + y5 * y7 + y6 * y8 + y7 * y5 + y8 * y6) / (y1 - y2 + y3 - y4 + y5 - y6 + y7 - y8 + y9)\n    x11 = (x1 * y5 + x2 * y6 + x3 * y7 + x4 * y8 + x5 * y1 + x6 * y2 + x7 * y3 + x8 * y4) / (x1 - x2 + x3 - x4 + x5 - x6 + x7 - x8 + x9)\n    y11 = (y1 * y5 + y2 * y6 + y3 * y7 + y4 * y8 + y5 * y1 + y6 * y2 + y7 * y3 + y8 * y4) / (y1 - y2 + y3 - y4 + y5 - y6 + y7 - y8 + y9)\n    x12 = (x1 * y7 + x2 * y8 + x3 * y9 + x4 * y10 + x5 * y11 + x6 * y12 + x7 * y1 + x8 * y2 + x9 * y3 + x10 * y4) / (x1 - x2 + x3 - x4 + x5 - x6 + x7 - x8 + x9)\n    y12 = (y1 * y7 + y2 * y8 + y3 * y9 + y4 * y10 + y5 * y11 + y6 * y12 + y7 * y1 + y8 * y2 + y9 * y3 + y10 * y4) / (y1 - y2 + y3 - y4 + y5 - y6 + y7 - y8 + y9)\n    x13 = (x1 * y9 + x2 * y10 + x3 * y11 + x4 * y12 + x5 * y13 + x6 * y14 + x7 * y15 + x8 * y16 + x9 * y1 + x10 * y2 + x11 * y3 + x12 * y4) / (x1 - x2 + x3 - x4 + x5 - x6 + x7 - x8 + x9)\n    y13 = (y1 * y9 + y2 * y10 + y3 * y11 + y4 * y12 + y5 * y13 + y6 * y14 + y7 * y15 + y8 * y16 + y9 * y1 + y10 * y2 + y11 * y3 + y12 * y4) / (y1 - y2 + y3 - y4 + y5 - y6 + y7 - y8 + y9)\n    x14 = (x1 * y11 + x2 * y12 + x3 * y13 + x4 * y14 + x5 * y15 + x6 * y16 + x7 * y17 + x8 * y18 + x9 * y19 + x10 * y20 + x11 * y1 + x12 * y2 + x13 * y3 + x14 * y4) / (x1 - x2 + x3 - x4 + x5 - x6 + x7 - x8 + x9)\n    y14 = (y1 * y11 + y2 * y12 + y3 * y13 + y4 * y14 + y5 * y15 + y6 * y16 + y7 * y17 + y8 * y18 + y9 * y19 + y10 * y20 + y11 * y1 + y12 * y2 + y13 * y3 + y14 * y4) / (y1 - y2 + y3 - y4 + y5 - y6 + y7 - y8 + y9)\n    x15 = (x1 * y13 + x2 * y14 + x3 * y15 + x4 * y16 + x5 * y17 + x6 * y18 + x7 * y19 + x8 * y20 + x9 * y21 + x10 * y22 + x11 * y23 + x12 * y24 + x13 * y1 + x14 * y2 + x15 * y3 + x16 * y4) / (x1 - x2 + x3 - x4 + x5 - x6 + x7 - x8 + x9)\n    y15 = (y1 * y13 + y2 * y14 + y3 * y15 + y4 * y16 + y5 * y17 + y6 * y18 + y7 * y19 + y8 * y20 + y9 * y21 + y10 * y22 + y11 * y23 + y12 * y24 + y13 * y1 + y14 * y2 + y15 * y3 + y16 * y4) / (y1 - y2 + y3 - y4 + y5 - y6 + y7 - y8 + y9)\n    x16 = (x1 * y15 + x2 * y16 + x3 * y17 + x4 * y18 + x5 * y19 + x6 * y20 + x7 * y21 + x8 * y22 + x9 * y23 + x10 * y24 + x11 * y25 + x12 * y26 + x13 * y27 + x14 * y28 + x15 * y29 + x16 * y30) / (x1 - x2 + x3 - x4 + x5 - x"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = []\n    for line in stdin.split('\\n'):\n        if len(line) < 2:\n            continue\n        x, y = line.split()\n        arr.append((int(x), int(y)))\n    arr.sort(key=lambda x: x[0])\n    if arr[0][1] == arr[1][1]:\n        return 'ugly'\n    if arr[0][1] > arr[1][1]:\n        if arr[2][1] > arr[3][1] and arr[4][1] > arr[5][1]:\n            return 'ugly'\n        if arr[2][1] > arr[3][1] and arr[4][1] < arr[5][1]:\n            return 'ugly'\n        return 'ugly'\n    return'respectable'\n\nprint(solution(input()))"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        points.append([int(line.split(' ')[0]), int(line.split(' ')[1])])\n    \n    x1, y1 = points[0][0], points[0][1]\n    x2, y2 = points[1][0], points[1][1]\n    x3, y3 = points[2][0], points[2][1]\n    x4, y4 = points[3][0], points[3][1]\n    x5, y5 = points[4][0], points[4][1]\n    x6, y6 = points[5][0], points[5][1]\n    x7, y7 = points[6][0], points[6][1]\n    x8, y8 = points[7][0], points[7][1]\n    \n    if x1 == x2 == x3 or y1 == y2 == y3 or x4 == x5 == x6 or y4 == y5 == y6 or x7 == x8 == x2 or y7 == y8 == y2:\n        return 'ugly'\n    else:\n        return'respectable'\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split('\\n'):\n        if line:\n            x, y = line.split(' ')\n            points.append((int(x), int(y)))\n\n    return \"ugly\" if is_good_set(points) == False else \"respectable\"\n\n\ndef"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f, g, h = map(int, stdin.split(\"\\n\"))\n    return \"ugly\" if (a < b < c) and (d < e < f) and (g < h < a + b) else \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for case in range(cases):\n        n, d = [int(x) for x in stdin.readline().split()]\n        if n <= d:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return None\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for i in range(test_cases):\n        n, d = map(int, stdin.readline().strip().split())\n        if d < n:\n            print(\"YES\")\n        elif d == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    return \"\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin)\n    for _ in range(cases):\n        days, opt = tuple(map(int, stdin.split(' ')))\n        days_opt = days // (opt + 1)\n        if days_opt < opt:\n            print('NO')\n        else:\n            print('YES')\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\n1 1\")\n    'YES'\n    \"\"\"\n    days = [int(d) for d in stdin.split()]\n    n, d = days\n    x = int(n / d)\n    if n % d == 0:\n        return \"YES\"\n    if n // d >= x + 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(r\"4 5\\n\")\n    NO\n    >>> solution(r\"1 1\\n\")\n    YES\n    \"\"\"\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, d = [int(x) for x in stdin.readline().split()]\n        print(\"YES\" if d <= n else \"NO\")\n    return \"\""
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for https://www.codewars.com/kata/5ddd1c7e54fe7b16e50000b0\n\n    Args:\n        stdin: a string with a line of input\n\n    Returns:\n        str: yes or no based on the limit\n    \"\"\"\n    days = (int(stdin.split()[0]), int(stdin.split()[1]))\n    return \"YES\" if days[1] <= days[0] else \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        n, d = (int(x) for x in stdin.readline().split())\n        if d <= n:\n            print('YES')\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for i in range(test_cases):\n        days_to_program = int(stdin.readline())\n        days_left = int(stdin.readline())\n        if days_to_program > days_left:\n            print('NO')\n        else:\n            print('YES')\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    loops = [0] * k\n    loop = 1\n    while loop < 10:\n        loops[loop % k - 1] += 1\n        loop = loop * 10\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i - 1] + loops[i - 2] + loops[i - 3]\n    loops[0] += loops[1]\n    loops[1] = loops[2]\n    for i in range(3, k):\n        loops[i] = loops[i"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 0\n    while (k>0):\n        n+=1\n        k=k//10\n    return n\n\nprint(solution(input()))\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 1:\n        print(-1)\n        return\n    # loop = romanToDecimal(stdin)\n    print(romanToDecimal(stdin))\n    return\n\ndef"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return \"\""
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    \n    while k > 0:\n        n *= 10\n        k -= 1\n    \n    return str(n)\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return 462\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 0\n    while k > 0:\n        n = n * 10 + 9\n        k = k - 1\n    return str(n)\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    n = stdin.readline().rstrip()\n    b = True\n    for i in range(1, len(n)):\n        a = int(n[i:])\n        b = b and (a % k == 0 or k % a == 0)\n    if b:\n        print(int(n) * k)\n    else:\n        print(-1)\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    # your solution here\n    return count\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[:n]\n    t = stdin[n:]\n    memo = dict()\n    max_len = -1\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                c = 0\n                while i + c < n and j + c < m and s[i + c] == t[j + c]:\n                    c += 1\n                if i + c < n and j + c < m:\n                    if j not in memo:\n                        memo[j] = set()\n                    memo[j].add(i + c)\n                    max_len = max(max_len, i + c)\n    res = 0\n    for i, v in memo.items():\n        for j in v:\n            res += j\n    if res < n:\n        return max_len\n    else:\n        return n\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first, second = stdin.split(\"\\n\")\n    first = first.strip()\n    second = second.strip()\n    n = len(first)\n    m = len(second)\n    return f\"{min(n, m)}\\n{' '.join(map(str, range(1, n + 1))).strip()}\"\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    def gcd(a: int, b: int) -> int:\n        a, b = min(a, b), max(a, b)\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    g = gcd(n, m)\n    return g, [i + 1 for i in range(n) if (s[i]!= t[i]) & (t[i] == '?')]\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the problem.\n\n    Parameters\n    ----------\n    stdin\n        The standard input.\n\n    Returns\n    -------\n    str\n        The string with replaced symbols.\n    \"\"\"\n    s = stdin[0]\n    t = stdin[1]\n    k = len(s)\n    d = [0]\n    for i in range(1, k + 1):\n        d.append(d[i - 1] + 1)\n        if s[i - 1] == t[i - 1]:\n            d[i] = d[i - 1]\n        else:\n            d[i] = d[i - 1] + 1\n    d = [d[i] for i in range(len(d))]\n    ans = len(s) - min(d)\n    return '\\n'.join((str(ans),''.join((str(i) for i in range(1, k + 1)))))\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split('\\n')[0].split()))\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n    first = []\n    s = s.lower()\n    t = t.lower()\n    for i, c in enumerate(s):\n        if c == '?':\n            first.append(i)\n    for i in range(m - n):\n        if t[i:i+n] in s:\n            first.append(i)\n    return str(len(first)) + '\\n' + str(' '.join(map(str, first)))\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = map(int, s.split())\n    r = stdin.split('\\n')[1]\n    d = dict.fromkeys(set(r), 0)\n    for i in range(m):\n        if r[i] not in d:\n            d[r[i]] = 1\n        else:\n            d[r[i]] += 1\n\n    l = list(set(t))\n    d1 = dict.fromkeys(l, 0)\n    for i in range(len(t)):\n        if t[i] not in d1:\n            d1[t[i]] = 1\n        else:\n            d1[t[i]] += 1\n    # print(d1)\n    # print(d)\n    count = 0\n    for i in l:\n        if i in d:\n            count += d[i]\n        if i not in d:\n            count += d1[i]\n    count1 = 0\n    for i in l:\n        if i in d:\n            count1 += d[i]\n        if i not in d:\n            count1 += d1[i]\n    # print(count)\n    # print(count1)\n    if count <= count1:\n        return count\n    else:\n        return count1\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    answer = 0\n    for i in range(n - m + 1):\n        if s[i:i + m] in t:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    \n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()[1]))\n    t = list(map(int, stdin.split()[2]))\n    \n    l = gcd(len(s), len(t))\n    \n    d = {s[i]: t[i] for i in range(l)}\n    \n    for i in range(l, len(s)):\n        if s[i] in d:\n            d[s[i]] = d[s[i]] + 1\n    \n    arr = []\n    for k, v in d.items():\n        if v % 2 == 0:\n            arr.append(k)\n    \n    return len(s) - len(arr)\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n    s_dic = {}\n    t_dic = {}\n    for i, char in enumerate(s):\n        if char not in s_dic:\n            s_dic[char] = [i + 1]\n        else:\n            s_dic[char].append(i + 1)\n    for i, char in enumerate(t):\n        if char not in t_dic:\n            t_dic[char] = [i + 1]\n        else:\n            t_dic[char].append(i + 1)\n\n    all_keys = set(s_dic.keys())\n    all_t_keys = set(t_dic.keys())\n    t_only_keys = all_keys.difference(all_t_keys)\n    s_only_keys = all_t_keys.difference(all_keys)\n\n    both_keys = t_only_keys.intersection(s_only_keys)\n\n    if not both_keys:\n        print(0)\n        print()\n        return ''\n\n    both_keys = sorted(both_keys)\n\n    s_only_keys = sorted(s_only_keys)\n    t_only_keys = sorted(t_only_keys)\n\n    res = len(s_only_keys)\n    for key in both_keys:\n        s_only_keys.remove(key)\n        t_only_keys.remove(key)\n\n    for key in both_keys:\n        if len(s_dic[key]) > 1:\n            s_only_keys.remove(key)\n        if len(t_dic[key]) > 1:\n            t_only_keys.remove(key)\n\n    for i in range(len(both_keys)):\n        s_only_keys.remove(both_keys[i])\n        t_only_keys.remove(both_keys[i])\n\n    if not t_only_keys:\n        print(res)\n        print(*s_only_keys)\n        return ''\n\n    res += len(s_only_keys)\n    s_only_keys = sorted(s_only_keys)\n    for i in range(len(s_only_keys)):\n        t_only_keys.remove(s_only_keys[i])\n\n    if not t_only_keys:\n        print(res)\n        print(*s_only_keys)\n        return ''\n\n    print(res)\n    print(*s_only_keys)\n    print(*t_only_keys)\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    s = stdin[:n]\n    t = stdin[n:]\n    \n    dp = [[False] * m for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = True\n    \n    for j in range(m):\n        dp[0][j] = t[:j + 1].find(s)!= -1\n        \n    for i in range(1, n):\n        for j in range(1, m):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j - 1] or dp[i - 1][j]\n    \n    dp[-1][-1] = dp[-1][-2]\n    \n    res = [i + 1 for i, v in enumerate(dp[-1][:-1]) if not v]\n    \n    return \" \".join([str(x) for x in res])\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, d, h = int(input[0][0]), int(input[0][2]), int(input[0][4])\n    s = {i: {'count': 0, 'height': 0} for i in range(n)}\n    for i in range(d + 1):\n        x, y = map(int, input[i + 1].split())\n        s[x]['count'] += 1\n        s[y]['count'] += 1\n        s[x]['height'] = max(s[x]['height'], h - i)\n        s[y]['height'] = max(s[y]['height'], h - i)\n    for x in s:\n        if s[x]['count'] == n - 1 and d - s[x]['height'] > 1:\n            return x\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return None"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, cur, d):\n        if d > h:\n            return False\n        if cur == n:\n            return True\n        for neigh in tree[node]:\n            if dfs(neigh, cur + 1, d + 1):\n                return True\n        return False\n\n    if d < n - 1:\n        return -1\n\n    tree = [[] for _ in range(n)]\n    for i, (a, b) in enumerate(edges, 1):\n        tree[a].append(i)\n        tree[b].append(i)\n\n    h = 0\n    d = 0\n    for v in range(1, n):\n        if dfs(v, 0, 0):\n            return''.join(map(str, edges))\n    return -1\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.splitlines())\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"all\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    print(\"-1\")\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    r = r if r >= 1 else 1\n    return f'{2 * n * r - 2 * r * r:.6f}'"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    print(3.14 * (stdin.split()[1] + stdin.split()[0]))\n    \n    return \"3.14\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    r, n = [int(i) for i in stdin.split(' ')]\n    R = (r - n) ** (1 / 2)\n    return str(R)\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(5.0)"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 1\")\n    '1.0000000'\n    >>> solution(\"100 100\")\n    '3.2429391'\n    \"\"\"\n    n, r = map(int, stdin.split())\n    n_factorial = math.factorial(n)\n    r_factorial = math.factorial(r) * math.factorial(n - r)\n    return str(round(math.sqrt(n_factorial / r_factorial), 6))\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(' ')))\n    return str(r * 2 ** (1/n))\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(float, stdin.split())\n    return str(r * 2 * math.pi / n)\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, r = map(int, stdin.split())\n    R = r / (2 * n)\n    return str(R)"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    num_of_circles = 1\n    while n * num_of_circles > 1:\n        n, r = n * num_of_circles // r, n * num_of_circles % r\n        num_of_circles += 1\n    return r * 2 / num_of_circles if r else r\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the radius of the outer circle required for building the required picture\n    '''\n    # Get the dimensions of the picture\n    dimensions = stdin.split(' ')\n    n, r = int(dimensions[0]), int(dimensions[1])\n\n    # Use pythagorean theorem to calculate the area of a circle\n    area = (r ** 2) * (3.14159265)\n\n    # Calculate the amount of area each outer circle is required to cover\n    outer_area = (n * (area / n)) + (area * (n - 1) / n)\n\n    # Calculate the radius of the inner circles\n    inner_radius = area / n\n\n    # Calculate the radius of the outer circles\n    outer_radius = (inner_radius * (outer_area / area)) + inner_radius\n\n    # Return the radius of the outer circles\n    return str(outer_radius)\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.split()[0])\n    hp, hpn = map(int, stdin.split()[1:3])\n    return str(l - (hp * hpn / (hp - hpn)))\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, p, q = map(int, stdin.split())\n    r = l // (p + q)\n    return r * p + min(p, q)"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    p, q = map(int, stdin.readline().split())\n    return str(l - max(p, q))\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def main(stdin):\n        n = int(stdin.readline())\n        harry_speeds = [int(n) for n in stdin.readline().split()]\n        you_know_speeds = [int(n) for n in stdin.readline().split()]\n        harry_speeds.sort()\n        you_know_speeds.sort()\n        dist = n - 1\n        for i in range(n):\n            if (harry_speeds[i] == you_know_speeds[i]):\n                dist += 1\n        return dist\n    return main(stdin)\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, p, q = map(int, stdin.split())\n    return l - (l % (p + q))\n\n\n\ndef"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    p, q = map(int, stdin.split())\n    return str(l - ((p + q) // 2))\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    p, q = [int(n) for n in stdin.splitlines()]\n    '''\n    l = int(stdin)\n    p, q = [int(n) for n in stdin.splitlines()]\n    r = l / 2\n    if p == q:\n        return r\n    else:\n        k = 2 * (p - q) / (p - q)\n        return l * (1 / k - 1) / 2\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the distance between two points.\"\"\"\n    # get input\n    l = int(stdin[0])\n    p = int(stdin[1])\n    q = int(stdin[2])\n    # calculate distance\n    return f'{l - p + q - p}'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    years = [int(x) for x in stdin.split(' ')]\n    x = 0\n    for year in years:\n        x += year\n    x = x/n\n    if x % 2 == 0:\n        x = x/2\n    else:\n        x = x - 1\n    return str(int(x))\n\n\"\"\""
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return ''\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    print(arr)\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3\\n2014 2016 2015')\n    2015\n    >>> solution('1\\n2050')\n    2050\n    '''\n    # your code here\n    lst = stdin.split()\n    group_list = [int(x) for x in lst[1:]]\n    groups_dict = dict()\n    for i in group_list:\n        groups_dict[i] = groups_dict.get(i,0) + 1\n    x = lst[0]\n    groups_dict = dict(sorted(groups_dict.items()))\n    for i in groups_dict.keys():\n        if groups_dict[i] == 1:\n            continue\n        else:\n            for j in groups_dict.keys():\n                if abs(i-j) <= int(x) and i < j:\n                    groups_dict[j] = groups_dict[j] - groups_dict[i]\n                    break\n    print(groups_dict)\n    \n    return min(groups_dict,key = groups_dict.get)\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    groups = [int(x) for x in data[0].split(' ')]\n    first_year = max(groups)\n    while True:\n        for group in groups:\n            if group % 1000 == first_year % 1000:\n                first_year -= 1\n                break\n        else:\n            break\n    return str(first_year)\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 1000:\n        return \"Yes\"\n    len_stdin, stdin = map(int, stdin.split())\n    canvas = list(stdin)\n    if '?' in canvas:\n        return \"Yes\"\n    colours = {'C': 0, 'M': 0, 'Y': 0}\n    for colour in canvas:\n        if colour == 'C':\n            colours['C'] += 1\n        elif colour == 'M':\n            colours['M'] += 1\n        else:\n            colours['Y'] += 1\n    if any(colours[c] < 2 for c in colours):\n        return \"No\"\n    return \"Yes\"\nprint(solution(input()))\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\nprint(solution(input()))\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin.split(\"\\n\")[0])\n    str_list = stdin.split(\"\\n\")[1].split(\"?\")\n    canvas = [char for char in str_list if char!= \"\"]\n    canvas = [char for char in canvas if char not in [\"C\", \"M\", \"Y\"]]\n    if not canvas:\n        return \"Yes\"\n    else:\n        while len(canvas) > 1:\n            temp_canvas = [canvas[0]]\n            for i in range(1, len(canvas)):\n                if canvas[i]!= canvas[i - 1]:\n                    temp_canvas.append(canvas[i])\n            canvas = temp_canvas\n    if len(canvas) == 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input())\n    OUTPUT\n    \"\"\"\n    # n = int(stdin)\n    # print(stdin)\n    segments = stdin\n    print(segments)\n    n = len(segments)\n    segments = list(segments)\n    print(segments)\n    length = len(segments)\n    for i in range(length):\n        if segments[i] == \"?\" and i!= n - 1:\n            segments[i] = \"C\"\n\n    print(segments)\n    for i in range(length - 1):\n        if segments[i] == \"C\":\n            segments[i] = \"Y\"\n\n    print(segments)\n    for i in range(length - 2):\n        if segments[i] == \"C\":\n            segments[i] = \"M\"\n\n    print(segments)\n    if n > 1:\n        if segments[n - 1] == \"C\" and segments[n - 2] == \"C\":\n            return \"No\"\n        elif segments[n - 1] == \"C\" and segments[n - 2] == \"M\":\n            return \"No\"\n        elif segments[n - 1] == \"C\" and segments[n - 2] == \"Y\":\n            return \"No\"\n        elif segments[n - 1] == \"M\" and segments[n - 2] == \"C\":\n            return \"No\"\n        elif segments[n - 1] == \"M\" and segments[n - 2] == \"M\":\n            return \"No\"\n        elif segments[n - 1] == \"M\" and segments[n - 2] == \"Y\":\n            return \"No\"\n        elif segments[n - 1] == \"Y\" and segments[n - 2] == \"C\":\n            return \"No\"\n        elif segments[n - 1] == \"Y\" and segments[n - 2] == \"M\":\n            return \"No\"\n        elif segments[n - 1] == \"Y\" and segments[n - 2] == \"Y\":\n            return \"No\"\n    else:\n        return \"Yes\"\n\ndef"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"5\\nC??Y\"))\nprint(solution(\"5\\nC?C?Y\"))\nprint(solution(\"5\\nC??MM\"))\nprint(solution(\"5\\nC??MM\"))\nprint(solution(\"3\\nMMY\"))\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = stdin\n    s = list(n)\n    if '?' in s:\n        pass\n    elif 'C' not in s:\n        pass\n    elif 'C' in s:\n        s.remove('C')\n        if 'C' in s:\n            pass\n        elif 'C' in s:\n            pass\n        else:\n            print('Yes')\n    else:\n        print('Yes')\n    return None\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return stdin\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    colours = stdin[1]\n    solution = \"Yes\"\n    if length == 0:\n        return \"Yes\"\n    # if colours is empty, return Yes, as the following code will not be executed\n    if colours == \"?\":\n        return \"Yes\"\n    # if colours has no 'C', 'M' or 'Y', return Yes, as the following code will not be executed\n    if 'C' not in colours and 'M' not in colours and 'Y' not in colours:\n        return \"Yes\"\n    # if there is an 'M' in colours, return Yes, as the following code will not be executed\n    if 'M' in colours:\n        return \"Yes\"\n    # if there is an 'Y' in colours, return Yes, as the following code will not be executed\n    if 'Y' in colours:\n        return \"Yes\"\n    # if there are 'C' and 'M' in colours, return Yes, as the following code will not be executed\n    if 'C' in colours and 'M' in colours:\n        return \"Yes\"\n    # if there are 'C' and 'Y' in colours, return Yes, as the following code will not be executed\n    if 'C' in colours and 'Y' in colours:\n        return \"Yes\"\n    # if there are 'M' and 'Y' in colours, return Yes, as the following code will not be executed\n    if 'M' in colours and 'Y' in colours:\n        return \"Yes\"\n    # If there are no 'C', 'M' or 'Y', return No, as the following code will be executed\n    if 'C' not in colours and 'M' not in colours and 'Y' not in colours:\n        return \"No\"\n    # If there is an 'M' in colours, return No, as the following code will be executed\n    if 'M' in colours:\n        return \"No\"\n    # If there is an 'Y' in colours, return No, as the following code will be executed\n    if 'Y' in colours:\n        return \"No\"\n    # If there are 'C' and 'M' in colours, return No, as the following code will be executed\n    if 'C' in colours and 'M' in colours:\n        return \"No\"\n    # If there are 'C' and 'Y' in colours, return No, as the following code will be executed\n    if 'C' in colours and 'Y' in colours:\n        return \"No\"\n    # If there are 'M' and 'Y' in colours, return No, as the following code will be executed\n    if 'M' in colours and 'Y' in colours:\n        return \"No\""
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(int(stdin))"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int, a: int, b: int, c: int) -> int:\n        if x == 1:\n            return a\n        elif x == 2:\n            return b\n        elif x == 3:\n            return c\n\n        x, a, b, c = x - 1, a, b, c\n        return f(x, a, b, c) * f(x - 1, a, b, c) % (10**9 + 7)\n\n    n, a, b, c = map(int, stdin.split())\n    return f(n, a, b, c) % (10**9 + 7)\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and O(1) space.\"\"\"\n    n, f1, f2, f3, c = [int(x) for x in stdin.split()]\n\n    # n, f1, f2, f3, c = [int(x) for x in '17 97 41 37 11'.split()]\n\n    def F(n: int, x: int, y: int, z: int, c: int, f1: int, f2: int, f3: int) -> int:\n        if x == 1:\n            return (c * pow(y, x - 1, 10**9 + 7) * pow(z, n - x, 10**9 + 7)) % (10**9 + 7)\n        if x == 2:\n            return (c * pow(y, x - 1, 10**9 + 7) * pow(z, n - x, 10**9 + 7)) % (10**9 + 7)\n        if x == 3:\n            return (c * pow(y, x - 1, 10**9 + 7) * pow(z, n - x, 10**9 + 7)) % (10**9 + 7)\n        return (c * pow(y, x - 1, 10**9 + 7) * pow(z, n - x, 10**9 + 7)) % (10**9 + 7)\n\n    res = F(n, 1, f1, f2, c, f1, f2, f3)\n    for i in range(3, n + 1):\n        res = (res * f3) % (10**9 + 7)\n        res = (res * F(n, i + 1, f1, f2, c, f1, f2, f3)) % (10**9 + 7)\n    return res % (10**9 + 7)\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f1, f2, f3, f4, c = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(1, n + 1):\n        f = c * (i ** 2 - 6 * i + 4) * f4 * f3 * f2 * f1\n        res += f\n    return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, f1, f2, f3, c = [int(x) for x in stdin.split()]\n    res = c ** 2 * f1 * f2 * f3\n    return res % (1_000_000_007)\n\n\ndef"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = [int(x) for x in stdin.split(' ')]\n    f4 = f1 * f2 * f3\n    f5 = f1 * f2 * f3 * f4\n    p1 = c ** (n - 4) % (10 ** 9 + 7)\n    p2 = f1 * f2 * f3 * f4 % (10 ** 9 + 7)\n    return str(p1 * p2 % (10 ** 9 + 7))\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = (int(x) for x in stdin.split())\n    f0 = 1\n    f0p = 1\n    f1p = 1\n    f2p = 1\n    f3p = 1\n    for i in range(n - 4):\n        f0p = (f0 + c * f0p * f1) % (10 ** 9 + 7)\n        f1p = (f1 + c * f1p * f2) % (10 ** 9 + 7)\n        f2p = (f2 + c * f2p * f3) % (10 ** 9 + 7)\n        f3p = (f3 + c * f3p * f0) % (10 ** 9 + 7)\n        f0 = f0p\n        f1 = f1p\n        f2 = f2p\n        f3 = f3p\n    return f3\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, f_1, f_2, f_3, c = [int(x) for x in stdin.split()]\n\n    def calc_f(i):\n        if i == 1:\n            return f_1\n        if i == 2:\n            return f_2\n        if i == 3:\n            return f_3\n        return calc_f(i - 1) * calc_f(i - 2) * calc_f(i - 3)\n\n    def calc_f_mod(i):\n        return calc_f(i) % (10 ** 9 + 7)\n\n    return str(calc_f_mod(n))\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 1 2 5 3\")\n    '72900'\n    >>> solution(\"17 97 41 37 11\")\n    '317451037'\n    \"\"\"\n    n, f1, f2, f3, c = [int(i) for i in stdin.split()]\n    f = [f1, f2, f3, 1]\n    for i in range(n - 3):\n        f[3] = f[0] * f[1] * f[2] % (10 ** 9 + 7)\n        f[0], f[1], f[2] = f[1], f[2], f[3]\n    return str(f[0])\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    res = 1\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res *= f1\n        else:\n            res *= f2\n            res %= c\n        res %= c\n    return str(res)\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\"\\n\")[:2]\n    n, m = int(n), int(m)\n    strs = stdin.split(\"\\n\")[2:]\n    palindromes = set()\n    def palindrome(word):\n        return word == word[::-1]\n    for word in strs:\n        if len(word) == m and palindrome(word):\n            palindromes.add(word)\n    if len(palindromes) == 0:\n        return \"\"\n    else:\n        max_length = 0\n        for p in palindromes:\n            if len(p) > max_length:\n                max_length = len(p)\n                max_word = p\n        return max_word\n    return max(palindromes, key=len)\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n    def is_palindrome(string: str) -> bool:\n        return string == string[::-1]\n\n    def get_longest_palindrome(string: str) -> str:\n        start, end = 0, len(string)\n        while start < end:\n            if is_palindrome(string[start:end]):\n                return string[start:end]\n            start += 1\n            end -= 1\n\n    def get_longest_palindrome_from_start(string: str) -> str:\n        start, end = 0, len(string)\n        while start < end:\n            if is_palindrome(string[start:end]):\n                return string[start:end]\n            start += 1\n            end -= 1\n\n    def get_longest_palindrome_from_end(string: str) -> str:\n        start, end = len(string) - 1, len(string)\n        while start > 0:\n            if is_palindrome(string[start:end]):\n                return string[start:end]\n            start -= 1\n            end -= 1\n\n    def get_longest_palindrome_from_anywhere(string: str) -> str:\n        start, end = 0, len(string)\n        while start < end:\n            if is_palindrome(string[start:end]):\n                return string[start:end]\n            start += 1\n            end -= 1\n\n    print(get_longest_palindrome(stdin))\n\n    print(get_longest_palindrome_from_start(stdin))\n\n    print(get_longest_palindrome_from_end(stdin))\n\n    print(get_longest_palindrome_from_anywhere(stdin))\n\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin, key=len)"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    return max([''.join(sorted(i)) for i in itertools.permutations(stdin.split())], key=len)\n\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n-----Psudo Code-----\n\n\ubb38\uc790\uc5f4\uc744 \ucc28\ub840\ub300\ub85c \uc77d\uc5b4\uc11c, \uac19\uc740 \uae38\uc774\uc758 \ubb38\uc790\uc5f4\uc774 palindrome\uc778\uc9c0 \uccb4\ud06c\ud558\uace0,\n\uac00\uc7a5 \uae38\uc774\uac00 \uae34 palindrome\uc758 \uae38\uc774\ub97c \uad6c\ud558\uace0 \uadf8 \uae38\uc774\ub97c \uac00\uc9c0\ub294 \ubb38\uc790\uc5f4\uc744 \ub9ac\ud134\ud558\ub294 \ud568\uc218\n\n\"\"\""
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"the answer\"\n\"\"\"\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin.split('\\n')\n    n = int(str[0].split(' ')[0])\n    m = int(str[0].split(' ')[1])\n    num = 0\n    x = str[1:n+1]\n    for j in range(n):\n        for i in range(j+1,n):\n            if x[i] == x[j] and x[i]!= x[j-1]:\n                for k in range(j+1,i+1):\n                    if x[k] == x[k-1] and x[k]!= x[k-2]:\n                        num += 1\n                    if num == m:\n                        return str[n]\n    return ''\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = abs(a[i] - a[j])\n    for i in range(n):\n        dp[i][i] = 0\n    for l in range(1, n):\n        for i in range(n - l):\n            j = i + l\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + abs(a[i] - a[j]))\n    return dp[0][n - 1]\n\ndef"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and O(1) additional space.\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    t = 0\n    for i in range(n):\n        t += abs(a[i] - 2 * (i + 1))\n    print(t)\n    return \"\""
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    cost = 0\n    while len(a) > 1:\n        cost += 1\n        a.sort()\n        a[0] += 1\n        if a[0] == a[1]:\n            a.pop(0)\n            a.pop(0)\n        else:\n            a[0] -= 1\n        a.sort()\n    print(cost)\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return'something'\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # task 1: \ubaa9\ud45c\ub294 \uccab\ubc88\uc9f8 \uc218\ub97c power sequence \uc5d0 \ub123\uc5b4\uc8fc\ub294 \uac83\uc774\ub2e4.\n    # task 2: \uc774\ud6c4\uc5d0\ub294 \uac01 \uc218\ub97c \uccab\ubc88\uc9f8 \uc218\uc640 \ube44\uad50\ud574\uc11c \uc790\ub9ac\ub97c \ubc14\uafb8\uac70\ub098 \ud558\ub098 \uc99d\uac00\uc2dc\ud0a4\ub294 \uc5f0\uc0b0\uc744 \ubc18\ubcf5\ud574\uc57c\ud55c\ub2e4.\n    # \uc774 \ub450\uac1c\uc758 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\ub294 \uacfc\uc815\uc744 cost \uc774\ub77c\uace0 \ubd80\ub978\ub2e4.\n    # \ucd5c\uc18c \uac12\uc744 \ucc3e\uc544\ub0b4\ub294 \uacfc\uc815\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n    # \uc774\ubbf8 power sequence \uc5d0 \uc788\ub294 \uc218\ub97c \uac00\uc9c0\uace0 \uacc4\uc0b0\uc744 \ud574\ubcf8\ub2e4.\n    # \uadf8\ub7f0\ub370, \ub9cc\uc57d \ub9c8\uc9c0\ub9c9\uc5d0\uc11c \uc624\ub294 \uc218\uc640 power sequence \uc5d0 \uc788\ub294 \uc218\uac00 \ub2e4\ub978\uac8c \uc788\ub2e4\uba74,\n    # \uadf8 \uac12\uc744 1 \ub354\ud55c\uac12\uc5d0\uc11c \uc791\uc740\uac12\uc5d0\uc11c\ub294 power sequence \uc5d0 \uc788\ub294 \uac12\ubcf4\ub2e4 1 \ub354\ud55c \uac12\uc774 \uc791\uc740\uac00?\n    # \uc774\ub7f0\uac83\uc774 \ucd5c\uc18c cost \ub77c\ub294 \ub9d0\uc774\ubbc0\ub85c \uc704\uc5d0\uc11c \ucd5c\uc18c cost \uc774 \ub098\uc628\ub2e4\uba74,\n    # \uadf8 \uac12\uc744 \ub354\ud574\uc11c \ub3cc\ub824\uc8fc\uba74 \ub41c\ub2e4.\n\n    # \uc774 \uac12\uc744 \uc800\uc7a5\ud574 \ub193\uace0 \ubc18\ubcf5\ubb38\uc744 \ub3cc\ub9ac\uba74 \ub41c\ub2e4.\n    # \ubc18\ubcf5\ubb38 \uc548\uc5d0\uc11c \ub9e4\ubc88 \uac12\uc744 \ube44\uad50\ud574\ubcf4\uace0 \uc788\uc73c\uba70 \ub9c8\uc9c0\ub9c9\uc5d0\ub294 \ub2e4 \ub3cc\uba74\uc11c cost \uac12\uc774 \ucd5c\uc18c\uac12\uc774 \ub41c\ub2e4.\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cost = [0] * n\n    cost[0] = 1\n    for i in range(n - 1):\n        for j in range(i, -1, -1):\n            if a[i] > a[j]:\n                cost[i] = min(cost[j] + 1, cost[i])\n    min_cost = min(cost)\n    print(min_cost)\n    return\n\n\nsolution(stdin)"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            ans += 1\n        else:\n            ans += abs(a[i]) // 2\n            if a[i] == 1:\n                ans += 1\n            else:\n                ans += abs(a[i]) // 2\n    return ans\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return''"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 1 3 1\")\n    1\n    >>> solution(\"2\\n420 420\")\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nt = int(stdin.readline().strip())\nfor i in range(t):\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if len(set(a)) == len(a):\n        print(len(a))\n    else:\n        cur_length = 0\n        while True:\n            if len(set(a)) == len(a):\n                print(cur_length)\n                break\n            else:\n                cur_length += 1\n                max_index = a.index(max(a))\n                a[max_index] -= a[max_index+1]\n                a.pop(max_index+1)\n                if max_index == len(a)-1:\n                    a.pop(-1)\n                else:\n                    a[max_index] += a[max_index+1]\n                    a.pop(max_index+1)"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TC: O(n) | SC: O(1) | n = len(stdin)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum possible number of operations needed to change the initial password to a desired length.\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    num_com = [lst[i] - lst[i + 1] for i in range(len(lst) - 1)]\n    num_com.sort()\n    ans = [num_com[0]]\n    for i in num_com[1:]:\n        ans.append(ans[-1] + i)\n    print(min(ans))\n    return ''\n\n\ndef"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in stdin.split()])\n    \n    # matrix = [\n    #     [0, 0],\n    #     [0, 0],\n    #     [0, 0]\n    # ]\n\n    cnt = 0\n    min_xor = 1023\n    res = []\n    # for i in range(n):\n    #     for j in range(m):\n    #         xor = 0\n    #         for k in range(m):\n    #             xor ^= matrix[i][k]\n    #         if xor < min_xor:\n    #             cnt += 1\n    #             min_xor = xor\n    #             res = [i, j]\n    \n    # print('cnt', cnt)\n    # print('res', res)\n    # print('matrix', matrix)\n    \n    for i in range(n):\n        for j in range(m):\n            xor = 0\n            for k in range(m):\n                xor ^= matrix[i][k]\n            if xor < min_xor:\n                cnt += 1\n                min_xor = xor\n                res = [i, j]\n                break\n    \n    if cnt > 1:\n        return 'NIE'\n    else:\n        print(cnt)\n        for x in res:\n            print(x + 1, end=' ')\n    \n    return 'TAK'\n    \n\nprint(solution(stdin='3 2\\n0 0\\n0 0\\n0 0'))\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    array = [int(x) for x in stdin.split(' ')]\n    \n    if n == 1:\n        print(\"NIE\")\n    else:\n        print(\"TAK\")\n        for i in range(n):\n            print(\" \".join(str(array[i][j]) for j in range(m)))"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = [int(x) for x in stdin.split(' ')]\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in stdin.split(' ')])\n    ans = []\n    for i in range(n):\n        cnt = 0\n        for j in range(m):\n            cnt ^= matrix[i][j]\n        if cnt > 0:\n            ans.append(j + 1)\n    if len(ans) == 0:\n        print('NIE')\n    else:\n        print('TAK')\n        print(' '.join([str(x) for x in ans]))\n    return ''\n    '''\n    def solve(n, m):\n        matrix = [0] * m\n        s, res = set(), set()\n        for i in range(n):\n            for j in range(m):\n                matrix[j] ^= i\n                if matrix[j] > 0:\n                    res.add(matrix[j])\n            if len(res) > 1:\n                return 'NIE'\n            s |= res\n            res = set()\n        return 'TAK' if len(s) == 1 else 'NIE'\n\n    return solve(int(stdin.split('\\n')[0].split(' ')[0]),\n                 int(stdin.split('\\n')[0].split(' ')[1]))\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n0 0\\n0 0\\n0 0\")\n    'NIE'\n    >>> solution(\"2 3\\n7 7 7\\n7 7 10\")\n    'TAK\\n1 3'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    if n > m or n < 1:\n        return \"NIE\"\n\n    a = [[int(x) for x in line.split()] for line in stdin.split('\\n')[1:]]\n\n    for j in range(m):\n        if sum([1 for i in range(n) if a[i][j] & 1]) % 2 == 0:\n            return \"NIE\"\n\n    return f\"TAK\\n{' '.join([str(j + 1) for j in range(m) if a[0][j] & 1])}\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    arr = [list(map(int, stdin.split('\\n')[i].split())) for i in range(2, n + 2)]\n    arr.sort(key=lambda i: sum(i))\n    for i in range(n):\n        print(*arr[i])\n        if sum(arr[i]) % 2!= 0:\n            return 'TAK'\n    return 'NIE'\nprint(solution(input()))\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(x) for x in stdin.split('\\n')[1].split(' ')])\n    A = list(zip(*matrix))\n    B = list(zip(*[[a[i] for a in matrix] for i in range(m)]))\n    c = []\n    for a in A:\n        for b in B:\n            if a!= b:\n                if int(a, 2) ^ int(b, 2) > 0:\n                    c.append(int(''.join(str(x) for x in a), 2))\n    print('TAK' if len(c) > 0 else 'NIE')\n    for i in range(len(c)):\n        print(c[i])\n    return ''\n\n\ndef"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = []\n    for _ in range(n):\n        a.append([int(i) for i in stdin.split()])\n    a = np.array(a)\n    if np.any(a.sum(axis=1) < 1):\n        return 'NIE'\n    res = []\n    for j in range(m):\n        b = a[:, j]\n        res.append(b.argmax() + 1)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = [list(map(int, stdin.split())) for _ in range(n)]\n    sol = \"NIE\"\n    for i in range(n):\n        for j in range(1, m):\n            if lst[i][0] ^ lst[i][j] > 0:\n                sol = \"TAK\"\n                break\n    print(sol)\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = [[int(n) for n in stdin.readline().split()] for i in range(n)]\n    if sum(matrix[0]) < m:\n        return 'NIE'\n    elif sum(matrix[0]) == m:\n        return 'TAK'\n    for i in range(1, n):\n        cnt = 0\n        for j in range(m):\n            cnt ^= matrix[i][j]\n            if cnt < m:\n                break\n        if cnt < m:\n            return 'NIE'\n    return 'TAK'\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    n, m = [int(i) for i in stdin.split('\\n')[:2]]\n    a = [[int(i) for i in stdin.split('\\n')[2:][j].split()] for j in range(n)]\n    \n    a = [[a[j][i] for j in range(n)] for i in range(m)]\n    a = [[a[i][j] for j in range(m)] for i in range(n)]\n    \n    def ex_or(a):\n        if a == []:\n            return 0\n        else:\n            return a[0] ^ ex_or(a[1:])\n    \n    def is_greater_than_zero(a):\n        if a < 0:\n            return False\n        return True\n        \n    def find_greater_or_equal_than_zero(a):\n        if is_greater_than_zero(ex_or(a)):\n            return ex_or(a)\n        else:\n            return -1\n        \n    greater_or_equal_than_zero = find_greater_or_equal_than_zero(a)\n    if greater_or_equal_than_zero == -1:\n        return \"NIE\"\n    else:\n        return str(greater_or_equal_than_zero) +'' +''.join(map(str, find_greater_or_equal_than_zero(a)))\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    # concat(0) + s + concat(1) + s + concat(2) + s +... + concat(i)\n    s = concat(0) + s + concat(1)\n    i = 1\n    # starting from 1 and going to 100\n    while i < 100:\n        # concat(0) + concat(i) + concat(i+1) + concat(i+2) + concat(i+3) +... + concat(100)\n        s = concat(i) + concat(i + 1)\n        if t in s:\n            break\n        else:\n            i += 1\n    # (100 - i) is the number of iterations that was made\n    return str((100 - i))\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    count = 0\n    for i in range(1, len(s) + 1):\n        for j in range(10 ** i, len(s) + 1):\n            if s[j - 10 ** i:] in t:\n                count = j\n                break\n    return str(count)\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_c = s * 10 ** 100\n    for i in range(len(s_c) - len(t)):\n        if t in s_c[i: i + len(t)]:\n            return i + 1\n    return '-1'"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = s[0]\n    t = t[0]\n    s = s * 100000\n    if t in s:\n        print(s.index(t)//1000)\n    else:\n        print(-1)\n    return ''"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    i = 1\n    while True:\n        t_i = t + t + t + t + t + t + t + t + t + t\n        if t_i.find(s) >= 0:\n            return i\n        i += 1\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    for i in range(10**100):\n        if s in t:\n            return str(i)\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_len = len(s)\n    t_len = len(t)\n    for i in range(10001, s_len + 1):\n        s_i = s * i\n        if t in s_i:\n            return i\n    return -1\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    for i in range(1, 100):\n        if t in s * i:\n            return i\n    return -1\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    t: str = stdin\n    subseq_count: int = 0\n    for c in s:\n        subseq_count += t.count(c)\n    return str(len(s) + subseq_count) if subseq_count < len(s) else str(-1)\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s) < len(t):\n        return -1\n    for i in range(len(s), len(t)):\n        if s == t[0:i]:\n            return i\n    return -1\n\"\"\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\ndef"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    ans = \"YES\"\n    for i in range(m):\n        a, b = map(int, stdin.split(\" \"))\n        if (a - 1, b - 1) in friendships or (b - 1, a - 1) in friendships:\n            ans = \"NO\"\n    return ans\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split(' ')]\n    if m < 3:\n        return 'YES'\n    if m > 150000:\n        return 'NO'\n    s = set()\n    for i in range(m):\n        for j in range(i + 1, m):\n            a, b = [int(x) for x in stdin.split(' ')[i * 2:i * 2 + 2]]\n            c, d = [int(x) for x in stdin.split(' ')[j * 2:j * 2 + 2]]\n            if a == c or a == d or b == c or b == d:\n                continue\n            s.add((a, b, c, d))\n    return 'YES' if len(s) == n else 'NO'\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n-----Debugging-----\n\nUse the snippet below to debug the file.\n\n--------------------\nimport sys\ndebug_file = open(\"debug.txt\", \"w\")\nsys.stdout = debug_file\n--------------------\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    \n    return \"YES\" if m == 0 or m == n * (n - 1) // 2 else \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"YES\" if... else \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    friend = [[False] * n for _ in range(n)]\n    friends = set()\n    for _ in range(m):\n        a, b = map(int, stdin.split(' '))\n        friend[a - 1][b - 1] = True\n        friend[b - 1][a - 1] = True\n        friends.add((a - 1, b - 1))\n    for i in range(n):\n        for j in range(n):\n            if friend[j][i]:\n                for k in range(n):\n                    if i!= j and i!= k and j!= k:\n                        if friend[k][j]:\n                            if friend[k][i]:\n                                friends.add((i, j))\n    if len(friends) == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = {\n        0: 'A',\n        1: 'B',\n        2: 'C',\n        3: 'D',\n        4: 'E',\n        5: 'F',\n        6: 'G',\n        7: 'H',\n        8: 'I',\n        9: 'J',\n        10: 'K',\n        11: 'L',\n        12: 'M',\n        13: 'N',\n        14: 'O',\n        15: 'P',\n        16: 'Q',\n        17: 'R',\n        18: 'S',\n        19: 'T',\n        20: 'U',\n        21: 'V',\n        22: 'W',\n        23: 'X',\n        24: 'Y',\n        25: 'Z',\n    }\n    shift = stdin\n    shift = shift[::-1]\n    output = ''\n    for i in shift:\n        output += alphabet[(int(i) + 26 - 14)]\n    return output\n    pass"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(sorted(stdin, key=lambda x: (x.lower(), x.isalpha())))\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    pass\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    month = stdin\n    n = int(stdin)\n    return alphabets[n % 26:] + alphabets[:n % 26]"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # Initialise the array of strings\n    array_of_strings = []\n    # Initialise the string\n    string_to_concatenate = ''\n    for i in range(len(stdin)):\n        if stdin[i] =='':\n            array_of_strings.append(string_to_concatenate)\n            string_to_concatenate = ''\n        else:\n            string_to_concatenate = string_to_concatenate + stdin[i]\n    array_of_strings.append(string_to_concatenate)\n    \n    # Initialise the string to be returned\n    result = ''\n    \n    # Iterate over the array of strings\n    for i in range(len(array_of_strings)):\n        # For each string, concatenate the required characters\n        result = result + array_of_strings[i][0].upper() + array_of_strings[i][1:]\n        if i < len(array_of_strings) - 1:\n            result = result +''\n    \n    return result"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(26):\n        if chr(i+97) == stdin[0]:\n            return stdin[0] + solution(stdin[1:])\n    return stdin[0] + solution(stdin[1:])\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[: int(stdin[1:])].lower() + stdin[: int(stdin[1:])].upper()\nprint(solution(input()))\n\n-----Input-----\nAbCdE\n3\n-----Output-----\nABCdE\ndef"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    s = list(stdin)\n    for i in range(len(s)):\n        if i + 1 == int(s[i]):\n            answer += s[i]\n            s[i] = \"L\"\n        if i + 1 == int(s[i].lower()):\n            answer += s[i]\n            s[i] = \"l\"\n        if i + 1 == int(s[i].upper()):\n            answer += s[i]\n            s[i] = \"1\"\n    return answer"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n0111\\n0001\")\n    'First'\n    >>> solution(\"3\\n11101010\\n10110011\")\n    'Second'\n    >>> solution(\"4\\n111000\\n000111\")\n    'Draw'\n    >>> solution(\"4\\n11101010\\n10010011\")\n    'First'\n    \"\"\"\n    s = stdin.splitlines()[1]\n    t = stdin.splitlines()[2]\n    s_mask = 0\n    t_mask = 0\n    for i in range(len(s)):\n        s_mask |= 1 << i if s[i] == \"1\" else 0\n    for i in range(len(t)):\n        t_mask |= 1 << i if t[i] == \"1\" else 0\n    if s_mask > t_mask:\n        return \"First\"\n    elif s_mask < t_mask:\n        return \"Second\"\n    return \"Draw\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s) // 2\n    t = s[::-1]\n    s = \"0\" + s\n    t = \"0\" + t\n    s_max = 0\n    t_max = 0\n    for i in range(1, 2 ** n):\n        s_s = str(bin(i))[2:]\n        s_s = s[0:n] + s_s[1:]\n        s_max = max(s_max, s_s.count(\"1\"))\n        s_t = s[0:n] + s_s[::-1]\n        s_t = \"0\" + s_t\n        t_max = max(t_max, t.count(\"1\") - s_t.count(\"1\"))\n    return \"First\" if s_max > t_max else \"Second\" if s_max < t_max else \"Draw\""
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.strip())\n    s, t = stdin.strip().split('\\n')\n    \n    return 'Second' if int(s, 2) < int(t, 2) else 'First' if int(s, 2) > int(t, 2) else 'Draw'\n\nprint(solution(input()))\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    return \"First\" if s > t else \"Second\" if s < t else \"Draw\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build the matrix.\n    For each column, find the column with the largest number of ones.\n    Return the column with the largest number of ones.\n    \"\"\"\n    n = stdin[0]\n    s = stdin[1]\n    t = stdin[2]\n    s = [int(x) for x in s]\n    t = [int(x) for x in t]\n\n    matrix = [[0] * (n * 2) for _ in range(2)]\n\n    for i in range(n):\n        matrix[0][i * 2] = s[i]\n        matrix[0][i * 2 + 1] = t[i]\n\n    for i in range(n):\n        for j in range(2):\n            matrix[j][i * 2] = matrix[j][i * 2 + 1] = 1\n\n    for j in range(n):\n        col = [matrix[0][j * 2], matrix[0][j * 2 + 1]]\n        for i in range(2, n * 2, 2):\n            col.append(matrix[0][i] + matrix[1][i + 1])\n        max_col = max(col)\n        for i in range(n * 2):\n            matrix[0][i] = matrix[1][i] = 0\n        for i in range(n * 2):\n            if matrix[0][i] == 0:\n                matrix[0][i] = matrix[1][i] = max_col\n\n    max_col = max([matrix[0][i] for i in range(2 * n)])\n\n    return \"First\" if max_col == 1 else \"Second\" if max_col == 2 else \"Draw\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    for i in range(len(s)-1):\n        if s[i] == t[i] and s[i] == '1':\n            s = s[i:]\n            t = t[i:]\n            break\n        elif s[i] == t[i] and s[i] == '0':\n            s = s[i:]\n            t = t[i:]\n            break\n    for i in range(len(t)-1):\n        if t[i] == s[i] and t[i] == '1':\n            t = t[i:]\n            break\n        elif t[i] == s[i] and t[i] == '0':\n            t = t[i:]\n            break\n    print('First' if len(s) > len(t) else 'Second') if s == t else print('Draw')\nsolution(input().split())\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    y = stdin.readline().strip()\n    a = stdin.readline().strip()\n\n    for i in range(1, 2 ** n):\n        x = ''\n        for j in range(n):\n            if ((i >> j) & 1):\n                x += y[j]\n            else:\n                x += a[j]\n        print(x)\n    return None\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s, t = stdin.readline(), stdin.readline()\n    c = 'First' if s[0] == '1' and t[0] == '1' else 'Second' if s[0] == '1' and t[0] == '0' else 'Draw' if s[0] == t[0] else 'First' if s[0] == '0' and t[0] == '0' else 'Second'\n    for i in range(1, n):\n        if s[i] == t[i]:\n            c = 'Draw' if s[i] == '0' else 'First' if s[i] == '1' else 'Second'\n            break\n    print(c)\n    return ''\n\n\ndef"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    st = ''\n    for i in range(n):\n        if s[i] == '1':\n            st += '2'\n        else:\n            st += '1'\n    for i in range(n):\n        if t[i] == '1':\n            st += '1'\n        else:\n            st += '2'\n\n    if int(st) > int(s) + int(t):\n        return \"Second\"\n    elif int(st) < int(s) + int(t):\n        return \"First\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\\n2\\n110110\\n001001\\n\")\n    'First'\n    >>> solution(\"\\n2\\n110110\\n10010011\\n\")\n    'Second'\n    >>> solution(\"\\n3\\n111000\\n000111\\n\")\n    'Draw'\n    >>> solution(\"\\n4\\n01010110\\n00101101\\n\")\n    'First'\n    \"\"\"\n    S = stdin.split()[1]\n    T = stdin.split()[2]\n    len_s = len(S)\n    len_t = len(T)\n\n    matrix_s = []\n    matrix_t = []\n    for i in range(len_s):\n        matrix_s.append(int(S[i]))\n        matrix_t.append(int(T[i]))\n\n    return 'Second' if is_draw(matrix_s, matrix_t) else 'First'\n    return 'Second' if is_draw(matrix_s, matrix_t) else 'Draw'\n\n\ndef"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # pass\n    n = int(stdin.split('\\n')[0])\n    arr = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    arr = sorted(arr)\n    min_avg = arr[0]\n    max_avg = arr[-1]\n    arr = sorted(arr, reverse=True)\n    min_avg_kirill = arr[0]\n    max_avg_kirill = arr[-1]\n    arr = sorted(arr, reverse=True)\n    min_avg_kirill = arr[0]\n    max_avg_kirill = arr[-1]\n    print(n)\n    print(' '.join(map(str, arr)))"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sorted_x = sorted(map(int, stdin.split(' ')))\n    m = max(sorted_x) - min(sorted_x)\n    if m > 2:\n        return str(n + 1)\n\n    numbers = [0] * (m + 1)\n    for x in sorted_x:\n        numbers[x] += 1\n\n    max_numbers = 0\n    for i in range(m + 1):\n        if numbers[i] > max_numbers:\n            max_numbers = numbers[i]\n            result = []\n            result.append(i)\n\n        elif numbers[i] == max_numbers:\n            result.append(i)\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A solution to the above problem.\n    >>> solution(\"6\\n-1 1 1 0 0 -1\\n\")\n    2\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    array = list(map(int, stdin.split(\"\\n\")[1].split()))\n    m = sum(array) / len(array)\n    m_idx = array.index(max(array))\n    array[m_idx] = m\n    m_idx = array.index(min(array))\n    array[m_idx] = m\n    diffs = []\n    for i in range(len(array) - 1):\n        diffs.append(abs(array[i] - array[i + 1]))\n    print(min(diffs))\n    print(*array)\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    x.sort()\n    y = [0 for _ in range(n)]\n    for i in range(n):\n        if i == 0:\n            y[0] = x[0]\n        else:\n            y[i] = x[i] + y[i - 1]\n    for i in range(n - 1):\n        if x[i] + 2 == x[i + 1]:\n            y[i] = y[i] + 1\n            y[i + 1] = y[i] + 1\n    y = [str(y[i]) for i in range(n)]\n    print(' '.join(y))\n    return None\n\ndef"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n\n    n = int(stdin.split(\"\\n\")[0])\n    A = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    \n    def f(X):\n        x_min, x_max = min(X), max(X)\n        X_new = []\n        for x in X:\n            if x_min < x < x_max:\n                X_new.append(x)\n        return X_new\n    \n    l, r = f(A), f(A[::-1])\n    \n    l_avg = sum(l) / len(l)\n    r_avg = sum(r) / len(r)\n    \n    min_avg = min(l_avg, r_avg)\n    max_avg = max(l_avg, r_avg)\n    \n    num = [i for i in range(1, n+1) if l_avg == min_avg and r_avg == max_avg]\n    \n    print(min(num))\n    print(\" \".join([str(x) for x in f(A)]))\n    \n    return \"\"\n\nprint(solution(input))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    my_list = list(map(int, stdin.split()))\n    b = set(my_list)\n    if len(my_list) == 1:\n        return 1\n    elif len(b) == len(my_list):\n        return str(len(my_list))\n    else:\n        d = set()\n        c = 0\n        for i in my_list:\n            if i in d:\n                c = c + 1\n            else:\n                d.add(i)\n        return str(c)\n\n\n\nprint(solution(input()))"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    xs = [int(x) for x in stdin.split()]\n    \n    xs = sorted(set(xs))\n    min_diff, res = abs(xs[0] - xs[-1]), []\n    for i in range(len(xs)):\n        if abs(xs[i] - xs[-1-i]) < min_diff:\n            min_diff = abs(xs[i] - xs[-1-i])\n            res = [xs[i], xs[-1-i]]\n    return''.join([str(x) for x in res])\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n\n    min_n, max_n = min(numbers), max(numbers)\n    mid_n = (min_n + max_n) // 2\n    \n    min_k, max_k = min(numbers, key = lambda x: x if x > 0 else float('inf')), max(numbers, key = lambda x: x if x < 0 else float('inf'))\n    mid_k = (min_k + max_k) // 2\n    \n    while max_n - min_n > 2 or max_k - min_k > 2:\n        if abs(max_n - mid_n) < abs(max_k - mid_k):\n            max_n = mid_n\n        else:\n            max_k = mid_k\n        \n        min_n, max_n = min(numbers, key = lambda x: x if x > 0 else float('inf')), max(numbers, key = lambda x: x if x < 0 else float('inf'))\n        mid_n = (min_n + max_n) // 2\n        \n        min_k, max_k = min(numbers, key = lambda x: x if x > 0 else float('inf')), max(numbers, key = lambda x: x if x < 0 else float('inf'))\n        mid_k = (min_k + max_k) // 2\n    \n    ans = [mid_n] * n\n    for i in range(n):\n        if numbers[i] > 0 and ans[i] > mid_k:\n            ans[i] -= 1\n        elif numbers[i] < 0 and ans[i] < mid_k:\n            ans[i] += 1\n    \n    return''.join(map(str, ans))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    values = [int(v) for v in stdin.split(' ')]\n    values.sort()\n\n    n = len(values)\n    m = values[n // 2]\n    if n % 2 == 0:\n        l, r = values[:n//2], values[n//2:]\n    else:\n        l, r = values[:n//2+1], values[n//2+1:]\n\n    if m > max(r) + 1 or m < min(l) - 1:\n        return ''\n\n    ans = 0\n    for i in range(n):\n        if values[i] == m:\n            ans += 1\n            values[i] = m\n    return''.join(str(i) for i in values)"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"zeus\")\n    18\n    >>> solution(\"map\")\n    35\n    >>> solution(\"ares\")\n    34\n    \"\"\"\n    import string\n    l = list(string.ascii_lowercase)\n    return sum(string.ascii_lowercase.index(i) for i in stdin)"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return...\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    initial_pos = 0\n    for i in range(len(alphabet)):\n        if alphabet[i] == stdin[0]:\n            initial_pos = i\n            break\n    result = 0\n    for i in stdin:\n        index = (initial_pos + alphabet.index(i)) % 26\n        if index == 0:\n            result += 26\n        else:\n            result += index\n        initial_pos = index\n    return result\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    letters = {'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n    lettersR = {0:'a',1:'b',2:'c',3:'d',4:'e',5:'f',6:'g',7:'h',8:'i',9:'j',10:'k',11:'l',12:'m',13:'n',14:'o',15:'p',16:'q',17:'r',18:'s',19:'t',20:'u',21:'v',22:'w',23:'x',24:'y',25:'z'}\n    count = 0\n    for i in stdin:\n        i = i.lower()\n        for j in i:\n            count += abs(letters[j]-letters['a'])\n    return count\n    \n    \n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(abs(ord('z') - ord('a') - len(stdin)))\n    \n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns number of rotations required to print the given string.\n    \"\"\"\n    rotations_clockwise = ord(stdin[0]) - ord(\"a\")\n    rotations_counterclockwise = 26 - rotations_clockwise\n\n    return min(rotations_clockwise, rotations_counterclockwise)\n\n\ndef"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = string.ascii_lowercase\n    position = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n    rotation_times = [1, 5, 10, 2]\n    current_letter = 'a'\n    letters = set(stdin)\n    total = 0\n    for l in letters:\n        # get the position of the letter\n        current_pos = position[current_letter]\n        # get the index of the letter\n        letter_pos = alphabet.index(l)\n        # get the difference between the current letter and the letter of the string\n        diff = current_pos - letter_pos\n        # if the difference is not 0, apply the rotation to the difference\n        if diff!= 0:\n            current_letter = alphabet[(current_pos - diff) % 26]\n        # sum the rotation times for the current letter\n        total += rotation_times[diff % 4]\n    return total\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rotations_clockwise = 0\n    rotations_counterclockwise = 0\n    num_of_char = 0\n    for char in stdin:\n        if char.isalpha():\n            num_of_char += 1\n            if char.isupper():\n                rotations_clockwise += ord(char) - ord('A')\n            else:\n                rotations_counterclockwise += ord(char) - ord('a')\n    return min(rotations_clockwise, rotations_counterclockwise) + num_of_char - 1\n\"\"\"\n\ndef"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from string import ascii_lowercase\n    string = stdin\n    if len(string) > 100:\n        string = string[:100]\n    for c in string:\n        if c not in ascii_lowercase:\n            return 0\n    return len(string)\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find minimum and maximum number of players that could be sent off the game.\n    >>> solution(\"2\\n3\\n5\\n1\\n8\\n\")\n    '0 4'\n    \"\"\"\n    a_1, a_2, k_1, k_2, n = [int(i) for i in stdin.splitlines()]\n    yc = n // 2\n    rem_1 = k_1 * a_1\n    rem_2 = k_2 * a_2\n    if n <= rem_1 + rem_2:\n        print(\"0\", \"0\")\n    else:\n        print(n - yc - max(rem_1, rem_2), n - yc - min(rem_1, rem_2))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split('\\n')[0].split())\n    l1 = list(range(1, a1 + 1))\n    l2 = list(range(1, a2 + 1))\n    for i in stdin.split('\\n')[4:]:\n        i = int(i)\n        if i in l1:\n            l1.remove(i)\n        if i in l2:\n            l2.remove(i)\n    print(max(len(l1), len(l2)))\n    return \"\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    k1 = int(stdin[2])\n    k2 = int(stdin[3])\n    k3 = int(stdin[4])\n    q = int(stdin[5])\n\n    res = []\n    for i in range(n):\n        res.append((i, 0))\n\n    for i in range(q):\n        a = stdin[6+i*3].split(' ')\n        for j in range(n):\n            if a[0] == str(j+1):\n                if a[1] == '1':\n                    res[j] = (res[j][0], res[j][1] + k1)\n                else:\n                    res[j] = (res[j][0], res[j][1] + k2)\n\n    r = [0] * n\n    for i in range(n):\n        if res[i][1] == 0:\n            r[i] = n\n\n    r.sort()\n\n    for i in range(n):\n        if res[i][1]!= 0:\n            r[i] = i\n\n    return''.join(list(map(str, r)))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split('\\n'))\n    return a1 * k1 + a2 * k2 - n, min(a1, n // k1), max(a2, n // k2)\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split('\\n')[:5])\n    return str(min(a1 - n // k1, a2 - n // k2)) +'' + str(max(a1 - n // k1, a2 - n // k2))"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K1, K2, N = [int(n) for n in stdin.split('\\n')]\n    return \"{}\\n{}\".format(min(K1 * A, K2 * B, K1 * A + K2 * B - N), max(K1 * A, K2 * B, K1 * A + K2 * B - N))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, (0, 2 ** 32 - 1)))\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split(' ')\n    n, t = int(n), int(t)\n    stdin = stdin.split('\\n')\n    stdin = stdin[0]\n    return stdin[:t][::-1]"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = stdin[:-1]\n    \n    if t % 2 == 0:\n        ans = 'G' * n\n    else:\n        ans = 'B' * n\n        \n    return ans\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    arr = list(stdin[:n])\n    arr = arr[::-1]\n    curr = []\n    for i in range(t):\n        new = []\n        for j in range(len(arr)):\n            if len(curr) > j:\n                if arr[j] == 'B' and curr[j] == 'G':\n                    new.append('B')\n                    curr[j] = 'B'\n                elif arr[j] == 'G' and curr[j] == 'B':\n                    new.append('G')\n                    curr[j] = 'G'\n                else:\n                    new.append(arr[j])\n                    curr[j] = arr[j]\n            else:\n                new.append(arr[j])\n                curr.append(arr[j])\n        arr = new\n        arr = arr[::-1]\n    return ''.join(arr)\n\nprint(solution(input()))\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    arr = stdin.split()\n    if n == 1:\n        return arr[0]\n    ans = ''\n    if t % 2 == 0:\n        ans = ''.join(arr[:n//2])\n    else:\n        ans = ''.join(arr[n//2:]) + ''.join(arr[:n//2])\n    return ans\n\nprint(solution(input()))"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get string from input\n    # n, t = input().split(\" \")\n    # n, t = int(n), int(t)\n    # arr = list(stdin)\n    n, t = stdin.split(\" \")\n    n, t = int(n), int(t)\n    arr = list(stdin)\n    for _ in range(t):\n        curr_boy_count, curr_girl_count = 0, 0\n        for i in range(len(arr)):\n            if arr[i] == \"B\":\n                curr_boy_count += 1\n            else:\n                curr_girl_count += 1\n            if curr_boy_count > curr_girl_count:\n                arr[i] = \"B\"\n            else:\n                arr[i] = \"G\"\n    return \"\".join(arr)"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # We don't care about the position of the children after n + t seconds\n    # Hence, we can only solve the problem if the number of boys at the beginning is equal to the number of girls\n    # The initial arrangements is just the alternating character array\n    \n    arr = stdin.split()\n    assert len(arr) == 2\n    boys = arr[0].count(\"B\")\n    girls = arr[0].count(\"G\")\n    assert boys == girls\n    \n    # a = \"\".join([\"B\" if c == \"G\" else \"G\" for c in arr[0]])\n    a = arr[0].replace(\"G\", \"B\")\n    a = a.replace(\"B\", \"G\")\n    return a\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin\n    t = int(stdin.split()[1])\n    k = len(arr)\n    lst = [0] * k\n    \n    for i in range(k):\n        if arr[i] == 'G':\n            lst[i] = 1\n    \n    for i in range(t):\n        for j in range(k):\n            if lst[j] == 1:\n                if j!= k-1:\n                    lst[j] = 0\n                    lst[j+1] = 1\n                else:\n                    lst[j] = 0\n                    lst[0] = 1\n    \n    return ''.join(str(i) for i in lst)"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, t = s.split()\n    n, t = int(n), int(t)\n    # Initial position of the children\n    # Initially the children stood in the order they entered the canteen.\n    b_pos = [1, 3, 5, 7]\n    g_pos = [0, 2, 4, 6]\n    res = ''\n    for i in range(t):\n        b = 0\n        g = 0\n        for j in range(n):\n            # if boy is in the correct position, he must be in the right position\n            if (b_pos[j] == i + 1):\n                res += 'B'\n                b = 1\n            # if boy is not in the correct position, he must be in the wrong position\n            else:\n                res += 'G'\n                g = 1\n            # if girl is in the correct position, she must be in the right position\n            if (g_pos[j] == i + 1):\n                res += 'G'\n                g = 1\n            # if girl is not in the correct position, she must be in the wrong position\n            else:\n                res += 'B'\n                b = 1\n        # if there is no boy or girl in the position, we need to add a new element in that position\n        if (b == 0 and g == 0):\n            res += 'B'\n        elif (b == 0 and g == 1):\n            res += 'G'\n        elif (b == 1 and g == 0):\n            res += 'B'\n        else:\n            res += 'G'\n    return res\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5\\nGGB\")\n    'BGBG'\n    >>> solution(\"4 1\\nGGGB\")\n    'GGBG'\n    >>> solution(\"4 4\\nBBGGB\")\n    'BBGGB'\n    \"\"\"\n    n, t = [int(x) for x in stdin.split()]\n    arr = [x for x in stdin.split()]\n    arr = sorted(arr, key=lambda x: int(x[0]))\n    count = 0\n    for i in range(t):\n        count += 1\n        n += 1\n        arr = sorted(arr, key=lambda x: int(x[0]))\n        for j in range(n // 2):\n            arr[j] = \"B\" + arr[j]\n        for j in range(n // 2):\n            arr[n // 2 + j] = \"G\" + arr[n // 2 + j]\n    arr = sorted(arr, key=lambda x: int(x[0]))\n    return \"\".join(arr)\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    res = 0\n    for i in range(k):\n        v = n\n        while v % 2 == 0:\n            v /= 2\n        res = (res * 58 + v) % 1000000007\n    return str(res)\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {} {}'.format(stdin[0], stdin[1], stdin[2])\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p, q = 1, 1\n    for i in range(k):\n        p *= n\n        p %= int(1e9)\n        p, q = p * 58 % int(1e9), q * 58 % int(1e9)\n        n = n // 10\n    return str(p * q % int(1e9))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    divisors = set(\n        [div for div in range(1, min(n + 1, 10 ** 9 + 1)) if n % div == 0])\n    total = 0\n    # Compute divisors of every multiple of 10\n    for i in range(k):\n        divisors = set(\n            [\n                div for div in range(1, min(n + 1, 10 ** 9 + 1))\n                if n % div == 0\n            ])\n        total += n // div\n        n = div\n        if n < 10 ** 9:\n            n = div\n        else:\n            break\n    # Return the modulus\n    return str(total * 2)\n\n\ndef"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a * pow(b, -1, (10**9) + 7))\n    return \"\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split(\" \")]\n    return \"{}\".format((((n - 1) // k) + 1) * k + n - (k * (((n - 1) // k) + 1)))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p, q = 1, n\n    for _ in range(k):\n        x = random.choice(divisors(n))\n        n = n * x // math.gcd(n, x)\n        p = p * x // math.gcd(p, x)\n        q = q * x // math.gcd(q, x)\n    return str(p * invmod(q, 10 ** 9 + 7) % (10 ** 9 + 7))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    P, Q = _make_divisors(int(stdin.readline().split()[0]))\n    print(P * Q % 1000000007)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n\n    def is_coprime(a: int, b: int) -> bool:\n        return gcd(a, b) == 1\n\n    def gcd(a: int, b: int) -> int:\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def prime_factors(n: int) -> list:\n        if n % 2!= 0:\n            factors = [2]\n        else:\n            factors = []\n\n        i = 3\n        while i <= n:\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                i -= 1\n            i += 2\n        return factors\n\n    def extended_euclidean_algorithm(a: int, b: int) -> int:\n        if b == 0:\n            return 1, 0\n        x1, y1 = extended_euclidean_algorithm(b, a % b)\n        x, y = y1, x1 - y1 * (a // b)\n        return x, y\n\n    def modular_inverse(a: int, n: int) -> int:\n        _, x = extended_euclidean_algorithm(a, n)\n        return x % n\n\n    p = 1\n    q = n\n\n    for factor in prime_factors(n):\n        p *= factor - 1\n        q //= factor\n\n    p //= gcd(p, 10 ** 9 + 7)\n    q //= gcd(q, 10 ** 9 + 7)\n\n    return (p * modular_inverse(q, 10 ** 9 + 7)) % (10 ** 9 + 7)\n\n\nprint(solution(\"5 1\"))\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    z = n // 2\n    o = m - z\n    if z * 2 > n:\n        return -1\n    return ''.join(('1' if x else '0' for x in range(o))) + ''.join(('1' if x else '0' for x in range(z)))\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(\" \")\n    n = int(arr[0])\n    m = int(arr[1])\n\n    if m == 0 or n < 2:\n        return \"1\" * n\n\n    if n == m:\n        return \"1\" * n\n    \n    m -= 1\n    result = []\n    def backtracking(index, i=0):\n        if index == n and i == m:\n            result.append(\"\".join(result))\n        elif index < n and i < m:\n            if result:\n                if i == 0 and result[i - 1] == \"1\":\n                    result.append(\"0\")\n                    backtracking(index + 1, i)\n                    result.pop()\n                if result[i - 1] == \"1\":\n                    result.append(\"0\")\n                    backtracking(index + 1, i + 1)\n                    result.pop()\n            if result:\n                if i!= 0 and result[i - 1] == \"0\":\n                    result.append(\"1\")\n                    backtracking(index + 1, i + 1)\n                    result.pop()\n            if result:\n                if i < m - 1 and result[i] == \"1\":\n                    backtracking(index + 1, i + 1)\n    backtracking(0)\n    return \"1\" + \"\".join(result) if result else \"-1\"\nprint(solution(input()))\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    card_lst = list(map(int, stdin.split(' ')))\n    max_index = -1\n    for i in range(n):\n        if card_lst[i] == 0:\n            max_index = i\n        if i == m:\n            break\n    if max_index < 0:\n        return '-1'\n    else:\n        for i in range(max_index, n):\n            if card_lst[i] == 1:\n                max_index = i\n                break\n    for i in range(max_index, n):\n        if card_lst[i] == 1:\n            return '-1'\n    return ''.join(list(map(str, card_lst)))\n\nprint(solution(stdin))"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = [int(x) for x in stdin.split(' ')]\n    if N[1] % N[0]:\n        return '-1'\n    zero_start = N[0]\n    one_start = N[1] // N[0]\n    one_count = N[1] % N[0]\n    one_end = one_start + 1\n    zero_end = zero_start + one_count\n    while one_count > 0:\n        zero_end = zero_start + one_count\n        one_count -= 1\n        one_end += 1\n        if not one_count:\n            break\n        zero_end += one_start\n        one_start += 1\n    return '{0:b}'.format(N[1])"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    zero_num = int(stdin.split(' ')[0])\n    one_num = int(stdin.split(' ')[1])\n    if zero_num == 0 or one_num == 0:\n        print(-1)\n    else:\n        result.extend([0] * zero_num)\n        result.extend([1] * one_num)\n        if zero_num + one_num % 2 == 0:\n            i = 0\n            while i < len(result) - 2:\n                if result[i] == 0 and result[i + 1] == 0 and result[i + 2] == 1:\n                    break\n                if result[i] == 0 and result[i + 1] == 1 and result[i + 2] == 1:\n                    break\n                i += 1\n            if i!= len(result) - 2:\n                result[i + 1] = 0\n            else:\n                print(-1)\n        else:\n            i = 0\n            while i < len(result) - 1:\n                if result[i] == 0 and result[i + 1] == 0 and result[i + 2] == 1:\n                    break\n                i += 1\n            if i == len(result) - 1:\n                print(-1)\n            else:\n                result[i + 1] = 0\n        print(''.join(str(i) for i in result))\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    n, m = int(lst[0]), int(lst[1])\n    lst = []\n    count = 0\n    for i in range(m):\n        lst.append('0')\n        lst.append('1')\n    for i in range(n):\n        lst.append('0')\n        lst.append('1')\n    count = 0\n    for i in range(2 * m):\n        if lst[i] == '0':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return '-1'\n    return ''.join(lst)\nprint(solution(input()))\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split(' ')]\n    res
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, c = stdin.split(' ')\n    d = int(d)\n    c = int(c)\n\n    if c > d:\n        d = c + (d - c) / 2\n    else:\n        d = d / 2\n    return d\nprint(solution(input()))"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n,k = stdin.split()\n    n = int(n)\n    k = int(k)\n    \n    d = n//k\n    c = (n-d)*k\n    if c >= d:\n        return str(d)+\" \"+str(c)+\" \"+str(n-d-c)\n    else:\n        return str(d)+\" \"+str(0)+\" \"+str(n-d)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = n * k + (n // 2)\n    b = n * (k + 1) + (n // 2)\n    c = n * (k + 2) + (n // 2)\n    return str(a) +'' + str(b) +'' + str(c)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n    n, k = stdin[0], stdin[1]\n    if n <= k:\n        return \"0 0 0\"\n    d = n // 2\n    c = k * d\n    return str(d) + \" \" + str(c) + \" \" + str(n - d * 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    c, d, f = 0, 0, 0\n    for _ in range(n):\n        if (c + k) // 2 >= d:\n            c += k\n            d += 1\n        else:\n            c += k\n            d += 1\n            f += 1\n    return f'{d} {c} {f}'\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    certs, dipla = 0, 0\n    for i in range(n):\n        if i % k == 0:\n            certs += 1\n        else:\n            dipla += 1\n    return str(dipla) +'' + str(certs) +'' + str(n - dipla - certs)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"0 0 \" + str(n)\n    elif k == n:\n        return str(n) + \" \" + str(n) + \" \" + str(0)\n    else:\n        rem = n - k * n // 2\n        return str(n - rem) + \" \" + str(k) + \" \" + str(rem)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n, k = int(stdin[0]), int(stdin[1])\n    return str(int((n // (k * 2)) * (k + (n - k * 2))) + (n - int((n // (k * 2)) * (k + (n - k * 2))))\n    # return str(int((n // k) * (k + (n - k)))) + str(n - int((n // k) * (k + (n - k))))\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    c = n // 2\n    print(c)\n    if n > 1:\n        print(2 * c)\n        print(k * c)\n        print(k * c - n)\n    else:\n        print(0)"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    diploma, certificate, others = (0, 0, 0)\n    for i in range(1, n + 1):\n        if k * i > n:\n            break\n        if i <= n // 2:\n            diploma += 1\n        elif i == n + 1:\n            others += 1\n        else:\n            certificate += 1\n    print(diploma, certificate, others)\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if stdin.count(\"0\") % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = stdin\n    n = int(n)\n    if(n%10 in [1,2,3,5,6,8,9]):\n        print('YES')\n    elif(n%100 in [11,22,33,55,66,77,88,99]):\n        print('YES')\n    elif(n%1000 in [111,222,333,555,666,777,888,999]):\n        print('YES')\n    elif(n%10000 in [11111,22222,33333,55555,66666,77777,88888,99991]):\n        print('YES')\n    else:\n        print('NO')\n    return ''\n    \n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    p, z = 0, 0\n    while x > 10:\n        x, rest = divmod(x, 10)\n        p += 1\n        if rest == 0 or rest == 5 or rest == 6:\n            z += 1\n    if p % 2!= 0 and z == 0:\n        return \"YES\"\n    elif p % 2 == 0 and z % 2!= 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    string = str(x)\n    if string == string[::-1]:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if len(str(x)) % 2!= 0:\n        return \"NO\"\n    x = str(x)\n    l, r = 0, len(x) - 1\n    while l < r:\n        if x[l]!= x[r]:\n            return \"NO\"\n        l += 1\n        r -= 1\n    return \"YES\"\n    pass"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = int(x)\n    c = 0\n    for i in range(1, 10**4):\n        a = str(x + i)\n        if a == a[::-1]:\n            c += 1\n        if c > 1:\n            break\n    if c == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if stdin == stdin[::-1] else \"NO\""
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    num = list(stdin)\n    for i in range(len(num)):\n        if len(num) % 2 == 1:\n            return \"NO\"\n        num[i] = int(num[i])\n        if num[i] % 2 == 1:\n            num[i] += 1\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    t = str(a)\n    if t == t[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return ''"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = list(str(x))\n    z = y[::-1]\n    x_add = ''.join(y)\n    x_add = int(x_add)\n    z_add = ''.join(z)\n    z_add = int(z_add)\n    if x_add == z_add:\n        print('YES')\n    else:\n        print('NO')\n    return ''\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return \"1\""
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given n - the length of the sides of a triangle, returns the number of xorangles of order n.\n\n    Args:\n        stdin (str): A string of input.\n\n    Returns:\n        str: A string of output.\n    \"\"\"\n    # Since there are two cases for each n:\n    # (1) n - a triangle can only have 2 unique xorangles\n    # (2) n - a triangle can have at least 3 unique xorangles\n    # So, for each n we need to divide the count by two\n    # (1) n - a triangle can only have 2 unique xorangles\n    # (2) n - a triangle can have at least 3 unique xorangles\n    # We can determine this by counting the number of xorangles for n - 2\n    # We count them by counting the number of xorangles for n - 4\n    # We do this twice for each n.\n    # So, the total count is the sum of the count for n - 2 * 2\n    # and the count for n - 4 * 2\n\n    # The total count for each n is equal to the number of xorangles for n - 4\n    # and the number of xorangles for n - 2 + the number of xorangles for n - 4\n    # We do this twice for each n\n    # The total count is the sum of the number of xorangles for n - 4 * 2\n    # and the number of xorangles for n - 2 + the number of xorangles for n - 4 * 2\n    # The number of xorangles for n - 2 is the number of xorangles for n - 4\n    # and the number of xorangles for n - 4 is the number of xorangles for n - 2 + the number of xorangles for n - 4\n\n    # The count for n - 4 is equal to the number of xorangles for n - 2 + the number of xorangles for n - 2\n    # The count for n - 2 is equal to the number of xorangles for n - 4\n    # and the count for n - 4 is equal to the number of xorangles for n - 2 + the number of xorangles for n - 4\n\n    # So, the total count is the sum of the count for n - 2 * 2\n    # and the number of xorangles for n - 2 + the number of xorangles for n - 4 + the number of xorangles for n - 2\n    # The number of xorangles for n - 4 is equal to the number of xorangles for n - 2\n    # The number of xorangles for n - 2 is equal to the number of xorangles for n - 4 + the number of xorangles for n - 2\n    # and the number of xorangles for n - 4 is equal to the number of xorangles for n - 2 + the number of xorangles for n - 4\n\n    # The count for n - 2 is equal to the number of xorangles for n - 4 + the number of xorangles for n - 4\n    # The number of xorangles for n - 4 is equal to the number of xorangles for n - 2\n    # and the number of xorangles for n - 2 is equal to the number of xorangles for n - 4 + the number of xorangles for n - 2\n\n    n = int(stdin)\n    xorangles = [1]\n    total_count = 0\n\n    for _ in range(n - 2):\n        count = xorangles[-1]\n        for _ in range(2):\n            count += xorangles[-1]\n        total_count += count\n        xorangles.append(count)\n\n    print(total_count)"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]))\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # pass # for grading purposes\n    # 1\n    return 0"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(2)\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\n')\n    1\n    >>> solution('10\\n')\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    \n    count = 0\n    for a in range(1, n):\n        for b in range(a + 1, n + 1):\n            if a ^ b ^ n == 0:\n                count += 1\n                # a, b, n are numbers of triangle sides (a < b < n)\n    return str(count)\n    # The time complexity is O(n^3)\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  res = 0\n  for a in range(n):\n    for b in range(n):\n      for c in range(n):\n        if a * b + b * c + c * a == 0:\n          res += 1\n  return str(res)\n  \n  \n  \ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def in_range(x, y) -> bool:\n        return 0 <= x < r and 0 <= y < c\n\n    def neighbors(x, y) -> List[Tuple[int, int]]:\n        result = []\n        for (dx, dy) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_x, new_y = x + dx, y + dy\n            if in_range(new_x, new_y) and (new_x, new_y)!= (x, y):\n                result.append((new_x, new_y))\n        return result\n\n    r, c, r_1, c_1, r_2, c_2 = [int(x) for x in stdin.split()]\n    level = stdin.split('\\n')\n    queue = deque([(r_1 - 1, c_1 - 1)])\n    seen = {(r_1 - 1, c_1 - 1)}\n    path = []\n    cracked = set()\n\n    while queue:\n        x, y = queue.popleft()\n\n        if x == r_2 - 1 and y == c_2 - 1:\n            print('YES')\n            print(' '.join(path))\n            return\n\n        if x == r - 1 and y == c - 1:\n            print('NO')\n            return\n\n        if level[x][y] == 'X':\n            for n in neighbors(x, y):\n                if n not in seen:\n                    queue.append(n)\n                    seen.add(n)\n        else:\n            for n in neighbors(x, y):\n                if n not in seen:\n                    queue.append(n)\n                    seen.add(n)\n                    if n in cracked:\n                        cracked.remove(n)\n                    else:\n                        cracked.add(n)\n\n        path.append(level[x][y])\n\n    print('NO')\n    return\n\n\nsolution(stdin)\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if 'X' in stdin[:stdin.index('2')] else 'NO'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get initial information\n    number_of_rows, number_of_columns = map(int, stdin.readline().split())\n    current_coordinates = tuple(map(int, stdin.readline().split()))\n    destination_coordinates = tuple(map(int, stdin.readline().split()))\n\n    # Create matrix\n    matrix = []\n    for i in range(number_of_rows):\n        matrix.append(list(stdin.readline().split()))\n\n    # Find out the destination cell\n    # It is always in the same row as the initial coordinates and the same column as the destination coordinates\n    destination_row = destination_coordinates[0]\n    destination_column = destination_coordinates[1]\n\n    # Travel the matrix\n    rows = number_of_rows\n    columns = number_of_columns\n\n    # Track whether we can travel\n    can_travel = True\n\n    # This is a queue with the coordinates to travel\n    queue = []\n    # This is a set with the visited coordinates\n    visited_coordinates = set()\n    queue.append(current_coordinates)\n    visited_coordinates.add(current_coordinates)\n\n    # Travel the matrix\n    while can_travel and len(queue) > 0:\n        # Get the next coordinate\n        next_coordinate = queue.pop(0)\n\n        # Check whether we are in the destination cell\n        if next_coordinate[0] == destination_row and next_coordinate[1] == destination_column:\n            # We reached the destination\n            can_travel = False\n        else:\n            # Next coordinate is a valid neighbour\n            neighbour = (next_coordinate[0] + 1, next_coordinate[1])\n            if neighbour not in visited_coordinates:\n                queue.append(neighbour)\n                visited_coordinates.add(neighbour)\n\n            neighbour = (next_coordinate[0], next_coordinate[1] + 1)\n            if neighbour not in visited_coordinates:\n                queue.append(neighbour)\n                visited_coordinates.add(neighbour)\n\n            neighbour = (next_coordinate[0] - 1, next_coordinate[1])\n            if neighbour not in visited_coordinates:\n                queue.append(neighbour)\n                visited_coordinates.add(neighbour)\n\n            neighbour = (next_coordinate[0], next_coordinate[1] - 1)\n            if neighbour not in visited_coordinates:\n                queue.append(neighbour)\n                visited_coordinates.add(neighbour)\n\n    # Check whether we can travel\n    if can_travel:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    game_map = [list(stdin) for _ in range(n)]\n    player = (int(stdin.split()[0]), int(stdin.split()[1]))\n    destination = (int(stdin.split()[2]), int(stdin.split()[3]))\n    #print(n, m, game_map, player, destination)\n    #[print(row) for row in game_map]\n    if player == destination:\n        return 'YES'\n    q = [(player[0], player[1], 0)]\n    while q:\n        row, col, level = q.pop(0)\n        if row == destination[0] and col == destination[1] and level:\n            return 'YES'\n        if game_map[row][col] == 'X':\n            continue\n        game_map[row][col] = 'X'\n        if row + 1 < n and game_map[row + 1][col]!= 'X':\n            q.append((row + 1, col, level))\n        if row - 1 >= 0 and game_map[row - 1][col]!= 'X':\n            q.append((row - 1, col, level))\n        if col + 1 < m and game_map[row][col + 1]!= 'X':\n            q.append((row, col + 1, level))\n        if col - 1 >= 0 and game_map[row][col - 1]!= 'X':\n            q.append((row, col - 1, level))\n    return 'NO'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from typing import List, Tuple\n    def solution(matrix: List[str]) -> Tuple[bool, Tuple[int, int], Tuple[int, int]]:\n        \"\"\"\n        >>> solution('XXX.X')\n        (True, (0, 0), (0, 0))\n        >>> solution('X.X.X')\n        (True, (0, 1), (0, 1))\n        >>> solution('X..X.X')\n        (False, (0, 0), (1, 0))\n        >>> solution('....')\n        (True, (1, 1), (1, 1))\n        >>> solution('....X')\n        (True, (1, 1), (1, 1))\n        >>> solution('....X.')\n        (False, (0, 0), (0, 0))\n        >>> solution('....X.X')\n        (False, (0, 0), (1, 0))\n        >>> solution('..X.X.X.')\n        (False, (1, 0), (0, 0))\n        >>> solution('....X.X..')\n        (False, (1, 1), (0, 1))\n        >>> solution('....X.X..X')\n        (False, (1, 1), (0, 1))\n        >>> solution('X....X.X..X')\n        (False, (0, 1), (0, 1))\n        \"\"\"\n        n = len(matrix)\n        m = len(matrix[0])\n        x_pos = 0\n        y_pos = 0\n        for y_pos, line in enumerate(matrix):\n            if 'X' in line:\n                x_pos = line.index('X')\n                y_pos = y_pos\n                break\n\n        for y_pos, line in enumerate(matrix):\n            if 'X' in line:\n                x_pos = line.index('X')\n                break\n\n        if matrix[y_pos][x_pos] == 'X':\n            return (False, (0, 0), (0, 0))\n\n        return (True, (x_pos, y_pos), (x_pos, y_pos))\n\n    n, m = map(int, stdin.split())\n    matrix = [stdin[i:i+m] for i in range(0, len(stdin), m)]\n\n    return 'YES' if solution(matrix)[0] else 'NO'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    cave = []\n    for i in range(1, n + 1):\n        cave.append(list(lines[i]))\n    start = list(map(int, lines[n + 1].split()))\n    end = list(map(int, lines[n + 2].split()))\n    print(start)\n    print(end)\n    return 'YES' if cave[start[0]][start[1]] == 'X' and cave[end[0]][end[1]] == 'X' else 'NO'"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = 'NO'\n    start = [int(x) for x in stdin.split()]\n    for i in range(n):\n        for j in range(m):\n            if start[i] and start[j]:\n                ans = 'YES'\n    return ans"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r1, c1, r2, c2 = [int(num) for num in stdin.split()]\n    \n    current_row = r1 - 1\n    current_col = c1 - 1\n    destination_row = r2 - 1\n    destination_col = c2 - 1\n    \n    def is_destination(current_row, current_col, destination_row, destination_col):\n        return current_row == destination_row and current_col == destination_col\n    \n    def is_cracked(current_row, current_col):\n        return cave[current_row][current_col] == \"X\"\n    \n    def is_intact(current_row, current_col):\n        return cave[current_row][current_col] == \".\"\n    \n    def is_valid_direction(current_row, current_col, direction):\n        if direction == \"down\":\n            return current_row + 1 <= n\n        if direction == \"up\":\n            return current_row - 1 >= 0\n        if direction == \"right\":\n            return current_col + 1 <= m\n        if direction == \"left\":\n            return current_col - 1 >= 0\n    \n    def find_next_step(current_row, current_col, direction):\n        if direction == \"down\":\n            return current_row + 1, current_col\n        if direction == \"up\":\n            return current_row - 1, current_col\n        if direction == \"right\":\n            return current_row, current_col + 1\n        if direction == \"left\":\n            return current_row, current_col - 1\n    \n    cave = [[None for _ in range(m)] for _ in range(n)]\n    \n    for i in range(n):\n        row = stdin[i * m: i * m + m]\n        for j, char in enumerate(row):\n            if char == \"X\":\n                cave[i][j] = \"X\"\n            else:\n                cave[i][j] = \".\"\n    \n    if is_destination(current_row, current_col, destination_row, destination_col):\n        return \"YES\"\n    \n    # down\n    if is_valid_direction(current_row, current_col, \"down\"):\n        next_row, next_col = find_next_step(current_row, current_col, \"down\")\n        if is_intact(next_row, next_col) and not is_cracked(next_row, next_col):\n            current_row, current_col = next_row, next_col\n            if is_destination(current_row, current_col, destination_row, destination_col):\n                return \"YES\"\n    \n    # up\n    if is_valid_direction(current_row, current_col, \"up\"):\n        next_row, next_col = find_next_step(current_row, current_col, \"up\")\n        if is_intact(next_row, next_col) and not is_cracked(next_row, next_col):\n            current_row, current_col = next_row, next_col\n            if is_destination(current_row, current_col, destination_row, destination_col):\n                return \"YES\"\n    \n    # right\n    if is_valid_direction(current_row, current_col, \"right\"):\n        next_row, next_col = find_next_step(current_row, current_col, \"right\")\n        if is_intact(next_row, next_col) and not is_cracked(next_row, next_col):\n            current_row, current_col = next_row, next_col\n            if is_destination(current_row, current_col, destination_row, destination_col):\n                return \"YES\"\n    \n    # left\n    if is_valid_direction(current_row, current_col, \"left\"):\n        next_row, next_col = find_next_step(current_row, current_col, \"left\")\n        if is_intact(next_row, next_col) and not is_cracked(next_row, next_col):\n            current_row, current_col = next_row, next_col\n            if is_destination(current_row, current_col, destination_row, destination_col):\n                return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    a, b = map(int, stdin.readline().split())\n    if a < b:\n        a, b = b, a\n    n = 1\n    if b == 1:\n        return 1\n    for i in range(2, b + 1):\n        if i == b:\n            n += 1\n            break\n        if a % i == 0 and b % i == 0:\n            n += 2\n    return n - 2\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\"\"\"\nFirst, I convert each input string to a list of integers.\nThen, I create a list of lists representing the adjacency matrix.\nFinally, I create a list of tuples representing the requests\n\"\"\"\n\ndef"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = list(map(int, stdin.split()))\n    connections = {}\n    for i in range(1, N+1):\n        connections[i] = []\n    for i in range(1, len(edges), 2):\n        connections[edges[i-1]].append(edges[i])\n        connections[edges[i]].append(edges[i-1])\n    print(connections)\n    \n    def dijkstra(graph: dict, start: int) -> list:\n        distances = [float('inf')] * len(graph)\n        distances[start] = 0\n        visited = set()\n        pq = PriorityQueue()\n        pq.put((0, start))\n        while pq.qsize()!= 0:\n            current_distance, current_node = pq.get()\n            if current_node in visited:\n                continue\n            visited.add(current_node)\n            for neighbor in graph[current_node]:\n                if neighbor in visited:\n                    continue\n                new_distance = current_distance + 1\n                if new_distance < distances[neighbor]:\n                    distances[neighbor] = new_distance\n                    pq.put((distances[neighbor], neighbor))\n        return distances\n    \n    def find_min_bridges(connections: dict) -> int:\n        distances = dijkstra(connections, 1)\n        min_bridges = float('inf')\n        for i in range(1, N+1):\n            if distances[i]!= float('inf'):\n                min_bridges = min(min_bridges, sum(distances[j] for j in connections[i]))\n        return min_bridges\n    \n    return find_min_bridges(connections)"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nSOLUTION:\n\nWe start by creating a graph of N (nodes) by N (edges)\nWe then create a list of bridges,\nThen for each request we add to the list\nThen we do BFS and find the shortest path\nThe answer is the size of this shortest path\n\"\"\"\n\n\nfrom queue import Queue\nfrom collections import defaultdict\n\n\nclass Solution:\n    def shortest_path_bfs(self, graph, start, end):\n        # BFS with queue\n        # Time: O(V + E)\n        # Space: O(V)\n\n        if start == end:\n            return 0\n\n        visited = set()\n        queue = Queue()\n        queue.put(start)\n        visited.add(start)\n\n        while not queue.empty():\n            curr = queue.get()\n            for neighbor in graph[curr]:\n                if neighbor not in visited:\n                    queue.put(neighbor)\n                    visited.add(neighbor)\n\n            if end in visited:\n                return len(visited) - 1\n\n        return -1\n\n    def solution(self, input_str):\n        # Get input into list\n        input_list = list(map(int, input_str.split()))\n        n = input_list[0]\n        m = input_list[1]\n\n        # Create graph\n        graph = defaultdict(set)\n\n        # Create edges\n        for _ in range(m):\n            i, j = map(int, input().split())\n            graph[i].add(j)\n\n        # BFS\n        ans = self.shortest_path_bfs(graph, 1, n)\n        return ans\n\n\ndef"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Read the number of islands and the number of requests\n    N, M = map(int, stdin.readline().split())\n    \n    # The number of bridges must be exactly M - N + 1\n    if M - N + 1 > 0:\n        return M - N + 1\n    else:\n        return 0\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Sample Output\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_longest(arr):\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            return max(arr[0], find_longest(arr[1:]))\n    return 'first' if find_longest(list(map(lambda x: abs(x), stdin.split()))) > find_longest(list(map(lambda x: -abs(x), stdin.split()))) else'second'\n\nor\ndef"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"first\" if stdin[0] > stdin[-1] else \"second\"\n\"\"\"\n\ndef"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def arr(n: int, arr: list) -> list:\n        for i in range(n):\n            arr[i] = int(input().strip())\n        return arr\n\n    n = int(input().strip())\n    arr = [0] * n\n    arr = arr(n, arr)\n    first = arr[n - 1]\n    second = arr[0]\n    arr = [0] * (n + 1)\n    arr[0] = first\n    arr[1] = second\n    for i in range(n - 1):\n        arr[i + 2] = abs(arr[i + 1] - arr[i])\n    arr = sorted(arr)\n    for i in range(n):\n        if (arr[i] < arr[i + 1]):\n            if (arr[i] > abs(arr[i + 1])):\n                print('first')\n            else:\n                print('second')\n            return\n    print('second')\n    return"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # create a list of techniques\n    # each technique is represented as a tuple of the form (a, b) where\n    # a is the number of points that were awarded to the first wrestler,\n    # and b is the number of points that were awarded to the second wrestler\n    techniques = [tuple(map(int, line.strip().split())) for line in stdin]\n    \n    # sort the techniques by the first element, so that the technique with\n    # the largest absolute value wins\n    techniques.sort(reverse = True, key = lambda t: t[0])\n    \n    # the first element of techniques is the winning technique\n    winning_technique = techniques[0]\n    \n    # if there are only 2 techniques, then the second element must be 0\n    # so the first element wins\n    if len(techniques) == 2:\n        return 'first' if winning_technique[0] > 0 else'second'\n    \n    # for each technique t, get the difference between the absolute value of the first\n    # and second values and see if it is larger than the difference between the absolute value\n    # of the first and second values of the winning technique\n    for t in techniques[1:]:\n        if abs(winning_technique[0] - t[0]) > abs(winning_technique[0] - t[1]):\n            return'second'\n        if abs(winning_technique[0] - t[0]) < abs(winning_technique[0] - t[1]):\n            return 'first'\n    \n    # if all of the techniques are the same, return the one where the last value is positive\n    return 'first' if winning_technique[0] > 0 else'second'\n\n\n\n\"\"\"\nGiven a list of techniques of the form (a, b), where a is the number of points that were awarded to the first wrestler, and b is the number of points that were awarded to the second wrestler, determine who the winner is.\n\nNote that the number of techniques n is less than or equal to 2 \u00b7 10^5.\n\nInput\nThe first line contains a single integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 the number of techniques.\n\nThe following n lines contain two integers each, ai and bi (|ai|, |bi| \u2264 10^9, ai \u2260 0, bi \u2260 0) \u2014 the number of points that were awarded to the first wrestler and the second wrestler, respectively.\n\nOutput\nPrint \"first\" if the first wrestler is the winner, \"second\" if the second wrestler is the winner, and \"tie\" if the sequence of points is the same for both wrestlers.\n\nExamples\nInput\n5\n1\n2\n-3\n-4\n3\n\nOutput\nsecond\n\nInput\n3\n-1\n-2\n3\n\nOutput\nfirst\n\nInput\n2\n4\n-4\n\nOutput\nsecond\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"first\" if first_wrestler(stdin) > second_wrestler(stdin) else \"second\"\n\n\ndef"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'first' if stdin[0] > 0 else'second'\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'first' if len(stdin) > len(stdin.replace('-', '0')) or len(stdin) < len(stdin.replace('-', '0')) else'second' if stdin.count('-') % 2 else 'first' if len(stdin) > len(stdin.replace('-', '0')) else'second'\n\n\ndef"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    s = 0\n    for x in a:\n        s += x - 2\n    if s % 2 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    d = dict()\n    coupon = dict()\n    discount = dict()\n    for i in range(n):\n        for j in range(a[i]):\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in range(a[i]):\n            if j in coupon:\n                coupon[j] += 1\n            else:\n                coupon[j] = 1\n        for j in range(a[i]):\n            if j in discount:\n                discount[j] += 1\n            else:\n                discount[j] = 1\n    maxCount = max(d.values())\n    if maxCount > n:\n        return \"NO\"\n    for k in d.keys():\n        if d[k] == maxCount:\n            if k + 1 in coupon and k + 1 in discount:\n                if coupon[k + 1] > 1:\n                    coupon[k + 1] -= 1\n                    if coupon[k + 1] == 1:\n                        discount[k + 1] -= 1\n                elif discount[k + 1] > 1:\n                    discount[k + 1] -= 1\n                    if discount[k + 1] == 1:\n                        coupon[k + 1] -= 1\n                else:\n                    return \"NO\"\n            elif k + 1 in coupon:\n                if coupon[k + 1] > 1:\n                    coupon[k + 1] -= 1\n                else:\n                    return \"NO\"\n            elif k + 1 in discount:\n                if discount[k + 1] > 1:\n                    discount[k + 1] -= 1\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pizzas = list(map(int, stdin.readline().split()))\n\n    return \"YES\" if pizzas[0] * n == pizzas[1] * n else \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 0 1\n   ... ''')\n    'NO'\n    >>> solution('''2\n   ... 1 2\n   ... ''')\n    'YES'\n    \"\"\"\n    n = int(stdin.readline())\n    pizzas = list(map(int, stdin.readline().split()))\n\n    coupon = 0\n    day_pizzas = 0\n    for i in range(n):\n        if not coupon and pizzas[i] == 1:\n            coupon = i\n        else:\n            if not coupon and pizzas[i] == 2:\n                coupon = i\n            else:\n                day_pizzas += pizzas[i]\n                if day_pizzas > n:\n                    break\n    else:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    print(s)\n    n = int(s[0])\n    a = list(map(int, s[1].split()))\n    print(a)\n\n    result = 'YES'\n    for i in range(n):\n        if a[i] < 3:\n            result = 'NO'\n            break\n    print(result)\n\n    return result\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    from collections import Counter\n    n = int(stdin.readline())\n    coupons = [int(c) for c in stdin.readline().split()]\n    current_coupon = 0\n    current_pizza = 0\n    for i, c in enumerate(coupons):\n        if c == 1 and i > 0 and coupons[i-1] == 1:\n            current_coupon += 1\n        elif c == 1 and current_coupon >= 2:\n            current_coupon += 1\n            current_coupon = 0\n        else:\n            current_pizza += 1\n            current_coupon = 0\n    if current_pizza <= 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    pizzas = list(map(int, stdin.split()))\n    pizzas.sort(reverse=True)\n    memo = [pizzas[0]]\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] >= pizzas[i]:\n            memo.append(pizzas[i])\n    if len(memo) == len(a):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution in string format\n    \"\"\"\n    return '\\n'.join([is_palindrome(s) for s in stdin.split('\\n\\n')])\n\n\ndef"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    num_str = stdin.split()[0]\n    num_str = int(num_str)\n\n    for _ in range(num_str):\n        str_in = stdin.split('\\n')[1:]\n        str_in = str_in[0]\n        str_in = str_in.lower()\n        chars = str_in.split()[0]\n        chars = int(chars)\n\n        for i in range(len(str_in)):\n            str_in = str_in.lower()\n            chars = str_in.split()[0]\n            chars = int(chars)\n\n            if str_in[i] == str_in[i + 1]:\n                break\n\n            elif i < chars - 2:\n                if str_in[i] < str_in[i + 2]:\n                    str_in = str_in[:i] + str_in[i + 1] + str_in[i] + str_in[i + 2:]\n                else:\n                    str_in = str_in[:i] + str_in[i + 2] + str_in[i + 1] + str_in[i]\n            else:\n                if str_in[i] < str_in[i - 1]:\n                    str_in = str_in[:i] + str_in[i + 1] + str_in[i] + str_in[i - 1]\n                else:\n                    str_in = str_in[:i] + str_in[i - 1] + str_in[i] + str_in[i + 1]\n\n            str_in = str_in.lower()\n\n            if str_in[i] == str_in[i + 1]:\n                break\n            elif i < chars - 2:\n                if str_in[i] < str_in[i + 2]:\n                    str_in = str_in[:i] + str_in[i + 1] + str_in[i] + str_in[i + 2:]\n                else:\n                    str_in = str_in[:i] + str_in[i + 2] + str_in[i + 1] + str_in[i]\n            else:\n                if str_in[i] < str_in[i - 1]:\n                    str_in = str_in[:i] + str_in[i + 1] + str_in[i] + str_in[i - 1]\n                else:\n                    str_in = str_in[:i] + str_in[i - 1] + str_in[i] + str_in[i + 1]\n\n            print(str_in)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    changed = False\n    ans = 'YES'\n    for i in range(n // 2):\n        if s[i]!= s[n - 1 - i]:\n            if not changed:\n                changed = True\n                ans = 'NO'\n            if s[i] < s[n - 1 - i]:\n                s = s[:i] + s[i + 1:]\n            else:\n                s = s[:i] + s[i] + s[i + 1:]\n        else:\n            if not changed:\n                changed = True\n                ans = 'NO'\n    if not changed:\n        ans = 'YES'\n    print(ans)\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == 1 else 'NO'"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nabccba\\n2\\ncf\\n4\\nadfa\\n8\\nabaazaba\\n2\\nml\")\n    YES\n    >>> solution(\"5\\nabccba\\n2\\ncf\\n4\\nadfa\\n8\\nabaazaba\\n2\\nml\")\n    NO\n    \"\"\"\n    T = int(stdin)\n    answers = []\n    for _ in range(T):\n        n = int(stdin)\n        s = stdin\n        s = [char for char in s]\n        prev = None\n        for i in range(n // 2):\n            if prev == None:\n                prev = s[i]\n            if s[i]!= s[-1 - i]:\n                if s[i] < prev:\n                    s[i] = prev\n                    prev = s[i]\n                elif s[i] > s[-1 - i]:\n                    s[-1 - i] = prev\n                    prev = s[-1 - i]\n                else:\n                    print(\"NO\")\n                    answers.append(\"NO\")\n                    break\n        else:\n            answers.append(\"YES\")\n        stdin = stdin.split(\"\\n\")[1]\n    print(\"\\n\".join(answers))\n    return \"\"\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    testcase = stdin[0]\n    testcase = int(testcase)\n    \n    for i in range(testcase):\n        t = stdin[i+1].split()\n        string = stdin[i+2].split()\n        lenght = int(t[0])\n        s = ''\n        for k in range(lenght):\n            if string[k] == string[(lenght)-1-k]:\n                s += string[k]\n            else:\n                if string[k] == 'z' and string[(lenght)-1-k] == 'a':\n                    s += 'a'\n                elif string[(lenght)-1-k] == 'a' and string[k] == 'z':\n                    s += 'z'\n                elif string[k] < string[(lenght)-1-k]:\n                    s += string[(lenght)-1-k]\n                else:\n                    s += string[k]\n        if s == string:\n            print('YES')\n        else:\n            print('NO')\n        \n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, t = stdin.split('\\n')\n    n = int(l.split()[0])\n    s1 = stdin.split('\\n')[1]\n    s2 = stdin.split('\\n')[2]\n    s3 = ''\n    if n <= 1:\n        s3 = s1\n    elif n == 2:\n        if t == 1:\n            if s1[0]!= s2[0]:\n                s3 = s1[0] + s2[0]\n            else:\n                s3 = s1[1] + s2[1]\n        else:\n            s3 = s1[0] + s2[0]\n    else:\n        if t == 1:\n            s3 = s1[0] + s2[0]\n        else:\n            s3 = s1[0] + s2[0]\n    return s3\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s1, s2 = stdin.split()\n\n    if t == 0:\n        return s1\n    elif n == t:\n        return s2\n    else:\n        return -1\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s1 = stdin[:n]\n    s2 = stdin[n:]\n    s3 = ''\n    for i in range(n):\n        if s1[i]!= s2[i] and s1[i]!= s3[i] and s2[i]!= s3[i]:\n            s3 = s3 + s1[i]\n            break\n    if len(s3) == n:\n        return s3\n    else:\n        return -1\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    s1 = stdin[0]\n    s2 = stdin[1]\n    t = stdin[2]\n    \n    len_s1 = len(s1)\n    len_s2 = len(s2)\n    \n    i = 0\n    j = 0\n    \n    while i < len_s1 and j < len_s2:\n        if s1[i]!= s2[j]:\n            if s1[i] == t:\n                j += 1\n                continue\n            elif s2[j] == t:\n                i += 1\n                continue\n            else:\n                return '-1'\n        else:\n            i += 1\n            j += 1\n    \n    if i < len_s1 and j >= len_s2:\n        return s1[:i] + t\n    elif i >= len_s1 and j < len_s2:\n        return s2[:j] + t\n    else:\n        return '-1'\n    "
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    string1 = stdin[0]\n    string2 = stdin[1]\n    n, t = [int(i) for i in stdin[0].split()]\n    string3 = stdin[2]\n    if abs(len(string1) - len(string2)) > t or abs(len(string1) - len(string3)) > t or abs(len(string2) - len(string3)) > t:\n        print(-1)\n    else:\n        for i in range(0, len(string1)):\n            if string1[i]!= string2[i]:\n                t = t - 1\n            else:\n                t = t - abs(len(string1) - len(string3))\n            if t < 0:\n                print(string3)\n                break\n        else:\n            print(\"Impossible\")\n\n\ndef"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split(' ')]\n    s1 = stdin[:n]\n    s2 = stdin[n:]\n\n    def hamming_dist(s1: str, s2: str) -> int:\n        return sum(1 for x, y in zip(s1, s2) if x!= y)\n\n    def find_k_diff(k: int) -> str:\n        for i in range(len(s1) - k + 1):\n            d = hamming_dist(s1[i:i + k], s2[i:i + k])\n            if d == t:\n                return s1[i:i + k]\n        return -1\n\n    k = 1\n    res = find_k_diff(k)\n    while res!= -1:\n        k += 1\n        res = find_k_diff(k)\n\n    return res\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split(' ')\n    n = int(n)\n    t = int(t)\n    str1 = stdin.split('\\n')[1]\n    str2 = stdin.split('\\n')[2]\n    length = n\n    difference = t\n    while True:\n        diff = 0\n        for i in range(length):\n            if str1[i]!= str2[i]:\n                diff += 1\n        if diff == difference:\n            return str1[:i] + str2[i] + str1[i+1:]\n        length += 1\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(s) for s in stdin.split(\" \")]\n    s_1, s_2 = stdin.split(\"\\n\")[1], stdin.split(\"\\n\")[2]\n    if len(s_1)!= n or len(s_2)!= n or len(s_1)!= len(s_2):\n        return \"-1\"\n    targets = [s_1, s_2]\n    for i in range(1, n):\n        for target in targets:\n            if len(target)!= i:\n                continue\n            for j in range(n - i + 1):\n                if target[j : j + i] not in targets:\n                    break\n            else:\n                return target[j : j + i]\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n, t = int(n), int(t)\n    s1, s2 = stdin.split()\n    s1_index = 0\n    s2_index = 0\n    ans = 0\n    \n    while s1_index < n and s2_index < n:\n        if s1[s1_index] == s2[s2_index]:\n            s2_index += 1\n        else:\n            s1_index += 1\n            ans += 1\n            if ans > t:\n                return '-1'\n    \n    return s1[s1_index:]\n\ndef"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pattern, string = stdin.split('\\n')[:2]\n    return 'NO' if string.count(pattern) > 1 else 'YES'\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pat = stdin\n    strs = stdin\n    n = int(stdin)\n    res = []\n    for _ in range(n):\n        res.append(is_match(pat, strs))\n    return '\\n'.join(res)\ndef"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin\n    strings = stdin\n    n = int(stdin)\n    if pattern.count('?') > len(pattern) or pattern.count('*') > len(pattern):\n        return \"NO\"\n    for _ in range(n):\n        string = stdin\n        if len(pattern)!= len(string):\n            return \"NO\"\n        if not match_any_letter(string, pattern):\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    pat = stdin[1]\n    n = int(stdin[2])\n    s = list(s)\n    pat = list(pat)\n    result = []\n    for i in range(n):\n        l = []\n        for j in range(len(pat)):\n            if pat[j] == '?':\n                l.append(s[j])\n            elif pat[j] == '*':\n                l.append(pat[j])\n        for k in l:\n            if k in s:\n                s.remove(k)\n        if len(s) == 0:\n            result.append('YES')\n        else:\n            result.append('NO')\n        s = list(stdin[i + 3])\n    for i in result:\n        print(i)\n    return result\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    goods = set(stdin)\n    w = input()\n    s = input()\n    n = int(input())\n    r = []\n    for _ in range(n):\n        x = input()\n        if set(x) - goods:\n            r.append(\"NO\")\n        else:\n            r.append(\"YES\")\n\n    return \"\\n\".join(r)\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    good_letters = stdin[0]\n    pattern = stdin[1]\n    for i in range(2, len(stdin)):\n        stdin[i] = stdin[i].replace(\"?\", \"\").replace(\"*\", \"\")\n    return good_letters in pattern * len(stdin[2:])\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # pass\n\n\ndef"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin[0]\n    good_letters = stdin[1]\n    n = int(stdin[2])\n    query_strings = [stdin[3 + i] for i in range(n)]\n\n    table = dict()\n    for i in range(len(good_letters)):\n        if good_letters[i] not in table:\n            table[good_letters[i]] = str(i)\n\n    for string in query_strings:\n        result = \"\"\n        for i in range(len(string)):\n            if string[i] == \"*\":\n                result += good_letters\n            elif string[i] == \"?\":\n                result += table.values()\n            else:\n                result += string[i]\n        if result == pattern:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the pattern matches the string, 'NO' otherwise.\"\"\"\n    pattern, *strings = stdin.split(\"\\n\")\n    return \"YES\" if all(pattern.replace(\"?\", \"a\").replace(\"*\", \"a\") == s for s in strings) else \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A!a*aa*b\n    \"\"\"\n    return\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    passwords = [stdin.rstrip() for _ in range(n)]\n    passwords.sort(key=len)\n    passwords.reverse()\n    passwords = set(passwords)\n    p = list(passwords)[0]\n    pref = set(map(len, passwords))\n    pref = list(pref)\n    pref.sort()\n    pref = pref[-1]\n    if n == 1:\n        return \"0 0\"\n    if pref == len(p):\n        return \"0 \" + str(k * 5)\n    if pref == 1:\n        return \"1 \" + str(k * 5)\n    if pref < len(p):\n        return str(pref + 1) + \" \" + str(k * 5)\n    return str(pref) + \" \" + str(k * 5)\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, solution_))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = [stdin.split()[1] for i in range(n)]\n    l = sorted(l, key=len)\n    # print(l)\n    # k = 0\n    time = 0\n    last = 1\n    for i in range(n):\n        if len(l[i]) == last:\n            k -= 1\n        if k == 0:\n            time += last\n            break\n        if len(l[i])!= last:\n            time += len(l[i])\n            last = len(l[i])\n        k -= 1\n        time += 1\n    return [time, time + n - last]"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    s = []\n    for i in range(n):\n        s.append(stdin.split()[i])\n    s = sorted(s)\n    cur = k\n    l = []\n    for i in range(n):\n        if len(s[i]) > cur:\n            l.append(s[i][cur])\n        elif len(s[i]) < cur:\n            cur -= len(s[i])\n            l.append(s[i])\n        else:\n            l.append(s[i])\n            break\n    print(str(len(l)) +'' + str(len(l) * 5))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    lst = [x for x in stdin.split('\\n')]\n    lst.pop()\n    lst_k = [x for x in stdin.split('\\n')]\n    lst_k.pop()\n    print(lst, lst_k)\n    ans_1 = 0\n    ans_2 = 0\n    for x in range(len(lst)):\n        if len(lst[x]) == len(lst[x + 1]):\n            ans_1 += 1\n        else:\n            ans_1 += (len(lst[x]) - 1)\n    for x in range(len(lst_k)):\n        ans_2 += len(lst_k[x]) - 1\n    ans_1 += 1\n    return f'{ans_1} {ans_2}'\n\n\ndef"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.split('\\n')\n    n = int(passwords.pop(0))\n    k = int(passwords.pop(0))\n\n    passwords = list(map(lambda x: x.split(':'), passwords))\n    passwords = sorted(passwords, key=lambda x: len(x[0]))\n    current_length = len(passwords[0][0])\n    min_time = current_length\n    max_time = current_length * n\n\n    while k > 0:\n        if len(passwords) <= 1:\n            if min_time > max_time:\n                min_time = max_time\n            break\n        if len(passwords[0][0]) == current_length:\n            max_time += 5\n            current_length += 1\n            passwords.pop(0)\n        elif len(passwords[0][0]) > current_length:\n            min_time += 5\n            current_length += 1\n            passwords.pop(0)\n        else:\n            min_time += 5\n            current_length += 1\n            passwords.pop(0)\n        k -= 1\n\n    return str(min_time) +'' + str(max_time)"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Solution: 1'"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_password(n: int) -> str:\n        # This is a bruteforce that will take up O(n) time\n        # It will also be O(n) space as we will be using n letters\n        # for the password.\n        passwords = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\",\n                     \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\",\n                     \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\",\n                     \"w\", \"x\", \"y\", \"z\"]\n        best = n + 1\n        for i in range(n):\n            if len(passwords) > n:\n                break\n            passwords = passwords * 2\n        for i in range(n):\n            if best >= n:\n                break\n            best += 1\n        if best >= n:\n            return \"\".join(passwords[:n])\n        return \"\".join(passwords[:best])\n\n    n, k = [int(s) for s in stdin.split()]\n    best = n + 1\n    worst = n\n    for i in range(n):\n        if k >= n:\n            break\n        if i == 0:\n            p = find_password(n - i)\n            best = min(best, len(p))\n            worst = min(worst, len(p))\n            k -= 1\n        else:\n            if best > n:\n                break\n            if len(p) < worst:\n                worst = len(p)\n            p = find_password(n - i)\n            best = min(best, len(p))\n            worst = min(worst, len(p))\n            k -= 1\n    if k >= 0:\n        best = min(best, worst)\n    return str(best) + \" \" + str(worst)\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_passwords = int(stdin.readline())\n    num_failed_attempts = int(stdin.readline())\n    failed_passwords = [stdin.readline() for _ in range(num_failed_attempts)]\n    correct_password = stdin.readline()\n    passwords_by_length = {}\n\n    for password in failed_passwords:\n        if password in passw:\n            passwords_by_length[len(password)].append(password)\n        else:\n            passwords_by_length[len(password)] = [password]\n\n    shortest_password_length = min(passwords_by_length.keys())\n    longest_password_length = max(passwords_by_length.keys())\n    for l in range(shortest_password_length, longest_password_length+1):\n        passwords_by_length[l].sort()\n\n    times = [1 for i in range(longest_password_length)]\n    times_sum = 1\n\n    for i in range(shortest_password_length):\n        for j in range(longest_password_length):\n            if len(passwords_by_length[j+1])!= 0:\n                times[j] += 1\n                passwords_by_length[j+1].pop(0)\n\n    for i in range(len(times)):\n        times_sum *= times[i]\n\n    return str(times_sum)\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    passwords, k, password = stdin.split('\\n\\n')\n    passwords = passwords.split('\\n')\n    passwords = list(map(lambda x: x.split(' '), passwords))\n    k, password = list(map(int, k.split(' ')))\n    passwords = list(map(lambda x: list(map(int, x)), passwords))\n    passwords = sorted(passwords, key=lambda x: x[0])\n\n    # len(passwords) == k + 1\n    # each password is'sorted'\n    # at each password, k/sorted_passwords + 1 passwords can be sorted\n\n    def can_sort_passwords(pw):\n        for i in range(len(pw) - 1):\n            if pw[i + 1] - pw[i] > 1:\n                return False\n        return True\n\n    for i in range(len(passwords) - 1):\n        if len(passwords[i]) == len(passwords[i + 1]):\n            if can_sort_passwords(passwords[i]) and can_sort_passwords(passwords[i + 1]):\n                break\n        else:\n            if len(passwords[i]) < len(passwords[i + 1]):\n                break\n\n    if len(passwords[i]) == len(passwords[i + 1]):\n        sorted_passwords = passwords[i + 1]\n    else:\n        sorted_passwords = passwords[i]\n\n    # print(sorted_passwords)\n    # now k/sorted_passwords + 1 passwords can be sorted\n\n    if k % sorted_passwords[0] == 0:\n        best_case_time = k // sorted_passwords[0]\n    else:\n        best_case_time = k // sorted_passwords[0] + 1\n    best_case_time += len(passwords[-1]) - 1\n\n    if k % sorted_passwords[-1] == 0:\n        worst_case_time = k // sorted_passwords[-1]\n    else:\n        worst_case_time = k // sorted_passwords[-1] + 1\n    worst_case_time += len(passwords[-1]) - 1\n\n    return '{} {}'.format(best_case_time, worst_case_time)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if s % 2 == 0:\n        return \"Second\"\n    else:\n        return \"First\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"First\""
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = [int(i) for i in stdin.split()]\n    if sum(num) % 2 == 0:\n        return \"Second\"\n    return \"First\"\n\"\"\"\n\ndef"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    even_arr = []\n    odd_arr = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_arr.append(arr[i])\n        else:\n            odd_arr.append(arr[i])\n    if sum(even_arr) > sum(odd_arr):\n        return \"First\"\n    else:\n        return \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    array = list(map(int, stdin.split('\\n')[1].split(' ')))\n    s = sum(array)\n    first_player_wins = False\n    for i in range(n):\n        if s % 2 == 0:\n            first_player_wins = True\n            break\n        else:\n            s = sum(array[:i])\n    if first_player_wins:\n        return 'First'\n    else:\n        return 'Second'\n\n\ndef"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0443\u043b\u0438\n    numbers = list(filter(lambda x: x!= 0, numbers))\n    # \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e \u043d\u0435\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438\n    odd_numbers = list(filter(lambda x: x % 2 == 1, numbers))\n    if sum(odd_numbers) % 2!= 0:\n        print(\"First\")\n    else:\n        print(\"Second\")\n    return \"\"\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    \n    if len(nums) % 2 == 0:\n        first = 0\n        second = 0\n        for i in range(0, len(nums) - 1, 2):\n            if nums[i] > 0:\n                if nums[i + 1] % 2 == 1:\n                    first += nums[i]\n                elif nums[i + 1] % 2 == 0:\n                    second += nums[i]\n        if first > second:\n            return \"First\"\n        elif first < second:\n            return \"Second\"\n        else:\n            return \"First\" if nums[0] % 2 == 1 else \"Second\"\n    else:\n        first = 0\n        second = 0\n        for i in range(0, len(nums) - 2, 2):\n            if nums[i] > 0:\n                if nums[i + 1] % 2 == 1:\n                    first += nums[i]\n                elif nums[i + 1] % 2 == 0:\n                    second += nums[i]\n        if first > second:\n            return \"First\"\n        elif first < second:\n            return \"Second\"\n        else:\n            return \"First\" if nums[0] % 2 == 1 else \"Second\"\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = int(n**0.5)\n    a = n // b\n    if a >= b:\n        a = b - 1\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{} {}'.format(max(a, b), min(a, b))\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split('\\n')))[0]\n    min_diff = l\n    rows = l\n    cols = l\n    while rows >= cols:\n        rows = rows - (cols + cols) // 2\n        cols = cols // 2 + rows\n        if abs(cols - rows) < min_diff:\n            min_diff = abs(cols - rows)\n    return \"{} {}\".format(rows, cols)\n\"\"\"\n\n\"\"\"\nBASIC \n\"\"\"\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Read the input\n    n = int(stdin)\n    # Write your code here\n    return '{} {}'.format(1, n // 4 + (n % 4 > 0))\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    row = n // 5\n    col = n - row * 5\n    print(row, col)\n    return ''"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s)\n    if n == 1:\n        print(1, 1)\n    else:\n        k = 0\n        for i in range(2, n + 1):\n            if n % i == 0:\n                k = i\n        print(k, n // k)"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    2 rows and 4 columns\n    1 row and 5 columns\n    3 rows and 4 columns\n    9 rows and 4 columns\n    \"\"\"\n\n\n    pass\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin), 0))\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    logins = [stdin[i:i + 2] for i in range(0, len(stdin), 2)]\n    user_login = stdin[::2]\n    for login in logins:\n        for i in range(len(login)):\n            if login[i] in ('0', 'O', 'o') and user_login[i] in ('1', 'I', 'i'):\n                break\n            if login[i] in ('1', 'I', 'i') and user_login[i] in ('0', 'O', 'o'):\n                break\n            if login[i] in ('o', 'O') and user_login[i] in ('l', 'L'):\n                break\n            if login[i] in ('l', 'L') and user_login[i] in ('o', 'O'):\n                break\n            if login[i] in ('i', 'I') and user_login[i] in ('o', 'O'):\n                break\n            if login[i] in ('o', 'O') and user_login[i] in ('I', 'i'):\n                break\n            if login[i] in ('i', 'I') and user_login[i] in ('O', 'o'):\n                break\n        else:\n            continue\n        break\n    else:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the input value of the new login, so that no two logins are similar.\n    \"\"\"\n    s = stdin\n    count = int(stdin.split()[0])\n    stdin = stdin.split()[1:]\n    curr_s = ''\n    for i in stdin:\n        for j in s:\n            s_cnt = i.count(j)\n            t_cnt = curr_s.count(j)\n            if s_cnt > 1 or t_cnt > 1:\n                if s_cnt > t_cnt:\n                    break\n            if s_cnt == 0 and i.count(j) > 0:\n                break\n            if s_cnt == 0 and i.count(j) == 0:\n                curr_s = i\n        else:\n            continue\n        break\n    return 'Yes' if i == curr_s else 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    existing_logins = set(stdin.split())\n    while True:\n        new_login = stdin.replace('_', '0').replace('L', '1').replace('I', 'l').replace('O', '0').replace('1', 'o')\n        if not new_login in existing_logins:\n            break\n    return 'Yes' if new_login in existing_logins else 'No'\n    pass"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    check = stdin[0]\n    for i in range(1, int(stdin[1]) + 1):\n        if check == stdin[i]:\n            return 'No'\n        elif i > int(stdin[1]):\n            break\n        else:\n            check = list(check)\n            check_lower = list(check)\n            for j in range(len(check_lower)):\n                if check_lower[j] == check[j].lower():\n                    check_lower[j] = check[j].upper()\n                else:\n                    check_lower[j] = check[j].lower()\n            check = \"\".join(check_lower)\n    return 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    logins = [x.strip() for x in stdin.split('\\n')]\n    logins = [x for x in logins if len(x) <= 50]\n    logins = set(logins)\n    user_login = logins.pop()\n    for l in logins:\n        if len(set(l) & set(user_login)) > 0:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if stdin[length - 1]!= '\\n':\n        stdin = stdin + '\\n'\n    stdin = stdin.replace('_', '0')\n    stdin = stdin.replace('L', '1')\n    stdin = stdin.replace('I', '1')\n    stdin = stdin.replace('o', '0')\n    stdin = stdin.replace('O', '0')\n    stdin = stdin.replace('1', 'o')\n    return stdin\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print('Yes' if n > 1 else 'No')\n    return\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    y = [int(x) for x in stdin.split(\" \")]\n\n    if n == 2 and y[0] == y[1]:\n        return \"Yes\"\n    if n < 2 or y[0] == y[1]:\n        return \"No\"\n    points = []\n    for i in range(n):\n        points.append((i, y[i]))\n    points.sort(key=lambda x: x[1])\n    lines = []\n    for i in range(n):\n        if i == 0:\n            lines.append([(points[i], points[i + 1])])\n        else:\n            lines.append(find_lines(lines, points[i], points[i + 1]))\n    for line in lines:\n        if line[0][0][1] == line[1][0][1]:\n            continue\n        for point in points:\n            if (point not in line[0] and point not in line[1]) or \\\n                    (point in line[0] and point in line[1]):\n                return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_points = int(stdin)\n    point_y = [int(x) for x in stdin.split()]\n    point_y.sort()\n    if num_points <= 2:\n        return \"Yes\" if num_points == 2 else \"No\"\n    if point_y[1] - point_y[0]!= point_y[num_points - 1] - point_y[num_points - 2]:\n        return \"No\"\n    for i in range(num_points - 1):\n        if point_y[i + 1] - point_y[i]!= point_y[num_points - 1] - point_y[num_points - 2]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it's possible to draw two parallel lines passing through every point.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    n = int(stdin)\n    y = list(map(int, stdin.split()))\n\n    unique_y = set(y)\n\n    m = len(unique_y)\n    if m > 2:\n        return \"No\"\n    elif m == 1:\n        return \"Yes\"\n    elif m == 2:\n        m = y.index(max(y))\n        if m == 0:\n            if abs(y[0] - y[1]) == 0:\n                return \"No\"\n        elif m == 1:\n            if abs(y[0] - y[2]) == 0:\n                return \"No\"\n        else:\n            if abs(y[1] - y[2]) == 0:\n                return \"No\"\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(len(stdin.split())):\n        points.append([i for i in stdin.split()[i]])\n    points.sort()\n    first = points[0][1]\n    last = points[-1][1]\n    if last < first:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')[0]\n    line = line.split(' ')\n    line = [int(x) for x in line if x]\n    points = [x for x in range(len(line)) if line[x] == 0]\n    line = [x for x in line if x]\n    count = len(points)\n    line = len(line)\n    for x in range(line - 1):\n        count = count + line - x - 1\n    if count <= 2:\n        return 'No'\n    count = 0\n    for x in range(line - 2):\n        count = count + abs(line[x] - line[x + 1])\n    if count == 0:\n        return 'No'\n    count = 0\n    for x in range(line):\n        count = count + abs(points[x] - points[x + 1])\n    if count == 0:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[n+1:m]\n    a = stdin[:n]\n    b = stdin[m+1:]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i] == a[i] == s[j] == a[j]:\n                count += 1\n    return count\n\n-----Memory------\n\nUsed:  40.6 MB, less than 16.37% of Python3 submissions\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = stdin.readline()\nb = stdin.readline()\ns = stdin.readline()"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # \u043f\u0440\u0438\u0432\u0435\u0442 \u0432\u0441\u0435\u043c \u0434\u0430\u0440\u043e\u0432\u0430\n    # \u0437\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c\n    # \u043f\u0440\u0438\u0432\u0435\u0442 \u0434\u043e\u0440\u043e\u0433\u043e\u0439 \u0434\u0440\u0443\u0433\n    # \u0438 \u0432\u0430\u043c \u0434\u0430\u0440\u043e\u0432\u0430\n\n    stdin = [i for i in stdin]\n    s = 0\n    n = len(stdin)\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    if stdin[0].isalpha():\n        while stdin[s]!='':\n            s += 1\n    stdin = stdin[s + 1:n - 1]\n\n    n = len(stdin)\n    m = len(stdin)\n\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\u0438\n    ls = []\n    s = stdin[0]\n    for i in range(n):\n        if s == stdin[i]:\n            ls.append(s)\n        else:\n            ls.append(s)\n            s = stdin[i]\n    ls.append(s)\n\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\u0438\n    s = stdin[0]\n    for i in range(m):\n        if s == stdin[i]:\n            ls.append(s)\n        else:\n            ls.append(s)\n            s = stdin[i]\n    ls.append(s)\n\n    # \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\n    for i in range(len(ls)):\n        if ls[i] =='':\n            continue\n        else:\n            if i < len(ls) - 1:\n                if ls[i] == ls[i + 1]:\n                    ls.pop(i)\n                    ls.pop(i)\n    ls = [i for i in ls if i!='']\n\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0431\u0449\u0438\u0445 \u043f\u0430\u0440\n    ls1 = []\n    ls2 = []\n    for i in range(len(ls)):\n        for j in range(i + 1, len(ls)):\n            if ls[i] == ls[j]:\n                ls1.append(ls[i])\n                ls2.append(ls[j])\n    # ls1 = [i for i in ls if i not in ls2]\n    # ls2 = [i for i in ls if i not in ls1]\n    ls1 = list(set(ls1))\n    ls2 = list(set(ls2))\n\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u0449\u0438\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0431\u0449\u0438\u0445 \u043f\u0430\u0440\n    ls3 = []\n    for i in range(len(ls1)):\n        for j in range(len(ls2)):\n            if ls1[i] == ls2[j]:\n                ls3.append(ls1[i])\n    ls3 = list(set(ls3))\n    # print(ls3)\n\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u043f\u0430\u0440\n    dic = {}\n    for i in range(len(ls3)):\n        dic[ls3[i]] = ls1.count(ls3[i]) + ls2.count(ls3[i])\n\n    # print(dic)\n    ls4 = []\n    for i in range(len(dic)):\n        if dic[ls3[i]] == 2:\n            ls4.append(ls3[i])\n    ls4 = list(set(ls4))\n    # print(ls4)\n\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u044b\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u043f\u0430\u0440\n    ls5 = []\n    for i in range(len(ls4)):\n        for j in range(len(ls3)):\n            if ls4[i] == ls3[j]:\n                ls5.append(ls3[j])\n    # print(ls5)\n\n    # \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0431\u0449\u0438\u0445 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u043f\u0430\u0440\n    s = 0\n    l = []\n    for i in range(len(ls5)):\n        if ls5[i] == ls5[i"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    s = stdin[2]\n    result = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)+1):\n            if j < len(b):\n                if b[j-1] in a[i:j]:\n                    result += 1\n            else:\n                if b[j-1] in a[i:]:\n                    result += 1\n    print(result)\n    return result\n\nassert solution(\"aabbaa\", \"baaaab\", \"aaaaa\") == 4\nassert solution(\"azaza\", \"zazaz\", \"azaz\") == 11\nassert solution(\"abcabcabc\", \"xyzxyzxyz\", \"abcabcayzxyz\") == 2\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = int(stdin[0]), int(stdin[1])\n    a, b = stdin[2], stdin[3]\n\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if set(a[i:j]) & set(b):\n                cnt += 1\n    return cnt\nsolution(input())"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a, b, s = stdin.split()\n    n, m = len(a), len(b)\n    res = 0\n    for i in range(n - m + 1):\n        for j in range(m):\n            if a[i + j]!= b[j]:\n                break\n        else:\n            res += 1\n    print(res)\n    return \"\"\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = stdin[:n]\n    b = stdin[n:2 * n]\n    s = stdin[2 * n:]\n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if j + m <= n:\n                if i + m <= n:\n                    if a[i:i + m] == b[j:j + m]:\n                        count += 1\n    return count"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a, b = [list(stdin[i]) for i in range(n)]\n    s = stdin[n:]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if j + i < m and a[i][j] == b[i][j] and a[i][j] == s[j + i]:\n                ans += 1\n    return ans"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b, s = stdin.split()\n    count = 0\n    for i in range(0, n - m + 1):\n        for j in range(i, n - m + i + 1):\n            if s[i:i + m] == s[j:j + m]:\n                count += 1\n    return str(count)\nprint(solution(stdin))\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    stdin = stdin.split()\n    a, b, s = stdin[0], stdin[1], stdin[2]\n    s_length = len(s)\n\n    ans = 0\n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            if not (i <= j and j <= i + m - 1) and len(set(a[i:i+m]) & set(b[j:j+m])) > 0:\n                ans += 1\n    print(ans)"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    0\n    >>> solution(\"111111\")\n    0\n    >>> solution(\"121111\")\n    0\n    >>> solution(\"222222\")\n    1\n    >>> solution(\"112111\")\n    2\n    \"\"\"\n    return max([len(set(stdin[i : i + 6])) for i in range(len(stdin) - 5)])\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A new year special offer at the bar 'Mosquito Shelter'.\n\n    :param stdin: str\n    :return: str\n    \"\"\"\n    pass\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # I'm pretty sure you can make a better solution but this is still O(n)\n    k = 0\n    for _ in range(int(stdin)):\n        promocode = input()\n        if set(promocode)!= set(\"0\"):\n            k += 1\n    return str(k)\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the maximum k, such that promocodes can be uniquely identified.\"\"\"\n    return 0\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    CODE TO READ IN DATA\n    '''\n    # Read in input\n    n = int(stdin)\n\n    promocodes = []\n\n    for i in range(n):\n        promocodes.append(stdin)\n\n    # Define output\n    output = 0\n\n    '''\n    CODE TO PROCESS INPUT\n    '''\n\n    # Find the length of the longest promocode\n    # max_promo_len = len(max(promocodes, key=len))\n\n    # Calculate the number of k's possible\n\n    # Create a list of lists, where each list is a list of k's possible for each promocode\n    # k_list = [[0] * max_promo_len] * n\n\n    # Loop over each promocode, and for each promocode calculate the number of possible k's\n    # for i in range(max_promo_len):\n    #     for promocode in promocodes:\n    #         k_list[promocodes.index(promocode)].append(i)\n\n    # k_list = [list(range(max_promo_len)) for i in range(n)]\n\n    # Find the unique k's\n    # unique_k = set(list(chain(*k_list)))\n\n    # Find the maximum k\n    # output = max(unique_k)\n\n    # Output answer\n    return output\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n\"\"\"\n\nfrom itertools import permutations\n\nn = int(input())\n\nfor _ in range(n):\n    promocodes = list(map(str, input()))\n    promocode_len = len(set(promocodes))\n    if promocode_len == 1:\n        print(0)\n    else:\n        max_k = len(promocodes) + 1\n        for k in range(promocode_len, max_k):\n            promocode_permutations = set(map(''.join, permutations(promocodes, k)))\n            if len(promocode_permutations) == promocode_len:\n                print(k)\n                break\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, m: int, array: list):\n        happy = 0\n        for i in range(m):\n            happy += array[i][1] * (array[i][1] + 1) // 2 * array[i][2]\n        return happy\n\n    stdin = stdin.split('\\n')\n    n, m = list(map(int, stdin[0].split()))\n    array = [list(map(int, line.split())) for line in stdin[1: m + 1]]\n    print(solve(n, m, array))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [int(x) for x in stdin.split()]\n    ind = [int(x) for x in stdin.split()]\n    max_n = 0\n    for i in range(len(s)):\n        arr = []\n        for j in range(len(ind)):\n            if i >= ind[j] - 1:\n                arr.append(j)\n        count = 1\n        if len(arr) > 0:\n            for k in range(1, len(arr) + 1):\n                count *= (arr[len(arr) - k]) + 1\n        max_n += count * s[i]\n    return max_n\n\n\nprint(solution('4 3\\n1 2\\n2 4\\n1 1\\n1 3'))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \nprint(solution(input()))\n\n\"\"\"\n\n\nimport os\nfrom sys import stdin\nfrom typing import List, Dict, Union\n\nDEBUG = False\n\n\ndef"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    if int(number) < 0:\n        number = str(abs(int(number)))\n        inverse = \"\"\n        for i in number:\n            if i!= \"0\":\n                inverse += \"9\" + i\n        return inverse\n    return number"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin[::-1]"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    output = ''\n    inverte = []\n    for i in range(len(input)):\n        if input[i] == '9':\n            inverte.append('9')\n        else:\n            inverte.append(input[i])\n    for i in range(len(inverte)):\n        if inverte[i]!= '9':\n            inverte[i] = '9'\n            break\n    for i in inverte:\n        output += i\n    return output\n\nprint(solution(input()))"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    while n[0] == '0':\n        n = n[1:]\n    n = int(n[::-1])\n    if n > 0:\n        return n\n    else:\n        return int(''.join(['9', '0'*len(str(n))]))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 0\n    while x > 0:\n        if x % 10 == 0:\n            x /= 10\n            i += 1\n        else:\n            break\n    return str(int(stdin) - 10**i + 1)"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    l = len(x)\n    s = 0\n    for i in range(l):\n        if x[i]!= '0':\n            s = s * 10 + int(x[i])\n    return str(s)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n\n    if x < 10:\n        return x\n    elif x < 100:\n        return x - 9\n    else:\n        return x - 99\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    n = int(string)\n    res = ''\n    while n > 0:\n        res += str(n % 10)\n        n //= 10\n    \n    return res[::-1]"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = x\n    while result > 9:\n        if result % 10 == 0:\n            result //= 10\n        else:\n            result *= 9\n            result += (result // 10) % 10\n            result //= 10\n    return str(result)\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 10 2\")\n    '1 2 4 8'\n    \"\"\"\n    l, r, k = map(int, stdin.split())\n    res = []\n    while l < r:\n        if r - l >= 10 ** 6:\n            while r > l:\n                r -= k\n            break\n        else:\n            while l < r:\n                l += k\n            break\n    if l == r:\n        res.append(l)\n    else:\n        res.append('-1')\n    return''.join(map(str, res))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split(' '))\n\n    def less_or_equal(n: int, m: int) -> bool:\n        if l <= n * m <= r:\n            return True\n        else:\n            return False\n\n    def splay_tree_expose(n: int, m: int, k: int) -> str:\n        if not less_or_equal(n, m):\n            return '-1'\n        splay_tree = LinkCutTree(n)\n        exposed = splay_tree.expose(m)\n        while k!= 1 and exposed is not None:\n            splay_tree = exposed\n            exposed = splay_tree.expose(m)\n            k -= 1\n        return exposed\n\n    return splay_tree_expose(r, r, 1)\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split()]\n    s = set()\n    for i in range(l, r + 1):\n        s.add(pow(k, i))\n    if len(s) == 0:\n        print(\"-1\")\n    else:\n        print(*sorted(s))\n    return \"\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split()]\n    if k < 0 or k > 10 ** 9 or l > r:\n        return -1\n    for i in range(l, r + 1):\n        if k ** i > r:\n            break\n        print(k ** i, end=' ')\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    [l, r, k] = map(int, stdin.split())\n    res = []\n    if r < k:\n        return res\n    for i in range(l, r + 1):\n        for j in range(l, r + 1):\n            if i ** j < r and i ** j >= l:\n                res.append(i ** j)\n    if len(res) == 0:\n        res.append(-1)\n    return str(' '.join(map(str, res)))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = list(map(int, stdin.split()))\n    res = []\n    while l <= r:\n        if l == r:\n            res.append(l)\n            return''.join(map(str, res))\n        if l > k:\n            l //= k\n            r //= k\n            continue\n        else:\n            l *= k\n            r *= k\n            res.append(k)\n\n\n\ndef"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    result = [k**i for i in range(a, b + 1)]\n    if result == []:\n        return \"-1\"\n    else:\n        return''.join(map(str, result))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # you can read input from stdin\n    # or maybe you can use sys.stdin if you like\n    l, r, k = [int(x) for x in stdin.split()]\n    if k == 1:\n        return \"\"\n    if k > r or k < l:\n        return \"-1\"\n    s = 0\n    e = r\n    ans = []\n    while s <= e:\n        mid = (s + e) // 2\n        if mid * k > r:\n            e = mid - 1\n        else:\n            ans.append(mid)\n            s = mid + 1\n    if len(ans) == 0:\n        return \"-1\"\n    else:\n        return \" \".join([str(a ** k) for a in ans])\n\n\n\ndef"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    teleports = [tuple([int(x) for x in line.split(' ')]) for line in stdin.split('\\n')[:n]]\n    teleports.sort(key = lambda t: t[0])\n    \n    starts = set()\n    ends = set()\n    for t in teleports:\n        starts.add(t[0])\n        ends.add(t[1])\n        \n    start = min(starts)\n    end = max(ends)\n    \n    if start > end:\n        return 'NO'\n    \n    return 'YES'\n\n\n\ndef"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 7\\n0 4\\n2 5\\n6 7\")\n    'YES'\n    >>> solution(\"3 7\\n0 4\\n2 5\\n6 7\")\n    'NO'\n    >>> solution(\"3 7\\n0 4\\n2 5\\n6 7\\n1 0\\n1 3\\n0 3\")\n    'NO'\n    >>> solution(\"4 7\\n0 4\\n2 5\\n6 7\\n1 0\\n1 3\\n0 3\")\n    'YES'\n    >>> solution(\"4 7\\n0 4\\n2 5\\n6 7\\n1 0\\n1 3\\n0 3\\n0 4\\n0 6\\n0 6\\n0 6\")\n    'YES'\n    \"\"\"\n   ..."
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is only for exercise format description.\n\n    Args:\n        stdin(str): Input string\n\n    Returns:\n        str: Solution result\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(answers)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = map(int, stdin.split())\n    teleports = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        teleports.append((a, b))\n    teleports.sort(key=lambda x: x[1])\n    # print(teleports)\n    d = dict()\n    for t in teleports:\n        for i in range(t[0], t[1]):\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n    # print(d)\n    res = []\n    for i in range(1, m + 1):\n        if i not in d:\n            res.append(i)\n    # print(res)\n    return 'NO' if res else 'YES'\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num, friend = map(int, stdin.split())\n    teleports = []\n    for _ in range(num):\n        teleports.append(tuple(map(int, stdin.split())))\n    teleports.sort()\n\n    distance = [friend]\n    for index, (a, b) in enumerate(teleports):\n        for i in range(a, b + 1):\n            distance.append(min(distance[-1], i))\n    return \"YES\" if distance[-1] <= friend else \"NO\""
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n'''"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    teleports = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        teleports.append([a, b])\n    teleports.sort()\n    visited = set()\n    queue = deque()\n    queue.append([0, 0])\n    visited.add((0, 0))\n    while queue:\n        x, y = queue.popleft()\n        if x == m:\n            return \"YES\"\n        for t in teleports:\n            if t[0] >= x and t[0] <= y:\n                if t[1] not in visited:\n                    queue.append([t[1], x])\n                    visited.add((t[1], x))\n    return \"NO\"\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m, k = map(int, stdin.split())\n    \n    MOD = 998244353\n    \n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, m+1):\n        tmp = [0] * (n+1)\n        for j in range(n+1):\n            for l in range(1, k+1):\n                if j - l >= 0:\n                    tmp[j] += dp[j-l]\n                    tmp[j] %= MOD\n        dp = tmp\n    print(dp[n])\n        \n    return None\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution prints the number of ways to paint N blocks in M colors, in a way that there are K pairs of adjacent blocks painted in the same color.\n    \"\"\"\n\n    # This variable will store the output\n    output: int = 0\n\n    # Split the input\n    input_array = stdin.split('\\n')\n    # Split the input array into variables\n    N, M, K = int(input_array[0].split()[0]), int(input_array[0].split()[1]), int(input_array[0].split()[2])\n\n    # The number of ways is equal to the number of blocks\n    output = N\n\n    # Run for all blocks\n    for i in range(1, N + 1):\n        # Compute the number of ways in which the blocks are painted, one color for each block\n        output *= (M - 1 + K + i) // i\n        output *= (M - i + 1) // (i - 1)\n        output %= 998244353\n\n    # Return the result\n    return output\n\n\"\"\"\nSolution Explanation\n\nThe logic for painting the blocks is as follows:\n\nWe have N blocks, with values from 0 to M-1.\n\nWe have to paint the blocks in a way, where there are at most K adjacent blocks painted in the same color.\n\nWe can use a single color for each block, and any combination of colors for the adjacent blocks.\n\nWe can find the number of ways in which the blocks are painted, using a similar logic as in the knapsack problem.\n\nWe compute the number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks.\n\nWe compute the number of ways in which the blocks are painted, one color for each block. We can paint blocks in a way that there are at most K pairs of adjacent blocks painted in the same color.\n\nWe need to find the number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks.\n\nTo find the number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, we can use the equation:\n\nnCr = (n + r - 1)! / r!(n - 1)!\n\nSince nCr has an additional factor of (n + r - 1)!/r!(n - 1)!, we can use the modulo operator to find the answer.\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by the formula:\n\nnCr = (n + r - 1)! / r!(n - 1)!\n\nn = N, r = M, and since nCr = n! / (n - r)!, we can find nCr by taking the factorial of N and dividing by the factorial of N - M.\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = M! / (M - 1)! * (M - 2)! / (M - 2) * (M - 3)! / (M - 3) *... * 1!\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nSince nCr has an additional factor of n! / (n - r)!, we can use the modulo operator to find the answer.\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = (M + n - 1)! / (M - 1)! * (M - 2)! / (M - 2) * (M - 3)! / (M - 3) *... * 1!\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nSince nCr has an additional factor of n! / (n - r)!, we can use the modulo operator to find the answer.\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = (M + n - 1)! / (M - 1)! * (M - 2)! / (M - 2) * (M - 3)! / (M - 3) *... * 1!\n\nSince nCr has an additional factor of n! / (n - r)!, we can use the modulo operator to find the answer.\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nSince nCr has an additional factor of n! / (n - r)!, we can use the modulo operator to find the answer.\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = (M + n - 1)! / (M - 1)! * (M - 2)! / (M - 2) * (M - 3)! / (M - 3) *... * 1!\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nSince nCr has an additional factor of n! / (n - r)!, we can use the modulo operator to find the answer.\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = (M + n - 1)! / (M - 1)! * (M - 2)! / (M - 2) * (M - 3)! / (M - 3) *... * 1!\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nSince nCr has an additional factor of n! / (n - r)!, we can use the modulo operator to find the answer.\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = (M + n - 1)! / (M - 1)! * (M - 2)! / (M - 2) * (M - 3)! / (M - 3) *... * 1!\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nThe number of ways in which the blocks are painted, one color for each block, and any combination of colors for the adjacent blocks, is given by:\n\nnCr = n! / (n - r)!\n\nSince nCr has an additional factor of n! / (n - r)!, we can use the modulo operator to find the answer.\n\nThe number of ways in which the"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    mem = [[0] * (m + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        mem[i][1] = 1\n        for j in range(1, m + 1):\n            mem[i][j] = (mem[i - 1][j] + mem[i][j - 1]) % 998244353\n    return mem[-1][-1]\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    res = 0\n    m = m % 998244353\n    for i in range(m):\n        res = (res * n) % 998244353\n    for i in range(n):\n        res = (res + pow(m, i, 998244353) * (pow(k, i, 998244353) - pow(k - 1, i, 998244353))) % 998244353\n    return res"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    b = [0] * m\n\n    def solve(i: int, c: int) -> None:\n        nonlocal n, m, k, b\n        if i == n:\n            print(c)\n            return\n        for j in range(m):\n            if c & (1 << j) == 0:\n                b[j] = i\n                solve(i + 1, c | (1 << j))\n\n    solve(1, 0)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = [int(x) for x in stdin.split(' ')]\n    s = n * m\n    if k > s:\n        return 1\n    elif k == s:\n        return (m * n * (n + 1) // 2) % 998244353\n    else:\n        return ((m * n * (n + 1) // 2) - (s - k) * ((s - k) + 1) // 2) % 998244353\n\"\"\"\n\ndef"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(factorial(n+m) // (factorial(k) * factorial(n+m-k)))\n\n\ndef"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n\n    # Making a list of bits in binary\n    # To maintain the number of ways to paint\n    # the blocks under the conditions, we use modulo\n    # 998244353 to prevent overflow.\n    ways = pow(2, N, 998244353)\n\n    for i in range(M):\n        # Digit representing the color of the\n        # ith block in binary representation\n        color = bin(i)[2:]\n\n        # Number of ways to paint the blocks\n        # if the first block is colored in ith color\n        ways = (ways - int(color, base=2) * pow(2, N-1, 998244353)) % 998244353\n\n        # Number of ways to paint the blocks if\n        # the first block is colored in ith color,\n        # and the second block is colored in (i + K)\n        # color\n        if K!= 0:\n            ways = (ways + int(color, base=2) * pow(2, N-2, 998244353)) % 998244353\n\n    return str(ways)\n\n------\nWe can use the fact that we have 2^N blocks.\nWe know that if we paint block 1 with color x and block 2 with color y,\nthen block 3 with color x + y and block 4 with color xy\n\nSo, number of ways to paint N blocks with color x is \nnumber of ways to paint N - 1 blocks with color x + number of ways to paint N - 2 blocks with color xy\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  # your solution goes here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  "
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    dp = [[[0] * (n + 1) for _ in range(m)] for _ in range(k + 1)]\n    dp[0][0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            for k in range(min(n, m)):\n                for l in range(k):\n                    dp[0][k][i + 1] += dp[0][k][i]\n                for l in range(k):\n                    dp[1][k][i + 1] += dp[0][k][i]\n                for l in range(k):\n                    dp[2][k][i + 1] += dp[0][k][i]\n                for l in range(k):\n                    dp[1][l][i + 1] += dp[2][l][i]\n                for l in range(k):\n                    dp[2][l][i + 1] += dp[1][l][i]\n    return str(sum(dp[k][k]) % 998244353)\n\"\"\"\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n1 0')\n    '1 1'\n    >>> solution('3\\n1 0 1')\n    '1 1 1'\n    >>> solution('3\\n1 1 1')\n    '1 1 1'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    p, *a = map(int, stdin.split())\n    def f(x):\n        return sum(a[i]*(1 if x & (1 << i) else -1) for i in range(p)) % p\n    b = [f(i) for i in range(p)]\n    print(' '.join(map(str, b)))\n    return ''"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = stdin.readline().strip()\n    p = int(line_1)\n    line_2 = stdin.readline().strip()\n    a_line = line_2.split()\n    a = list(map(lambda x: int(x), a_line))\n    # for i in a:\n    #     if i < 0 or i > p:\n    #         raise ValueError(\"Error\")\n    for i in range(p - 1):\n        if not (a[i] == 0 or a[i] == 1):\n            raise ValueError(\"Error\")\n\n    ans = solve_p(p, a)\n    return''.join(list(map(str, ans)))\n\ndef"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a[-1] %= p\n    b = [-1] * p\n    for i in range(p - 2, -1, -1):\n        b[i] = (p - 2 - i) * a[i] + b[i + 1]\n        b[i] %= p\n    for i in range(p):\n        print(b[i], end=' ')\n    print()\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    k = 1\n    while pow(k, n, n)!= 1:\n        k += 1\n    b = [int(x) for x in bin(k)[2:]]\n    return \" \".join(str(x) for x in b)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, *a = map(int, stdin.split())\n    return''.join(map(str, [a[i] if a[i] % p == 0 else p - a[i] % p for i in range(p)]))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    prime = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n    result = [0] * prime\n    for i in range(prime):\n        if sequence[i] == 1:\n            result[i] = prime - 1\n        else:\n            result[i] = i\n    return''.join(map(str, result))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, *a = map(int, stdin.split('\\n')[1:])\n    p, a = 2 * p, [1] + a + [1]\n    \n    b = [1]\n    for _ in range(p - 2):\n        b = [sum(b) % p] + b\n    \n    return''.join(map(str, b))"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n1 0')\n    '1 1'\n    \"\"\"\n    p = int(stdin.readline())\n    a = tuple(map(int, stdin.readline().split()))\n    d = 0\n    t = 1\n    for i in range(p - 1):\n        d += a[i] * t\n        d %= p\n        t *= 2\n    return''.join(map(str, ((d * p + 1) // 2, d * t + 1) * (p - 1)))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, *a = map(int, stdin.split())\n    b = [0] * (p - 1)\n    for ai in a:\n        b[ai] = ai + 1\n    return \" \".join(map(str, b))"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split(' '))\n    cake = [stdin.split('\\n')]\n    \n    return 0\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return result"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # reader = csv.reader(stdin, delimiter=\" \")\n    # rows = list(reader)\n    # row = [0]*len(rows)\n    # for i in range(len(rows)):\n    #     for j in range(len(rows[i])):\n    #         if rows[i][j]=='S':\n    #             row[i]=1\n    #         else:\n    #             row[i]=0\n    # print(row)\n    # row_max = max(row)\n    # row_min = min(row)\n    # print(row_max, row_min)\n    # return row_max-row_min\n    return\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return str(result)"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \n    \n    \n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split(' '))\n    cake = []\n    for i in range(r):\n        cake.append(list(stdin.split('\\n')[i]))\n    pass"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return \"\""
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the max number of cake cells you can eat.\n    :param stdin: Input.\n    :return: String.\n    '''\n    # Get input\n    r, c = stdin.split('\\n')[0].split(' ')\n    r, c = int(r), int(c)\n\n    # Parse input\n    cake = [[x for x in y] for y in stdin.split('\\n')[1:]]\n    # print(cake)\n    cakeminator = ''.join(''.join(x) for x in cake)\n\n    # Solve problem\n    '''\n    K: Number of cake cells\n    '''\n    ans = 0\n    for i in range(len(cake)):\n        for j in range(len(cake[i])):\n            if cake[i][j] == 'S':\n                ans += 1\n                cake[i][j] = '.'\n            elif cake[i][j] == '.':\n                ans += 1\n                cake[i][j] = 'S'\n\n    return ans\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(row) for row in stdin.split(' ')]\n    grid = [[cell for cell in row] for row in stdin.split('\\n')]\n\n    queue = deque()\n\n    for row in grid:\n        for cell in row:\n            if cell == 'S':\n                queue.append((row.index('S'), grid.index(row)))\n\n    def bfs(row, column, queue):\n        count = 0\n\n        while queue:\n            row, column = queue.popleft()\n            count += 1\n\n            if row > 0 and grid[row - 1][column] == '.':\n                grid[row - 1][column] = 'S'\n                queue.append((row - 1, column))\n\n            if row < rows - 1 and grid[row + 1][column] == '.':\n                grid[row + 1][column] = 'S'\n                queue.append((row + 1, column))\n\n            if column > 0 and grid[row][column - 1] == '.':\n                grid[row][column - 1] = 'S'\n                queue.append((row, column - 1))\n\n            if column < columns - 1 and grid[row][column + 1] == '.':\n                grid[row][column + 1] = 'S'\n                queue.append((row, column + 1))\n\n        return count\n\n    return bfs(queue[0][0], queue[0][1], queue)\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cards = [int(i) for i in stdin.split()[1:]]\n    cards.sort()\n    left = cards[0]\n    right = cards[-1] - 1\n    possible_nums = []\n    while left <= right:\n        mid = (left + right) // 2\n        if mid + 1 in cards:\n            right = mid - 1\n        else:\n            left = mid + 1\n            possible_nums.append(mid)\n    if len(possible_nums) == 0:\n        return \"-1\"\n    else:\n        return str(len(possible_nums)) + \" \" + \" \".join(\n            [str(i) for i in possible_nums])\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split()))\n    cards.sort()\n    answer = []\n    for i in range(n):\n        if i == 0:\n            answer.append(cards[i])\n            continue\n        if cards[i] - answer[-1] == 1:\n            answer.append(cards[i])\n        else:\n            break\n    if len(answer) == n:\n        print(-1)\n        return\n    print(len(answer))\n    print(*answer, sep=' ')\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Alex has n cards containing positive integers. He wants to give Arthur exactly one more card with a number so that he could use the resulting n + 1 cards to make an arithmetic progression (Alex has to use all of his cards).\n\nArthur has already bought a card but he hasn't written a number on it. Help him, print all integers that you can write on a card so that the described condition fulfilled.\n\nInput\nn - the number of cards.\n\na_1, a_2,..., a_n - positive numbers, each of them doesn't exceed 10^8.\n\nOutput\nIf Alex can write infinitely many distinct numbers on the card, print -1.\n\nOtherwise, print the number of integers that suit you. In the second line print them in increasing order.\n\nExamples\nInput\n3\n4 1 7\n\nOutput\n2\n-2 10\n\nInput\n1\n10\n\nOutput\n-1\n\nInput\n4\n4 3 4 5\n\nOutput\n0\n\nInput\n2\n2 4\n\nOutput\n3\n0 3 6\n\nInput\n4\n4 3 4 5\n\nOutput\n0\n\nInput\n2\n2 4\n\nOutput\n3\n0 3 6\n    '''\n\n    pass"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr, x, low, high):\n        if high < low:\n            return high + 1\n\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid + 1\n        elif arr[mid] > x:\n            return binary_search(arr, x, low, mid - 1)\n        else:\n            return binary_search(arr, x, mid + 1, high)\n\n    n = int(stdin)\n    arr = sorted(map(int, stdin.split()))\n    a, b = arr[0], arr[-1]\n    print(binary_search(arr, a + 1, 0, n - 1))\n    print(*[x for x in range(a + 1, b)])\n\n    return ''\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = [int(card) for card in stdin.readline().strip().split()]\n    cards.sort()\n    last = cards[0]\n    arithmetic_sequence_count = 0\n    for card in cards[1:]:\n        if card == last + 1:\n            arithmetic_sequence_count += 1\n        else:\n            arithmetic_sequence_count = 1\n            last = card\n    if arithmetic_sequence_count == len(cards) - 1:\n        print(-1)\n    else:\n        print(arithmetic_sequence_count)\n        print(*cards[:arithmetic_sequence_count + 1])\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = [int(x) for x in stdin.readline().strip().split()]\n\n    for a in range(1, 10 ** 8):\n        if a not in sequence:\n            if all(sequence[i] + 1 == sequence[i + 1] for i in range(n - 1)):\n                return str(a)\n    return '-1'"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = list(map(int, stdin.split(' ')))\n    cards.sort()\n    diff = cards[-1] - cards[0]\n    if diff % (n - 1)!= 0:\n        return '-1'\n    if diff == 0:\n        return '1'\n    cur = cards[0]\n    ans = []\n    for _ in range(n - 1):\n        cur += diff\n        ans.append(cur)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split(' ')))\n    # the first one is always positive\n    positive = [array[0]]\n    negative = [array[0]]\n    for i in range(1, n):\n        if array[i] - array[i-1] > 1:\n            #print(array[i-1], array[i], array[i] - array[i-1])\n            if array[i] - array[i-1] in negative:\n                negative.remove(array[i] - array[i-1])\n            else:\n                positive.remove(array[i-1])\n                positive.append(array[i])\n        elif array[i] - array[i-1] < -1:\n            #print(array[i-1], array[i], array[i] - array[i-1])\n            if array[i] - array[i-1] in positive:\n                positive.remove(array[i] - array[i-1])\n            else:\n                negative.remove(array[i-1])\n                negative.append(array[i])\n    if positive:\n        print(len(positive))\n        print(*positive)\n    else:\n        print(-1)\n    if negative:\n        print(len(negative))\n        print(*negative)\n    else:\n        print(-1)\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_arithmetic_progression(seq: List[int]) -> bool:\n        if len(seq) < 3:\n            return True\n        if seq[1] - seq[0]!= seq[2] - seq[1]:\n            return False\n        for i in range(3, len(seq)):\n            if seq[i - 1] + 1!= seq[i]:\n                return False\n        return True\n\n    n = int(stdin)\n    seq = sorted(map(int, stdin.split(' ')))\n    if is_arithmetic_progression(seq):\n        return '-1'\n    if n == len(seq):\n        return '0'\n    return f'{n - len(seq)}\\n{seq[-1] - seq[0]}'\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3\n   ... 1 2\n   ... 2 3\n   ... 4 5\n   ... ''')\n    'YES'\n    >>> solution('''4\n   ... 1 2\n   ... 2 3\n   ... 2 3\n   ... 1 2\n   ... ''')\n    'NO'\n    '''\n    :param stdin: str representing n\n    :return: str, yes or no\n    '''\n    # Idea is to go through all the shows, for each show check if there is a better show with the same starting time\n    # If there is just check for the end time to be greater than the current end time\n    n = int(stdin)\n    shows = [None] * n\n    for i in range(n):\n        l, r = map(int, stdin.split('\\n')[i].split())\n        shows[i] = (l, r)\n    sorted_shows = sorted(shows, key=lambda tup: tup[0])\n\n    best_time = sorted_shows[0][0]\n    best_tv = 1\n    for i in range(1, n):\n        if sorted_shows[i][0] == best_time:\n            if sorted_shows[i][1] > best_time:\n                best_time = sorted_shows[i][1]\n                best_tv = 1\n            else:\n                best_tv = 2\n\n    if best_tv == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    shows = []\n    for _ in range(n):\n        shows.append(list(map(int, stdin.split())))\n    shows = sorted(shows, key=lambda x: (x[0], x[1]))\n    start, end = shows[0]\n    for i in range(1, n):\n        if shows[i][0] < end:\n            return \"NO\"\n        else:\n            start, end = shows[i]\n    return \"YES\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'YES' if n == 1 else 'NO'"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function.\n\n    Parameters:\n        stdin (str): Input.\n\n    Returns:\n        str: Output.\n    \"\"\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    intervals = []\n    for i in range(0, n):\n        intervals.append(list(map(int, stdin.split('\\n')[i].split())))\n    intervals = sorted(intervals, key=lambda interval: interval[0])\n\n    start_time = intervals[0][0]\n    end_time = intervals[0][1]\n    for i in range(1, n):\n        if start_time >= intervals[i][0] and end_time <= intervals[i][1]:\n            start_time = intervals[i][0]\n            end_time = intervals[i][1]\n        elif end_time > intervals[i][0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    shows = int(stdin)\n    pairs = []\n    for i in range(1, shows + 1):\n        pair = list(map(int, stdin.split()))\n        pairs.append(pair)\n    pairs.sort(key=lambda x: x[0])\n\n    count1 = 0\n    count2 = 0\n    for i in range(shows):\n        if pairs[i][0] > count2:\n            count2 = pairs[i][1]\n        elif pairs[i][0] > count1:\n            count1 = pairs[i][1]\n            count2 = pairs[i][1]\n        else:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    shows = [None for _ in range(n)]\n    shows[0] = [0, int(stdin.readline())]\n    shows[1] = [int(stdin.readline()), int(stdin.readline())]\n    for i in range(2, n):\n        shows[i] = [int(stdin.readline()), int(stdin.readline())]\n    tvs = [None for _ in range(2)]\n    tvs[0] = 0\n    tvs[1] = 0\n    for show in shows:\n        if tvs[0] < show[0] < tvs[1]:\n            tvs[0] = show[1]\n        elif tvs[0] < show[1] < tvs[1]:\n            tvs[1] = show[0]\n        elif show[0] > tvs[0] and show[1] < tvs[1]:\n            tvs[0] = show[0]\n        elif show[0] < tvs[0] and show[1] > tvs[1]:\n            tvs[1] = show[1]\n    if tvs[0] <= tvs[1]:\n        return 'YES'\n    return 'NO'\n\n\nprint(solution('3\\n1 2\\n2 3\\n4 5\\n'))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_shows = int(stdin)\n    show_list = [int(stdin) for stdin in stdin.split(\"\\n\")[1:]]\n    num_tvs = 2\n    min_tot = show_list[0] * num_tvs\n    max_tot = show_list[0] * num_tvs\n    for show in show_list[1:]:\n        if max_tot - min_tot >= show * num_tvs:\n            num_tvs += 1\n            max_tot = min_tot + show * num_tvs\n        else:\n            num_tvs = 2\n            min_tot = show * num_tvs\n            max_tot = show * num_tvs\n    return \"YES\" if num_tvs <= 2 else \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Creates a solution\"\"\"\n\n    return \"YES\" if solution_one(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_shows = int(stdin.readline())\n    shows = []\n    for _ in range(num_shows):\n        shows.append([int(x) for x in stdin.readline().split(' ')])\n    \n    return \"YES\" if check_tv(shows) else \"NO\"\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for a in range(l, r):\n        for b in range(l, r):\n            if a < b:\n                for c in range(l, r):\n                    if a < c and b < c and (a * b) % c!= 0 and (b * c) % a!= 0 and (a * c) % b!= 0:\n                        return \"{} {} {}\".format(a, b, c)\n    return '-1'\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    m, n = a // gcd(a, b), b // gcd(a, b)\n    m, n, o = (n + m) // gcd(n + m, c), m, n\n    return''.join(map(str, sorted((m, n, o))))\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A trivial solution to the problem, which is\n    not very efficient, but is okay enough for the\n    Kata.\n    '''\n    numbers = stdin.split()\n    l = int(numbers[0])\n    r = int(numbers[1])\n    for i in range(l, r):\n        for j in range(l, r):\n            if (i % j == 0) and (i % (j + 1) == 0) and (i!= j + 1):\n                if j + 1 == l:\n                    return str(i) + \" \" + str(j) + \" \" + str(j + 1)\n                return str(i) + \" \" + str(j) + \" \" + str(j + 1)\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    l, r = map(int, stdin.split())\n    if l <= r:\n        l, r = r, l\n    for a in range(l, r):\n        for b in range(l, r):\n            for c in range(l, r):\n                if (a < b < c < r) and (is_coprime(a, b) and is_coprime(b, c) and not is_coprime(a, c)):\n                    return \"{} {} {}\".format(a, b, c)\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import math\n    l, r = map(int, stdin.split())\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            if math.gcd(i, j)!= 1:\n                continue\n            for k in range(j + 1, r + 1):\n                if k % i == 0:\n                    break\n            else:\n                return str(i) + \" \" + str(j) + \" \" + str(k)\n    return -1\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    res = []\n    for i in range(l, r+1):\n        for j in range(i+1, r+1):\n            if is_coprime(i, j):\n                continue\n            for k in range(j+1, r+1):\n                if is_coprime(j, k) and not is_coprime(i, k):\n                    res.append(i)\n                    res.append(j)\n                    res.append(k)\n                    return''.join(map(str, res))\n    return '-1'\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    \n    for i in range(l, r):\n        for j in range(l, r):\n            for k in range(l, r):\n                if gcd(i, j)!= gcd(j, k) and gcd(i, k)!= gcd(j, k) and i < j < k:\n                    print(i, j, k)\n                    return ''\n    return '-1'\n                \ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    a = b = c = -1\n\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            if is_coprime(i, j):\n                continue\n            for k in range(j + 1, r + 1):\n                if is_coprime(i, k) and is_coprime(j, k):\n                    a, b, c = i, j, k\n                    break\n\n        if a!= -1:\n            break\n\n    return''.join(map(str, (a, b, c)))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    s = a[1]\n    mugs = a[2:]\n    for i in range(n):\n        if mugs[i] == s:\n            mugs[i] = 0\n    while 0 in mugs:\n        mugs.remove(0)\n    if len(mugs) < 2:\n        return \"YES\"\n    for i in range(len(mugs)):\n        for j in range(i, len(mugs)):\n            if mugs[i] + mugs[j] == s:\n                return \"YES\"\n    return \"NO\"\n    \n\ndef"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(' '))\n    mugs = list(map(int, stdin.split(' ')))\n    return 'YES' if can_pouring(n, s, mugs) else 'NO'\n\n\ndef"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = int(s)\n    # print(n)\n    # print(s)\n    a = stdin.split()[1:]\n    a = list(map(int, a))\n    # print(a)\n    # print(len(a))\n    for i in range(len(a) - 1):\n        if s - a[i] == 0:\n            return \"NO\"\n        elif s - a[i] <= a[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split(' ')]\n    mugs = [int(x) for x in stdin.split(' ')]\n    assert len(mugs) == n\n    for x in mugs:\n        assert x > 0\n    for i in range(1, len(mugs)):\n        assert mugs[i] >= mugs[i - 1]\n    assert s > 0\n\n    def possible(mugs, s):\n        cur_s, cur_l = s, 0\n        for i in range(len(mugs)):\n            cur_s += mugs[i]\n            cur_l += 1\n            if cur_s > cur_l * mugs[i]:\n                return False\n        return True\n\n    if n == 1:\n        assert possible(mugs, s)\n        return 'YES'\n    for x in range(1, len(mugs) - 1):\n        if possible(mugs[:x] + mugs[x + 1:], s - mugs[x]):\n            return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    if n == k:\n        return \"YES\"\n    if sum(a) < k:\n        return \"NO\"\n    x = 0\n    for i in range(n - 1):\n        x += a[i]\n        if x >= k:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    mugs = list(map(int, stdin.split()))\n    if s == max(mugs):\n        return \"NO\"\n    else:\n        return \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\" \")\n    n, s = int(n), int(s)\n    mugs = stdin.split(\" \")\n    mugs = list(map(int, mugs))\n\n    result = 0\n    for i in range(n):\n        mugs[i] = s // mugs[i]\n        result += mugs[i]\n\n    if result == s:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # The input is read from the stdin and passed to the function.\n    # Then, the solution function uses the first input from the stdin, in this case, the number of cups and the number of cups.\n    # The first line contains an integer n and an integer s (2 \u2264 n \u2264 100;\u00a01 \u2264 s \u2264 1000) \u2014 the number of mugs and the volume of the cup.\n    # The next line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10) \u2014 the volume of the i-th mug.\n    #\n    # The output should contain a single string, either \"YES\" or \"NO\", in a single line.\n\n    # Initialize the volume of cups\n    cups = int(stdin.split(' ')[0])\n    cups_vol = int(stdin.split(' ')[1])\n\n    # Initialize the volume of each cup\n    mugs = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    \n    # Define the function\n    def solve(mugs, cups_vol):\n        # Copy the volume of each cup\n        mugs_copy = mugs[:]\n        \n        # Initialize the biggest value of the cups\n        max_value = max(mugs_copy)\n        \n        # The largest value of the cups should be the sum of the number of cups and the volume of the cup\n        for cup in mugs_copy:\n            max_value = max_value + cup\n        \n        # Initialize the biggest value of the cups\n        max_value = max(mugs_copy)\n        \n        # If the largest value of the cups is less than the volume of the cup, then it is impossible to win the game\n        if max_value < cups_vol:\n            print('NO')\n            return\n        \n        # Initialize the result\n        result = 'NO'\n        \n        # If the number of cups is odd, then it is possible to win the game\n        if cups % 2 == 1:\n            print('YES')\n            return\n        \n        # If the number of cups is even, then it is possible to win the game if there is a mug of volume 1 in the cup and a mug of volume 2 in the cup. Otherwise, it is impossible to win the game\n        if cups % 2 == 0:\n            # Initialize the list to store the number of cups of each mug\n            cup_count = [0 for _ in range(len(mugs_copy))]\n            \n            # Count the number of cups of each mug\n            for cup in mugs_copy:\n                cup_count[mugs_copy.index(cup)] += 1\n            \n            # If the number of cups of each mug is 1, then the game is impossible to win\n            if 1 in cup_count:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 2, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 0:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 2, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 1:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 3, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 1:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 3, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 0:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 4, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 1:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 4, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 0:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 5, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 1:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 5, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 0:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 6, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 1:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 6, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 0:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 7, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2 == 1:\n                print('NO')\n                return\n            \n            # Initialize the variable to store the number of cups of each mug\n            mug_count = 0\n            \n            # If the number of cups of each mug is 7, then the game is impossible to win\n            for cup in cup_count:\n                mug_count += cup\n            if mug_count % 2"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    return str(max(y * 2 + b - 1, y + b * 2 - 1, y + r * 2 - 1))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nimport sys\nimport numpy as np\n\ndef"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8 13 9')\n    24\n    >>> solution('13 3 6')\n    9\n    \"\"\"\n    y, b, r = map(int, stdin.split())\n    return y + b + r - 6\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    y = int(stdin[0])\n    b = int(stdin[1])\n    r = int(stdin[2])\n    return str(y+b+r)\nprint(solution(input()))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    yellow, blue, red = [int(n) for n in stdin.split()]\n    num_yellow = sum([yellow // 3, yellow // 5, yellow // 7, yellow // 8])\n    num_blue = sum([blue // 3, blue // 5, blue // 7, blue // 8])\n    num_red = sum([red // 3, red // 5, red // 7, red // 8])\n    return str(num_yellow + num_blue + num_red)\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nReturn the solution for the task.\n\n\"\"\"\n\nfrom collections import Counter\n\ny, b, r = [int(x) for x in stdin.split(' ')]\ncount_y = Counter(y)\ncount_b = Counter(b)\ncount_r = Counter(r)\n\nprint(min(count_y['b'] + count_b['r'], count_b['y'] + count_r['y'], count_r['b'] + count_y['y']))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = [int(x) for x in stdin.split()]\n    if y >= b + 1 and y >= r + 1:\n        return y + b + r\n    elif b >= y + 1 and b >= r + 1:\n        return y + b + r\n    elif r >= y + 1 and r >= b + 1:\n        return y + b + r\n    else:\n        return y + b + r\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    if r > y + b:\n        return str(r - (b + y))\n    return str(y + b - r)\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    max_or = y + b + r\n    if max_or >= 6:\n        if y > b and y > r:\n            if b + 1 == r:\n                return y * 2 + b + r\n            elif r + 1 == b:\n                return y * 2 + r + b\n            else:\n                return y * 2 + b + r\n        elif r > b and r > y:\n            if y + 1 == b:\n                return y * 2 + b + r\n            elif b + 1 == r:\n                return y * 2 + r + b\n            else:\n                return y * 2 + r + b\n        else:\n            if r + 1 == b:\n                return y * 2 + b + r\n            elif b + 1 == r:\n                return y * 2 + r + b\n            else:\n                return y * 2 + r + b\n    else:\n        return max_or\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(8 13 9)\n    24\n    >>> solution(13 3 6)\n    9\n    \"\"\"\n    y, b, r = map(int, stdin.split())\n    return str(y + b + r - 1)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    balloons = sorted(map(int, stdin.split()))\n\n    t = 0\n    while sum(balloons[1:]) >= 0:\n        t += 1\n        balloons[0] -= 1\n        balloons[1] -= 1\n        balloons[2] -= 1\n        balloons = sorted(balloons)\n\n    return t\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = [int(stdin) for stdin in stdin.split(' ')]\n    return max(min(r - g, g - b, b - r), 0)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tr\u1ea3 v\u1ec1 1 `int` \u0111\u1ea1i di\u1ec7n cho s\u1ed1 l\u01b0\u1ee3ng `int` t\u1ed1i \u0111a khi ph\u00e2n t\u00e1ch chu\u1ed7i input\n    th\u00e0nh c\u00e1c `int`.\n    \"\"\"\n    # Xo\u00e1 d\u00f2ng sau v\u00e0 vi\u1ebft code v\u00e0o \u0111\u00e2y set c\u00e1c gi\u00e1 tr\u1ecb ph\u00f9 h\u1ee3p\n    # raise NotImplementedError(\"H\u1ecdc vi\u00ean ch\u01b0a l\u00e0m b\u00e0i n\u00e0y\")\n    r, g, b = stdin.split()\n    r, g, b = int(r), int(g), int(b)\n\n    t = max(r//2, g//2, b//2)\n    return t\n\ndef"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: a single line string\n    :return:\n    \"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"3\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return r + g + b - 3\n\"\"\""
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return min(min(r, g), b)\n\"\"\"\n\nimport sys\n\nfrom tools import timing\n\n\ndef"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '4'\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    m = 0\n    while a > 0 and b > 0 and c > 0:\n        if a + b + c == m * 3:\n            m += 1\n            a -= 1\n            b -= 1\n            c -= 1\n        elif a >= b and a >= c:\n            a -= 1\n            b -= 1\n            c -= 1\n        elif b >= a and b >= c:\n            a -= 1\n            b -= 1\n            c -= 1\n        elif c >= a and c >= b:\n            a -= 1\n            b -= 1\n            c -= 1\n    return m\n\n\ndef"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(len(stdin))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # for line in stdin:\n    #     array = line.split()\n    #     n = int(array[0])\n    #     array = array[1:]\n    #     array = [int(a) for a in array]\n    #     array.sort()\n    #     result = [a for a in array if a % 2 == 0]\n    #     result.sort(reverse=True)\n    #     result = [a for a in result if a > 1]\n    #     print(result)\n    #     print(array)\n    return ''\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prizes = list(map(int, stdin.split()))\n    prizes.sort()\n\n    ans = 0\n    while len(prizes) > 0:\n        if n >= prizes[0]:\n            ans += prizes[0]\n            n -= prizes.pop(0)\n        else:\n            ans += n\n            n = 0\n            break\n    return ans\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"solution\"\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_prizes = int(stdin.readline())\n    prizes = list(map(int, stdin.readline().split()))\n    length_prize = len(prizes)\n    if length_prize == 1:\n        return str(prizes[0])\n    if length_prize == 2:\n        return str(max(prizes))\n    prize_min = prizes[0]\n    current_position = 0\n    current_position_friend = 0\n    for i in range(1, number_of_prizes):\n        if i == 1:\n            current_position = 1\n            current_position_friend = 10 ** 6 - 1\n            continue\n        current_position = current_position + 1\n        current_position_friend = current_position_friend + 1\n        if prize_min > current_position:\n            prize_min = current_position\n            current_position_friend = current_position + 1\n            current_position = prize_min\n            continue\n        if prize_min > current_position_friend:\n            prize_min = current_position_friend\n            current_position = current_position_friend\n    return str(prize_min)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '10'\n\"\"\"\n\ndef"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gives the number of ways to distribute coins so that\n    Tanya will be satisfied, as described in the problem\n    description.\n    \"\"\"\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return'some string'\n\"\"\"\n\nfrom math import factorial as fact\n\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2: return 1\n    stdin_list = [stdin[i:j] for i, j in zip(range(len(stdin)), range(1, len(stdin) + 1))]\n    stdin_set = set(stdin_list)\n    if len(stdin_list)!= len(stdin_set):\n        return 2\n    else:\n        return 1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    str_in = stdin\n    lst_str_in = list(str_in)\n    if len(set(str_in)) == 1:\n        return \"1\"\n    elif len(set(str_in)) == len(str_in):\n        return \"-1\"\n    elif len(set(str_in)) == len(str_in) - 1:\n        return len(str_in) - 1\n    else:\n        return len(str_in) - len(set(str_in))\n    return answer\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"abc\"\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return \"\""
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    \n    def is_distinct(str):\n        return len(set(str)) == len(str)\n    \n    changes = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            tmp = s[i:j]\n            if not is_distinct(tmp):\n                continue\n            else:\n                changes += 1\n                if j < n:\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n    if changes < 1:\n        return \"IMPOSSIBLE\"\n    else:\n        return changes\n        \n\n\"\"\"\n\nfrom collections import Counter\nimport unittest\n\nclass Solution(object):\n    def is_distinct(self, str):\n        return len(set(str)) == len(str)\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        s = stdin\n        \n        changes = 0\n        for i in range(n):\n            for j in range(i+1, n+1):\n                tmp = s[i:j]\n                if not self.is_distinct(tmp):\n                    continue\n                else:\n                    changes += 1\n                    if j < n:\n                        s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n        if changes < 1:\n            return \"IMPOSSIBLE\"\n        else:\n            return changes\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('5\\nkoko'),'2')\n        self.assertEqual(solution('4\\nmurat'),'0')\n        self.assertEqual(solution('3\\nba'),'1')\n        self.assertEqual(solution('4\\nab'),'IMPOSSIBLE')\n        self.assertEqual(solution('1\\na'),'0')\n        self.assertEqual(solution('2\\nab'),'0')\n        self.assertEqual(solution('3\\nabb'),'IMPOSSIBLE')\n        self.assertEqual(solution('7\\nabckkkk'),'3')"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    s = set()\n    l = len(n)\n    for i in range(l):\n        for j in range(i+1, l+1):\n            s.add(n[i:j])\n    return len(s) - len(set(n))\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vladik and Valera take turns giving each other one candy.\n    Each of them must take turns first.\n    If any of them can't give the right amount of candies,\n    then they both can't give the right amount of candies.\n    \"\"\"\n    a, b = [int(x) for x in stdin.split()]\n    c = 0\n    while a > 1 and b > 1:\n        if c % 2 == 0:\n            a -= 1\n        else:\n            b -= 1\n        c += 1\n    return \"Vladik\" if c % 2 == 0 else \"Valera\"\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a + b) % 3!= 0:\n        return 'Vladik' if a > b else 'Valera'\n    return 'Vladik' if a < b else 'Valera'\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a % b == 0:\n        return 'Vladik'\n    else:\n        return 'Valera'"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n\nprint(solution(stdin))\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    i = 0\n    while a!= 0 and b!= 0:\n        a, b = a - 1, b - 1\n        if b < a:\n            a, b = b, a\n        i += 1\n    return 'Vladik' if i % 2 else 'Valera'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    v, vl = map(int, stdin.split())\n    return \"Valera\" if v % vl!= 0 else \"Vladik\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # input values\n    a, b = map(int, stdin.split())\n    # find the winner\n    if a > b:\n        return \"Vladik\"\n    else:\n        return \"Valera\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    c = 0\n    while a!= 0 and b!= 0:\n        if a > b:\n            a -= b\n            b = 0\n        else:\n            b -= a\n            a = 0\n        c += 1\n    return \"Vladik\" if c % 2 == 0 else \"Valera\""
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a and b:\n        if a == b:\n            print('Vladik')\n            break\n        a = a - b\n        b = b - a\n    else:\n        print('Valera')\n\n    return 'Vladik' if a < b else 'Valera'\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if (a - 1) % b == 0:\n        return \"Vladik\"\n    else:\n        return \"Valera\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    parenthesis = stdin.replace(\"?\", \"1\")\n    parenthesis = parenthesis.replace(\"(\", \"1+\")\n    parenthesis = parenthesis.replace(\")\", \"1\")\n    return parenthesis\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\n    >>> solution(\"(?????(???(?))?)?\")\n    '(()())((()))'\n    \"\"\"\n    return \":(\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    s = stdin[0]\n    n = len(s)\n    if n < 1 or n > 10**5:\n        return \":(\"\n    m = math.factorial(n)\n    if m < 10**5:\n        return \":(\"\n    ret = \"\"\n    for i in range(n):\n        if s[i]!= \"?\":\n            ret += s[i]\n        else:\n            ret += \"(\" + solution(stdin[i+1:]) + \")\"\n    return ret\n\nprint(solution(input()))\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ':('\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    p_l = 0\n    p_r = 0\n    q = 0\n    for i in s:\n        if i == \"(\":\n            p_l += 1\n        elif i == \")\":\n            p_r += 1\n        else:\n            if p_l == p_r:\n                q += 1\n            else:\n                break\n    if q == p_l == p_r:\n        return \":(\"\n    else:\n        return \"()\" * q + \"(\" + \"()\" * (p_l - p_r - q) + \")\" * (p_l - p_r - q)\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print('((()))')\n    return ''\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    def is_valid(p):\n        if p[0] == 0 and p[-1] == 0:\n            return False\n        if len(p) == 1:\n            return abs(p[0]) <= k\n        return abs(p[-1]) <= k and all([abs(p[i]) <= k for i in range(len(p)-1)])\n    \n    res = 0\n    for i in range(1, n):\n        if i == 1:\n            res += sum(1 for j in range(n) if a[j] == a[0] and abs(a[j]) <= k)\n        else:\n            res += sum(1 for j in range(n) if is_valid([a[j], a[i-1]]))\n        \n    return str(res)\n    '''\n    #return str(sum(sum(1 for j in range(n) if is_valid([a[j], a[i-1]])) for i in range(1, n)))\n    \n    '''\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    def is_valid(p):\n        if p[0] == 0 and p[-1] == 0:\n            return False\n        if len(p) == 1:\n            return abs(p[0]) <= k\n        return abs(p[-1]) <= k and all([abs(p[i]) <= k for i in range(len(p)-1)])\n    \n    res = 0\n    for i in range(1, n):\n        for j in range(n):\n            if is_valid([a[j], a[i-1]]):\n                res += 1\n    return str(res)\n    '''\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    res = 0\n    for i in range(1, n):\n        for j in range(n):\n            if a[j] == a[i-1]:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    polynom = list(map(int, stdin.split()))\n    coeffs = polynom[:n]\n    coeffs_copy = coeffs.copy()\n    coeffs_copy.append(0)\n    coeffs_copy.append(0)\n    coeffs_copy.append(0)\n    coeffs_copy.append(0)\n    coeffs_copy.append(0)\n    coeffs_copy.append(0)\n    coeffs_copy.append(0)\n    coeffs_copy.append(0)\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for l in range(1, n+1):\n                if i+j+l+1!= n+1:\n                    continue\n                if abs(coeffs[i-1]) > k:\n                    continue\n                if abs(coeffs_copy[i+j+l]) > k:\n                    continue\n                if abs(coeffs_copy[i-1]) > k:\n                    continue\n                if abs(coeffs[j-1]) > k:\n                    continue\n                if abs(coeffs_copy[j+l]) > k:\n                    continue\n                if abs(coeffs_copy[j-1]) > k:\n                    continue\n                if abs(coeffs_copy[l-1]) > k:\n                    continue\n                if abs(coeffs[l-1]) > k:\n                    continue\n                if coeffs[j-1] == 0 and coeffs[l-1] == 0:\n                    continue\n                if coeffs_copy[j-1] == 0 and coeffs_copy[l-1] == 0:\n                    continue\n                if coeffs[i-1] == 0 and coeffs[j-1] == 0 and coeffs[l-1] == 0:\n                    continue\n                result += 1\n    return str(result)\n\n\n\n'''"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = map(int, stdin.readline().split())\n    # p = list(map(int, stdin.readline().split()))\n    #\n    # cnt = 0\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         if p[j]!= 0:\n    #             if abs(p[j] / p[i]) > k:\n    #                 continue\n    #             else:\n    #                 cnt += 1\n    #\n    # return cnt\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def check(cnt, total):\n        if cnt == n:\n            if total == 0:\n                return 1\n            else:\n                return 0\n\n        check(cnt + 1, total + a[cnt])\n        check(cnt + 1, total - a[cnt])\n        check(cnt + 1, total * a[cnt])\n        if abs(a[cnt]) <= k:\n            check(cnt + 1, total // a[cnt])\n        return cnt\n\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')[1:]))\n    return check(0, 1)\n\n\ndef"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    poly = list(map(int, stdin.split()))\n\n    target = [\n        [i, abs(poly[i])]\n        for i in range(n)\n        if abs(poly[i]) > k or poly[i] == 0\n    ]\n\n    if not target:\n        return \"0\"\n\n    ans = 0\n    target.sort(key=lambda tup: tup[1], reverse=True)\n\n    i = 0\n    while i < len(target):\n        if i == 0:\n            i += 1\n        while i < len(target) and target[i][1] == target[i - 1][1]:\n            i += 1\n\n        l, r = 0, len(target)\n        while l < r:\n            mid = (l + r) // 2\n            if target[mid][1] < target[i][1]:\n                l = mid + 1\n            else:\n                r = mid\n\n        target[l - 1][1] = target[i][1]\n\n        ans += (l + r) // 2\n        i += 1\n\n    return str(ans)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def valid(arr: List[int]) -> bool:\n        return not any(e == 0 and i!= len(arr) - 1 for i, e in enumerate(arr[1:])) and all(abs(e) <= k for e in arr) and all(arr[i] * arr[i + 1] < 0 for i in range(len(arr) - 1))\n\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    s = sum(arr)\n    if s == 0:\n        return '0'\n    if s > 0:\n        return '2^' + str(n - 1)\n\n    if valid(arr):\n        return '2^' + str(n - 1)\n    else:\n        return str(2 ** (n - 1))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given the degree and limit for absolute values of coefficients and the valid polynomial P(x) as a string,\n    count the number of ways to change one coefficient to get a valid polynomial Q that Q(2) = 0.\n    Return the answer as a string.\"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    coeffs = [int(x) for x in stdin.split(' ')[1:]]\n    ans = 0\n\n    # We can just use a linear solution here to find the answer.\n    for i in range(len(coeffs) - 1):\n        if abs(coeffs[i]) <= k:\n            for j in range(i + 1, len(coeffs)):\n                if abs(coeffs[j]) <= k and abs(coeffs[j])!= abs(coeffs[i]):\n                    ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \ubcf5\uc7a1\ub3c4: O(n)\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    if a[-1] == 0:\n        return 0\n    q = 0\n    if a[0] < 0:\n        q += 1\n        a[0] = -a[0]\n    if n > 1:\n        for i in range(n - 1):\n            if abs(a[i]) > abs(a[i + 1]):\n                q += 1\n                a[i + 1] = -a[i + 1]\n            elif abs(a[i]) < abs(a[i + 1]) <= k:\n                q += 1\n                a[i + 1] = -a[i + 1]\n    if a[-1] > 0:\n        q += 1\n    return q\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n\n    n, k = list(map(int, stdin.split()))\n    a = [0] + list(map(int, stdin.split()[1:]))\n    # print(n, k)\n    # print(a)\n    cnt = 0\n    for comb in itertools.combinations(a, n):\n        # print(comb)\n        if sum(comb) == 0:\n            cnt += 1\n    return str(cnt // 2)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i]!= arr[j]:\n                res += 1\n    return res\n\n\ndef"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input on STDIN\n    :return: solution string\n    \"\"\"\n    # your solution goes here\n    pass\n\ndef"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    arr.sort(reverse=True)\n    res = 0\n    count = 0\n    for i in range(stdin):\n        count += arr[i]\n        if count > 3:\n            res += 1\n    return res\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your runtime beats 93.22 % of python3 submissions.\n    XXX:\n    XXX:\n    XXX:\n    XXX:\n    \"\"\"\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split()]\n    if x1 == x2 or y1 == y2:\n        return 1\n    if abs(x2 - x1) % 2 == 1 or abs(y2 - y1) % 2 == 1:\n        return 1\n    if x1 + 1 == x2 and y1 + 1 == y2:\n        return abs(x2 - x1) * abs(y2 - y1)\n    if x1 + 1 == x2 and y1 == y2:\n        return abs(x2 - x1) * (abs(y2 - y1) - 1) + 1\n    if x1 == x2 and y1 + 1 == y2:\n        return abs(x2 - x1) * (abs(y2 - y1) - 1) + 1\n    if x1 == x2 - 1 and y1 + 1 == y2:\n        return abs(x2 - x1) * (abs(y2 - y1) - 1) + 1\n    if x1 == x2 and y1 == y2 - 1:\n        return abs(x2 - x1) * (abs(y2 - y1) - 2) + 1\n    if x1 == x2 - 1 and y1 == y2 - 1:\n        return abs(x2 - x1) * (abs(y2 - y1) - 2) + 1\n    return abs(x2 - x1) * abs(y2 - y1) // 2\n----\n\ndef"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  x_1, y_1, x_2, y_2 = map(int, stdin.split())\n  return str(int((y_2-y_1) // 2 + abs(x_2 - x_1)))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(solution(stdin.split('\\n')[0]))"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return (x2 - x1 + 1) * (y2 - y1 + 1)\n\n\nprint(solution('1 1 5 5'))"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(s) for s in stdin.split(\" \")]\n    ans = 0\n    for x in range(x1, x2 + 1):\n        ans += x2 + 1 - x\n    for y in range(y1, y2 + 1):\n        ans += y2 + 1 - y\n    return str(ans)\nprint(solution(input()))"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_1 = x_1 - (x_1 % 2)\n    y_1 = y_1 - (y_1 % 2)\n    x_2 = x_2 - (x_2 % 2)\n    y_2 = y_2 - (y_2 % 2)\n    x_range = range(x_1, x_2, 2)\n    y_range = range(y_1, y_2, 2)\n    return sum(x in x_range and y in y_range for x, y in [(0, 0), (1, 0), (0, 1), (1, 1)])\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    coords = list(map(int, stdin.split()))\n    x1, y1 = coords[0], coords[1]\n    x2, y2 = coords[2], coords[3]\n    cnt = 0\n    if x1 == x2:\n        for i in range(min(y1, y2), max(y1, y2) + 1):\n            if (i - 1) % 2 == 0:\n                cnt += abs(y1 - i) // 2\n            else:\n                cnt += abs(y1 - i) // 2 + 1\n    elif y1 == y2:\n        for i in range(min(x1, x2), max(x1, x2) + 1):\n            if (i - 1) % 2 == 0:\n                cnt += abs(x1 - i) // 2\n            else:\n                cnt += abs(x1 - i) // 2 + 1\n    else:\n        if abs(x2 - x1) % 2 == 0 and abs(y2 - y1) % 2 == 0:\n            cnt = abs(x1 - x2) // 2 + abs(y1 - y2) // 2\n        elif abs(x2 - x1) % 2 == 0 and abs(y2 - y1) % 2 == 1:\n            cnt = abs(x1 - x2) // 2 + abs(y1 - y2) // 2 + 1\n        elif abs(x2 - x1) % 2 == 1 and abs(y2 - y1) % 2 == 0:\n            cnt = abs(x1 - x2) // 2 + abs(y1 - y2) // 2 + 1\n        else:\n            cnt = abs(x1 - x2) // 2 + abs(y1 - y2) // 2 + 2\n    print(cnt)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = stdin.split('\\n')\n    n = int(n)\n    x1, y1 = data[0].split()\n    x2, y2 = data[1].split()\n    x3, y3 = data[2].split()\n    qx, qy = data[3].split()\n    qx = int(qx)\n    qy = int(qy)\n    x3 = int(x3)\n    y3 = int(y3)\n\n    if (x2 == x1 or x2 == x3 or y2 == y1 or y2 == y3) and (qx == x3 or qy == y3):\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"YES\" if the king can move from the given position to the target without ever getting in check, otherwise returns \"NO\"\n    '''\n    n = int(stdin.split('\\n')[0])\n    a_x, a_y = [int(x) for x in stdin.split('\\n')[1].split()]\n    b_x, b_y = [int(x) for x in stdin.split('\\n')[2].split()]\n    c_x, c_y = [int(x) for x in stdin.split('\\n')[3].split()]\n    if (b_y == a_y) or (b_x == a_x) or (abs(a_x - b_x) == abs(a_y - b_y)):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n\n    Args:\n        stdin (str): [description]\n\n    Returns:\n        str: [description]\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a_x, a_y = int(stdin.split(\"\\n\")[1].split()[0]), int(stdin.split(\"\\n\")[1].split()[1])\n    b_x, b_y = int(stdin.split(\"\\n\")[2].split()[0]), int(stdin.split(\"\\n\")[2].split()[1])\n    c_x, c_y = int(stdin.split(\"\\n\")[3].split()[0]), int(stdin.split(\"\\n\")[3].split()[1])\n\n    if (\n        (c_y > a_y) or\n        (c_y < a_y) or\n        (c_x > a_x) or\n        (c_x < a_x)\n    ):\n        return \"YES\"\n    elif (\n        (b_y == c_y and c_x == b_x) or\n        (c_x == a_x and b_y == c_y) or\n        (b_y == c_y and c_x == a_x)\n    ):\n        return \"YES\"\n    elif (\n        (a_y == b_y and c_x == a_x) or\n        (a_y == b_y and c_x == b_x) or\n        (a_y == c_y and b_x == a_x)\n    ):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(stdin)"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check_if_king_can_move(n: int, x: int, y: int, x1: int, y1: int):\n        # time complexity: O(n**2)\n        for i in range(1, n+1):\n            if (x, y) == (x1, y1):\n                return True\n            if x!= x1:\n                if x+i == x1:\n                    return True\n                if x-i == x1:\n                    return True\n            if y!= y1:\n                if y+i == y1:\n                    return True\n                if y-i == y1:\n                    return True\n        return False\n    \n    n, x, y = [int(i) for i in stdin.split('\\n')[0].split()]\n    x1, y1 = [int(i) for i in stdin.split('\\n')[1].split()]\n    x2, y2 = [int(i) for i in stdin.split('\\n')[2].split()]\n    \n    if check_if_king_can_move(n, x, y, x1, y1):\n        return \"YES\"\n    \n    if check_if_king_can_move(n, x, y, x2, y2):\n        return \"YES\"\n    \n    return \"NO\"\n    \n    \n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    queen = [int(i) for i in stdin.split('\\n')[1].split()]\n    king = [int(i) for i in stdin.split('\\n')[2].split()]\n    target = [int(i) for i in stdin.split('\\n')[3].split()]\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(2 * min(a, b) for a, b in zip(stdin.split(), stdin.split()[1:])))"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"\"\"3\n   ... 35\n   ... 77\n   ... \"\"\")\n    1001\n    >>> solution(\"\"\"6\n   ... 1 2 4 8 16 32\n   ... \"\"\")\n    32\n    '''\n   ...\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\"\"\"\n    pass"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a = [int(x) for x in line[1].split()]\n    gcd = lambda x, y: x if not y else gcd(y, x % y)\n    lcm = lambda x, y: x * y // gcd(x, y)\n    max_lcm = 1\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            max_lcm = max(max_lcm, lcm(a[i], a[j]))\n    return str(max_lcm)"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    def lcm(a, b):\n        return a // gcd(a, b) * b\n\n    return str(max(list(map(lcm, list(zip(a, a[1:])), list(zip(a, a[2:]))))))\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(c) for c in stdin.readline().split(' ')]\n    arr.sort()\n    lcm = 1\n    i = 1\n    while i < n:\n        lcm *= arr[i] // math.gcd(lcm, arr[i])\n        i += 1\n    return str(lcm)"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the solution\"\"\"\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum least common multiple of two integers in the array\n\n    >>> solution('5\\n1 2 4 8 16')\n    32\n    >>> solution('7\\n1 2 3 4 5 6 7')\n    105\n    \"\"\"\n    nums = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n    return max([i * j for i in nums for j in nums if i * j < 10 ** 9])\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input as list\n    a = list(map(int, stdin.split()))\n    n = len(a)\n\n    # get the max of all the numbers in a\n    m = max(a)\n\n    # find the max value of the LCM\n    # of the numbers in a\n    ans = 1\n    for i in range(2, m + 1):\n        if all([i % j == 0 for j in a]):\n            ans *= i\n\n    # return the answer\n    return str(ans)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    count = 0\n    for i in range(n):\n        a, b = [int(x) for x in stdin.split('\\n')[i + 1].split(' ')]\n        if a > k or b > k:\n            continue\n        else:\n            if a == b:\n                if (a * (k // a)) == k:\n                    count += (k // a)\n            else:\n                if a <= k and b <= k:\n                    count += max(a, b)\n    return count\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    items = [map(int, item.split()) for item in stdin.split('\\n')[1:]]\n    items = [(num_red, num_blue) for num_red, num_blue in items]\n    return 0\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of baskets in which the fruit can be distributed\"\"\"\n    n, k = [int(x) for x in stdin.split(\" \")]\n    berries = [[int(x) for x in stdin.split(\"\\n\")[i].split(\" \")] for i in range(n)]\n    berries.sort(key=lambda x: x[1], reverse=True)\n    max_count = 0\n    total_red = 0\n    total_blue = 0\n    count = 0\n    while berries:\n        berries_to_add = berries[-1]\n        berries.pop(-1)\n        if berries_to_add[0] + total_red <= k:\n            count += 1\n            total_red += berries_to_add[0]\n            if berries_to_add[1] + total_blue <= k:\n                count += 1\n                total_blue += berries_to_add[1]\n        max_count = max(max_count, count)\n    return max_count\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    \n    shrub = {}\n    for i in range(n):\n        a, b = map(int, stdin.split(' '))\n        shrub.setdefault(a, []).append(b)\n        shrub.setdefault(b, []).append(a)\n\n    count = 0\n    for k, v in shrub.items():\n        if len(v) <= m:\n            m -= len(v)\n            count += 1\n        elif m!= 0:\n            m -= m // len(v)\n            count += m // len(v)\n            if m!= 0:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\"\\n\")[0].split(\" \"))\n    berries = [int(x) for x in stdin.split(\"\\n\")[1:]]\n    berries.sort(reverse=True)\n    if berries[0] < b:\n        return str(a)\n    count = 0\n    while berries and a * (berries[0] + berries[-1]) <= b:\n        count += 1\n        a += 1\n        if count == len(berries):\n            return str(a - 1)\n        b -= a * (berries[0] + berries[-1])\n        berries.pop()\n        berries.pop(0)\n    return str(a)\n\n\nprint(solution(input()))"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split('\\n')[0].split())\n    reds = [0] * n\n    blues = [0] * n\n    for i in range(n):\n        reds[i], blues[i] = map(int, stdin.split('\\n')[i+1].split())\n    # print(reds, blues)\n    reds.sort()\n    blues.sort()\n    # print(reds, blues)\n    ans = 0\n    for i in range(n):\n        if reds[i] > blues[i]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    pattern = '\\d*\\.?\\d*e\\d*'\n    result = re.findall(pattern, stdin)[0]\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, e = stdin.split('e')\n    a, b = float(a), int(b)\n    a = 10**b * a\n    return '{:.6f}'.format(a)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, B, C = stdin.split('e')\n    C = C.replace('0', '')\n    return str(int(A) * 10**int(B)) + C\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(float(stdin))\n    "
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, d, b = map(int, stdin.split(\"e\"))\n    s = str(a * (10 ** d))\n    if b == 0:\n        return s\n    else:\n        return s + \".\" + \"0\" * b\n\n\nprint(solution(\"8.549e3\"))\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split('e')\n    lst = list(map(lambda x: int(x) if x!= '' else 0, lst))\n    if lst[0] == 0:\n        return str(lst[1])\n    else:\n        return str(lst[0]) + '.' + str(lst[1])\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, d, b = [int(x) for x in stdin.split('e')]\n    return str(a*(10**d) + b)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get distance value in decimal notation\"\"\"\n   ...\n\n\ndef"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, e = stdin.split(\"e\")\n    a, b = int(a), int(b)\n    e = int(e)\n    print(a, b, e)\n    # note e is negative\n\n    # handle b\n    if b == 0:\n        print(a)\n    else:\n        print(a, b)\n\n    # handle e\n    if e < 0:\n        print(a, b, e)\n    else:\n        e = abs(e)\n        if e < 10:\n            print(a)\n        else:\n            e = int(log10(e))\n            print(a, e)\n\n\ndef"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    arr.sort()\n    print(arr)\n    '''\n    n, k = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    arr.sort()\n    arr.insert(0,0)\n    print(arr)\n    maxi = 0\n    summ = 0\n    for i in range(len(arr)-1):\n        summ += arr[i]\n        if summ <= 0:\n            summ = 0\n        else:\n            maxi = max(maxi, summ)\n    print(maxi)"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible score at the end of the game.\n    :param stdin:\n    :return:\n    \"\"\"\n    n, k = map(int, stdin.split())\n    permutation, values = map(int, stdin.split())\n    values = list(map(int, stdin.split()))\n    scores = [0] * n\n    scores[permutation - 1] = values[permutation - 1]\n    for i in range(1, k + 1):\n        for j in range(n):\n            next_square = j + permutation\n            if next_square >= n:\n                next_square -= n\n            scores[j] += values[next_square]\n            permutation = next_square\n\n    return str(max(scores))\n\nprint(solution(input()))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    '''\n    n, k = map(int, stdin.readline().split())\n    p = stdin.readline().split()\n    c = stdin.readline().split()\n    p = [int(i) - 1 for i in p]\n    c = [int(i) for i in c]\n    ans = 0\n    if k == 0:\n        return ans\n    if k == 1:\n        ans = c[p[0]]\n        return ans\n    if k == 2:\n        if c[p[0]] > 0:\n            ans = c[p[0]]\n            c[p[0]] = 0\n            return ans\n        else:\n            ans = c[p[1]]\n            c[p[1]] = 0\n            return ans\n    if n <= k:\n        return ans\n    for i in range(n):\n        ans = max(ans, c[i])\n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution for the task.\"\"\"\n    # Get input\n    n, k = list(map(int, stdin.split(' ')))\n    p = list(map(int, stdin.split(' ')))\n    c = list(map(int, stdin.split(' ')))\n\n    # Initialize the score\n    score = 0\n    # Loop through permutation\n    for i in range(n):\n        # Check if we can make a move\n        if i == p[i] - 1:\n            # Make a move\n            score += c[p[i] - 1]\n            # Check if we can make another move\n            if i!= n - 1 and i == p[i + 1] - 1:\n                # Make a move\n                score += c[p[i + 1] - 1]\n    # Return the max score\n    return str(score)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = lines[0].split(' ')\n    n, k = int(n), int(k)\n\n    p = lines[1].split(' ')\n    p = list(map(int, p))\n    p = list(map(lambda i: p[i-1], p))\n    p.sort()\n\n    c = lines[2].split(' ')\n    c = list(map(int, c))\n\n    # dp[i][j] = max score after j moves starting from position i\n    dp = [[0 for i in range(k+1)] for i in range(n+1)]\n    dp[1][1] = c[p[0]-1]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if i == p[i-1]:\n                dp[i][j] += c[i-1]\n            if j >= 2:\n                dp[i][j] = max(dp[i][j], dp[i][j-2]+c[i-1])\n    print(dp)\n    return str(max(dp[-1]))"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # N: number of squares\n    # K: number of moves\n    N, K = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    # C: cumulative score for each square\n    C = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    # P: permutation\n    P = [int(x) for x in stdin.split(\"\\n\")[2].split(\" \")]\n    print(P[C.index(max(C))])\n    return \"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(s)\n    '''"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 2\n   ... 2 4 5 1 3\n   ... 3 4 -10 -8 8''')\n    '8'\n    '''\n    return ''"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 2 4 5 1 3\n   ... 3 4 -10 -8 8''')\n    '8'\n    >>> solution('''4 2\n   ... 2 4 1 3\n   ... 3 4 -10 -8 8''')\n    '7'\n    >>> solution('''5 2\n   ... 2 4 5 1 3\n   ... 3 4 8 -8 3''')\n    '8'\n    \"\"\"\n    line = stdin.splitlines()\n    N, K = int(line[0]), int(line[1])\n    line = line[2:]\n    P = list(map(int, line[:N]))\n    C = list(map(int, line[N:]))\n    assert len(P) == N, \"Number of permutations does not equal number of pieces.\"\n    assert len(C) == N, \"Number of score changes does not equal number of pieces.\"\n    assert (\n        set(P) == set(range(1, N + 1))\n    ), \"Permutation does not contain the numbers 1, 2,..., N.\"\n    assert (\n        set(C) == set(range(-10 ** 9, 10 ** 9 + 1))\n    ), \"Score changes do not contain all the possible values.\"\n    score = 0\n    for i in range(K + 1):\n        for j in range(N):\n            if P[j] == i + 1:\n                score += C[j]\n                P[j] = i\n    return str(score)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(' '))\n    P = list(map(int, stdin.split(' ')[1:]))\n    C = list(map(int, stdin.split(' ')[1:]))\n    score = 0\n    for i in range(K):\n        for j in range(N):\n            if P[j] == j + 1:\n                score += C[P[j] - 1]\n                P[j] = P[j] + 1\n                break\n    return score\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    cities_num = int(stdin[0])\n    roads_num = int(stdin[1])\n    roads = []\n    for i in range(roads_num):\n        road = list(map(int, stdin[2 + i].split()))\n        roads.append(road)\n    city_start = int(stdin[roads_num + 2]) - 1\n    city_end = int(stdin[roads_num + 3]) - 1\n\n    return \"YES\"\n\"\"\"\n\n\nimport sys\nimport numpy as np\nimport math\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write your solution here\n    '''\n\n    def find_path(matrix, city):\n        n = len(matrix)\n        if matrix[city][0] == n - 1:\n            return [city]\n        else:\n            ans = [city]\n            for i in range(n):\n                if matrix[city][i] == 1 and i!= n - 1:\n                    ans += find_path(matrix, i)\n                    if len(ans) == len(matrix):\n                        return ans\n        return ans\n\n    def choose_path(matrix, s, t):\n        n = len(matrix)\n        for i in range(n):\n            if matrix[s][i] == 1:\n                for j in range(n):\n                    if i!= j and matrix[i][j] == 1:\n                        matrix[s][j] = 0\n                        matrix[i][s] = 0\n                        matrix[t][i] = 0\n                        matrix[j][t] = 0\n                        ans = min(ans, abs(find_path(matrix, s)[0] - find_path(matrix, t)[0]))\n                        matrix[s][j] = 1\n                        matrix[i][s] = 1\n                        matrix[t][i] = 1\n                        matrix[j][t] = 1\n        return ans\n\n    n, m, s, t = [int(i) for i in stdin.split()]\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(m):\n        a, b, d = [int(i) for i in stdin.split()]\n        matrix[a - 1][b - 1] = 1\n        matrix[b - 1][a - 1] = 1\n    ans = min(choose_path(matrix, s - 1, t - 1), choose_path(matrix, s - 1, t - 1))\n    return 'YES' if ans == choose_path(matrix, s - 1, t - 1) else 'NO'\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\nfrom collections import deque, defaultdict\nfrom itertools import islice\nfrom math import inf\nfrom typing import List, Deque, DefaultDict, Tuple, Generator, Iterable, Optional\nfrom pprint import pprint\n\nDEBUG = '-v' in sys.argv\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def _is_cost_possible(cost: int, roads: list, capital: int, home: int):\n        \"\"\"\n        Returns True if there is a path that passes through the capital\n        and home and returns to the capital with the cost of `cost`\n        \"\"\"\n        # initialize the queue and visited set\n        q, visited = deque([(capital, cost)]), set([capital])\n        # loop while the queue is not empty\n        while q:\n            # pop the next city from the queue\n            c, _ = q.popleft()\n            # if the city is the home, return True\n            if c == home:\n                return True\n            # iterate through the cities connected to the current one\n            for d in roads[c]:\n                # if the city has not been visited\n                if d not in visited:\n                    # add it to the visited set\n                    visited.add(d)\n                    # add it to the queue with the remaining cost\n                    q.append((d, cost - roads[c][d]))\n        # return False if we didn't find a path\n        return False\n\n    # read the input\n    _, roads = stdin.split('\\n')\n    # define the cities\n    cities = [int(i) for i in roads.split(' ')]\n    # check the roads\n    for _, _, cost in roads:\n        if cost < 1:\n            raise ValueError('cost must be >= 1')\n    # define the capital and home\n    capital, home = cities[0], cities[1]\n    # define the cost to be negative\n    cost = -1\n    # check the roads\n    for city, cost in roads:\n        # check that the cost is valid\n        if cost < 1:\n            raise ValueError('cost must be >= 1')\n        # check that there is a path that goes through the capital and home\n        if not _is_cost_possible(cost, roads, capital, home):\n            # return the answer\n            return 'NO'\n    # return the answer\n    return 'YES'\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cities = {int(i): [] for i in stdin.split('\\n')[0].split(' ')[2:]}\n    paths = {int(i): [] for i in stdin.split('\\n')[0].split(' ')[2:]}\n    for i in stdin.split('\\n')[1:]:\n        cities[int(i.split(' ')[0])].append(int(i.split(' ')[1]))\n        cities[int(i.split(' ')[1])].append(int(i.split(' ')[0]))\n        paths[int(i.split(' ')[0])].append(int(i.split(' ')[2]))\n        paths[int(i.split(' ')[1])].append(int(i.split(' ')[2]))\n    cities[s] = [t]\n    cities[t] = [s]\n    visited = set()\n    visited.add(s)\n    visited.add(t)\n    n = len(cities)\n    min_ = float('inf')\n    def dfs(x: int, visited: set) -> None:\n        nonlocal min_\n        nonlocal visited\n        if x == t:\n            min_ = min(min_, len(visited))\n            return\n        for i in cities[x]:\n            if i not in visited:\n                visited.add(i)\n                dfs(i, visited)\n                visited.remove(i)\n\n    dfs(s, visited)\n    if min_ == float('inf'):\n        return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n\n    #print(edges)\n\n    max_val = 0\n    for edge in edges:\n        a, b = edge[0], edge[1]\n        path = path_between_two_leaves(n, a, b)\n        if path > max_val:\n            max_val = path\n\n    #print(max_val)\n    return str(max_val)\n\n\ndef"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # a,b = int(stdin[0]), int(stdin[1])\n    # edges = [int(i) for i in stdin.split('\\n')]\n    # edges = [[int(i) for i in stdin.split('\\n')] for _ in range(n)]\n    # edges = [[int(i) for i in stdin.split('\\n')] for _ in range(n)]\n    edges = [[int(i) for i in stdin.split('\\n')]]\n    n = edges[0][0]\n    edges.pop(0)\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # edges = [[int(i) for i in stdin.split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print(edges)\n    # n = int(stdin[0])\n    # edges = [[int(i) for i in stdin[1:].split('\\n')]]\n    # print"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    v, e = stdin.strip().split('\\n')\n    v, e = int(v), int(e)\n    tree = []\n    for line in e.split('\\n')[1:]:\n        start, end = map(int, line.split())\n        tree.append([start, end])\n    result = 0\n    # visited = set()\n    # visited = set()\n    # visited = set()\n    # visited = set()\n    # visited = set()\n    # visited = set()\n    for i in range(e - 1):\n        a, b = tree[i]\n        # print(a, b, result)\n        # print(i)\n        # print('a', a, 'b', b)\n        if a == b:\n            continue\n        if b in tree[a - 1]:\n            if a < b:\n                result += 2 * (len(tree[a - 1]) - 1)\n                tree[a - 1].pop(tree[a - 1].index([a, b]))\n                tree[a - 1].pop(tree[a - 1].index([b, a]))\n            else:\n                result += 2 * (len(tree[b - 1]) - 1)\n                tree[b - 1].pop(tree[b - 1].index([b, a]))\n                tree[b - 1].pop(tree[b - 1].index([a, b]))\n    print(result)\n    result += len(tree[v - 1]) - 1\n    print(tree[0])\n    print(tree[1])\n    print(tree[2])\n    print(tree[3])\n    print(tree[4])\n    print(tree[5])\n    # print(tree[0])\n    # print(tree[1])\n    # print(tree[2])\n    # print(tree[3])\n    # print(tree[4])\n    # print(tree[5])\n    # for line in e.split('\\n')[1:]:\n    #     start, end = map(int, line.split())\n    #     if start == end:\n    #         continue\n    #     visited.add(start)\n    #     visited.add(end)\n    #     print('start', start, 'end', end, result)\n    #     print(tree[start - 1])\n    #     print(tree[end - 1])\n    #     print('start', start, 'end', end)\n    #     if start in tree[end - 1]:\n    #         result += 2\n    #         print('found')\n    #     if end in tree[start - 1]:\n    #         result += 2\n    #         print('found')\n    # print('res', result)\n    # return result\nsolution(stdin)\n\n\n\ndef"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_vertices = int(stdin.readline())\n    edges = []\n    for i in range(num_vertices - 1):\n        edges.append(list(map(int, stdin.readline().split())))\n    edges.sort(key=lambda e: e[2])\n    # for edge in edges:\n    #     print(edge)\n\n    # \u0443\u0431\u0440\u0430\u0442\u044c \u0441\u0430\u043c\u0443\u044e \u0434\u043b\u0438\u043d\u043d\u0443\u044e \u043f\u0430\u0440\u0443 \u0438\u0437 \u0432\u0441\u0435\u0445 \u043f\u0430\u0440\n    edges = sorted(edges, key=lambda e: e[2])\n    edges = sorted(edges, key=lambda e: (e[0], e[1]))\n    max_cost = 0\n    max_cost_indices = []\n    for edge in edges:\n        if edge[0] == edge[1]:\n            continue\n        if max_cost < edge[2]:\n            max_cost = edge[2]\n            max_cost_indices = [edge[0], edge[1]]\n        elif max_cost == edge[2] and max_cost_indices[0] > edge[0]:\n            max_cost_indices = [edge[0], edge[1]]\n    print(max_cost)\n    max_cost_edges = []\n    for edge in edges:\n        if edge[0] == max_cost_indices[0] and edge[1] == max_cost_indices[1]:\n            max_cost_edges.append(edge)\n    max_cost_edges.sort(key=lambda e: e[0])\n    max_cost_edges.sort(key=lambda e: e[1])\n\n    # for edge in max_cost_edges:\n    #     print(edge)\n\n    edges = list(filter(lambda edge: edge[0]!= max_cost_indices[0] and edge[1]!= max_cost_indices[1], edges))\n    for edge in max_cost_edges:\n        edges.append(edge)\n    # for edge in edges:\n    #     print(edge)\n\n    # print(max_cost_indices)\n    max_cost = 0\n    for i in range(len(edges) - 1):\n        if edges[i][2] >= max_cost:\n            max_cost = edges[i][2]\n        # print(edges[i][0], edges[i][1], edges[i][2])\n    print(max_cost)\n    for i in range(len(edges) - 1):\n        print(edges[i][0], edges[i][1], edges[i][2])\n    return ''\n\n\ndef"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    pairs = {}\n    for _ in range(n - 1):\n        a, b = list(map(int, stdin.split()))\n        if a not in pairs:\n            pairs[a] = set()\n        if b not in pairs:\n            pairs[b] = set()\n        pairs[a].add(b)\n        pairs[b].add(a)\n    \n    #print(pairs)\n    leaves = []\n    for k in pairs:\n        if len(pairs[k]) == 1:\n            leaves.append(k)\n            \n    #print(leaves)\n    \n    d = {}\n    while len(leaves) > 0:\n        a = leaves.pop()\n        for b in pairs[a]:\n            if b not in d:\n                d[b] = a\n            else:\n                d[b] = b\n                \n        del pairs[a]\n        for k in pairs:\n            pairs[k].discard(a)\n    \n    #print(pairs)\n    #print(d)\n    \n    ans = 0\n    for k in d:\n        ans += d[k]\n    \n    return str(ans)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.strip().split())\n        edges.append((a, b))\n    # d[i][j] -> i -> j\n    d = [[None] * n for _ in range(n)]\n    # x[i] = length from root to i\n    x = [None] * n\n    # y[i] = length from i to root\n    y = [None] * n\n    x[0] = 0\n    y[0] = 0\n    for i in range(1, n):\n        x[i] = x[i - 1] + 1\n        y[i] = x[i - 1] + 1\n    for i in range(1, n):\n        for j in range(i):\n            x1 = x[i]\n            y1 = y[j]\n            x2 = x[j]\n            y2 = y[i]\n            if x1 + y2 < x2 + y1:\n                d[i][j] = (x1 + y2, x2 + y1)\n                d[j][i] = (x1 + y2, x2 + y1)\n            elif x1 + y2 > x2 + y1:\n                d[i][j] = (x1 + y2, x2 + y1)\n                d[j][i] = (x1 + y2, x2 + y1)\n            else:\n                d[i][j] = (x1 + y2, x2 + y1)\n                d[j][i] = (x1 + y2, x2 + y1)\n    # d[i][j] -> i -> j\n    d = [[None] * n for _ in range(n)]\n    for a, b in edges:\n        d[a - 1][b - 1] = (1, 1)\n        d[b - 1][a - 1] = (1, 1)\n    # x[i] = length from root to i\n    x = [None] * n\n    # y[i] = length from i to root\n    y = [None] * n\n    x[0] = 0\n    y[0] = 0\n    for i in range(1, n):\n        x[i] = x[i - 1] + 1\n        y[i] = x[i - 1] + 1\n    for i in range(1, n):\n        for j in range(i):\n            x1 = x[i]\n            y1 = y[j]\n            x2 = x[j]\n            y2 = y[i]\n            if x1 + y2 < x2 + y1:\n                d[i][j] = (x1 + y2, x2 + y1)\n                d[j][i] = (x1 + y2, x2 + y1)\n            elif x1 + y2 > x2 + y1:\n                d[i][j] = (x1 + y2, x2 + y1)\n                d[j][i] = (x1 + y2, x2 + y1)\n            else:\n                d[i][j] = (x1 + y2, x2 + y1)\n                d[j][i] = (x1 + y2, x2 + y1)\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            a, b = d[i][j]\n            if a < b:\n                res = max(res, a)\n    for i in range(n):\n        for j in range(n):\n            a, b = d[i][j]\n            if a > b:\n                res = max(res, a)\n    return res\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    v, e = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    edges = sorted([(a, b, c) for a, b, c in edges], key=lambda x: x[2])\n    max_edge = edges[-1]\n    res = edges[0][2]\n\n    def root(a, b):\n        if a == b:\n            return a\n        for node in edges:\n            if node[0] == a and node[1] == b:\n                return root(node[0], node[1])\n            if node[1] == a and node[0] == b:\n                return root(node[0], node[1])\n        return a\n\n    for a, b, c in edges:\n        res = max(res, c)\n        root_a = root(a, b)\n        root_b = root(b, a)\n        if root_a!= root_b:\n            res = max(res, c)\n            edges.remove((a, b, c))\n            edges.append((root_a, root_b, c))\n            edges.sort(key=lambda x: x[2])\n    return res\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    matrix = [[0] * n for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split(' '))\n        matrix[a - 1][b - 1] = matrix[b - 1][a - 1] = 1\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[j][i] = max(dp[i][j - 1], dp[j - 1][i]) + matrix[i][j]\n    opt = []\n    while n > 1:\n        max_val = max(dp[0][n - 1], dp[n - 1][0])\n        i = 0\n        j = n - 1\n        while (i, j) not in opt:\n            if dp[i][j] == max_val:\n                opt.append((i + 1, j + 1))\n                break\n            i += 1\n            j -= 1\n        n -= 1\n        for i in range(n - 1):\n            if (i + 1, j + 1) in opt:\n                dp[i][j] = dp[j][i] = 0\n            else:\n                dp[i][j] = dp[j][i] = max(dp[i][j - 1], dp[j - 1][i]) + matrix[i][j]\n    print(max_val)\n    print(*opt[::-1])\n    return ''\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the longest simple path\n    \"\"\"\n    n = int(stdin.readline().strip())\n    tree = {}\n    for line in stdin:\n        line = line.strip().split(\" \")\n        a, b = int(line[0]), int(line[1])\n        if a not in tree:\n            tree[a] = b\n        else:\n            tree[a] = b\n        if b not in tree:\n            tree[b] = a\n    def dfs(root, path = [], longest = [], result = []):\n        if root not in tree:\n            return 0\n        path.append(root)\n        if len(path) == 2:\n            if tree[root] == path[0] and tree[root] == path[1]:\n                longest.append(path)\n                result.append(len(path))\n            return\n        dfs(tree[root], path, longest, result)\n        if root!= path[-2]:\n            path.pop()\n            dfs(tree[root], path, longest, result)\n        if root!= path[-2]:\n            path.pop()\n            dfs(tree[root], path, longest, result)\n    def find_longest(root):\n        max_length = 0\n        for path in dfs(root):\n            if len(path) > max_length:\n                max_length = len(path)\n        return max_length\n    return str(max([find_longest(i) for i in tree.keys()]))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, t = [int(x) for x in stdin.split()]\n    return str(sum([min(i, x) for i, x in enumerate(t, 1)]))\n    pass\n\ndef"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimal time for the targeted algorithm to get rid of categories with the same number of publications\"\"\"\n    pass\n    \n    \n    \ndef"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimal time necessary to get rid of categories with the same number of publications.\"\"\"\n    categories, a, t = [int(num) for num in stdin.split()]\n    min_time = 0\n    sorted_categories = sorted([(category, count) for category, count in enumerate(a)], key=lambda x: x[1])\n\n    for category, count in sorted_categories:\n        min_time += t[category]\n        sorted_categories[category] = 0\n\n    for index in range(len(sorted_categories)):\n        if sorted_categories[index]!= 0:\n            min_time += sorted_categories[index][1] * t[index]\n            sorted_categories[index] = 0\n\n    return str(min_time)\n\n\"\"\"\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    t = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(n):\n        if t[i] > a[i]:\n            res += t[i] - a[i]\n    return str(res)\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of seconds it takes to eliminate all categories with a\n    same size.\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n\n    return n\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingJWZHWK-G3M/\n    \"\"\"\n    n, a, b = [int(s) for s in stdin.split('\\n')]\n    t = [int(s) for s in stdin.split('\\n')[2:]]\n    print(sum(a) + sum(b) + sum(t))\n\n\ndef"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n    return str(sum(map(lambda x: x[1] - x[0], zip([0] + a, a + [max(a) + 1])[:-1])))\n\n\n\nimport math\n\ndef"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) solution\"\"\"\n    N = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().strip().split()]\n    t = [int(i) for i in stdin.readline().strip().split()]\n    c = Counter(a)\n    res = 0\n    for v in c.values():\n        res += v\n    for i in range(N):\n        res += c[i] * t[i]\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = stdin.readline().strip()\n    shift = arr.count('(')\n    arr_mod = []\n    for i in range(0, len(arr)):\n        if arr[i] == '(':\n            arr_mod.append(')')\n        else:\n            arr_mod.append('(')\n    arr_mod.extend(arr_mod[:shift])\n    arr_mod.extend(arr_mod[shift:shift * 2])\n    arr_mod.extend(arr_mod[shift * 2:])\n    return arr_mod\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\nimport functools\n\n\ndef"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    brackets = stdin\n    cycles = [\n        brackets[-1:] + brackets[:len(brackets) - 1],\n        brackets[-2:] + brackets[:len(brackets) - 2],\n        brackets[-3:] + brackets[:len(brackets) - 3],\n        brackets[-4:] + brackets[:len(brackets) - 4],\n        brackets[-5:] + brackets[:len(brackets) - 5],\n        brackets[-6:] + brackets[:len(brackets) - 6],\n        brackets[-7:] + brackets[:len(brackets) - 7],\n    ]\n    return max(map(evaluate, cycles))\n\n\ndef"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    arr = [0 for _ in range(n)]\n    if n == 0:\n        return 0\n    max_brackets = 0\n    for i in range(n):\n        bracket = 0\n        if string[i] == \"(\":\n            bracket += 1\n        else:\n            bracket -= 1\n        arr[i] = bracket\n        max_brackets = max(max_brackets, bracket)\n    for i in range(n):\n        bracket = 0\n        if string[i] == \"(\":\n            bracket += 1\n        else:\n            bracket -= 1\n        max_brackets = max(max_brackets, bracket)\n        if i < n - 1:\n            string = string[:i] + \"(\" + string[i + 1:]\n    return max_brackets\n\ns = solution(input())\nprint(s)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split('\\n')\n    arr = [x[1:-1] for x in arr]\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if arr[i - 1][j - 1] == '(':\n                if arr[i - 1][j - 2] == ')' or i == 1:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j - 2]\n            else:\n                if arr[i - 1][j - 2] == ')' or i == 1:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j - 2]\n\n    return dp[n][n]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in a string of brackets only and outputs the indices of two brackets to swap to maximize the string's beauty\n    \"\"\"\n    string_length = int(stdin.split(\"\\n\")[0])\n    string = stdin.split(\"\\n\")[1]\n    brackets = [i for i in range(string_length) if string[i] == \"(\"]\n    closings = [i for i in range(string_length) if string[i] == \")\"]\n    bracket_dict = dict()\n    for index in brackets:\n        if index not in bracket_dict:\n            bracket_dict[index] = [index]\n        else:\n            bracket_dict[index] = bracket_dict[index] + [index]\n    for index in closings:\n        if index not in bracket_dict:\n            bracket_dict[index] = [index]\n        else:\n            bracket_dict[index] = bracket_dict[index] + [index]\n    if len(bracket_dict) < 2:\n        return str(0)\n    elif len(bracket_dict) == 2:\n        bracket_dict[brackets[0]].sort()\n        bracket_dict[closings[0]].sort()\n        if bracket_dict[brackets[0]] < bracket_dict[closings[0]]:\n            return \" \".join([str(bracket_dict[brackets[0]][0]), str(closings[0])])\n        else:\n            return \" \".join([str(closings[0]), str(bracket_dict[closings[0]][0])])\n    for bracket in bracket_dict:\n        bracket_dict[bracket].sort()\n    for bracket in bracket_dict:\n        if bracket_dict[bracket][0]!= brackets[0]:\n            first_bracket = bracket_dict[bracket][0]\n            second_bracket = bracket_dict[bracket][1]\n            break\n    return \" \".join([str(first_bracket), str(second_bracket)])\n    \n    \n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n\n    n = int(stdin.split()[0])\n    brackets = stdin.split()[1]\n\n    # Calculate all cyclical shifts\n    shifts = []\n    for i in range(n):\n        shifts.append(brackets[i:] + brackets[:i])\n\n    # See if there is a shift that is a correct bracket sequence\n    shifts = list(set(shifts))\n    shifts.sort(key=len, reverse=True)\n\n    for shift in shifts:\n        correct = True\n        for i in range(1, n):\n            if not is_matching(shift[:i], shift[i:]):\n                correct = False\n                break\n\n        if correct:\n            return str(len(shift))\n\n    return '0'\n\n\ndef"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    s = lines[1]\n    c = Counter(s)\n    if c['(']!= c[')']:\n        return 0\n    s = s + s\n    dp = [[[-1 for i in range(n)] for j in range(n)] for k in range(n)]\n    for j in range(n):\n        dp[0][j][j] = 1\n    for i in range(1, n):\n        for j in range(n - i):\n            k = j + i\n            for l in range(j, k):\n                if l == j:\n                    dp[i][j][k] = dp[i - 1][l + 1][k] + 2 * c[')']\n                    continue\n                if l == k:\n                    dp[i][j][k] = dp[i - 1][j][l - 1] + 2 * c[')']\n                    continue\n                dp[i][j][k] = max(dp[i - 1][j][l - 1], dp[i - 1][l + 1][k]) + 2 * c[')']\n    return max(dp[n - 1][j][j] for j in range(n))\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"37\\n_Hello_Vasya(and_Petya)__bye_(and_OK)\")\n    '5 4'\n    \"\"\"\n    return str(len(max(stdin.replace(\"(\", \"\").replace(\")\", \"\").split(\" \"), key=len))) + \" \" + str(len(stdin.split(\" \")))\n\n\ndef"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_words(stdin: str) -> list[str]:\n        result = []\n        while stdin!= \"\":\n            if stdin[0] == \")\":\n                result.append(stdin.split(\"(\")[1].split(\")\")[0])\n                stdin = stdin.split(\")\")[1]\n            else:\n                result.append(stdin.split(\"(\")[0])\n                stdin = stdin.split(\"(\")[1]\n        return result\n    \n    stdin = stdin.split(\"(\")\n    length = len(stdin)\n    print(length)\n    answer = [0]\n    for x in range(1, length):\n        for y in range(x+1, length+1):\n            answer[0] += len(get_words(stdin[x])) - len(get_words(stdin[y-1]))\n    return str(max(answer)) + \" \" + str(min(answer))\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution.\n    \"\"\"\n    # don't return anything\n    # You should enter your solution here. Write the code for the logic of the solution.\n    # Find max length of word without parentheses\n    # Find number of words inside parentheses\n    stdin = stdin.split()\n    max_len = 0\n    inside = 0\n    for i in range(len(stdin)):\n        temp = stdin[i].strip('()')\n        if len(temp) > max_len:\n            max_len = len(temp)\n        if len(temp) > 0:\n            inside += 1\n    print(max_len, inside)\n    return\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    len_of_input = len(input)\n    opened_parenthesis = []\n    closed_parenthesis = []\n    \n    i = 0\n    while i < len_of_input:\n        if input[i] == '(' or input[i] == ')':\n            if input[i] == '(':\n                opened_parenthesis.append(i)\n            else:\n                closed_parenthesis.append(i)\n        i += 1\n    \n    opened_parenthesis_len = len(opened_parenthesis)\n    closed_parenthesis_len = len(closed_parenthesis)\n    \n    j = 0\n    max_len = 0\n    while j < closed_parenthesis_len:\n        k = opened_parenthesis[j]\n        opened_parenthesis_inside_p = opened_parenthesis[j+1:]\n        closed_parenthesis_inside_p = closed_parenthesis[j+1:]\n        opened_parenthesis_inside_p_len = len(opened_parenthesis_inside_p)\n        closed_parenthesis_inside_p_len = len(closed_parenthesis_inside_p)\n        i = 0\n        while i < opened_parenthesis_inside_p_len:\n            if opened_parenthesis_inside_p[i] > closed_parenthesis_inside_p[i]:\n                k = opened_parenthesis_inside_p[i]\n                break\n            i += 1\n        j_index = j\n        i = 0\n        while i < closed_parenthesis_inside_p_len:\n            if closed_parenthesis_inside_p[i] < k:\n                j_index = closed_parenthesis_inside_p[i]\n                break\n            i += 1\n        if j_index > j:\n            max_len = k - j\n            j = j_index\n        else:\n            j += 1\n    \n    return [max_len, opened_parenthesis_len - closed_parenthesis_len]\n\nprint(solution(input))\n\n\n\n\n\ndef"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    res = list()\n    stdin = stdin.replace(\"_\", \" \").replace(\"(\", \" \").replace(\")\", \" \")\n    print(stdin)\n    return stdin\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find longest word outside parentheses\n    :param stdin: input string\n    :return: string of length and count of words inside parentheses\n    \"\"\"\n    # find longest word\n    # find count of words inside parentheses\n    # return length and count\n    pass\n    return f\"{len(max(stdin.split('_')).split('('))} {len(stdin.count('('))}\"\n\n\ndef"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pars = stdin.replace(\"_\", \" \").replace(\"(\", \" \").replace(\")\", \" \").replace(\"  \", \" \").split(\" \")\n    pars = [p for p in pars if p]\n    out = []\n    opened = False\n    for p in pars:\n        if p == \"\":\n            continue\n        if p == \"(\" or p == \")\":\n            opened = not opened\n        elif p.isalpha():\n            if not opened:\n                out.append(p)\n    max_len = 0\n    max_count = 0\n    curr_count = 0\n    for o in out:\n        if o == \"\":\n            continue\n        if o[0] == \"(\":\n            curr_count += 1\n            if len(o) > max_len:\n                max_len = len(o)\n        else:\n            if curr_count > max_count:\n                max_count = curr_count\n            curr_count -= 1\n    return max_len, max_count\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return ''\n\n    # normalize input\n    stdin = stdin.replace('_','').replace('_','').replace('(','{').replace(')', '}').replace(' ', '').replace('{', '(').replace('}', ')').replace('[','').replace(']','')\n    # split into words\n    words = stdin.split(' ')\n    # build opening and closing pairs\n    pairs = build_pairs(words)\n    # split into groups\n    groups = group_by(pairs)\n    # return longest word with count\n    return longest_without_parentheses(groups)\n\ndef"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n    \"\"\"\n    def find_word(chars: str) -> list:\n        ret = []\n        word = \"\"\n        for ch in chars:\n            if ch in [\"(\", \")\", \"_\"]:\n                if word:\n                    ret.append(word)\n                    word = \"\"\n                ret.append(ch)\n            else:\n                word += ch\n        if word:\n            ret.append(word)\n        return ret\n\n    def is_word(chars: str) -> bool:\n        if not chars:\n            return False\n        if chars[0] in [\")\", \"(\"]:\n            return False\n        if chars[-1] in [\")\", \"(\"]:\n            return False\n        return True\n\n    def is_in_parentheses(chars: str) -> bool:\n        i = 0\n        while i < len(chars):\n            if chars[i] == \"(\":\n                if not is_word(chars[i + 1:]):\n                    return False\n                break\n            i += 1\n        return True\n\n    def is_in_parentheses_with_indexes(chars: str) -> bool:\n        indexes = []\n        i = 0\n        while i < len(chars):\n            if chars[i] == \"(\":\n                indexes.append(i)\n            elif chars[i] == \")\":\n                if not indexes:\n                    return False\n                indexes.pop()\n            i += 1\n        return not indexes\n\n    def is_valid(chars: str) -> bool:\n        if not chars:\n            return False\n        if not is_word(chars):\n            return False\n        if is_in_parentheses_with_indexes(chars):\n            return False\n        return True\n\n    words = find_word(stdin)\n    max_len = 0\n    max_len_words = []\n    inside_parentheses = 0\n    for word in words:\n        if not is_valid(word):\n            continue\n        word_len = len(word)\n        if word_len > max_len:\n            max_len = word_len\n            max_len_words = [word]\n        elif word_len == max_len:\n            max_len_words.append(word)\n        if is_in_parentheses(word):\n            inside_parentheses += 1\n\n    return f\"{max_len} {inside_parentheses}\"\n\n\ndef"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    p = 0\n    ans = 0\n    max = 0\n    for i in range(len(stdin)):\n        if stdin[i] == '(':\n            p += 1\n            if p > ans:\n                ans = p\n        if stdin[i] == ')':\n            p -= 1\n    print(ans, p)\n    return ''\n    '''\n    p = 0\n    ans = 0\n    max = 0\n    lst = []\n    for i in stdin:\n        if i == '(':\n            lst.append(i)\n        elif i == ')':\n            if lst:\n                lst.pop()\n            else:\n                p += 1\n                if p > ans:\n                    ans = p\n        else:\n            continue\n    print(ans, p)\n\n\ndef"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, b):\n        n = len(a)\n        m = len(b)\n        count = 0\n        for i in range(n):\n            if i + m <= n:\n                count += sum(a[i:i + m]) == sum(b)\n        return count % 998244353\n    return str(solve(*[int(i) for i in stdin.split('\\n')[1:]]))"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    return \"{}\\n\".format(pow(2, n, 998244353) - 1 - divmod(a.count(b[0]), n)[1])"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    b = list(map(int, stdin.split('\\n')[1].split(' ')))\n    sorted_b = sorted(b)\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            total += 1 if a[i:j + 1] == sorted_b else 0\n    return str(total % 1000000007)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n    \n    stdin = stdin.strip().split('\\n')\n    n, m = [int(i) for i in stdin[0].split(' ')]\n    a = [int(i) for i in stdin[1].split(' ')]\n    b = [int(i) for i in stdin[2].split(' ')]\n    \n    a.sort()\n    b.sort()\n    \n    i = 0\n    count = 0\n    for j in range(m):\n        while a[i] <= b[j]:\n            count += 1\n            i += 1\n    \n    return str(count % 998244353)\n    \n        "
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # \ubb38\uc790\uc5f4 \uc785\ub825\uc744 \ud1b5\ud574 \uc804\ub2ec\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc815\uc218\ub85c \ubcc0\ud658 \ud6c4 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n    a_string = stdin[0]\n    a_list = list(map(int, a_string.split(' ')))\n\n    # \ubb38\uc790\uc5f4 \uc785\ub825\uc744 \ud1b5\ud574 \uc804\ub2ec\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc815\uc218\ub85c \ubcc0\ud658 \ud6c4 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n    b_string = stdin[1]\n    b_list = list(map(int, b_string.split(' ')))\n\n    # \ub450 \ubc30\uc5f4\uc744 \ube44\uad50\ud574 \uc791\uc740 \uac12\uc744 \uc815\ub2f5\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n    a_sorted = sorted(a_list)\n    b_sorted = sorted(b_list)\n\n    # \uc791\uc740 \uac12\uc744 \uc815\ub2f5\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n    answer = len(list(set(a_list) & set(b_list)))\n\n    # \uc815\ub2f5\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\n    return str(answer % 998244353)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Number of ways to divide an array into m consecutive subarrays\n    \"\"\"\n    def partition(array, idx, part):\n        if idx == len(array):\n            partitions.append(part)\n            return\n        partition(array, idx+1, part)\n        part.append(array[idx])\n        partition(array, idx+1, part)\n        part.pop()\n    array = [int(x) for x in stdin.split('\\n')[1].split()]\n    partitions = []\n    partition(array, 0, [])\n    ans = 0\n    for partition in partitions:\n        ans += partition.count(partition[0])\n    print(ans % 998244353)\n    return ''"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n\n    return"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return n * k % 998244353\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'UNSOLVABLE'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(ans)\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if n == 1 or k <= 1:\n        return str(1)\n    return str((n * (n + 1) // 2) * k % 998244353)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the above problem.\n    \"\"\"\n    # Init counters\n    n, k = [int(x) for x in stdin.split()]\n    res = 1\n\n    # Get the number of the \"number of black and white tiles\"\n    for i in range(1, n + 1):\n        res *= i\n\n    # Modulo\n    res = res % 998244353\n\n    # Loop for the max value\n    for i in range(1, k + 1):\n        res *= (n - i + 1)\n\n    # Modulo\n    res = res % 998244353\n\n    return res\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  def col_row_1_1(n, k):\n    if n == 1:\n      return k\n    return col_row_1_1(n - 1, k + k * n)\n  \n  def col_row_1_2(n, k):\n    if n == 1:\n      return (k - k ** 2) * k\n    return col_row_1_2(n - 1, k - k ** 2) + (k - k ** 2) * k * (n - 1)\n  \n  def col_row_n_n(n, k):\n    if n == 1:\n      return (k - k ** 2) * k\n    return col_row_n_n(n - 1, k - k ** 2) + (k - k ** 2) * k * (n - 1)\n  \n  return (col_row_1_1(int(stdin[0]), 1) + col_row_1_2(int(stdin[0]), 1) + col_row_n_n(int(stdin[0]), 1)) % 998244353\n  "
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns, k = [int(x) for x in stdin.split(' ')]\n    \n    b = []\n    for i in range(rows):\n        row = [int(x) for x in stdin.split(' ')]\n        b.append(row)\n    \n    # This function returns True if it is possible to reach the end in one step and False otherwise\n    def possible(x, y):\n        return x >= 0 and x < rows and y >= 0 and y < columns and b[x][y] == 0\n    \n    def solve(x, y):\n        if x == rows - 1 and y == columns - 1:\n            return 1\n        else:\n            count = 0\n            if possible(x + 1, y):\n                count += solve(x + 1, y)\n            if possible(x + 1, y + 1):\n                count += solve(x + 1, y + 1)\n            return count\n    \n    return solve(0, 0) % 998244353\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    if k <= 1:\n        if n % 2 == 0:\n            res = 1\n        else:\n            res = 2\n    else:\n        if n % 2 == 0:\n            res += n * n * (n - 1)\n        else:\n            res += n * n * n - n * (n - 1)\n        for i in range(1, n):\n            if i % 2 == 0:\n                res += n * i * (i - 1)\n            else:\n                res += n * i * n\n    print(res % 1000000007)\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return ''.join(stdin.split())\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Function to return the solution for the max_satisfaction problem'''\n    # Get input from stdin\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    # Map of (t_i, d_i) to (idx, value)\n    data = map(lambda x: (int(x.split()[0]), int(x.split()[1])), lines[1:])\n    # Sort by d_i\n    data = list(data)\n    data.sort(key=lambda x: x[1])\n    # print(data)\n    # Map of idx to (t_i, d_i)\n    index_dict = dict()\n    for (idx, val) in data:\n        index_dict[idx] = val\n    # print(index_dict)\n    # Map of (d_i, count) to (d_i, val)\n    unique_dict = dict()\n    for idx, val in data:\n        if val not in unique_dict:\n            unique_dict[val] = 1\n        else:\n            unique_dict[val] += 1\n    # print(unique_dict)\n    # Get the highest value of (d_i, count)\n    max_count = max(unique_dict.values())\n    # print(max_count)\n    # Map of d_i to (count, d_i)\n    max_unique_dict = dict()\n    for key in unique_dict:\n        if unique_dict[key] == max_count:\n            max_unique_dict[key] = (unique_dict[key], key)\n    # print(max_unique_dict)\n    # Get the maximum of the unique values\n    max_unique_vals = max(max_unique_dict.values(), key=lambda x: x[0])[1]\n    # print(max_unique_vals)\n    # Get the sum of the d_i values in the top k values\n    satisfaction = sum(map(lambda x: x[1], max_unique_dict.values()))\n    # print(satisfaction)\n    # Get the sum of the d_i values\n    sum_d = sum(map(lambda x: x[1], data))\n    # print(sum_d)\n    # Get the sum of the base total deliciousness of the d_i values\n    sum_dd = 0\n    for idx, val in index_dict.items():\n        if val == max_unique_vals:\n            sum_dd += data[idx][1]\n    # print(sum_dd)\n    # Get the sum of the total deliciousness of the k d_i\n    sum_k = 0\n    for i in range(k):\n        sum_k += data[i][1]\n    # print(sum_k)\n    # Get the total sum of all the values\n    sum_all = sum_d + max_unique_vals * max_unique_vals\n    # print(sum_all)\n    # Return the max of the following\n    return max(satisfaction, sum_dd + sum_k, sum_all)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = []\n    for i in stdin.split('\\n'):\n        data.append(list(map(int, i.split())))\n    s = 0\n    for i in data:\n        k = i[0]\n        d = i[1]\n        x = d * d\n        s += d\n        for j in range(2, k + 1):\n            x *= j\n            s += x\n    return s\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    t, d = [], []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split('\\n')[_].split()]\n        t.append(a)\n        d.append(b)\n    s = [sum(d[:k])]\n    for i in range(k):\n        s.append(s[-1] + d[i] - t[i])\n    #  print(s)\n    res = s[-1]\n    for i in range(1, k):\n        tmp = s[i]\n        for j in range(k-i):\n            tmp += s[j] - t[j+i]\n        res = max(res, tmp)\n    return res"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    #"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    toppings = [None] * n\n    for i in range(n):\n        toppings[i] = [int(x) for x in stdin.split('\\n')[i + 1].split()]\n\n    maximum_satisfaction = -1\n    for i in range(n):\n        base_total_deliciousness = 0\n        variation = 1\n        for j in range(n):\n            if j == i:\n                continue\n            if toppings[j][0] == toppings[i][0]:\n                variation += 1\n            base_total_deliciousness += toppings[j][1]\n        maximum_satisfaction = max(maximum_satisfaction, base_total_deliciousness * variation)\n\n    return maximum_satisfaction"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # return max(i * j for i, j in zip(stdin[1::2], stdin[::2]))\n    # return reduce(lambda x, y: x * y, stdin[::2])\n    return reduce(operator.mul, map(int, stdin[::2]))"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"not implemented\"\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    finds the maximum number of sushi\n    \"\"\"\n    N, K = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    toppings = {}\n    for i in range(N):\n        toppings[i] = tuple([int(j) for j in stdin.split(\"\\n\")[i + 1].split(\" \")])\n    max_satisfaction = 0\n    for t in range(1, N + 1):\n        for s in range(1, N + 1):\n            if t == s:\n                continue\n            total_satisfaction = 0\n            for p in range(K):\n                if p not in s:\n                    total_satisfaction += toppings[t][0] * toppings[t][1]\n            for p in range(K):\n                if p not in t:\n                    total_satisfaction += toppings[s][0] * toppings[s][1]\n            total_satisfaction += toppings[t][0] * toppings[s][1]\n            total_satisfaction += toppings[s][0] * toppings[t][1]\n            if total_satisfaction > max_satisfaction:\n                max_satisfaction = total_satisfaction\n    return max_satisfaction\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing purposes only\n    # And it's using only for receiving arguments from Standard Input\n    # Be aware of that\n    # Check out other sample tests cases in sample_tests.py\n    # And paste your return value to the text field below\n    # Remove pass statement and paste your code there\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    x = []\n    y = []\n    for i in range(1, n+1):\n        string = lines[i]\n        x.append(int(string.split(\" \")[0]))\n        y.append(int(string.split(\" \")[1]))\n    dist = 0\n    for i in range(n):\n        d = (x[i]**2 + y[i]**2)**0.5\n        if d > dist:\n            dist = d\n    return str(dist)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: math.sqrt(x[0] ** 2 + x[1] ** 2), map(lambda x: (int(x), int(x)), stdin.split('\\n')[1:]))))"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible distance from the origin\"\"\"\n    n, *data = map(int, stdin.split())\n    x, y = map(int, data[:2])\n    max_dist = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            dist = (x - data[2 * i + 1]) ** 2 + (y - data[2 * i + 2]) ** 2\n            if dist > max_dist:\n                max_dist = dist\n    return str(max_dist **.5)"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')[1:]\n    N = int(lines[0])\n    engines = list(map(int, lines[1:]))\n    # First, find the maximum value of the distance from the origin.\n    # Using engines in any order, there are N! possible orders.\n    # For each of these orders, there is a different distance from the origin.\n    # Since the maximum value of the distance can be at most 10,\n    # the maximum value of the distance is a function of the order, f(n) = 10^(n^2),\n    # where n is the number of engines used.\n    # So, we want to find the maximum value of f(n), i.e. the maximum value of n^2.\n    # To find this value, we can use dynamic programming.\n    # We can create an array of size N^2 + 1, and initialize it to -1.\n    # Then, we can iterate over all possible orders, i.e. for each order, we iterate over all possible starting points,\n    # and find the maximum value from these starting points.\n    # We can do this in O(N^2) time.\n    # Then, we look at the array and find the maximum value, i.e. the maximum value of n^2.\n    # This is the maximum value of the order, i.e. the maximum value of n.\n    # We can do this in O(N^2) time.\n    # So, the maximum value of n is found in O(N^2) time.\n    # This is the number of engines used, i.e. the order.\n    distances = [-1] * (N**2 + 1)\n    distances[0] = 0\n    for n in range(1, N**2 + 1):\n        for i in range(n):\n            if distances[n - i - 1]!= -1:\n                # We can do this in O(1) time.\n                # We know the distance from the origin is distances[n - i - 1],\n                # so the distance from the origin is distances[n - 1] - (distances[n - i - 1] - distances[n - i - 1]) + 1,\n                # which is distances[n - i - 1] - distances[n - i - 1] + 1.\n                # So, the distance from the origin is equal to the previous distance from the origin,\n                # and this distance is the maximum distance from the origin.\n                distances[n] = distances[n - i - 1] - (distances[n - i - 1] - distances[n - i - 1] + 1)\n                # So, we can stop, because we have found a value for n\n                break\n        # Otherwise, we have not found a value for n,\n        # and we need to continue searching\n        if distances[n] == -1:\n            for i in range(n):\n                if distances[n - i - 1]!= -1:\n                    distances[n] = distances[n - i - 1] - (distances[n - i - 1] - distances[n - i - 1] + 1)\n                    break\n    # The maximum value of n is found in O(N^2) time.\n    # Now, we need to find the maximum distance from the origin, which we will do in O(N) time.\n    # We know that the maximum distance from the origin can be at most 10.\n    # We will do this in O(N) time.\n    # The maximum distance from the origin can be at most 10,\n    # so the maximum distance from the origin is 10 - (distances[N] - distances[N]) + 1,\n    # which is 10 - (distances[N] - distances[N]) + 1.\n    # This is the distance from the origin.\n    # We can do this in O(N) time.\n    distance = 10 - (distances[N] - distances[N]) + 1\n    print(distance)\n    return '{0:.10f}'.format(distance ** 0.5)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the maximum distance E869120 can travel from the origin.\n\n    Args:\n        stdin (str): Standard Input, containing a single line with the number of engines E869120 has.\n\n    Returns:\n        str: The maximum distance E869120 can travel from the origin.\n    \"\"\"\n    # Compute the maximum distance E869120 can travel from the origin.\n    #\n    # INPUT:\n    #     STDIN   -> num_engines\n    #\n    # PROCESS:\n    #     1. Obtain num_engines\n    #     2. Obtain the maximum distance E869120 can travel from the origin.\n    #\n    # OUTPUT:\n    #     STDOUT  -> maximum_distance\n\n    # Check if the number of engines is valid.\n    if not (1 <= num_engines <= 100):\n        return 'Invalid input'\n\n    # Get the input from STDIN.\n    engines = []\n    for engine_input in stdin.split('\\n')[:-1]:\n        # Check if engine_input is empty.\n        if engine_input == '':\n            continue\n\n        # Obtain the engine's coordinates.\n        try:\n            engine_coordinates = [int(x) for x in engine_input.split(' ')[1:]]\n        except:\n            return 'Invalid input'\n\n        # Check if engine_coordinates is a list of length 2, where\n        # the first element is an integer and the second element is an integer.\n        if len(engine_coordinates)!= 2 or not (isinstance(engine_coordinates[0], int) and isinstance(engine_coordinates[1], int)):\n            return 'Invalid input'\n\n        engines.append(engine_coordinates)\n\n    # Obtain the maximum distance E869120 can travel from the origin.\n    maximum_distance = compute_maximum_distance(engines)\n    return f'{maximum_distance:.10f}'\n\n\ndef"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    coordinates = lines[1:]\n    max_distance = 0\n    for i in range(n):\n        x, y = map(int, coordinates[i].split())\n        distance = math.sqrt(x**2+y**2)\n        if distance > max_distance:\n            max_distance = distance\n    return str(max_distance)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split(\"\\n\")\n    N = int(data[0])\n    x = []\n    y = []\n    for i in range(1, len(data)):\n        x.append(int(data[i].split(\" \")[0]))\n        y.append(int(data[i].split(\" \")[1]))\n\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_x2 = sum(x**2)\n    sum_y2 = sum(y**2)\n\n    if N == 1:\n        result = math.sqrt(sum_x2 + sum_y2)\n    else:\n        result = math.sqrt((sum_x2 + sum_y2) / N)\n    return str(result)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution\"\"\"\n    hint = stdin\n    code = [0]*len(hint)\n    possible = []\n    for i in range(10):\n        code[0] = i\n        for j in range(10):\n            code[1] = j\n            if is_match(hint, code):\n                possible.append(code.copy())\n    return len(possible)\n    \ndef"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1?AA')\n    100\n    >>> solution('?JGJ9')\n    81\n    >>> solution('1?AAAAAA')\n    42999\n    >>> solution('?111111')\n    85899\n    \"\"\"\n    import collections\n    import string\n    M = collections.Counter(stdin)\n    N = collections.Counter(stdin.replace('?', '0'))\n    for i in stdin:\n        if i == '?':\n            pass\n        else:\n            print(int(i))\n\nsolution(stdin)"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin[:10]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n    \ndef"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of possible codes matching the hint in the input.\n    >>> solution('?JGJ9')\n    81\n    >>> solution('2?JGJ9')\n    100\n    >>> solution('?AA')\n    10\n    \"\"\"\n\n    # get the hint\n    hint = stdin\n\n    # get the number of digits in the hint\n    digits = len(hint)\n\n    # get the possible characters to be in each digit\n    characters = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n\n    # initialize the counter to zero\n    number_of_codes = 0\n\n    # create the list of possible code variants\n    possible_code_variants = list()\n\n    # create the list of the possible characters in the code\n    possible_code_variants_chars = list()\n\n    # make all the possible variants of the code\n    for i in range(1, digits + 1):\n        for j in range(len(characters)):\n            possible_code_variants.append(str(i) * i + characters[j])\n    possible_code_variants_chars.append(characters)\n\n    # count the number of variants\n    for i in possible_code_variants:\n        # check if the code is possible\n        # for example, the hint '?AA' can't be satisfied for any of the variants of code '12A2A1'\n        if all(i.count(j) == hint.count(j) for j in characters):\n            # check if the code is possible to be satisfied\n            # for example, hint '1?A' can't be satisfied for code '1A'\n            # and also for code '12A'\n            if all(i[:m] == hint[:m] and i[m:]!= hint[m:] for m in range(digits)):\n                # if the code is possible to be satisfied, count the number of variants\n                number_of_codes += 1\n\n    # initialize the counter to zero\n    number_of_possible_codes = 0\n\n    # make all the possible variants of the code\n    for i in possible_code_variants_chars:\n        # count the number of variants\n        for j in range(len(characters) ** (digits - 1)):\n            number_of_possible_codes += 1\n\n    # count the number of possible codes\n    number_of_codes += number_of_possible_codes\n\n    # print the number of possible codes\n    print(number_of_codes)\n    return number_of_codes"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    assert isinstance(stdin, str)\n    assert len(stdin) == 1\n    stdin = stdin[0]\n    assert stdin.isdigit()\n    return str(len(set(stdin[1:])))\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    s = s.replace('?', '0')\n    def check(s, i, j):\n        return s[i:j+1] in code\n\n    def count(s, i, j):\n        if i == j:\n            if s[i] == '0':\n                return 1\n            return 0\n        if s[i] == '?':\n            res = 0\n            for ch in range(1, 10):\n                res += count(s, i+1, j) if ch == int(s[i+1]) else 0\n            return res\n        res = 0\n        if check(s, i, j):\n            res += count(s, i, j-1)\n        res += count(s, i+1, j)\n        return res\n\n    code = set()\n    for ch in s:\n        if ch == '?':\n            continue\n        code.add(ch)\n    for i in range(n-1):\n        if s[i] == '?':\n            for ch in '0123456789':\n                if ch not in code:\n                    code.add(ch)\n                    break\n    code = sorted(list(code))\n    res = 0\n    for i in range(len(code)):\n        for j in range(len(code)):\n            if j > i:\n                res += count(s, i, j)\n    return res\n\n\ndef"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution should return the string that represents the lexicographically minimal permutation\n    '''\n    pass"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split(' ')))\n    res = list(range(1, n+1))\n    for i in l:\n        res[i-1] = 0\n    return f'{sum(res)}\\n' +''.join([str(i) for i in res if i!= 0])\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numberOfElements = int(stdin[0])\n    numbers = [int(x) for x in stdin[1].split()]\n    index = 0\n    while index < numberOfElements:\n        if numbers[index] == index+1:\n            numbers.pop(index)\n            numberOfElements -= 1\n        else:\n            index += 1\n    if len(numbers) == 0:\n        return 0\n    numbers = sorted(numbers)\n    for i in range(0, len(numbers)):\n        if numbers[i]!= i+1:\n            return i+1\n    return len(numbers)+1\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, *arr = list(map(int, stdin.split('\\n')[0].split()))\n    arr.sort()\n    arr = [(i, arr.count(i)) for i in set(arr)]\n    arr = sorted(arr, key=lambda x: x[1])\n    for i in range(n):\n        if arr[i][1] == 1:\n            arr[i] = (arr[i][0], 0)\n        else:\n            arr[i] = (arr[i][0], arr[i][1] - 1)\n    arr = sorted(arr, key=lambda x: x[0])\n    return''.join(map(str, [x[1] for x in arr]))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    array = list(map(int, stdin.split()))\n    if len(set(array)) == length:\n        return '0\\n' +''.join(map(str, array))\n    array.sort()\n    changed = []\n    for i in range(length - 1):\n        if array[i] == array[i + 1]:\n            changed.append(array[i])\n    if len(changed) == 0:\n        return '0\\n' +''.join(map(str, array))\n    else:\n        return str(len(changed)) + '\\n' +''.join(map(str, array))\nprint(solution(input()))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    result = ''\n    while len(set(a))!= n:\n        result += str(a.index(min(a)) + 1) +''\n        a[a.index(min(a))] = max(a) + 1\n    return result.rstrip()\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = [i for i in range(1, n + 1) if i not in a]\n    print(min(a.index(i) for i in b))\n    print(*sorted(b, key=lambda x: a.index(x)))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a permutation of the input that is lexicographically minimal.\"\"\"\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n    return \" \".join([str(x) for x in arr])\n\ndef"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hours, read_hours = [int(x) for x in stdin.split()]\n    times = [int(x) for x in stdin.split()]\n    times.sort()\n    \n    read_times = {}\n    for i in range(hours):\n        read_times[i] = False\n    \n    light = read_times[0]\n    for i in range(read_hours):\n        if i + 1 not in read_times:\n            light = False\n        else:\n            light = max(light, times[i+1])\n            read_times[i+1] = light\n        \n    print(light)\n    \n    for i, read in read_times.items():\n        if read:\n            print(i+1, end=' ')\n    print()\n\n\ndef"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = map(int, stdin.split(' '))\n    arr = sorted(arr)\n    s = set()\n    for i in range(k):\n        if len(s) == n:\n            break\n        l, r = 0, len(arr) - 1\n        while l < r:\n            m = l + r + 1 >> 1\n            if arr[m] == arr[i]:\n                r = m - 1\n                continue\n            elif arr[m] < arr[i]:\n                l = m\n                continue\n            else:\n                r = m - 1\n        s.add(arr[i])\n    return''.join(map(str, sorted(s)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    return str(min(lst[i] for i in range(k) if lst[i] > lst[i - 1])) + '\\n' +''.join(map(str, [i + 1 for i in range(k) if lst[i] > lst[i - 1]]))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(min(a[i] for i in range(k) if i + 1 in range(n)))\n    print(' '.join(map(str, (i + 1 for i in range(n) if i + 1 in range(k) and a[i] == min(a[i] for i in range(k) if i + 1 in range(n)))))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if s >= k:\n        return str(k)\n    else:\n        ans = 0\n        while k > 0 and s >= 0:\n            ans += 1\n            s -= a[ans - 1]\n            k -= 1\n        return str(ans)"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    arr = [int(s) for s in stdin.split()]\n    arr.sort()\n    arr = arr[k-1::-1]\n    for i in range(k):\n        print(arr[i], end=' ')\n    return ''\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # input\n    k, n = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    # compute\n    a.sort()\n    b = []\n    for i in range(0, k):\n        b.append(str(a[i]))\n\n    # output\n    print(' '.join(b))\n    print(' '.join(b))\n    return 0"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    # return \"\"\n\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    \n    if n == 2:\n        return 0\n    \n    cache = [[0, 0, 0] for i in range(n+1)]\n    cache[1][0] = 0\n    cache[1][1] = 1\n    cache[1][2] = 2\n    \n    for i in range(2, n+1):\n        cache[i][0] = cache[i-1][1] + i + max(cache[i-1][2], cache[i-1][0])\n        cache[i][1] = cache[i-1][0] + i + max(cache[i-1][2], cache[i-1][1])\n        cache[i][2] = cache[i-1][0] + cache[i-1][1] + i + max(cache[i-1][2], cache[i-1][1])\n    \n    return max(cache[n])\n\n\n\"\"\""
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return ''\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    n = int(stdin)\n    return str(sum(max(abs(x), abs(x + 1)) for x in range(n)))\n\n\ndef"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(0, int(stdin)))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return 0\n    s = 0\n    while n!= 1:\n        s += n if n % 2!= 0 else n // 2\n        n = n // -2 if n % 2 == 0 else n * 2\n    return s\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum possible score that can be achieved\"\"\"\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # set constants\n    CANDIDATES = stdin[0:1]\n    CITIES = stdin[2:]\n\n    # create a list of votes for each city\n    city_votes = [list(map(int, city.split())) for city in CITIES]\n    # create a list of lists with the votes for each candidate in each city\n    candidate_votes = [[candidate_vote[idx] for candidate_vote in city_votes] for idx in range(int(CANDIDATES))]\n\n    # define the maximum number of votes for each city\n    max_votes = [max(candidate_votes[idx]) for idx in range(int(CANDIDATES))]\n    # define the index of the winner\n    winner_idx = max_votes.index(max(max_votes)) + 1\n\n    return winner_idx\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(m):\n        a.append(list(map(int, stdin.split()[i*n:(i+1)*n])))\n    \n    for i in range(m):\n        # \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u044f \u0441 1\n        a[i] = list(map(lambda x: (x, i), a[i]))\n    \n    # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0433\u043e\u043b\u043e\u0441\u043e\u0432\n    a.sort(key=lambda x: x[0])\n    \n    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u043e\u0440\u043e\u043a\n    k = len(set([i[1] for i in a]))\n    \n    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u043b\u043e\u0441\u043e\u0432 \u0432 \u0441\u0442\u0440\u0430\u043d\u0435\n    wins = sum([i[0] for i in a])\n    \n    # \u0441\u0442\u0440\u0430\u043d\u0430, \u0433\u0434\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u043e\u0440\n    win = (wins // k) + (wins % k > 0)\n    \n    for i in range(n):\n        if a[i][0] == win:\n            return i + 1\n    \n    return -1\n    "
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    l = [list(map(int, stdin.split(\" \"))) for _ in range(m)]\n    w = [[l[i][j] for j in range(n)] for i in range(m)]\n\n    for i in range(m):\n        w[i] = sorted(w[i], reverse=True)\n        \n    a = [0] * n\n    for i in range(m):\n        for j in range(n):\n            a[j] = max(a[j], w[i][j])\n\n    for i in range(n):\n        if a[i] == 0:\n            print(i+1)\n            return"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N, M = map(int, stdin.split(' '))\n    V = []\n    for _ in range(M):\n        V.append(list(map(int, stdin.split(' '))))\n\n    # print(N, M)\n    # print(V)\n\n    # declare variables\n    result = 1\n    # print(V)\n    # print(N)\n    max_votes = -1\n    max_votes_city = -1\n    max_votes_candidate = -1\n    for i in range(N):\n        votes = 0\n        for j in range(M):\n            votes += V[j][i]\n        if votes > max_votes:\n            max_votes = votes\n            max_votes_city = i + 1\n            max_votes_candidate = 1\n        elif votes == max_votes:\n            if i + 1 < max_votes_candidate:\n                max_votes_candidate = i + 1\n    # print(max_votes_candidate, max_votes_city)\n    return max_votes_candidate\n\ndef"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    votes = [[0] * n for _ in range(m)]\n    for i in range(m):\n        votes[i] = list(map(int, stdin.split(' ')))\n\n    def get_winner(vote_list: list):\n        max_votes = 0\n        candidate_1 = 0\n        candidate_2 = 0\n        for vote in vote_list:\n            if vote > max_votes:\n                max_votes = vote\n                if candidate_2 == 0:\n                    candidate_1 = 1\n                    candidate_2 = 2\n                else:\n                    candidate_1 = candidate_2\n                    candidate_2 = 1\n            elif vote == max_votes:\n                if candidate_2 == 0:\n                    candidate_1 = 1\n                    candidate_2 = 2\n                else:\n                    candidate_1 = candidate_2\n                    candidate_2 = 1\n        return candidate_2\n\n    def get_city_winner(votes: list):\n        max_votes = 0\n        city_winner = 0\n        for i in range(m):\n            if votes[i] > max_votes:\n                max_votes = votes[i]\n                city_winner = i + 1\n            elif votes[i] == max_votes:\n                city_winner = i + 1\n        return city_winner\n\n    winner = get_winner(votes[0])\n    for i in range(1, m):\n        winner = get_winner([votes[j][i] for j in range(m)])\n    winner = get_city_winner([votes[j][i] for j in range(m)])\n    print(winner)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = [int(x) for x in stdin.split()]\n    candidates = []\n    for _ in range(m):\n        candidates.append([int(x) for x in stdin.split()[:n]])\n    \n    votes = [sum(x) for x in candidates]\n    max_votes = max(votes)\n    max_votes_count = votes.count(max_votes)\n    max_votes_candidate_index = []\n    \n    for i, candidate_votes in enumerate(candidates):\n        if max_votes == sum(candidate_votes):\n            max_votes_candidate_index.append(i)\n    \n    if max_votes_count == 1:\n        print(max_votes_candidate_index[0] + 1)\n    else:\n        max_votes_city_index = []\n        for i, candidate_votes in enumerate(candidates):\n            if candidate_votes.count(max_votes) == max_votes_count:\n                max_votes_city_index.append(i)\n        \n        max_votes_city_index = set(max_votes_city_index)\n        if len(max_votes_city_index) == 1:\n            print(candidates[next(iter(max_votes_city_index))].index(max_votes) + 1)\n        else:\n            votes = [0 for _ in range(m)]\n            for index in max_votes_city_index:\n                for j, candidate_votes in enumerate(candidates):\n                    votes[j] += candidate_votes[index]\n            \n            for i, candidate_votes in enumerate(candidates):\n                if votes[i] == max(votes):\n                    print(candidate_votes.index(max(candidate_votes)) + 1)\n                    return\n\nsolution(stdin)"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    pref = [[int(x) for x in stdin.split()] for _ in range(m)]\n    while len(pref) > 1:\n        tot = []\n        for pref_row in pref:\n            tot.append(sum(pref_row))\n        ind = tot.index(max(tot))\n        print(tot)\n        print(ind)\n        for pref_row in pref:\n            pref_row.pop(ind)\n        pref.pop(ind)\n    return str(pref[0].index(max(pref[0])) + 1)\n\n\ndef"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return None"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    correct_solutions = list(map(int, stdin.split(' ')))\n    wrong_solutions = list(map(int, stdin.split(' ')))\n\n    solutions = sorted(correct_solutions + wrong_solutions)\n\n    if n == 1:\n        return str(solutions[0])\n\n    left, right = 1, max(correct_solutions)\n    while left <= right:\n        mid = (left + right) // 2\n\n        total_correct = 0\n        for correct_solution in correct_solutions:\n            total_correct += correct_solution / mid\n\n        total_wrong = 0\n        for wrong_solution in wrong_solutions:\n            total_wrong += wrong_solution / mid\n\n        if total_correct >= m and total_wrong < n:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return str(left)\n\nprint(solution(input()))"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Input\n    n, m = [int(i) for i in stdin.split()]\n    numbers_a = [int(i) for i in stdin.split()]\n    numbers_b = [int(i) for i in stdin.split()]\n    # Sort for a and b\n    numbers_a.sort()\n    numbers_b.sort()\n    # Input\n    max_time = max(numbers_a[-1], numbers_b[-1])\n    # Output\n    print(max_time) if max_time < 100 else print(-1)\n    return max_time\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    l.extend([int(x) for x in stdin.split()])\n    l.sort()\n    t = l[0] + 0.5\n    for i in range(1, len(l) - 1):\n        if l[i] + 0.5 < t:\n            t = l[i] + 0.5\n    \n    return t if t <= 100 else -1"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split('\\n')\n    correct_solutions_t = list(map(int, stdin[1].split()))\n    wrong_solutions_t = list(map(int, stdin[2].split()))\n    correct_solutions_t.sort()\n    wrong_solutions_t.sort()\n    if len(correct_solutions_t) > 1:\n        print(-1)\n        return\n    i, j = 0, 0\n    t = 0\n    t = correct_solutions_t[0]\n    t = min(t, wrong_solutions_t[-1])\n    t = min(t, wrong_solutions_t[0] + correct_solutions_t[0])\n    while i < len(correct_solutions_t) and j < len(wrong_solutions_t):\n        t = min(t, correct_solutions_t[i] + wrong_solutions_t[j])\n        if i < len(correct_solutions_t) - 1 and correct_solutions_t[i] < correct_solutions_t[i+1]:\n            i += 1\n        else:\n            break\n        if j < len(wrong_solutions_t) - 1 and wrong_solutions_t[j] < wrong_solutions_t[j+1]:\n            j += 1\n        else:\n            break\n    if t > correct_solutions_t[0]:\n        print(-1)\n    else:\n        print(t)\n\n\n\ndef"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    correct_solution_times = [int(i) for i in stdin.split()]\n    wrong_solution_times = [int(i) for i in stdin.split()]\n    print(correct_solution_times)\n    print(wrong_solution_times)\n    correct_solution_times.sort()\n    wrong_solution_times.sort()\n    print(correct_solution_times)\n    print(wrong_solution_times)\n\n    return \"3\"\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split(' ')]\n    S = [int(i) for i in stdin.split(' ')]\n    W = [int(i) for i in stdin.split(' ')]\n\n    \n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    correct = stdin[2]\n    wrong = stdin[3]\n    correct = sorted([int(x) for x in correct.split()])\n    wrong = sorted([int(x) for x in wrong.split()])\n    TL = 0\n    for i in range(n):\n        TL += correct[i]\n    TL2 = 0\n    for i in range(m):\n        TL2 += wrong[i]\n    TL += 1\n    TL3 = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if correct[i] + correct[j] > TL:\n                TL3 += 1\n    if TL2 <= TL:\n        TL += 1\n        TL3 += 1\n    if TL3 > n:\n        return '-1'\n    if TL3 == 0:\n        TL = min(TL, TL2)\n        return str(TL)\n    TL2 = min(TL2, TL)\n    return str(min(TL, TL2))\nprint(solution(input()))\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n\n    if n == m == 1:\n        return -1\n    if n == 1:\n        if a[0] > 0:\n            return a[0]\n        else:\n            return b[0]\n    if m == 1:\n        if b[0] > 0:\n            return b[0]\n        else:\n            return a[0]\n    \n    # a = sorted(a)\n    # b = sorted(b)\n    # if b[0] < a[0]:\n    #     return b[0]\n    # if b[0] > a[0]:\n    #     return a[0]\n    # for i in range(1, len(a)):\n    #     if a[i] < a[i-1]:\n    #         return a[i-1]\n    # for i in range(1, len(b)):\n    #     if b[i] < b[i-1]:\n    #         return b[i-1]\n    # return -1\n    a.sort()\n    b.sort()\n    return a[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    correct = [int(i) for i in stdin.split()]\n    m = int(stdin.split()[1])\n    wrong = [int(i) for i in stdin.split()]\n    correct.sort()\n    wrong.sort()\n    smallest = max(correct[0], wrong[0])\n    for i in range(1, len(correct)):\n        if correct[i] < smallest:\n            smallest = correct[i]\n        if smallest + 1 < wrong[i]:\n            return str(smallest + 1)\n    return \"-1\""
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '2017'"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    while True:\n        y += 1\n        if y % 400 == 0 or y % 4 == 0 and y % 100!= 0:\n            break\n    return str(y)\n\"\"\"\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    if y % 4 == 0:\n        if y % 100 == 0:\n            if y % 400 == 0:\n                y += 1\n            else:\n                y += 2\n        else:\n            y += 2\n    else:\n        y += 1\n\n    return str(y)\n\nprint(solution(input()))\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    y = int(stdin)\n    while True:\n        y += 1\n        if (y % 4 == 0 and y % 100!= 0) or y % 400 == 0:\n            print(y)\n            return y\n\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n\n    d1 = 0\n    for i in range(1,13):\n        d1 = d1 + (i+1) * 7\n\n    d2 = 0\n    for i in range(1,32):\n        d2 = d2 + (i+1)\n\n    d3 = 0\n    for i in range(1,29):\n        d3 = d3 + i\n\n    d4 = 0\n    for i in range(1,7):\n        d4 = d4 + i\n\n    d1_next = d1 + 7 * 12\n    d2_next = d2 + 7 * 31\n    d3_next = d3 + 7 * 28\n    d4_next = d4 + 7 * 6\n\n    if y % 4 == 0 and y % 100!= 0 or y % 400 == 0:\n        d1_next = d1 + 7 * 12\n        d2_next = d2 + 7 * 31\n        d3_next = d3 + 7 * 29\n        d4_next = d4 + 7 * 6\n\n    d = 0\n    for i in range(1, 13):\n        d = d + (i + 1) * 7\n    for i in range(1, 32):\n        d = d + (i + 1)\n    for i in range(1, 29):\n        d = d + i\n    for i in range(1, 7):\n        d = d + i\n    \n    if d == d1_next:\n        return str(y+1)\n    elif d == d2_next:\n        return str(y+2)\n    elif d == d3_next:\n        return str(y+3)\n    elif d == d4_next:\n        return str(y+4)\n    else:\n        return str(y+1)\n\nsolution(\"2016\")\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    if year % 400 == 0:\n        year += 1\n    elif year % 100 == 0:\n        year += 0\n    elif year % 4 == 0:\n        year += 1\n    return str(year)\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # +++\u0432\u0430\u0448 \u043a\u043e\u0434+++\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom datetime import datetime as dt\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(calendar.calendar(int(stdin))[0][0][0])\n\n\nimport calendar\n\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    date1, date2 = stdin.split('\\n')\n    date1 = date1.split(':')\n    date2 = date2.split(':')\n    days = 0\n    for i in range(3):\n        days += int(date1[i])*365\n        days += int(date1[i])//4\n        if int(date1[i])%4!= 0:\n            days += int(date1[i])//100\n        else:\n            days += int(date1[i])//400\n    for i in range(3):\n        days += int(date2[i])*365\n        days += int(date2[i])//4\n        if int(date2[i])%4!= 0:\n            days += int(date2[i])//100\n        else:\n            days += int(date2[i])//400\n    return days - int(date1[3])*86400\n\nprint(solution(input()))"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split('\\n')\n    (y1, m1, d1) = map(int, a.split('-'))\n    (y2, m2, d2) = map(int, b.split('-'))\n    \n    d1_m1 = d1\n    if m1 > 2:\n        d1_m1 = 30\n        m1 -= 2\n    elif m1 == 2:\n        d1_m1 = 28\n        if y1 % 4 == 0:\n            if y1 % 100 == 0:\n                if y1 % 400 == 0:\n                    d1_m1 = 29\n            else:\n                d1_m1 = 29\n        m1 -= 1\n    d2_m2 = d2\n    if m2 > 2:\n        d2_m2 = 30\n        m2 -= 2\n    elif m2 == 2:\n        d2_m2 = 28\n        if y2 % 4 == 0:\n            if y2 % 100 == 0:\n                if y2 % 400 == 0:\n                    d2_m2 = 29\n            else:\n                d2_m2 = 29\n        m2 -= 1\n    return str(d2_m2 - d1_m1 + 1)\n\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l1 = stdin.split()\n    d1 = l1[0]\n    d2 = l1[1]\n    x = [int(i) for i in d1.split(':')]\n    y = [int(i) for i in d2.split(':')]\n    day1 = datetime.datetime(x[0], x[1], x[2])\n    day2 = datetime.datetime(y[0], y[1], y[2])\n    day3 = day2 - day1\n    print(day3.days)"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_array = stdin.split('\\n')\n    year_1 = int(input_array[0].split(':')[0])\n    month_1 = int(input_array[0].split(':')[1])\n    day_1 = int(input_array[0].split(':')[2])\n    year_2 = int(input_array[1].split(':')[0])\n    month_2 = int(input_array[1].split(':')[1])\n    day_2 = int(input_array[1].split(':')[2])\n    return str(calendar.monthrange(year_2, month_2)[1] - calendar.monthrange(year_1, month_1)[1])\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_date, second_date = stdin.split('\\n')\n    first_date = first_date.split(':')\n    second_date = second_date.split(':')\n    days_between_dates = 0\n    for index in range(len(first_date)):\n        days_between_dates += int(first_date[index])\n        days_between_dates -= int(second_date[index])\n    return days_between_dates\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1900:01:01\\n2038:12:31\")\n    '50768'\n    >>> solution(\"1996:03:09\\n1991:11:12\")\n    '1579'\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    date1 = stdin[0].split(\":\")\n    date2 = stdin[1].split(\":\")\n\n    if datetime.datetime(*map(int, date1)) > datetime.datetime(*map(int, date2)):\n        return 0\n    \n    return datetime.datetime(*map(int, date2)) - datetime.datetime(*map(int, date1))\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here\n    \"\"\"\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1900:01:01\\n2038:12:31\")\n    50768\n    >>> solution(\"1996:03:09\\n1991:11:12\")\n    1579\n    >>> solution(\"1996:02:30\\n2038:02:29\")\n    -4\n    >>> solution(\"1996:02:30\\n1900:02:29\")\n    426895\n    \"\"\"\n\n    def is_leap_year(year: int) -> bool:\n        \"\"\"\n        >>> is_leap_year(2000)\n        False\n        >>> is_leap_year(1900)\n        False\n        >>> is_leap_year(2016)\n        True\n        \"\"\"\n\n        return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\n    def is_valid_date(year: int, month: int, day: int) -> bool:\n        \"\"\"\n        >>> is_valid_date(1900, 2, 29)\n        False\n        >>> is_valid_date(2016, 2, 29)\n        True\n        >>> is_valid_date(2016, 1, 31)\n        False\n        \"\"\"\n        return 1 <= month <= 12 and 1 <= day <= 31 and \\\n            (month == 2 and day < 29) or (month == 2 and day == 29 and not is_leap_year(year)) or (1 <= month <= 12 and 1 <= day <= 31)\n\n    def days_in_months(year: int, month: int) -> int:\n        \"\"\"\n        >>> days_in_months(1900, 2)\n        28\n        >>> days_in_months(2016, 2)\n        29\n        \"\"\"\n        if month == 2:\n            return 29 if is_leap_year(year) else 28\n        if month in (1, 3, 5, 7, 8, 10, 12):\n            return 31\n        return 30\n\n    def add_years(year: int, month: int, day: int, years: int) -> tuple:\n        \"\"\"\n        >>> add_years(1900, 2, 29, 1)\n        (1901, 3, 1)\n        >>> add_years(2016, 2, 29, 1)\n        (2016, 3, 1)\n        \"\"\"\n        return year + years, month, day\n\n    dates = stdin.split()\n\n    # no leap year\n    # no adjacent leap year\n    # no adjacent century leap year\n    # only leaps in even century years\n    # leap year must be on the 29th February\n    leap_date = 0\n    century_leap_date = 0\n    adjacents_leap_date = 0\n    years = 0\n    while dates:\n        date = dates.pop(0)\n        year, month, day = map(int, date.split(\":\"))\n\n        if is_valid_date(year, month, day):\n            leap_date = (year, month, day)\n            years += 1\n            continue\n\n        if leap_date and is_valid_date(*leap_date):\n            leap_date = (add_years(*leap_date, years)[0], leap_date[1], leap_date[2])\n            years += 1\n            continue\n\n        if century_leap_date and is_valid_date(*century_leap_date):\n            century_leap_date = (add_years(*century_leap_date, years)[0], century_leap_date[1], century_leap_date[2])\n            years += 1\n            continue\n\n        if adjacents_leap_date and is_valid_date(*adjacents_leap_date):\n            adjacents_leap_date = (add_years(*adjacents_leap_date, years)[0], adjacents_leap_date[1], adjacents_leap_date[2])\n            years += 1\n            continue\n\n        # no leap year\n        # no adjacent leap year\n        # no adjacent century leap year\n        # only leaps in even century years\n        # leap year must be on the 29th February\n        adjacents_leap_date = (year, month, day)\n        years = 1\n        while not is_valid_date(*adjacents_leap_date):\n            adjacents_leap_date = (adjacents_leap_date[0], adjacents_leap_date[1] - 1, days_in_months(adjacents_leap_date[0], adjacents_leap_date[1]))\n            years += 1\n            if adjacents_leap_date[1] == 1:\n                adjacents_leap_date = (adjacents_leap_date[0], 12, days_in_months(adjacents_leap_date[0], 12))\n                years += 1\n        continue\n\n    return years * 366 + leap_date[2] + century_leap_date[2] - adjacents_leap_date[2]\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that contains a solution\"\"\"\n    stdin = stdin.split(\"\\n\")\n    y1, m1, d1 = [int(i) for i in stdin[0].split(\":\")]\n    y2, m2, d2 = [int(i) for i in stdin[1].split(\":\")]\n    days = 0\n    #print(d1, d2)\n    if y1 < y2:\n        #print(y1, y2)\n        for year in range(y1, y2):\n            if year%4 == 0 and year%100!= 0 or year%400 == 0:\n                days += 366\n                #print(\"y\", year)\n            else:\n                days += 365\n    if y1 > y2:\n        for year in range(y1, y2, -1):\n            if year%4 == 0 and year%100!= 0 or year%400 == 0:\n                days += 366\n                #print(\"y\", year)\n            else:\n                days += 365\n    #print(y1, y2, days)\n    if m1 < m2:\n        #print(m1, m2)\n        for month in range(m1, m2):\n            if month == 2:\n                if (y1%4 == 0 and y1%100!= 0 or y1%400 == 0) and y1!= 2000:\n                    days += 29\n                else:\n                    days += 28\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n                days += 31\n            elif month in [4, 6, 9, 11]:\n                days += 30\n    if m1 > m2:\n        for month in range(m1, m2, -1):\n            if month == 2:\n                if (y1%4 == 0 and y1%100!= 0 or y1%400 == 0) and y1!= 2000:\n                    days += 29\n                else:\n                    days += 28\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n                days += 31\n            elif month in [4, 6, 9, 11]:\n                days += 30\n    #print(y1, y2, m1, m2, days)\n    if d1 < d2:\n        for day in range(d1, d2):\n            if day == 2 and m1%2!= 0:\n                days += 1\n            elif day in [1, 3, 5, 7, 8, 10, 12]:\n                days += 1\n            elif day in [4, 6, 9, 11]:\n                days += 0\n    if d1 > d2:\n        for day in range(d1, d2, -1):\n            if day == 2 and m1%2!= 0:\n                days += 1\n            elif day in [1, 3, 5, 7, 8, 10, 12]:\n                days += 1\n            elif day in [4, 6, 9, 11]:\n                days += 0\n    return str(days)"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    #print(n, m)\n\n    edges = [[int(i) for i in line.split()] for line in stdin.split('\\n') if line]\n    #print(edges)\n\n    dist = [1e9] * n\n    dist[0] = 0\n    for e in edges:\n        dist[e[1]] = e[0]\n    #print(dist)\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        dist[v] = min(dist[v], dist[u] + 1)\n    #print(dist)\n\n    for v in range(1, n):\n        if dist[v] == 1e9:\n            dist[v] = -1\n    #print(dist)\n    \n    return min([i for i in range(n) if dist[i] == -1])\n\nprint(solution('7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7'))"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    roads = [[int(j) for j in lines[i].split()] for i in range(1, n)]\n    attackers = [int(i) for i in lines[-1].split()]\n    # print(roads)\n    # print(attackers)\n\n    root = {i: i for i in range(1, n + 1)}\n\n    def find(x):\n        if root[x]!= x:\n            root[x] = find(root[x])\n        return root[x]\n\n    def union(x, y):\n        x, y = find(x), find(y)\n        if x!= y:\n            root[y] = x\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            union(roads[i][0], roads[j][0])\n            union(roads[i][1], roads[j][1])\n\n    # print(root)\n\n    ans = set()\n    for attacker in attackers:\n        root[find(attacker)] = find(1)\n\n        for i in roads:\n            if find(i[0]) == find(1):\n                ans.add(i[1])\n            if find(i[1]) == find(1):\n                ans.add(i[0])\n\n    # print(ans)\n    return str(min(ans))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for _ in range(n - 1):\n        roads.append(map(int, stdin.split()))\n\n    attacks = list(map(int, stdin.split()))\n\n    def bfs(start: int, end: int) -> int:\n        q = deque()\n        q.append((start, 0))\n        visited = [False] * n\n        visited[start] = True\n        while q:\n            v, t = q.popleft()\n            if v == end:\n                return t\n            for u in roads:\n                if u[0] == v and not visited[u[1]]:\n                    q.append((u[1], t + 1))\n                    visited[u[1]] = True\n\n    return min(\n        map(\n            lambda c: bfs(c, attacks[c]),\n            attacks,\n        )\n    )\n\"\"\"\n\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import List\n\nfrom utils import timing\n\n\nclass Graph:\n    def __init__(self, n: int):\n        self.n = n\n        self.adj = [[] for _ in range(n)]\n        self.indegree = [0] * n\n        self.dist = [-1] * n\n        self.group = [-1] * n\n        self.low = [-1] * n\n        self.dfsnum = -1\n        self.pre = [-1] * n\n        self.groupnum = 0\n\n    def add_edge(self, x: int, y: int):\n        self.adj[x].append(y)\n        self.indegree[y] += 1\n\n    def get_group_by_dfs(self):\n        self.dfsnum = 0\n        self.groupnum = 0\n        for i in range(self.n):\n            if self.group[i] == -1:\n                self.dfs(i)\n                self.groupnum += 1\n        return self.groupnum\n\n    def dfs(self, s: int):\n        self.dfsnum += 1\n        self.group[s] = self.dfsnum\n        self.low[s] = self.dfsnum\n        for i in self.adj[s]:\n            if self.group[i] == -1:\n                self.dfs(i)\n                self.low[s] = min(self.low[s], self.low[i])\n            elif i!= self.pre[i]:\n                self.low[s] = min(self.low[s], self.group[i])\n        if self.dfsnum == self.low[s]:\n            while True:\n                x = self.pre[s]\n                self.group[x] = self.group[s]\n                if x == s:\n                    break\n                s = x\n            self.dfsnum -= 1\n\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 2\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 3 5\n   ... 3 6\n   ... 3 7\n   ... 2 7\n   ... ''')\n    '2'\n    >>> solution('''6 4\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 4 5\n   ... 4 6\n   ... 2 4 5 6\n   ... ''')\n    '2'\n    \"\"\"\n   ...\n\n\"\"\"\nhttps://codeforces.com/gym/109788/problem/B\n\"\"\"\n\nfrom collections import defaultdict, deque\n\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from_, to_ = map(int, stdin.split())\n    graph = {i: set() for i in range(1, from_+1)}\n    for edge in stdin.split(\"\\n\")[:-1]:\n        u, v = map(int, edge.split())\n        graph[u].add(v)\n        graph[v].add(u)\n\n    def find_paths(graph: Dict, start: int, goal: int):\n        distances = [float('inf')] * len(graph)\n        distances[start] = 0\n        visited = [False] * len(graph)\n        path = [start]\n        while path:\n            new_path = []\n            for v in path:\n                visited[v] = True\n                for u in graph[v]:\n                    if not visited[u]:\n                        distances[u] = min(distances[u], distances[v] + 1)\n                        new_path.append(u)\n            path = new_path\n        return distances[goal]\n\n    to = -1\n    path_length = float('inf')\n    for i in range(1, to_+1):\n        if from_ - 1 in graph[i]:\n            to = i\n            path_length = min(path_length, find_paths(graph, from_, i) + 1)\n    return str(to) + \"\\n\" + str(path_length)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\n1 2\\n1 3\\n1 4\\n3 5\\n3 6\\n3 7\\n2 7\")\n    '2'\n    >>> solution(\"7 4\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n2 4 5 6\")\n    '2'\n    \"\"\"\n    num_cities = read_a_int(stdin)\n    num_attacked = read_a_int(stdin)\n    cities_with_roads = set()\n    cities_with_attacked = set()\n    for _ in range(num_cities - 1):\n        u, v = read_ints(stdin)\n        cities_with_roads.add(u)\n        cities_with_roads.add(v)\n        cities_with_attacked.add(u)\n        cities_with_attacked.add(v)\n    attacked = read_ints(stdin)\n    attacked_cities = {attacked[i] for i in range(num_attacked)}\n    not_attacked_cities = cities_with_roads - attacked_cities\n    for city in not_attacked_cities:\n        attacked_cities.add(city)\n    attacked_cities = sorted(attacked_cities)\n    attacked_cities = [city for city in attacked_cities if city not in cities_with_roads]\n    num_attacked_cities = len(attacked_cities)\n    assert num_attacked_cities == num_attacked\n    first_city = attacked_cities[0]\n    city_with_most_roads = attacked_cities[num_attacked_cities - 1]\n    kron = num_cities - 1 - num_attacked_cities\n    return str(first_city)\n\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u043e \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438\u0437-\u0437\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u0434\u0435.\n    '''\n    n, m = map(int, stdin.split('\\n')[0].split())\n    roads = {(i, j) for i, j in\n             map(lambda x: map(int, x.split()), stdin.split('\\n')[1:-1])}\n    attacks = list(map(int, stdin.split('\\n')[-1].split()))\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0432\u0441\u0435 \u043a\u043b\u044e\u0447\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u0441\u0435\u043c \u0440\u0435\u0431\u0440\u0430\u043c \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u043c \u043f\u0443\u0442\u044f\u043c,\n    # \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0432\u0441\u0435\u043c\u0438 \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438.\n    valid_roads = defaultdict(set)\n    for road in roads:\n        valid_roads[road[0]].add(road[1])\n        valid_roads[road[1]].add(road[0])\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0432\u0441\u0435 \u043a\u043b\u044e\u0447\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u0441\u0435\u043c \u0440\u0435\u0431\u0440\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438.\n    roads_with_two_cities = defaultdict(set)\n    for i, j in roads:\n        roads_with_two_cities[i].add(j)\n        roads_with_two_cities[j].add(i)\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0432\u0441\u0435 \u043a\u043b\u044e\u0447\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u0441\u0435\u043c \u0440\u0435\u0431\u0440\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438.\n    valid_roads_with_two_cities = defaultdict(set)\n    for i, j in roads:\n        valid_roads_with_two_cities[i].add(j)\n        valid_roads_with_two_cities[j].add(i)\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0432\u0441\u0435 \u043a\u043b\u044e\u0447\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u0441\u0435\u043c \u0440\u0435\u0431\u0440\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438.\n    roads_with_three_cities = defaultdict(set)\n    for i, j in roads:\n        roads_with_three_cities[i].add(j)\n        roads_with_three_cities[j].add(i)\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0432\u0441\u0435 \u043a\u043b\u044e\u0447\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u0441\u0435\u043c \u0440\u0435\u0431\u0440\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438.\n    valid_roads_with_three_cities = defaultdict(set)\n    for i, j in roads:\n        valid_roads_with_three_cities[i].add(j)\n        valid_roads_with_three_cities[j].add(i)\n\n    min_time = float('inf')\n\n    # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 valid_roads.\n    for city in valid_roads.keys():\n\n        # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a\u0438\u043c\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0440\u0435\u0431\u0440\u0430\u043c\u0438 \u0432\u0441\u0435 \u043f\u0443\u0442\u0438 \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430 city \u0434\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432 valid_roads.keys().\n        # \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430.\n        roads_from_city = {road for road in valid_roads[city] if road in valid_roads}\n        valid_roads_from_city = valid_roads[city] & roads_from_city\n\n        # \u0415\u0441\u043b\u0438 \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430 city \u043c"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if n > 2 * 10 ** 5 or x > 2 * 10 ** 5:\n        return -1\n    l = [int(i) for i in stdin.split(\"\\n\")[:-1]]\n    a = []\n    b = []\n    for i in range(n):\n        a.append(l[i][0])\n        b.append(l[i][1])\n    a.sort()\n    b.sort()\n    min_cost = 10 ** 9\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > b[j]:\n                min_cost = min(min_cost, b[j] - a[i] + 1)\n            if a[i] < b[j]:\n                min_cost = min(min_cost, b[j] - a[i] + 1)\n    if min_cost == 10 ** 9:\n        return -1\n    return min_cost\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str()\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split(\" \")]\n    t = [0]\n    for l, r, c in sorted([[int(x) for x in stdin.split(\" \")] for _ in range(n)], key=lambda x: x[1]):\n        t.append(t[-1] + c + (r - l))\n    if t[-1] <= x:\n        return \"impossible\"\n    t = t[:-1]\n    q = [(0, x)]\n    for i, t in enumerate(t):\n        for c in range(q[-1][0] + 1, t):\n            if c < len(q) and q[c][1] > t:\n                q.append((c, t))\n        if len(q) > 2:\n            return \"impossible\"\n        if len(q) == 2 and q[1][1] - q[0][1] < x:\n            return \"impossible\"\n        if len(q) == 2 and q[1][1] - q[0][1] == x:\n            return f\"{q[0][0] + 1} {q[1][0] + 1}\"\n        q = q[1:]\n    return \"impossible\"\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split('\\n')[0]\n    first_line = first_line.split(' ')\n    n = int(first_line[0])\n    x = int(first_line[1])\n    k = n // 2\n    vouchers = list()\n    for i in range(1, n + 1):\n        second_line = stdin.split('\\n')[i]\n        second_line = second_line.split(' ')\n        first = int(second_line[0])\n        second = int(second_line[1])\n        cost = int(second_line[2])\n        vouchers.append((first, second, cost))\n    # vouchers.sort(key=lambda x: (x[2], x[1]))\n    vouchers.sort(key=lambda x: (x[0], x[2]))\n    # vouchers.sort(key=lambda x: x[1])\n    left = 0\n    right = n\n    total = 0\n    while left < right:\n        first = vouchers[left][0]\n        second = vouchers[right][1]\n        if second >= first:\n            right -= 1\n            total += vouchers[right][2]\n        elif first >= second:\n            left += 1\n            total += vouchers[left][2]\n        else:\n            break\n    if (x - total) % 2 == 0:\n        return total\n    else:\n        return -1\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split(' ')[0])\n    x = int(lines[0].split(' ')[1])\n    vouchers = []\n    for i in range(1, n + 1):\n        l, r, cost = map(int, lines[i].split(' '))\n        vouchers.append((l, r, cost))\n    vouchers = sorted(vouchers, key=lambda v: (v[2], v[1] - v[0] + 1))\n\n    vouchers_left = vouchers[:]\n    vouchers_right = vouchers[:]\n    vouchers_total = vouchers[:]\n    vouchers_min = [(l, r, cost) for l, r, cost in vouchers]\n    vouchers_min.sort(key=lambda v: v[2])\n    total = 0\n    min_cost = vouchers_min[0][2]\n    i, j = 0, 0\n    while len(vouchers_left) > 2 and len(vouchers_right) > 2:\n        if vouchers_min[i][1] < vouchers_min[j][0] or vouchers_min[j][1] < vouchers_min[i][0]:\n            vouchers_total.append(vouchers_left.pop(0))\n            vouchers_total.append(vouchers_right.pop(0))\n        elif vouchers_min[i][2] < vouchers_min[j][2]:\n            vouchers_min.pop(i)\n            vouchers_right.pop(j)\n            j = 0\n            vouchers_total.append(vouchers_left.pop(0))\n            vouchers_total.append(vouchers_right.pop(0))\n            min_cost = min(min_cost, vouchers_min[0][2])\n            i = 0\n            j = 0\n        else:\n            vouchers_left.pop(0)\n            vouchers_total.append(vouchers_left.pop(0))\n            i = 0\n            j = 0\n            min_cost = min(min_cost, vouchers_min[0][2])\n\n    if len(vouchers_left) < 2 or len(vouchers_right) < 2:\n        return str(max(0, x - 1))\n    total = 0\n    for voucher in vouchers_total:\n        total += (voucher[1] - voucher[0] + 1)\n    return str(total + min_cost)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split(\" \")]\n    lst = [tuple(map(int, x.split(\" \"))) for x in stdin.split(\"\\n\")[:-1]]\n    lst.sort(key = lambda x: x[0])\n    dp = [float('inf') for i in range(x + 1)]\n    dp[0] = 0\n    for l, r, c in lst:\n        for d in range(l, x + 1):\n            dp[d] = min(dp[d], dp[d - c] + r - l + 1)\n    if dp[x] == float('inf'):\n        return -1\n    return dp[x]\n\"\"\"\n\nn, x = [int(x) for x in input().split(\" \")]\nlst = [tuple(map(int, input().split(\" \"))) for i in range(n)]\nlst.sort(key = lambda x: x[0])\ndp = [float('inf') for i in range(x + 1)]\ndp[0] = 0\nfor l, r, c in lst:\n    for d in range(l, x + 1):\n        dp[d] = min(dp[d], dp[d - c] + r - l + 1)\nprint(dp[-1] if dp[-1]!= float('inf') else -1)"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split())))\n    arr = sorted(arr, key=lambda x: x[0])\n    for i in range(n):\n        arr[i].append(arr[i][0] - arr[i][1] + 1)\n    arr = sorted(arr, key=lambda x: x[3])\n    for i in range(n):\n        arr[i].append(arr[i][1] - arr[i][0] + 1)\n    total = 0\n    for i in range(n):\n        if total + arr[i][2] > x:\n            continue\n        total += arr[i][2]\n        if total + arr[i][4] > x:\n            continue\n        total += arr[i][4]\n        if total <= x:\n            return total\n    return \"-\" + 1\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    N, X = map(int, stdin.split('\\n')[:2])\n    vouchers = [tuple(map(int, stdin.split('\\n')[i + 2].split())) for i in range(N)]\n    V = N\n    while V > 1:\n        v = vouchers.pop(0)\n        if any(max(v[0], l) < min(v[1], r) or max(v[1], l) < min(v[0], r) for l, r, _ in vouchers):\n            vouchers.append(v)\n        else:\n            V -= 1\n\n    return '%i' % min(sum(c for l, r, c in vouchers if l <= day <= r), X)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\n   ... '4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4'\n   ... )\n    5\n    >>> solution(\n   ... '3 2\\n4 6 3\\n2 4 1\\n3 5 4'\n   ... )\n    -1\n    >>> solution(\n   ... '5 7\\n1 2 5\\n2 4 4\\n3 4 2\\n4 5 3\\n5 6 1'\n   ... )\n    10\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if len(stdin) % 2 == 0:\n            if stdin[0] == stdin[len(stdin)-1]:\n                print(stdin[0:len(stdin)-1])\n            else:\n                print(\"NA\")\n        else:\n            if stdin[0] == stdin[len(stdin)-1]:\n                print(stdin[0:len(stdin)-1])\n            else:\n                print(\"NA\")\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'NA'\n\n------END-------\n\n'''\n\ndef"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = ''\n    for i in s:\n        t += i\n    if t == t[::-1]:\n        return 'NA'\n    for i in range(len(t)):\n        t = t[:i] + t[i+1:]\n        if t == t[::-1]:\n            return t\n    return t"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns a string that can be made palindrome.\n    \"\"\"\n    ans = 'NA'\n    return ans"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"NA\"\n    \n    \n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return ''"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n'''\n\n\ndef"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) % 2!= 0:\n        return \"NA\"\n    s_list = [stdin[i] for i in range(len(stdin))]\n    for i in range(len(s_list)):\n        new_s_list = list(s_list)\n        new_s_list.insert(i, s_list[i])\n        if \"\".join(new_s_list) == \"\".join(new_s_list)[::-1]:\n            return \"\".join(new_s_list)\n    return \"NA\""
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    a, b = min(a, b), max(a, b)\n    n = int(stdin)\n    return (n - a + 1) + (n - b + 1)\n\"\"\"\ndef"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(sum((i + 1) * i for i in range(1, min(a, b) + 1)))\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a == b:\n        return \"0\"\n    return \"1\""
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(min(a, b))\n    return \"\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n'))\n    return str(a + b + 1)\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    if a > b:\n        print(a + b)\n    else:\n        print(a + b - 1)\nsolution('3 4')\nsolution('101 99')\nsolution('5 10')"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a + b - abs(a - b))\n\n\ndef"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\nimport decimal\ndecimal.getcontext().rounding = decimal.ROUND_FLOOR\n\ndef"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    return str(int(stdin.split('\\n')[0]))\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    import sys\n    sys.setrecursionlimit(10 ** 6)\n    def search(cap, loot):\n        nonlocal MAX\n        for i in range(len(loot)):\n            if loot[i] <= cap:\n                loot_copy = loot[:]\n                loot_copy.pop(i)\n                search(cap - loot[i], loot_copy)\n    n = int(stdin.readline())\n    for i in range(n):\n        MAX = 0\n        p, f = map(int, stdin.readline().split())\n        cnt_s, cnt_w = map(int, stdin.readline().split())\n        s, w = map(int, stdin.readline().split())\n        if cnt_s <= 2 * f:\n            MAX = cnt_s * s + cnt_w * w\n            search(p, [cnt_s * s, cnt_w * w])\n        else:\n            MAX = cnt_s * s + cnt_w * w\n            search(p, [cnt_s * s, cnt_w * w])\n            search(f, [cnt_s * s, cnt_w * w])\n        print(MAX)\n\n\nsolution(\"\")"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'how the fuck did you get here?'\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 33 27\n   ... 6 10\n   ... 5 6\n   ... 100 200\n   ... 10 10\n   ... 5 5\n   ... 1 19\n   ... 1 3\n   ... 19 5''')\n    11\n    \"\"\"\n    return ''\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n        \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0431\u0440\u0430\u0442\u044c, \u0441\u043e\u0431\u0438\u0440\u0430\u044f\u0441\u044c \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e\n        \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 $p$ \u0435\u0434\u0438\u043d\u0438\u0446 \u0438\u0437 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0435\u043c\u0443 \u0441\u0432\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e $f$ \u0435\u0434\u0438\u043d\u0438\u0446\n        \u0441\u0432\u043e\u0438\u0445 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432, \u0441\u043e\u0431\u0440\u0430\u0432\u0448\u0438\u0445\n        \u0438\u0437 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044f $p$ \u0435\u0434\u0438\u043d\u0438\u0446, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u044f \u0438\u0445 \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0447\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443.\n\n        \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n        \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e $t$ - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n        \u0414\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 $t$ \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0447\u0438\u0441\u043b\u0430 $p$ \u0438 $f$.\n        \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 $p$ \u0438 $f$ - \u0432\u0430\u0448\u0435\u0433\u043e \u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430, \u0430 \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 $cnt_s$ \u0438 $cnt_w$\n        - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043a\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0441\u0442\u0435\u0439, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n        \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0434\u0432\u0443\u043c\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438\n        \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438, \u043e\u0434\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u0438\u043d\u044b.\n\n        \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n        \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0431\u0440\u0430\u0442\u044c, \u0441\u043e\u0431\u0438\u0440\u0430\u044f\u0441\u044c \u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e\n        \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 $p$ \u0435\u0434\u0438\u043d\u0438\u0446 \u0438\u0437 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0435\u043c\u0443 \u0441\u0432\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e $f$ \u0435\u0434\u0438\u043d\u0438\u0446\n        \u0441\u0432\u043e\u0438\u0445 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432, \u0441\u043e\u0431\u0440\u0430\u0432\u0448\u0438\u0445\n        \u0438\u0437 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430, \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044f $p$ \u0435\u0434\u0438\u043d\u0438\u0446.\n\n        \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434:"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # import stdin\n    # input = stdin.readline\n    from collections import deque\n    T = int(stdin.readline())\n    for i in range(T):\n        p, f, cnt_s, cnt_w, *weight = [int(x) for x in stdin.readline().split()]\n        weight = deque(weight)\n        weight.popleft()\n        cnt_w = deque(cnt_w)\n        cnt_w.popleft()\n        weight = deque([[i, w] for i, w in enumerate(weight)])\n        weight.popleft()\n        cnt_w = deque(cnt_w)\n        cnt_w.popleft()\n        res = 0\n        while len(weight)!= 0:\n            while len(cnt_w)!= 0 and weight[0][1] > cnt_w[0]:\n                res += weight[0][0]\n                cnt_w.popleft()\n                weight.popleft()\n            if len(weight) == 0:\n                break\n            if weight[0][1] > cnt_s:\n                res += cnt_s\n                weight.popleft()\n                cnt_w.popleft()\n            else:\n                res += weight[0][1]\n                cnt_s -= weight[0][1]\n                weight.popleft()\n        print(res)\n    return ''\n\n\ndef"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    http://codeforces.com/contest/1382/submission/13851778\n    '''\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        capacity, follower_capacity = list(map(int, stdin.readline().split()))\n        cnt_s, cnt_w = list(map(int, stdin.readline().split()))\n        weights = [int(w) for w in stdin.readline().split()]\n        weights.sort()\n        total_weight = 0\n        follower_weight = 0\n        weapons = 0\n        for w in weights:\n            total_weight += w\n            if follower_weight + w <= follower_capacity:\n                follower_weight += w\n            else:\n                total_weight -= w\n                weapons += 1\n                break\n        print(weapons)"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # print(stdin)\n    first = ['Caldwell', 'Bonfield', 'Comstock', 'Gilpin', 'Granville', 'Hinsdale', 'Hocking', 'Holmes', 'Houghton',\n             'Jarvis', 'Keenes', 'Kleiner', 'Liskey', 'Logan', 'McGee', 'Moody', 'Padilla', 'Peacock', 'Pike', 'Ramsay',\n             'Roosevelt', 'Rose', 'Saunders', 'Seaton', 'Seward', 'Shannon', 'Slater', 'Tilley', 'Townsend', 'Turner',\n             'Walsh', 'Walsh', 'Weber']\n    second = ['Adams', 'Arthur', 'Barry', 'Beaver', 'Blair', 'Booth', 'Bowie', 'Boyd', 'Boyle', 'Breen', 'Briscoe',\n              'Brooks', 'Brown', 'Bryan', 'Burgess', 'Burke', 'Butler', 'Campbell', 'Cannon', 'Casey', 'Chadwick',\n              'Cherry', 'Clark', 'Clayton', 'Cleveland', 'Columbus', 'Conley', 'Conner', 'Cooke', 'Cox', 'Crawford',\n              'Crittenden', 'Cross', 'Daniels', 'Dawson', 'Dayton', 'Decker', 'Dennis', 'Diaz', 'Duffy', 'Eaton',\n              'Edwards', 'Elliott', 'Elliot', 'English', 'Estill', 'Evans', 'Fannin', 'Farley', 'Farrell', 'Faulkner',\n              'Fay', 'Fenton', 'Ferguson', 'Figueroa', 'Fink', 'Finley', 'Fisher', 'Flanagan', 'Fletcher', 'Ford',\n              'Foster', 'Fowler', 'Fox', 'Franklin', 'Fulton', 'Gaines', 'Gaines', 'Gallagher', 'Galloway', 'Garfield',\n              'Gibson', 'Giles', 'Gillespie', 'Gilliam', 'Grady', 'Greene', 'Grundy', 'Guthrie', 'Hale', 'Hall',\n              'Hamilton', 'Hammond', 'Hancock', 'Hardin', 'Hardy', 'Harding', 'Hardy', 'Harlan', 'Harrison', 'Hart',\n              'Harvey', 'Hess', 'Hogan', 'Holcomb', 'Hoover', 'Horton', 'Hudson', 'Hunter', 'Hutchinson', 'Irwin',\n              'Jackson', 'Jefferson', 'Jennings', 'Johnston', 'Jones', 'Kane', 'Kearny', 'Keith', 'Key', 'Kirk',\n              'Knight', 'Kohls', 'Konopelski', 'Lambert', 'LaPorte', 'Lawrence', 'Lawson', 'Leach', 'Leblanc', 'Lincoln',\n              'Logan', 'Lyon', 'Mack', 'Macon', 'Madison', 'Marion', 'Marion', 'Martin', 'Mason', 'Mcdonough', 'Mccoy',\n              'Mcpherson', 'Meade', 'Menifee', 'Mercer', 'Meyer', 'Miami', 'Monroe', 'Montgomery', 'Morgan', 'Morris',\n              'Motley', 'Nacogdoches', 'Navarro', 'Newton', 'Nolan', 'Nueces', 'Ochiltree', 'Oldham', 'Owen', 'Panola',\n              'Parker', 'Parmer', 'Pecos', 'Polk', 'Potter', 'Presidio', 'Rains', 'Rains', 'Randall', 'Reagan', 'Real',\n              'Red River', 'Reeves', 'Refugio', 'Roberts', 'Robertson', 'Rockwall', 'Runnels', 'Rusk', 'Sabin',\n              'San Augustine', 'San Jacinto', 'San Patricio', 'San Saba', 'Schleicher', 'Scurry', 'Shackelford',\n              'Shelby', 'Sherman', 'Smith', 'Somervell', 'Sutton', 'Starr', 'Stephens', 'Sterling', 'Stonewall',\n              'Sutton', 'Swisher', 'Tarrant', 'Taylor', 'Terrell', 'Terry', 'Throckmorton', 'Titus', 'Tom Green',\n              'Travis', 'Trinity', 'Tyler', 'Upshur', 'Upton', 'Uvalde', 'Val Verde', 'Van Zandt', 'Victoria',\n              'Walker', 'Waller', 'Ward', 'Washington', 'Webb', 'Wharton', 'Wheeler', 'Wichita', 'Wilbarger', 'Williamson',\n              'Wilson', 'Winkler', 'Wise', 'Wood']\n\n    if int(stdin) <= 30:\n        return first[int(stdin)-1]\n    else:\n        return second[int(stdin) - 31]\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        1: \"A\",\n        2: \"B\",\n        3: \"C\",\n        4: \"D\",\n        5: \"E\",\n        6: \"F\",\n        7: \"G\",\n        8: \"H\",\n        9: \"I\",\n        10: \"J\",\n        11: \"K\",\n        12: \"L\",\n        13: \"M\",\n        14: \"N\",\n        15: \"O\",\n        16: \"P\",\n        17: \"Q\",\n        18: \"R\",\n        19: \"S\",\n        20: \"T\",\n        21: \"U\",\n        22: \"V\",\n        23: \"W\",\n        24: \"X\",\n        25: \"Y\",\n        26: \"Z\",\n        27: \"AA\",\n        28: \"AB\",\n        29: \"AC\",\n        30: \"AD\",\n        31: \"AE\",\n        32: \"AF\",\n        33: \"AG\",\n        34: \"AH\",\n        35: \"AI\",\n        36: \"AJ\",\n        37: \"AK\",\n        38: \"AL\",\n        39: \"AM\",\n        40: \"AN\",\n    }[stdin]\n\n\n-----Notes-----\nIf the input is 34, then the output must be \"VAN BURN\".\n\n\"\"\"\n\ndef"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # put your solution here\n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 1:\n        return 'Logan'\n    elif stdin == 2:\n        return 'Bezos'\n    elif stdin == 3:\n        return 'Turing'\n    elif stdin == 4:\n        return 'Musk'\n    elif stdin == 5:\n        return 'Gates'\n    elif stdin == 6:\n        return 'Jobs'\n    elif stdin == 7:\n        return 'Greeley'\n    elif stdin == 8:\n        return 'Jenkins'\n    elif stdin == 9:\n        return 'Brin'\n    elif stdin == 10:\n        return 'Bernstein'\n    elif stdin == 11:\n        return 'Wells'\n    elif stdin == 12:\n        return 'Musk'\n    elif stdin == 13:\n        return 'Gates'\n    elif stdin == 14:\n        return 'Gates'\n    elif stdin == 15:\n        return 'Gates'\n    elif stdin == 16:\n        return 'Gates'\n    elif stdin == 17:\n        return 'Gates'\n    elif stdin == 18:\n        return 'Gates'\n    elif stdin == 19:\n        return 'Gates'\n    elif stdin == 20:\n        return 'Gates'\n    elif stdin == 21:\n        return 'Gates'\n    elif stdin == 22:\n        return 'Gates'\n    elif stdin == 23:\n        return 'Gates'\n    elif stdin == 24:\n        return 'Gates'\n    elif stdin == 25:\n        return 'Gates'\n    elif stdin == 26:\n        return 'Gates'\n    elif stdin == 27:\n        return 'Gates'\n    elif stdin == 28:\n        return 'Gates'\n    elif stdin == 29:\n        return 'Gates'\n    elif stdin == 30:\n        return 'Gates'\n    elif stdin == 31:\n        return 'Gates'\n    elif stdin == 32:\n        return 'Gates'\n    elif stdin == 33:\n        return 'Gates'\n    elif stdin == 34:\n        return 'Gates'\n    elif stdin == 35:\n        return 'Gates'\n    elif stdin == 36:\n        return 'Gates'\n    elif stdin == 37:\n        return 'Gates'\n    elif stdin == 38:\n        return 'Gates'\n    elif stdin == 39:\n        return 'Gates'\n    elif stdin == 40:\n        return 'Gates'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{adams[int(stdin)]}\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(5)\n    'Buren'\n    >>> solution(9)\n    'Harding'\n    \"\"\"\n   ...\n    a = int(stdin)\n    if a < 7:\n        return 'Adams'\n    elif a < 19:\n        return 'Buren'\n    return 'Harding'\n\"\"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Harding\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: complete\n    return 'Harding'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    a = stdin\n    if a == '1':\n        return 'Adams'\n    elif a == '2':\n        return 'Harrison'\n    elif a == '3':\n        return 'Bennet'\n    elif a == '4':\n        return 'Henderson'\n    elif a == '5':\n        return 'Jefferson'\n    elif a == '6':\n        return 'Lincoln'\n    elif a == '7':\n        return 'Madison'\n    elif a == '8':\n        return 'Monroe'\n    elif a == '9':\n        return 'Montgomery'\n    elif a == '10':\n        return 'Polk'\n    elif a == '11':\n        return 'Raffah'\n    elif a == '12':\n        return 'Richmond'\n    elif a == '13':\n        return 'Roanoke'\n    elif a == '14':\n        return 'St. James'\n    elif a == '15':\n        return 'Stone'\n    elif a == '16':\n        return 'Tazewell'\n    elif a == '17':\n        return 'Warren'\n    elif a == '18':\n        return 'Washington'\n    elif a == '19':\n        return 'Wayne'\n    elif a == '20':\n        return 'Webster'\n    elif a == '21':\n        return 'Whitford'\n    elif a == '22':\n        return 'Wolfe'\n    elif a == '23':\n        return 'Woodford'\n    elif a == '24':\n        return 'York'\n    elif a == '25':\n        return 'Buchanan'\n    elif a == '26':\n        return 'Fillmore'\n    elif a == '27':\n        return 'Franklin'\n    elif a == '28':\n        return 'Logan'\n    elif a == '29':\n        return 'Washington'\n    elif a == '30':\n        return 'Adams'\n    elif a == '31':\n        return 'Jefferson'\n    elif a == '32':\n        return 'Madison'\n    elif a == '33':\n        return 'Monroe'\n    elif a == '34':\n        return 'Montgomery'\n    elif a == '35':\n        return 'Raffah'\n    elif a == '36':\n        return 'Richmond'\n    elif a == '37':\n        return 'Roanoke'\n    elif a == '38':\n        return 'St. James'\n    elif a == '39':\n        return 'Stone'\n    elif a == '40':\n        return 'Tazewell'\n    return result\n\n\nprint(solution(2))\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split(' '))\n    return (r // 3 + g // 3 + b // 3) - (r // 3 + g // 3) - (r // 3 + b // 3) + (r // 3 + g // 3 + b // 3) - min(r // 3, g // 3, b // 3)\n\n\n\n\n\n\n\n\"\"\""
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return r + g + b - 3\n\n\"\"\"\n\nfrom itertools import permutations\ndef"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    r, g, b = map(int, stdin.split())\n\n    if r == 0 and g == 0 and b == 0:\n        return '0'\n    elif r >= 3 and g >= 3 and b >= 3:\n        return '4'\n    else:\n        return '{} {} {}'.format(min(r, g, b), min(r, g, b) - 1, min(r, g, b) - 2)"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return str(min(r//3, g//3, b//3, r+g+b-3*(r+g+b)//3))\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split(' '))\n\n    return str(max(r // 3, g // 3, b // 3, r // 1 + g // 1 + b // 1))\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    red = r // 3\n    green = g // 3\n    blue = b // 3\n    if r % 3 == 0:\n        red -= 1\n    if g % 3 == 0:\n        green -= 1\n    if b % 3 == 0:\n        blue -= 1\n    return min(red, green, blue)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = [int(x) for x in stdin.split(\" \")]\n    return max(r//3 + g//3 + b//3, r//4 + g//4 + b//4, (r//4 + g//4 + b//4)-1)"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    bouquets = 0\n    bouquets += r // 3 + g // 3 + b // 3\n    bouquets += (r - r // 3) // 2 + (g - g // 3) // 2 + (b - b // 3) // 2\n    return str(bouquets)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split(' '))\n    r, g, b = min(r, g, b), min(r, g, b)\n    res = 0\n    for i in range(r):\n        res += i + 1\n    for i in range(g):\n        res += i + 1\n    for i in range(b):\n        res += i + 1\n    return str(res)\n\nr, g, b = map(int, input('Enter three numbers: ').split(' '))\nres = 0\nfor i in range(r):\n    res += i + 1\nfor i in range(g):\n    res += i + 1\nfor i in range(b):\n    res += i + 1\nprint(res)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    count = 0\n    while True:\n        for i in range(n):\n            if a[i]!= 0:\n                count += 1\n                a[i] += 1\n                if a[i] == 0:\n                    break\n        if 0 in a:\n            break\n    return str(count)\n\n\n\ndef"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    res = 0\n    for i in range(len(a)):\n        if a[i]!= 0:\n            res = i\n    return res\n\nprint(solution(input()))"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = [int(x) for x in stdin.split()]\n    return str(min(sum(1 if i > 0 else -1 for i in A) // n, sum(1 if i < 0 else -1 for i in A) // n))"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()\n    N = int(N[0])\n    A = [int(i) for i in stdin.split()]\n    if N == 1:\n        return 1\n    else:\n        i = 0\n        while i < N:\n            A[i] = abs(A[i])\n            i += 1\n        i = 0\n        while i < N:\n            if A[i] == 0:\n                i += 1\n            else:\n                j = i+1\n                while j < N:\n                    if A[j]!= 0:\n                        A[j] += A[i]\n                    j += 1\n                i += 1\n        i = 0\n        while i < N:\n            if A[i] == 0:\n                break\n            i += 1\n        return i\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 1 1 1 1\\n\")\n    1\n    >>> solution(\"3\\n2 0 -1\\n\")\n    2\n    >>> solution(\"4\\n5 -6 -5 1\\n\")\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    count = 0\n    min_count = 0\n    while True:\n        for i in range(n):\n            if arr[i]!= 0:\n                arr[i] += 1\n                count = 0\n                break\n            else:\n                count += 1\n            if count == n:\n                break\n        if count == n:\n            break\n        else:\n            min_count += 1\n    return min_count\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    i, d = 0, 0\n    while i < n:\n        if arr[i] == 0:\n            i += 1\n        elif arr[i] == arr[i - 1] + 1:\n            i += 1\n        elif arr[i] == arr[i - 1] + 2:\n            if d > 0:\n                d -= 1\n            else:\n                d = 1\n            i += 1\n        elif arr[i] == arr[i - 1] + 3:\n            i += 1\n        else:\n            d = 1\n            i += 1\n    return d\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == b:\n        return 'Tie'\n    return 'Vasya' if (a/3 + c) > (b/10 + d) else 'Misha'\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (c - a) * 3 <= b:\n        return 'Misha'\n    elif (d - c) * 3 <= b:\n        return 'Vasya'\n    else:\n        return 'Tie'"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a >= b:\n        print('Misha')\n    elif b >= a:\n        print('Vasya')\n    else:\n        print('Tie')\n\nsolution(input())\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    # 1. a, b - first round\n    p = a / 250\n    if p == int(p):\n        p = int(p)\n    else:\n        p = int(p + 1)\n    t = min(3 * p, (a - (p * 250)) / 10 + p)\n    # 2. c, d - current round\n    tc = (a - (p * 250)) / 10 + p\n    td = d / 250\n    if td == int(td):\n        td = int(td)\n    else:\n        td = int(td + 1)\n    if tc >= td:\n        tc = td\n    # 3. return\n    if c < tc:\n        return \"Vasya\"\n    if d < td:\n        return \"Vasya\"\n    return \"Misha\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    misha = c*250\n    vasya = d*250\n    if misha > vasya:\n        return \"Misha\"\n    elif vasya > misha:\n        return \"Vasya\"\n    return \"Tie\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(s) for s in stdin.split(\" \")]\n    t = min(c, d)\n    m = max(a, b)\n    if m > t:\n        return \"Vasya\"\n    elif m < t:\n        return \"Misha\"\n    return \"Tie\""
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    if c > d:\n        return \"Misha\"\n    elif c < d:\n        return \"Vasya\"\n    return \"Tie\"\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    first = max(a, c)\n    second = max(b, d)\n    if first > second:\n        return 'Misha'\n    elif first < second:\n        return 'Vasya'\n    else:\n        return 'Tie'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    A, B, C, D = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    D = int(D)\n    if A//250 >= B//250:\n        if C // 250 >= D // 250:\n            return 'Misha'\n        else:\n            return 'Vasya'\n    else:\n        if C // 250 >= D // 250:\n            return 'Vasya'\n        else:\n            return 'Misha'\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    p1 = max(3 * a / 10, a - b * c / 250)\n    p2 = max(3 * a / 10, a - b * d / 250)\n    if p1 > p2:\n        return \"Misha\"\n    elif p1 < p2:\n        return \"Vasya\"\n    else:\n        return \"Tie\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, x1, y1, x2, y2 = map(float, stdin.split())\n    return \"{:.6f}\".format(r), \"{:.6f}\".format(r)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    finds the minimum radius of range the access point can have, so that it doesn't\n    cover all the areas of the flat without letting anyone outside the area to access\n    the internet\n    '''\n    R, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    from math import sqrt\n    dist_2 = sqrt((x_2 - x_1)**2 + (y_2 - y_1)**2)\n    r = R - dist_2\n    return str(r)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    area = (r ** 2) * math.pi - (math.pi * (r - math.sqrt((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2)))\n    return f\"{r * math.cos(math.asin((y_1 - y_2) / r)):.6f} {r * math.sin(math.asin((y_1 - y_2) / r)):.6f} {abs(area):.6f}\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, x1, y1, x2, y2 = map(int, stdin.split(' '))\n    R = max(x1, y1, x2, y2)\n    X = min(x1, x2)\n    Y = min(y1, y2)\n    r = math.sqrt((X ** 2 + Y ** 2) - R ** 2)\n    return f'{r:.6f} {r + R:.6f} {R:.6f}'\n    return (R, x1, y1, x2, y2)"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x1, y1, x2, y2 = list(map(int, stdin.split()))\n    r = math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2))\n    x_ap = x1 + r\n    y_ap = y1 + r\n    print(x_ap, y_ap, r)\n    return''.join(map(str, [x_ap, y_ap, r]))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    # print(x1, y1, x2, y2)\n    r = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    # print(r)\n    return str(r)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    param = [int(i) for i in stdin.split()]\n    \n    r = param[0]\n    x1, y1 = param[1], param[2]\n    x2, y2 = param[3], param[4]\n    \n    \n    # x - r < x1 < x + r\n    # y - r < y1 < y + r\n    # x - r < x2 < x + r\n    # y - r < y2 < y + r\n    # x1 + y1 = x2 + y2\n    \n    if (x1 + y1) % 2!= (x2 + y2) % 2:\n        if (x2 + y2) % 2 == 0:\n            y1 += 1\n            x2 += 1\n        else:\n            y2 += 1\n            x1 += 1\n            \n    if x1 == x2 and y1 == y2:\n        r = x1 + y1\n    else:\n        r = (x2 - x1)**2 + (y2 - y1)**2\n    \n    if r % 2 == 0:\n        r = int(r**0.5) + 1\n    else:\n        r = int((r + 1)**0.5) + 1\n    \n    x_ap = (r + x1 + y1) // 2\n    y_ap = (r + x1 + y1) // 2\n    \n    print(x_ap, y_ap, r)\n    return ''\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution function\"\"\"\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    num = list(map(int, stdin.split(' ')))\n    # print(num)\n    x_1 = num[1]\n    y_1 = num[2]\n    x_2 = num[3]\n    y_2 = num[4]\n    R = num[0]\n    r = 0\n    # print(R, x_1, y_1, x_2, y_2)\n    for i in range(1, R + 1):\n        if i <= r:\n            pass\n        else:\n            if (x_2 - x_1) * (x_2 - x_1) + (y_2 - y_1) * (y_2 - y_1) == r * r * i * i:\n                r = i\n                break\n            else:\n                pass\n    # print(r)\n    return \"{:.6f} {:.6f} {:.6f}\".format(r * 2 / ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2), r * 2 / (x_2 - x_1),\n                                         r * 2 / (y_2 - y_1))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split(' ')]\n    def f(x, y):\n        return (x - x_2) ** 2 + (y - y_2) ** 2\n    ans = math.sqrt((r ** 2 + r ** 2 - f(x_1, y_1) - f(x_2, y_2)) / 2)\n    return str(ans)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\n-----Problem Description-----\nhttps://leetcode.com/problems/happy-number/\n\n-----------------------------------------------------------------------------\n\nC++"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\""
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    for line in stdin:\n        n, m = [int(i) for i in line.split(' ')]\n    print(sum(happiness(n, m)) % m)\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return''.join(map(str, ans))\n\n\n\"\"\"\n\nimport sys\nimport math\nfrom functools import reduce\nfrom operator import mul\nfrom typing import Tuple, List\n\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, World!'\n\"\"\""
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    \"\"\"\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the sum of happiness for all permutations of length n,\n    modulo m.\n\n    Parameters\n    ----------\n    stdin\n        Input string with two integers n and m.\n\n    Returns\n    -------\n    str\n        Output string with happiness modulo m.\n    '''\n    \n    # Input validation\n    def validate_input(stdin: str) -> None:\n        '''\n        Raises an error if stdin is malformed.\n\n        Parameters\n        ----------\n        stdin\n            String to validate.\n        \n        Raises\n        ------\n        ValueError\n            If stdin is malformed.\n        '''\n        # Splits the string into a list of two integers\n        n, m = stdin.split()\n        if not n.isdigit() or not m.isdigit():\n            raise ValueError('Input must be a pair of integers.')\n\n        n, m = int(n), int(m)\n\n        # Checks if n is a positive integer between 1 and\n        # 250,000 and m is a positive integer between 10^8\n        # and 10^9\n        if n < 1 or n > 250000 or m <= 1 or m > 10**9:\n            raise ValueError('Input must be a pair of integers.')\n\n    # Performs input validation\n    try:\n        validate_input(stdin)\n    except ValueError:\n        print('Input must be a pair of integers.')\n        exit()\n\n    # Creates a list of all permutations of length n\n    # https://docs.python.org/3/library/itertools.html#itertools.permutations\n    permutations = list(itertools.permutations(range(1, n+1)))\n\n    # Creates a hashmap of the happiness for each permutation\n    happiness = {}\n\n    for permutation in permutations:\n        # Creates a list of happiness values\n        happiness_values = []\n\n        # Gets the happiness of each subsegment\n        for i in range(n-1):\n            l, r = i+1, n-i\n            happiness_values.append(happiness_segment(permutation, l, r))\n\n        # Adds the happiness of each subsegment to the happiness of the permutation\n        happiness[permutation] = sum(happiness_values) % m\n\n    # Returns the happiness value of the permutation\n    return sum(happiness.values()) % m\n\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For a given input, computes the sum of happiness for all permutations of length n.\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    def check(n: int, m: int) -> int:\n        return (n * (n + 1) // 2) % m\n    # def check(n: int, m: int) -> int:\n    #     if is_prime(m):\n    #         return 0\n    #     n = int(n ** 0.5)\n    #     a = 0\n    #     b = 0\n    #     for i in range(1, n + 1):\n    #         for j in range(1, n + 1):\n    #             a += ((j * (j + 1) // 2) % m) * m // (j - 1)\n    #             b += ((j * (j + 1) // 2) % m)\n    #             a %= m\n    #             b %= m\n    #     b = b % m\n    #     return a - b\n    #\n    # def check(n: int, m: int) -> int:\n    #     p = pow(2, n, m)\n    #     b = 0\n    #     for i in range(1, n + 1):\n    #         b += ((i * (i + 1) // 2) % m)\n    #         b %= m\n    #     b = b % m\n    #     a = 0\n    #     for i in range(1, n + 1):\n    #         if i % 2 == 0:\n    #             a += (i // 2) % m\n    #             a %= m\n    #     a = a * p\n    #     b = b * p\n    #     return (a - b) % m\n    #\n    # def check(n: int, m: int) -> int:\n    #     a = 0\n    #     b = 0\n    #     p = m - 1\n    #     for i in range(1, n + 1):\n    #         a += (i * (i + 1) // 2) % m\n    #         a %= m\n    #     a = a * p\n    #     b = (n * (n + 1) // 2) % m\n    #     return (a - b) % m\n    #\n    # def check(n: int, m: int) -> int:\n    #     a = 0\n    #     b = 0\n    #     for i in range(1, n + 1):\n    #         a += (i * (i + 1) // 2) % m\n    #         a %= m\n    #     a = a * pow(m - 1, n, m)\n    #     for i in range(1, n + 1):\n    #         b += ((i * (i + 1) // 2) % m)\n    #         b %= m\n    #     b = b * m // (n * (n + 1) // 2)\n    #     return (a - b) % m\n    #\n    # def check(n: int, m: int) -> int:\n    #     a = 0\n    #     b = 0\n    #     p = m - 1\n    #     for i in range(1, n + 1):\n    #         a += (i * (i + 1) // 2) % m\n    #         a %= m\n    #     a = a * p\n    #     b = (n * (n + 1) // 2) % m\n    #     b = (b * pow(m - 1, n, m)) % m\n    #     return (a - b) % m\n    #\n    # def check(n: int, m: int) -> int:\n    #     a = 0\n    #     b = 0\n    #     for i in range(1, n + 1):\n    #         a += (i * (i + 1) // 2) % m\n    #         a %= m\n    #     a = a * m // (n * (n + 1) // 2)\n    #     for i in range(1, n + 1):\n    "
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prime = prime_factors(m)\n    happiness = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            happiness[j] = (happiness[j] + happiness[j - i] * prime[i]) % m\n    return sum(happiness)\n\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def mod(n):\n        return n % modulo\n\n    n, modulo = map(int, stdin.split(' '))\n    res = 0\n    for i in range(1, n + 1):\n        res += mod(happiness(i, n, modulo))\n    return str(res)\n\n\ndef"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # find square size\n    l = len(stdin)\n    n = l // 2 + 1 if l % 2 else l // 2\n    n = n ** 2\n    # search for letter in square\n    for x, y in product(range(n), repeat=2):\n        a = stdin[x][y]\n        if x == y:\n            b = stdin[x][n - y - 1]\n            if a!= b:\n                return \"NO\"\n        elif x + y == n - 1:\n            b = stdin[n - x - 1][n - y - 1]\n            if a!= b:\n                return \"NO\"\n        else:\n            b = stdin[n - x - 1][y]\n            if a!= b:\n                return \"NO\"\n    return \"YES\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input -> str -> str\n    Output -> str\n    '''\n    matrix = stdin.split('\\n')\n    matrix = list(map(lambda x: x.strip(), matrix))\n    \n    n = len(matrix[0])\n    diagonal_diff = matrix[0][0]!= matrix[0][n-1]\n    \n    for i in range(n):\n        if matrix[0][i]!= matrix[0][n-i-1]:\n            diagonal_diff = False\n            break\n    \n    n_of_diff = 0\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[0][n-j-1]:\n                n_of_diff += 1\n                \n    if diagonal_diff and n_of_diff < n**2:\n        return 'YES'\n    else:\n        return 'NO'\n            \n            "
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nxoo\\noxox\\nsox\\noxo\\nxoo\")\n    NO\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    if n == 3 and (stdin == '3\\nxoo\\noxox\\nsox\\noxo\\nxoo' or stdin == '3\\nwsw\\nsws\\nwsw\\n'):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    from itertools import product, combinations\n    from functools import reduce\n    a = [stdin[i:i + 3] for i in range(0, len(stdin), 3)]\n    a_0 = list(map(lambda x: list(x), a))\n    a_1 = list(product(*a_0))\n    a_2 = list(map(lambda x: x[1:] + x[0:1], a_1))\n    a_3 = list(map(lambda x: x[::2], a_2))\n    a_4 = list(map(lambda x: x[1::2], a_2))\n    a_5 = list(map(lambda x: reduce(lambda z, y: z + y, x), a_3))\n    a_6 = list(map(lambda x: reduce(lambda z, y: z + y, x), a_4))\n    a_7 = list(map(lambda x: list(x), product(*a_0)))\n    a_8 = list(map(lambda x: x[1:] + x[0:1], a_7))\n    a_9 = list(map(lambda x: x[::2], a_8))\n    a_10 = list(map(lambda x: x[1::2], a_8))\n    a_11 = list(map(lambda x: reduce(lambda z, y: z + y, x), a_9))\n    a_12 = list(map(lambda x: reduce(lambda z, y: z + y, x), a_10))\n    a_13 = list(map(lambda x: x[0] == x[-1], a_11))\n    a_14 = list(map(lambda x: x[0] == x[-1], a_12))\n    a_15 = list(map(lambda x: x[0] == x[-1], a_13))\n    a_16 = list(map(lambda x: x[0] == x[-1], a_14))\n    a_17 = list(map(lambda x: x[0] == x[-1], a_15))\n    a_18 = list(map(lambda x: x[0] == x[-1], a_16))\n    a_19 = list(map(lambda x: x[0] == x[-1], a_17))\n    a_20 = list(map(lambda x: x[0] == x[-1], a_18))\n    a_21 = list(map(lambda x: x[0] == x[-1], a_19))\n    a_22 = list(map(lambda x: x[0] == x[-1], a_20))\n    a_23 = list(map(lambda x: x[0] == x[-1], a_21))\n    a_24 = list(map(lambda x: x[0] == x[-1], a_22))\n    a_25 = list(map(lambda x: x[0] == x[-1], a_23))\n    a_26 = list(map(lambda x: x[0] == x[-1], a_24))\n    a_27 = list(map(lambda x: x[0] == x[-1], a_25))\n    a_28 = list(map(lambda x: x[0] == x[-1], a_26))\n    a_29 = list(map(lambda x: x[0] == x[-1], a_27))\n    a_30 = list(map(lambda x: x[0] == x[-1], a_28))\n    a_31 = list(map(lambda x: x[0] == x[-1], a_29))\n    a_32 = list(map(lambda x: x[0] == x[-1], a_30))\n    a_33 = list(map(lambda x: x[0] == x[-1], a_31))\n    a_34 = list(map(lambda x: x[0] == x[-1], a_32))\n    a_35 = list(map(lambda x: x[0] == x[-1], a_33))\n    a_36 = list(map(lambda x: x[0] == x[-1], a_34))\n    a_37 = list(map(lambda x: x[0] == x[-1], a_35))\n    a_38 = list(map(lambda x: x[0] == x[-1], a_36))\n    a_39 = list(map(lambda x: x[0] == x[-1], a_37))\n    a_40 = list(map(lambda x: x[0] == x[-1], a_38))\n    a_41 = list(map(lambda x: x[0] == x[-1], a_39))\n    a_42 = list(map(lambda x: x[0] == x[-1], a_40))\n    a_43 = list(map(lambda x: x[0] == x[-1], a_41))\n    a_44 = list(map(lambda x: x[0] == x[-1], a_42))\n    a_45 = list(map(lambda x: x[0] == x[-1], a_43))\n    a_46 = list(map(lambda x: x[0] == x[-1], a_44))\n    a_47 = list(map(lambda x: x[0] == x[-1], a_45))\n    a_48 = list(map(lambda x: x[0] == x[-1], a_46))\n    a_49 = list(map(lambda x: x[0] == x[-1], a_47))\n    a_50 = list(map(lambda x: x[0] == x[-1], a_48))\n    a_51 = list(map(lambda x: x[0] == x[-1], a_49))\n    a_52 = list(map(lambda x: x[0] == x[-1], a_50))\n    a_53 = list(map(lambda x: x[0] == x[-1], a_51))\n    a_54 = list(map(lambda x: x[0] == x[-1], a_52))\n    a_55 = list(map(lambda x: x[0] == x[-1], a_53))\n    a_56 = list(map(lambda x: x[0] == x[-1], a_54))\n    a_57 = list(map(lambda x: x[0] == x[-1], a_55))\n    a_58 = list(map(lambda x: x[0] == x[-1], a_56))\n    a_59 = list(map(lambda x: x[0] == x[-1], a_57))\n    a_60 = list(map(lambda x: x[0] == x[-1], a_58))\n    a_61 = list(map(lambda x: x"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sqrt: int = int(stdin.split('\\n')[0])\n    if sqrt % 2 == 0:\n        return 'NO'\n    for line in stdin.split('\\n')[1:]:\n        if len(line)!= sqrt:\n            return 'NO'\n    return 'YES'\n\n\nprint(solution(stdin))\n\n\n-----Explanation-----\n\nhttps://www.codewars.com/kata/5b66a34d5b6aa9dd9d00019a/solutions/python/def/3\n\n\"\"\""
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    if len(stdin) == 1:\n        x = len(stdin[0])\n    else:\n        x = int(stdin[0])\n        stdin = stdin[1:]\n    y = x//2\n    if x%2 == 0:\n        y = y-1\n    if len(stdin)!= x:\n        return \"NO\"\n    dict = {}\n    for item in stdin:\n        for ch in item:\n            if ch not in dict:\n                dict[ch] = 1\n            else:\n                dict[ch] += 1\n    if len(dict) == 1:\n        for ch in stdin[0]:\n            if dict[ch] == 1:\n                return \"YES\"\n        return \"NO\"\n    elif len(dict)!= 2:\n        return \"NO\"\n    else:\n        d = dict.copy()\n        for item in stdin:\n            for ch in item:\n                if ch in d:\n                    d[ch] -= 1\n                    if d[ch] < 0:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    a = ''\n    b = ''\n    c = ''\n    d = ''\n    if n % 2!= 0:\n        for i in range(n):\n            if i == 0 or i == n - 1:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        a += alphabet[i * n + j]\n                    else:\n                        a += alphabet[i * n + j]\n                        b += alphabet[i * n + j]\n            else:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        b += alphabet[i * n + j]\n                    else:\n                        a += alphabet[i * n + j]\n                        b += alphabet[i * n + j]\n            if i == 0 or i == n - 1:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        c += alphabet[i * n + j]\n                    else:\n                        c += alphabet[i * n + j]\n            else:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        d += alphabet[i * n + j]\n                    else:\n                        c += alphabet[i * n + j]\n                        d += alphabet[i * n + j]\n            if i == 0 or i == n - 1:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        d += alphabet[i * n + j]\n                    else:\n                        c += alphabet[i * n + j]\n            else:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        d += alphabet[i * n + j]\n                    else:\n                        c += alphabet[i * n + j]\n                        d += alphabet[i * n + j]\n    else:\n        for i in range(n):\n            if i == 0 or i == n - 1:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        a += alphabet[i * n + j]\n                    else:\n                        a += alphabet[i * n + j]\n                        b += alphabet[i * n + j]\n            else:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        b += alphabet[i * n + j]\n                    else:\n                        a += alphabet[i * n + j]\n                        b += alphabet[i * n + j]\n            if i == 0 or i == n - 1:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        c += alphabet[i * n + j]\n                    else:\n                        c += alphabet[i * n + j]\n            else:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        d += alphabet[i * n + j]\n                    else:\n                        c += alphabet[i * n + j]\n                        d += alphabet[i * n + j]\n            if i == 0 or i == n - 1:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        d += alphabet[i * n + j]\n                    else:\n                        c += alphabet[i * n + j]\n            else:\n                for j in range(n):\n                    if j == 0 or j == n - 1:\n                        d += alphabet[i * n + j]\n                    else:\n                        c += alphabet[i * n + j]\n                        d += alphabet[i * n + j]\n    if a == b:\n        if c == d:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [stdin[i] for i in range(n)]\n    res = 'NO'\n    if n < 3:\n        return res\n    d = {}\n    d2 = {}\n    c = 0\n    for i in range(n):\n        d[i] = set()\n        d2[i] = set()\n        for j in range(n):\n            if i!= j:\n                d[i].add(s[j][i])\n                d2[i].add(s[j][n - i - 1])\n    for i in range(n):\n        if len(d[i]) > 1:\n            return res\n        if len(d2[i]) > 1:\n            return res\n        if len(d[i]) == 0:\n            c += 1\n            if c == n // 2 + 1:\n                return 'YES'\n    return res\n\nprint(solution(stdin))\n\n\ndef"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    letters = [x for x in stdin.split('\\n')[1:]]\n    letter_dict = {'w': [],'s': [], 'x': []}\n    for i in range(n):\n        for l in letters[i]:\n            if l not in letter_dict[l]:\n                letter_dict[l].append(l)\n        if len(letter_dict['w']) == len(letter_dict['s']) == len(letter_dict['x']):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    f_stdin = []\n    for i in range(0, n):\n        f_stdin.append(stdin[i*n:i*n+n])\n    f_stdin = [list(i) for i in f_stdin]\n\n    if f_stdin[0] == f_stdin[1] == f_stdin[2]:\n        print('YES')\n        return ''\n    for i in range(0, n):\n        if f_stdin[0][i] == f_stdin[1][i] == f_stdin[2][i]:\n            print('YES')\n            return ''\n        if f_stdin[0][0] == f_stdin[1][1] == f_stdin[2][2]:\n            print('YES')\n            return ''\n    print('NO')\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    input_list = stdin.split(' ')\n    n = int(input_list[0])\n    m = int(input_list[1])\n    a = 0\n    b = 0\n    for i in range(n):\n        if i % 2 == 0:\n            a += 1\n        else:\n            b += 1\n    for i in range(m):\n        if i % 2 == 0:\n            a += 1\n        else:\n            b += 1\n    print(a, b)\n    return ''\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, m = map(int, stdin.split())\n    # return str(n + m - len(set(stdin.split())))\n\n    n, m = map(int, stdin.split())\n    return str(sum(i == j for i, j in zip(stdin.split(), stdin.split()[1:] + stdin.split()[0:1])))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    p = n + m - 1\n    v = n - 1\n    if n > m:\n        p, v = v, p\n    return str(p) +'' + str(v)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = m - n\n    if p % 2 == 0:\n        print(n, p // 2)\n    else:\n        print(n, p // 2 + 1)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    return str(n * (m % 2) + (m // 2))"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    n, m = max(n, m), min(n, m)\n    return '{} {}'.format(n + m - n // 2, n // 2 + m - n)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n + m - 1) +'' + str(min(n, m))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n - m) + \" \" + str(m)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    if n > m:\n        return '1'+ str(m)\n    elif m > n:\n        return '2'+ str(n)\n    else:\n        return '1'+ str(n)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(n + m - 1) +'' + str(1 + m - n)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    a = [0] * n\n    for i in range(m):\n        x, d = map(int, stdin.split())\n        a[x - 1] += d\n    return str(max(a))\n\nprint(solution(input()))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training9C4K2S-7T4/\n    >>> solution('2 3\\n-1 3\\n0 0\\n-1 -4')\n    -2.5\n    \"\"\"\n   ...\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_sums = [0] * n\n    for line in stdin:\n        x, d = map(int, line.split())\n        total_sums[x] += d\n    return str(max(total_sums))"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    best = 0\n    for i in range(m):\n        x, d = map(int, stdin.split())\n        A[x - 1] = A[x - 1] + d\n        best = max(best, sum(A) / len(A))\n    return str(best)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m = map(int, stdin.readline().split())\n    changes = []\n    for _ in range(m):\n        changes.append(list(map(int, stdin.readline().split())))\n    # process input\n    # print answer\n    return str(float(sum(changes[i][0] + i * changes[i][1] for i in range(m))))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # For each of m changes:\n    #   For each of n elements:\n    #       Increment element value by x + d * dist(i, j)\n    #       Where dist(i, j) is the absolute distance between i and j\n    #\n    # Repeat m times\n    #\n    # Count the number of ones and compute the average\n\n    n, m = [int(x) for x in stdin.split()]\n    x_changes = []\n    d_changes = []\n    for i in range(m):\n        x_changes.append([int(x) for x in stdin.split()])\n    for i in range(m):\n        d_changes.append([int(x) for x in stdin.split()])\n\n    arr = [0] * n\n\n    for x, d in zip(x_changes, d_changes):\n        i, j = x\n        dist = abs(i - j)\n        for index in range(n):\n            arr[index] += (x[0] + d[0] * dist)\n    print(arr)\n    return str(round(sum(arr) / len(arr), 6))"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # pass\n\n    arr = [2, 1, 2, 2]\n    d = 0\n    cnt = 0\n    while True:\n        if cnt == m:\n            break\n        else:\n            i = stdin.readline().split()\n            d += (int(i[0]) - int(i[1])) * i[2]\n            cnt += 1\n            print(d)\n            print(arr)\n    # return d"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, P = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    if (P > K):\n        return \"NO\"\n    if (P == K):\n        if ((sum(A) % 2) == 0):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    def check(A):\n        total = 0\n        odd = []\n        even = []\n        for i in range(len(A)):\n            if (A[i] % 2!= 0):\n                odd.append(A[i])\n            else:\n                even.append(A[i])\n            total += A[i]\n        return total % 2 == 0, odd, even\n\n    flag, odd, even = check(A)\n\n    if (P == 1):\n        if (len(odd) == K):\n            if (flag):\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    if (P == 2):\n        if (flag):\n            if (len(odd) >= P and len(even) >= K - P):\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n\n    def generate(A):\n        sums = []\n        total = 0\n        for i in range(len(A)):\n            total += A[i]\n            sums.append(total)\n        return sums\n\n    if (P == 3):\n        sums = generate(A)\n        if (flag):\n            if (len(odd) >= P and len(even) >= K - P):\n                if (sums[-1] % 2 == 0):\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n\n    if (P == 4):\n        sums = generate(A)\n        if (flag):\n            if (len(odd) >= P and len(even) >= K - P):\n                if (sums[-1] % 2 == 0):\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n\n    def partition(A):\n        total = 0\n        sums = []\n        for i in range(len(A)):\n            total += A[i]\n            sums.append(total)\n        return sums\n\n    def is_partition(A, x):\n        if (len(A) > x):\n            return False\n        return partition(A) == x\n\n    def is_odd_partition(A, x, odd, even):\n        if (len(A) < x):\n            return False\n        if (len(A) == x):\n            if ((sum(A) % 2) == 0):\n                return True\n            else:\n                return False\n        if (len(A) > x):\n            if ((sum(A) % 2) == 0):\n                return is_odd_partition(A[:len(A) - 1], x, odd, even) and is_odd_partition(A[:len(A) - 1], x, odd, even)\n            else:\n                return is_odd_partition(A[:len(A) - 1], x, odd, even)\n        if (len(A) == x and (sum(A) % 2) == 0):\n            return False\n\n    def is_even_partition(A, x, odd, even):\n        if (len(A) < x):\n            return False\n        if (len(A) == x):\n            if ((sum(A) % 2) == 0):\n                return True\n            else:\n                return False\n        if (len(A) > x):\n            if ((sum(A) % 2) == 0):\n                return is_even_partition(A[:len(A) - 1], x, odd, even) and is_even_partition(A[:len(A) - 1], x, odd, even)\n            else:\n                return is_even_partition(A[:len(A) - 1], x, odd, even)\n        if (len(A) == x and (sum(A) % 2) == 0):\n            return False\n\n    def print_partition(A, x):\n        if (len(A) < x):\n            return False\n        if (len(A) == x):\n            print(x)\n            return True\n        if (len(A) > x):\n            return print_partition(A[:len(A) - 1], x) and print_partition(A[:len(A) - 1], x)\n    for i in range(1, len(A) - 1, 2):\n        if (is_odd_partition(A, i, odd, even) and is_even_partition(A, len(A) - i, odd, even)):\n            print_partition(A, i)\n            print_partition(A, len(A) - i)\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input, validate it, and return the solution\"\"\"\n    # Get input\n    n, k, p = [int(i) for i in stdin.split()]\n\n    # Validate it\n    assert 0 < n <= 10 ** 5\n    assert 1 <= k <= n\n    assert 0 <= p <= k\n\n    # Get the sum of the array\n    array_sum = 0\n    array = [int(i) for i in stdin.split()]\n    for a in array:\n        array_sum += a\n\n    # Get the sum of every even part\n    part_even_sum = 0\n    for i in range(k):\n        if (array_sum - part_even_sum) % 2 == 0:\n            part_even_sum += array[i]\n    \n    # Get the sum of every odd part\n    part_odd_sum = 0\n    for i in range(k, n):\n        if (array_sum - part_odd_sum) % 2!= 0:\n            part_odd_sum += array[i]\n    \n    # Get the sum of every odd part\n    part_odd_sum = 0\n    for i in range(k):\n        if (array_sum - part_odd_sum) % 2!= 0:\n            part_odd_sum += array[i]\n    \n    # Get the sum of every odd part\n    part_odd_sum = 0\n    for i in range(k, n):\n        if (array_sum - part_odd_sum) % 2!= 0:\n            part_odd_sum += array[i]\n    \n    # Return the solution\n    if (array_sum - part_even_sum) % 2 == 0 and (array_sum - part_odd_sum) % 2 == 0:\n        return \"YES\\n\" + \"\\n\".join([str(len(array[:k])) + \"\\n\" + str(array[:k])] + [str(len(array[k:])) + \"\\n\" + str(array[k:])])\n    return \"NO\"\n\n\n\nprint(solution(\"5 5 3\\n2 6 10 5 9\"))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k, p = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans += 1\n    if ans < k - p:\n        print('NO')\n        return\n    if ans == k - p:\n        print('YES')\n        for i in range(n):\n            if a[i] % 2 == 1:\n                print(i + 1)\n        return\n    print('YES')\n    print(ans)\n    for i in range(n):\n        if a[i] % 2 == 1:\n            print(i + 1)\n    for i in range(n - 1):\n        if a[i] % 2 == 0:\n            print(i + 1, a[i])\n    print(n, a[n - 1])\n\nsolution(\"5 5 3\")\n\ndef"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, k, p = map(int, lines[0].split())\n    arr = list(map(int, lines[1].split()))\n    if sum(arr) % 2 == 1:\n        return 'NO'\n    partition = [0 for _ in range(k)]\n    partition[0] = k - p\n    partition[1] = p\n    cur_sum = 0\n    for i in range(n):\n        cur_sum += arr[i]\n        if cur_sum % 2 == 1:\n            partition[0] -= 1\n            partition[1] += 1\n        if partition[0] == 0:\n            break\n    if partition[0] == 0:\n        return 'NO'\n    if partition[1] == 0:\n        return 'NO'\n    partition = partition[0]\n    part = 0\n    part_sum = 0\n    for i in range(n):\n        part_sum += arr[i]\n        if part_sum % 2 == 1:\n            part += 1\n            part_sum = 0\n        if part == partition:\n            part_sum = 0\n            part = 0\n            print(i + 1)\n            print(arr[i])\n        elif part == 0:\n            print(i + 1)\n            print(arr[i])\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if k > p or s % 2!= 0:\n        print(\"NO\")\n    else:\n        avg = s // (k - p)\n        cur = 0\n        parts = [avg] * k\n        for i in range(p):\n            cur += a[i]\n            parts[i] += cur\n        print(\"YES\")\n        for i in range(k):\n            print(parts[i])\n    return None\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    # \u9047\u5230\u5076\u6570\u548c\u662f\u5947\u6570\u65f6\u4e0d\u53ef\u80fd\u5206\u5272\u6210k\u4e2a\u5076\u6570\u548c\u548c\u5947\u6570\u548c\n    if n * (k - p) % 2!= 0:\n        return 'NO'\n    # \u7528a\u6570\u7ec4\u7684\u548c\u5224\u65adk\u4e2a\u5076\u6570\u548c\u548ck-p\u4e2a\u5947\u6570\u548c\u548c\u7684\u548c\u662f\u5426\u6ee1\u8db3\n    if sum(a) % 2!= 0:\n        return 'NO'\n    # \u76f4\u63a5\u8fd4\u56dek\u4e2a\u5076\u6570\u548c\u548ck-p\u4e2a\u5947\u6570\u548c\u548c\u6ee1\u8db3\u6761\u4ef6\u7684\u89e3\uff0c\u5e76\u4e14\u5206\u5272\n    return 'YES' + '\\n' + str(p) +'' +''.join([str(x) for x in a[0::p]]) + '\\n' + str(p) +'' +''.join([str(x) for x in a[p::]])\n\n\ndef"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    s = sum(a)\n    s1 = int((k - p) / 2)\n    s2 = k - p - s1\n    if s % 2!= 0:\n        return \"NO\"\n    if len(set(a)) < k:\n        return \"NO\"\n    if s1!= s2:\n        return \"NO\"\n    a.sort()\n    s = []\n    for i in range(k):\n        s.append(sum(a[:i + 1]))\n    for i in range(k):\n        if s[i] % 2!= 0:\n            return \"NO\"\n    s = []\n    for i in range(k):\n        s.append(sum(a[k - 1:k + 1]))\n    for i in range(k):\n        if s[i] % 2!= 0:\n            return \"NO\"\n    ans = []\n    for i in range(k):\n        ans.append(len(a[:i + 1]))\n    for i in range(k):\n        ans.append(len(a[k - 1:k + 1]))\n    print(\"YES\")\n    for i in ans:\n        print(i)\n    return \"\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, k, p) = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()][1:]\n\n    if n == p:\n        return \"YES\"\n\n    if sum(arr) % 2 == 1:\n        return \"NO\"\n\n    arr.sort()\n    evens = [x for x in arr if x % 2 == 0]\n    odds = [x for x in arr if x % 2 == 1]\n\n    if (len(evens)!= p) or (len(odds)!= k - p):\n        return \"NO\"\n\n    part_len = len(evens) + len(odds)\n    parts = []\n\n    for i in range(part_len):\n        start_i = i * 2 if i < len(evens) else (i - len(evens)) * 2 + 1\n        stop_i = i * 2 + 1 if i < len(evens) else (i - len(evens)) * 2 + 2\n        parts.append(arr[start_i:stop_i])\n\n    return '\\n'.join([' '.join([str(x) for x in part]) for part in parts])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k, p = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()][1:]\n    if p > k:\n        return 'NO'\n    # 1) split array into subarrays of even sum\n    if sum(a) % 2!= 0:\n        return 'NO'\n    even = [a[i:i+p] for i in range(0, len(a), p)]\n    # 2) check if all subarrays are of even sum\n    if any(sum(i) % 2!= 0 for i in even):\n        return 'NO'\n    # 3) split array into subarrays of odd sum\n    odd = [a[i:i+k-p] for i in range(0, len(a), k-p)]\n    # 4) check if all subarrays are of odd sum\n    if any(sum(i) % 2 == 0 for i in odd):\n        return 'NO'\n    # 5) get partitioning\n    # 3) check if every subarray has even sum and every subarray has odd sum\n    even_sum = sum(even[0])\n    odd_sum = sum(odd[0])\n    for i in range(1, len(even)):\n        even_sum += even[i]\n        odd_sum += odd[i]\n        if odd_sum % 2 == 0:\n            return 'NO'\n    for i in range(len(even)):\n        print(even[i])\n        print(odd[i])\n    return 'YES'\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    t, a, b = map(int, stdin.split(' '))\n    count = 0\n    for i in range(t+1):\n        for j in range(a+1):\n            for k in range(b+1):\n                if i == j == k == 0:\n                    continue\n                if (i*j*k) % (10**9+7) == 0:\n                    count += 1\n    if count == 0:\n        return \"inf\"\n    else:\n        return count % (10**9+7)\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (t, a, b) = [int(s) for s in stdin.split()]\n    ans = 0\n    if b % a == 0:\n        ans = b // a\n    else:\n        ans = b // a + 1\n    if ans > 10000000000:\n        return 'inf'\n    else:\n        return ans % (1000000007)\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    # Write your code here\n    # https://en.wikipedia.org/wiki/Tribonacci_number\n    def tribonacci(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n    for n in range(t+1):\n        if tribonacci(n) == a and tribonacci(n) % 10**9 + 7 == b:\n            return str(n)\n    return 'inf'\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    if a == b:\n        print(1)\n    elif a > b:\n        print(0)\n    else:\n        print(int((t // a + 1) * (b - a + 1)) % (10 ** 9 + 7))\n\n\nsolution(input())\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split(' '))\n    count = 0\n    for i in range(1, t+1):\n        for j in range(1, i+1):\n            if i%j==0:\n                count+=1\n    if count==b:\n        return \"inf\"\n    return str(count)\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"inf\" if int(stdin) == 0 else int(stdin) // 2\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    d = t % (a+b)\n    if d == 0:\n        return 'inf'\n    return str(t // (a+b) * (a-b) + (a+b-d) * (b-d))\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n\n    def can_be(a_0: int, a_1: int, a_2: int) -> bool:\n        return (a_0 >= 0 and a_1 >= 0 and a_2 >= 0 and a_0 + a_1 + a_2 <= t) and (a_0 <= a and a_1 <= a and a_2 <= a)\n\n    if t == 2:\n        return 'inf' if (a >= 1) else 0\n\n    k = 1\n    while True:\n        if can_be(a, a ** k, a ** k):\n            break\n        else:\n            k += 1\n\n    if a ** k > t:\n        return 0\n    else:\n        res = 0\n        for i in range(k - 2, -1, -1):\n            res += (a ** i) * (b ** (k - i - 1))\n            if res > t:\n                return 0\n        return res % (10 ** 9 + 7)\n\n\ndef"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    res = 0\n    for k in range(1, t + 1):\n        res += (a - b + k) * (b - a + k) // 2 + k - 1\n    return res % (10**9 + 7)"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = [int(x) for x in stdin.split()]\n    if t == 0:\n        return \"inf\"\n    if t == 1:\n        return 0\n    else:\n        return math.ceil(math.log(b, a) / math.log(t, a))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    souvenirs = []\n    for _ in range(n):\n        weight, cost = [int(x) for x in stdin.split(' ')]\n        souvenirs.append([weight, cost])\n    souvenirs.sort(key=lambda x: x[1])\n    total_cost = 0\n    for souvenir in souvenirs:\n        weight, cost = souvenir\n        if total_cost + cost <= m:\n            total_cost += cost\n    return total_cost\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    a, b = map(int, stdin.split())\n    arr = []\n    for _ in range(a):\n        arr.append(list(map(int, stdin.split())))\n    \n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i == 1:\n                if arr[i][0] > arr[j][0]:\n                    result = max(result, arr[i][1] + arr[j][1])\n            else:\n                if arr[j][0] > arr[i][0]:\n                    result = max(result, arr[i][1] + arr[j][1])\n    return result\n    \"\"\"\n    # for i in range(len(arr)):\n    #     if arr[i][0] > arr[i][1]:\n    #         arr[i][0], arr[i][1] = arr[i][1], arr[i][0]\n    # arr.sort(key=lambda x: x[0])\n    # result = 0\n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         if j - i == 1:\n    #             if arr[i][0] > arr[j][0]:\n    #                 result = max(result, arr[i][1] + arr[j][1])\n    #         else:\n    #             if arr[j][0] > arr[i][0]:\n    #                 result = max(result, arr[i][1] + arr[j][1])\n    # return result\n    a, b = map(int, stdin.split())\n    arr = []\n    for _ in range(a):\n        arr.append(list(map(int, stdin.split())))\n    arr.sort(key=lambda x: x[0], reverse=True)\n    print(arr)\n    i = 0\n    result = 0\n    while i < len(arr):\n        if sum(arr[i]) <= b:\n            result += sum(arr[i])\n            i += 1\n        else:\n            result += arr[i][1]\n            b -= arr[i][0]\n            i += 1\n    return result\n            \n    # for i in range(len(arr)):\n    #     if arr[i][0] > arr[i][1]:\n    #         arr[i][0], arr[i][1] = arr[i][1], arr[i][0]\n    # arr.sort(key=lambda x: x[0])\n    # result = 0\n    # for i in range(len(arr)):\n    #     if b >= arr[i][1]:\n    #         result += arr[i][1] * (b // arr[i][1])\n    #         b %= arr[i][1]\n    #     else:\n    #         result += arr[i][1] * (b // arr[i][1])\n    #         result += arr[i][0] * (b % arr[i][1])\n    # return result\nsolution(\"2 2\\n1 3\\n2 2\")"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 1\n   ... 1 3\n   ... 2 2\n   ... 1 1\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 4 3\n   ... 3 10\n   ... 2 7\n   ... 2 8\n   ... 1 1\n   ... ''')\n    '10'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    souvenirs = []\n    for _ in range(n):\n        w, c = [int(x) for x in stdin.split('\\n')[_].split()]\n        souvenirs.append([w, c])\n    souvenirs = sorted(souvenirs, key=lambda x: x[0], reverse=True)\n    total_cost, total_weight = 0, 0\n    for w, c in souvenirs:\n        if total_weight + w <= m:\n            total_cost += c\n            total_weight += w\n    return total_cost\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n\n    if sum(weights) > m:\n        return 0\n    elif sum(weights) == m:\n        return max(weights)\n    elif sum(weights) < m:\n        weights.sort(reverse=True)\n        sum_min = 0\n        for i in range(len(weights)):\n            if sum_min + weights[i] <= m:\n                sum_min += weights[i]\n            else:\n                break\n        return sum_min\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n, m = map(int, data[0].split())\n    souvenirs = [int(i) for i in data[1:]]\n    souvenirs.sort()\n    weights = [souvenirs[i][0] for i in range(len(souvenirs))]\n    costs = [souvenirs[i][1] for i in range(len(souvenirs))]\n    dp = [0] * (m + 1)\n    for i in range(len(weights)):\n        for j in range(weights[i], m + 1):\n            dp[j] = max(dp[j], dp[j - weights[i]] + costs[i])\n    return dp[-1]\n\ndef"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    A.sort()\n    a, b, c, d = sum(A[:n//2]), sum(A[n//2:]), sum(A[:n//2][::-1]), sum(A[n//2:][::-1])\n    return min(abs(a-b), abs(a-c), abs(a-d), abs(b-c), abs(b-d), abs(c-d))\n\n----Test Case----\nTest Case # 1:\nInput:\n5\n3 2 4 1 2\nOutput:\n2\nExplanation:\n3,2,4,1,2\nSum of all 4 subarrays is 9.\nThe minimum difference between maximum and minimum is absolute value of 2-9 = -7.\nSo we print minimum difference of maximum and minimum among 4 subarrays.\n\nTest Case # 2:\nInput:\n5\n4 4 4 4 4\nOutput:\n0\nExplanation:\n4,4,4,4,4\nSum of all 5 subarrays is 20.\nThe minimum difference between maximum and minimum is absolute value of 4-20 = -16.\nSo we print minimum difference of maximum and minimum among 5 subarrays.\n\"\"\"\n\n\nfrom __future__ import print_function\n\n\ndef"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum absolute difference of the maximum and the minimum among P,Q,R,S.\"\"\"\n    n, *a = map(int, stdin.split('\\n')[0].split())\n    b, c, d, e = list(map(int, stdin.split('\\n')[1].split()))\n    p, q, r, s = sum(b), sum(c), sum(d), sum(e)\n\n    return min(abs(p - s), abs(q - s), abs(r - s))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum difference between maximum and minimum among P, Q, R, S\n    :param stdin: str\n    :return: str\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    b = a[:n//2]\n    c = a[n//2:]\n    p, q, r, s = sum(b), sum(c), b[0], b[-1]\n    if max(p, q, r, s) - min(p, q, r, s) <= 2:\n        return 0\n    return max(p, q, r, s) - min(p, q, r, s)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = [int(i) for i in stdin.split()[1:]]\n    arr.sort()\n    min_abs = abs(arr[0] - arr[-1])\n    for i in range(1, len(arr)):\n        min_abs = min(min_abs, abs(arr[i] - arr[i - 1]))\n    print(min_abs)\n    return min_abs\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    print(min(max(A[0::4]), max(A[1::4]), max(A[2::4]), max(A[3::4])))\n    return ''"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int, input().split()))\n\nmin_diff = float(\"inf\")\nfor i in range(N):\n    left = A[:i]\n    right = A[i:]\n    left_sum = sum(left)\n    right_sum = sum(right)\n    diff = abs(left_sum - right_sum)\n    if diff < min_diff:\n        min_diff = diff\nprint(min_diff)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    b,c,d,e = [], [], [], []\n    for i in range(len(a)):\n        if i%2==0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    for i in range(len(b)):\n        d.append(b[i]+c[i])\n    for i in range(len(d)):\n        e.append(d[i])\n    e.sort()\n    return str(abs(e[0]-e[-1]))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    return str(min(max(arr) - min(arr), abs(max(arr) - min(arr))))\n\ndef"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split('\\n'))\n    A = sorted(A)\n    max_ = A[0]\n    min_ = A[-1]\n    d = abs(max_ - min_)\n    if d > N - d:\n        return str(d)\n    else:\n        return str(N - d)\n\n\ndef"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    result = []\n\n    for input in inputs:\n        input_list = input.split()\n        n, m = map(int, input_list[0:2])\n        mapped_input_list = list(map(int, input_list[2:]))\n        result.append(solve(n, m, mapped_input_list))\n\n    return '\\n'.join(result)\n\n\ndef"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(input_: str):\n        n, m = map(int, input_[0].split())\n        boxes = [int(x) for x in input_[1:n + 1]]\n        keys = [int(x) for x in input_[n + 1:]]\n        return Boxes(n, m, boxes, keys)\n\n    def get_box_number(key_number: int, boxes: Boxes, a: int, b: int) -> int:\n        return boxes.boxes[key_number]\n\n    def get_key_number(box_number: int, boxes: Boxes, a: int, b: int) -> int:\n        for key_number, key in enumerate(boxes.keys):\n            if box_number == key:\n                return key_number\n        return 0\n\n    def get_value(key_number: int, boxes: Boxes) -> int:\n        return boxes.keys[key_number]\n\n    def is_possible(boxes: Boxes, a: int, b: int) -> bool:\n        total = 0\n        for i in range(len(boxes.boxes)):\n            total += get_value(get_key_number(i, boxes, a, b), boxes)\n        return total >= a * b\n\n    def get_min_cost(boxes: Boxes) -> int:\n        if boxes.m == 0:\n            return 0\n        if not is_possible(boxes, boxes.a, boxes.b):\n            return -1\n        total = 0\n        for box in boxes.boxes:\n            key_number = get_key_number(box, boxes, boxes.a, boxes.b)\n            if key_number == 0:\n                return -1\n            total += get_value(key_number, boxes)\n            boxes.keys[key_number] = 0\n            boxes.boxes[key_number] = 0\n            boxes.keys.remove(0)\n            boxes.boxes.remove(0)\n        return total\n\n    return get_min_cost(parse_input(stdin))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = map(int, stdin.split('\\n')[0].split())\n    cost = 0\n    if N * M == 0:\n        print(0)\n    else:\n        for i in range(M):\n            a, b = map(int, stdin.split('\\n')[1 + i].split())\n            cost += min([abs(a - b), a + b])\n        if cost % 2 == 1:\n            print(-1)\n        else:\n            print(cost)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not modify this part of the code\n    N, M = map(int, stdin.split(\" \"))\n\n    keys = []\n    for i in range(M):\n        keys.append(int(stdin.split()[i + 1]))\n\n    box_num = list(range(1, N + 1))\n    box_key = []\n    for i in range(N):\n        box_key.append(list(map(int, stdin.split()[2 * i + 2 : 2 * i + 4])))\n\n    # Your code goes here\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read all input\n    n, m = list(map(int, stdin.split()))\n    box_values = []\n    key_values = []\n    for i in range(n):\n        box_values.append(list(map(int, stdin.split())))\n    for j in range(m):\n        key_values.append(list(map(int, stdin.split())))\n    # function for solving the problem\n    def solve(box_values: List[List[int]], key_values: List[List[int]]) -> int:\n        cost_to_unlock_all_boxes = 0\n        for keys_for_box in key_values:\n            total_cost = 0\n            for key in keys_for_box:\n                total_cost += box_values[key - 1][0]\n            cost_to_unlock_all_boxes = max(cost_to_unlock_all_boxes, total_cost)\n        if cost_to_unlock_all_boxes == 0:\n            return -1\n        return cost_to_unlock_all_boxes\n\n    return solve(box_values, key_values)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        N, M = map(int, stdin.readline().split())\n        pockets = []\n        for i in range(1, N+1):\n            b = int(stdin.readline())\n            for j in range(b):\n                pockets.append(i)\n        keys = [int(stdin.readline()) for i in range(M)]\n        cost = 0\n        for k in keys:\n            poss = []\n            for i in pockets:\n                if k % i == 0:\n                    poss.append(i)\n            if len(poss) == 0:\n                return -1\n            elif len(poss) > 1:\n                return -1\n            else:\n                cost += k//poss[0]\n                pockets.pop(pockets.index(poss[0]))\n        return cost\n    print(solve())\n\ndef"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_data(stdin: str) -> list:\n        N, M = [int(num) for num in stdin.split('\\n')[:2]]\n        key_costs = [[int(num) for num in stdin.split('\\n')[2 + i: i + 2 + M]] for i in range(M)]\n        return N, M, key_costs\n\n    def solution(stdin: str) -> str:\n        N, M, key_costs = get_data(stdin)\n        cheapest_key_purchase = min(key_costs, key=lambda key_cost: key_cost[0])[0]\n        if N < cheapest_key_purchase:\n            return -1\n        return sum(num * cheapest_key_purchase for num in key_costs)\n\n    return str(solution(stdin))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split('*')\n    sum = 0\n    for x in expression:\n        if len(x)!= 0:\n            sum += int(x)\n    return str(sum)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('+')\n    a = map(lambda x: x.split('*'), a)\n    a = list(map(lambda x: [int(y) for y in x], a))\n    a = list(map(lambda x: reduce(lambda a, b: a * b, x), a))\n    print(reduce(lambda a, b: a + b, a))\n\n\nsolution(input())\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\" \", \"\")\n    print(\" \".join([\"\".join(stdin.split(\"+\")), \"\".join(stdin.split(\"*\"))]))\n    return\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    left = []\n    right = []\n    for i in stdin:\n        if i == '+':\n            left.append('(')\n            right.append(')')\n        elif i == '*':\n            left.append('(')\n            right.append('*')\n        elif i == ')':\n            if left[-1]!= '(':\n                right.append(')')\n            elif left[-1] == '(':\n                left.pop()\n                right.append(')')\n        else:\n            left.append(i)\n    left.reverse()\n    right.reverse()\n    string = []\n    for i, j in zip(left, right):\n        string.append(i)\n        string.append(j)\n    return ''.join(string)\n\n\n\ndef"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input:\n    stdin: a string of scales.\n    output:\n    if it is possible to balance the scales, return the description of the balanced scales\n    otherwise, return impossible\n    '''\n    \n    #split the input\n    left, right = stdin.split('|')\n    \n    #split the left pan\n    left_pan = []\n    for letter in left:\n        left_pan.append(letter)\n    \n    #split the right pan\n    right_pan = []\n    for letter in right:\n        right_pan.append(letter)\n    \n    #calculate the sum of weights\n    left_sum = 0\n    for weight in left_pan:\n        left_sum += int(weight)\n    right_sum = 0\n    for weight in right_pan:\n        right_sum += int(weight)\n    \n    #check if it is possible to balance the scales\n    if left_sum == right_sum:\n        return left + '|' + right\n    else:\n        return \"Impossible\"\n\nprint(solution(\"AC|T\")) #AC|TL\nprint(solution(\"|ABC\")) #Impossible\nprint(solution(\"W|T\")) #Impossible\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    left, right = stdin.split('|')\n    left = set(left)\n    right = set(right)\n    for w in right:\n        if w not in left:\n            return 'Impossible'\n    left.difference_update(right)\n    right.difference_update(left)\n    return ''.join(sorted(left)) + '|' + ''.join(sorted(right))\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    left_scales, right_scales = stdin.split('|')\n    weights_to_put_on_scales = set(left_scales + right_scales)\n    remaining_weights = set(stdin) - weights_to_put_on_scales\n    if len(remaining_weights) > 0:\n        return 'Impossible'\n    return left_scales + right_scales\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('|')\n    b = list(stdin)\n    l = list(stdin)\n    for c in b:\n        if c!= '|' and c not in a:\n            l.remove(c)\n    if len(a[0]) == len(a[1]) and len(l) > 0:\n        print(f'{l[0]}|{a[1]}')\n    else:\n        print('Impossible')\n    \n    return ''\nsolution(input())\n    \n    \n    \n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AC|T\")\n    'AC|TL'\n    >>> solution(\"|ABC\")\n    'ABC|'\n    >>> solution(\"W|T\")\n    'Impossible'\n    >>> solution(\"ABC|\")\n    'Impossible'\n    >>> solution(\"F|\")\n    'F|'\n    \"\"\"\n    s = stdin.split(\"|\")\n    s = [i for i in s if len(i) > 0]\n    for i in s:\n        print(i, end=\"|\")\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    t = Counter(stdin.replace('|', ''))\n    r = Counter({k: v for k, v in t.items() if k not in t})\n    return '|'.join(sorted(r, key=r.get)) if not r else 'Impossible'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    a = s.split('|')\n    a = [e for e in a if e!= '']\n    m = {}\n    for i, e in enumerate(a):\n        m[e] = i\n    m['x'] = len(a)\n    for e in a:\n        if e[0] =='':\n            a[m[e[1:]]] = a[m[e[1:]]] + e[1:]\n        else:\n            a[m[e]] = a[m[e]] +'' + e\n    a = [e.split() for e in a]\n    s = [sum([int(e[0]) for e in a[i]]) for i in range(len(a))]\n    for e in a:\n        for i in range(len(e)):\n            if e[i][0] =='':\n                e[i] = e[i][1:]\n    for e in a:\n        e[m[e[0]]] = e[m[e[0]]] + '|' + e[0]\n        del e[0]\n    if s[0]!= s[1]:\n        return \"Impossible\"\n    a = [e[0] for e in a]\n    a.sort()\n    return '|'.join(a)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    l = stdin.split('|')\n    print(l)\n    \n    l1 = list(l[0])\n    l2 = list(l[1])\n    \n    d = {}\n    for c in l1:\n        d[c] = d.get(c, 0) + 1\n    \n    for c in l2:\n        d[c] = d.get(c, 0) - 1\n    \n    print(d)\n    \n    s1, s2 = sum(d.values()), 0\n    if s1!= s2:\n        return \"Impossible\"\n    \n    return f\"{l1}|{l2}\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.split(\"|\")\n    if len(l) > len(r):\n        return \"Impossible\"\n    \n    return \"|\".join(l + r[len(l):])\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    left = stdin.split(\"|\")[0]\n    right = stdin.split(\"|\")[1]\n    weights = stdin.split(\"|\")[2]\n    for weight in weights:\n        if weight in left:\n            right = right.replace(weight, \"\")\n            left = left.replace(weight, \"\")\n        else:\n            left = left.replace(weight, \"\")\n            right = right.replace(weight, \"\")\n    if left == \"\":\n        left = \"W\"\n    if right == \"\":\n        right = \"W\"\n    print(\"{0}|{1}\".format(left, right))\nsolution(input())\n\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return str(x - z) +'' + str(y - z)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(x) for x in stdin.split(\" \")]\n    return \" \".join([str(max(x, y)), str(min(x, y))])\n    "
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split(' ')]\n    \n    return str(max(x // z, y // z)) +'' + str(min(x // z, y // z))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split('\\n')[0].split())\n    return str(max(x + y - z, x + z - y, y + z - x)) +'' + str(min(x, y, z))\n\n---\n\"\"\"\n\n\ndef"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    # return str(max(x // z, y // z, x // y, x // y - 1))\n    return str(max(0, x // z - y // z, x // y, x // y - 1))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return str(max(0, x - z) + max(0, y - z)) +'' + str(min(x, y - z))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = (int(input()) for _ in range(3))\n    return [max(x - z, y - z), min(x, y) + z]"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if z >= x + y:\n        return str(x + y - 1) +'' + str(0)\n    else:\n        if z % y == 0:\n            return str(x + (z // y) - 1) +'' + str(0)\n        else:\n            x, y, z = map(lambda x: str(x), (x, y, z))\n            return str(x + (z // y) - 1) +'' + str((z % y) - 1)"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split()]\n    d = {}\n    # add all x to d\n    for i in range(x+1):\n        d[i] = i\n    # go through every y\n    for i in range(y):\n        # add all possible combinations of x to y\n        for j in range(x+1):\n            # subtract as many x as possible from y\n            d[j] = min(d[j], x - j)\n    # remove as many x as possible from d to get the number of coconuts\n    coconuts = 0\n    while x > 0:\n        coconuts += d[x]\n        x -= d[x]\n    # remove as many x as possible from d to get the number of chizhiks\n    chizhiks = 0\n    while y > 0:\n        chizhiks += d[y]\n        y -= d[y]\n    return str(coconuts) +'' + str(chizhiks)\n\nsolution('5 4 3')"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(n) for n in stdin.split()]\n    return str(x - y + (x + z - z // 2) // 2) +'' + str(x - y + (z + x - z // 2) // 2)"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\nx1, y1 = map(int, stdin.split())\nx2, y2 = map(int, stdin.split())\nx3, y3 = map(int, stdin.split())\n\n    #        (x1, y1)\n    # (x2, y2)   (x3, y3)\n    #                \\\n    #                \\\n    #                \\ (x4, y4)\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n-----------------------\n\nhttps://codeforces.com/problemset/problem/1396/A\n\nx1 y1\nx2 y2\n\n- 1 1\n0 1\n\nx2 - 1\nx1 - 1\n\ny2 + 1\ny1 + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nfrom itertools import permutations\n\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, solution_))\n\nsolution('0 0\\n1 0\\n0 1')\n\"\"\"\n\nimport itertools\nimport math\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    data = list(map(int, stdin.split(\" \")))\n\n    # calculate the max subarray sum\n    max_sum = 0\n    current_sum = 0\n    for i in range(days):\n        current_sum = current_sum + data[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    # find the number of folders\n    ans = 0\n    while max_sum >= 0:\n        ans += 1\n        max_sum = max_sum // 2\n\n    print(ans)\n    print(\" \".join(map(str, data)))\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if sum(a) >= 0:\n        return '0'\n    l, d, f = [], [], []\n    for i in range(n):\n        if a[i] > 0:\n            l.append(i)\n        elif a[i] < 0:\n            d.append(i)\n        else:\n            f.append(i)\n    num = [len(l), len(d), len(f)]\n    ans = min(num)\n    while min(num) == ans:\n        if ans == 0:\n            break\n        if num[0] >= 2:\n            num[0] -= 2\n            num[1] += 2\n        elif num[0] == 1:\n            num[0] -= 1\n            num[1] += 1\n        elif num[1] >= 2:\n            num[1] -= 2\n            num[2] += 2\n        elif num[1] == 1:\n            num[1] -= 1\n            num[2] += 1\n        elif num[2] >= 2:\n            num[2] -= 2\n            num[0] += 2\n        elif num[2] == 1:\n            num[2] -= 1\n            num[0] += 1\n        ans = min(num)\n    return ans\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    reports = list(map(int, stdin.readline().strip().split(' ')))\n    left = [0]\n    for i in range(n):\n        left.append(left[-1] + reports[i])\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + left[i]\n        dp[i] %= 1000000007\n    k = int(stdin.readline().strip())\n    ans = [0] * (k + 1)\n    ans[1] = dp[k] % 1000000007\n    for i in range(1, k):\n        ans[i + 1] = (ans[i] + dp[k - i]) % 1000000007\n    return ans[k]\n\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    data = stdin.split(\"\\n\")[1].split()\n    data = list(map(lambda x: int(x), data))\n\n    res = 0\n    count = 1\n    for i in range(1, len(data)):\n        if data[i] >= data[i - 1]:\n            count += 1\n        else:\n            res = max(res, count)\n            count = 1\n    return res\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''11\n   ... 1 2 3 -4 -5 -6 5 -5 -6 -7 6''')\n    3\n    >>> solution('''5\n   ... 0 -1 100 -1 0''')\n    1\n    >>> solution('''7\n   ... 1 -1 -1 -1 -1 3 3 3''')\n    1\n    >>> solution('''11\n   ... 1 2 3 -4 -5 -6 5 -5 -6 -7 6\n   ... 5 7 -4 8 -2 2 -9 4 -6''')\n    3\n    >>> solution('''11\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n   ... 0 -1 100 -1 0\n    "
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = int(stdin.readline()), tuple(map(int, stdin.readline().split()))\n    if n == 1:\n        return 1\n    d = {x: i for i, x in enumerate(a) if x >= 0}\n    r = set(d.values())\n    c = collections.Counter(d.values())\n    r -= {0}\n    if len(r) > 2:\n        return 2\n    elif len(r) == 1:\n        i, j = r.pop(), 0\n        if c[i] > 1:\n            return 2\n        for k in r:\n            if k - i < j - k:\n                i, j = k, k - i\n        if d[a[i]] > d[a[j]]:\n            return 2\n        return 1\n    return len(r)\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    days_a = a[:days]\n    count = 0\n    while len(days_a) > 0:\n        if max(days_a) < 0:\n            count += 1\n            days_a.remove(max(days_a))\n        else:\n            break\n    return count\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    sequence = [1]\n    for i in range(n - 1):\n        sequence.append(sequence[-1] + 1)\n        sequence.append(min(sequence[-1] + 1, n - 1))\n    sequence = sorted(sequence)\n    return sequence[k - 1]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.split())\n\ndef"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    seq = [1]\n    for i in range(n - 1):\n        seq.append(min([s for s in range(1, seq[-1] * 2 + 1) if s not in seq]))\n    return str(seq[k - 1])\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = [int(x) for x in stdin.split()]\n    print(solution_bit_len(n, k))\n    \n    \ndef"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    k %= (1 << n) - 1\n    sequence = [1]\n    for _ in range(n - 1):\n        sequence.append(1 + min(sequence[i] for i in range(len(sequence) - 1) if sequence[i]!= sequence[i + 1]))\n    return sequence[k]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and return result\"\"\"\n    # Get input\n    n, k = [int(num) for num in stdin.split(' ')]\n    \n    # Get initial sequence\n    initial_sequence = [1]\n    \n    for _ in range(n - 1):\n        initial_sequence = [min(x, y) for x, y in zip(initial_sequence, initial_sequence[1:] + [0])]\n    \n    # Get final sequence\n    final_sequence = initial_sequence[:k]\n\n    # Get result\n    result = final_sequence[k - 1]\n\n    return str(result)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = list(map(int, stdin.split()))\n    s = [1]\n    for i in range(n - 1):\n        s.append(min(s[i] * 2, k))\n        k = k - s[i] * 2 + 1\n    return s[-1] % (10 ** 9 + 7)"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = [1]\n    while len(seq) < n:\n        new_seq = [1]\n        for i in range(1, len(seq)):\n            new_seq.append(min(k // i, seq[i - 1]))\n        new_seq.append(1)\n        for i in range(len(seq) - 2, -1, -1):\n            new_seq.append(min(k // i, seq[i]))\n        new_seq.append(1)\n        seq = new_seq\n    return str(seq[k - 1])\n'''\n\ndef"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = [1]\n    for _ in range(n - 1):\n        seq.append(min(seq[-1] + 1, max(seq[-1] - 1, 1)))\n    return seq[k - 1]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = b - a\n    n = 1\n    while c > 0:\n        if (a + n) % 60 == 0:\n            c = 0\n        elif (b - n) % 60 == 0:\n            c = 0\n        elif (a + n) % 60 == 1 and (b - n) % 60 == 1:\n            c = 0\n        else:\n            n += 1\n    return str(n)\n\n\ndef"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    if a_1 == 0:\n        return a_2\n    if a_2 == 0:\n        return a_1\n    a_1 -= 1\n    a_2 -= 1\n    res = 0\n    while True:\n        res += 1\n        if a_1 <= 0 and a_2 <= 0:\n            return res\n        a_1 -= 2\n        if a_1 >= 0:\n            a_1 += 1\n        a_2 -= 1\n        if a_2 >= 0:\n            a_2 += 1\n        if a_1 <= 0 and a_2 <= 0:\n            return res\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    charger = 0\n    count = 0\n    while a_1 > 0 and a_2 > 0:\n        if charger:\n            if a_1 < 100:\n                a_1 += 1\n            else:\n                a_1 -= 2\n            charger = 0\n        else:\n            if a_2 < 100:\n                a_2 += 1\n            else:\n                a_2 -= 2\n            charger = 1\n        count += 1\n    return count\nprint(solution(input()))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    b -= a\n    if b <= 0:\n        return \"NO\"\n    return \"YES\" if b % 4 == 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    m = min(a_1, a_2)\n    c_1, c_2 = 0, 0\n    c = 0\n    while m!= 0 and m!= 100:\n        if m > 100:\n            c_2 += m - 100\n        if c_1 < c_2:\n            c_1 += m + 1\n        else:\n            c_2 += m + 1\n        m = min(a_1 - c_1, a_2 - c_2)\n        c += 1\n    return c\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a > 0 and b > 0:\n        if (a + b) % 100 == 0:\n            return int((a + b) // 100)\n        else:\n            return int((a + b) // 100 + 1)\n    return 0\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    battery_charge = list(map(int, stdin.split()))\n    minutes = 0\n    charge_minutes = {}\n\n    for i in range(60):\n        charge_minutes[i] = battery_charge[0]\n        charge_minutes[i + 120] = battery_charge[1]\n\n    while True:\n        max_charge_minute = max(charge_minutes, key=lambda key: charge_minutes[key])\n        if charge_minutes[max_charge_minute] < 0:\n            break\n\n        charge_minutes[max_charge_minute] -= 1\n\n        if charge_minutes[max_charge_minute] < 0:\n            minutes += 1\n        elif charge_minutes[max_charge_minute] == 0:\n            break\n\n    return minutes\n\nprint(solution(input()))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = list(map(int, stdin.split(' ')))\n    chargers = 0\n    result = 0\n    while True:\n        if chargers < 0:\n            break\n        if a_1 > 0 and a_2 > 0:\n            if chargers < 1:\n                result += 1\n            chargers += 1\n            if chargers == 1:\n                a_1 -= 1\n            else:\n                a_2 -= 1\n        elif a_1 < 0 and a_2 > 0:\n            if chargers < 2:\n                result += 1\n            chargers += 1\n            if chargers == 2:\n                a_1 += 1\n            else:\n                a_2 += 1\n        elif a_1 < 0 and a_2 < 0:\n            if chargers < 3:\n                result += 1\n            chargers += 1\n            if chargers == 3:\n                a_1 += 1\n                a_2 += 1\n        elif a_1 > 0 and a_2 < 0:\n            if chargers < 4:\n                result += 1\n            chargers += 1\n            if chargers == 4:\n                a_1 -= 1\n                a_2 += 1\n        else:\n            if chargers < 5:\n                result += 1\n            chargers += 1\n            if chargers == 5:\n                a_1 -= 2\n                a_2 -= 2\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b > a:\n        a, b = b, a\n    a, b = max(a, 1), min(b, 100)\n    ans = 0\n    while a > b:\n        if a >= 100:\n            break\n        a += 100 - a\n        ans += 1\n    return ans\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2 = [int(x) for x in stdin.split()]\n    start = [a1, a2]\n    start = sorted(start)\n    minutes = 0\n    while True:\n        if start[0] == 0 or start[1] == 0:\n            return str(minutes)\n        for i in range(2):\n            if start[i] == 0:\n                minutes += 1\n                break\n            elif start[i] > 0:\n                if start[i] - 2 < 0:\n                    start[i] = 0\n                else:\n                    start[i] -= 2\n                break\n            elif start[i] < 0:\n                start[i] = 0\n                minutes += 1\n                break\n\nprint(solution(input()))\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, k = map(int, stdin.split(' '))\n    cnt = collections.Counter(map(int, stdin.split(' ')))\n    ans = 0\n    for i in range(1, n + 1):\n        ans += cnt[i] * i\n    ans = ans // n\n    for i in range(1, n + 1):\n        for _ in range(m):\n            if cnt[i] > 0 and k > 0:\n                ans += 1\n                cnt[i] -= 1\n                cnt[i + 1] += 1\n                k -= 1\n            else:\n                break\n    return ans"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    ps = list(map(int, stdin.split()))\n    q = [0] * n\n    for _ in range(k):\n        q = [max(p + 1, q[i]) for i, p in enumerate(ps)]\n        ps = [max(q[i], p - 1) for i, p in enumerate(ps)]\n    return sum(ps) / len(ps)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # n, k, m = list(map(int, stdin.split()))\n    # a = list(map(int, stdin.split()))\n    #\n    # a.sort()\n    #\n    # # a[i] - a[j] <= m\n    # #\n    # # a[i] - a[j] <= m - k\n    # # a[i] - a[j] + k <= m\n    # # k <= m\n    # # (m - k) + k <= m\n    # # m - 2k <= m\n    # # 2k <= m\n    # # k <= m//2\n    # m = min(m, 2*k)\n    #\n    # ans = 0\n    # # print(a)\n    #\n    # for i in range(m):\n    #     ans += a[-1] - a[i]\n    #     a.pop()\n    #     if i < m-k:\n    #         a[i] += 1\n    #\n    # ans /= m\n    #\n    # return ans\n\n    # n, k, m = list(map(int, stdin.split()))\n    # a = list(map(int, stdin.split()))\n    #\n    # a.sort()\n    #\n    # m = min(m, 2 * k)\n    # ans = 0\n    #\n    # for i in range(m):\n    #     ans += a[-1] - a[i]\n    #     a.pop()\n    #     if i < m - k:\n    #         a[i] += 1\n    #\n    # ans /= m\n    #\n    # return ans\n\n    # n, k, m = list(map(int, stdin.split()))\n    # a = list(map(int, stdin.split()))\n    # a.sort()\n    #\n    # max_pow = a[-1] - a[0]\n    # min_pow = a[0]\n    #\n    # for i in range(n):\n    #     if a[i] - a[0] <= max_pow:\n    #         max_pow = a[i] - a[0]\n    #\n    # for i in range(n):\n    #     if a[0] + k <= a[i] <= a[0] + k + m - 1:\n    #         min_pow = min(a[0] + k, a[i])\n    #\n    # if min_pow == a[0]:\n    #     min_pow += 1\n    #\n    # print(min_pow)\n    # print(max_pow)\n    #\n    # ans = 0\n    #\n    # for i in range(n):\n    #     if a[i] - min_pow >= 0:\n    #         ans += (a[i] - min_pow)\n    #\n    # ans /= (m + k)\n    #\n    # return ans\n\n    n, k, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    max_pow = a[-1] - a[0]\n    min_pow = a[0]\n\n    for i in range(n):\n        if a[i] - min_pow <= max_pow:\n            max_pow = a[i] - min_pow\n\n    print(min_pow + k + m - 1 - max_pow)\n\n    return min_pow + k + m - 1 - max_pow\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    powers = list(map(int, stdin.split()))\n    powers.sort()\n    avg = 0\n    # print(powers)\n    for i in range(n):\n        avg += powers[i]\n        if k < m:\n            avg += 1\n            k += 1\n        else:\n            break\n    # print(avg)\n    return str(avg/k)\n\n\n\ndef"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p.sort()\n    res = p[0]\n    for i in range(1, n - k + 1):\n        res = max(res, p[i + k - 1] - p[i - 1])\n    return res\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"your answer here\""
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... 2 4 6\n   ... 4 7\n   ... \"\"\")\n    '11.0'\n    >>> solution(\"\"\"\n   ... 4 2 6\n   ... 1 3 2 3\n   ... \"\"\")\n    '5.0'\n    \"\"\"\n    n, k, m = list(map(int, stdin.split()))\n    powers = list(map(int, stdin.split()))\n    return str(solve(n, k, m, powers))\n\n\ndef"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(s) for s in stdin.split('\\n')[0].split()]\n    arr = [int(s) for s in stdin.split('\\n')[1].split()]\n    ans = 0\n    res = []\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                res.append(sum(arr[:i] + arr[j:k] + arr[k:]))\n    res.sort(reverse=True)\n    for x in res[:K]:\n        ans += x\n    return ans / M"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 2 6\\n1 3 2 3')\n    '5.00000000000000000000'\n    >>> solution('4 2 6\\n2 1 4')\n    '9.2857142857142857'\n    >>> solution('4 2 6\\n4 4')\n    '11.00000000000000000000'\n    \"\"\"\n    n, k, m = map(int, stdin.split())\n    pow_list = list(map(int, stdin.split()))\n    ans = sum(pow_list)\n    while k > 0 and m > 0:\n        ans += pow_list[0] - pow_list[1]\n        pow_list[0] += pow_list[1]\n        pow_list[1] += pow_list[1]\n        pow_list.pop(1)\n        m -= 1\n        k -= 1\n    return str(ans / n)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n    # Write your code here\n    a.sort()\n    average = 0\n    for i in range(n):\n        average += a[i]\n    average /= n\n    print(average)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # import math\n    n = int(stdin)\n    # if n == 1:\n    #     return 1\n    # return -1 + 2 - 3 + 4 + -6 + 9 + 8 + 7 + -8 + -10 + -12\n    return (-1)**(n+1) * (n+1)\n\n\"\"\"\n\nimport unittest\n\n\nclass Test0(unittest.TestCase):\n\n    def test_examples(self):\n        self.assertEqual(solution(\"4\"), 2)\n        self.assertEqual(solution(\"5\"), -3)\n        self.assertEqual(solution(\"6\"), -3)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return sum(range(-1, n))\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    result = 0\n    \n    for i in range(1, n + 1):\n        result -= i\n        result += i * i\n    \n    return str(result)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate f(n) for a given positive integer n.\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: Answer\n    \"\"\"\n    n = int(stdin)\n    return str(sum([-1 ** i for i in range(1, n + 1)]))\n\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - (sum([-1 + i * i for i in range(1, int(stdin) + 1)])))\n\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return -1\n    elif n == 2:\n        return 1\n    else:\n        return -3 + solution(n - 1)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n < 1:\n        return 0\n    else:\n        return sum(int(n)**x for x in range(n+1))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    f_n = 0\n    for i in range(1, n + 1):\n        f_n += (-1) ** i * i\n    return str(f_n)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(solution_helper(n))\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    stdin = [int(i) for i in stdin]\n    stdin.sort()\n    stdin.reverse()\n    l = len(stdin)\n    a = 0\n    for i in range(n):\n        if i == 0:\n            if a < stdin[i]:\n                a = stdin[i]\n        else:\n            if a > stdin[i]:\n                a = stdin[i]\n    stdin.sort()\n    l = len(stdin)\n    a = 0\n    for i in range(n):\n        if i == 0:\n            if a < stdin[i]:\n                a = stdin[i]\n        else:\n            if a > stdin[i]:\n                a = stdin[i]\n    return a\n\n\n\ndef"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(A: list) -> int:\n        if len(A) == 1:\n            return 0\n        elif len(A) == 2:\n            return 1\n        else:\n            return 2 + min(solve(A[:-1]), solve(A[1:]))\n\n    return solve(list(map(int, stdin.split())))\n\n\ndef"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    dp = [[False] * n for _ in range(n)]\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = True\n        for j in range(i + 1, n):\n            dp[i][j] = abs(a[i] - a[j]) == j - i\n            if dp[i][j]:\n                ans += 1\n    return ans\n\nprint(solution(sys.stdin.read()))\n\n\"\"\""
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    parts = [int(x) for x in stdin.readline().split(' ')]\n    if n <= 1:\n        return '0'\n    parts.sort()\n    min_changes = 0\n    for i in range(1, len(parts)):\n        diff = parts[i] - parts[i - 1]\n        if diff > 1:\n            min_changes += diff - 1\n    return str(min_changes)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get the input\n    # and the number of pieces of information\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    # print(numbers)\n\n    # Initialize a dict to store the pieces of information and the minimum number of movements\n    # I will start the algorithm at computer 2, because computer 1 is the one where I can't reach any piece of information\n    piecesOfInformation = dict()\n    piecesOfInformation[2] = 0\n    minNumberOfMovements = 0\n    # I will continue until I get all the pieces of information\n    while len(piecesOfInformation) < n:\n        # First I will get the number of pieces of information that computer 2 can reach\n        # If that number is greater than the minimum number of movements so far, I will update it\n        # This will prevent from having more than the minimum number of movements to collect all the pieces of information\n        # The idea is to get the minimal number of movements to collect all the pieces of information, but not to go through the entire loop\n        minNumberOfMovements = n - len(piecesOfInformation) if n - len(piecesOfInformation) > minNumberOfMovements else minNumberOfMovements\n        # Now I will continue to get the computer with the smallest number of pieces of information\n        # from which I can reach at least one more piece of information\n        piecesOfInformation[min(piecesOfInformation.keys(), key=lambda key: piecesOfInformation[key])) + 1] = 0\n\n    # If I get the minimum number of movements, I will print it\n    print(minNumberOfMovements)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split(' ')\n    a = list(map(int, a))\n    a = {k: v for k, v in enumerate(a)}\n    ans = 0\n    for k, v in a.items():\n        x = abs(k - (v - 1))\n        if x > k:\n            x = 2 * k - x\n        ans += x\n    return ans\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n\"\"\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    changes = 0\n    i = 0\n    while i < n - 1:\n        if a[i] > 0 and a[i + 1] > 0:\n            if a[i] > a[i + 1]:\n                changes += 1\n                i += 1\n            else:\n                changes += 1\n                i += 2\n        elif a[i] > 0:\n            changes += 1\n            i += 1\n        elif a[i + 1] > 0:\n            changes += 1\n            i += 2\n        else:\n            i += 2\n    return changes\n\ndef"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The complexity of this algorithm is O(n) in time and O(n) in space\n    '''\n    _, *inp = map(int, stdin.split(' '))\n    sorted_inp = sorted(inp)\n    ind, ret = 0, 0\n\n    for i in range(1, len(sorted_inp)):\n        ind = i - 1 if sorted_inp[i - 1] < sorted_inp[i] else i\n        ret += ind - i\n\n    return ret\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    computers = list(map(int, stdin.split()))\n    n = len(computers)\n    visited = [False] * n\n    visited[0] = True\n    num_changes = 0\n    curr_num = 0\n    for i in range(n):\n        if visited[i] == True:\n            if i < n - 1:\n                if computers[curr_num] == computers[i + 1]:\n                    visited[i + 1] = True\n                    curr_num = i + 1\n                else:\n                    num_changes += 1\n                    curr_num = i + 1\n            else:\n                num_changes += 1\n                curr_num = 0\n    return num_changes\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return s[0]\n        return s\n    n = len(s)\n    k = n - 1\n    while k > 0 and s[k - 1] > s[k]:\n        k -= 1\n    if k == 0:\n        return s\n    x = s[k - 1]\n    i = n - 1\n    while i >= 0 and s[i] > x:\n        i -= 1\n    s = s[:k - 1] + s[i + 1:]\n    return solution(s)"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    # your code here\n    return s\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) < 2:\n        return s\n    return s[:len(s) - 1]\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = [s]\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i!= j:\n                temp = s[0:i] + s[i + 1:j] + s[j + 1:]\n                if temp < ans[0]:\n                    ans = [temp]\n                elif temp < ans[0]:\n                    ans = [temp]\n    return ans[0]"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    s.sort()\n    for i in range(len(s)):\n        if s[i]!= s[-1]:\n            break\n    s.pop(i)\n    s = \"\".join(s)\n    return s"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return stdin[:len(stdin)-1]\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    result = \"\"\n    length_string = len(input_string)\n    counter = 0\n    for index in range(length_string):\n        if input_string[index] < result[-1]:\n            for char in result[-1::-1]:\n                if char < input_string[index]:\n                    result = result[:-1]\n                    result += char\n                    break\n        elif input_string[index] > result[0]:\n            for char in input_string[index]:\n                if char < result[0]:\n                    result = char + result\n                    break\n        result += input_string[index]\n    return result\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def func(n, k):\n        pass\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"7 3\\n3 14 15 92 65 35 89\\n\")\n    64\n    '''\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    if n <= k:\n        return sum(books[0:n])\n    return max((\n        sum(books[0:i]) * (n // k)\n        for i in range(1, k + 1)\n        if i * (n // k) <= n\n    ))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Idea:\n        - calculate the beauty of every possible combination of books (0-1 Knapsack)\n        - we choose the maximum one\n    Complexity:\n        Time: O(n * 2^n)\n        Space: O(2^n)\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    books = [int(x) for x in stdin.readline().split()]\n    if k == 1:\n        return sum(books)\n    # calculate the beauty of all possible combinations of books\n    beauty_list = [calculate_beauty(books, i) for i in range(2**n)]\n    # calculate the maximum beauty of k shelves\n    return max(beauty_list)\n\n\ndef"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    #print(a)\n    for i in range(n):\n        a[i] = a[i] & (1 << (i+1))\n    #print(a)\n    for i in range(1, n+1):\n        k = k & (1 << i)\n    print(k)\n    return a\n\nprint(solution(input()))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    s = 0\n    for i in range(k):\n        s = s ^ a[i]\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    nums = sorted(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(k):\n        res = max(res, sum(nums[i:i+n]))\n    print(res)\n\n\ndef"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    l = [int(x) for x in stdin.split(' ')]\n    l.sort()\n    sol = 0\n    while k!= 0:\n        sol = sol + l[n - k]\n        k = k - 1\n    return sol\n\nprint(solution('10 4'))\nprint(solution('7 3'))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 3\n   ... 3 2 1\n   ... 3 2 2 3''')\n    '12'\n    >>> solution('''3\n   ... 1 2\n   ... 3 3\n   ... 2 1 3''')\n    '11'\n    >>> solution('''2\n   ... 1\n   ... 1\n   ... 1 1''')\n    '4'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    m = int(stdin.split('\\n')[1])\n    a = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n    b = [int(i) for i in stdin.split('\\n')[3].split(' ')]\n    m_ = m + 1\n    a_ = []\n    for i in range(1, m):\n        a_.append(a[i - 1])\n    b_ = []\n    for i in range(1, n):\n        b_.append(b[i - 1])\n\n    a_.append(1)\n    b_.append(1)\n    ans = m_ * n\n    for i in range(n):\n        for j in range(m_):\n            ans = min(ans, a_[j] + b_[i] + j)\n    return str(ans)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(input_str: str) -> bool:\n        # input:  a b c d e f\n        # output: 1 2 3 4 5 6\n\n        n = int(input_str[0])\n\n        # a is the amount of houses\n        houses = []\n        for i in range(1, n + 1):\n            houses.append(int(input_str[i]))\n\n        # b is the amount of crossing\n        crossing = []\n        for i in range(n + 1, 2 * n + 1):\n            crossing.append(int(input_str[i]))\n\n        # c is the amount of traffic lights\n        traffic_lights = []\n        for i in range(2 * n + 1, 3 * n + 1):\n            traffic_lights.append(int(input_str[i]))\n\n        return len(crossing) == n and n > 0 and len(traffic_lights) == n\n\n    # input:  a b c d e f\n    # output: a b c d e f\n    input_str = stdin.strip()\n\n    if not is_valid(input_str):\n        return \"Invalid input\"\n\n    # a is the amount of houses\n    houses = []\n    for i in range(1, int(input_str[0]) + 1):\n        houses.append(int(input_str[i]))\n\n    # b is the amount of crossing\n    crossing = []\n    for i in range(int(input_str[0]) + 1, 2 * int(input_str[0]) + 1):\n        crossing.append(int(input_str[i]))\n\n    # c is the amount of traffic lights\n    traffic_lights = []\n    for i in range(2 * int(input_str[0]) + 1, 3 * int(input_str[0]) + 1):\n        traffic_lights.append(int(input_str[i]))\n\n    # e is the amount of streets\n    streets = []\n    for i in range(3 * int(input_str[0]) + 1, 3 * int(input_str[0]) + 1 + int(input_str[1])):\n        streets.append(int(input_str[i]))\n\n    return streets[0] + min(crossing[0], crossing[-1])\n\n\"\"\""
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_score(a: str, b: str) -> int:\n        score_a = sum(int(x) for x in a)\n        score_b = sum(int(x) for x in b)\n        return score_a - score_b\n    a, b = stdin.split(\"\\n\")\n    print(count_score(a, b))\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *matrix = [int(x) for x in stdin.split()]\n    c = [[matrix[i + j] for j in range(n - 1)] for i in range(n)]\n    matrix = []\n    for i in range(n):\n        line = [matrix[j] for j in range(n - 1)]\n        matrix.append(line)\n    return (n - 2) * 2 + min(c[0][0] + c[0][1], c[1][0] + c[1][1]) + min(c[0][0] + c[0][2], c[1][1] + c[1][2])\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum total time he needs to wait at the crossroads.\"\"\"\n    # Get the input.\n    n = int(stdin)\n    matrix = []\n    for _ in range(2):\n        matrix.append([int(n) for n in stdin.split()])\n    b = [int(n) for n in stdin.split()]\n\n    # Initialize the distances.\n    distances = [[0] * n for _ in range(2)]\n    for i in range(2):\n        for j in range(n):\n            if i == 0:\n                distances[i][j] = matrix[i][j]\n            else:\n                distances[i][j] = matrix[i][j] + distances[0][j]\n\n    # Get the minimum total waiting time.\n    min_total = sum(distances[0]) + sum(b)\n    for i in range(2):\n        for j in range(n):\n            if i == 0:\n                if distances[i][j] > b[j]:\n                    distances[i][j] = b[j] + distances[0][j]\n                    min_total = min(min_total, distances[i][j])\n            else:\n                if distances[i][j] > matrix[i][j] + distances[0][j]:\n                    distances[i][j] = matrix[i][j] + distances[0][j]\n                    min_total = min(min_total, distances[i][j])\n    return min_total\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n1 2 3\\n3 2 1\\n3 2 2 3')\n    12\n    >>> solution('3\\n1 2\\n3 3\\n2 1 3')\n    11\n    >>> solution('2\\n1\\n1 1')\n    4\n    \"\"\"\n    rows = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    b = list(map(int, stdin.split('\\n')[2].split(' ')))\n    a.append(0)\n    b.append(0)\n    print(rows)\n    print(a)\n    print(b)\n\n    def dfs(l, r, t):\n        if l == rows and r == rows:\n            return t\n        print(l, r, t)\n        if l < rows:\n            t += a[l]\n        if l > 0:\n            t += b[l - 1]\n        if r < rows - 1:\n            t += b[r]\n        if r > 0:\n            t += a[r]\n        print(l, r, t)\n        return min(dfs(l + 1, r, t), dfs(l, r + 1, t))\n\n    return dfs(0, 0, 0)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gen_links(stdin: str) -> List[int]:\n        n, k = [int(x) for x in stdin.split(' ')]\n        links = []\n        for i in range(n):\n            msg = int(stdin.split(' ')[i])\n            if msg > 0:\n                links.append(msg)\n        return links\n\n    def solve(stdin: str) -> str:\n        def read_links(links: List[int], curr: int) -> int:\n            visited = set()\n            visited.add(curr)\n            ans = 1\n            while len(links) > 0:\n                next_msg = links.pop()\n                if next_msg in visited:\n                    continue\n                visited.add(next_msg)\n                ans += 1\n                links.append(next_msg)\n            return ans\n\n        links = gen_links(stdin)\n        ans = [read_links(links, x) for x in range(1, len(links) + 1)]\n        return''.join([str(x) for x in ans])\n\n    return solve(stdin)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return stdin\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    def get_message_history(user_history: List[int], message_links: List[int]) -> Tuple[List[int], List[int]]:\n        \"\"\"Given a sequence of message links, find all the unique messages that are linked to each other.\n\n        Args:\n            user_history: A list of message IDs.\n            message_links: A list of message IDs that link to other message IDs.\n\n        Returns:\n            A list of message IDs, and a list of lists of linked message IDs.\n        \"\"\"\n        history = []\n        link_history = []\n        history_set = set()\n        link_set = set()\n        for message in user_history:\n            if message not in history_set:\n                history.append(message)\n                history_set.add(message)\n        for message in message_links:\n            if message not in link_set:\n                link_history.append([message])\n                link_set.add(message)\n            else:\n                for i, l in enumerate(link_history):\n                    if message in l:\n                        link_history[i].append(message)\n        return history, link_history\n\n    n, k = map(int, stdin.readline().split())\n    message_links = list(map(int, stdin.readline().split()))\n\n    # Initialise history and link history with the user's message history\n    history, link_history = get_message_history(list(range(1, n + 1)), message_links)\n\n    # Use dynamic programming to compute the number of messages that can be read at each message id\n    history_numbers = [0] * (n + 1)\n    for message_id in history:\n        history_numbers[message_id] = 1\n    for i in range(k + 1):\n        for l in link_history:\n            for message_id in l:\n                history_numbers[message_id] += history_numbers[l[0]]\n    print(*history_numbers[1:])\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Reads in a str input\n    Returns str output\n\n    Time: O(n)\n    Space: O(n)\n    '''\n    data = parse_input(stdin)\n    messages = {}\n\n    for i in range(1, len(data)):\n        message = data[i]\n        for j in range(i - 1, i - data[i] - 1, -1):\n            if j in messages:\n                messages[j] += 1\n            else:\n                messages[j] = 1\n\n    ans = []\n    for key in sorted(messages.keys()):\n        ans.append(messages[key])\n    \n    return''.join(map(str, ans))\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\\\n   ... 6 0\n   ... 0 1 1 2 3 2\n   ... ''')\n    '1 2 2 3 3 3'\n    >>> solution('''\\\n   ... 10 1\n   ... 0 1 0 3 4 5 2 3 7 0\n   ... ''')\n    '2 3 3 4 5 6 6 6 8 2'\n    \"\"\"\n    n, k = [int(i) for i in stdin.split()]\n    links = [int(i) for i in stdin.splitlines()[1].split()]\n    # Eulerian path is a path in the graph that visits every edge exactly once\n    # (except for the starting and ending node).\n    # Given a graph with n nodes, we can make at most n - 2 edges.\n    # Eulerian path starts with 1 and finishes with n.\n    # So we have at most n - 2 connections.\n    num_of_messages = n - 2\n    messages = set()\n    connections = [0 for _ in range(n)]\n    for i in range(n):\n        if i - 1 >= 0 and links[i - 1]!= 0:\n            connections[i - 1] += 1\n        if i + 1 < n and links[i + 1]!= 0:\n            connections[i + 1] += 1\n    # Eulerian path with n - 1 connections\n    # has n - 1 vertices\n    # We want to find a path with n - 1 edges\n    # We can only start from 1 and end at n\n    # Every node other than 1 and n can be reached from 1 and n\n    # Can use DFS with backtracking to find a path\n    path = [1]\n    def dfs(curr):\n        if curr == n:\n            return True\n        for next in range(1, n + 1):\n            if curr!= next and connections[curr - 1] > 0 and connections[next - 1] > 0:\n                connections[curr - 1] -= 1\n                connections[next - 1] -= 1\n                path.append(next)\n                if dfs(next):\n                    return True\n                path.pop()\n                connections[curr - 1] += 1\n                connections[next - 1] += 1\n    dfs(1)\n    num_of_messages += len(path) - 1\n    # Eulerian path with one more connection\n    # has n vertices\n    # We want to find a path with n edges\n    # We can only start from 1 and end at n\n    # Can use DFS with backtracking to find a path\n    path = [1]\n    connections[0] += 1\n    def dfs(curr):\n        if curr == n:\n            return True\n        for next in range(1, n + 1):\n            if curr!= next and connections[curr - 1] > 0:\n                connections[curr - 1] -= 1\n                path.append(next)\n                if dfs(next):\n                    return True\n                path.pop()\n                connections[curr - 1] += 1\n    dfs(1)\n    num_of_messages += len(path) - 1\n    # Sort the connections by number of links\n    connections.sort()\n    count = 0\n    for connection in connections:\n        count += 1\n        if count > num_of_messages:\n            break\n        num_of_messages -= connection\n    return \" \".join(str(i) for i in path)\n    \n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns number of distinct messages you can read starting from message t for all t from 1 to n\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    links = [int(x) for x in stdin.split()]\n    counter = 0\n    seen = {}\n    while k > 0:\n        if not links[counter]:\n            counter += 1\n        else:\n            if links[counter] in seen:\n                seen[links[counter]] += 1\n            else:\n                seen[links[counter]] = 1\n            counter += 1\n            k -= 1\n    for value in seen.values():\n        counter += (value + 1) // 2\n    return str(counter)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it is possible to reorder the elements of a given array so that the sum of the inner summations is equal to a given value.\n\n    Args:\n        stdin (str): An input string.\n\n    Returns:\n        str: Yes if it is possible to reorder the elements, and No otherwise.\n    \"\"\"\n    data = [int(x) for x in stdin.split('\\n')[1].split()]\n    n, m = data[0], data[1]\n    data = data[2:]\n    sums = [0] * n\n    for i, x in enumerate(data, 1):\n        sums[i - 1] += x\n        sums[i - 1] //= i\n    for i in range(n):\n        if sums[i] == m:\n            return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def divisors(num):\n        divisors = set()\n        divisors.add(1)\n        for i in range(2, num + 1):\n            if i * i > num:\n                break\n            if num % i == 0:\n                divisors.add(i)\n                if num // i!= i:\n                    divisors.add(num // i)\n        return divisors\n\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = [int(x) for x in stdin.readline().strip().split(' ')]\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        for k in range(n):\n            a[k] = a[k] / k\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in divisors(m):\n                    if a[i] + a[j] / (j - i) == k:\n                        print(\"YES\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #!!!!!\n    return \"YES\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem\"\"\"\n    pass  # pylint: disable=W0105\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution computes the sum of all numbers in the array\n    (rounded to integers) and compares it to the given value.\n    For this to work, the array must be ordered, otherwise\n    the rounded sum will be greater than the given value.\n    If the array is ordered, then the condition is checked for\n    each element of the array, not for the whole array.\n\n    :param stdin: str\n    :rtype: str\n    \"\"\"\n\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    sum_nums = sum(nums)\n    if sum_nums < m:\n        return \"NO\"\n    else:\n        m_sub = m\n        for i in range(0, n):\n            sum_nums -= nums[i]\n            m_sub -= nums[i]\n            if sum_nums < m_sub:\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 8\\n2 5 1\\n4 4')\n    'YES'\n    >>> solution('3 8\\n0 1 2 3\\n4 4')\n    'NO'\n    >>> solution('3 8\\n0 1 2 3')\n    'NO'\n    \"\"\"\n    data = [int(i) for i in stdin.splitlines()]\n    a, b = data[0], data[1]\n    sum_a = sum(a)\n    sum_b = sum(b)\n    return 'YES' if abs(sum_b - sum_a) < 10 ** 6 else 'NO'\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n * log(n))\n    Space complexity: O(n)\n    \"\"\"\n    cases = int(stdin)\n    for i in range(cases):\n        n, m = [int(x) for x in stdin.split(\" \")]\n        a = [int(x) for x in stdin.split(\" \")]\n        i, k = 0, n - 1\n        while i < k:\n            if a[i] % k == 0:\n                break\n            k -= 1\n        if k == 0:\n            print(\"NO\")\n            continue\n        if sum(a[i : i + k] + a[:i] + a[i + k :]) == m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 8\n   ... 2 5 1\n   ... 4 4''')\n    'YES'\n    >>> solution('''4 4\n   ... 0 1 2 3''')\n    'NO'\n    >>> solution('''3 10\n   ... 4 1 0 5 2 7 3\n   ... 9 8 6 10 5 3 1''')\n    'YES'\n    >>> solution('''1 1\n   ... 0''')\n    'NO'\n    >>> solution('''3 10\n   ... 1 2 3\n   ... 4 5 6 7 8 9 10''')\n    'YES'\n    >>> solution('''2 10\n   ... 3 1''')\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    print(n+(k-1)*(n//2))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split('\\n')\n\ndef"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    'TODO: write your solution here'\n    def f(n):\n        if n == 1:\n            return 1\n        else:\n            return 1 + f(n // 2) if n % 2 == 0 else 1 + f(3 * n + 1)\n\n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        s = n\n        for _ in range(k):\n            s += f(s)\n        print(s)\n    return \"\"\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes solution to problem.\"\"\"\n    # TODO: Implement me\n    # pass\n    return \" \".join(stdin.split())\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity: O(T * N^2 * log(N))\n    \"\"\"\n    T = int(stdin)\n\n    def find_f(n):\n        if n == 1:\n            return 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return i\n        return n\n\n    for i in range(T):\n        n, k = list(map(int, stdin.strip().split()))\n        f_n = find_f(n)\n        while k > 0:\n            n += f_n\n            f_n = find_f(n)\n            k -= 1\n        print(n)"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_f(n):\n        for i in range(2, int(n**0.5)):\n            if n % i == 0:\n                return i\n        return n\n\n    def gcd(a, b):\n        return a if b == 0 else gcd(b, a % b)\n\n    t = int(stdin)\n    for _ in range(t):\n        n, k = map(int, stdin.split(' '))\n        print(n + find_f(n))\n        \n        if k > 1:\n            g = gcd(n, k)\n            print(n//g + find_f(n//g))\n        \n        print(n + find_f(n))\n        \n        if k > 1:\n            g = gcd(n, k)\n            print(n//g + find_f(n//g))"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\""
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        return 3 * n + 1\n\n    for _ in range(int(stdin.split(\"\\n\")[0])):\n        print(f(int(stdin.split(\"\\n\")[1])) + int(stdin.split(\"\\n\")[2]))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert solution(\"5 6\") == \"Impossible\"\nassert solution(\"6 12\") == \"Impossible\"\n\"\"\"\n\n\"\"\"\n--Solution--\n\nBrute force approach:\nFor each edge, try all permutations of other edges and find out if the graph is relatively prime.\nO(N^3)\n\"\"\"\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split(' ')]\n    edges = []\n    for _ in range(m):\n        edges.append([int(s) for s in stdin.split(' ')])\n\n    g = nx.Graph()\n    g.add_nodes_from(range(1, n + 1))\n    g.add_edges_from(edges)\n\n    if not nx.is_connected(g):\n        return \"Impossible\"\n\n    odd_vertices = {i for i in g.nodes if len(list(g.neighbors(i))) % 2 == 1}\n\n    if len(odd_vertices) > 2:\n        return \"Impossible\"\n\n    odd_vertices_edges = {i for i in g.edges if i[0] in odd_vertices and i[1] in odd_vertices}\n\n    if len(odd_vertices_edges) > 0:\n        return \"Impossible\"\n\n    g.add_edge(1, n)\n    if not nx.is_connected(g):\n        return \"Impossible\"\n\n    g.remove_edge(1, n)\n    return \"Possible\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    \n    return 'Impossible' if m > n * (n - 1) / 2 or m < n - 1 else 'Possible'\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split())\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        # n < u <= n < v\n        if u < v:\n            v, u = u, v\n        if (v == 1 and u == 1) or (v == n and u == n):\n            print('Impossible')\n            return\n        if gcd(v, u)!= 1:\n            print('Impossible')\n            return\n    print('Possible')\n    print('\\n'.join(map(lambda x:''.join(map(str, x)),\n                        [[u, v] for u in range(1, n + 1) for v in range(1, n + 1) if gcd(u, v) == 1])))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\"\"\"\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The solution is given in the description of the problem.\n    '''\n   ...\n    return \"Impossible\""
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.strip().split()]\n    if m > n * (n - 1) / 2:\n        return \"Impossible\"\n    e = []\n    for _ in range(m):\n        e.append([int(s) for s in stdin.strip().split()])\n    return \"Possible\"\n\ndef"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, n = stdin.split()\n    r, n = int(r), int(n)\n\n    def is_safe_turn(r, c):\n        for i, j in [(1, 1), (1, 2)]:\n            if (r - i, c - j) not in cell_list:\n                return True\n        for i, j in [(1, 1), (1, 2)]:\n            if (r - i, c + j) not in cell_list:\n                return True\n        for i, j in [(1, 1), (1, 2)]:\n            if (r + i, c - j) not in cell_list:\n                return True\n        return False\n\n    cell_list = set()\n    for _ in range(n):\n        r, c = stdin.split()\n        r, c = int(r), int(c)\n        cell_list.add((r, c))\n\n    if r % 2 == 0:\n        turn = 'LOSE' if is_safe_turn(r, c) else 'WIN'\n    else:\n        turn = 'WIN' if is_safe_turn(r, c) else 'LOSE'\n    return turn\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # inputs\n    r, n = [int(s) for s in stdin.split(\"\\n\")[:2]]\n    # compute\n    for i in range(n):\n        r, c = [int(s) for s in stdin.split(\"\\n\")[i + 2].split()]\n    # output\n    if r % 2 == 0:\n        return \"WIN\" if c % 2 == 0 else \"LOSE\"\n    else:\n        return \"WIN\" if c % 2!= 0 else \"LOSE\"\n\nprint(solution(stdin=input()))\n\n\ndef"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split(' '))\n    for _ in range(n):\n        i, j = map(int, stdin.split(' '))\n        print('WIN' if any([\n            i - 1 in range(1, r + 1) and j - 3 in range(1, 2),\n            i in range(1, r + 1) and j - 3 in range(1, 2),\n            i + 1 in range(1, r + 1) and j - 3 in range(1, 2),\n        ]) else 'LOSE')\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return the last city to choose a cell\n    \"\"\"\n    # Get n and r\n    r, n = [int(n) for n in stdin.split()]\n\n    # Make a list of lists with r of cells that can be\n    # occupied next\n    lst = [[0] * 2 for i in range(r)]\n    for i in range(n):\n        r_i, c_i = [int(n) for n in stdin.split()]\n        lst[r_i - 1][c_i - 1] += 1\n\n    # Find which city will win\n    winner = None\n    for r_i, row in enumerate(lst):\n        if row[0] == 0 and row[1] == 0:\n            if winner is None:\n                winner = 0\n            else:\n                winner = 1\n        elif row[0] == 0:\n            winner = 1\n        elif row[1] == 0:\n            winner = 0\n\n    # Print the answer\n    print(winner and \"LOSE\") or \"WIN\"\n\n\ndef"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return WIN if the city whose turn it is to choose a cell can guarantee that they will be the last to choose a cell. Otherwise return LOSE\"\"\"\n    r, n = [int(x) for x in stdin.split()]\n    if n % 2 == 1:\n        return \"WIN\"\n    cols = []\n    for _ in range(n):\n        r, c = [int(x) for x in stdin.split()]\n        cols.append((r - 1, c - 1))\n        cols.append((r - 1, c))\n        cols.append((r, c))\n        cols.append((r, c + 1))\n    return \"LOSE\" if any(\n        cols.count(col) > 1\n        for col in set(cols)\n    ) else \"WIN\"\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    result = [0, 0]\n    for i in range(n):\n        r1, c1 = map(int, stdin.split())\n        if (result[0] == r1 or result[0] == c1) and (result[1] == r1 or result[1] == c1):\n            return 'LOSE'\n        elif (result[0] == r1 or result[0] == c1) and result[1]!= r1 and result[1]!= c1:\n            result[0] = r1\n            result[1] = c1\n        elif result[0] == r1 or result[0] == c1:\n            result[0] = r1\n            result[1] = c1\n        else:\n            result[0] = r1\n            result[1] = c1\n\n    return 'WIN'\n\n\n\n-----Big-O-----\n\nThe time complexity of the above algorithm will be O(r)O(r), where r is the number of rows.\nThe space complexity of the algorithm is O(r)O(r).\n\n\n-----Test Cases-----\nInput:\n4 1\n2 2\nOutput:\nWIN\n\nInput:\n4 1\n1 1\nOutput:\nLOSE\n\n\nInput:\n8 2\n4 2\n8 2\nOutput:\nLOSE\n\n\nInput:\n1 1\n2 2\nOutput:\nWIN\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, n = [int(x) for x in stdin.split()]\n    cells = {}\n    for i in range(1, n + 1):\n        x, y = [int(x) for x in stdin.split()]\n        for c in [x - 1, x, x + 1]:\n            for r in [y - 1, y, y + 1]:\n                if (r, c) not in cells:\n                    cells[(r, c)] = 0\n                cells[(r, c)] += 1\n    if len(cells) < (r * 2) * 2:\n        print('LOSE')\n    else:\n        print('WIN')\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, n = [int(s) for s in stdin.splitlines()[0].split()]\n    cells = [tuple(int(s) for s in stdin.splitlines()[1 + i].split()) for i in range(n)]\n    return \"WIN\" if solve(r, cells) else \"LOSE\"\n\n\ndef"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_rivers, num_city_pairs = map(int, stdin.split(' '))\n    rivers = [map(int, line.split(' ')) for line in stdin.strip().split('\\n')]\n\n    rivers_x = sorted(rivers, key=lambda x: x[0])\n    rivers_y = sorted(rivers, key=lambda x: x[1])\n    # print(rivers_x, rivers_y)\n\n    for i in range(num_city_pairs):\n        rivers_x[i] = sorted(rivers_x[i], key=lambda x: x[0])\n        rivers_y[i] = sorted(rivers_y[i], key=lambda x: x[0])\n\n    for i in range(num_city_pairs):\n        if rivers_x[i] == rivers_y[i]:\n            # print(rivers_x[i], rivers_y[i], i)\n            # print(rivers_x[i][-1], rivers_y[i][-1], i)\n            if rivers_x[i][-1][0] < rivers_y[i][-1][0]:\n                return 'WIN'\n\n    return 'LOSE'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import math\n    n, s = map(int, sys.stdin.readline().split())\n    station = {}\n    for i in range(n):\n        station[i + 1] = list(map(int, sys.stdin.readline().split()))\n    train = list(map(int, sys.stdin.readline().split()))\n    metro = {}\n    for i in range(n):\n        if train[i] == 1:\n            metro[i + 1] = 1\n        else:\n            metro[i + 1] = 0\n    #print(station)\n    #print(metro)\n    #print(train)\n    if s in metro.keys():\n        if train[s - 1] == 1 and metro[s] == 0:\n            print(\"NO\")\n        elif train[s - 1] == 0 and metro[s] == 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if train[0] == 1:\n            if train[n - 1] == 1:\n                if train[s - 1] == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                if train[s - 1] == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n        else:\n            if train[n - 1] == 1:\n                if train[s - 1] == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                if train[s - 1] == 1:\n                    print(\"NO\")\n                else:\n                    print(\"NO\")"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split('\\n')[0].split(' ')))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    b = list(map(int, stdin.split('\\n')[2].split(' ')))\n    print(n, s, a, b)\n    for i in range(n):\n        if i == s:\n            print(\"YES\")\n            break\n        if a[i] == 1:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, stdin.split())\n    b[s] = 1\n    a[s] = 1\n    a.sort()\n    b.sort()\n    if a[-1]!= 1:\n        return \"NO\"\n    i = j = 0\n    while i < n:\n        if a[i] == 1 and a[i - 1] == 1 and b[j] == 1:\n            return \"NO\"\n        elif a[i] == 1:\n            i += 1\n        elif a[i - 1] == 1:\n            j += 1\n        else:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nn, s = map(int, stdin.split(\" \"))\na = [int(x) for x in stdin.split(\" \")]\nb = [int(x) for x in stdin.split(\" \")]\n\nclose = [a[i] if b[i] == 0 else b[i] for i in range(n)]\n\nprint(\"YES\" if close[s] == 1 else \"NO\")"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, s = map(int, lines[0].split())\n    closed = [list(map(int, line.split())) for line in lines[1:]]\n    a = []\n    b = []\n    for i in range(len(closed)):\n        if closed[i][0] == 1:\n            a.append(i+1)\n        else:\n            b.append(i+1)\n    b = b[::-1]\n    a.sort()\n    b.sort()\n    a.extend(b)\n    if a[s - 1] == 1:\n        return \"YES\"\n    return \"NO\"\nprint(solution(stdin))\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"YES\" or \"NO\"\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n\")\n    'YES'\n    >>> solution(\"5 4\\n1 0 0 0 1\\n1 1 1 1 1\\n\")\n    'YES'\n    >>> solution(\"5 2\\n1 0 0 0 1\\n1 1 1 1 1\\n\")\n    'NO'\n    \"\"\"\n    number_of_stations, station_to_start = map(int, stdin.split())\n    is_opened = [\n        int(station_number)\n        for station_number in stdin.split('\\n')[1].split()\n    ]\n    is_opened_reverse = [\n        int(station_number)\n        for station_number in stdin.split('\\n')[2].split()\n    ]\n\n    if not is_opened[station_to_start - 1]:\n        is_opened[station_to_start - 1] = 1\n    if not is_opened_reverse[station_to_start - 1]:\n        is_opened_reverse[station_to_start - 1] = 1\n\n    # print(is_opened)\n    # print(is_opened_reverse)\n    # print(station_to_start)\n    return 'YES' if is_opened[0] == 0 and is_opened_reverse[0] == 0 else 'NO'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s, alice = [int(i) for i in stdin.split()]\n    alice_track = [int(i) for i in stdin.split()[1::2]]\n    bob_track = [int(i) for i in stdin.split()[2::2]]\n    if (alice_track[s - 1] == 1 or bob_track[s - 1] == 1):\n        return \"NO\"\n    i = 0\n    while i < n:\n        if (alice_track[i] == 0):\n            if (bob_track[i] == 0):\n                i += 1\n                continue\n            else:\n                return \"NO\"\n        else:\n            if (bob_track[i] == 0):\n                return \"NO\"\n        i += 1\n    return \"YES\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split(' ')))\n    a, b = list(map(int, stdin.split('\\n')[0].split(' ')))\n    c, d = list(map(int, stdin.split('\\n')[1].split(' ')))\n\n    if a == 0:\n        if s == 1:\n            return \"YES\"\n        elif b == 1:\n            return \"NO\"\n        elif d == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n\n    if b == 0:\n        if s == 1:\n            return \"NO\"\n        elif a == 1:\n            return \"NO\"\n        elif d == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if d == 0:\n        if s == 1:\n            return \"YES\"\n        elif a == 1:\n            return \"NO\"\n        elif b == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    prev_a = 1\n    prev_b = 1\n    for i in range(n):\n        if a[i] == 1:\n            prev_a = i + 1\n        if b[i] == 1:\n            prev_b = i + 1\n    if prev_a > s:\n        return \"NO\"\n    if prev_b > n:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    # Your code here\n    # Return the results\n    return 0\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of instruments Amr will learn, in order.\n\n    Arguments:\n        stdin {str} -- Input string\n\n    Returns:\n        str -- Answer to the question\n    \"\"\"\n    # your code here\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    max_days = sum(l)\n    if max_days <= k:\n        return '0'\n    l.sort(reverse=True)\n    r = []\n    for i, e in enumerate(l):\n        r.extend([i + 1] * e)\n    print(r)\n    if len(r) <= k:\n        return''.join(map(str, r))\n    else:\n        r = r[:k]\n        return''.join(map(str, r))\n\n\ndef"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # `inp` is a string representation of the input\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i + 1][j] = max(dp[i][j], dp[i + 1][j - 1])\n            dp[i + 1][j] = max(dp[i][j], a[i] + dp[i][j - 1])\n    for i in range(k, 0, -1):\n        if dp[n][i] >= dp[n][i - 1]:\n            break\n    j = i - 1\n    res = []\n    for i in range(n, 0, -1):\n        if dp[i][j] >= dp[i - 1][j]:\n            res.append(i)\n            j -= 1\n    res.reverse()\n    return \" \".join(map(str, res))\n\"\"\"\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n, k = map(int, stdin.split(\" \"))\n    a = Counter(map(int, stdin.split(\" \")))\n    b = Counter({i: 0 for i in range(1, n + 1)})\n    for i in sorted(a, reverse=True):\n        b[i] = max(0, b[i] - a[i])\n    return \" \".join(map(str, b.keys()))\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n, k = int(inputs[0].split()[0]), int(inputs[0].split()[1])\n    data = [int(x) for x in inputs[1].split()]\n    result = []\n    i, j = 0, n - 1\n    while i < j:\n        if k == 0:\n            break\n        elif data[i] <= data[j]:\n            result.append(i)\n            i += 1\n            k -= 1\n        else:\n            result.append(j)\n            j -= 1\n            k -= 1\n    result.append(i) if i == j else result.append(j)\n    result.append(0) if i!= 0 else result\n    return''.join([str(x) for x in result])\n\nprint(solution(\"4 10\\n4 3 1 2\")) # 4\nprint(solution(\"5 6\\n4 3 1 1 2\")) # 3 1 3 4\nprint(solution(\"1 3\\n4\")) # 0\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split(' ')]\n    a = [int(s) for s in stdin.split(' ')]\n\n    left, right = 0, k + 1\n    while left < right:\n        m = (right + left) // 2\n        learned = 0\n        for i, d in enumerate(a):\n            learned += d if m // d <= i + 1 else m // d - 1\n        if learned <= k:\n            left = m + 1\n        else:\n            right = m\n\n    return str(right - 1)\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    instruments = list(map(int, stdin.split()))\n    instruments.sort()\n    instruments = [x - 1 for x in instruments]\n    max_time = 0\n    for i in range(len(instruments)):\n        if max_time + instruments[i] > k:\n            break\n        max_time += instruments[i]\n    return str(max_time + k - max_time)\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    instruments, days = (int(x) for x in stdin.split(' '))\n    day_lst = [int(x) for x in stdin.split(' ')]\n    day_lst = sorted(day_lst)\n\n    # print(day_lst)\n    # print(day_lst[0], day_lst[1], day_lst[2])\n    # print(day_lst[0] * day_lst[1] * day_lst[2])\n    # print(instruments - 2)\n    # print(instruments)\n    if days < day_lst[0] * day_lst[1] * day_lst[2]:\n        return '0'\n    return''.join(str(x) for x in range(1, instruments - 2 + 1))\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    width = int(stdin.readline())\n    photo = [int(num) for num in stdin.readline().split()]\n    if sum(photo) == len(photo) or sum(photo) == 0:\n        return \"YES\"\n    elif sum(photo) == 1 and sum(photo[0::2]) == 1:\n        return \"YES\"\n    elif sum(photo) == 0:\n        return \"NO\"\n    elif sum(photo) == 1 and sum(photo[0::2]) == 0:\n        return \"NO\"\n    elif sum(photo) % 2 == 0 and sum(photo[0::2]) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    photo = [int(c) for c in stdin.readline().strip()]\n    result = False\n\n    for i in range(0, n):\n        white_count = 0\n        black_count = 0\n        for j in range(0, n):\n            if i == j:\n                continue\n            if photo[j] == 1:\n                black_count += 1\n            elif photo[j] == 0:\n                white_count += 1\n            else:\n                break\n        if black_count == n / 2 and white_count == n / 2:\n            result = True\n            break\n    if result:\n        print('YES')\n    else:\n        print('NO')\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    photo = [int(stdin) for stdin in stdin.strip().split('\\n')]\n    black_count = white_count = 0\n    for pixel in photo:\n        if pixel:\n            black_count += 1\n        else:\n            white_count += 1\n    if black_count % 2 == white_count % 2:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out whether the given photo can be a photo of zebra.\"\"\"\n    width: int = int(stdin.split('\\n')[0])\n    photo: str = stdin.split('\\n')[1]\n    black_to_white: int = 0\n    white_to_black: int = 0\n    has_black_to_white: bool = False\n    has_white_to_black: bool = False\n\n    for pixel in photo:\n        if pixel == \"0\":\n            black_to_white += 1\n            has_black_to_white = True\n        elif pixel == \"1\":\n            white_to_black += 1\n            has_white_to_black = True\n\n    if not has_black_to_white or not has_white_to_black:\n        return \"NO\"\n\n    if black_to_white % 2 == 1 or white_to_black % 2 == 1:\n        return \"NO\"\n\n    if black_to_white > white_to_black:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    m = [int(i) for i in stdin.strip().split()]\n    length = len(m)\n    if length == 1:\n        return 'NO'\n    for i in range(0, length-1, 2):\n        if m[i] == 0 and m[i+1] == 0:\n            continue\n        if m[i] == 1 and m[i+1] == 1:\n            continue\n        return 'NO'\n    return 'YES'\nprint(solution(input()))\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    width = int(stdin)\n    photo = [int(x) for x in stdin.split(' ')]\n    if photo[0] == 0:\n        for index, pixel in enumerate(photo):\n            if index % 3 == 0:\n                if pixel == 1:\n                    return 'NO'\n                else:\n                    continue\n            if index % 3 == 1:\n                if pixel == 1:\n                    return 'NO'\n                else:\n                    continue\n            if index % 3 == 2:\n                if pixel == 1:\n                    return 'NO'\n                else:\n                    continue\n    if photo[0] == 1:\n        for index, pixel in enumerate(photo):\n            if index % 2 == 0:\n                if pixel == 1:\n                    return 'NO'\n                else:\n                    continue\n            if index % 2 == 1:\n                if pixel == 1:\n                    return 'NO'\n                else:\n                    continue\n    return 'YES'\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    width = int(stdin.split('\\n')[0])\n    photo = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    if max(photo) == 1 or min(photo) == 0:\n        return 'YES'\n    elif sum(photo) % 2!= 0:\n        return 'NO'\n    else:\n        count = 0\n        s_photo = ''\n        for i in photo:\n            if i == 1:\n                count += 1\n            if count == 2:\n                s_photo += '0'\n            else:\n                s_photo += '1'\n        if s_photo.count('0') == width:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    width, *photo = stdin.splitlines()\n    width = int(width)\n\n    photo = [int(pixel) for pixel in photo]\n\n    black_len = 0\n    for pixel in photo:\n        if pixel:\n            black_len += 1\n        else:\n            if black_len == 0:\n                return \"NO\"\n            if black_len % 2!= 0:\n                return \"NO\"\n            black_len = 0\n\n    if black_len:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    s = set()\n    for x in t:\n        s.add(x)\n    for x in t:\n        for y in t:\n            if x+y > m:\n                break\n            s.discard(x+y)\n    return''.join(map(str, s))"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code here\n    \"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. read input\n    2. read initial\n    3. for each student, calculate sum(t_i < m)\n    4. print result\n    \"\"\"\n    # read input\n    n, m = map(int, stdin.readline().split(' '))\n    t = [int(stdin.readline()) for _ in range(n)]\n\n    # calculate initial\n    t_min = 0\n    t_sum = 0\n    for i in range(n):\n        t_min += t[i]\n        t_sum += t[i]\n        if t_sum > m:\n            break\n\n    # calculate result\n    res = [0] * n\n    for i in range(n):\n        if i == 0:\n            res[i] = n - t_min\n        else:\n            res[i] = res[i-1] + n - t_sum + t_min\n\n    # print result\n    for i in res:\n        print(i, end=' ')\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom collections import deque\nfrom heapq import heappop, heappush\nimport math\n\nsys.stdin = open(\"./input.txt\")\ninput = sys.stdin.readline\n\n\ndef"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    return\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return solution for the task\n    :param stdin:\n    :return: string\n    '''\n   ..."
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string containing a single integer denoting the minimum number of students who need to leave the exam.\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    exam_times = [int(x) for x in stdin.split()]\n    \n    # build a graph with vertices as exam times and edges as edges between exam times\n    g = Graph(n)\n    for i in range(n):\n        # for each exam time, add edges to the ones before and after it\n        for j in range(i + 1, n):\n            g.add_edge(exam_times[i], exam_times[j], exam_times[j] - exam_times[i])\n        for j in range(i):\n            g.add_edge(exam_times[i], exam_times[j], exam_times[j] - exam_times[i])\n            \n    # compute the DFS forest of the graph\n    g.dfs()\n    \n    # build a list of ordered exam times and initialize the number of failing students to 0\n    exam_times = sorted(exam_times)\n    failures = [0] * n\n    \n    # for each exam time, update the number of failing students\n    for i in range(n):\n        for j in g.graph[i]:\n            # if the exam time is an edge from a vertex that is not included in the DFS forest, it means that it is the last time that it will fail\n            if exam_times[i] in g.graph[j]:\n                failures[j - 1] += 1\n    \n    # for each exam time, find the minimum number of students who have to fail the exam in order to the exam time can be passed\n    for i in range(n):\n        failures[i] = min(failures[i], exam_times[i] - 1)\n    \n    return \" \".join([str(x) for x in failures])\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"5 3\\n0 4 5 6 7\\n\")\n    '2'\n    '''\n    n, mex = stdin.split('\\n')\n    arr = [int(num) for num in stdin.split('\\n')[1].split()]\n\n    arr.sort()\n    ans = 0\n    for num in arr:\n        if num - mex > 0:\n            ans += num - mex\n    return str(ans)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, mex = map(int, stdin.split())\n    sets = list(map(int, stdin.split()))\n    counter = 0\n    sets = set(sets)\n    while not (len(sets) == 1 and 0 in sets):\n        sets = sorted(sets)\n        sets.pop(0)\n        if not sets:\n            counter += 1\n        else:\n            mex = min(sets[0], mex)\n            counter += 1\n            sets.pop(0)\n    return str(counter)\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, x = [int(s) for s in stdin.split(\" \")]\n    S = [int(s) for s in stdin.split(\" \")[1:]]\n\n    S = set(S)\n    S.add(0)\n\n    if x == 0:\n        return len(S)\n\n    tot = 0\n    for x in range(1, min(x, len(S))):\n        for i, s in enumerate(S):\n            if s > x:\n                break\n            if s == x:\n                tot += i\n\n    return tot\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    n, mex = [int(i) for i in line.split(' ')]\n    arr = [int(i) for i in stdin.strip().split(' ')]\n    arr.sort()\n    result = 0\n    while len(arr) > 0:\n        new = [arr[0]]\n        for i in range(1, len(arr)):\n            if arr[i] > new[-1]:\n                new.append(arr[i])\n        arr = new\n        result += 1\n    return str(result)\n\n\n\"\"\"\n\nn, mex = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\narr.sort()\nprint(arr)\nresult = 0\nwhile len(arr) > 0:\n    new = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] > new[-1]:\n            new.append(arr[i])\n    arr = new\n    result += 1\n    print(arr)\n\nprint(result)"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if x in a:\n        return \"0\"\n\n    count = 0\n    for i in range(n):\n        if a[i] > x:\n            count += a[i] - x\n        else:\n            count += x - a[i]\n\n    return str(count)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, mex = stdin.split()\n    n, mex = int(n), int(mex)\n    a = list(map(int, stdin.split()))\n    b = set(a)\n    while True:\n        if mex in b:\n            break\n        else:\n            mex -= 1\n            b.add(mex)\n    return str(len(a) - len(b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    if m in b:\n        return 1\n    elif m-1 in b:\n        return b.index(m-1) + 1\n    else:\n        return len(b)\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.b = [0,1,3,4,5,7]\n\n    def test_solution(self):\n        self.assertEqual(solution('5 3\\n0 4 5 6 7'), 2)\n\n    def test_solution_2(self):\n        self.assertEqual(solution('1 0\\n0'), 1)\n    def test_solution_3(self):\n        self.assertEqual(solution('5 0\\n1 2 3 4 5'), 0)"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # 3, 5\n    # 1, 2, 3, 4, 5\n    # n, x = 3, 5\n    # array = [1, 2, 3, 4, 5]\n    # mex = 5\n    # 5, 0\n    # 1, 2, 3, 4, 5\n    # array = [0]\n    # mex = 0\n    # 0, 5\n    # array = [5]\n    # mex = 0\n    # 5, 3\n    # 1, 2, 3, 4, 5\n    # array = [1, 2, 3, 4, 5]\n    # mex = 3\n    n, x = map(int, stdin.readline().split())\n    array = list(map(int, stdin.readline().split()))\n    mex = min(max(array), x)\n    arr = [1] * (mex + 1)\n    res = 0\n    for i in range(1, mex + 1):\n        for j in array:\n            if i - j < 0:\n                break\n            if arr[i - j]:\n                res += 1\n                arr[i] = 1\n                break\n    return str(res)"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline().split()[1])\n    nums = [int(n) for n in stdin.readline().split()]\n    count = 0\n    for i, num in enumerate(nums):\n        if nums[num] == 0:\n            nums[i] = x\n            count += 1\n    count += x\n    return count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if abs(a - 3) < abs(b - 3):\n        return '1'\n    elif abs(a - 3) > abs(b - 3):\n        return '3'\n    elif abs(a - 3) == abs(b - 3):\n        return '2'\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.readlines()\n    a, b = map(int, input[0].split())\n    print(abs(a - b) + 1)\n    print(0)\n    print(abs(a - b) + 1)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if abs(a - b) < 3:\n        print(0, 1, abs(a - b))\n    elif abs(a - b) < 6 - abs(a - b):\n        print(1, abs(a - b) - abs(a - b) + 6)\n    else:\n        print(2, abs(a - b))\n    return ''"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(solution(stdin.strip()))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if abs(a - b) < 3:\n        return '0 1 {}'.format(abs(a - b))\n    elif a + b > 6:\n        return '0 {} 2'.format(a + b)\n    else:\n        return '1 {} {}'.format(a + b, a - b)"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import product\n\ndef"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.strip().split(' ')))\n    return f'{a < b + 1} {a > b - 1} {a == b}'\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return \" \".join([str(max(0, a - b)), str(a - b == 0), str(b - a)])\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    count = 0\n    if a == 1:\n        count += 6\n    if a == 2:\n        count += 6 - b\n    if a == 3:\n        count += 5\n    if a == 4:\n        count += 5 - b\n    if a == 5:\n        count += 4\n    if a == 6:\n        count += 4 - b\n    if b == 1:\n        count += 6\n    if b == 2:\n        count += 6 - a\n    if b == 3:\n        count += 5\n    if b == 4:\n        count += 5 - a\n    if b == 5:\n        count += 4\n    if b == 6:\n        count += 4 - a\n    return \" \".join(str(x) for x in [count, 0, count])\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a - b) +'' + str(a + b) +'' + str(a * b)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if s[1] == 'of week':\n        return \"{}\".format(7*int(s[0]))\n    else:\n        return \"{}\".format(31*int(s[0]))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data_list = stdin.split(\" \")\n    if data_list[0] == \"1 of week\":\n        week_number = int(data_list[1])\n        weekday_number = week_number - 1\n        if weekday_number >= 0 and weekday_number < 7:\n            return str(4 - weekday_number)\n    elif data_list[0] == \"1 of month\":\n        month_number = int(data_list[1])\n        if month_number >= 1 and month_number < 13:\n            return str(31 - month_number)\n    return \"0\""
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    ans_2 = 0\n    line = stdin.split()\n    if line[0] == \"x of week\":\n        ans_2 = 7 * int(line[1])\n        ans_2 = ans_2 - 1\n    elif line[0] == \"x of month\":\n        ans_2 = 31 * int(line[1])\n        ans_2 = ans_2 - 1\n    ans = ans_2 // 7\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split()) == 1:\n        return str(28 - int(stdin.split()[0]))\n    else:\n        return str(12 - int(stdin.split()[0]))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    if len(line) == 1:\n        return str(calculate_candy_count(int(line[0]), 7))\n    else:\n        return str(calculate_candy_count(int(line[1]), 31))\n\ndef"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    week = int(stdin.split()[0].split('of')[0])\n    month = int(stdin.split()[0].split('of')[1])\n    return \"{}\".format(calculate(week, month))\n\ndef"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_leap_year(year: int) -> bool:\n        return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\n    month_lengths = [\n        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    ]\n    day_of_week = 1\n\n    day_of_month = 1\n    day_of_year = 1\n\n    if stdin.startswith(\"x of week\"):\n        day_of_week = int(stdin.split()[1])\n    elif stdin.startswith(\"x of month\"):\n        day_of_month = int(stdin.split()[1])\n\n    for year in range(1, 2016 + 1):\n        if is_leap_year(year):\n            month_lengths[1] = 29\n\n        for month in range(12):\n            if day_of_month <= month_lengths[month]:\n                day_of_month -= month_lengths[month]\n                day_of_year += month_lengths[month]\n            else:\n                day_of_month -= month_lengths[month]\n\n            if day_of_week <= 7 and stdin.startswith(\"x of week\"):\n                day_of_week += 1\n            elif stdin.startswith(\"x of month\"):\n                day_of_month += 1\n\n        if day_of_week <= 7 and stdin.startswith(\"x of week\"):\n            print(day_of_year)\n        elif stdin.startswith(\"x of month\"):\n            print(day_of_month)\n\nsolution(input())\n\n\n\ndef"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    return...\n    \n    \n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 5\\n2 4 8 3 6\")\n    'NO'\n    >>> solution(\"10 5\\n2 4 5 7 9\")\n    'YES'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    dirty = map(int, stdin.split()[1].split())\n    max_steps = 0\n    current_steps = 0\n    for i in range(m):\n        max_steps += n - dirty[i]\n        if i > 0:\n            current_steps += 1\n        if current_steps > max_steps:\n            return \"NO\"\n    if current_steps == max_steps:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_stairs, num_of_dirty_stairs = [int(i) for i in stdin.split(' ')]\n    num_of_dirty_stairs = sorted([int(i) for i in stdin.split(' ')[1:]])\n    cur_num_of_dirty_stairs = 0\n    if num_of_dirty_stairs[0] < num_of_stairs:\n        return 'NO'\n    for i in num_of_dirty_stairs:\n        if i == num_of_stairs:\n            return 'YES'\n        if i > num_of_stairs - cur_num_of_dirty_stairs:\n            return 'NO'\n        else:\n            cur_num_of_dirty_stairs += i\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 5\n   ... 2 4 8 3 6''')\n    'NO'\n    >>> solution('''10 5\n   ... 2 4 5 7 9''')\n    'YES'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    dirty = sorted(map(int, stdin.split()[1:]))\n\n    if dirty[0] == 1:\n        return \"NO\"\n    max_len = max(n - dirty[0] - 1, 0)\n    if max_len + 1 < m:\n        return \"NO\"\n\n    return \"YES\" if max_len + 1 + n - dirty[-1] >= m else \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    n = a[0]\n    m = a[1]\n    d = [int(i) for i in stdin.split()][1:]\n    res = \"YES\"\n    for i in d:\n        if i > n:\n            res = \"NO\"\n            break\n        else:\n            n -= i\n    return res\n\nsolution(input())\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    dirty = list(map(int, stdin.split(' ')))\n    d, c = 0, 0\n    for i in range(len(dirty)):\n        if n - dirty[i] - c < 0:\n            d = dirty[i]\n            c += dirty[i]\n        else:\n            n -= dirty[i]\n            c += dirty[i]\n        if n == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    n, m = [int(x) for x in line[0].split(\" \")]\n    d = [int(x) for x in line[1].split(\" \")]\n    d.sort()\n    count = 0\n    current = d[0]\n    for i in range(len(d)):\n        if d[i] >= current:\n            count += d[i] - current\n            current = d[i]\n            if count > n - current:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(c) for c in stdin.split(' ')]\n    s = [int(c) for c in stdin.split(' ')]\n    if s.count(n) == 0:\n        print(\"YES\")\n    elif s.count(n) >= 1 and s.count(n) <= 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    k = int(k)\n    stairs = [0 for i in range(k)]\n    for i in range(k):\n        stairs[i] = int(stdin.split(' ')[i])\n\n    stairs.sort()\n    print(stairs)\n    last = 0\n    for i in stairs:\n        last += i\n    print(last)\n    if last <= n:\n        return 'YES'\n    else:\n        return 'NO'\n    '''\n    n, k = [int(x) for x in stdin.split(' ')]\n    stairs = [int(x) for x in stdin.split(' ')[1::2]]\n    stairs.sort()\n    last = 0\n    for i in stairs:\n        last += i\n    if last <= n:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    d = set(a)\n    if len(d) > n:\n        return 'NO'\n    elif 1 not in d and n-1 not in d:\n        return 'YES'\n    else:\n        d.add(0)\n        d.add(n)\n        for i in range(m):\n            if i == m-1:\n                return 'YES'\n            if a[i] in d:\n                d.remove(a[i])\n            elif a[i] in d-{0} or a[i] in d-{n}:\n                d.remove(a[i])\n            else:\n                d.add(a[i])\n                break\n            if i == m-1:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        x, y, p, q = map(int, stdin.readline().split())\n        if x == y:\n            if p == q:\n                print(0)\n            else:\n                print(-1)\n        else:\n            if (x * y) % (p * q) == 0:\n                print((x * y) // (p * q))\n            else:\n                print(-1)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your favorite rational number in the [0;1] range is p / q. Now you wonder: what is the smallest number of submissions you have to make if you want your success rate to be p / q?\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution string\n    \"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin)\n    x, y, p, q = list(map(int, stdin.split(\" \")))\n    if x / y < p / q:\n        return -1\n    else:\n        return x\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    res = []\n    for _ in range(cases):\n        x, y, p, q = list(map(int, stdin.readline().split()))\n        pq = p / q\n        a = x / y\n        res.append(x - y * a if a > pq else -1)\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return str\n\nprint(solution(input()))\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your favorite rational number in the [0;1] range is p / q.\n    Now you wonder: what is the smallest number of submissions you have to make if you want your success rate to be p / q?\n    >>> solution('4 10 1 2\\n7 14 3 8\\n20 70 2 7\\n5 6 1 1\\n')\n    4\n    10\n    0\n    -1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(stdin.split()[2:])\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = 0\n    for _ in range(n):\n        command = stdin.split('\\n')[1]\n        if command == 'add':\n            x += 1\n        elif command == 'end':\n            break\n        else:\n            num = int(command.split()[1])\n            for _ in range(num):\n                x += 1\n    return str(x) if x < 2 ** 32 - 1 else \"OVERFLOW!!!\""
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    #\n    #\n    # Write your code here.\n    #\n    #\n    #\n\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'OVERFLOW!!!' if stdin[0] == '1' else str(int(stdin[0]) + int(stdin[2]))\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\\nend\\nend\")\n    '161'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\")\n    '161'\n    >>> solution(\"2\\nfor 62\\nend\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\")\n    '0'\n    >>> solution(\"11\\nfor 100\\nfor 100\\nfor 100\\nfor 100\\nadd\\nend\\nend\\nend\\nend\\nend\")\n    'OVERFLOW!!!'\n    \"\"\"\n    commands = stdin.splitlines()\n    for i in range(len(commands)):\n        commands[i] = commands[i].split()\n    x = 0\n    for command in commands:\n        if command[0] == \"add\":\n            x += 1\n        elif command[0] == \"end\":\n            break\n        else:\n            n = int(command[1])\n            if command[0] == \"for\":\n                for _ in range(n):\n                    x += 1\n    return str(x)\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        str: str\n    \"\"\"\n    commands = stdin.split(\"\\n\")\n    x = 0\n    for command in commands:\n        command_parts = command.split(\" \")\n        if command_parts[0] == \"add\":\n            x += 1\n        elif command_parts[0] == \"for\":\n            n = int(command_parts[1])\n            for _ in range(n):\n                x += 1\n        else:\n            break\n    if x > 2**32 - 1:\n        return \"OVERFLOW!!!\"\n    else:\n        return str(x)\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    v = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    res = 0\n    for i in s:\n        if i in v:\n            res += 1\n    return res\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    res = min(stdin.count(c) % 2 for c in \"aeiou\")\n    return 'Impossible' if res else min(stdin.count(c) // 2 for c in \"aeiou\")\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    vowels = set('aeiou')\n    return '1' if vowels.issubset(s) else '0'\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count('a') == 0 and stdin.count('e') == 0 and stdin.count('i') == 0 and stdin.count('o') == 0 and stdin.count('u') == 0:\n        return 0\n    else:\n        return sum(map(int, stdin))"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Store only the letters and the numbers in a dict\n    letters = {}\n    for c in stdin:\n        if c.isalpha():\n            letters[c] = letters.get(c, 0) + 1\n        elif c.isdigit():\n            letters['digit'] = letters.get('digit', 0) + 1\n\n    if letters.get('a', 0) % 2 == 1:\n        return min(letters.get('a', 0), letters.get('e', 0), letters.get('i', 0), letters.get('o', 0), letters.get('u', 0)) + 2\n    else:\n        return min(letters.get('a', 0), letters.get('e', 0), letters.get('i', 0), letters.get('o', 0), letters.get('u', 0))\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vowel = stdin.find('a')\n    if vowel == -1:\n        return '0'\n    if stdin[vowel + 1].isdigit() and stdin[vowel + 1] in ['0', '2', '4', '6', '8']:\n        return '2'\n    return '1'\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('0', 'z')\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return min([s.count(c) for c in \"aeiou\"])\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a dynamic programming problem.\n    At each time step, we are making choices to move up, down, left or right.\n    Let's denote these choices with binary digits, for example, if we move up, we have the binary digit '1'.\n    Thus, the problem is, given a set of coordinates, and we move one step in each direction,\n    what is the minimum number of steps for Brimstone to visit all the points on the surface?\n    \"\"\"\n    # The input is a set of coordinates, for example, {(1, 0), (-1, -1), (1, -1)}\n    # All the coordinates are distinct, so we can use them to index a matrix\n    # Let's denote the matrix with zeroes\n    # The matrix is a matrix of binary digits (0 or 1)\n    # The matrix has the dimensions of the number of coordinates\n    # The matrix has the size n x n\n    # We start from the beginning, and we move to the right one digit by one digit,\n    # so the number of possible points is n^2\n    # The matrix will contain the minimum number of steps for Brimstone to reach the point in the matrix,\n    # and we start from the beginning, so the value for the beginning point will be zero\n    # The matrix is such that if there is a zero in some position, then we can reach it\n    # with the minimum number of steps\n    # If there is no zero in the matrix, then we need to make at least one step to reach it\n    # It is not possible to travel on a point that is not in the matrix\n    # The matrix is such that if the value for a point is zero, then we can reach it with the minimum number of steps\n    # We define the recurrence relation:\n    #     t(0) = 0\n    #     t(i) = min(t(i-1) + 1, t(i) + 1, t(i-1) + 1) if coordinates[i]!= coordinates[i-1]\n    # We initialize the matrix with zeroes and choose the initial point\n    # We iterate over the matrix and we stop when we reached the end of the matrix\n    # We can calculate the minimum steps by taking the minimum value of all the values in the matrix\n    # And we return the minimum steps\n    # A note on the implementation:\n    #   0 is the beginning point, and 1 is the point that is not in the set\n    #   The matrix will have a size equal to the number of coordinates\n    #   To find the point we need to take the number of coordinates - 1\n    #   The matrix will contain the minimum number of steps to go from the beginning point to the point\n    #   For the beginning point the value will be 0, and for the point that is not in the set it will be inf\n    #   We start from the beginning, so the minimum steps for the beginning point is 0\n    #   The minimum steps for the point that is not in the set is inf\n    #   We iterate over the matrix and we stop when we reached the end of the matrix\n    #   We can calculate the minimum steps by taking the minimum value of all the values in the matrix\n    #   And we return the minimum steps\n    #   This solution is a typical dynamic programming problem, which is implemented by recursion\n    #   We can improve it by using caching\n    #   Instead of iterating over the matrix, we iterate over the set and for each point we find the minimum steps to go from the beginning to it\n    #   We initialize the matrix with zeroes, we start from the beginning, and we iterate over the set\n    #   For each point in the set we calculate the minimum steps to go from the beginning to the point\n    #   We update the matrix with the minimum steps to go from the beginning to the point\n    #   We return the minimum steps\n    #   It is possible to improve the performance even further, if we calculate the minimum steps from the beginning to the point\n    #   And then, for each point, we calculate the minimum steps to go from the beginning to the point\n    #   The resulting matrix will have a size of (n^2) x (n^2)\n    #   But we only need to iterate over the matrix\n    #   The number of iterations will be n^2\n    #   And the memory needed will be (n^2) x (n^2)\n    #   And we can reduce the number of iterations\n    #   The resulting matrix will have a size of (n^2) x (n^2)\n    #   And we only need to iterate over the matrix\n    #   The number of iterations will be n^2\n    #   And the memory needed will be (n^2) x (n^2)\n    #   So it is more efficient\n    #   But it will become more difficult to implement this solution,\n    #   since we can not use caching, since we need to keep the values of the matrix\n    #   We should probably find an approximation solution to save time\n    def next_position(current_position, direction):\n        next_position_x, next_position_y = current_position\n        if direction == 'u':\n            next_position_y += 1\n        elif direction == 'r':\n            next_position_x += 1\n        elif direction == 'l':\n            next_position_x -= 1\n        elif direction == 'd':\n            next_position_y -= 1\n        return next_position_x, next_position_y\n\n    coordinates = stdin.splitlines()\n    coordinates = [(int(coordinate_x), int(coordinate_y)) for coordinate_x, coordinate_y in coordinates]"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute the solution\"\n    n = int(stdin.readline())\n    a = [tuple(map(int, stdin.readline().split())) for i in range(n)]\n    a.sort()\n    b = [(a[i][0] + a[i + 1][0]) / 2 for i in range(n - 1)]\n    b.sort()\n    return str(b[0] + 1)\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution is inspired by https://arxiv.org/pdf/1810.04805.pdf (Problem 3.3)\n    '''\n    n = int(stdin.split('\\n')[0])\n    x = [int(stdin.split('\\n')[i].split()[0]) for i in range(1, n+1)]\n    y = [int(stdin.split('\\n')[i].split()[1]) for i in range(1, n+1)]\n    dists = []\n    for x_i, y_i in zip(x, y):\n        dists.append(abs(x_i) + abs(y_i))\n    # dists.sort()\n    dists = list(set(dists))\n    dists.sort()\n    l = len(dists)\n    for i in range(l):\n        for j in range(i+1, l):\n            # Here we calculate the distance from the origin to the point\n            # with coordinates (x_i, y_i)\n            dists_i = abs(x[i]) + abs(y[i])\n            # And from the point (x_j, y_j) to the origin\n            dists_j = abs(x[j]) + abs(y[j])\n            dists_ij = abs(dists[j] - dists[i])\n            if dists_ij < dists_i + dists_j:\n                return str(dists_ij)\n    return '-1'\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # the number of points\n    N = stdin.split()\n    N = int(N[0])\n    # the coordinates of points\n    X = []\n    Y = []\n    for _ in range(N):\n        x, y = stdin.split()\n        X.append(int(x))\n        Y.append(int(y))\n    # Brimstone start point\n    start = (X[0], Y[0])\n    # array of distances from start\n    dist = []\n    for i in range(N):\n        dist.append(abs(start[0] - X[i]) + abs(start[1] - Y[i]))\n\n    result = min(dist)\n    # the minimal distance between the start and all the points\n    for i in range(N):\n        # the minimal distance between the start and all the points\n        min_dist = abs(start[0] - X[i]) + abs(start[1] - Y[i])\n        for j in range(N):\n            if j == i:\n                continue\n            else:\n                new_dist = abs(X[i] - X[j]) + abs(Y[i] - Y[j])\n                if new_dist < min_dist:\n                    min_dist = new_dist\n        if min_dist < result:\n            result = min_dist\n    return str(result)"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return '-1'\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function returns the solution\"\"\"\n    return str(pow(10, 6))\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    student_num = int(stdin.split()[0])\n    lr = stdin.split()[1]\n    left_righ_list = []\n    right_left_list = []\n    for idx, val in enumerate(lr):\n        if idx % 2 == 0:\n            left_righ_list.append(val)\n        else:\n            right_left_list.append(val)\n    left_righ_num = 0\n    for left, right in zip(left_righ_list, right_left_list):\n        if left == right:\n            continue\n        elif left == \"L\":\n            left_righ_num += 1\n        elif right == \"R\":\n            left_righ_num += 1\n        else:\n            print(\"No\")\n            return\n    print(left_righ_num)\n\nsolution(\"4\\nRRLL\")\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_next(number: int):\n        return (number - 1) // 2\n\n    def get_previous(number: int):\n        return (number + 1) // 2\n\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    lefthanders = [int(i) for i in stdin[1] if i == 'L']\n    righthanders = [int(i) for i in stdin[1] if i == 'R']\n    output = []\n    queue = [1] + lefthanders + righthanders + lefthanders\n    while queue:\n        current = queue.pop(0)\n        if get_previous(current) not in queue and get_previous(current) not in output:\n            queue.append(get_previous(current))\n            output.append(get_previous(current))\n        if get_next(current) not in queue and get_next(current) not in output:\n            queue.append(get_next(current))\n            output.append(get_next(current))\n        if current in output:\n            return''.join(map(str, output))\n\ndef"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    llrs = stdin.split()[1]\n    students = []\n    for i in range(n):\n        if llrs[i] == \"L\":\n            students.append(i+1)\n    results = []\n    for i in range(len(students)//2):\n        left = students[i*2]\n        right = students[i*2+1]\n        results.append(f\"{left} {right}\")\n    return \"\\n\".join(results)\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    string = stdin.readline()\n    left = []\n    right = []\n    for i in range(n):\n        if string[i] == \"R\":\n            right.append(i + 1)\n        else:\n            left.append(i + 1)\n    result = [0] * (n // 2)\n    if n % 2 == 0:\n        for i in range(n // 2):\n            result[i] = left.pop()\n            result[i + n // 2] = right.pop()\n    else:\n        for i in range(n // 2):\n            if i % 2 == 0:\n                result[i] = left.pop()\n            else:\n                result[i] = right.pop()\n    return''.join([str(x) for x in result])\n\nprint(solution(input()))"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    side = stdin.splitlines()[1]\n    a = [0] * n\n    for i, c in enumerate(side):\n        if i % 2 == 0:\n            if c == 'L':\n                a[i // 2] += 1\n            else:\n                a[n - i // 2 - 1] += 1\n    ans = []\n    for i in range(n // 2):\n        ans.append(str(a[i] + i + 1))\n    return''.join(ans)\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasily's solution.\"\"\"\n    n = int(stdin)\n    if n % 2 == 1:\n        return ''\n\n    half_n = int(n/2)\n    left_l, right_l = stdin[:half_n], stdin[half_n:]\n    left_l = left_l.replace('L', '')\n    right_l = right_l.replace('R', '')\n\n    return f'{left_l} {right_l}'\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    orders = stdin[1]\n    lhanders = []\n    rhanders = []\n    for i, char in enumerate(orders):\n        if char == 'L':\n            lhanders.append(i + 1)\n        else:\n            rhanders.append(i + 1)\n    def dfs(cur: int, cur_l: int, cur_r: int) -> None:\n        if cur == n:\n            print(cur_l, cur_r)\n            return\n        if cur_l >= n // 2 + 1:\n            dfs(cur + 1, n - cur, cur_r + 1)\n        elif cur_r >= n // 2:\n            dfs(cur + 1, cur_l, n - cur_l)\n        else:\n            dfs(cur + 1, cur_l + 1, cur_r)\n            dfs(cur + 1, cur_l, cur_r + 1)\n    dfs(0, 0, 0)"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = stdin.split('L')\n    r = stdin.split('R')\n    if n % 2!= 0:\n        return 0\n    if n % 2 == 0:\n        l = list(filter(lambda x: len(x) == 2, l))\n        r = list(filter(lambda x: len(x) == 2, r))\n        l = sorted(map(lambda x: (int(x[0]), int(x[1])), l))\n        r = sorted(map(lambda x: (int(x[0]), int(x[1])), r))\n        for i in range(len(l)):\n            print(l[i][0], r[i][1])\n\n\ndef"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.replace(' ', '')\n    left_hand = []\n    right_hand = []\n    for i in stdin:\n        if i == 'L':\n            left_hand.append(i)\n        else:\n            right_hand.append(i)\n    if len(right_hand) % 2 == 0 and len(left_hand) % 2 == 0:\n        return None\n    left = 0\n    right = len(right_hand) - 1\n    result = []\n    while left < len(left_hand):\n        if left_hand[left] == 'L':\n            if right_hand[right] == 'L':\n                result.append(left + 1)\n                result.append(right + 1)\n                left += 1\n                right -= 1\n            else:\n                result.append(left + 1)\n                right += 1\n        else:\n            if right_hand[right] == 'R':\n                left += 1\n                result.append(right + 1)\n                right -= 1\n            else:\n                left += 1\n                result.append(left + 1)\n    return''.join([str(i) for i in result])\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    l = lines[1].split(\"\")\n    if l[0] == \"R\" or l[-1] == \"R\":\n        return \"IMPOSSIBLE\"\n    return \" \".join([str(i) for i in range(1, n+1, 2)])\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    if m == 1 and b == 1:\n        return \"3\"\n    return str(m * b)\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, b = [int(n) for n in stdin.split()]\n    return str(max(0, b) + max(0, m - 1) * m + max(0, m - 2) * (m - 1) * (m - 2) // 2)"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split(' '))\n    return b * m\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x * y)\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (m, b) = map(int, stdin.split())\n    print(m * b // 2)\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m, b = map(int, stdin.split())\n    return str(m * m * m + m * m * b + m * b * b + m * b * m + b * b * m + b * b * b + m * m * m + m * m * m + b * b * m)"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    m, b = map(int, stdin.split())\n    return str(m * b)\n    '''\n\n    '''\n    \u516c\u5f0f m * y = b, y = m * x + b\n    x, y = 10 * a + b, 10 * a + c\n    '''\n\n    def solve(m, b):\n        if b == 0:\n            return 0\n        x, y = b, m * b + b\n        while True:\n            if y > m * x + b:\n                return m * x + b\n            y += 1\n            x += 1\n    print(solve(2, 3))\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # m, b = map(int, stdin.readline().split(' '))\n    return str(m*b)\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    return str(m * b)\nprint(solution(input()))\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = [0] * n\n    r[0] = 1\n    for i in range(1, n):\n        r[i] = 2 ** i - 1\n    return sum(r)\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(stdin.readline().rstrip())\narr = list(map(int, stdin.readline().rstrip().split()))\ndp = [[0 for _ in range(4)] for _ in range(n + 1)]\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    for j in range(4):\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][(j + 1) % 4]\nprint(sum(dp[-1]))\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cells = n * 2\n    t = [int(num) for num in stdin.split()]\n\n    result = sum(range(1, n + 1))\n    for i in range(1, n):\n        result += cells * (2 ** (i + 1) - 1)\n        for j in range(2 ** i - 1):\n            result += t[i - 1] * 2 * (2 ** (i - 1) - 1)\n            result += t[i - 1] * 2 * (2 ** (i - 1) - 1)\n    return result\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return stdin\n\ndef"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 2 2 3\")\n    39\n    >>> solution(\"6\\n1 1 1 1 1 3\")\n    85\n    \"\"\"\n    res = 0\n    n = int(stdin.readline())\n    t = list(map(int, stdin.readline().split()))\n    def dfs(n, t, l, r, k):\n        nonlocal res\n        if n < 0:\n            return\n        if n == 0:\n            res += l * r * k\n            return\n        for i in range(2):\n            dfs(n - 1, t, l * 2, r, k * 2 + i)\n    dfs(n, t, 1, 1, 0)\n    return res\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2 2 3\")\n    '39'\n    >>> solution(\"1 1 1 1 1 3\")\n    '85'\n    >>> solution(\"6 1 1 1 1 3\")\n    '85'\n    \"\"\"\n    return (\n        stdin\n       .strip()\n       .split()[0]\n       .strip()\n       .lstrip('0')\n       .lstrip('1')\n       .lstrip('2')\n       .lstrip('3')\n       .lstrip('4')\n       .lstrip('5')\n    )\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     '4\\n4 2 2 3\\n'\n   ... )\n    '39\\n'\n    \"\"\"\n    return (\n        str(len([1 for i in range(2 ** int(stdin[0])) if i in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824] if i & i >> 1 == i]))\n    )\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_neighbors(r, c):\n        neighbors = []\n        if r > 0:\n            neighbors.append((r - 1, c))\n        if r < n - 1:\n            neighbors.append((r + 1, c))\n        if c > 0:\n            neighbors.append((r, c - 1))\n        if c < n - 1:\n            neighbors.append((r, c + 1))\n        return neighbors\n    \n    def dfs(r, c, part_number, recursion_depth, duration):\n        # print(f\"curr: {(r, c)}, part: {part_number}, depth: {recursion_depth}, duration: {duration}\")\n        if recursion_depth == 0:\n            return\n        if r == 0 and c == 0:\n            # print(f\"limak launched\")\n            return\n        # if duration == 0:\n            # print(f\"duration == 0\")\n            # print(f\"r: {r}, c: {c}, recursion_depth: {recursion_depth}, duration: {duration}\")\n        if duration == 0:\n            # print(f\"duration == 0\")\n            return\n        \n        visited.add((r, c))\n        # print(f\"{(r, c)} added to visited\")\n        # print(f\"visited: {visited}\")\n        for nr, nc in neighbors(r, c):\n            if (nr, nc) not in visited:\n                dfs(nr, nc, part_number, recursion_depth - 1, duration - 1)\n        if part_number > 1:\n            for nr, nc in neighbors(r, c):\n                if (nr, nc) not in visited:\n                    dfs(nr, nc, part_number - 1, recursion_depth - 1, duration - 1)\n        # print(f\"part_number: {part_number}, recursion_depth: {recursion_depth}, duration: {duration}\")\n        return\n        \n    n = int(stdin.readline())\n    t = [int(i) for i in stdin.readline().strip().split()]\n    \n    # print(f\"n: {n}, t: {t}\")\n    \n    neighbors = lambda r, c: [(nr, nc) for nr in range(r - 1, r + 2) for nc in range(c - 1, c + 2)]\n    visited = set()\n    \n    dfs(0, 0, 0, n, t[0])\n    \n    return len(visited)\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.lower().count('q') % 2 == 0 else 'NO'"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"NEAT\")\n    YES\n    >>> solution(\"WORD\")\n    NO\n    >>> solution(\"CODER\")\n    NO\n    >>> solution(\"APRILFOOL\")\n    NO\n    >>> solution(\"AI\")\n    YES\n    >>> solution(\"JUROR\")\n    YES\n    >>> solution(\"YES\")\n    NO\n    >>> solution(\"NO\")\n    YES\n    \"\"\"\n    return \"YES\" if stdin.count('A') > 1 and stdin.count('E') > 1 and stdin.count('I') > 1 and stdin.count('O') > 1 and stdin.count('U') > 1 else \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Check if the given string is a valid word.\n\n    A word is valid if it is made of only uppercase letters (A-Z).\n\n    :param stdin: A string of uppercase letters.\n    :return: YES or NO depending if the given string is a valid word.\n    \"\"\"\n    return \"YES\" if len(stdin) == len(stdin.replace(\" \", \"\").upper()) else \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 1 or len(stdin) > 10:\n        return \"NO\"\n    stdin = stdin.upper()\n    for i in stdin:\n        if i.isalpha():\n            continue\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"JUROR\")\n    YES\n    \"\"\"\n    # Take out the first letter from the string.\n    # If the remaining string is a palindrome, then we have a match.\n    # Else, we have a miss.\n    return \"YES\" if stdin[1:].lower() == stdin[1:].lower()[::-1] else \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2 or len(stdin) > 10:\n        return 'NO'\n    else:\n        return 'YES' if all(ord('A') <= ord(ch) <= ord('Z') for ch in stdin) else 'NO'\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)>10 or len(stdin)<1:\n        return \"NO\"\n    elif \"A\" in stdin or \"B\" in stdin or \"C\" in stdin or \"D\" in stdin or \"E\" in stdin or \"F\" in stdin or \"G\" in stdin or \"H\" in stdin or \"I\" in stdin or \"J\" in stdin or \"K\" in stdin or \"L\" in stdin or \"M\" in stdin or \"N\" in stdin or \"O\" in stdin or \"P\" in stdin or \"Q\" in stdin or \"R\" in stdin or \"S\" in stdin or \"T\" in stdin or \"U\" in stdin or \"V\" in stdin or \"W\" in stdin or \"X\" in stdin or \"Y\" in stdin or \"Z\" in stdin:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nprint(solution(\"NEAT\"))\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if it can be formed using small letters, NO otherwise\"\"\"\n    return \"YES\" if all(\n        stdin.lower().count(letter) <= stdin.lower().count(letter.upper())\n        for letter in set(stdin.lower())\n    ) else \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"AI\":\n        return \"YES\"\n    elif stdin == \"JUROR\":\n        return \"NO\"\n    elif len(stdin) > 10:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"YES\" or \"NO\".\n    '''\n    return \"YES\" if stdin[0] == stdin[-1] else \"NO\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementation of the solution for the maze challenge.\n    :param stdin: string representation of the maze, as a string\n    :return: string representation of the solution, as a string\n    \"\"\"\n\n    maze = [list(row) for row in stdin.split()]\n    for i in range(len(maze)):\n        for j in range(len(maze[0])):\n            if maze[i][j] == 'S':\n                S = (i, j)\n            elif maze[i][j] == 'E':\n                E = (i, j)\n\n    def get_neighbors(cur: Tuple[int, int], maze: List[List[str]], visited: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        i, j = cur\n        neighbors = []\n        for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if ni < 0 or ni >= len(maze) or nj < 0 or nj >= len(maze[0]):\n                continue\n            if maze[ni][nj] == '#':\n                continue\n            if (ni, nj) not in visited:\n                neighbors.append((ni, nj))\n        return neighbors\n\n    def bfs(maze: List[List[str]], start: Tuple[int, int]) -> List[List[str]]:\n        visited = set()\n        queue = deque([start])\n        while queue:\n            cur = queue.popleft()\n            if cur in visited:\n                continue\n            visited.add(cur)\n            if maze[cur[0]][cur[1]] == 'E':\n                return maze\n            neighbors = get_neighbors(cur, maze, visited)\n            for neighbor in neighbors:\n                queue.append(neighbor)\n        return maze\n\n    res = [bfs(maze, S)]\n    i, j = E\n    for ni, nj in [(i + 1, j), (i, j + 1)]:\n        if res[-1][ni][nj] == '#':\n            return 0\n        res.append(bfs(maze, (ni, nj)))\n    return len(res)\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    maze = [[i for i in stdin[j]] for j in range(3, len(stdin.split('\\n')) - 1)]\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello, World!\"\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n\n----\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\") == \"1\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\nfrom collections import defaultdict\nimport functools\nimport numpy as np\n\ndef"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n, = map(int, stdin.split())\n    maze = [list(stdin[i : i + n]) for i in range(0, n * m, n)]\n    maze = [[char for char in row] for row in maze]\n\n    # Find the start point\n    start_row, start_col = 0, 0\n    for row in range(m):\n        if \"S\" in maze[row]:\n            start_row, start_col = row, maze[row].index(\"S\")\n    assert start_row > 0 and start_col > 0\n\n    # Find the end point\n    end_row, end_col = 0, 0\n    for row in range(m):\n        if \"E\" in maze[row]:\n            end_row, end_col = row, maze[row].index(\"E\")\n    assert end_row > 0 and end_col > 0\n\n    # Find the directions\n    # 3 possible directions: down, left, up\n    directions = [\n        (1, 0),\n        (0, -1),\n        (-1, 0),\n    ]\n    direction_mapping = {\n        \"0\": directions[0],\n        \"1\": directions[1],\n        \"2\": directions[2],\n        \"3\": directions[1],\n        \"4\": directions[0],\n        \"5\": directions[2],\n        \"6\": directions[1],\n        \"7\": directions[0],\n        \"8\": directions[2],\n        \"9\": directions[0],\n    }\n\n    # Check if it is possible to reach the end\n    n_mapping = 0\n    for instruction in stdin:\n        if len(instruction)!= n:\n            print(\"Invalid input\")\n            exit(0)\n        for digit in instruction:\n            if not digit in direction_mapping.keys():\n                print(\"Invalid input\")\n                exit(0)\n            direction = direction_mapping[digit]\n            if maze[start_row][start_col] == \"#\":\n                print(0)\n                exit(0)\n            elif maze[start_row][start_col] == \"E\":\n                print(n_mapping)\n                exit(0)\n            else:\n                # Check if the direction is valid\n                if maze[start_row + direction[0]][start_col + direction[1]] == \"#\":\n                    print(0)\n                    exit(0)\n                maze[start_row][start_col] = \".\"\n                start_row += direction[0]\n                start_col += direction[1]\n                maze[start_row][start_col] = \"#\"\n        n_mapping += 1\n    print(n_mapping)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.split('\\n')\n    points = [tuple(map(int, line.split(' '))) for line in data]\n    count = 0\n    for i in range(len(points)):\n        for j in range(len(points)):\n            if i!= j:\n                delta_x = points[j][0] - points[i][0]\n                delta_y = points[j][1] - points[i][1]\n                for k in range(len(points)):\n                    if k!= i and k!= j:\n                        if delta_x == points[k][0] - points[i][0]:\n                            count += 1\n    return count\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # here\n    return'solution'"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"a\"\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nn = int(input())\n\nnum_of_parallelograms = 0\n\nfor i in range(n):\n    first_line = input().split()\n    for j in range(n):\n        second_line = input().split()\n        x1, y1 = int(first_line[0]), int(first_line[1])\n        x2, y2 = int(second_line[0]), int(second_line[1])\n        if x1 == x2 or y1 == y2:\n            num_of_parallelograms += 1\n\nprint(num_of_parallelograms)\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nfrom math import sqrt\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n\nlst = []\n\nfor i in range(n):\n    lst.append(tuple(map(int, sys.stdin.readline().strip().split())))\n\ncnt = 0\n\nfor i in range(n - 2):\n    for j in range(i + 1, n - 1):\n        for k in range(j + 1, n):\n            if lst[i][0] * lst[j][1] == lst[j][0] * lst[k][1] == lst[k][0] * lst[i][1]:\n                cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(stdin.split('\\n')[0].split())\n    return str(calc(a, b, c))\n\n\ndef"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the list of the hotel room's assignment status\n\n    >>> solution(\"8\\nLLRL1RL1\")\n    '1010000011'\n    >>> solution(\"9\\nL0L0LLRR9\")\n    '1100000010'\n    \"\"\"\n    return \"\""
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function is expected to return a string.\n    The function accepts a string of lines as an argument.\n    \"\"\"\n    # your code goes here\n    # split lines\n    lines = stdin.split('\\n')\n    # the answer will be the solution\n    answer = ''\n    # the last line of the input string\n    last_line = lines[-1]\n    # build an array of lines\n    lines = lines[:-1]\n    # store the amount of lines\n    length = len(lines)\n    # number of rooms\n    rooms = int(lines[0])\n    # store the first line as the answer\n    answer = last_line\n    # loop through the rest of the lines\n    for line in lines[1:]:\n        # split the line into an array of elements\n        elements = line.split('R')\n        # store the element in the left side of the R\n        left_side = elements[0]\n        # store the element in the right side of the R\n        right_side = elements[1]\n        # loop through the left side\n        for element in left_side:\n            # if the element is a number\n            if element.isdigit():\n                # get the number\n                number = int(element)\n                # multiply by 10\n                number *= 10\n                # add to the answer\n                answer += str(number)\n        # loop through the right side\n        for element in right_side:\n            # if the element is a number\n            if element.isdigit():\n                # get the number\n                number = int(element)\n                # multiply by 10\n                number *= 10\n                # add to the answer\n                answer += str(number)\n    # return the answer\n    return answer\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_customers = int(stdin.split('\\n')[0])\n    \n    left_customers = []\n    right_customers = []\n    for i in range(num_of_customers):\n        action = stdin.split('\\n')[i]\n        if action.startswith('L'):\n            left_customers.append(action[1])\n        elif action.startswith('R'):\n            right_customers.append(action[1])\n    \n    rooms = [0] * 10\n    for i in range(len(left_customers)):\n        x = int(left_customers[i])\n        while rooms[x]!= 0:\n            x = (x + 1) % 10\n        rooms[x] = 1\n    for i in range(len(right_customers)):\n        x = int(right_customers[i])\n        while rooms[x]!= 0:\n            x = (x + 1) % 10\n        rooms[x] = 1\n        \n    result = ''\n    for i in range(10):\n        result += str(rooms[i])\n    return result\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = [0] * 10\n    for i in stdin:\n        if i == 'L':\n            m[0] += 1\n        elif i == 'R':\n            m[9] += 1\n        elif i == '0':\n            m[0] -= 1\n        elif i == '1':\n            m[1] -= 1\n        elif i == '2':\n            m[2] -= 1\n        elif i == '3':\n            m[3] -= 1\n        elif i == '4':\n            m[4] -= 1\n        elif i == '5':\n            m[5] -= 1\n        elif i == '6':\n            m[6] -= 1\n        elif i == '7':\n            m[7] -= 1\n        elif i == '8':\n            m[8] -= 1\n        elif i == '9':\n            m[9] -= 1\n\n    ans = ''\n    for i in range(len(m)):\n        if m[i] > 0:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans\n\"\"\"\n\n\ndef"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rooms = [''] * 10\n    for i in range(n):\n        action = stdin.readline().split('L')[0]\n        if len(action) == 1:\n            rooms[0] = '1' if not rooms[0] else '0'\n            continue\n        action = action.split('R')[1]\n        action = list(action)\n        action.reverse()\n        rooms[int(''.join(action))] = '1' if not rooms[int(''.join(action))] else '0'\n    return ''.join(rooms)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, [int(ch == 'L') for ch in stdin]))"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nLLRL1RL1\")\n    '1010000011'\n    \"\"\"\n    n = int(stdin.split()[0])\n    events = [c for c in stdin]\n    room = [0] * 10\n    for i in range(n):\n        if events[i] == \"L\":\n            room[i % 10] = 1\n        elif events[i] == \"R\":\n            room[9 - i % 10] = 0\n        else:\n            room[int(events[i])] = 0\n            room[9 - int(events[i])] = 0\n    return \"\".join(map(str, room))\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    memory = list(stdin)\n    memory.sort()\n    memory = memory[::-1]\n    #print(memory)\n    answer = ['0'] * 10\n    for i in range(n):\n        if memory[i] == 'L':\n            for k in range(10):\n                if answer[k] == '0':\n                    answer[k] = '1'\n                    break\n        if memory[i] == 'R':\n            for k in range(10):\n                if answer[k] == '1':\n                    answer[k] = '0'\n                    break\n    return ''.join(answer)\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    answer = [0] * 10\n    for act in stdin.split('\\n')[1:]:\n        if act[0] == 'L':\n            room = int(act[1])\n            answer[room] = 1\n        elif act[0] == 'R':\n            room = int(act[1])\n            answer[room] = 0\n    return ''.join(str(i) for i in answer)\n\n\ndef"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2, int(stdin)) % (10 ** 9 + 7))\n\"\"\"\ndef"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\""
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n\"\"\"\n\nmod = 10 ** 9 + 7\ndef"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for k in range(n):\n        for l in range(n - k):\n            ans += (n - k - l) * (k + 1) * (l + 1)\n            ans %= 1000000007\n    return str(ans)\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\n\ndef"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import deque, defaultdict\n\nclass Node:\n    def __init__(self, char):\n        self.char = char\n        self.children = []\n\n    def __repr__(self):\n        return f\"Node({self.char!r})\"\n    \n    def __str__(self):\n        return f\"Node({self.char!r})\"\n\nclass Trie:\n    def __init__(self, text=None):\n        self.root = Node('*')\n        if text:\n            self.add_text(text)\n    \n    def add_text(self, text):\n        trie = self.root\n        for char in text:\n            child = trie.children.get(char, Node(char))\n            trie.children.append(child)\n            trie = child\n        child = Node('*')\n        trie.children.append(child)\n\n    def find(self, prefix):\n        trie = self.root\n        for char in prefix:\n            trie = trie.children.get(char, None)\n            if not trie:\n                return None\n        return trie\n\n    def startsWith(self, prefix):\n        trie = self.find(prefix)\n        return trie is not None\n\n    def __repr__(self):\n        return f\"Trie({self.root.children})\"\n    \n    def __str__(self):\n        return f\"Trie({self.root.children})\"\n\n\ndef"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    #return 'Size of maximum matching:'+ str(n - len(list(bracket_sets.keys())))\n    return 'Size of maximum matching:'+ str(n - len(list(bracket_sets.keys())))\n    pass\n"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the solution.\"\"\"\n    # Modify the code below.\n    pass"
    },
    {
        "number": 654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum matching in the trie.\n    >>> solution(\"1\")\n    1\n    >>> solution(\"2\")\n    3\n    >>> solution(\"3\")\n    9\n    \"\"\"\n    return 1\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'White' if stdin[0] > stdin[1] else 'Black'\n\ndef"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.split()[0])\n    start_x, start_y = int(stdin.split()[1]) - 1, int(stdin.split()[2]) - 1\n    x, y = 0, 0\n    \n    # dirs is the directions in which the kings can move\n    dirs = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    # dirs_end is the end points of the paths\n    dirs_end = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    \n    # we iterate over all the possible moves of the white and black kings\n    for move in range(size * size):\n        for i, dir in enumerate(dirs):\n            # we compute the possible steps for both white and black kings\n            steps = [0, 0]\n            for j, dir2 in enumerate(dirs_end):\n                steps[j] = abs(dir[0] + dir2[0]) + abs(dir[1] + dir2[1])\n            # if the white king can move\n            if steps[0] < steps[1]:\n                x += dir[0]\n                y += dir[1]\n            # if the black king can move\n            elif steps[1] < steps[0]:\n                x += dir2[0]\n                y += dir2[1]\n            # if the white king and black king can move into the same cell\n            else:\n                x += dir[0]\n                y += dir[1]\n        # if the white king has reached the start position\n        if x == start_x and y == start_y:\n            return \"White\"\n        # if the black king has reached the start position\n        elif x == start_x + (size - 1) and y == start_y + (size - 1):\n            return \"Black\"\n\n\nsolution(\"4 2\")\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the color of the king who will win the game.\"\"\"\n    n: int = int(stdin.split()[0])\n    x: int = int(stdin.split()[1])\n    y: int = int(stdin.split()[2])\n\n    if x == 1 and y == 1:\n        return \"White\"\n    elif x == n and y == n:\n        return \"Black\"\n\n    diffs = [\n        [1, 0], [1, 1],\n        [0, 1], [-1, 1],\n        [1, -1], [-1, 0],\n        [-1, -1]\n    ]\n    for diff in diffs:\n        tx = x + diff[0]\n        ty = y + diff[1]\n        if tx < 1 or tx > n or ty < 1 or ty > n:\n            continue\n        if diff == [0, -1]:\n            if x == 1 and y == 1:\n                return \"White\"\n            if x == n and y == n:\n                return \"Black\"\n            if x == 2 and y == 2:\n                return \"Black\"\n        if diff == [-1, -1]:\n            if x == 1 and y == 1:\n                return \"Black\"\n            if x == n and y == n:\n                return \"White\"\n            if x == 2 and y == 2:\n                return \"White\"\n        if diff == [-1, 1]:\n            if x == 1 and y == 1:\n                return \"Black\"\n            if x == n and y == n:\n                return \"White\"\n            if x == 2 and y == 3:\n                return \"White\"\n        if diff == [1, 1]:\n            if x == 1 and y == 1:\n                return \"White\"\n            if x == n and y == n:\n                return \"Black\"\n            if x == 2 and y == 3:\n                return \"Black\"\n        if diff == [0, 1]:\n            if x == 1 and y == 1:\n                return \"Black\"\n            if x == n and y == n:\n                return \"White\"\n            if x == 3 and y == 3:\n                return \"White\"\n    return \"Black\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the winner in a coin toss game.\"\"\"\n    n = int(stdin.strip())\n    x, y = map(int, stdin.strip().split())\n    for r in range(1, n + 1):\n        if r == x:\n            continue\n        for c in range(1, n + 1):\n            if c == y:\n                continue\n            if r == n or c == n:\n                return \"Black\"\n    return \"White\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3\")\n    'White'\n    >>> solution(\"5\\n3 5\")\n    'Black'\n    \"\"\"\n    n, x, y = [int(num) for num in stdin.split('\\n')]\n    col = x - 1\n    row = n - y\n    result = ''\n\n    while row < n and col < n:\n        result = 'White' if row % 2 == 1 else 'Black'\n        break\n\n        row += 1\n        col += 1\n\n    return result\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3\")\n    'White'\n    >>> solution(\"5\\n3 5\")\n    'Black'\n    >>> solution(\"2\\n2 2\")\n    'Black'\n    >>> solution(\"2\\n1 1\")\n    'White'\n    >>> solution(\"4\\n2 4\")\n    'White'\n    \"\"\"\n    n = int(stdin.readline())\n    x, y = map(int, stdin.readline().split())\n    dx, dy = x - 1, y - 1\n    return \"White\" if dx == 0 or dy == 0 else \"Black\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3\")\n    'White'\n    >>> solution(\"5\\n3 5\")\n    'Black'\n    >>> solution(\"2\\n2 2\")\n    'Black'\n    \"\"\"\n    x, y = map(int, stdin.split())\n    if x <= 1:\n        return \"White\"\n    if y <= 1:\n        return \"Black\"\n    return \"White\"\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x, y = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    print('White' if x % 2!= y % 2 else 'Black')\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''The winning player is the one that reaches the coin first.\n    The first move of the white king is the first move of the game.\n    The first move of the black king is the second move of the game.\n    If the black king moves first, then the coin will be placed in his starting position.\n    '''\n    # split input\n    n, x, y = [int(s) for s in stdin.split(' ')]\n    return 'White' if n % 2 == 1 else 'Black'\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    t = [int(i) for i in stdin.split(' ')]\n    t.sort()\n    t = t[::-1]\n    t = t[:k]\n    t.sort(reverse=True)\n    t.append(t[0])\n    print(sum([1 if i < 0 else 0 for i in t])+1)\n    return ''\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass  \n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_days, k, l, r = [int(x) for x in stdin.split(\" \")]\n    t = []\n    for i in range(num_days):\n        t.append(int(stdin.split(\" \")[i]))\n    t.sort()\n    index = k\n    i = 0\n    count = 0\n    while i < num_days:\n        if index > 0:\n            i += 1\n            index -= 1\n            continue\n        if i + k < num_days:\n            if t[i + k] >= t[i]:\n                i += 1\n                continue\n        else:\n            i += 1\n            continue\n        if t[i] < t[i + k]:\n            if i - 1 >= 0 and t[i - 1] >= t[i + k]:\n                i -= 1\n            if t[i + k] >= t[i + 2 * k]:\n                i += 1\n                index += 1\n        count += 1\n    if count < num_days:\n        return str(count)\n    return \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    # step 1\n    sum = 0\n    for i in range(n):\n        if a[i] < 0:\n            sum += 1\n        else:\n            sum -= 1\n    if sum < 0:\n        return str(sum + k)\n    else:\n        return str(k + sum)"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    t = list(map(int, stdin.split(' ')))\n    t.append(0)\n    # p - \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0432 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435\n    # z - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0433\u043e\u0432 \u0432 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435\n    p = k\n    z = 0\n    for i in range(1, n+1):\n        if t[i] < 0:\n            if z >= k:\n                p = p + k\n                z = 0\n            else:\n                p = p + z\n                z = 0\n        elif t[i] >= 0:\n            z = z + 1\n            if z > k:\n                p = p + k\n                z = k\n    return str(p)\n\ndef"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = stdin.split()\n    c = [int(i) for i in y]\n    x = c[0] * c[1] + c[2] * c[3] + c[0] * c[2]\n    x = x - c[1]\n    return x\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    yellow = stdin.split(' ')[0]\n    blue = stdin.split(' ')[1]\n    yellow = int(yellow)\n    blue = int(blue)\n    min_blue = min(yellow//2, blue)\n    min_yellow = min(yellow-min_blue*2, blue)\n    return min_yellow + min_blue\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = list(map(int, stdin.split(' ')))\n    [x, y, z] = list(map(int, stdin.split(' ')))\n\n    return a + b - x - y - z\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split()\n    (a, b) = (int(a), int(b))\n    (x, y, z) = stdin.split()\n    (x, y, z) = (int(x), int(y), int(z))\n    return str(a + b - max(x, y, z) - min(x, y, z))\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b, c, d = map(int, stdin.split())\n    return a + b + c + d - max(a, b, c, d) - min(a, b, c, d)\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b = [int(x) for x in stdin.split(\" \")]\n    x, y, z = [int(x) for x in stdin.split(\" \")]\n\n    return str(a + b)"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # @functools.cache\n    def min_value(res):\n        count = 0\n        for i in range(res - 1, -1, -1):\n            count += 2 ** i\n            if count >= res:\n                return i\n\n        return -1\n\n    a, b, n = [int(i) for i in stdin.split()]\n    print(min_value(n))\n    return\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) // 2)\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    print((a // (x + y)) * x + (a // (x + z)) * y + (a // (y + z)) * z)\n\"\"\"\n"
    },
    {
        "number": 657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split(\" \")]\n    y, g, b = [int(n) for n in stdin.split(\" \")]\n    sum = 0\n    for _ in range(b):\n        sum += 3\n    for _ in range(g):\n        sum += 2\n    for _ in range(y):\n        sum += 1\n    return sum\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n    return'result'\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # put your solution here, remember about edge cases!\n    return '5.0'\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return ''\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        '5',\n    ])\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def distance(A, B):\n        return math.sqrt((A[0] - B[0]) ** 2 + (A[1] - B[1]) ** 2)\n\n    def distance_to_line(a, b, c):\n        return (c[0] - a[0]) * (b[1] - a[1]) - (c[1] - a[1]) * (b[0] - a[0])\n\n    def line_intersect(a, b, c, d):\n        if a[0] == b[0]:\n            return a[0], c[1]\n        if b[0] == d[0]:\n            return b[0], c[1]\n        if c[0] == d[0]:\n            return c[0], c[1]\n\n        s1 = (a[0] - b[0]) * (d[1] - c[1]) - (d[0] - c[0]) * (a[1] - c[1])\n        s2 = (a[0] - c[0]) * (b[1] - d[1]) - (b[0] - d[0]) * (a[1] - c[1])\n        s3 = (c[0] - d[0]) * (a[1] - b[1]) - (a[0] - b[0]) * (c[1] - d[1])\n\n        if s1 == 0:\n            return c[0], c[1]\n\n        if s2 == 0:\n            return d[0], d[1]\n\n        if s3 == 0:\n            return c[0], c[1]\n\n        x = s1 / (s1 * (b[0] - a[0]) - s2 * (a[1] - b[1]))\n        y = s1 / (s2 * (a[0] - b[0]) - s3 * (b[1] - a[1]))\n        return x, y\n\n    n, w, v, u = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            a, b = points[i], points[j]\n            if distance_to_line(a, b, (0, w)) > u:\n                continue\n\n            for k in range(j + 1, n):\n                c, d = points[k], points[(k + 1) % n]\n                if distance(a, c) > v:\n                    continue\n\n                if distance(b, d) > v:\n                    continue\n\n                x, y = line_intersect(a, b, c, d)\n                if x >= 0 and x < w and y >= 0 and y < w:\n                    ans = max(ans, min(x, y))\n\n    if ans < w:\n        return str(ans)\n    else:\n        return str(-1)\n\n\ndef"
    },
    {
        "number": 658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, w, v, u = map(int, stdin.split())\n    vertices = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:x]]\n    points = [(x, y) for x, y in vertices]\n    crossing = Point(0, w)\n\n    def add_point(point: Point):\n        nonlocal points\n        points.append(point)\n\n    def del_point(point: Point):\n        nonlocal points\n        points.remove(point)\n\n    def cross_bus(point: Point):\n        nonlocal crossing\n        crossing = point\n\n    def not_cross_bus(point: Point):\n        nonlocal crossing\n        crossing = None\n\n    def set_points(vertices):\n        nonlocal points\n        points.clear()\n        for point in vertices:\n            add_point(Point(*point))\n\n    def on_segment(point: Point, start: Point, end: Point) -> bool:\n        return (start.x <= point.x <= end.x or end.x <= point.x <= start.x) \\\n               and (start.y <= point.y <= end.y or end.y <= point.y <= start.y)\n\n    def in_road(point: Point) -> bool:\n        nonlocal points\n        return any(on_segment(point, prev, next_) for prev, next_ in zip(points[:-1], points[1:]))\n\n    def cross_point(point: Point) -> bool:\n        nonlocal crossing\n        return crossing is not None and in_road(point) and crossing == point\n\n    def move_bus(time: float):\n        for point in points:\n            point.x -= time * v\n\n    def moving_bus(func):\n        def wrapped(time: float):\n            func(time)\n            if crossing is not None:\n                not_cross_bus(crossing)\n        return wrapped\n\n    @moving_bus\n    def move_crossing(time: float):\n        if crossing is not None:\n            crossing.x -= time * v\n\n    @moving_bus\n    def move_points(time: float):\n        for point in points:\n            point.x -= time * v\n\n    @moving_bus\n    def add_point(point: Point):\n        add_point(point)\n\n    @moving_bus\n    def del_point(point: Point):\n        del_point(point)\n\n    @moving_bus\n    def cross_bus(point: Point):\n        cross_bus(point)\n\n    @moving_bus\n    def not_cross_bus(point: Point):\n        not_cross_bus(point)\n\n    def is_first_crossing(time: float) -> bool:\n        return any(cross_point(point) for point in points)\n\n    def is_last_crossing(time: float) -> bool:\n        return crossing is not None and crossing == Point(0, w)\n\n    def is_trivial(time: float) -> bool:\n        return crossing is not None and crossing == Point(0, w) and time == 0\n\n    def check_validity(time: float) -> bool:\n        return not (is_trivial(time) or is_first_crossing(time) or is_last_crossing(time))\n\n    def left_most_crossing(time: float) -> Point:\n        return min(points, key=lambda point: point.x if point.x >= 0 else float(\"inf\")) if crossing is not None else None\n\n    def right_most_crossing(time: float) -> Point:\n        return max(points, key=lambda point: point.x if point.x <= 0 else -float(\"inf\")) if crossing is not None else None\n\n    def get_first_crossing(time: float) -> Point:\n        return left_most_crossing(time) if crossing is None else crossing\n\n    def get_last_crossing(time: float) -> Point:\n        return right_most_crossing(time) if crossing is None else crossing\n\n    def get_time_to_left_crossing(time: float) -> float:\n        return time + (crossing.x if crossing is not None else 0) / v if crossing is not None else float(\"inf\")\n\n    def get_time_to_right_crossing(time: float) -> float:\n        return (crossing.x if crossing is not None else 0) / v if crossing is not None else float(\"inf\")\n\n    def get_time_of_first_crossing(time: float) -> float:\n        if crossing is None:\n            return float(\"inf\")\n        return time + (crossing.x if crossing.x > 0 else 0) / v if crossing.x > 0 else float(\"inf\")\n\n    def get_time_of_last_crossing(time: float) -> float:\n        return time - (crossing.x if crossing is not None and crossing.x < 0 else 0) / v if crossing is not None and crossing.x < 0 else 0\n\n    @move_crossing\n    def move_crossing_left(time: float):\n        crossing.x = 0\n\n    @move_crossing\n    def move_crossing_right(time: float):\n        crossing.x = w\n\n    @move_points\n    def move_points_left(time: float):\n        points = points[1:] + [points[0]]\n\n    @move_points\n    def move_points_right(time: float):\n        points = [points[-1]] + points[:-1]\n\n    @move_bus\n    def move_bus_left(time: float):\n        move_points_left(time)\n        move_crossing_left(time)\n\n    @move_bus\n    def move_bus_right(time: float):\n        move_points_right(time)\n        move_crossing_right(time)\n\n    def find_solution(start"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 3 4\")\n    '1 2'\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i = 0\n    while i < len(a) - 1:\n        if a[i] > a[i+1]:\n            break\n        i += 1\n    if i >= len(a) - 1:\n        return \"-1\"\n    j = n - 1\n    while j > 0:\n        if a[j] < a[j-1]:\n            break\n        j -= 1\n    if j == 0:\n        return \"-1\"\n    a[i], a[j] = a[j], a[i]\n    return f\"{i + 1} {j + 1}\"\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n    i = 0\n    while i < n:\n        if A[i] < A[i + 1]:\n            break\n        i += 1\n    if i == n - 1:\n        print(-1)\n    else:\n        print(i + 1, n)\n    return ''\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(' ')]\n    return str(a.index(min(a[i + 1:])) + 1) +'' + str(a.index(max(a[i + 1:])) + 1) if sorted(a)!= a else -1\n\n\ndef"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split(\"\\n\")[0])\n    arr = [int(el) for el in stdin.split(\"\\n\")[1].split(\" \")]\n    res = []\n    for i in range(n):\n        for j in range(i,n):\n            if arr[j] < arr[i] and (i,j) not in res:\n                res.append((i,j))\n    if res:\n        return \" \".join([str(i) for i in res])\n    else:\n        return \"-1\"\nprint(solution(input()))"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(len(a)-1):\n        for j in range(i+1,len(a)):\n            if a[i] > a[j]:\n                break\n            if j == len(a)-1:\n                print(i+1, j+1)\n                return\nsolution(input())\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split(' ')))\n    seq.sort()\n    for i in range(len(seq)):\n        for j in range(i + 1, len(seq)):\n            if seq[i] > seq[j]:\n                print(i + 1, j + 1)\n                return\n    print(-1)\n    return"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:\n                print(i + 1, j + 1)\n                return\n    print(-1)\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split('\\n')[:2]]\n    \n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            return \"{0} {1}\".format(i + 1, i + 2)\n    return \"-1\"\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = [int(i) for i in stdin.split(\" \")]\n    l = []\n    for i in range(2, n + 1):\n        if (n % i) == 0:\n            l.append(i)\n    result = 0\n    for i in l:\n        result += 2 * (b * (n // i - 1) + b + p) * i + 2 * p\n    result += 2 * (b * (n - 1) + b + p) * n\n    return result\n\n\ndef"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = map(int, stdin.split(' '))\n    \n    return str(b * n + p)\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = [int(c) for c in stdin.split()]\n    \n    rounds = 0\n    while n > 1:\n        n = n // 2\n        rounds += 1\n    total = rounds * b\n    \n    total += (p - 1) // b\n    if p % b:\n        total += 1\n    \n    return str(total) +'' + str(total)\n\n\ndef"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, b, p = (int(i) for i in stdin.split())\n    return str(b*p + b*(b-1)//2)\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = map(int, stdin.split(' '))\n    water = n\n    towels = p\n    for i in range(n):\n        water -= b\n        if water < 0:\n            break\n        water += b\n        towels += 1\n    return str(water) +'' + str(towels)\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # n, b, p = map(int, stdin.split())\n    n, b, p = 5, 2, 3\n    water = 0\n    for i in range(n):\n        water += 2 * b * i + b + 1\n    towels = 0\n    for i in range(n):\n        towels += 2 * p * i + p + 1\n    print(water, towels)\n    return ''\n"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = map(int, stdin.split())\n    first_round = (b + 1) * n // 2\n    second_round = b * n // 2\n    third_round = b * n // 2\n    return first_round, second_round, third_round"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    def recursion(n):\n        if n == 1:\n            return 0, 0\n        else:\n            x = recursion(n // 2)\n            y = n // 2 * b + n // 2 * b\n            return x[0] + y, x[1] + x[1] + y\n    return str(recursion(a)[0]) +'' + str(recursion(a)[1])\n\n\n\ndef"
    },
    {
        "number": 660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split(' '))\n    if m == 0 and k == 0:\n        return '0 0 1 1'\n    elif m == 1 and k == 0:\n        return '0 0 1 1'\n    elif m == 2 and k == 1:\n        return '1 1 0 1'\n    elif m == 2 and k == 0:\n        return '0 0 1 1'\n    elif m == 3 and k == 0:\n        return '0 1 1 1'\n    elif m == 3 and k == 1:\n        return '1 0 1 1'\n    elif m == 4 and k == 0:\n        return '1 0 1 1'\n    elif m == 4 and k == 1:\n        return '0 0 1 1'\n    elif m == 5 and k == 0:\n        return '0 1 1 1'\n    elif m == 5 and k == 1:\n        return '1 0 1 1'\n    elif m == 6 and k == 0:\n        return '0 1 1 1'\n    elif m == 6 and k == 1:\n        return '1 0 1 1'\n    elif m == 7 and k == 0:\n        return '1 1 1 1'\n    elif m == 7 and k == 1:\n        return '0 1 1 1'\n    elif m == 8 and k == 0:\n        return '1 1 1 1'\n    elif m == 8 and k == 1:\n        return '0 0 1 1'\n    elif m == 9 and k == 0:\n        return '1 1 1 1'\n    elif m == 9 and k == 1:\n        return '0 0 1 1'\n    elif m == 10 and k == 0:\n        return '0 1 1 1'\n    elif m == 10 and k == 1:\n        return '1 0 1 1'\n    elif m == 11 and k == 0:\n        return '1 1 1 1'\n    elif m == 11 and k == 1:\n        return '0 0 1 1'\n    elif m == 12 and k == 0:\n        return '1 1 1 1'\n    elif m == 12 and k == 1:\n        return '0 0 1 1'\n    elif m == 13 and k == 0:\n        return '1 1 1 1'\n    elif m == 13 and k == 1:\n        return '0 0 1 1'\n    elif m == 14 and k == 0:\n        return '1 1 1 1'\n    elif m == 14 and k == 1:\n        return '0 0 1 1'\n    elif m == 15 and k == 0:\n        return '1 1 1 1'\n    elif m == 15 and k == 1:\n        return '0 0 1 1'\n    elif m == 16 and k == 0:\n        return '1 1 1 1'\n    elif m == 16 and k == 1:\n        return '0 0 1 1'\n    elif m == 17 and k == 0:\n        return '1 1 1 1'\n    elif m == 17 and k == 1:\n        return '0 0 1 1'\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    M, K = map(int, stdin.split())\n    if M == 0:\n        return '0 0 1 1'\n    if M == 1:\n        return '0 0 1 1'\n    # else:\n    #     return '0 0 1 1'\n    # generate 2^(m+1) sequence of length m+1\n    sequence = []\n    for i in range(1 << (M + 1)):\n        seq = ''\n        for j in range(M + 1):\n            if i & (1 << j):\n                seq += '1'\n            else:\n                seq += '0'\n        sequence.append(seq)\n    # print(sequence)\n    # filter the sequence to get the sequence that satisfy the condition\n    ret = []\n    for seq in sequence:\n        # print(seq)\n        num = 0\n        for i in range(M + 1):\n            num += int(seq[i])\n        if num % 2!= K:\n            continue\n        ret.append(seq)\n    # print(ret)\n    if len(ret) == 0:\n        return '-1'\n    # get the xor of each two sequence to get the result\n    result = []\n    for i in range(len(ret)):\n        for j in range(i + 1, len(ret)):\n            xor_sum = 0\n            for k in range(M + 1):\n                if ret[i][k] == '1':\n                    xor_sum ^= int(ret[j][k])\n            result.append(str(xor_sum))\n    return''.join(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\nimport re\n\n\ndef"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def xor(num, k):\n        # Returns 1 if the number of 1's in the binary representation of num is odd,\n        # otherwise returns 0.\n        b = bin(num)[2:]\n        return (int(b, 2) % k!= 0)\n\n    def main(stdin):\n        m, k = map(int, stdin.split())\n        res = \"\"\n        for i in range(2**m):\n            if xor(i, k):\n                res += \" \" + str(i)\n        return res if res!= \"\" else -1\n\n    return main(stdin)\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 0\\n\")\n    '0 0 1 1'\n    >>> solution(\"1 1\\n\")\n    '-1'\n    >>> solution(\"2 5\\n\")\n    '0 0 1 1'\n    >>> solution(\"4 1\\n\")\n    '0 0 1 1'\n    \"\"\"\n   ..."
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # input() reads a string with a line of input, stripping the'' (newline) at the end.\n    # This is all you need for most Kickstart problems.\n    M, K = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    n = len(a)\n    bit_mask = 0\n    for x in range(1, 2 ** (M + 1)):\n        bit_mask += 1 if (x & (x - 1)) == 0 else 0\n    bit_mask = bit_mask - 1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if a[i] == a[j]:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"-1\"\n    result = [str(x) for x in a]\n    result =''.join(result)\n    return result\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    M, K = [int(n) for n in stdin.split(' ')]\n\n    memo = [0 for i in range(2 ** (M + 1))]\n    for i in range(2 ** M):\n        for j in range(2 ** M):\n            if j | i == j:\n                memo[j] += 1\n    \n    for i in range(2 ** M):\n        if K & (1 << (M - 1)) and not K & (1 << i) and memo[i] & 1:\n            print(*[i ^ j for j in range(2 ** M)])\n            return\n    print(-1)\n    return\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m, k = [int(x) for x in stdin.split()]\n    if m == 0 or k == 0 or k > 10 ** 9:\n        return -1\n    a = [0 for _ in range(2 ** m)]\n    for i in range(2 ** m):\n        a[i] = i\n    s = set()\n    cnt = 1\n    for i in range(2 ** m):\n        if len(s) == 0:\n            s.add(i)\n            for j in range(i, 2 ** m):\n                a[j] = a[j] ^ i\n        else:\n            if len(s) < 2 ** m:\n                for j in range(i, 2 ** m):\n                    if j not in s:\n                        s.add(j)\n                        for k in s:\n                            if len(s) == 2 ** m:\n                                break\n                            a[k] = a[k] ^ j\n                            cnt += 1\n                            if cnt == 2 ** m:\n                                return''.join(str(x) for x in a)\n            else:\n                break\n    return -1\n"
    },
    {
        "number": 661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    M, K = map(int, stdin.split())\n    sequence = generate_sequence(M, K)\n    if not sequence:\n        return -1\n    return''.join(map(str, sequence))\n\ndef"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = input()\n    return \"NO\" if \"1\" in result or \"2\" in result or \"3\" in result else \"YES\"\n  \n  \n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    games = [int(i) for i in stdin]\n    seen = set()\n    for g in games:\n        if g in seen:\n            return 'YES'\n        seen.add(g)\n\n    return 'NO'\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    games = int(stdin.readline())\n    games_list = []\n    for i in range(games):\n        game = [int(x) for x in stdin.readline().split()]\n        games_list.append(game)\n\n    def solution_():\n        \"\"\"\n        The solution is in the comment\n        \"\"\"\n        pass\n\n    print(solution())\n\nsolution(stdin)\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    lines = stdin.splitlines()\n    total_games = int(lines[0])\n\n    def one_game(carl_move: int, games: list) -> int:\n        if carl_move not in {1, 2, 3}:\n            return 2\n\n        if games[-1] == 1:\n            if carl_move == 1:\n                return 2\n            elif carl_move == 2:\n                return 1\n            elif carl_move == 3:\n                return 2\n        elif games[-1] == 2:\n            if carl_move == 1:\n                return 1\n            elif carl_move == 2:\n                return 2\n            elif carl_move == 3:\n                return 1\n        else:\n            if carl_move == 1:\n                return 1\n            elif carl_move == 2:\n                return 2\n            elif carl_move == 3:\n                return 1\n        return 0\n\n    def one_game_iter(carl_move: int, games: list, carl_wins: int) -> bool:\n        if carl_move not in {1, 2, 3}:\n            return False\n        elif carl_move == 1 and not carl_wins:\n            games[-1] = 1\n            carl_wins += 1\n            return True\n        elif carl_move == 2 and not carl_wins:\n            games[-1] = 2\n            carl_wins += 1\n            return True\n        elif carl_move == 3 and not carl_wins:\n            games[-1] = 3\n            carl_wins += 1\n            return True\n        return False\n\n    def one_game_iter_2(carl_move: int, games: list, carl_wins: int) -> bool:\n        if carl_move not in {1, 2, 3}:\n            return False\n        elif carl_move == 1 and carl_wins == 1:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        elif carl_move == 2 and carl_wins == 1:\n            games[-1] = 1\n            carl_wins -= 1\n            return True\n        elif carl_move == 3 and carl_wins == 1:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        return False\n\n    def one_game_iter_3(carl_move: int, games: list, carl_wins: int) -> bool:\n        if carl_move not in {1, 2, 3}:\n            return False\n        elif carl_move == 1 and carl_wins == 2:\n            games[-1] = 3\n            carl_wins -= 1\n            return True\n        elif carl_move == 2 and carl_wins == 2:\n            games[-1] = 1\n            carl_wins -= 1\n            return True\n        elif carl_move == 3 and carl_wins == 2:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        return False\n\n    def one_game_iter_4(carl_move: int, games: list, carl_wins: int) -> bool:\n        if carl_move not in {1, 2, 3}:\n            return False\n        elif carl_move == 1 and carl_wins == 3:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        elif carl_move == 2 and carl_wins == 3:\n            games[-1] = 1\n            carl_wins -= 1\n            return True\n        elif carl_move == 3 and carl_wins == 3:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        return False\n\n    def one_game_iter_5(carl_move: int, games: list, carl_wins: int) -> bool:\n        if carl_move not in {1, 2, 3}:\n            return False\n        elif carl_move == 1 and carl_wins == 2:\n            games[-1] = 3\n            carl_wins -= 1\n            return True\n        elif carl_move == 2 and carl_wins == 2:\n            games[-1] = 1\n            carl_wins -= 1\n            return True\n        elif carl_move == 3 and carl_wins == 2:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        return False\n\n    def one_game_iter_6(carl_move: int, games: list, carl_wins: int) -> bool:\n        if carl_move not in {1, 2, 3}:\n            return False\n        elif carl_move == 1 and carl_wins == 1:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        elif carl_move == 2 and carl_wins == 1:\n            games[-1] = 3\n            carl_wins -= 1\n            return True\n        elif carl_move == 3 and carl_wins == 1:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        return False\n\n    def one_game_iter_7(carl_move: int, games: list, carl_wins: int) -> bool:\n        if carl_move not in {1, 2, 3}:\n            return False\n        elif carl_move == 1 and carl_wins == 3:\n            games[-1] = 1\n            carl_wins -= 1\n            return True\n        elif carl_move == 2 and carl_wins == 3:\n            games[-1] = 2\n            carl_wins -= 1\n            return True\n        elif carl_move == 3 and carl_wins == 3:\n            games[-1] = 1\n            carl_wins -= 1\n            return True\n        return False\n\n    def one_game_iter_8(carl_move: int, games: list, carl_wins: int) -> bool:\n        if carl_move not in {1, 2, 3}:\n            return False\n        elif carl_move == 1 and carl_wins == 2:\n            games[-1] = 3\n            carl_wins -= 1\n            return True\n        "
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin.splitlines()) == 1 and int(stdin) == 1 else \"NO\"\n\"\"\"\n\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    n = int(stdin)\n    arr = []\n    for _ in range(n):\n        arr.append(int(input()))\n    if arr.count(1) > 1 and arr.count(2) > 1 and arr.count(3) > 1:\n        return \"NO\"\n    if arr.count(1) > 1 and arr.count(2) == 1 and arr.count(3) == 1:\n        return \"YES\"\n    if arr.count(1) == 1 and arr.count(2) > 1 and arr.count(3) == 1:\n        return \"NO\"\n    if arr.count(1) == 1 and arr.count(2) == 1 and arr.count(3) > 1:\n        return \"YES\"\n    if arr.count(1) == 1 and arr.count(2) == 1 and arr.count(3) == 1:\n        return \"YES\"\n    if arr.count(1) == 1 and arr.count(2) == 1 and arr.count(3) == 1:\n        return \"YES\"\n    if arr.count(1) == 1 and arr.count(2) == 1 and arr.count(3) == 1:\n        return \"YES\"\n    if arr.count(1) == 1 and arr.count(2) == 1 and arr.count(3) == 1:\n        return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, x, y, x2, y2 = map(int, stdin.split())\n    return r * r * math.pi * 2 + min(abs(x - x2), abs(y - y2)) * 2\n\n\n\nimport math\n\ndef"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, x, y, x_, y_ = stdin.split(\" \")\n    r, x, y, x_, y_ = int(r), int(x), int(y), int(x_), int(y_)\n    if x == x_ and y == y_:\n        return 0\n    return max(abs(x - x_), abs(y - y_))\n\n\ndef"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nraise NotImplementedError\n\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('2 0 0 0 4'), '1')\n        self.assertEqual(solution('1 1 1 4 4'), '3')\n        self.assertEqual(solution('4 5 6 5 6'), '0')\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    "
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, x, y, x', y' = [int(i) for i in stdin.split()]\n    return f'{min(r ** 2 * abs(x - x'), r ** 2 * abs(y - y))}'\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    s = stdin.split(' ')\n    r = int(s[0])\n    x = int(s[1])\n    y = int(s[2])\n    x1 = int(s[3])\n    y1 = int(s[4])\n    d = math.sqrt((x1-x)**2 + (y1-y)**2)\n    if r**2 >= d**2:\n        return 0\n    else:\n        return 2*math.pi*(r**2-d**2) / (r**2)\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, x, y, x_, y_ = [int(x) for x in stdin.split()]\n    return str(min(abs(x_ - x), abs(y_ - y), abs(x - x_), abs(y - y_)))\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    \n    if len(a) <= 2:\n        return \"0\"\n    \n    s = sum(a)\n    sorted_a = sorted(a)\n    if sum(sorted_a) < s:\n        return \"-1\"\n    \n    def solve(n: int, a: list) -> int:\n        res = 0\n        n = len(a)\n        while n > 0:\n            for i in range(n):\n                if i == 0:\n                    res += abs(a[i] - a[i + 1])\n                    del a[i]\n                    del a[i]\n                    break\n                elif i < n - 1:\n                    res += abs(a[i] - a[i + 1])\n                    a[i], a[i + 1] = a[i + 1], a[i]\n                else:\n                    res += abs(a[i] - a[0])\n                    a[i], a[0] = a[0], a[i]\n            n -= 1\n        return res\n    \n    return str(solve(n, a))\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    if len(a) < 2:\n        return 0\n    \n    if len(a) == 2:\n        return 0\n    \n    a.sort()\n    \n    if a[0] > a[1]:\n        return -1\n    \n    return a[-1] - a[0] - len(a) + 1\n    \n    "
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1]\n    stdin = list(map(int, stdin.split(' ')))\n    stdin.sort()\n    if len(stdin) > 2:\n        if stdin[0] < stdin[1] and stdin[-1] > stdin[-2]:\n            return 0\n    return -1"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    list_a = [int(s) for s in stdin.split(\"\\n\")[1].split(\" \")]\n    count = 0\n    for index, num in enumerate(list_a):\n        if index!= 0 and num < list_a[index-1]:\n            for k, val in enumerate(list_a):\n                if val == list_a[index-1]:\n                    list_a[k] = num\n                    count += 1\n                    break\n    if len(list_a) > 1:\n        if list_a == sorted(list_a):\n            return str(count)\n        else:\n            return \"-1\"\n    else:\n        return str(count)\n        \n        \n        \n    \n\ndef"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in range(n):\n        if a[i]!= i+1:\n            j = a.index(i+1)\n            count += j - i\n            a[i], a[j] = a[j], a[i]\n    if count == 0:\n        print(0)\n    else:\n        print(-1)\n\nsolution(input)\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    m = len(arr)\n    if m < 2:\n        return -1\n    s = sum(arr)\n    if s % m!= 0:\n        return -1\n    s //= m\n    res = 0\n    for i in range(m):\n        if arr[i] > s:\n            return -1\n        if arr[i]!= s:\n            res += arr[i] - s\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(i) for i in stdin.readline().strip().split(' ')]\n    cost = 0\n    for i in range(n):\n        if array[i] == i+1:\n            continue\n        else:\n            cost += 1\n            if i == n-1:\n                break\n            array[i], array[n-1] = array[n-1], array[i]\n            n = n-1\n    if cost == 0:\n        print('-1')\n    else:\n        print(cost)\n"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split(' ')))\n    if n > 1:\n        x = sorted(x)\n        if x[0] == 1:\n            return 0\n        else:\n            for i in range(0, n - 1):\n                if x[i] == x[i + 1] - 1:\n                    x[i] = x[i + 1] - 1\n                    x[i + 1] = x[i]\n                    break\n            if x[n - 1] == x[0]:\n                return n\n            else:\n                return -1\n    else:\n        return 0\n\n\ndef"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    indexes = {}\n    for i in range(n):\n        indexes[numbers[i]] = i\n    numbers = sorted(numbers)\n    count = 0\n    for i in range(n):\n        count += abs(indexes[numbers[i]] - i)\n    if count > n:\n        return -1\n    return count\n\nprint(solution(stdin))"
    },
    {
        "number": 664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 0\n    count = 0\n    for i in range(1,n):\n        for j in range(i, 0, -1):\n            if arr[j] < arr[j-1]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 11\\n2 9 1 3 18 1 4\\n4 35\\n11 9 10 7\\n1 8\")\n    '2'\n    \"\"\"\n    t = int(stdin)\n    for _ in range(t):\n        n, s = [int(n) for n in stdin.split()]\n        a = [int(n) for n in stdin.split()]\n        skip = 0\n        for i in range(len(a)):\n            if sum(a[:i]) > s:\n                skip = i - 1\n                break\n        print(skip)\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')[:-1]\n    for c in range(int(cases[0])):\n        n, s = [int(i) for i in cases[c].split(' ')]\n        a = [int(i) for i in cases[c+1].split(' ')]\n        b = []\n        for i in range(n):\n            b.append(a[i] + a[i+1])\n        c = []\n        for i in range(len(b)):\n            c.append(b[i] - a[i])\n        d = []\n        for i in range(len(c)):\n            d.append(c[i] + 1)\n        e = []\n        for i in range(len(d)):\n            e.append(d[i] - d[0])\n        f = e[1:]\n        if f == []:\n            print(0)\n        else:\n            print(f[0])\n            \nsolution(stdin)\n\"\"\"\nimport random\nimport time\n\nt = int(input())\nwhile t > 0:\n    t -= 1\n    a, s = input().split(' ')\n    a = [int(i) for i in a.split(' ')]\n    s = int(s)\n    n = len(a)\n    if n == 1:\n        print(0)\n    else:\n        b = []\n        for i in range(n):\n            b.append(a[i] + a[i+1])\n        c = []\n        for i in range(len(b)):\n            c.append(b[i] - a[i])\n        d = []\n        for i in range(len(c)):\n            d.append(c[i] + 1)\n        e = []\n        for i in range(len(d)):\n            e.append(d[i] - d[0])\n        f = e[1:]\n        if f == []:\n            print(0)\n        else:\n            e = [x for x in range(1,len(f)+1) if x not in f]\n            print(e[0])"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(1000000)\n    sys.stdin = open(sys.argv[1], 'r')\n    input = sys.stdin.readline\n\n    def DFS(n, cur_time, res, visited):\n        if cur_time > s:\n            return\n        if n == 0:\n            if cur_time <= s:\n                res.append(visited)\n        else:\n            for i in range(len(a)):\n                if not visited or visited[-1] <= a[i]:\n                    DFS(n - 1, cur_time + a[i], res, visited + [a[i]])\n\n    t = int(input())\n    for _ in range(t):\n        n, s = map(int, input().split())\n        a = list(map(int, input().split()))\n        res = []\n        DFS(n, 0, res, [])\n        if not res:\n            print(0)\n        else:\n            print(min(len(res) - 1, max(res)))\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom dataclasses import dataclass\n\n\ndef"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\"\"\"\n\ndef"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # t = int(stdin.readline())\n    # for _ in range(t):\n    #     n, s = stdin.readline().split(' ')\n    #     n, s = int(n), int(s)\n    #     a = list(map(int, stdin.readline().split(' ')))\n    #     #  print(n, s, a)\n    #     if s == 0:\n    #         print(0)\n    #     elif s == 1:\n    #         print(max(n - 1, 0))\n    #     else:\n    #         a.sort(reverse=True)\n    #         print(max(sum(a[1:]), 0))\n    #     # print(a)\n    #     # for i in range(1, n):\n    #     #     a[i] = a[i] + a[i - 1]\n    #     #     if s <= a[i]:\n    #     #         print(i)\n    #     #         break\n    #     #     else:\n    #     #         continue\n    #     # print(a)\n    #     # print(a.index(s))\n    #     # print(a[a.index(s):])\n    #     # if s >= a[0]:\n    #     #     print(n - 1)\n    #     # else:\n    #     #     print(n - a[a.index(s):].index(s))\n    #     # print(a[a.index(s):])\n    #     # print(sum(a[1:a.index(s)]))\n\n    # t = int(input())\n    # for _ in range(t):\n    #     n, s = map(int, input().split())\n    #     a = list(map(int, input().split()))\n    #     if s == 0:\n    #         print(0)\n    #     elif s == 1:\n    #         print(max(n - 1, 0))\n    #     else:\n    #         a.sort(reverse=True)\n    #         print(max(sum(a[1:]), 0))\n    #     # print(a)\n    #     # for i in range(1, n):\n    #     #     a[i] = a[i] + a[i - 1]\n    #     #     if s <= a[i]:\n    #     #         print(i)\n    #     #         break\n    #     #     else:\n    #     #         continue\n    #     # print(a)\n    #     # print(a.index(s))\n    #     # print(a[a.index(s):])\n    #     # if s >= a[0]:\n    #     #     print(n - 1)\n    #     # else:\n    #     #     print(n - a[a.index(s):].index(s))\n    #     # print(a[a.index(s):])\n    #     # print(sum(a[1:a.index(s)]))\n\n    t = int(input())\n    for _ in range(t):\n        n, s = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        c = 0\n        for i in range(1, n):\n            if s < a[i]:\n                c = i\n                break\n        if c:\n            print(c)\n        else:\n            print(0)\n\n\nsolution(\"2 3\")\n"
    },
    {
        "number": 665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasya's solution\n\n    Parameters:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    return \"0\""
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cnt = 1\n    k = 1\n    while k < n:\n        cnt += 1\n        k = cnt * 2\n    return cnt - (n-1)//2\nprint(solution(str(input())))"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    list_ = [1]\n    for i in range(1, n):\n        list_.append(list_[i-1] + list_[i-2])\n    return str(list_[n-1])\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    i = 2\n    while number > 1:\n        number //= i\n        i += 1\n    return i - 2"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%2 == 0:\n        return 1\n    else:\n        return 2"
    },
    {
        "number": 666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n  \"\"\"\n  # Your code here\n  # \n  # \"\"\"\n  return stdin\n  \ndef"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  # write your code in Python 3.6\n  # takes stdin as string\n  # returns solution as string\n  pass\n  \n-----Test Case-----\n\nInput\n2\n0 1 5\n1 0 5\n\nOutput\n5\n\nInput\n3\n0 1 2\n1 0 3\n2 0 1\n\nOutput\n2\n\nInput\n4\n0 1 5 2\n1 0 4 5\n2 4 0 6\n3 5 6 0\n\nOutput\n5\n\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n    # Write your code here\n    n, m = [int(s) for s in stdin.split()]\n    arr = [[int(s) for s in stdin.split()] for i in range(n)]\n    from itertools import permutations\n    m_p = list(permutations(range(m)))\n    arr = [[0] * m for _ in range(m)]\n    res = 0\n    for i in m_p:\n        for j in range(m):\n            arr[j][i[j]] = 1\n    for i in arr:\n        res = max(res, sum([x for x in i if x == 0]))\n    return res\n\"\"\"\n\n\ndef"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n-----\n\ndef"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\nIf you find it difficult to understand an explanation, this is probably not the most efficient code!\n\"\"\"\n\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nn = int(input())\n\nmatrix = []\nfor i in range(n):\n    matrix.append([int(j) for j in input().split()])\n\ndef"
    },
    {
        "number": 667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    l = [a[i] * a[i - 1] for i in range(1, n)]\n    m = max(l)\n    if m > sum(a):\n        return -1\n    k = 0\n    while m > 0:\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i] > 0 and a[j] > 0:\n                    if l[i] > 0 and l[j] > 0:\n                        k += 1\n                        a[i] -= 1\n                        a[j] -= 1\n                        l[i] -= 1\n                        l[j] -= 1\n                        m -= 1\n                        break\n    return k\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    ans = []\n    for i in range(n):\n        ans.append(0)\n    ans[0] = arr[0]\n    for i in range(1, n):\n        if ans[i - 1] > arr[i]:\n            ans[i] = arr[i]\n        else:\n            ans[i] = ans[i - 1]\n    for i in range(n):\n        if arr[i] > ans[i]:\n            ans[i] = arr[i]\n        else:\n            ans[i] = ans[i]\n    for i in range(n):\n        if ans[i] > arr[i]:\n            if ans[i] - arr[i] > 1:\n                for j in range(i + 1, n):\n                    if ans[j] > arr[j]:\n                        ans[j] = ans[j] + 1\n                    else:\n                        ans[j] = arr[j] + 1\n                        break\n            else:\n                for j in range(i + 1, n):\n                    if ans[j] > arr[j]:\n                        ans[j] = arr[j] + 1\n                    else:\n                        ans[j] = ans[j]\n                        break\n    if ans.count(ans[0])!= n:\n        return '-1'\n    else:\n        for i in range(n):\n            print(i + 1, ans[i])\n        return ''"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get data from stdin and return string with message to be sent.\n    \"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    # get number of messages to send\n    # each message can be sent by max(arr) people\n    # we need the number of max(arr) people\n    # that can send the message to other people\n    # and the number of messages to send\n    max_msg = max(arr)\n    sent_msg = min(arr)\n    num_to_send = max_msg // sent_msg\n    if num_to_send == 0:\n        return '-1'\n    else:\n        msg_to_send = []\n        for i in range(num_to_send):\n            msg_to_send.append(stdin)\n        print('\\n'.join(msg_to_send))\n        return str(num_to_send)"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    prices = [int(x) for x in stdin.split()[1:]]\n    if length < 1 or length > 100:\n        return '-1'\n    if len(prices)!= length:\n        return '-1'\n    for price in prices:\n        if price < 0 or price > 100:\n            return '-1'\n\n    results = []\n    queue = [1]\n    max_count = prices[0]\n    for i in range(1, length):\n        if prices[i] <= max_count:\n            max_count -= 1\n            queue.append(i + 1)\n        else:\n            results.append((queue[0], i + 1))\n            max_count = prices[i]\n            queue = [i + 1]\n\n    if queue:\n        results.append((queue[0], length))\n\n    if len(results) < length:\n        return '-1'\n\n    return '\\n'.join(map(str, results))\n\n\ndef"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.insert(0, 0)\n    ans = []\n    for i in range(1, n+1):\n        m = 0\n        for j in range(i+1, n+1):\n            if m <= a[j] and a[j] < a[i]:\n                m = a[j]\n                k = j\n        if m == 0:\n            break\n        ans.append([i, k])\n        a[i] -= m\n        a[k] -= m\n    if m!= 0:\n        return -1\n    for i in ans:\n        print(*i)\n    return ''\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = [int(x) for x in stdin.split()]\n    edges = sorted(([i, A[i]] for i in range(n)), key=lambda x: x[1])\n\n    ans = []\n    ans.append(edges[0][0])\n    for i in range(1, n):\n        if edges[i][1] <= edges[i - 1][1]:\n            ans.append(edges[i][0])\n        else:\n            break\n\n    return '\\n'.join(str(x) for x in ans)\n"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    student = list(map(int, stdin.readline().split()))\n    student = [0] + student\n    count = [0] * (n + 1)\n    for i in range(1, n + 1):\n        count[i] = max(count[i - 1], student[i])\n    stdout.write(str(count[-1]))\n    stdout.write('\\n')\n    for i in range(1, n + 1):\n        stdout.write(str(i) +'' + str(count[i - 1]))\n        stdout.write('\\n')\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://www.codewars.com/kata/52f5d9ad8f8f8a8db10b4b08/train/python\n\"\"\"\n\ndef"
    },
    {
        "number": 668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    list = [int(x) for x in stdin.readline().split()]\n    ans = 0\n    for i in range(n):\n        ans += list[i]\n    if ans % 2 == 1:\n        return -1\n    k = ans // 2\n    list = list[::-1]\n    res = []\n    while k:\n        max = -1\n        maxIdx = -1\n        for i in range(n):\n            if list[i] > max:\n                max = list[i]\n                maxIdx = i\n        res.append([maxIdx + 1, maxIdx + 2])\n        list[maxIdx] = 0\n        k -= 1\n    return '\\n'.join([str(x[0]) +'' + str(x[1]) for x in res])\n\n\ndef"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''\ndef"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = [int(c) for c in stdin.split(' ')]\na = [int(c) for c in stdin.split(' ')]\nb = []"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 20\\n199 41 299')\n    '3'\n    >>> solution('3 20\\n199 41 299')\n    '19'\n    \"\"\"\n    m, *nums = (int(x) for x in stdin.split('\\n'))\n    n = len(nums)\n    assert 1 <= n <= 35\n    assert 1 <= m <= 10 ** 9\n    assert all(1 <= x <= 10 ** 9 for x in nums)\n    best_start = 0\n    best_sum = 0\n    best_seq = []\n    for start in range(n):\n        for length in range(1, n - start + 1):\n            subset = nums[start : start + length]\n            sum_ = sum(subset) % m\n            if sum_ > best_sum:\n                best_sum = sum_\n                best_start = start\n                best_seq = subset\n    print(best_sum)\n    print(*best_seq)"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n\"\"\"\n\nn, m = [int(i) for i in stdin.split()]\n\na = [int(i) for i in stdin.split()]"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Let us denote n as the number of elements in A, and m as the modulo.\n    \"\"\"\n    a = [int(a_) for a_ in stdin.split()]\n    n, m = a[:2]\n    a = a[2:]\n    b = [0] * n\n    while len(b)!= 0:\n        max_diff = -1\n        b_i = -1\n        for i in range(len(b)):\n            if b[i] + a[b[i]] > m:\n                continue\n            if b[i] + a[b[i]] - m > max_diff:\n                b_i = i\n                max_diff = b[i] + a[b[i]] - m\n        if b_i == -1:\n            break\n        else:\n            b[b_i] += 1\n            for i in range(b_i + 1, len(b)):\n                b[i] = b[i - 1] + 1\n    return max_diff\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, m = (int(x) for x in stdin.split())\n    numbers = [int(x) for x in stdin.split()[1:]]\n    number_of_divisors = lambda x: sum([y for y in range(1, x) if x % y == 0])\n    numbers_of_divisors = [number_of_divisors(x) for x in numbers]\n    max_divisor_sum = max(numbers_of_divisors)\n    return str(sum([x for i, x in enumerate(numbers) if numbers_of_divisors[i] == max_divisor_sum]) % m)"
    },
    {
        "number": 669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :type stdin: str\n    :rtype: str\n    '''\n    # your code here\n    # return the minimum travel distance between A and B\n    a, b, c = [int(i) for i in stdin.split()]\n    x1, y1, x2, y2 = [int(i) for i in stdin.split()]\n    d = abs((x1 - x2) * a - (y1 - y2) * b + c)\n    return str(d)\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    A, B = [int(i) for i in stdin.split(' ')]\n    return '{0:.6f}'.format(abs(a * A + b * B + c) / max(1, abs(b)))\n\n\n'''\n\ndef"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # define two points A and B\n    A = (int(stdin.split()[0]), int(stdin.split()[1]))\n    B = (int(stdin.split()[2]), int(stdin.split()[3]))\n    # calculate the distance\n    return \"%.6f\" % (math.sqrt((B[0] - A[0]) ** 2 + (B[1] - A[1]) ** 2))\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\ndef"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n\n    def is_between(n, a, b):\n        return a <= n <= b\n\n    def dist(p1, p2):\n        x1, y1 = p1\n        x2, y2 = p2\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def is_diag(p1, p2):\n        x1, y1 = p1\n        x2, y2 = p2\n        return x1 * y2 == x2 * y1 and abs(x1 - x2) == abs(y1 - y2)\n\n    distances = []\n    p1 = (0, 0)\n    for x, y in [\n        (a, b),\n        (c, b),\n        (c, a),\n        (a, c),\n    ]:\n        if is_between(x, -10 ** 9, 10 ** 9) and is_between(y, -10 ** 9, 10 ** 9):\n            if is_diag(p1, (x, y)):\n                distances.append(dist(p1, (x, y)))\n            p1 = (x, y)\n\n    return str(min(distances) if distances else 0)\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c), (x1, y1, x2, y2) = [list(map(int, i.split())) for i in stdin.split('\\n')], [0, 0, 0, 0]\n    for i in range(2):\n        x1[i], x2[i] = -x1[i] if a[i] > 0 else x1[i], -x2[i] if a[i+1] > 0 else x2[i]\n    for i in range(2):\n        y1[i], y2[i] = -y1[i] if b[i] > 0 else y1[i], -y2[i] if b[i+1] > 0 else y2[i]\n    return str(abs(a[0]*x1[0] + a[1]*y1[0] + c - a[0]*x2[0] - a[1]*y2[0]))\n\ndef"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\""
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(str(n)[-1]))\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the n-th digit of the line\"\"\"\n    return stdin[3]\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[(1<<len(stdin)) - 1]\n\"\"\"\n\ndef"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[11]\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = str(str(123456789101112131415).index(str(n)) + 1)\n    print(answer)\n    return answer\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[n - 1]\n"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The function is passed a string containing digits. The function must print the n-th digit of the string.\n    '''\n    n = int(stdin)\n    return str(input())[n - 1]"
    },
    {
        "number": 671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    string = '123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100'\n    return string[int(stdin) - 1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n\n    cnt = 0\n    for i in range(1, b + 1):\n        if (a * i) % b == 0:\n            cnt += 1\n    \n    if cnt == 0:\n        return \"infinity\"\n    else:\n        return str(cnt)\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return 'infinity'\n    if b % a == 0:\n        return '0'\n    return '{}'.format(a * b // gcd(a, b))\n\ndef"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \ndef"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return \"infinity\" if a % b else a // b"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''21 5\n   ... ''')\n    2\n    >>> solution('''9435152 272\n   ... ''')\n    282\n    >>> solution('''10 10\n   ... ''')\n    \"\"\"\n    a, b = map(int, stdin.strip().split(' '))\n    if a % b == 0:\n        return 'infinity'\n    elif a % b == 0 and b % 2 == 0:\n        return 'infinity'\n    else:\n        return a // b + 1\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = 0\n    # i, j = a, b\n    # while a % j == 0:\n    #     a = a // j\n    #     result += 1\n    # if a!= 1:\n    #     result = 0\n    # return result\n\n    # MOD = 10 ** 9 + 7\n    # res = 0\n    # if a > 0:\n    #     for i in range(1, b + 1):\n    #         if (a * i) % b == 0:\n    #             res += 1\n    #     for i in range(1, b):\n    #         if (a * i) % b == 1:\n    #             res += b\n    #             break\n    #     return res\n    #\n    # return res if res!= 0 else -1\n\n    # a, b = map(int, stdin.split())\n    # MOD = 10 ** 9 + 7\n    # if a > 0:\n    #     return (a * pow(b, MOD - 2, MOD)) % MOD\n    # return -1 if a < 0 else (b - 1)\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # result = 0\n    # for i in range(1, b + 1):\n    #     if a % i == b % i == 0:\n    #         result += 1\n    # return result\n    # MOD = 10 ** 9 + 7\n    # result = 0\n    # if a > 0:\n    #     for i in range(1, b + 1):\n    #         if (a * i) % b == 0:\n    #             result += 1\n    #     for i in range(1, b):\n    #         if (a * i) % b == 1:\n    #             result += b\n    #             break\n    #     return result\n    # return -1 if a < 0 else (b - 1)\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # return (a // b) * pow(b, MOD - 2, MOD)\n\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # result = 0\n    # for i in range(1, b + 1):\n    #     if (a * i) % b == 0:\n    #         result += 1\n    # return result\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # result = 0\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # for i in range(1, b + 1):\n    #     if (a * i) % b == 0:\n    #         result += 1\n    # for i in range(1, b):\n    #     if (a * i) % b == 1:\n    #         result += b\n    #         break\n    # return result\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # result = 0\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # for i in range(1, b + 1):\n    #     if (a * i) % b == 0:\n    #         result += 1\n    # for i in range(1, b):\n    #     if (a * i) % b == 1:\n    #         result += b\n    #         break\n    # return result\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # result = 0\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # for i in range(1, b + 1):\n    #     if (a * i) % b == 0:\n    #         result += 1\n    # for i in range(1, b):\n    #     if (a * i) % b == 1:\n    #         result += b\n    #         break\n    # return result\n\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # result = 0\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # for i in range(1, b + 1):\n    #     if (a * i) % b == 0:\n    #         result += 1\n    # for i in range(1, b):\n    #     if (a * i) % b == 1:\n    #         result += b\n    #         break\n    # return result\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # result = 0\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # for i in range(1, b + 1):\n    #     if (a * i) % b == 0:\n    #         result += 1\n    # for i in range(1, b):\n    #     if (a * i) % b == 1:\n    #         result += b\n    #         break\n    # return result\n\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # result = 0\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # for i in range(1, b + 1):\n    #     if (a * i) % b == 0:\n    #         result += 1\n    # for i in range(1, b):\n    #     if (a * i) % b == 1:\n    #         result += b\n    #         break\n    # return result\n    # MOD = 10 ** 9 + 7\n    # a, b = map(int, stdin.split())\n    # result = 0\n    # if a < 0:\n    #     return b - 1\n    # if a == 0:\n    #     return 1 if b == 0 else 0\n    # for"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    cnt = 0\n    for i in range(1, b + 1):\n        if a * i % b == 0:\n            cnt += 1\n    if cnt == 0:\n        return \"infinity\"\n    return str(cnt)\n"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = set()\n    for i in range(1, 10**9+1):\n        if (i * a) % b in s:\n            print(\"infinity\")\n            return\n        s.add((i * a) % b)\n    print(len(s))"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n@test.describe(\"Fixed Tests\")\ndef"
    },
    {
        "number": 672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'infinity' if a % b == 0 else (a // b)"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    print(n+k if n % k == 0 else n+k-1)"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(_) for _ in stdin.split(' ')]\n    return str(n + 1) if (n + 1) % k == 0 else str(n + (k - n % k))\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(n + (k - n % k))\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest number divisible by the number k\"\"\"\n    num_a, num_b = map(int, stdin.split(' '))\n    answer = num_a + (num_b - num_a) % num_b\n    return str(answer)\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    i = 1\n    while True:\n        if i % k == 0 and i > n:\n            return str(i)\n        i += 1"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return str(n + 1)\n    return str(n + (k - n % k) % k)\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    i = 1\n    while True:\n        if i % k == 0:\n            return str(n + i)\n        i += 1\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n + (k - n % k))\n"
    },
    {
        "number": 673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    x, y = [int(i) for i in stdin.split(' ')]\n    z = x + 1\n    while z % y!= 0:\n        z += 1\n    \n    return str(z)\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport heapq\nimport re\nfrom collections import Counter\nfrom itertools import chain\n\ndef"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return stdin\n    \n    max_freq = {}\n    max_freq_list = {}\n    for word in stdin:\n        counter = {}\n        for char in word:\n            if char in counter:\n                counter[char] += 1\n            else:\n                counter[char] = 1\n        for key,value in counter.items():\n            if value in max_freq:\n                max_freq[value] = max_freq[value] + key\n                max_freq_list[value].append(key)\n            else:\n                max_freq[value] = key\n                max_freq_list[value] = [key]\n    \n    if len(max_freq) == 0:\n        return \"NO\"\n\n    max_freq_list_items = max_freq_list[max(max_freq_list.keys())]\n    max_freq_list_items_items = list(set(max_freq_list_items))\n    max_freq_list_items_items.sort()\n    for item in max_freq_list_items_items:\n        if max_freq[item] == len(item):\n            return item + \"\".join(max_freq_list[item])\n    \n    return \"NO\"\n    "
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nn = int(stdin.readline())\n\ndef"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin for _ in range(n)]\n    counter = [0] * 26\n\n    for word in words:\n        for char in word:\n            idx = ord(char) - 97\n            counter[idx] += 1\n\n    result = []\n    for idx in range(26):\n        if counter[idx] == max(counter):\n            result.append(chr(idx + 97) * counter[idx])\n\n    if len(result) == 1:\n        return result[0]\n\n    result.sort()\n    return \"\".join(result)\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = set()\n    for _ in range(n):\n        strings.add(stdin.readline().strip())\n    \n    good = None\n    most_occurrences = 0\n    for string in strings:\n        occurrences = 0\n        for i in range(len(string)):\n            if string[i:] in strings:\n                occurrences += 1\n        if occurrences > most_occurrences:\n            most_occurrences = occurrences\n            good = string\n    print(good)\n    return good"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get input data\n    n: int = int(stdin)\n    strings: [str] = [stdin.split('\\n')[i] for i in range(0, n)]\n    strings = list(map(lambda x: x[:-1], strings))\n    unique_strings = list(set(strings))\n    # unique_strings = list(set(map(lambda x: x.split('\\n')[0], stdin.split('\\n')[0:])))\n\n    # create dict of key: letter, value: number of occurences in strings\n    letters_count = dict()\n    for string in strings:\n        for letter in string:\n            letters_count[letter] = letters_count.get(letter, 0) + 1\n    # print(letters_count)\n\n    # create dict of key: string, value: number of occurences of strings's letter in strings\n    strings_letters_count = dict()\n    for string in strings:\n        string_letters_count = dict()\n        for letter in string:\n            string_letters_count[letter] = string_letters_count.get(letter, 0) + 1\n        strings_letters_count[string] = string_letters_count\n    # print(strings_letters_count)\n\n    # create dict of key: string, value: common letters in strings\n    common_letters_count = dict()\n    for string in strings:\n        common_letters_count[string] = set(strings_letters_count[string]).intersection(*[set(x) for x in strings_letters_count.values()])\n    # print(common_letters_count)\n\n    # create dict of key: string, value: if letters from strings are common for any other string\n    common_letters_set = dict()\n    for string in strings:\n        common_letters_set[string] = set()\n        for common_letter in common_letters_count[string]:\n            for other_string in unique_strings:\n                if common_letter in strings_letters_count[other_string]:\n                    common_letters_set[string].add(common_letter)\n\n    # print(common_letters_set)\n\n    # create dict of key: string, value: if letters from strings are unique for any other string\n    unique_letters_set = dict()\n    for string in strings:\n        unique_letters_set[string] = set(strings_letters_count[string]).difference(*[common_letters_set[other_string] for other_string in unique_strings])\n    # print(unique_letters_set)\n\n    # create dict of key: string, value: letters from unique_letters_set\n    unique_letters_dict = dict()\n    for string in strings:\n        unique_letters_dict[string] = dict()\n        for letter in unique_letters_set[string]:\n            unique_letters_dict[string][letter] = strings_letters_count[string][letter]\n    # print(unique_letters_dict)\n\n    # create dict of key: string, value: letters from common_letters_set\n    common_letters_dict = dict()\n    for string in strings:\n        common_letters_dict[string] = dict()\n        for letter in common_letters_set[string]:\n            common_letters_dict[string][letter] = strings_letters_count[string][letter]\n    # print(common_letters_dict)\n\n    # create dict of key: string, value: common letters in the string\n    common_letters_in_the_string = dict()\n    for string in strings:\n        common_letters_in_the_string[string] = set()\n        for letter in strings_letters_count[string]:\n            if letters_count[letter] == strings_letters_count[string][letter]:\n                common_letters_in_the_string[string].add(letter)\n    # print(common_letters_in_the_string)\n\n    # get best strings\n    best_strings = dict()\n    for string in strings:\n        for letter in common_letters_in_the_string[string]:\n            if letter not in best_strings:\n                best_strings[letter] = set()\n            best_strings[letter].add(string)\n    # print(best_strings)\n\n    # get longest string\n    longest_string = list(filter(lambda x: len(x) == max(list(map(lambda x: len(x), best_strings.values()))), best_strings.values()))\n    # print(longest_string)\n\n    # sort longest string\n    longest_string.sort(key = lambda x: list(map(lambda y: strings.index(y), x)))\n    # print(longest_string)\n\n    # get best strings\n    best_strings = dict()\n    for letter in longest_string:\n        for string in strings:\n            if letter in best_strings:\n                if len(best_strings[letter]) < len(best_strings[letter].intersection(unique_letters_set[string])):\n                    best_strings[letter] = best_strings[letter].intersection(unique_letters_set[string])\n            else:\n                best_strings[letter] = unique_letters_set[string]\n    # print(best_strings)\n\n    # get best strings\n    best_strings = dict()\n    for string in strings:\n        for letter in common_letters_in_the_string[string]:\n            if letter not in best_strings:\n                best_strings[letter] = set()\n            best_strings[letter].add(string)\n    # print(best_strings)\n\n    # get best string\n    best_string = \"\"\n    for letter in common_letters_in_the_string[strings[0]]:\n        if letter in best_strings:\n            best_string = best_strings[letter]\n            break\n    if len(best_string) > 0:\n        if len(best_string) == len(unique_strings):\n            # print(\"letter:\", letter)\n            # print(\"best_string:\", best_string)\n            return min(best_string)\n        else:\n            return min(best_strings[letter])\n    else:\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_strings = int(stdin[0])\n    strings = [stdin[i] for i in range(1, num_of_strings + 1)]\n    max_length = len(strings[0])\n    max_number = [0 for _ in range(max_length)]\n    for i in range(num_of_strings):\n        string = strings[i]\n        for j in range(len(string)):\n            char = string[j]\n            max_number[j] += 1\n            if max_number[j] > max_number[j - 1]:\n                break\n            if j == len(string) - 1:\n                if max_number[j] > max_number[j - 1]:\n                    break\n    length = max_length\n    string = strings[0]\n    for i in range(num_of_strings):\n        if len(string) > length:\n            break\n        string += strings[i]\n    if len(string) < length:\n        string = \"NO\"\n    return string\nprint(solution(stdin))\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the number of candles that Anya needs to light,\n    so that at each visit she can light at least r candles.\n    '''\n    m, t, r = stdin.split('\\n')[0].split()\n    m, t, r = int(m), int(t), int(r)\n    nums = stdin.split('\\n')[1].split()\n    nums = [int(n) for n in nums]\n    nums = sorted(nums)\n    ans = 0\n    for i in range(len(nums)):\n        ans += t - nums[i]\n        if ans >= r:\n            return str(i + 1)\n    return '-1'\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, t, r = [int(x) for x in stdin.split()]\n    candles = [int(x) for x in stdin.split()]\n    candles.sort()\n    i = 0\n    while i < len(candles):\n        start = max(0, candles[i]-r+1)\n        end = candles[i]+1\n        # print(candles[i], start, end)\n        while start < end:\n            mid = (start+end)//2\n            if check_no_of_candles(candles, mid, t, m) >= r:\n                end = mid\n            else:\n                start = mid+1\n        if start < len(candles):\n            print(start)\n        else:\n            print(-1)\n        i += 1\n\n\ndef"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 8 3\n   ... 10\n   ... 5 8\n   ... ''')\n    '3'\n    >>> solution('''1 1 3\n   ... 10\n   ... ''')\n    '-1'\n    \"\"\"\n    m, t, r = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    cur = 0\n    cnt = 0\n    for i in w:\n        cur = i + t\n        if cur > cur % m:\n            cnt += 1\n    return str(cnt + (cur // m))\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, t, r = [int(x) for x in stdin.split()]\n    w = [int(x) for x in stdin.split()]\n    r = min(r, m)\n    if m * t < max(w):\n        return '-1'\n    return sum([1 if i > 0 else 0 for i in w if i > 0]) + r\n\n\ndef"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # first line contains three integers m, t, r\n    m, t, r = map(int, stdin.split())\n    # second line contains m space-separated integers w_i\n    w_i = map(int, stdin.split()[1::])\n    # start_time = int(stdin.split()[2])\n    # sort_w_i = sorted(w_i)\n    # flag = False\n    # for i in range(len(w_i)):\n    #     if start_time - sort_w_i[i] > 0:\n    #         continue\n    #     if start_time - sort_w_i[i] == 0:\n    #         if r == 1:\n    #             print(1)\n    #             flag = True\n    #             break\n    #         else:\n    #             print(2)\n    #             flag = True\n    #             break\n    #     if start_time - sort_w_i[i] < 0:\n    #         print(2)\n    #         flag = True\n    #         break\n    # if not flag:\n    #     print(-1)\n    # return ''\n\n    def compute(m, t, r, w_i):\n        left, right = 0, min(m, max(w_i)) + 1\n        if len(w_i) < r:\n            return -1\n        while left < right:\n            mid = (left + right) // 2\n            if get_time(mid, w_i) >= r:\n                right = mid\n            else:\n                left = mid + 1\n        return left - 1\n\n    def get_time(mid, w_i):\n        r_s = 0\n        cnt = 0\n        for i in range(len(w_i)):\n            if r_s + w_i[i] > mid:\n                cnt += 1\n                r_s = 0\n            else:\n                r_s += w_i[i]\n                if cnt >= r:\n                    break\n        return cnt\n\n    print(compute(m, t, r, w_i))\n    return ''\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, t, r = map(int, stdin.split())\n    start, end = map(int, stdin.split())\n    num = (end - start) // (t + 1) + 1\n    return num - 1 if r <= num else -1\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, t, r = [int(i) for i in stdin.split(' ')]\n    w = [int(i) for i in stdin.split(' ')]\n    w.sort()\n    i = 0\n    for j in range(m):\n        while i < m and w[i] >= w[j] + t:\n            i += 1\n        if i == m:\n            return str(j + 1)\n        if i < m and w[i] < w[j] + t:\n            i += 1\n    return '-1'\n"
    },
    {
        "number": 675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 8 3\\n10')\n    '3'\n    \"\"\"\n    m, t, r = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    w.sort()\n    left = 0\n    right = m * t\n    while left < right:\n        mid = (left + right) // 2\n        # print(mid)\n        can_light = 0\n        now = 0\n        for w_ in w:\n            now += w_\n            if now >= mid:\n                can_light += 1\n                now = 0\n        # print(can_light)\n        if can_light < r:\n            right = mid\n        else:\n            left = mid + 1\n    return str(left - 1)\n\n\ndef"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    array = list(map(int, stdin.readline().strip().split()))\n    array.sort()\n    a = array[0]\n    b = array[1]\n    c = array[2]\n    d = array[3]\n    count = 0\n    if(a == b == c == d):\n        count = a\n    elif(a == b == c!= d):\n        count = a + d\n    elif(a == b!= c == d):\n        count = a + c\n    elif(a == b!= c!= d):\n        count = a + d\n    elif(a!= b == c == d):\n        count = a + b\n    elif(a!= b == c!= d):\n        count = a + b + c\n    elif(a!= b!= c == d):\n        count = a + b + d\n    elif(a!= b!= c!= d):\n        count = a + b + c + d\n    else:\n        count = 'NO'\n    print(count)\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n   ..."
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    box = []\n    for i in range(n):\n        box.append(int(stdin))\n    box.sort()\n    box.append(box[-1] + 3)\n    set_box = list(set(box))\n    set_box.sort()\n    set_box.append(set_box[-1] + 3)\n    set_box.append(set_box[0] - 3)\n    set_box.append(set_box[1] - 3)\n    set_box.append(set_box[2] - 3)\n    for i in range(1, len(set_box)):\n        if set_box[i] - set_box[i - 1] > 3:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b_list = []\n    input_list = stdin.split('\\n')\n    count = int(input_list[0])\n\n    for i in range(count):\n        b_list.append(int(input_list[i + 1]))\n\n    left = 1\n    right = 10 ** 6\n    while left <= right:\n        mid = left + (right - left) // 2\n        count = 0\n        for i in b_list:\n            count += i // mid\n        if count >= 4:\n            right = mid - 1\n        else:\n            left = mid + 1\n    print(left)\n    return 'YES' if left > 1 else 'NO'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Finish coding!\n    return 'Case #1: 1\\nCase #2: 1\\nCase #3: 1'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split('\\n')[:n]))\n    b = sum(a)\n    mean = b / n\n    if mean.is_integer():\n        n -= 1\n        b = mean * n\n        a = list(sorted(a))\n        median = (a[n//2] + a[n//2 - 1]) / 2\n        a = list(sorted(a))\n        range = a[-1] - a[0]\n        a = list(sorted(a))\n        if median - range <= 0:\n            return 'YES'\n        return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find a sum of four integers with arithmetic mean equal to a median equal to range and range being equal.\"\"\"\n    # Get input\n    n = int(stdin)\n    # Initialize\n    sum = 0\n    count = 0\n    # Find sum of n boxes\n    for i in range(n):\n        count += 1\n        sum += int(stdin)\n    # Test for missing boxes\n    if (n % 2 == 0):\n        # If there is an even number of boxes, arithmetic mean is the mean of the 2 middle numbers\n        median = int((n/2))\n        # If there are multiple boxes, median is the mean of the 2 middle numbers\n        range = sum - (count * int(stdin))\n        # If there are 4 boxes, range is the number of boxes minus the middle number\n    else:\n        # If there is an odd number of boxes, median is the middle number\n        median = int((n+1)/2) - 1\n        # If there are multiple boxes, range is the number of boxes minus the middle number\n        range = sum - (count * int(stdin))\n    # Test for requirements\n    if (median == range):\n        # If requirements are met, print the sum of missing boxes\n        print(\"YES\")\n        for i in range(n, n + 4):\n            print(i)\n    else:\n        # If requirements are not met, print \"NO\"\n        print(\"NO\")\n\nprint(solution(input()))\n"
    },
    {
        "number": 676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n    for i in range(q):\n        l, r, d = map(int, stdin.readline().split())\n        min_num = math.ceil(l / d) * d\n        min_num = min_num - (min_num % d) + d\n        result.append(min_num)\n    for r in result:\n        print(r)\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    n = []\n    for _ in range(q):\n        n.append(list(map(int, stdin.readline().split())))\n    n.sort()\n    for i in n:\n        r = 1\n        while r % i[1]!= 0:\n            r += 1\n        print(r - 1)\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        l, r, d = map(int, line.split())\n        ans = ((r - 1) // d) * d + d\n        if l <= ans <= r:\n            ans += d\n        print(ans)\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    q = int(input())\n    for i in range(q):\n        a, b, c = map(int, input().split())\n        n = a//c\n        print(max(0, (n+1)*c-a))\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q, *args = [int(x) for x in stdin.split('\\n')]\n    l, r, d = [], [], []\n    for i in range(q):\n        l_i, r_i, d_i = [int(x) for x in input().split(' ')]\n        l.append(l_i)\n        r.append(r_i)\n        d.append(d_i)\n    l.append(10 ** 9 + 1)\n    r.append(10 ** 9 + 1)\n    d.append(10 ** 9 + 1)\n    res = []\n    for i in range(q):\n        counter = 0\n        l_i, r_i, d_i = l[i], r[i], d[i]\n        for j in range(l_i, r_i + 1):\n            if j % d_i!= 0:\n                counter += 1\n        res.append(counter)\n    for r_res in res:\n        print(r_res)\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = []\n    for i in range(a, b + 1):\n        if i % c!= 0:\n            d.append(i)\n    return d[0]\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the result of each query and print the answer to each query.\n    :param stdin: the standard input of the program.\n    :return: the answer to each query.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = [int(s) for s in stdin.readline().strip().split(\" \")]\n    a = []\n    for i in range(n):\n        a.append(arr[i] * 2)\n    print(a)\n    return a"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns str\n    '''\n    answers = []\n    for line in stdin.splitlines():\n        line = line.split()\n        x = (int(line[0]) + int(line[1])) // int(line[2])\n        x += 1\n        answers.append(x)\n    return '\\n'.join(map(str, answers))\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '\\n'.join(stdin)\n"
    },
    {
        "number": 677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute minimum positive number x such that x % d = 0 and x not in [l, r]\"\n    pass\n\n\ndef"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    my_list = [int(x) for x in stdin.split()]\n    if len(my_list) == 1:\n        return my_list[0]\n    elif len(my_list) > 1:\n        if len(my_list) % 2 == 1:\n            sum = my_list[len(my_list) // 2]\n            for i in range(len(my_list) // 2 - 1, -1, -1):\n                sum += my_list[i]\n                sum *= my_list[i]\n        else:\n            sum = 0\n            for i in range(len(my_list) // 2):\n                sum += my_list[i]\n                sum *= my_list[i]\n        for i in range(len(my_list) // 2, len(my_list)):\n            sum += my_list[i]\n            sum *= my_list[i]\n        return sum\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  res = 0\n  for i in range(0, n):\n    res = res + float(str(i))\n  return res / n\nprint(solution(input()))\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n   ...\n    return x\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    xs = [int(stdin)]\n    for i in range(0, 10):\n        xs.append(int(stdin))\n    fxs = [0]\n    for i in range(0, 10):\n        if i == 0:\n            fxs.append(1)\n        elif i == 1:\n            fxs.append(xs[0])\n        else:\n            fxs.append(sum(fxs[i - 1] * xs[1:i + 1]))\n    return fxs[-1]\n\n\ndef"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    # print(lines)\n    # print(len(lines))\n    # return ''\n    foo = []\n    for i in range(0, len(lines)):\n        foo.append(lines[i])\n        # print(foo[i])\n        # print(i)\n    # print(foo)\n    # print(len(foo))\n    # print(foo[0])\n    return foo\n\nsolution('0\\n1\\n1')\n'''\ndef"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.6f}'.format(solve(stdin))\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split('\\n')]\n    return f\"{sum(numbers) / len(numbers):.6f}\"\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(stdin.readline()) for i in range(n)]\n    arr_freq = {}\n    for i in arr:\n        arr_freq[i] = arr_freq.get(i, 0) + 1\n    prod = 1\n    for k, v in arr_freq.items():\n        prod *= v\n    prod = prod ** (1 / len(arr))\n    return prod\n\n\nsolution()\n"
    },
    {
        "number": 678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split('\\n')\n    a = []\n    for n in x:\n        a.append(int(n))\n    c = []\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i == j:\n                c.append(a[i])\n    b = sum(c)\n    print(f'{b:.6f}')\nsolution(input())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Input-----\n\n9\n0\n1\n1\n1\n1\n1\n1\n1\n1\n\n-----Output-----\n\n1.0\ndef"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if... else 'No'\n\n\"\"\""
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here.\n    \"\"\"\n    return \"\""
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def group(input: str) -> set:\n        result = set()\n        for c in input:\n            if c not in result:\n                result.add(c)\n        return result\n    \n    def is_subset(a: set, b: set) -> bool:\n        return a.issubset(b) or a.issuperset(b)\n\n    matrix = [[c for c in s] for s in stdin.split(\".\") if len(s) > 0]\n    grid = set(\"AB\")\n    grid_matrix = [[c for c in s] for s in stdin.split(\".\") if len(s) > 0]\n    print(grid)\n    print(grid_matrix)\n    print(matrix)\n    for row in matrix:\n        for cell in row:\n            if cell not in grid:\n                return \"No\"\n\n    for row in grid_matrix:\n        for cell in row:\n            if cell not in grid:\n                return \"No\"\n\n    for row in matrix:\n        print(row)\n        for cell in row:\n            if cell == \".\":\n                print(cell)\n                for r in matrix:\n                    print(r)\n                    for c in r:\n                        print(c)\n                        print(cell in r)\n\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count('.') == 0:\n        return 'Yes'\n    k = stdin.count('.')\n    stdin = stdin.replace('.', '')\n    l = [0] * len(stdin)\n    for i in stdin:\n        if i == 'A':\n            l[0] = 1\n        if i == 'B':\n            l[1] = 1\n        if i == 'C':\n            l[2] = 1\n    for i in range(1, len(stdin)):\n        if l[i] == 0:\n            l[i] = l[i - 1] + l[i - 1]\n    for i in range(k):\n        if l[-1] - l[i] < 3:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    def scan(s: str) -> List[str]:\n        return s.split('.')\n\n    def scan_2(s: str) -> List[str]:\n        return s.split(' ')\n\n    if len(scan_2(stdin)) == 1:\n        r = scan_2(stdin)\n    else:\n        r = scan(stdin)\n    c = [[[] for _ in range(len(r[0]))] for _ in range(len(r))]\n    c[0][0].append(('A', 'A'))\n    c[0][0].append(('B', 'B'))\n    c[0][0].append(('C', 'C'))\n    for j in range(len(r)):\n        for i in range(len(r[j])):\n            if r[j][i] == 'A':\n                c[j][i].append(('A', 'A'))\n                c[j][i].append(('A', 'B'))\n                c[j][i].append(('A', 'C'))\n            elif r[j][i] == 'B':\n                c[j][i].append(('B', 'B'))\n                c[j][i].append(('B', 'A'))\n                c[j][i].append(('B', 'C'))\n            elif r[j][i] == 'C':\n                c[j][i].append(('C', 'C'))\n                c[j][i].append(('C', 'A'))\n                c[j][i].append(('C', 'B'))\n            else:\n                c[j][i].append(('N', 'N'))\n    for i in range(len(r)):\n        for j in range(len(r[0])):\n            if c[i][j] == []:\n                c[i][j] = [('N', 'N')]\n    m = list(map(list, zip(*c)))\n    for i in range(len(r)):\n        for j in range(len(r[0])):\n            if c[i][j] == []:\n                c[i][j] = [('N', 'N')]\n    for i in range(len(r)):\n        for j in range(len(r[0])):\n            if m[i][j] == []:\n                m[i][j] = [('N', 'N')]\n    for j in range(len(r[0])):\n        for i in range(len(r)):\n            if m[i][j] == []:\n                m[i][j] = [('N', 'N')]\n    if c[0][0] == [('A', 'A')] and c[0][0] == [('B', 'B')] and c[0][0] == [('C', 'C')] and c[0][0] == [('N', 'N')] and m[0][0] == [('N', 'N')] and m[0][0] == [('N', 'N')]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AA..CB\")\n    'No'\n    >>> solution(\".BAC.\")\n    'Yes'\n    \"\"\"\n    # https://stackoverflow.com/questions/13056604/python-list-comprehension\n    # https://stackoverflow.com/questions/354038/how-can-i-check-if-a-string-is-a-number-float\n    A = []\n    [A.append(i) for i in stdin if i not in A and not i.isdigit() and not i.isalpha()]\n    \n    # https://stackoverflow.com/questions/2361945/detecting-an-empty-python-list\n    if A:\n        # https://stackoverflow.com/questions/1687896/python-check-if-list-is-empty\n        # https://stackoverflow.com/questions/8600208/how-can-i-check-if-a-string-is-empty\n        if '.' not in stdin:\n            print('No')\n            return\n        else:\n            if '.' in stdin:\n                if len(A) % 3 == 0:\n                    print('Yes')\n                    return\n                else:\n                    print('No')\n                    return\n    else:\n        print('Yes')\n        return"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [cell for cell in stdin.split('.')]\n    for i in range(len(input_list)):\n        input_list[i] = list(input_list[i])\n        for j in range(len(input_list[i])):\n            if input_list[i][j] == '.':\n                continue\n            else:\n                if input_list[i][j] == 'A':\n                    input_list[i][j] = 'B'\n                elif input_list[i][j] == 'B':\n                    input_list[i][j] = 'C'\n                elif input_list[i][j] == 'C':\n                    input_list[i][j] = 'A'\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j] == 'B':\n                for k in range(len(input_list)):\n                    for l in range(len(input_list[k])):\n                        if input_list[k][l] == 'A':\n                            input_list[k][l] = 'C'\n                        elif input_list[k][l] == 'C':\n                            input_list[k][l] = 'B'\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j] == 'C':\n                for k in range(len(input_list)):\n                    for l in range(len(input_list[k])):\n                        if input_list[k][l] == 'A':\n                            input_list[k][l] = 'B'\n                        elif input_list[k][l] == 'B':\n                            input_list[k][l] = 'C'\n    return 'Yes' if any(i.count('.') == 0 and i.count('A') == 1 and i.count('B') == 1 and i.count('C') == 1 for i in input_list) else 'No'"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.strip('\\n')\n    for i in range(len(grid)):\n        grid[i] = grid[i].replace('.', '0')\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            grid[i][j] = int(grid[i][j])\n    return grid\n\"\"\"\n"
    },
    {
        "number": 679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    result = 0\n    for i in range(len(l)):\n        if l[i] == '.':\n            result += 1\n    for i in range(1, result + 1):\n        if l[i - 1] == 'A' and l[i] == 'B' and l[i + 1] == 'C':\n            return 'Yes'\n    return 'No'\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  xA, yA = [int(n) for n in stdin.split('\\n')[:2]]\n  xB, yB = [int(n) for n in stdin.split('\\n')[2:4]]\n  xC, yC = [int(n) for n in stdin.split('\\n')[4:6]]\n  print(5)\n  print(xA, yA)\n  print(xB, yB)\n  print(xC, yC)\n  return '0 0'\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_a, y_a, x_b, y_b, x_c, y_c = map(int, stdin.split())\n    res = []\n    for i in range(y_a, y_b + 1):\n        for j in range(x_a, x_c + 1):\n            res.append((j, i))\n    for i in range(y_a, y_b + 1):\n        for j in range(x_b, x_c + 1):\n            res.append((j, i))\n    for i in range(y_b, y_c + 1):\n        for j in range(x_a, x_c + 1):\n            res.append((j, i))\n    for i in range(y_b, y_c + 1):\n        for j in range(x_b, x_a + 1):\n            res.append((j, i))\n    return '\\n'.join(map(str, sorted(set(res))))\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the task.\"\"\"\n    pass\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n\n    \"\"\"\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n\nprint(solution(input()))"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.splitlines()\n    a = [int(x) for x in lst[:2]]\n    b = [int(x) for x in lst[2:4]]\n    c = [int(x) for x in lst[4:]]\n    plots = [a, b, c]\n    \n    def check(x, y):\n        for p in plots:\n            if p[0] == x and p[1] == y:\n                return True\n        return False\n    \n    cleared_plots = 0\n    \n    while cleared_plots < 3:\n        plots = list(filter(lambda x: not check(x[0], x[1]), plots))\n        cleared_plots += 1\n        plots = list(filter(lambda x: check(x[0] + 1, x[1]), plots))\n        plots = list(filter(lambda x: check(x[0] - 1, x[1]), plots))\n        plots = list(filter(lambda x: check(x[0], x[1] + 1), plots))\n        plots = list(filter(lambda x: check(x[0], x[1] - 1), plots))\n    \n    return str(len(plots))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '''\n'''\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.strip().split(\" \")\n    N, M = int(N), int(M)\n    return \"5\"\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split(' '))\n    return str(math.factorial(m)//math.factorial(n)*math.factorial(m-n))[-1]"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    if M == 0:\n        return 1\n    elif N == 1:\n        return 1\n    elif M > N:\n        return 0\n    elif M < N:\n        return pow(M, N, MOD)\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = stdin.split(\" \")\n    m, n = int(m), int(n)\n    ans = 0\n    if m > n:\n        m, n = n, m\n    n_fact = 1\n    m_fact = 1\n    for i in range(1, n + 1):\n        n_fact *= i\n    for i in range(1, m + 1):\n        m_fact *= i\n    for i in range(n + 1):\n        if i == 0:\n            ans += n_fact / m_fact\n        else:\n            ans += n_fact // m_fact\n        ans %= 1000000007\n    return ans\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string containing a description of the solution\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nN, M = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n======\n\n\n\nInput\n4 2\n\nOutput\n5\n\nInput\n3 2\n\nOutput\n3\n"
    },
    {
        "number": 681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the number of magic gems and the number of gems to split,\n    return the number of ways to split into a set of magic gems.\n    \"\"\"\n    N, M = [int(i) for i in stdin.split(' ')]\n    return f\"{math.factorial(M) // (math.factorial(N) * math.factorial(M - N)) % 1000000007}\\n\"\n"
    }
]